
Candleblow.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000225f0  01000000  01000000  00010000  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  010225f0  010225f0  000325f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000f98  20000000  010225f8  00040000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000073c0  20000f98  01023590  00040f98  2**3
                  ALLOC
  4 .stack        00003000  20008358  0102a950  00040f98  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00040f98  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00040fc2  2**0
                  CONTENTS, READONLY
  7 .debug_info   0003e1c0  00000000  00000000  0004101b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00008945  00000000  00000000  0007f1db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000d588  00000000  00000000  00087b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001aa0  00000000  00000000  000950a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001880  00000000  00000000  00096b48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00027366  00000000  00000000  000983c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0002899b  00000000  00000000  000bf72e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006b806  00000000  00000000  000e80c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00007988  00000000  00000000  001538d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

01000000 <exception_table>:
 1000000:	58 b3 00 20 c1 6f 00 01 65 70 00 01 65 70 00 01     X.. .o..ep..ep..
 1000010:	65 70 00 01 65 70 00 01 65 70 00 01 00 00 00 00     ep..ep..ep......
	...
 100002c:	39 75 00 01 65 70 00 01 00 00 00 00 31 76 00 01     9u..ep......1v..
 100003c:	71 76 00 01 65 70 00 01 65 70 00 01 65 70 00 01     qv..ep..ep..ep..
 100004c:	65 70 00 01 65 70 00 01 65 70 00 01 65 70 00 01     ep..ep..ep..ep..
 100005c:	65 70 00 01 65 70 00 01 65 70 00 01 00 00 00 00     ep..ep..ep......
 100006c:	99 47 00 01 b1 47 00 01 65 70 00 01 65 70 00 01     .G...G..ep..ep..
 100007c:	65 70 00 01 65 70 00 01 65 70 00 01 65 70 00 01     ep..ep..ep..ep..
 100008c:	65 70 00 01 65 70 00 01 65 70 00 01 65 70 00 01     ep..ep..ep..ep..
 100009c:	65 70 00 01 65 70 00 01 65 70 00 01 65 70 00 01     ep..ep..ep..ep..
 10000ac:	65 70 00 01 65 70 00 01 65 70 00 01 65 70 00 01     ep..ep..ep..ep..
	...
 10000fc:	65 70 00 01 c1 50 00 01 65 70 00 01 00 00 00 00     ep...P..ep......
	...

01000148 <__do_global_dtors_aux>:
 1000148:	b510      	push	{r4, lr}
 100014a:	4c05      	ldr	r4, [pc, #20]	; (1000160 <__do_global_dtors_aux+0x18>)
 100014c:	7823      	ldrb	r3, [r4, #0]
 100014e:	b933      	cbnz	r3, 100015e <__do_global_dtors_aux+0x16>
 1000150:	4b04      	ldr	r3, [pc, #16]	; (1000164 <__do_global_dtors_aux+0x1c>)
 1000152:	b113      	cbz	r3, 100015a <__do_global_dtors_aux+0x12>
 1000154:	4804      	ldr	r0, [pc, #16]	; (1000168 <__do_global_dtors_aux+0x20>)
 1000156:	f3af 8000 	nop.w
 100015a:	2301      	movs	r3, #1
 100015c:	7023      	strb	r3, [r4, #0]
 100015e:	bd10      	pop	{r4, pc}
 1000160:	20000f98 	.word	0x20000f98
 1000164:	00000000 	.word	0x00000000
 1000168:	010225f8 	.word	0x010225f8

0100016c <frame_dummy>:
 100016c:	4b0c      	ldr	r3, [pc, #48]	; (10001a0 <frame_dummy+0x34>)
 100016e:	b143      	cbz	r3, 1000182 <frame_dummy+0x16>
 1000170:	480c      	ldr	r0, [pc, #48]	; (10001a4 <frame_dummy+0x38>)
 1000172:	490d      	ldr	r1, [pc, #52]	; (10001a8 <frame_dummy+0x3c>)
 1000174:	b510      	push	{r4, lr}
 1000176:	f3af 8000 	nop.w
 100017a:	480c      	ldr	r0, [pc, #48]	; (10001ac <frame_dummy+0x40>)
 100017c:	6803      	ldr	r3, [r0, #0]
 100017e:	b923      	cbnz	r3, 100018a <frame_dummy+0x1e>
 1000180:	bd10      	pop	{r4, pc}
 1000182:	480a      	ldr	r0, [pc, #40]	; (10001ac <frame_dummy+0x40>)
 1000184:	6803      	ldr	r3, [r0, #0]
 1000186:	b933      	cbnz	r3, 1000196 <frame_dummy+0x2a>
 1000188:	4770      	bx	lr
 100018a:	4b09      	ldr	r3, [pc, #36]	; (10001b0 <frame_dummy+0x44>)
 100018c:	2b00      	cmp	r3, #0
 100018e:	d0f7      	beq.n	1000180 <frame_dummy+0x14>
 1000190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 1000194:	4718      	bx	r3
 1000196:	4b06      	ldr	r3, [pc, #24]	; (10001b0 <frame_dummy+0x44>)
 1000198:	2b00      	cmp	r3, #0
 100019a:	d0f5      	beq.n	1000188 <frame_dummy+0x1c>
 100019c:	4718      	bx	r3
 100019e:	bf00      	nop
 10001a0:	00000000 	.word	0x00000000
 10001a4:	010225f8 	.word	0x010225f8
 10001a8:	20000f9c 	.word	0x20000f9c
 10001ac:	010225f8 	.word	0x010225f8
 10001b0:	00000000 	.word	0x00000000

010001b4 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
 10001b4:	b480      	push	{r7}
 10001b6:	b08b      	sub	sp, #44	; 0x2c
 10001b8:	af00      	add	r7, sp, #0
 10001ba:	6078      	str	r0, [r7, #4]
 10001bc:	460b      	mov	r3, r1
 10001be:	70fb      	strb	r3, [r7, #3]
 10001c0:	687b      	ldr	r3, [r7, #4]
 10001c2:	627b      	str	r3, [r7, #36]	; 0x24
 10001c4:	78fb      	ldrb	r3, [r7, #3]
 10001c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 10001ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 10001cc:	61fb      	str	r3, [r7, #28]
 10001ce:	69fb      	ldr	r3, [r7, #28]
 10001d0:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
 10001d2:	69bb      	ldr	r3, [r7, #24]
 10001d4:	095b      	lsrs	r3, r3, #5
 10001d6:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
 10001d8:	697b      	ldr	r3, [r7, #20]
 10001da:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 10001de:	f203 7307 	addw	r3, r3, #1799	; 0x707
 10001e2:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
 10001e4:	613b      	str	r3, [r7, #16]

	if (level) {
 10001e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 10001ea:	2b00      	cmp	r3, #0
 10001ec:	d009      	beq.n	1000202 <ioport_set_pin_level+0x4e>
 10001ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 10001f0:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
 10001f2:	68fb      	ldr	r3, [r7, #12]
 10001f4:	f003 031f 	and.w	r3, r3, #31
 10001f8:	2201      	movs	r2, #1
 10001fa:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
 10001fc:	693b      	ldr	r3, [r7, #16]
 10001fe:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
 1000200:	e008      	b.n	1000214 <ioport_set_pin_level+0x60>
 1000202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 1000204:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
 1000206:	68bb      	ldr	r3, [r7, #8]
 1000208:	f003 031f 	and.w	r3, r3, #31
 100020c:	2201      	movs	r2, #1
 100020e:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
 1000210:	693b      	ldr	r3, [r7, #16]
 1000212:	635a      	str	r2, [r3, #52]	; 0x34
 1000214:	bf00      	nop
 1000216:	372c      	adds	r7, #44	; 0x2c
 1000218:	46bd      	mov	sp, r7
 100021a:	bc80      	pop	{r7}
 100021c:	4770      	bx	lr
	...

01000220 <on_phy_data>:

static spip_iface_t si;

static void
on_phy_data(void *data, const uint8_t *buffer, size_t size)
{
 1000220:	b580      	push	{r7, lr}
 1000222:	b084      	sub	sp, #16
 1000224:	af00      	add	r7, sp, #0
 1000226:	60f8      	str	r0, [r7, #12]
 1000228:	60b9      	str	r1, [r7, #8]
 100022a:	607a      	str	r2, [r7, #4]
  /* Back to master */
  spip_iface_write_frame(&si, buffer, size);
 100022c:	687a      	ldr	r2, [r7, #4]
 100022e:	68b9      	ldr	r1, [r7, #8]
 1000230:	4803      	ldr	r0, [pc, #12]	; (1000240 <on_phy_data+0x20>)
 1000232:	4b04      	ldr	r3, [pc, #16]	; (1000244 <on_phy_data+0x24>)
 1000234:	4798      	blx	r3
}
 1000236:	bf00      	nop
 1000238:	3710      	adds	r7, #16
 100023a:	46bd      	mov	sp, r7
 100023c:	bd80      	pop	{r7, pc}
 100023e:	bf00      	nop
 1000240:	20000fb8 	.word	0x20000fb8
 1000244:	0100b2e5 	.word	0x0100b2e5

01000248 <app_entry>:

void
app_entry(struct tx_task *tt)
{ 
 1000248:	b580      	push	{r7, lr}
 100024a:	b082      	sub	sp, #8
 100024c:	af00      	add	r7, sp, #0
 100024e:	6078      	str	r0, [r7, #4]
//  lcd_puts(0, "UART...");
//  lcd_printf(1, "SPIP@%ld bd", CONSOLE_BAUDRATE);
  
  spip_uart_interface_init(&si);
 1000250:	4812      	ldr	r0, [pc, #72]	; (100029c <app_entry+0x54>)
 1000252:	4b13      	ldr	r3, [pc, #76]	; (10002a0 <app_entry+0x58>)
 1000254:	4798      	blx	r3
  
//  lcd_puts(0, "PHY RX...");
  phy_set_rx_handler(on_phy_data, NULL);
 1000256:	2100      	movs	r1, #0
 1000258:	4812      	ldr	r0, [pc, #72]	; (10002a4 <app_entry+0x5c>)
 100025a:	4b13      	ldr	r3, [pc, #76]	; (10002a8 <app_entry+0x60>)
 100025c:	4798      	blx	r3
  
  LED_Off(LED0);
 100025e:	2101      	movs	r1, #1
 1000260:	200c      	movs	r0, #12
 1000262:	4b12      	ldr	r3, [pc, #72]	; (10002ac <app_entry+0x64>)
 1000264:	4798      	blx	r3
  LED_Off(LED1);
 1000266:	2101      	movs	r1, #1
 1000268:	200f      	movs	r0, #15
 100026a:	4b10      	ldr	r3, [pc, #64]	; (10002ac <app_entry+0x64>)
 100026c:	4798      	blx	r3
  
  LED_On(LED0);
 100026e:	2100      	movs	r1, #0
 1000270:	200c      	movs	r0, #12
 1000272:	4b0e      	ldr	r3, [pc, #56]	; (10002ac <app_entry+0x64>)
 1000274:	4798      	blx	r3
  
//  lcd_puts(0, "Probe ready! :)");
  spip_iface_board_loop(&si, tt);
 1000276:	6879      	ldr	r1, [r7, #4]
 1000278:	4808      	ldr	r0, [pc, #32]	; (100029c <app_entry+0x54>)
 100027a:	4b0d      	ldr	r3, [pc, #52]	; (10002b0 <app_entry+0x68>)
 100027c:	4798      	blx	r3
//  lcd_puts(0, "HANG!!");
  LED_Off(LED0);
 100027e:	2101      	movs	r1, #1
 1000280:	200c      	movs	r0, #12
 1000282:	4b0a      	ldr	r3, [pc, #40]	; (10002ac <app_entry+0x64>)
 1000284:	4798      	blx	r3
  LED_Off(LED1);
 1000286:	2101      	movs	r1, #1
 1000288:	200f      	movs	r0, #15
 100028a:	4b08      	ldr	r3, [pc, #32]	; (10002ac <app_entry+0x64>)
 100028c:	4798      	blx	r3
  hang();
 100028e:	4b09      	ldr	r3, [pc, #36]	; (10002b4 <app_entry+0x6c>)
 1000290:	4798      	blx	r3
}
 1000292:	bf00      	nop
 1000294:	3708      	adds	r7, #8
 1000296:	46bd      	mov	sp, r7
 1000298:	bd80      	pop	{r7, pc}
 100029a:	bf00      	nop
 100029c:	20000fb8 	.word	0x20000fb8
 10002a0:	0100b355 	.word	0x0100b355
 10002a4:	01000221 	.word	0x01000221
 10002a8:	0100a8d1 	.word	0x0100a8d1
 10002ac:	010001b5 	.word	0x010001b5
 10002b0:	0100a8a9 	.word	0x0100a8a9
 10002b4:	0100a3c9 	.word	0x0100a3c9

010002b8 <atpl360_ib_db_init>:
/**
 * \brief Initialize all static vars
 *
 */
void atpl360_ib_db_init(void)
{
 10002b8:	b480      	push	{r7}
 10002ba:	af00      	add	r7, sp, #0
	memcpy(puc_description, ATPL360_HOST_DESCRIPTION, sizeof(char) * PRODUCT_DESCRIPTION_LEN);
 10002bc:	4b09      	ldr	r3, [pc, #36]	; (10002e4 <atpl360_ib_db_init+0x2c>)
 10002be:	4a0a      	ldr	r2, [pc, #40]	; (10002e8 <atpl360_ib_db_init+0x30>)
 10002c0:	ca07      	ldmia	r2, {r0, r1, r2}
 10002c2:	c303      	stmia	r3!, {r0, r1}
 10002c4:	801a      	strh	r2, [r3, #0]
	us_model_id = ATPL360_HOST_MODEL;
 10002c6:	4b09      	ldr	r3, [pc, #36]	; (10002ec <atpl360_ib_db_init+0x34>)
 10002c8:	2202      	movs	r2, #2
 10002ca:	801a      	strh	r2, [r3, #0]
	ul_version = ATPL360_HOST_VERSION;
 10002cc:	4b08      	ldr	r3, [pc, #32]	; (10002f0 <atpl360_ib_db_init+0x38>)
 10002ce:	4a09      	ldr	r2, [pc, #36]	; (10002f4 <atpl360_ib_db_init+0x3c>)
 10002d0:	601a      	str	r2, [r3, #0]
	us_product_id = ATPL360_HOST_PRODUCT;
 10002d2:	4b09      	ldr	r3, [pc, #36]	; (10002f8 <atpl360_ib_db_init+0x40>)
 10002d4:	f44f 5258 	mov.w	r2, #13824	; 0x3600
 10002d8:	801a      	strh	r2, [r3, #0]
}
 10002da:	bf00      	nop
 10002dc:	46bd      	mov	sp, r7
 10002de:	bc80      	pop	{r7}
 10002e0:	4770      	bx	lr
 10002e2:	bf00      	nop
 10002e4:	20000ff0 	.word	0x20000ff0
 10002e8:	010119b4 	.word	0x010119b4
 10002ec:	20000ffa 	.word	0x20000ffa
 10002f0:	20000ffc 	.word	0x20000ffc
 10002f4:	36000301 	.word	0x36000301
 10002f8:	20001000 	.word	0x20001000

010002fc <atpl360_get_address_params_table>:

const atpl360_db_param_t *atpl360_get_address_params_table(void)
{
 10002fc:	b480      	push	{r7}
 10002fe:	af00      	add	r7, sp, #0
	return param_id;
 1000300:	4b02      	ldr	r3, [pc, #8]	; (100030c <atpl360_get_address_params_table+0x10>)
}
 1000302:	4618      	mov	r0, r3
 1000304:	46bd      	mov	sp, r7
 1000306:	bc80      	pop	{r7}
 1000308:	4770      	bx	lr
 100030a:	bf00      	nop
 100030c:	01011978 	.word	0x01011978

01000310 <atpl360_comm_stringify>:
 * \param pv_src       Pointer to struct to convert
 * \param us_src_size  Size of the struct to convert
 *
 */
uint16_t atpl360_comm_stringify(uint8_t *pv_dst, void *pv_src, uint16_t us_src_size)
{
 1000310:	b580      	push	{r7, lr}
 1000312:	b088      	sub	sp, #32
 1000314:	af00      	add	r7, sp, #0
 1000316:	60f8      	str	r0, [r7, #12]
 1000318:	60b9      	str	r1, [r7, #8]
 100031a:	4613      	mov	r3, r2
 100031c:	80fb      	strh	r3, [r7, #6]
	uint8_t *puc_dest_buf;
	uint16_t us_param_len;

	puc_dest_buf = pv_dst;
 100031e:	68fb      	ldr	r3, [r7, #12]
 1000320:	61bb      	str	r3, [r7, #24]
	us_param_len = 0;
 1000322:	2300      	movs	r3, #0
 1000324:	83fb      	strh	r3, [r7, #30]

	if (us_src_size == sizeof(tx_msg_t)) {
 1000326:	88fb      	ldrh	r3, [r7, #6]
 1000328:	2b11      	cmp	r3, #17
 100032a:	d16b      	bne.n	1000404 <atpl360_comm_stringify+0xf4>
		tx_msg_t *tx_msg_data;
		tx_msg_data = (tx_msg_t *)pv_src;
 100032c:	68bb      	ldr	r3, [r7, #8]
 100032e:	617b      	str	r3, [r7, #20]

		/* Check data len */
		if (tx_msg_data->us_data_len == 0) {
 1000330:	697b      	ldr	r3, [r7, #20]
 1000332:	889b      	ldrh	r3, [r3, #4]
 1000334:	b29b      	uxth	r3, r3
 1000336:	2b00      	cmp	r3, #0
 1000338:	d101      	bne.n	100033e <atpl360_comm_stringify+0x2e>
			return 0;
 100033a:	2300      	movs	r3, #0
 100033c:	e063      	b.n	1000406 <atpl360_comm_stringify+0xf6>
		}

		*puc_dest_buf++ = (uint8_t)tx_msg_data->ul_tx_time;
 100033e:	69bb      	ldr	r3, [r7, #24]
 1000340:	1c5a      	adds	r2, r3, #1
 1000342:	61ba      	str	r2, [r7, #24]
 1000344:	697a      	ldr	r2, [r7, #20]
 1000346:	6812      	ldr	r2, [r2, #0]
 1000348:	b2d2      	uxtb	r2, r2
 100034a:	701a      	strb	r2, [r3, #0]
		*puc_dest_buf++ = (uint8_t)(tx_msg_data->ul_tx_time >> 8);
 100034c:	69bb      	ldr	r3, [r7, #24]
 100034e:	1c5a      	adds	r2, r3, #1
 1000350:	61ba      	str	r2, [r7, #24]
 1000352:	697a      	ldr	r2, [r7, #20]
 1000354:	6812      	ldr	r2, [r2, #0]
 1000356:	0a12      	lsrs	r2, r2, #8
 1000358:	b2d2      	uxtb	r2, r2
 100035a:	701a      	strb	r2, [r3, #0]
		*puc_dest_buf++ = (uint8_t)(tx_msg_data->ul_tx_time >> 16);
 100035c:	69bb      	ldr	r3, [r7, #24]
 100035e:	1c5a      	adds	r2, r3, #1
 1000360:	61ba      	str	r2, [r7, #24]
 1000362:	697a      	ldr	r2, [r7, #20]
 1000364:	6812      	ldr	r2, [r2, #0]
 1000366:	0c12      	lsrs	r2, r2, #16
 1000368:	b2d2      	uxtb	r2, r2
 100036a:	701a      	strb	r2, [r3, #0]
		*puc_dest_buf++ = (uint8_t)(tx_msg_data->ul_tx_time >> 24);
 100036c:	69bb      	ldr	r3, [r7, #24]
 100036e:	1c5a      	adds	r2, r3, #1
 1000370:	61ba      	str	r2, [r7, #24]
 1000372:	697a      	ldr	r2, [r7, #20]
 1000374:	6812      	ldr	r2, [r2, #0]
 1000376:	0e12      	lsrs	r2, r2, #24
 1000378:	b2d2      	uxtb	r2, r2
 100037a:	701a      	strb	r2, [r3, #0]
		*puc_dest_buf++ = (uint8_t)tx_msg_data->us_data_len;
 100037c:	69bb      	ldr	r3, [r7, #24]
 100037e:	1c5a      	adds	r2, r3, #1
 1000380:	61ba      	str	r2, [r7, #24]
 1000382:	697a      	ldr	r2, [r7, #20]
 1000384:	8892      	ldrh	r2, [r2, #4]
 1000386:	b292      	uxth	r2, r2
 1000388:	b2d2      	uxtb	r2, r2
 100038a:	701a      	strb	r2, [r3, #0]
		*puc_dest_buf++ = (uint8_t)(tx_msg_data->us_data_len >> 8);
 100038c:	69bb      	ldr	r3, [r7, #24]
 100038e:	1c5a      	adds	r2, r3, #1
 1000390:	61ba      	str	r2, [r7, #24]
 1000392:	697a      	ldr	r2, [r7, #20]
 1000394:	8892      	ldrh	r2, [r2, #4]
 1000396:	b292      	uxth	r2, r2
 1000398:	0a12      	lsrs	r2, r2, #8
 100039a:	b292      	uxth	r2, r2
 100039c:	b2d2      	uxtb	r2, r2
 100039e:	701a      	strb	r2, [r3, #0]
		*puc_dest_buf++ = tx_msg_data->uc_att_level;
 10003a0:	69bb      	ldr	r3, [r7, #24]
 10003a2:	1c5a      	adds	r2, r3, #1
 10003a4:	61ba      	str	r2, [r7, #24]
 10003a6:	697a      	ldr	r2, [r7, #20]
 10003a8:	7992      	ldrb	r2, [r2, #6]
 10003aa:	701a      	strb	r2, [r3, #0]
		*puc_dest_buf++ = tx_msg_data->uc_scheme;
 10003ac:	69bb      	ldr	r3, [r7, #24]
 10003ae:	1c5a      	adds	r2, r3, #1
 10003b0:	61ba      	str	r2, [r7, #24]
 10003b2:	697a      	ldr	r2, [r7, #20]
 10003b4:	79d2      	ldrb	r2, [r2, #7]
 10003b6:	701a      	strb	r2, [r3, #0]
		*puc_dest_buf++ = tx_msg_data->uc_disable_rx;
 10003b8:	69bb      	ldr	r3, [r7, #24]
 10003ba:	1c5a      	adds	r2, r3, #1
 10003bc:	61ba      	str	r2, [r7, #24]
 10003be:	697a      	ldr	r2, [r7, #20]
 10003c0:	7a12      	ldrb	r2, [r2, #8]
 10003c2:	701a      	strb	r2, [r3, #0]
		*puc_dest_buf++ = tx_msg_data->uc_mod_type;
 10003c4:	69bb      	ldr	r3, [r7, #24]
 10003c6:	1c5a      	adds	r2, r3, #1
 10003c8:	61ba      	str	r2, [r7, #24]
 10003ca:	697a      	ldr	r2, [r7, #20]
 10003cc:	7a52      	ldrb	r2, [r2, #9]
 10003ce:	701a      	strb	r2, [r3, #0]
		*puc_dest_buf++ = tx_msg_data->uc_tx_mode;
 10003d0:	69bb      	ldr	r3, [r7, #24]
 10003d2:	1c5a      	adds	r2, r3, #1
 10003d4:	61ba      	str	r2, [r7, #24]
 10003d6:	697a      	ldr	r2, [r7, #20]
 10003d8:	7a92      	ldrb	r2, [r2, #10]
 10003da:	701a      	strb	r2, [r3, #0]
		*puc_dest_buf++ = tx_msg_data->uc_buffer_id;
 10003dc:	69bb      	ldr	r3, [r7, #24]
 10003de:	1c5a      	adds	r2, r3, #1
 10003e0:	61ba      	str	r2, [r7, #24]
 10003e2:	697a      	ldr	r2, [r7, #20]
 10003e4:	7ad2      	ldrb	r2, [r2, #11]
 10003e6:	701a      	strb	r2, [r3, #0]

		us_param_len = (uint16_t)(puc_dest_buf - pv_dst);
 10003e8:	69ba      	ldr	r2, [r7, #24]
 10003ea:	68fb      	ldr	r3, [r7, #12]
 10003ec:	1ad3      	subs	r3, r2, r3
 10003ee:	83fb      	strh	r3, [r7, #30]

		memcpy(puc_dest_buf, tx_msg_data->puc_data_buf, tx_msg_data->us_data_len);
 10003f0:	697b      	ldr	r3, [r7, #20]
 10003f2:	f8d3 100d 	ldr.w	r1, [r3, #13]
 10003f6:	697b      	ldr	r3, [r7, #20]
 10003f8:	889b      	ldrh	r3, [r3, #4]
 10003fa:	b29b      	uxth	r3, r3
 10003fc:	461a      	mov	r2, r3
 10003fe:	69b8      	ldr	r0, [r7, #24]
 1000400:	4b03      	ldr	r3, [pc, #12]	; (1000410 <atpl360_comm_stringify+0x100>)
 1000402:	4798      	blx	r3
	}

	return us_param_len;
 1000404:	8bfb      	ldrh	r3, [r7, #30]
}
 1000406:	4618      	mov	r0, r3
 1000408:	3720      	adds	r7, #32
 100040a:	46bd      	mov	sp, r7
 100040c:	bd80      	pop	{r7, pc}
 100040e:	bf00      	nop
 1000410:	0100c551 	.word	0x0100c551

01000414 <atpl360_comm_parse>:
 * \param pv_src       Pointer to buffer to get data
 * \param us_dst_size  Size of the struct to parse
 *
 */
atpl360_comm_status_t atpl360_comm_parse(void *pv_dst, uint8_t *puc_src, uint16_t us_dst_size)
{
 1000414:	b480      	push	{r7}
 1000416:	b089      	sub	sp, #36	; 0x24
 1000418:	af00      	add	r7, sp, #0
 100041a:	60f8      	str	r0, [r7, #12]
 100041c:	60b9      	str	r1, [r7, #8]
 100041e:	4613      	mov	r3, r2
 1000420:	80fb      	strh	r3, [r7, #6]
	uint8_t *puc_src_buf;
	atpl360_comm_status_t uc_result;

	uc_result = ATPL360_COMM_SUCCESS;
 1000422:	2300      	movs	r3, #0
 1000424:	77fb      	strb	r3, [r7, #31]
	puc_src_buf = puc_src;
 1000426:	68bb      	ldr	r3, [r7, #8]
 1000428:	61bb      	str	r3, [r7, #24]

	if (us_dst_size == sizeof(rx_msg_t)) {
 100042a:	88fb      	ldrh	r3, [r7, #6]
 100042c:	2b20      	cmp	r3, #32
 100042e:	f040 80fa 	bne.w	1000626 <atpl360_comm_parse+0x212>
		rx_msg_t *rx_msg_data;

		rx_msg_data = (rx_msg_t *)pv_dst;
 1000432:	68fb      	ldr	r3, [r7, #12]
 1000434:	617b      	str	r3, [r7, #20]

		/* Parse gral info */
		rx_msg_data->ul_evm_header_acum = (uint32_t)*puc_src_buf++;
 1000436:	69bb      	ldr	r3, [r7, #24]
 1000438:	1c5a      	adds	r2, r3, #1
 100043a:	61ba      	str	r2, [r7, #24]
 100043c:	781b      	ldrb	r3, [r3, #0]
 100043e:	461a      	mov	r2, r3
 1000440:	697b      	ldr	r3, [r7, #20]
 1000442:	601a      	str	r2, [r3, #0]
		rx_msg_data->ul_evm_header_acum += (uint32_t)*puc_src_buf++ << 8;
 1000444:	69bb      	ldr	r3, [r7, #24]
 1000446:	1c5a      	adds	r2, r3, #1
 1000448:	61ba      	str	r2, [r7, #24]
 100044a:	781b      	ldrb	r3, [r3, #0]
 100044c:	021b      	lsls	r3, r3, #8
 100044e:	697a      	ldr	r2, [r7, #20]
 1000450:	6812      	ldr	r2, [r2, #0]
 1000452:	441a      	add	r2, r3
 1000454:	697b      	ldr	r3, [r7, #20]
 1000456:	601a      	str	r2, [r3, #0]
		rx_msg_data->ul_evm_header_acum += (uint32_t)*puc_src_buf++ << 16;
 1000458:	69bb      	ldr	r3, [r7, #24]
 100045a:	1c5a      	adds	r2, r3, #1
 100045c:	61ba      	str	r2, [r7, #24]
 100045e:	781b      	ldrb	r3, [r3, #0]
 1000460:	041b      	lsls	r3, r3, #16
 1000462:	697a      	ldr	r2, [r7, #20]
 1000464:	6812      	ldr	r2, [r2, #0]
 1000466:	441a      	add	r2, r3
 1000468:	697b      	ldr	r3, [r7, #20]
 100046a:	601a      	str	r2, [r3, #0]
		rx_msg_data->ul_evm_header_acum += (uint32_t)*puc_src_buf++ << 24;
 100046c:	69bb      	ldr	r3, [r7, #24]
 100046e:	1c5a      	adds	r2, r3, #1
 1000470:	61ba      	str	r2, [r7, #24]
 1000472:	781b      	ldrb	r3, [r3, #0]
 1000474:	061b      	lsls	r3, r3, #24
 1000476:	697a      	ldr	r2, [r7, #20]
 1000478:	6812      	ldr	r2, [r2, #0]
 100047a:	441a      	add	r2, r3
 100047c:	697b      	ldr	r3, [r7, #20]
 100047e:	601a      	str	r2, [r3, #0]
		rx_msg_data->ul_evm_payload_acum = (uint32_t)*puc_src_buf++;
 1000480:	69bb      	ldr	r3, [r7, #24]
 1000482:	1c5a      	adds	r2, r3, #1
 1000484:	61ba      	str	r2, [r7, #24]
 1000486:	781b      	ldrb	r3, [r3, #0]
 1000488:	461a      	mov	r2, r3
 100048a:	697b      	ldr	r3, [r7, #20]
 100048c:	605a      	str	r2, [r3, #4]
		rx_msg_data->ul_evm_payload_acum += (uint32_t)*puc_src_buf++ << 8;
 100048e:	69bb      	ldr	r3, [r7, #24]
 1000490:	1c5a      	adds	r2, r3, #1
 1000492:	61ba      	str	r2, [r7, #24]
 1000494:	781b      	ldrb	r3, [r3, #0]
 1000496:	021b      	lsls	r3, r3, #8
 1000498:	697a      	ldr	r2, [r7, #20]
 100049a:	6852      	ldr	r2, [r2, #4]
 100049c:	441a      	add	r2, r3
 100049e:	697b      	ldr	r3, [r7, #20]
 10004a0:	605a      	str	r2, [r3, #4]
		rx_msg_data->ul_evm_payload_acum += (uint32_t)*puc_src_buf++ << 16;
 10004a2:	69bb      	ldr	r3, [r7, #24]
 10004a4:	1c5a      	adds	r2, r3, #1
 10004a6:	61ba      	str	r2, [r7, #24]
 10004a8:	781b      	ldrb	r3, [r3, #0]
 10004aa:	041b      	lsls	r3, r3, #16
 10004ac:	697a      	ldr	r2, [r7, #20]
 10004ae:	6852      	ldr	r2, [r2, #4]
 10004b0:	441a      	add	r2, r3
 10004b2:	697b      	ldr	r3, [r7, #20]
 10004b4:	605a      	str	r2, [r3, #4]
		rx_msg_data->ul_evm_payload_acum += (uint32_t)*puc_src_buf++ << 24;
 10004b6:	69bb      	ldr	r3, [r7, #24]
 10004b8:	1c5a      	adds	r2, r3, #1
 10004ba:	61ba      	str	r2, [r7, #24]
 10004bc:	781b      	ldrb	r3, [r3, #0]
 10004be:	061b      	lsls	r3, r3, #24
 10004c0:	697a      	ldr	r2, [r7, #20]
 10004c2:	6852      	ldr	r2, [r2, #4]
 10004c4:	441a      	add	r2, r3
 10004c6:	697b      	ldr	r3, [r7, #20]
 10004c8:	605a      	str	r2, [r3, #4]
		rx_msg_data->ul_rx_time = (uint32_t)*puc_src_buf++;
 10004ca:	69bb      	ldr	r3, [r7, #24]
 10004cc:	1c5a      	adds	r2, r3, #1
 10004ce:	61ba      	str	r2, [r7, #24]
 10004d0:	781b      	ldrb	r3, [r3, #0]
 10004d2:	461a      	mov	r2, r3
 10004d4:	697b      	ldr	r3, [r7, #20]
 10004d6:	609a      	str	r2, [r3, #8]
		rx_msg_data->ul_rx_time += (uint32_t)*puc_src_buf++ << 8;
 10004d8:	69bb      	ldr	r3, [r7, #24]
 10004da:	1c5a      	adds	r2, r3, #1
 10004dc:	61ba      	str	r2, [r7, #24]
 10004de:	781b      	ldrb	r3, [r3, #0]
 10004e0:	021b      	lsls	r3, r3, #8
 10004e2:	697a      	ldr	r2, [r7, #20]
 10004e4:	6892      	ldr	r2, [r2, #8]
 10004e6:	441a      	add	r2, r3
 10004e8:	697b      	ldr	r3, [r7, #20]
 10004ea:	609a      	str	r2, [r3, #8]
		rx_msg_data->ul_rx_time += (uint32_t)*puc_src_buf++ << 16;
 10004ec:	69bb      	ldr	r3, [r7, #24]
 10004ee:	1c5a      	adds	r2, r3, #1
 10004f0:	61ba      	str	r2, [r7, #24]
 10004f2:	781b      	ldrb	r3, [r3, #0]
 10004f4:	041b      	lsls	r3, r3, #16
 10004f6:	697a      	ldr	r2, [r7, #20]
 10004f8:	6892      	ldr	r2, [r2, #8]
 10004fa:	441a      	add	r2, r3
 10004fc:	697b      	ldr	r3, [r7, #20]
 10004fe:	609a      	str	r2, [r3, #8]
		rx_msg_data->ul_rx_time += (uint32_t)*puc_src_buf++ << 24;
 1000500:	69bb      	ldr	r3, [r7, #24]
 1000502:	1c5a      	adds	r2, r3, #1
 1000504:	61ba      	str	r2, [r7, #24]
 1000506:	781b      	ldrb	r3, [r3, #0]
 1000508:	061b      	lsls	r3, r3, #24
 100050a:	697a      	ldr	r2, [r7, #20]
 100050c:	6892      	ldr	r2, [r2, #8]
 100050e:	441a      	add	r2, r3
 1000510:	697b      	ldr	r3, [r7, #20]
 1000512:	609a      	str	r2, [r3, #8]
		rx_msg_data->us_evm_header = (uint16_t)*puc_src_buf++;
 1000514:	69bb      	ldr	r3, [r7, #24]
 1000516:	1c5a      	adds	r2, r3, #1
 1000518:	61ba      	str	r2, [r7, #24]
 100051a:	781b      	ldrb	r3, [r3, #0]
 100051c:	b29a      	uxth	r2, r3
 100051e:	697b      	ldr	r3, [r7, #20]
 1000520:	819a      	strh	r2, [r3, #12]
		rx_msg_data->us_evm_header += (uint16_t)*puc_src_buf++ << 8;
 1000522:	69bb      	ldr	r3, [r7, #24]
 1000524:	1c5a      	adds	r2, r3, #1
 1000526:	61ba      	str	r2, [r7, #24]
 1000528:	781b      	ldrb	r3, [r3, #0]
 100052a:	0219      	lsls	r1, r3, #8
 100052c:	697b      	ldr	r3, [r7, #20]
 100052e:	899b      	ldrh	r3, [r3, #12]
 1000530:	b29a      	uxth	r2, r3
 1000532:	b28b      	uxth	r3, r1
 1000534:	4413      	add	r3, r2
 1000536:	b29a      	uxth	r2, r3
 1000538:	697b      	ldr	r3, [r7, #20]
 100053a:	819a      	strh	r2, [r3, #12]
		rx_msg_data->us_evm_payload = (uint16_t)*puc_src_buf++;
 100053c:	69bb      	ldr	r3, [r7, #24]
 100053e:	1c5a      	adds	r2, r3, #1
 1000540:	61ba      	str	r2, [r7, #24]
 1000542:	781b      	ldrb	r3, [r3, #0]
 1000544:	b29a      	uxth	r2, r3
 1000546:	697b      	ldr	r3, [r7, #20]
 1000548:	81da      	strh	r2, [r3, #14]
		rx_msg_data->us_evm_payload += (uint16_t)*puc_src_buf++ << 8;
 100054a:	69bb      	ldr	r3, [r7, #24]
 100054c:	1c5a      	adds	r2, r3, #1
 100054e:	61ba      	str	r2, [r7, #24]
 1000550:	781b      	ldrb	r3, [r3, #0]
 1000552:	0219      	lsls	r1, r3, #8
 1000554:	697b      	ldr	r3, [r7, #20]
 1000556:	89db      	ldrh	r3, [r3, #14]
 1000558:	b29a      	uxth	r2, r3
 100055a:	b28b      	uxth	r3, r1
 100055c:	4413      	add	r3, r2
 100055e:	b29a      	uxth	r2, r3
 1000560:	697b      	ldr	r3, [r7, #20]
 1000562:	81da      	strh	r2, [r3, #14]
		rx_msg_data->us_data_len = (uint16_t)*puc_src_buf++;
 1000564:	69bb      	ldr	r3, [r7, #24]
 1000566:	1c5a      	adds	r2, r3, #1
 1000568:	61ba      	str	r2, [r7, #24]
 100056a:	781b      	ldrb	r3, [r3, #0]
 100056c:	b29a      	uxth	r2, r3
 100056e:	697b      	ldr	r3, [r7, #20]
 1000570:	821a      	strh	r2, [r3, #16]
		rx_msg_data->us_data_len += (uint16_t)*puc_src_buf++ << 8;
 1000572:	69bb      	ldr	r3, [r7, #24]
 1000574:	1c5a      	adds	r2, r3, #1
 1000576:	61ba      	str	r2, [r7, #24]
 1000578:	781b      	ldrb	r3, [r3, #0]
 100057a:	0219      	lsls	r1, r3, #8
 100057c:	697b      	ldr	r3, [r7, #20]
 100057e:	8a1b      	ldrh	r3, [r3, #16]
 1000580:	b29a      	uxth	r2, r3
 1000582:	b28b      	uxth	r3, r1
 1000584:	4413      	add	r3, r2
 1000586:	b29a      	uxth	r2, r3
 1000588:	697b      	ldr	r3, [r7, #20]
 100058a:	821a      	strh	r2, [r3, #16]

		if ((rx_msg_data->us_data_len == 0) || (rx_msg_data->us_data_len > 512)) {
 100058c:	697b      	ldr	r3, [r7, #20]
 100058e:	8a1b      	ldrh	r3, [r3, #16]
 1000590:	b29b      	uxth	r3, r3
 1000592:	2b00      	cmp	r3, #0
 1000594:	d005      	beq.n	10005a2 <atpl360_comm_parse+0x18e>
 1000596:	697b      	ldr	r3, [r7, #20]
 1000598:	8a1b      	ldrh	r3, [r3, #16]
 100059a:	b29b      	uxth	r3, r3
 100059c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 10005a0:	d901      	bls.n	10005a6 <atpl360_comm_parse+0x192>
			return ATPL360_COMM_ERROR;
 10005a2:	2301      	movs	r3, #1
 10005a4:	e0a2      	b.n	10006ec <atpl360_comm_parse+0x2d8>
		}

		rx_msg_data->uc_scheme = (enum mod_schemes)*puc_src_buf++;
 10005a6:	69bb      	ldr	r3, [r7, #24]
 10005a8:	1c5a      	adds	r2, r3, #1
 10005aa:	61ba      	str	r2, [r7, #24]
 10005ac:	781a      	ldrb	r2, [r3, #0]
 10005ae:	697b      	ldr	r3, [r7, #20]
 10005b0:	749a      	strb	r2, [r3, #18]
		rx_msg_data->uc_mod_type = (enum mode_types)*puc_src_buf++;
 10005b2:	69bb      	ldr	r3, [r7, #24]
 10005b4:	1c5a      	adds	r2, r3, #1
 10005b6:	61ba      	str	r2, [r7, #24]
 10005b8:	781a      	ldrb	r2, [r3, #0]
 10005ba:	697b      	ldr	r3, [r7, #20]
 10005bc:	74da      	strb	r2, [r3, #19]
		rx_msg_data->uc_header_type = (enum header_types)*puc_src_buf++;
 10005be:	69bb      	ldr	r3, [r7, #24]
 10005c0:	1c5a      	adds	r2, r3, #1
 10005c2:	61ba      	str	r2, [r7, #24]
 10005c4:	781a      	ldrb	r2, [r3, #0]
 10005c6:	697b      	ldr	r3, [r7, #20]
 10005c8:	751a      	strb	r2, [r3, #20]

		rx_msg_data->uc_rssi_avg = *puc_src_buf++;
 10005ca:	69bb      	ldr	r3, [r7, #24]
 10005cc:	1c5a      	adds	r2, r3, #1
 10005ce:	61ba      	str	r2, [r7, #24]
 10005d0:	781a      	ldrb	r2, [r3, #0]
 10005d2:	697b      	ldr	r3, [r7, #20]
 10005d4:	755a      	strb	r2, [r3, #21]
		rx_msg_data->uc_cinr_avg = *puc_src_buf++;
 10005d6:	69bb      	ldr	r3, [r7, #24]
 10005d8:	1c5a      	adds	r2, r3, #1
 10005da:	61ba      	str	r2, [r7, #24]
 10005dc:	781a      	ldrb	r2, [r3, #0]
 10005de:	697b      	ldr	r3, [r7, #20]
 10005e0:	759a      	strb	r2, [r3, #22]
		rx_msg_data->uc_cinr_min = *puc_src_buf++;
 10005e2:	69bb      	ldr	r3, [r7, #24]
 10005e4:	1c5a      	adds	r2, r3, #1
 10005e6:	61ba      	str	r2, [r7, #24]
 10005e8:	781a      	ldrb	r2, [r3, #0]
 10005ea:	697b      	ldr	r3, [r7, #20]
 10005ec:	75da      	strb	r2, [r3, #23]
		rx_msg_data->uc_ber_soft = *puc_src_buf++;
 10005ee:	69bb      	ldr	r3, [r7, #24]
 10005f0:	1c5a      	adds	r2, r3, #1
 10005f2:	61ba      	str	r2, [r7, #24]
 10005f4:	781a      	ldrb	r2, [r3, #0]
 10005f6:	697b      	ldr	r3, [r7, #20]
 10005f8:	761a      	strb	r2, [r3, #24]
		rx_msg_data->uc_ber_soft_max = *puc_src_buf++;
 10005fa:	69bb      	ldr	r3, [r7, #24]
 10005fc:	1c5a      	adds	r2, r3, #1
 10005fe:	61ba      	str	r2, [r7, #24]
 1000600:	781a      	ldrb	r2, [r3, #0]
 1000602:	697b      	ldr	r3, [r7, #20]
 1000604:	765a      	strb	r2, [r3, #25]

		rx_msg_data->uc_nar_bnd_percent = *puc_src_buf++;
 1000606:	69bb      	ldr	r3, [r7, #24]
 1000608:	1c5a      	adds	r2, r3, #1
 100060a:	61ba      	str	r2, [r7, #24]
 100060c:	781a      	ldrb	r2, [r3, #0]
 100060e:	697b      	ldr	r3, [r7, #20]
 1000610:	769a      	strb	r2, [r3, #26]
		rx_msg_data->uc_imp_percent = *puc_src_buf++;
 1000612:	69bb      	ldr	r3, [r7, #24]
 1000614:	1c5a      	adds	r2, r3, #1
 1000616:	61ba      	str	r2, [r7, #24]
 1000618:	781a      	ldrb	r2, [r3, #0]
 100061a:	697b      	ldr	r3, [r7, #20]
 100061c:	76da      	strb	r2, [r3, #27]

		/* Store only pointer to data. Use the same bufffer */
		rx_msg_data->puc_data_buf = puc_src_buf;
 100061e:	697b      	ldr	r3, [r7, #20]
 1000620:	69ba      	ldr	r2, [r7, #24]
 1000622:	61da      	str	r2, [r3, #28]
 1000624:	e061      	b.n	10006ea <atpl360_comm_parse+0x2d6>
	} else if (us_dst_size == sizeof(tx_cfm_t)) {
 1000626:	88fb      	ldrh	r3, [r7, #6]
 1000628:	2b0b      	cmp	r3, #11
 100062a:	d15c      	bne.n	10006e6 <atpl360_comm_parse+0x2d2>
		tx_cfm_t *cfm_msg_data;

		cfm_msg_data = (tx_cfm_t *)pv_dst;
 100062c:	68fb      	ldr	r3, [r7, #12]
 100062e:	613b      	str	r3, [r7, #16]

		cfm_msg_data->ul_rms_calc = (uint32_t)*puc_src_buf++;
 1000630:	69bb      	ldr	r3, [r7, #24]
 1000632:	1c5a      	adds	r2, r3, #1
 1000634:	61ba      	str	r2, [r7, #24]
 1000636:	781b      	ldrb	r3, [r3, #0]
 1000638:	461a      	mov	r2, r3
 100063a:	693b      	ldr	r3, [r7, #16]
 100063c:	605a      	str	r2, [r3, #4]
		cfm_msg_data->ul_rms_calc += (uint32_t)*puc_src_buf++ << 8;
 100063e:	69bb      	ldr	r3, [r7, #24]
 1000640:	1c5a      	adds	r2, r3, #1
 1000642:	61ba      	str	r2, [r7, #24]
 1000644:	781b      	ldrb	r3, [r3, #0]
 1000646:	021b      	lsls	r3, r3, #8
 1000648:	693a      	ldr	r2, [r7, #16]
 100064a:	6852      	ldr	r2, [r2, #4]
 100064c:	441a      	add	r2, r3
 100064e:	693b      	ldr	r3, [r7, #16]
 1000650:	605a      	str	r2, [r3, #4]
		cfm_msg_data->ul_rms_calc += (uint32_t)*puc_src_buf++ << 16;
 1000652:	69bb      	ldr	r3, [r7, #24]
 1000654:	1c5a      	adds	r2, r3, #1
 1000656:	61ba      	str	r2, [r7, #24]
 1000658:	781b      	ldrb	r3, [r3, #0]
 100065a:	041b      	lsls	r3, r3, #16
 100065c:	693a      	ldr	r2, [r7, #16]
 100065e:	6852      	ldr	r2, [r2, #4]
 1000660:	441a      	add	r2, r3
 1000662:	693b      	ldr	r3, [r7, #16]
 1000664:	605a      	str	r2, [r3, #4]
		cfm_msg_data->ul_rms_calc += (uint32_t)*puc_src_buf++ << 24;
 1000666:	69bb      	ldr	r3, [r7, #24]
 1000668:	1c5a      	adds	r2, r3, #1
 100066a:	61ba      	str	r2, [r7, #24]
 100066c:	781b      	ldrb	r3, [r3, #0]
 100066e:	061b      	lsls	r3, r3, #24
 1000670:	693a      	ldr	r2, [r7, #16]
 1000672:	6852      	ldr	r2, [r2, #4]
 1000674:	441a      	add	r2, r3
 1000676:	693b      	ldr	r3, [r7, #16]
 1000678:	605a      	str	r2, [r3, #4]

		cfm_msg_data->ul_tx_time = (uint32_t)*puc_src_buf++;
 100067a:	69bb      	ldr	r3, [r7, #24]
 100067c:	1c5a      	adds	r2, r3, #1
 100067e:	61ba      	str	r2, [r7, #24]
 1000680:	781b      	ldrb	r3, [r3, #0]
 1000682:	461a      	mov	r2, r3
 1000684:	693b      	ldr	r3, [r7, #16]
 1000686:	601a      	str	r2, [r3, #0]
		cfm_msg_data->ul_tx_time += (uint32_t)*puc_src_buf++ << 8;
 1000688:	69bb      	ldr	r3, [r7, #24]
 100068a:	1c5a      	adds	r2, r3, #1
 100068c:	61ba      	str	r2, [r7, #24]
 100068e:	781b      	ldrb	r3, [r3, #0]
 1000690:	021b      	lsls	r3, r3, #8
 1000692:	693a      	ldr	r2, [r7, #16]
 1000694:	6812      	ldr	r2, [r2, #0]
 1000696:	441a      	add	r2, r3
 1000698:	693b      	ldr	r3, [r7, #16]
 100069a:	601a      	str	r2, [r3, #0]
		cfm_msg_data->ul_tx_time += (uint32_t)*puc_src_buf++ << 16;
 100069c:	69bb      	ldr	r3, [r7, #24]
 100069e:	1c5a      	adds	r2, r3, #1
 10006a0:	61ba      	str	r2, [r7, #24]
 10006a2:	781b      	ldrb	r3, [r3, #0]
 10006a4:	041b      	lsls	r3, r3, #16
 10006a6:	693a      	ldr	r2, [r7, #16]
 10006a8:	6812      	ldr	r2, [r2, #0]
 10006aa:	441a      	add	r2, r3
 10006ac:	693b      	ldr	r3, [r7, #16]
 10006ae:	601a      	str	r2, [r3, #0]
		cfm_msg_data->ul_tx_time += (uint32_t)*puc_src_buf++ << 24;
 10006b0:	69bb      	ldr	r3, [r7, #24]
 10006b2:	1c5a      	adds	r2, r3, #1
 10006b4:	61ba      	str	r2, [r7, #24]
 10006b6:	781b      	ldrb	r3, [r3, #0]
 10006b8:	061b      	lsls	r3, r3, #24
 10006ba:	693a      	ldr	r2, [r7, #16]
 10006bc:	6812      	ldr	r2, [r2, #0]
 10006be:	441a      	add	r2, r3
 10006c0:	693b      	ldr	r3, [r7, #16]
 10006c2:	601a      	str	r2, [r3, #0]

		cfm_msg_data->uc_mod_type = (enum mode_types)*puc_src_buf++;
 10006c4:	69bb      	ldr	r3, [r7, #24]
 10006c6:	1c5a      	adds	r2, r3, #1
 10006c8:	61ba      	str	r2, [r7, #24]
 10006ca:	781a      	ldrb	r2, [r3, #0]
 10006cc:	693b      	ldr	r3, [r7, #16]
 10006ce:	721a      	strb	r2, [r3, #8]

		cfm_msg_data->uc_tx_result = (enum tx_result_values)*puc_src_buf++;
 10006d0:	69bb      	ldr	r3, [r7, #24]
 10006d2:	1c5a      	adds	r2, r3, #1
 10006d4:	61ba      	str	r2, [r7, #24]
 10006d6:	781a      	ldrb	r2, [r3, #0]
 10006d8:	693b      	ldr	r3, [r7, #16]
 10006da:	725a      	strb	r2, [r3, #9]

		cfm_msg_data->uc_buffer_id = (enum buffer_id)*puc_src_buf;
 10006dc:	69bb      	ldr	r3, [r7, #24]
 10006de:	781a      	ldrb	r2, [r3, #0]
 10006e0:	693b      	ldr	r3, [r7, #16]
 10006e2:	729a      	strb	r2, [r3, #10]
 10006e4:	e001      	b.n	10006ea <atpl360_comm_parse+0x2d6>
	} else {
		uc_result = ATPL360_COMM_ERROR;
 10006e6:	2301      	movs	r3, #1
 10006e8:	77fb      	strb	r3, [r7, #31]
	}

	return uc_result;
 10006ea:	7ffb      	ldrb	r3, [r7, #31]
}
 10006ec:	4618      	mov	r0, r3
 10006ee:	3724      	adds	r7, #36	; 0x24
 10006f0:	46bd      	mov	sp, r7
 10006f2:	bc80      	pop	{r7}
 10006f4:	4770      	bx	lr
	...

010006f8 <atpl360_comm_get_event_id>:

uint16_t atpl360_comm_get_event_id(enum atpl360_event_type ev_type, uint8_t uc_buff_index)
{
 10006f8:	b480      	push	{r7}
 10006fa:	b085      	sub	sp, #20
 10006fc:	af00      	add	r7, sp, #0
 10006fe:	4603      	mov	r3, r0
 1000700:	460a      	mov	r2, r1
 1000702:	71fb      	strb	r3, [r7, #7]
 1000704:	4613      	mov	r3, r2
 1000706:	71bb      	strb	r3, [r7, #6]
	uint16_t us_event_id;

	us_event_id = NULL;
 1000708:	2300      	movs	r3, #0
 100070a:	81fb      	strh	r3, [r7, #14]

	if (ev_type < NUM_EV_TYPES) {
 100070c:	79fb      	ldrb	r3, [r7, #7]
 100070e:	2b04      	cmp	r3, #4
 1000710:	d80d      	bhi.n	100072e <atpl360_comm_get_event_id+0x36>
		us_event_id = pcus_event_mem_ids[ev_type];
 1000712:	79fb      	ldrb	r3, [r7, #7]
 1000714:	4a09      	ldr	r2, [pc, #36]	; (100073c <atpl360_comm_get_event_id+0x44>)
 1000716:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 100071a:	81fb      	strh	r3, [r7, #14]

		if (ev_type == MSG_CFM_EV_TYPE) {
 100071c:	79fb      	ldrb	r3, [r7, #7]
 100071e:	2b02      	cmp	r3, #2
 1000720:	d105      	bne.n	100072e <atpl360_comm_get_event_id+0x36>
			if (uc_buff_index == 1) {
 1000722:	79bb      	ldrb	r3, [r7, #6]
 1000724:	2b01      	cmp	r3, #1
 1000726:	d102      	bne.n	100072e <atpl360_comm_get_event_id+0x36>
				us_event_id += 3;
 1000728:	89fb      	ldrh	r3, [r7, #14]
 100072a:	3303      	adds	r3, #3
 100072c:	81fb      	strh	r3, [r7, #14]
			}
		}
	}

	return us_event_id;
 100072e:	89fb      	ldrh	r3, [r7, #14]
}
 1000730:	4618      	mov	r0, r3
 1000732:	3714      	adds	r7, #20
 1000734:	46bd      	mov	sp, r7
 1000736:	bc80      	pop	{r7}
 1000738:	4770      	bx	lr
 100073a:	bf00      	nop
 100073c:	010119c0 	.word	0x010119c0

01000740 <atpl360_comm_get_tx_params_id>:

uint16_t atpl360_comm_get_tx_params_id(tx_msg_t *px_msg)
{
 1000740:	b480      	push	{r7}
 1000742:	b085      	sub	sp, #20
 1000744:	af00      	add	r7, sp, #0
 1000746:	6078      	str	r0, [r7, #4]
	uint16_t us_id;

	if (px_msg->uc_buffer_id == 0) {
 1000748:	687b      	ldr	r3, [r7, #4]
 100074a:	7adb      	ldrb	r3, [r3, #11]
 100074c:	2b00      	cmp	r3, #0
 100074e:	d102      	bne.n	1000756 <atpl360_comm_get_tx_params_id+0x16>
		us_id = ATPL360_TX0_PARAM_ID;
 1000750:	2301      	movs	r3, #1
 1000752:	81fb      	strh	r3, [r7, #14]
 1000754:	e001      	b.n	100075a <atpl360_comm_get_tx_params_id+0x1a>
	} else {
		us_id = ATPL360_TX1_PARAM_ID;
 1000756:	2304      	movs	r3, #4
 1000758:	81fb      	strh	r3, [r7, #14]
	}

	return us_id;
 100075a:	89fb      	ldrh	r3, [r7, #14]
}
 100075c:	4618      	mov	r0, r3
 100075e:	3714      	adds	r7, #20
 1000760:	46bd      	mov	sp, r7
 1000762:	bc80      	pop	{r7}
 1000764:	4770      	bx	lr

01000766 <atpl360_comm_get_tx_data_id>:

uint16_t atpl360_comm_get_tx_data_id(tx_msg_t *px_msg)
{
 1000766:	b480      	push	{r7}
 1000768:	b085      	sub	sp, #20
 100076a:	af00      	add	r7, sp, #0
 100076c:	6078      	str	r0, [r7, #4]
	uint16_t us_id;

	if (px_msg->uc_buffer_id == 0) {
 100076e:	687b      	ldr	r3, [r7, #4]
 1000770:	7adb      	ldrb	r3, [r3, #11]
 1000772:	2b00      	cmp	r3, #0
 1000774:	d102      	bne.n	100077c <atpl360_comm_get_tx_data_id+0x16>
		us_id = ATPL360_TX0_DATA_ID;
 1000776:	2302      	movs	r3, #2
 1000778:	81fb      	strh	r3, [r7, #14]
 100077a:	e001      	b.n	1000780 <atpl360_comm_get_tx_data_id+0x1a>
	} else {
		us_id = ATPL360_TX1_DATA_ID;
 100077c:	2305      	movs	r3, #5
 100077e:	81fb      	strh	r3, [r7, #14]
	}

	return us_id;
 1000780:	89fb      	ldrh	r3, [r7, #14]
}
 1000782:	4618      	mov	r0, r3
 1000784:	3714      	adds	r7, #20
 1000786:	46bd      	mov	sp, r7
 1000788:	bc80      	pop	{r7}
 100078a:	4770      	bx	lr

0100078c <atpl360_comm_set_event_info>:

void atpl360_comm_set_event_info(atpl360_events_t *px_events_info, uint16_t us_int_flags)
{
 100078c:	b480      	push	{r7}
 100078e:	b083      	sub	sp, #12
 1000790:	af00      	add	r7, sp, #0
 1000792:	6078      	str	r0, [r7, #4]
 1000794:	460b      	mov	r3, r1
 1000796:	807b      	strh	r3, [r7, #2]
	if (us_int_flags & ATPL360_TX0_CFM_FLAG_MASK) {
 1000798:	887b      	ldrh	r3, [r7, #2]
 100079a:	f003 0301 	and.w	r3, r3, #1
 100079e:	2b00      	cmp	r3, #0
 10007a0:	d003      	beq.n	10007aa <atpl360_comm_set_event_info+0x1e>
		px_events_info->b_cfm_event_enable[0] = true;
 10007a2:	687b      	ldr	r3, [r7, #4]
 10007a4:	2201      	movs	r2, #1
 10007a6:	725a      	strb	r2, [r3, #9]
 10007a8:	e002      	b.n	10007b0 <atpl360_comm_set_event_info+0x24>
	} else {
		px_events_info->b_cfm_event_enable[0] = false;
 10007aa:	687b      	ldr	r3, [r7, #4]
 10007ac:	2200      	movs	r2, #0
 10007ae:	725a      	strb	r2, [r3, #9]
	}

	if (us_int_flags & ATPL360_TX1_CFM_FLAG_MASK) {
 10007b0:	887b      	ldrh	r3, [r7, #2]
 10007b2:	f003 0302 	and.w	r3, r3, #2
 10007b6:	2b00      	cmp	r3, #0
 10007b8:	d003      	beq.n	10007c2 <atpl360_comm_set_event_info+0x36>
		px_events_info->b_cfm_event_enable[1] = true;
 10007ba:	687b      	ldr	r3, [r7, #4]
 10007bc:	2201      	movs	r2, #1
 10007be:	729a      	strb	r2, [r3, #10]
 10007c0:	e002      	b.n	10007c8 <atpl360_comm_set_event_info+0x3c>
	} else {
		px_events_info->b_cfm_event_enable[1] = false;
 10007c2:	687b      	ldr	r3, [r7, #4]
 10007c4:	2200      	movs	r2, #0
 10007c6:	729a      	strb	r2, [r3, #10]
	}

	if (us_int_flags & ATPL360_RX_DATA_IND_FLAG_MASK) {
 10007c8:	887b      	ldrh	r3, [r7, #2]
 10007ca:	f003 0304 	and.w	r3, r3, #4
 10007ce:	2b00      	cmp	r3, #0
 10007d0:	d003      	beq.n	10007da <atpl360_comm_set_event_info+0x4e>
		px_events_info->b_data_ind_event_enable = true;
 10007d2:	687b      	ldr	r3, [r7, #4]
 10007d4:	2201      	movs	r2, #1
 10007d6:	72da      	strb	r2, [r3, #11]
 10007d8:	e002      	b.n	10007e0 <atpl360_comm_set_event_info+0x54>
	} else {
		px_events_info->b_data_ind_event_enable = false;
 10007da:	687b      	ldr	r3, [r7, #4]
 10007dc:	2200      	movs	r2, #0
 10007de:	72da      	strb	r2, [r3, #11]
	}

	if (us_int_flags & ATPL360_RX_QPAR_IND_FLAG_MASK) {
 10007e0:	887b      	ldrh	r3, [r7, #2]
 10007e2:	f003 0320 	and.w	r3, r3, #32
 10007e6:	2b00      	cmp	r3, #0
 10007e8:	d003      	beq.n	10007f2 <atpl360_comm_set_event_info+0x66>
		px_events_info->b_qpar_ind_event_enable = true;
 10007ea:	687b      	ldr	r3, [r7, #4]
 10007ec:	2201      	movs	r2, #1
 10007ee:	731a      	strb	r2, [r3, #12]
 10007f0:	e002      	b.n	10007f8 <atpl360_comm_set_event_info+0x6c>
	} else {
		px_events_info->b_qpar_ind_event_enable = false;
 10007f2:	687b      	ldr	r3, [r7, #4]
 10007f4:	2200      	movs	r2, #0
 10007f6:	731a      	strb	r2, [r3, #12]
	}

	if (us_int_flags & ATPL360_REG_RSP_MASK) {
 10007f8:	887b      	ldrh	r3, [r7, #2]
 10007fa:	f003 0310 	and.w	r3, r3, #16
 10007fe:	2b00      	cmp	r3, #0
 1000800:	d003      	beq.n	100080a <atpl360_comm_set_event_info+0x7e>
		px_events_info->b_reg_data_enable = true;
 1000802:	687b      	ldr	r3, [r7, #4]
 1000804:	2201      	movs	r2, #1
 1000806:	739a      	strb	r2, [r3, #14]
 1000808:	e002      	b.n	1000810 <atpl360_comm_set_event_info+0x84>
	} else {
		px_events_info->b_reg_data_enable = false;
 100080a:	687b      	ldr	r3, [r7, #4]
 100080c:	2200      	movs	r2, #0
 100080e:	739a      	strb	r2, [r3, #14]
	}

	/* TBD */
	px_events_info->b_syn_event_enable = false;
 1000810:	687b      	ldr	r3, [r7, #4]
 1000812:	2200      	movs	r2, #0
 1000814:	735a      	strb	r2, [r3, #13]
	px_events_info->uc_timer_expired = 0;
 1000816:	687b      	ldr	r3, [r7, #4]
 1000818:	2200      	movs	r2, #0
 100081a:	721a      	strb	r2, [r3, #8]
	px_events_info->ul_timer_ref = 0;
 100081c:	687b      	ldr	r3, [r7, #4]
 100081e:	2200      	movs	r2, #0
 1000820:	701a      	strb	r2, [r3, #0]
 1000822:	2200      	movs	r2, #0
 1000824:	705a      	strb	r2, [r3, #1]
 1000826:	2200      	movs	r2, #0
 1000828:	709a      	strb	r2, [r3, #2]
 100082a:	2200      	movs	r2, #0
 100082c:	70da      	strb	r2, [r3, #3]
	px_events_info->ul_event_info = 0;
 100082e:	687b      	ldr	r3, [r7, #4]
 1000830:	2200      	movs	r2, #0
 1000832:	711a      	strb	r2, [r3, #4]
 1000834:	2200      	movs	r2, #0
 1000836:	715a      	strb	r2, [r3, #5]
 1000838:	2200      	movs	r2, #0
 100083a:	719a      	strb	r2, [r3, #6]
 100083c:	2200      	movs	r2, #0
 100083e:	71da      	strb	r2, [r3, #7]
}
 1000840:	bf00      	nop
 1000842:	370c      	adds	r7, #12
 1000844:	46bd      	mov	sp, r7
 1000846:	bc80      	pop	{r7}
 1000848:	4770      	bx	lr
	...

0100084c <atpl360_comm_get_cfg_param_access_type>:

uint32_t atpl360_comm_get_cfg_param_access_type(uint16_t us_param_id)
{
 100084c:	b480      	push	{r7}
 100084e:	b085      	sub	sp, #20
 1000850:	af00      	add	r7, sp, #0
 1000852:	4603      	mov	r3, r0
 1000854:	80fb      	strh	r3, [r7, #6]
	uint32_t ul_address;

	ul_address = 0;
 1000856:	2300      	movs	r3, #0
 1000858:	60fb      	str	r3, [r7, #12]

	if (us_param_id & ATPL360_REG_ADC_MASK) {
 100085a:	88fb      	ldrh	r3, [r7, #6]
 100085c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 1000860:	2b00      	cmp	r3, #0
 1000862:	d003      	beq.n	100086c <atpl360_comm_get_cfg_param_access_type+0x20>
		ul_address = (uint32_t)ATPL360_REG_ADC_BASE;
 1000864:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 1000868:	60fb      	str	r3, [r7, #12]
 100086a:	e01c      	b.n	10008a6 <atpl360_comm_get_cfg_param_access_type+0x5a>
	} else if (us_param_id & ATPL360_REG_DAC_MASK) {
 100086c:	88fb      	ldrh	r3, [r7, #6]
 100086e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 1000872:	2b00      	cmp	r3, #0
 1000874:	d003      	beq.n	100087e <atpl360_comm_get_cfg_param_access_type+0x32>
		ul_address = (uint32_t)ATPL360_REG_DAC_BASE;
 1000876:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 100087a:	60fb      	str	r3, [r7, #12]
 100087c:	e013      	b.n	10008a6 <atpl360_comm_get_cfg_param_access_type+0x5a>
	} else if (us_param_id & ATPL360_FUSES_MASK) {
 100087e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 1000882:	2b00      	cmp	r3, #0
 1000884:	da02      	bge.n	100088c <atpl360_comm_get_cfg_param_access_type+0x40>
		ul_address = (uint32_t)ATPL360_FUSES_BASE;
 1000886:	4b0b      	ldr	r3, [pc, #44]	; (10008b4 <atpl360_comm_get_cfg_param_access_type+0x68>)
 1000888:	60fb      	str	r3, [r7, #12]
 100088a:	e00c      	b.n	10008a6 <atpl360_comm_get_cfg_param_access_type+0x5a>
	} else if ((us_param_id & ATPL360_REG_MASK) && (us_param_id < ATPL360_REG_END_ID)) {
 100088c:	88fb      	ldrh	r3, [r7, #6]
 100088e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 1000892:	2b00      	cmp	r3, #0
 1000894:	d007      	beq.n	10008a6 <atpl360_comm_get_cfg_param_access_type+0x5a>
 1000896:	88fb      	ldrh	r3, [r7, #6]
 1000898:	f244 023d 	movw	r2, #16445	; 0x403d
 100089c:	4293      	cmp	r3, r2
 100089e:	d802      	bhi.n	10008a6 <atpl360_comm_get_cfg_param_access_type+0x5a>
		ul_address = (uint32_t)ATPL360_REG_BASE;
 10008a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 10008a4:	60fb      	str	r3, [r7, #12]
	}

	return ul_address;
 10008a6:	68fb      	ldr	r3, [r7, #12]
}
 10008a8:	4618      	mov	r0, r3
 10008aa:	3714      	adds	r7, #20
 10008ac:	46bd      	mov	sp, r7
 10008ae:	bc80      	pop	{r7}
 10008b0:	4770      	bx	lr
 10008b2:	bf00      	nop
 10008b4:	400e1800 	.word	0x400e1800

010008b8 <atpl360_comm_get_cfg_param_delay_us>:

uint32_t atpl360_comm_get_cfg_param_delay_us(uint16_t us_param_id)
{
 10008b8:	b480      	push	{r7}
 10008ba:	b085      	sub	sp, #20
 10008bc:	af00      	add	r7, sp, #0
 10008be:	4603      	mov	r3, r0
 10008c0:	80fb      	strh	r3, [r7, #6]
	uint32_t ul_delay = 50;
 10008c2:	2332      	movs	r3, #50	; 0x32
 10008c4:	60fb      	str	r3, [r7, #12]

	if ((us_param_id & ATPL360_REG_MASK) && (us_param_id < ATPL360_REG_END_ID)) {
 10008c6:	88fb      	ldrh	r3, [r7, #6]
 10008c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 10008cc:	2b00      	cmp	r3, #0
 10008ce:	d02b      	beq.n	1000928 <atpl360_comm_get_cfg_param_delay_us+0x70>
 10008d0:	88fb      	ldrh	r3, [r7, #6]
 10008d2:	f244 023d 	movw	r2, #16445	; 0x403d
 10008d6:	4293      	cmp	r3, r2
 10008d8:	d826      	bhi.n	1000928 <atpl360_comm_get_cfg_param_delay_us+0x70>
		switch (us_param_id) {
 10008da:	88fb      	ldrh	r3, [r7, #6]
 10008dc:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 10008e0:	3b0f      	subs	r3, #15
 10008e2:	2b07      	cmp	r3, #7
 10008e4:	d81d      	bhi.n	1000922 <atpl360_comm_get_cfg_param_delay_us+0x6a>
 10008e6:	a201      	add	r2, pc, #4	; (adr r2, 10008ec <atpl360_comm_get_cfg_param_delay_us+0x34>)
 10008e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 10008ec:	01000913 	.word	0x01000913
 10008f0:	01000913 	.word	0x01000913
 10008f4:	0100091b 	.word	0x0100091b
 10008f8:	01000923 	.word	0x01000923
 10008fc:	01000923 	.word	0x01000923
 1000900:	01000923 	.word	0x01000923
 1000904:	01000923 	.word	0x01000923
 1000908:	0100090d 	.word	0x0100090d
		case ATPL360_REG_CHANNEL_CFG:
			ul_delay = 100;
 100090c:	2364      	movs	r3, #100	; 0x64
 100090e:	60fb      	str	r3, [r7, #12]
			break;
 1000910:	e00a      	b.n	1000928 <atpl360_comm_get_cfg_param_delay_us+0x70>

		case ATPL360_REG_PREDIST_COEF_TABLE_HI:
		case ATPL360_REG_PREDIST_COEF_TABLE_LO:
			ul_delay = 1000;
 1000912:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 1000916:	60fb      	str	r3, [r7, #12]
			break;
 1000918:	e006      	b.n	1000928 <atpl360_comm_get_cfg_param_delay_us+0x70>

		case ATPL360_REG_PREDIST_COEF_TABLE_VLO:
			ul_delay = 2000;
 100091a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 100091e:	60fb      	str	r3, [r7, #12]
			break;
 1000920:	e002      	b.n	1000928 <atpl360_comm_get_cfg_param_delay_us+0x70>

		default:
			ul_delay = 50;
 1000922:	2332      	movs	r3, #50	; 0x32
 1000924:	60fb      	str	r3, [r7, #12]
			break;
 1000926:	bf00      	nop
		}
	}

	return ul_delay;
 1000928:	68fb      	ldr	r3, [r7, #12]
}
 100092a:	4618      	mov	r0, r3
 100092c:	3714      	adds	r7, #20
 100092e:	46bd      	mov	sp, r7
 1000930:	bc80      	pop	{r7}
 1000932:	4770      	bx	lr

01000934 <_memcpy_rev>:
 * \param puc_dst    Pointer to buffer where the data will be copied
 * \param puc_src    Pointer to buffer source data
 * \param us_len     Length of data to copy
 */
static void _memcpy_rev(uint8_t *puc_dst, uint8_t *puc_src, uint16_t us_len)
{
 1000934:	b580      	push	{r7, lr}
 1000936:	b088      	sub	sp, #32
 1000938:	af00      	add	r7, sp, #0
 100093a:	60f8      	str	r0, [r7, #12]
 100093c:	60b9      	str	r1, [r7, #8]
 100093e:	4613      	mov	r3, r2
 1000940:	80fb      	strh	r3, [r7, #6]
	uint8_t *ptr_uc_mem_dst, *ptr_uc_mem_src;
	uint16_t us_idx;

	if (us_len <= 4) {
 1000942:	88fb      	ldrh	r3, [r7, #6]
 1000944:	2b04      	cmp	r3, #4
 1000946:	d819      	bhi.n	100097c <_memcpy_rev+0x48>
		ptr_uc_mem_dst = puc_dst + us_len - 1;
 1000948:	88fb      	ldrh	r3, [r7, #6]
 100094a:	3b01      	subs	r3, #1
 100094c:	68fa      	ldr	r2, [r7, #12]
 100094e:	4413      	add	r3, r2
 1000950:	61fb      	str	r3, [r7, #28]
		ptr_uc_mem_src = puc_src;
 1000952:	68bb      	ldr	r3, [r7, #8]
 1000954:	61bb      	str	r3, [r7, #24]
		for (us_idx = 0; us_idx < us_len; us_idx++) {
 1000956:	2300      	movs	r3, #0
 1000958:	82fb      	strh	r3, [r7, #22]
 100095a:	e00a      	b.n	1000972 <_memcpy_rev+0x3e>
			*ptr_uc_mem_dst-- = (uint8_t)*ptr_uc_mem_src++;
 100095c:	69fb      	ldr	r3, [r7, #28]
 100095e:	1e5a      	subs	r2, r3, #1
 1000960:	61fa      	str	r2, [r7, #28]
 1000962:	69ba      	ldr	r2, [r7, #24]
 1000964:	1c51      	adds	r1, r2, #1
 1000966:	61b9      	str	r1, [r7, #24]
 1000968:	7812      	ldrb	r2, [r2, #0]
 100096a:	701a      	strb	r2, [r3, #0]
		for (us_idx = 0; us_idx < us_len; us_idx++) {
 100096c:	8afb      	ldrh	r3, [r7, #22]
 100096e:	3301      	adds	r3, #1
 1000970:	82fb      	strh	r3, [r7, #22]
 1000972:	8afa      	ldrh	r2, [r7, #22]
 1000974:	88fb      	ldrh	r3, [r7, #6]
 1000976:	429a      	cmp	r2, r3
 1000978:	d3f0      	bcc.n	100095c <_memcpy_rev+0x28>
		}
	} else {
		memcpy(puc_dst, puc_src, us_len);
	}
}
 100097a:	e005      	b.n	1000988 <_memcpy_rev+0x54>
		memcpy(puc_dst, puc_src, us_len);
 100097c:	88fb      	ldrh	r3, [r7, #6]
 100097e:	461a      	mov	r2, r3
 1000980:	68b9      	ldr	r1, [r7, #8]
 1000982:	68f8      	ldr	r0, [r7, #12]
 1000984:	4b02      	ldr	r3, [pc, #8]	; (1000990 <_memcpy_rev+0x5c>)
 1000986:	4798      	blx	r3
}
 1000988:	bf00      	nop
 100098a:	3720      	adds	r7, #32
 100098c:	46bd      	mov	sp, r7
 100098e:	bd80      	pop	{r7, pc}
 1000990:	0100c551 	.word	0x0100c551

01000994 <atpl360_addon_stringify_reg>:
 * \param us_reg_size        Register size
 *
 * \return Length of data to buffering
 */
uint16_t atpl360_addon_stringify_reg(uint8_t *puc_dst_data, uint8_t *puc_src_data, uint16_t us_reg_size)
{
 1000994:	b580      	push	{r7, lr}
 1000996:	b086      	sub	sp, #24
 1000998:	af00      	add	r7, sp, #0
 100099a:	60f8      	str	r0, [r7, #12]
 100099c:	60b9      	str	r1, [r7, #8]
 100099e:	4613      	mov	r3, r2
 10009a0:	80fb      	strh	r3, [r7, #6]
	uint8_t *puc_dst_buf;

	puc_dst_buf = puc_dst_data;
 10009a2:	68fb      	ldr	r3, [r7, #12]
 10009a4:	617b      	str	r3, [r7, #20]

	*puc_dst_buf++ = (uint8_t)SERIAL_IF_PHY_COMMAND_GET_CFG_RSP;
 10009a6:	697b      	ldr	r3, [r7, #20]
 10009a8:	1c5a      	adds	r2, r3, #1
 10009aa:	617a      	str	r2, [r7, #20]
 10009ac:	2201      	movs	r2, #1
 10009ae:	701a      	strb	r2, [r3, #0]
	*puc_dst_buf++ = (uint8_t)(sus_last_id_get >> 8);
 10009b0:	697b      	ldr	r3, [r7, #20]
 10009b2:	1c5a      	adds	r2, r3, #1
 10009b4:	617a      	str	r2, [r7, #20]
 10009b6:	4a10      	ldr	r2, [pc, #64]	; (10009f8 <atpl360_addon_stringify_reg+0x64>)
 10009b8:	8812      	ldrh	r2, [r2, #0]
 10009ba:	0a12      	lsrs	r2, r2, #8
 10009bc:	b292      	uxth	r2, r2
 10009be:	b2d2      	uxtb	r2, r2
 10009c0:	701a      	strb	r2, [r3, #0]
	*puc_dst_buf++ = (uint8_t)sus_last_id_get;
 10009c2:	697b      	ldr	r3, [r7, #20]
 10009c4:	1c5a      	adds	r2, r3, #1
 10009c6:	617a      	str	r2, [r7, #20]
 10009c8:	4a0b      	ldr	r2, [pc, #44]	; (10009f8 <atpl360_addon_stringify_reg+0x64>)
 10009ca:	8812      	ldrh	r2, [r2, #0]
 10009cc:	b2d2      	uxtb	r2, r2
 10009ce:	701a      	strb	r2, [r3, #0]
	*puc_dst_buf++ = (uint8_t)us_reg_size;
 10009d0:	697b      	ldr	r3, [r7, #20]
 10009d2:	1c5a      	adds	r2, r3, #1
 10009d4:	617a      	str	r2, [r7, #20]
 10009d6:	88fa      	ldrh	r2, [r7, #6]
 10009d8:	b2d2      	uxtb	r2, r2
 10009da:	701a      	strb	r2, [r3, #0]
	_memcpy_rev(puc_dst_buf, puc_src_data, us_reg_size);
 10009dc:	88fb      	ldrh	r3, [r7, #6]
 10009de:	461a      	mov	r2, r3
 10009e0:	68b9      	ldr	r1, [r7, #8]
 10009e2:	6978      	ldr	r0, [r7, #20]
 10009e4:	4b05      	ldr	r3, [pc, #20]	; (10009fc <atpl360_addon_stringify_reg+0x68>)
 10009e6:	4798      	blx	r3

	return (us_reg_size + 4);
 10009e8:	88fb      	ldrh	r3, [r7, #6]
 10009ea:	3304      	adds	r3, #4
 10009ec:	b29b      	uxth	r3, r3
}
 10009ee:	4618      	mov	r0, r3
 10009f0:	3718      	adds	r7, #24
 10009f2:	46bd      	mov	sp, r7
 10009f4:	bd80      	pop	{r7, pc}
 10009f6:	bf00      	nop
 10009f8:	2000110c 	.word	0x2000110c
 10009fc:	01000935 	.word	0x01000935

01000a00 <atpl360_addon_init>:
 *
 * \param sx_desc  Pointer to addon descriptor
 *
 */
void atpl360_addon_init(atpl360_addon_descriptor_t *sx_desc)
{
 1000a00:	b480      	push	{r7}
 1000a02:	b083      	sub	sp, #12
 1000a04:	af00      	add	r7, sp, #0
 1000a06:	6078      	str	r0, [r7, #4]
	spx_desc = sx_desc;
 1000a08:	4a03      	ldr	r2, [pc, #12]	; (1000a18 <atpl360_addon_init+0x18>)
 1000a0a:	687b      	ldr	r3, [r7, #4]
 1000a0c:	6013      	str	r3, [r2, #0]
}
 1000a0e:	bf00      	nop
 1000a10:	370c      	adds	r7, #12
 1000a12:	46bd      	mov	sp, r7
 1000a14:	bc80      	pop	{r7}
 1000a16:	4770      	bx	lr
 1000a18:	20001004 	.word	0x20001004

01000a1c <atpl360_addon_set_event_callback>:
 *
 * \param pf_event_callback  Pointer to callback function to call
 *
 */
void atpl360_addon_set_event_callback(pf_addons_event_t pf_event_callback)
{
 1000a1c:	b480      	push	{r7}
 1000a1e:	b083      	sub	sp, #12
 1000a20:	af00      	add	r7, sp, #0
 1000a22:	6078      	str	r0, [r7, #4]
	pf_trigger_addon_event = pf_event_callback;
 1000a24:	4a03      	ldr	r2, [pc, #12]	; (1000a34 <atpl360_addon_set_event_callback+0x18>)
 1000a26:	687b      	ldr	r3, [r7, #4]
 1000a28:	6013      	str	r3, [r2, #0]
}
 1000a2a:	bf00      	nop
 1000a2c:	370c      	adds	r7, #12
 1000a2e:	46bd      	mov	sp, r7
 1000a30:	bc80      	pop	{r7}
 1000a32:	4770      	bx	lr
 1000a34:	20001008 	.word	0x20001008

01000a38 <atpl360_addon_cmd>:
 * \param px_msg  Pointer to command message
 * \param us_len  Length of the command message
 *
 */
void atpl360_addon_cmd(uint8_t *px_msg, uint16_t us_len)
{
 1000a38:	b590      	push	{r4, r7, lr}
 1000a3a:	b08f      	sub	sp, #60	; 0x3c
 1000a3c:	af00      	add	r7, sp, #0
 1000a3e:	6078      	str	r0, [r7, #4]
 1000a40:	460b      	mov	r3, r1
 1000a42:	807b      	strh	r3, [r7, #2]
	uint8_t *puc_rx;
	uint8_t uc_serial_if_cmd;

	/* Protection for invalid us_length */
	if (!us_len) {
 1000a44:	887b      	ldrh	r3, [r7, #2]
 1000a46:	2b00      	cmp	r3, #0
 1000a48:	f000 80ee 	beq.w	1000c28 <atpl360_addon_cmd+0x1f0>
		return;
	}

	/* Process received message */
	uc_serial_if_cmd = px_msg[0];
 1000a4c:	687b      	ldr	r3, [r7, #4]
 1000a4e:	781b      	ldrb	r3, [r3, #0]
 1000a50:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	puc_rx = &px_msg[1];
 1000a54:	687b      	ldr	r3, [r7, #4]
 1000a56:	3301      	adds	r3, #1
 1000a58:	633b      	str	r3, [r7, #48]	; 0x30

	switch (uc_serial_if_cmd) {
 1000a5a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 1000a5e:	2b06      	cmp	r3, #6
 1000a60:	f200 80e4 	bhi.w	1000c2c <atpl360_addon_cmd+0x1f4>
 1000a64:	a201      	add	r2, pc, #4	; (adr r2, 1000a6c <atpl360_addon_cmd+0x34>)
 1000a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 1000a6a:	bf00      	nop
 1000a6c:	01000a89 	.word	0x01000a89
 1000a70:	01000c2d 	.word	0x01000c2d
 1000a74:	01000b5b 	.word	0x01000b5b
 1000a78:	01000c2d 	.word	0x01000c2d
 1000a7c:	01000c2d 	.word	0x01000c2d
 1000a80:	01000c2d 	.word	0x01000c2d
 1000a84:	01000c0d 	.word	0x01000c0d
	case SERIAL_IF_PHY_COMMAND_GET_CFG:
	{
		atpl360_id_param_t us_id;
		uint8_t uc_id_len;

		us_id = (atpl360_id_param_t)(((uint16_t)*puc_rx++) << 8);
 1000a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 1000a8a:	1c5a      	adds	r2, r3, #1
 1000a8c:	633a      	str	r2, [r7, #48]	; 0x30
 1000a8e:	781b      	ldrb	r3, [r3, #0]
 1000a90:	b29b      	uxth	r3, r3
 1000a92:	021b      	lsls	r3, r3, #8
 1000a94:	85fb      	strh	r3, [r7, #46]	; 0x2e
		us_id += (atpl360_id_param_t)((uint16_t)*puc_rx++);
 1000a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 1000a98:	1c5a      	adds	r2, r3, #1
 1000a9a:	633a      	str	r2, [r7, #48]	; 0x30
 1000a9c:	781b      	ldrb	r3, [r3, #0]
 1000a9e:	b29a      	uxth	r2, r3
 1000aa0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 1000aa2:	4413      	add	r3, r2
 1000aa4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		sus_last_id_get = us_id;
 1000aa6:	4a65      	ldr	r2, [pc, #404]	; (1000c3c <atpl360_addon_cmd+0x204>)
 1000aa8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 1000aaa:	8013      	strh	r3, [r2, #0]
		uc_id_len = *puc_rx++;
 1000aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 1000aae:	1c5a      	adds	r2, r3, #1
 1000ab0:	633a      	str	r2, [r7, #48]	; 0x30
 1000ab2:	781b      	ldrb	r3, [r3, #0]
 1000ab4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		if (spx_desc->get_config(us_id, spuc_cfg_value_buf, uc_id_len, false)) {
 1000ab8:	4b61      	ldr	r3, [pc, #388]	; (1000c40 <atpl360_addon_cmd+0x208>)
 1000aba:	681b      	ldr	r3, [r3, #0]
 1000abc:	685c      	ldr	r4, [r3, #4]
 1000abe:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 1000ac2:	8df8      	ldrh	r0, [r7, #46]	; 0x2e
 1000ac4:	2300      	movs	r3, #0
 1000ac6:	495f      	ldr	r1, [pc, #380]	; (1000c44 <atpl360_addon_cmd+0x20c>)
 1000ac8:	47a0      	blx	r4
 1000aca:	4603      	mov	r3, r0
 1000acc:	2b00      	cmp	r3, #0
 1000ace:	f000 80af 	beq.w	1000c30 <atpl360_addon_cmd+0x1f8>
			uint8_t *puc_buf;

			puc_buf = spx_desc->puc_addon_buffer;
 1000ad2:	4b5b      	ldr	r3, [pc, #364]	; (1000c40 <atpl360_addon_cmd+0x208>)
 1000ad4:	681b      	ldr	r3, [r3, #0]
 1000ad6:	68db      	ldr	r3, [r3, #12]
 1000ad8:	62bb      	str	r3, [r7, #40]	; 0x28

			*puc_buf++ = SERIAL_IF_PHY_COMMAND_GET_CFG_RSP;
 1000ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 1000adc:	1c5a      	adds	r2, r3, #1
 1000ade:	62ba      	str	r2, [r7, #40]	; 0x28
 1000ae0:	2201      	movs	r2, #1
 1000ae2:	701a      	strb	r2, [r3, #0]
			*puc_buf++ = (uint8_t)(us_id >> 8);
 1000ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 1000ae6:	1c5a      	adds	r2, r3, #1
 1000ae8:	62ba      	str	r2, [r7, #40]	; 0x28
 1000aea:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 1000aec:	0a12      	lsrs	r2, r2, #8
 1000aee:	b292      	uxth	r2, r2
 1000af0:	b2d2      	uxtb	r2, r2
 1000af2:	701a      	strb	r2, [r3, #0]
			*puc_buf++ = (uint8_t)(us_id);
 1000af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 1000af6:	1c5a      	adds	r2, r3, #1
 1000af8:	62ba      	str	r2, [r7, #40]	; 0x28
 1000afa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 1000afc:	b2d2      	uxtb	r2, r2
 1000afe:	701a      	strb	r2, [r3, #0]
			*puc_buf++ = uc_id_len;
 1000b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 1000b02:	1c5a      	adds	r2, r3, #1
 1000b04:	62ba      	str	r2, [r7, #40]	; 0x28
 1000b06:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 1000b0a:	701a      	strb	r2, [r3, #0]
			if (uc_id_len > 4) {
 1000b0c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 1000b10:	2b04      	cmp	r3, #4
 1000b12:	d907      	bls.n	1000b24 <atpl360_addon_cmd+0xec>
				memcpy(puc_buf, spuc_cfg_value_buf, uc_id_len);
 1000b14:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 1000b18:	461a      	mov	r2, r3
 1000b1a:	494a      	ldr	r1, [pc, #296]	; (1000c44 <atpl360_addon_cmd+0x20c>)
 1000b1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 1000b1e:	4b4a      	ldr	r3, [pc, #296]	; (1000c48 <atpl360_addon_cmd+0x210>)
 1000b20:	4798      	blx	r3
 1000b22:	e007      	b.n	1000b34 <atpl360_addon_cmd+0xfc>
			} else {
				_memcpy_rev(puc_buf, spuc_cfg_value_buf, uc_id_len);
 1000b24:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 1000b28:	b29b      	uxth	r3, r3
 1000b2a:	461a      	mov	r2, r3
 1000b2c:	4945      	ldr	r1, [pc, #276]	; (1000c44 <atpl360_addon_cmd+0x20c>)
 1000b2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 1000b30:	4b46      	ldr	r3, [pc, #280]	; (1000c4c <atpl360_addon_cmd+0x214>)
 1000b32:	4798      	blx	r3
			}

			puc_buf += uc_id_len;
 1000b34:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 1000b38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 1000b3a:	4413      	add	r3, r2
 1000b3c:	62bb      	str	r3, [r7, #40]	; 0x28

			pf_trigger_addon_event(spx_desc->puc_addon_buffer, puc_buf - spx_desc->puc_addon_buffer);
 1000b3e:	4b44      	ldr	r3, [pc, #272]	; (1000c50 <atpl360_addon_cmd+0x218>)
 1000b40:	681b      	ldr	r3, [r3, #0]
 1000b42:	4a3f      	ldr	r2, [pc, #252]	; (1000c40 <atpl360_addon_cmd+0x208>)
 1000b44:	6812      	ldr	r2, [r2, #0]
 1000b46:	68d0      	ldr	r0, [r2, #12]
 1000b48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 1000b4a:	493d      	ldr	r1, [pc, #244]	; (1000c40 <atpl360_addon_cmd+0x208>)
 1000b4c:	6809      	ldr	r1, [r1, #0]
 1000b4e:	68c9      	ldr	r1, [r1, #12]
 1000b50:	1a52      	subs	r2, r2, r1
 1000b52:	b292      	uxth	r2, r2
 1000b54:	4611      	mov	r1, r2
 1000b56:	4798      	blx	r3
		}
	}
	break;
 1000b58:	e06a      	b.n	1000c30 <atpl360_addon_cmd+0x1f8>
	case SERIAL_IF_PHY_COMMAND_SET_CFG:
	{
		atpl360_id_param_t us_id;
		uint8_t uc_id_len;

		us_id = (atpl360_id_param_t)(((uint16_t)*puc_rx++) << 8);
 1000b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 1000b5c:	1c5a      	adds	r2, r3, #1
 1000b5e:	633a      	str	r2, [r7, #48]	; 0x30
 1000b60:	781b      	ldrb	r3, [r3, #0]
 1000b62:	b29b      	uxth	r3, r3
 1000b64:	021b      	lsls	r3, r3, #8
 1000b66:	84fb      	strh	r3, [r7, #38]	; 0x26
		us_id += (atpl360_id_param_t)((uint16_t)*puc_rx++);
 1000b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 1000b6a:	1c5a      	adds	r2, r3, #1
 1000b6c:	633a      	str	r2, [r7, #48]	; 0x30
 1000b6e:	781b      	ldrb	r3, [r3, #0]
 1000b70:	b29a      	uxth	r2, r3
 1000b72:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 1000b74:	4413      	add	r3, r2
 1000b76:	84fb      	strh	r3, [r7, #38]	; 0x26
		uc_id_len = *puc_rx++;
 1000b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 1000b7a:	1c5a      	adds	r2, r3, #1
 1000b7c:	633a      	str	r2, [r7, #48]	; 0x30
 1000b7e:	781b      	ldrb	r3, [r3, #0]
 1000b80:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		_memcpy_rev(spuc_cfg_value_buf, puc_rx, uc_id_len);
 1000b84:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 1000b88:	b29b      	uxth	r3, r3
 1000b8a:	461a      	mov	r2, r3
 1000b8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 1000b8e:	482d      	ldr	r0, [pc, #180]	; (1000c44 <atpl360_addon_cmd+0x20c>)
 1000b90:	4b2e      	ldr	r3, [pc, #184]	; (1000c4c <atpl360_addon_cmd+0x214>)
 1000b92:	4798      	blx	r3
		if (spx_desc->set_config(us_id, spuc_cfg_value_buf, uc_id_len)) {
 1000b94:	4b2a      	ldr	r3, [pc, #168]	; (1000c40 <atpl360_addon_cmd+0x208>)
 1000b96:	681b      	ldr	r3, [r3, #0]
 1000b98:	689b      	ldr	r3, [r3, #8]
 1000b9a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 1000b9e:	b292      	uxth	r2, r2
 1000ba0:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 1000ba2:	4928      	ldr	r1, [pc, #160]	; (1000c44 <atpl360_addon_cmd+0x20c>)
 1000ba4:	4798      	blx	r3
 1000ba6:	4603      	mov	r3, r0
 1000ba8:	2b00      	cmp	r3, #0
 1000baa:	d043      	beq.n	1000c34 <atpl360_addon_cmd+0x1fc>
			uint8_t *puc_buf;

			puc_buf = spx_desc->puc_addon_buffer;
 1000bac:	4b24      	ldr	r3, [pc, #144]	; (1000c40 <atpl360_addon_cmd+0x208>)
 1000bae:	681b      	ldr	r3, [r3, #0]
 1000bb0:	68db      	ldr	r3, [r3, #12]
 1000bb2:	623b      	str	r3, [r7, #32]

			*puc_buf++ = SERIAL_IF_PHY_COMMAND_SET_CFG_RSP;
 1000bb4:	6a3b      	ldr	r3, [r7, #32]
 1000bb6:	1c5a      	adds	r2, r3, #1
 1000bb8:	623a      	str	r2, [r7, #32]
 1000bba:	2203      	movs	r2, #3
 1000bbc:	701a      	strb	r2, [r3, #0]
			*puc_buf++ = (uint8_t)(us_id >> 8);
 1000bbe:	6a3b      	ldr	r3, [r7, #32]
 1000bc0:	1c5a      	adds	r2, r3, #1
 1000bc2:	623a      	str	r2, [r7, #32]
 1000bc4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 1000bc6:	0a12      	lsrs	r2, r2, #8
 1000bc8:	b292      	uxth	r2, r2
 1000bca:	b2d2      	uxtb	r2, r2
 1000bcc:	701a      	strb	r2, [r3, #0]
			*puc_buf++ = (uint8_t)(us_id);
 1000bce:	6a3b      	ldr	r3, [r7, #32]
 1000bd0:	1c5a      	adds	r2, r3, #1
 1000bd2:	623a      	str	r2, [r7, #32]
 1000bd4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 1000bd6:	b2d2      	uxtb	r2, r2
 1000bd8:	701a      	strb	r2, [r3, #0]
			*puc_buf++ = uc_id_len;
 1000bda:	6a3b      	ldr	r3, [r7, #32]
 1000bdc:	1c5a      	adds	r2, r3, #1
 1000bde:	623a      	str	r2, [r7, #32]
 1000be0:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 1000be4:	701a      	strb	r2, [r3, #0]
			*puc_buf++ = (uint8_t)true;
 1000be6:	6a3b      	ldr	r3, [r7, #32]
 1000be8:	1c5a      	adds	r2, r3, #1
 1000bea:	623a      	str	r2, [r7, #32]
 1000bec:	2201      	movs	r2, #1
 1000bee:	701a      	strb	r2, [r3, #0]

			pf_trigger_addon_event(spx_desc->puc_addon_buffer, puc_buf - spx_desc->puc_addon_buffer);
 1000bf0:	4b17      	ldr	r3, [pc, #92]	; (1000c50 <atpl360_addon_cmd+0x218>)
 1000bf2:	681b      	ldr	r3, [r3, #0]
 1000bf4:	4a12      	ldr	r2, [pc, #72]	; (1000c40 <atpl360_addon_cmd+0x208>)
 1000bf6:	6812      	ldr	r2, [r2, #0]
 1000bf8:	68d0      	ldr	r0, [r2, #12]
 1000bfa:	6a3a      	ldr	r2, [r7, #32]
 1000bfc:	4910      	ldr	r1, [pc, #64]	; (1000c40 <atpl360_addon_cmd+0x208>)
 1000bfe:	6809      	ldr	r1, [r1, #0]
 1000c00:	68c9      	ldr	r1, [r1, #12]
 1000c02:	1a52      	subs	r2, r2, r1
 1000c04:	b292      	uxth	r2, r2
 1000c06:	4611      	mov	r1, r2
 1000c08:	4798      	blx	r3
		}
	}
	break;
 1000c0a:	e013      	b.n	1000c34 <atpl360_addon_cmd+0x1fc>
	/* Write command (send data msg) */
	case SERIAL_IF_PHY_COMMAND_SEND_MSG:
	{
		tx_msg_t tx_msg;

		serial_if_parse_tx_msg(&tx_msg, puc_rx);
 1000c0c:	f107 030c 	add.w	r3, r7, #12
 1000c10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 1000c12:	4618      	mov	r0, r3
 1000c14:	4b0f      	ldr	r3, [pc, #60]	; (1000c54 <atpl360_addon_cmd+0x21c>)
 1000c16:	4798      	blx	r3
		spx_desc->send_data(&tx_msg);
 1000c18:	4b09      	ldr	r3, [pc, #36]	; (1000c40 <atpl360_addon_cmd+0x208>)
 1000c1a:	681b      	ldr	r3, [r3, #0]
 1000c1c:	681b      	ldr	r3, [r3, #0]
 1000c1e:	f107 020c 	add.w	r2, r7, #12
 1000c22:	4610      	mov	r0, r2
 1000c24:	4798      	blx	r3
	}
	break;
 1000c26:	e006      	b.n	1000c36 <atpl360_addon_cmd+0x1fe>
		return;
 1000c28:	bf00      	nop
 1000c2a:	e004      	b.n	1000c36 <atpl360_addon_cmd+0x1fe>

	default:
		break;
 1000c2c:	bf00      	nop
 1000c2e:	e002      	b.n	1000c36 <atpl360_addon_cmd+0x1fe>
	break;
 1000c30:	bf00      	nop
 1000c32:	e000      	b.n	1000c36 <atpl360_addon_cmd+0x1fe>
	break;
 1000c34:	bf00      	nop
	}
}
 1000c36:	373c      	adds	r7, #60	; 0x3c
 1000c38:	46bd      	mov	sp, r7
 1000c3a:	bd90      	pop	{r4, r7, pc}
 1000c3c:	2000110c 	.word	0x2000110c
 1000c40:	20001004 	.word	0x20001004
 1000c44:	2000100c 	.word	0x2000100c
 1000c48:	0100c551 	.word	0x0100c551
 1000c4c:	01000935 	.word	0x01000935
 1000c50:	20001008 	.word	0x20001008
 1000c54:	01000f61 	.word	0x01000f61

01000c58 <atpl360_addon_stringify_ind>:
 * \param pv_src             Pointer to struct to convert
 *
 * \return Length of data to buffering
 */
uint16_t atpl360_addon_stringify_ind(uint8_t *puc_ind_data, rx_msg_t *px_ind_data)
{
 1000c58:	b580      	push	{r7, lr}
 1000c5a:	b084      	sub	sp, #16
 1000c5c:	af00      	add	r7, sp, #0
 1000c5e:	6078      	str	r0, [r7, #4]
 1000c60:	6039      	str	r1, [r7, #0]
	uint8_t *puc_dst_buf;

	puc_dst_buf = puc_ind_data;
 1000c62:	687b      	ldr	r3, [r7, #4]
 1000c64:	60fb      	str	r3, [r7, #12]

	*puc_dst_buf++ = (uint8_t)SERIAL_IF_PHY_COMMAND_RECEIVE_MSG;
 1000c66:	68fb      	ldr	r3, [r7, #12]
 1000c68:	1c5a      	adds	r2, r3, #1
 1000c6a:	60fa      	str	r2, [r7, #12]
 1000c6c:	2208      	movs	r2, #8
 1000c6e:	701a      	strb	r2, [r3, #0]
	*puc_dst_buf++ = (uint8_t)px_ind_data->uc_mod_type;
 1000c70:	68fb      	ldr	r3, [r7, #12]
 1000c72:	1c5a      	adds	r2, r3, #1
 1000c74:	60fa      	str	r2, [r7, #12]
 1000c76:	683a      	ldr	r2, [r7, #0]
 1000c78:	7cd2      	ldrb	r2, [r2, #19]
 1000c7a:	701a      	strb	r2, [r3, #0]
	*puc_dst_buf++ = (uint8_t)px_ind_data->uc_scheme;
 1000c7c:	68fb      	ldr	r3, [r7, #12]
 1000c7e:	1c5a      	adds	r2, r3, #1
 1000c80:	60fa      	str	r2, [r7, #12]
 1000c82:	683a      	ldr	r2, [r7, #0]
 1000c84:	7c92      	ldrb	r2, [r2, #18]
 1000c86:	701a      	strb	r2, [r3, #0]
	*puc_dst_buf++ = (uint8_t)px_ind_data->uc_header_type;
 1000c88:	68fb      	ldr	r3, [r7, #12]
 1000c8a:	1c5a      	adds	r2, r3, #1
 1000c8c:	60fa      	str	r2, [r7, #12]
 1000c8e:	683a      	ldr	r2, [r7, #0]
 1000c90:	7d12      	ldrb	r2, [r2, #20]
 1000c92:	701a      	strb	r2, [r3, #0]
	*puc_dst_buf++ = (uint8_t)px_ind_data->uc_ber_soft;
 1000c94:	68fb      	ldr	r3, [r7, #12]
 1000c96:	1c5a      	adds	r2, r3, #1
 1000c98:	60fa      	str	r2, [r7, #12]
 1000c9a:	683a      	ldr	r2, [r7, #0]
 1000c9c:	7e12      	ldrb	r2, [r2, #24]
 1000c9e:	701a      	strb	r2, [r3, #0]
	*puc_dst_buf++ = (uint8_t)px_ind_data->uc_ber_soft_max;
 1000ca0:	68fb      	ldr	r3, [r7, #12]
 1000ca2:	1c5a      	adds	r2, r3, #1
 1000ca4:	60fa      	str	r2, [r7, #12]
 1000ca6:	683a      	ldr	r2, [r7, #0]
 1000ca8:	7e52      	ldrb	r2, [r2, #25]
 1000caa:	701a      	strb	r2, [r3, #0]
	*puc_dst_buf++ = (uint8_t)px_ind_data->uc_cinr_min;
 1000cac:	68fb      	ldr	r3, [r7, #12]
 1000cae:	1c5a      	adds	r2, r3, #1
 1000cb0:	60fa      	str	r2, [r7, #12]
 1000cb2:	683a      	ldr	r2, [r7, #0]
 1000cb4:	7dd2      	ldrb	r2, [r2, #23]
 1000cb6:	701a      	strb	r2, [r3, #0]
	*puc_dst_buf++ = (uint8_t)px_ind_data->uc_cinr_avg;
 1000cb8:	68fb      	ldr	r3, [r7, #12]
 1000cba:	1c5a      	adds	r2, r3, #1
 1000cbc:	60fa      	str	r2, [r7, #12]
 1000cbe:	683a      	ldr	r2, [r7, #0]
 1000cc0:	7d92      	ldrb	r2, [r2, #22]
 1000cc2:	701a      	strb	r2, [r3, #0]
	*puc_dst_buf++ = (uint8_t)px_ind_data->uc_rssi_avg;
 1000cc4:	68fb      	ldr	r3, [r7, #12]
 1000cc6:	1c5a      	adds	r2, r3, #1
 1000cc8:	60fa      	str	r2, [r7, #12]
 1000cca:	683a      	ldr	r2, [r7, #0]
 1000ccc:	7d52      	ldrb	r2, [r2, #21]
 1000cce:	701a      	strb	r2, [r3, #0]
	*puc_dst_buf++ = (uint8_t)(px_ind_data->us_evm_header >> 8);
 1000cd0:	68fb      	ldr	r3, [r7, #12]
 1000cd2:	1c5a      	adds	r2, r3, #1
 1000cd4:	60fa      	str	r2, [r7, #12]
 1000cd6:	683a      	ldr	r2, [r7, #0]
 1000cd8:	8992      	ldrh	r2, [r2, #12]
 1000cda:	b292      	uxth	r2, r2
 1000cdc:	0a12      	lsrs	r2, r2, #8
 1000cde:	b292      	uxth	r2, r2
 1000ce0:	b2d2      	uxtb	r2, r2
 1000ce2:	701a      	strb	r2, [r3, #0]
	*puc_dst_buf++ = (uint8_t)(px_ind_data->us_evm_header);
 1000ce4:	68fb      	ldr	r3, [r7, #12]
 1000ce6:	1c5a      	adds	r2, r3, #1
 1000ce8:	60fa      	str	r2, [r7, #12]
 1000cea:	683a      	ldr	r2, [r7, #0]
 1000cec:	8992      	ldrh	r2, [r2, #12]
 1000cee:	b292      	uxth	r2, r2
 1000cf0:	b2d2      	uxtb	r2, r2
 1000cf2:	701a      	strb	r2, [r3, #0]
	*puc_dst_buf++ = (uint8_t)(px_ind_data->us_evm_payload >> 8);
 1000cf4:	68fb      	ldr	r3, [r7, #12]
 1000cf6:	1c5a      	adds	r2, r3, #1
 1000cf8:	60fa      	str	r2, [r7, #12]
 1000cfa:	683a      	ldr	r2, [r7, #0]
 1000cfc:	89d2      	ldrh	r2, [r2, #14]
 1000cfe:	b292      	uxth	r2, r2
 1000d00:	0a12      	lsrs	r2, r2, #8
 1000d02:	b292      	uxth	r2, r2
 1000d04:	b2d2      	uxtb	r2, r2
 1000d06:	701a      	strb	r2, [r3, #0]
	*puc_dst_buf++ = (uint8_t)(px_ind_data->us_evm_payload);
 1000d08:	68fb      	ldr	r3, [r7, #12]
 1000d0a:	1c5a      	adds	r2, r3, #1
 1000d0c:	60fa      	str	r2, [r7, #12]
 1000d0e:	683a      	ldr	r2, [r7, #0]
 1000d10:	89d2      	ldrh	r2, [r2, #14]
 1000d12:	b292      	uxth	r2, r2
 1000d14:	b2d2      	uxtb	r2, r2
 1000d16:	701a      	strb	r2, [r3, #0]
	*puc_dst_buf++ = (uint8_t)(px_ind_data->ul_evm_header_acum >> 24);
 1000d18:	68fb      	ldr	r3, [r7, #12]
 1000d1a:	1c5a      	adds	r2, r3, #1
 1000d1c:	60fa      	str	r2, [r7, #12]
 1000d1e:	683a      	ldr	r2, [r7, #0]
 1000d20:	6812      	ldr	r2, [r2, #0]
 1000d22:	0e12      	lsrs	r2, r2, #24
 1000d24:	b2d2      	uxtb	r2, r2
 1000d26:	701a      	strb	r2, [r3, #0]
	*puc_dst_buf++ = (uint8_t)(px_ind_data->ul_evm_header_acum >> 16);
 1000d28:	68fb      	ldr	r3, [r7, #12]
 1000d2a:	1c5a      	adds	r2, r3, #1
 1000d2c:	60fa      	str	r2, [r7, #12]
 1000d2e:	683a      	ldr	r2, [r7, #0]
 1000d30:	6812      	ldr	r2, [r2, #0]
 1000d32:	0c12      	lsrs	r2, r2, #16
 1000d34:	b2d2      	uxtb	r2, r2
 1000d36:	701a      	strb	r2, [r3, #0]
	*puc_dst_buf++ = (uint8_t)(px_ind_data->ul_evm_header_acum >> 8);
 1000d38:	68fb      	ldr	r3, [r7, #12]
 1000d3a:	1c5a      	adds	r2, r3, #1
 1000d3c:	60fa      	str	r2, [r7, #12]
 1000d3e:	683a      	ldr	r2, [r7, #0]
 1000d40:	6812      	ldr	r2, [r2, #0]
 1000d42:	0a12      	lsrs	r2, r2, #8
 1000d44:	b2d2      	uxtb	r2, r2
 1000d46:	701a      	strb	r2, [r3, #0]
	*puc_dst_buf++ = (uint8_t)(px_ind_data->ul_evm_header_acum);
 1000d48:	68fb      	ldr	r3, [r7, #12]
 1000d4a:	1c5a      	adds	r2, r3, #1
 1000d4c:	60fa      	str	r2, [r7, #12]
 1000d4e:	683a      	ldr	r2, [r7, #0]
 1000d50:	6812      	ldr	r2, [r2, #0]
 1000d52:	b2d2      	uxtb	r2, r2
 1000d54:	701a      	strb	r2, [r3, #0]
	*puc_dst_buf++ = (uint8_t)(px_ind_data->ul_evm_payload_acum >> 24);
 1000d56:	68fb      	ldr	r3, [r7, #12]
 1000d58:	1c5a      	adds	r2, r3, #1
 1000d5a:	60fa      	str	r2, [r7, #12]
 1000d5c:	683a      	ldr	r2, [r7, #0]
 1000d5e:	6852      	ldr	r2, [r2, #4]
 1000d60:	0e12      	lsrs	r2, r2, #24
 1000d62:	b2d2      	uxtb	r2, r2
 1000d64:	701a      	strb	r2, [r3, #0]
	*puc_dst_buf++ = (uint8_t)(px_ind_data->ul_evm_payload_acum >> 16);
 1000d66:	68fb      	ldr	r3, [r7, #12]
 1000d68:	1c5a      	adds	r2, r3, #1
 1000d6a:	60fa      	str	r2, [r7, #12]
 1000d6c:	683a      	ldr	r2, [r7, #0]
 1000d6e:	6852      	ldr	r2, [r2, #4]
 1000d70:	0c12      	lsrs	r2, r2, #16
 1000d72:	b2d2      	uxtb	r2, r2
 1000d74:	701a      	strb	r2, [r3, #0]
	*puc_dst_buf++ = (uint8_t)(px_ind_data->ul_evm_payload_acum >> 8);
 1000d76:	68fb      	ldr	r3, [r7, #12]
 1000d78:	1c5a      	adds	r2, r3, #1
 1000d7a:	60fa      	str	r2, [r7, #12]
 1000d7c:	683a      	ldr	r2, [r7, #0]
 1000d7e:	6852      	ldr	r2, [r2, #4]
 1000d80:	0a12      	lsrs	r2, r2, #8
 1000d82:	b2d2      	uxtb	r2, r2
 1000d84:	701a      	strb	r2, [r3, #0]
	*puc_dst_buf++ = (uint8_t)(px_ind_data->ul_evm_payload_acum);
 1000d86:	68fb      	ldr	r3, [r7, #12]
 1000d88:	1c5a      	adds	r2, r3, #1
 1000d8a:	60fa      	str	r2, [r7, #12]
 1000d8c:	683a      	ldr	r2, [r7, #0]
 1000d8e:	6852      	ldr	r2, [r2, #4]
 1000d90:	b2d2      	uxtb	r2, r2
 1000d92:	701a      	strb	r2, [r3, #0]
	*puc_dst_buf++ = (uint8_t)(px_ind_data->ul_rx_time >> 24);
 1000d94:	68fb      	ldr	r3, [r7, #12]
 1000d96:	1c5a      	adds	r2, r3, #1
 1000d98:	60fa      	str	r2, [r7, #12]
 1000d9a:	683a      	ldr	r2, [r7, #0]
 1000d9c:	6892      	ldr	r2, [r2, #8]
 1000d9e:	0e12      	lsrs	r2, r2, #24
 1000da0:	b2d2      	uxtb	r2, r2
 1000da2:	701a      	strb	r2, [r3, #0]
	*puc_dst_buf++ = (uint8_t)(px_ind_data->ul_rx_time >> 16);
 1000da4:	68fb      	ldr	r3, [r7, #12]
 1000da6:	1c5a      	adds	r2, r3, #1
 1000da8:	60fa      	str	r2, [r7, #12]
 1000daa:	683a      	ldr	r2, [r7, #0]
 1000dac:	6892      	ldr	r2, [r2, #8]
 1000dae:	0c12      	lsrs	r2, r2, #16
 1000db0:	b2d2      	uxtb	r2, r2
 1000db2:	701a      	strb	r2, [r3, #0]
	*puc_dst_buf++ = (uint8_t)(px_ind_data->ul_rx_time >> 8);
 1000db4:	68fb      	ldr	r3, [r7, #12]
 1000db6:	1c5a      	adds	r2, r3, #1
 1000db8:	60fa      	str	r2, [r7, #12]
 1000dba:	683a      	ldr	r2, [r7, #0]
 1000dbc:	6892      	ldr	r2, [r2, #8]
 1000dbe:	0a12      	lsrs	r2, r2, #8
 1000dc0:	b2d2      	uxtb	r2, r2
 1000dc2:	701a      	strb	r2, [r3, #0]
	*puc_dst_buf++ = (uint8_t)(px_ind_data->ul_rx_time);
 1000dc4:	68fb      	ldr	r3, [r7, #12]
 1000dc6:	1c5a      	adds	r2, r3, #1
 1000dc8:	60fa      	str	r2, [r7, #12]
 1000dca:	683a      	ldr	r2, [r7, #0]
 1000dcc:	6892      	ldr	r2, [r2, #8]
 1000dce:	b2d2      	uxtb	r2, r2
 1000dd0:	701a      	strb	r2, [r3, #0]
	*puc_dst_buf++ = (uint8_t)px_ind_data->uc_nar_bnd_percent;
 1000dd2:	68fb      	ldr	r3, [r7, #12]
 1000dd4:	1c5a      	adds	r2, r3, #1
 1000dd6:	60fa      	str	r2, [r7, #12]
 1000dd8:	683a      	ldr	r2, [r7, #0]
 1000dda:	7e92      	ldrb	r2, [r2, #26]
 1000ddc:	701a      	strb	r2, [r3, #0]
	*puc_dst_buf++ = (uint8_t)px_ind_data->uc_imp_percent;
 1000dde:	68fb      	ldr	r3, [r7, #12]
 1000de0:	1c5a      	adds	r2, r3, #1
 1000de2:	60fa      	str	r2, [r7, #12]
 1000de4:	683a      	ldr	r2, [r7, #0]
 1000de6:	7ed2      	ldrb	r2, [r2, #27]
 1000de8:	701a      	strb	r2, [r3, #0]

	if (px_ind_data->uc_mod_type == MODE_TYPE_A) {
 1000dea:	683b      	ldr	r3, [r7, #0]
 1000dec:	7cdb      	ldrb	r3, [r3, #19]
 1000dee:	2b00      	cmp	r3, #0
 1000df0:	d11f      	bne.n	1000e32 <atpl360_addon_stringify_ind+0x1da>
		/* remove Generic Data Frame Header */
		uint16_t us_data_len;

		us_data_len = px_ind_data->us_data_len - 3;
 1000df2:	683b      	ldr	r3, [r7, #0]
 1000df4:	8a1b      	ldrh	r3, [r3, #16]
 1000df6:	b29b      	uxth	r3, r3
 1000df8:	3b03      	subs	r3, #3
 1000dfa:	817b      	strh	r3, [r7, #10]
		*puc_dst_buf++ = (uint8_t)(us_data_len >> 8);
 1000dfc:	68fb      	ldr	r3, [r7, #12]
 1000dfe:	1c5a      	adds	r2, r3, #1
 1000e00:	60fa      	str	r2, [r7, #12]
 1000e02:	897a      	ldrh	r2, [r7, #10]
 1000e04:	0a12      	lsrs	r2, r2, #8
 1000e06:	b292      	uxth	r2, r2
 1000e08:	b2d2      	uxtb	r2, r2
 1000e0a:	701a      	strb	r2, [r3, #0]
		*puc_dst_buf++ = (uint8_t)(us_data_len);
 1000e0c:	68fb      	ldr	r3, [r7, #12]
 1000e0e:	1c5a      	adds	r2, r3, #1
 1000e10:	60fa      	str	r2, [r7, #12]
 1000e12:	897a      	ldrh	r2, [r7, #10]
 1000e14:	b2d2      	uxtb	r2, r2
 1000e16:	701a      	strb	r2, [r3, #0]
		memcpy(puc_dst_buf, px_ind_data->puc_data_buf + 3, us_data_len);
 1000e18:	683b      	ldr	r3, [r7, #0]
 1000e1a:	69db      	ldr	r3, [r3, #28]
 1000e1c:	3303      	adds	r3, #3
 1000e1e:	897a      	ldrh	r2, [r7, #10]
 1000e20:	4619      	mov	r1, r3
 1000e22:	68f8      	ldr	r0, [r7, #12]
 1000e24:	4b18      	ldr	r3, [pc, #96]	; (1000e88 <atpl360_addon_stringify_ind+0x230>)
 1000e26:	4798      	blx	r3
		puc_dst_buf += us_data_len;
 1000e28:	897b      	ldrh	r3, [r7, #10]
 1000e2a:	68fa      	ldr	r2, [r7, #12]
 1000e2c:	4413      	add	r3, r2
 1000e2e:	60fb      	str	r3, [r7, #12]
 1000e30:	e021      	b.n	1000e76 <atpl360_addon_stringify_ind+0x21e>
	} else {
		*puc_dst_buf++ = (uint8_t)(px_ind_data->us_data_len >> 8);
 1000e32:	68fb      	ldr	r3, [r7, #12]
 1000e34:	1c5a      	adds	r2, r3, #1
 1000e36:	60fa      	str	r2, [r7, #12]
 1000e38:	683a      	ldr	r2, [r7, #0]
 1000e3a:	8a12      	ldrh	r2, [r2, #16]
 1000e3c:	b292      	uxth	r2, r2
 1000e3e:	0a12      	lsrs	r2, r2, #8
 1000e40:	b292      	uxth	r2, r2
 1000e42:	b2d2      	uxtb	r2, r2
 1000e44:	701a      	strb	r2, [r3, #0]
		*puc_dst_buf++ = (uint8_t)(px_ind_data->us_data_len);
 1000e46:	68fb      	ldr	r3, [r7, #12]
 1000e48:	1c5a      	adds	r2, r3, #1
 1000e4a:	60fa      	str	r2, [r7, #12]
 1000e4c:	683a      	ldr	r2, [r7, #0]
 1000e4e:	8a12      	ldrh	r2, [r2, #16]
 1000e50:	b292      	uxth	r2, r2
 1000e52:	b2d2      	uxtb	r2, r2
 1000e54:	701a      	strb	r2, [r3, #0]
		memcpy(puc_dst_buf, px_ind_data->puc_data_buf, px_ind_data->us_data_len);
 1000e56:	683b      	ldr	r3, [r7, #0]
 1000e58:	69d9      	ldr	r1, [r3, #28]
 1000e5a:	683b      	ldr	r3, [r7, #0]
 1000e5c:	8a1b      	ldrh	r3, [r3, #16]
 1000e5e:	b29b      	uxth	r3, r3
 1000e60:	461a      	mov	r2, r3
 1000e62:	68f8      	ldr	r0, [r7, #12]
 1000e64:	4b08      	ldr	r3, [pc, #32]	; (1000e88 <atpl360_addon_stringify_ind+0x230>)
 1000e66:	4798      	blx	r3
		puc_dst_buf += px_ind_data->us_data_len;
 1000e68:	683b      	ldr	r3, [r7, #0]
 1000e6a:	8a1b      	ldrh	r3, [r3, #16]
 1000e6c:	b29b      	uxth	r3, r3
 1000e6e:	461a      	mov	r2, r3
 1000e70:	68fb      	ldr	r3, [r7, #12]
 1000e72:	4413      	add	r3, r2
 1000e74:	60fb      	str	r3, [r7, #12]
	}

	return (puc_dst_buf - puc_ind_data);
 1000e76:	68fa      	ldr	r2, [r7, #12]
 1000e78:	687b      	ldr	r3, [r7, #4]
 1000e7a:	1ad3      	subs	r3, r2, r3
 1000e7c:	b29b      	uxth	r3, r3
}
 1000e7e:	4618      	mov	r0, r3
 1000e80:	3710      	adds	r7, #16
 1000e82:	46bd      	mov	sp, r7
 1000e84:	bd80      	pop	{r7, pc}
 1000e86:	bf00      	nop
 1000e88:	0100c551 	.word	0x0100c551

01000e8c <atpl360_addon_stringify_cfm>:
 * \param *px_cfm_data       Pointer to struct to convert
 *
 * \return Length of data to buffering
 */
uint16_t atpl360_addon_stringify_cfm(uint8_t *puc_cfm_data, tx_cfm_t *px_cfm_data)
{
 1000e8c:	b480      	push	{r7}
 1000e8e:	b085      	sub	sp, #20
 1000e90:	af00      	add	r7, sp, #0
 1000e92:	6078      	str	r0, [r7, #4]
 1000e94:	6039      	str	r1, [r7, #0]
	uint8_t *puc_dst_buf;

	puc_dst_buf = puc_cfm_data;
 1000e96:	687b      	ldr	r3, [r7, #4]
 1000e98:	60fb      	str	r3, [r7, #12]

	*puc_dst_buf++ = (uint8_t)SERIAL_IF_PHY_COMMAND_SEND_MSG_RSP;
 1000e9a:	68fb      	ldr	r3, [r7, #12]
 1000e9c:	1c5a      	adds	r2, r3, #1
 1000e9e:	60fa      	str	r2, [r7, #12]
 1000ea0:	2207      	movs	r2, #7
 1000ea2:	701a      	strb	r2, [r3, #0]
	*puc_dst_buf++ = (uint8_t)px_cfm_data->uc_buffer_id;
 1000ea4:	68fb      	ldr	r3, [r7, #12]
 1000ea6:	1c5a      	adds	r2, r3, #1
 1000ea8:	60fa      	str	r2, [r7, #12]
 1000eaa:	683a      	ldr	r2, [r7, #0]
 1000eac:	7a92      	ldrb	r2, [r2, #10]
 1000eae:	701a      	strb	r2, [r3, #0]
	*puc_dst_buf++ = (uint8_t)px_cfm_data->uc_tx_result;
 1000eb0:	68fb      	ldr	r3, [r7, #12]
 1000eb2:	1c5a      	adds	r2, r3, #1
 1000eb4:	60fa      	str	r2, [r7, #12]
 1000eb6:	683a      	ldr	r2, [r7, #0]
 1000eb8:	7a52      	ldrb	r2, [r2, #9]
 1000eba:	701a      	strb	r2, [r3, #0]
	*puc_dst_buf++ = (uint8_t)(px_cfm_data->ul_rms_calc >> 24);
 1000ebc:	68fb      	ldr	r3, [r7, #12]
 1000ebe:	1c5a      	adds	r2, r3, #1
 1000ec0:	60fa      	str	r2, [r7, #12]
 1000ec2:	683a      	ldr	r2, [r7, #0]
 1000ec4:	6852      	ldr	r2, [r2, #4]
 1000ec6:	0e12      	lsrs	r2, r2, #24
 1000ec8:	b2d2      	uxtb	r2, r2
 1000eca:	701a      	strb	r2, [r3, #0]
	*puc_dst_buf++ = (uint8_t)(px_cfm_data->ul_rms_calc >> 16);
 1000ecc:	68fb      	ldr	r3, [r7, #12]
 1000ece:	1c5a      	adds	r2, r3, #1
 1000ed0:	60fa      	str	r2, [r7, #12]
 1000ed2:	683a      	ldr	r2, [r7, #0]
 1000ed4:	6852      	ldr	r2, [r2, #4]
 1000ed6:	0c12      	lsrs	r2, r2, #16
 1000ed8:	b2d2      	uxtb	r2, r2
 1000eda:	701a      	strb	r2, [r3, #0]
	*puc_dst_buf++ = (uint8_t)(px_cfm_data->ul_rms_calc >> 8);
 1000edc:	68fb      	ldr	r3, [r7, #12]
 1000ede:	1c5a      	adds	r2, r3, #1
 1000ee0:	60fa      	str	r2, [r7, #12]
 1000ee2:	683a      	ldr	r2, [r7, #0]
 1000ee4:	6852      	ldr	r2, [r2, #4]
 1000ee6:	0a12      	lsrs	r2, r2, #8
 1000ee8:	b2d2      	uxtb	r2, r2
 1000eea:	701a      	strb	r2, [r3, #0]
	*puc_dst_buf++ = (uint8_t)(px_cfm_data->ul_rms_calc);
 1000eec:	68fb      	ldr	r3, [r7, #12]
 1000eee:	1c5a      	adds	r2, r3, #1
 1000ef0:	60fa      	str	r2, [r7, #12]
 1000ef2:	683a      	ldr	r2, [r7, #0]
 1000ef4:	6852      	ldr	r2, [r2, #4]
 1000ef6:	b2d2      	uxtb	r2, r2
 1000ef8:	701a      	strb	r2, [r3, #0]
	*puc_dst_buf++ = (uint8_t)(px_cfm_data->ul_tx_time >> 24);
 1000efa:	68fb      	ldr	r3, [r7, #12]
 1000efc:	1c5a      	adds	r2, r3, #1
 1000efe:	60fa      	str	r2, [r7, #12]
 1000f00:	683a      	ldr	r2, [r7, #0]
 1000f02:	6812      	ldr	r2, [r2, #0]
 1000f04:	0e12      	lsrs	r2, r2, #24
 1000f06:	b2d2      	uxtb	r2, r2
 1000f08:	701a      	strb	r2, [r3, #0]
	*puc_dst_buf++ = (uint8_t)(px_cfm_data->ul_tx_time >> 16);
 1000f0a:	68fb      	ldr	r3, [r7, #12]
 1000f0c:	1c5a      	adds	r2, r3, #1
 1000f0e:	60fa      	str	r2, [r7, #12]
 1000f10:	683a      	ldr	r2, [r7, #0]
 1000f12:	6812      	ldr	r2, [r2, #0]
 1000f14:	0c12      	lsrs	r2, r2, #16
 1000f16:	b2d2      	uxtb	r2, r2
 1000f18:	701a      	strb	r2, [r3, #0]
	*puc_dst_buf++ = (uint8_t)(px_cfm_data->ul_tx_time >> 8);
 1000f1a:	68fb      	ldr	r3, [r7, #12]
 1000f1c:	1c5a      	adds	r2, r3, #1
 1000f1e:	60fa      	str	r2, [r7, #12]
 1000f20:	683a      	ldr	r2, [r7, #0]
 1000f22:	6812      	ldr	r2, [r2, #0]
 1000f24:	0a12      	lsrs	r2, r2, #8
 1000f26:	b2d2      	uxtb	r2, r2
 1000f28:	701a      	strb	r2, [r3, #0]
	*puc_dst_buf++ = (uint8_t)(px_cfm_data->ul_tx_time);
 1000f2a:	68fb      	ldr	r3, [r7, #12]
 1000f2c:	1c5a      	adds	r2, r3, #1
 1000f2e:	60fa      	str	r2, [r7, #12]
 1000f30:	683a      	ldr	r2, [r7, #0]
 1000f32:	6812      	ldr	r2, [r2, #0]
 1000f34:	b2d2      	uxtb	r2, r2
 1000f36:	701a      	strb	r2, [r3, #0]

	return (puc_dst_buf - puc_cfm_data);
 1000f38:	68fa      	ldr	r2, [r7, #12]
 1000f3a:	687b      	ldr	r3, [r7, #4]
 1000f3c:	1ad3      	subs	r3, r2, r3
 1000f3e:	b29b      	uxth	r3, r3
}
 1000f40:	4618      	mov	r0, r3
 1000f42:	3714      	adds	r7, #20
 1000f44:	46bd      	mov	sp, r7
 1000f46:	bc80      	pop	{r7}
 1000f48:	4770      	bx	lr

01000f4a <atpl360_addon_stringify_tx>:
 * \param px_tx_data        Pointer to struct to convert
 *
 * \return Length of data to buffering
 */
uint16_t atpl360_addon_stringify_tx(uint8_t *puc_tx_data, tx_msg_t *px_tx_data)
{
 1000f4a:	b480      	push	{r7}
 1000f4c:	b083      	sub	sp, #12
 1000f4e:	af00      	add	r7, sp, #0
 1000f50:	6078      	str	r0, [r7, #4]
 1000f52:	6039      	str	r1, [r7, #0]
	(void)puc_tx_data;
	(void)px_tx_data;

	return 0;
 1000f54:	2300      	movs	r3, #0
}
 1000f56:	4618      	mov	r0, r3
 1000f58:	370c      	adds	r7, #12
 1000f5a:	46bd      	mov	sp, r7
 1000f5c:	bc80      	pop	{r7}
 1000f5e:	4770      	bx	lr

01000f60 <serial_if_parse_tx_msg>:
 * \param px_tx_msg         Pointer to struct to extract data
 * \param puc_tx_data       Pointer to tx data buffer
 *
 */
void serial_if_parse_tx_msg(tx_msg_t *px_tx_msg, uint8_t *puc_tx_data)
{
 1000f60:	b580      	push	{r7, lr}
 1000f62:	b084      	sub	sp, #16
 1000f64:	af00      	add	r7, sp, #0
 1000f66:	6078      	str	r0, [r7, #4]
 1000f68:	6039      	str	r1, [r7, #0]
	uint8_t *puc_data;

	puc_data = puc_tx_data;
 1000f6a:	683b      	ldr	r3, [r7, #0]
 1000f6c:	60fb      	str	r3, [r7, #12]

	/* Update write parameters of TX struct */
	px_tx_msg->uc_buffer_id = (enum buffer_id)*puc_data++;
 1000f6e:	68fb      	ldr	r3, [r7, #12]
 1000f70:	1c5a      	adds	r2, r3, #1
 1000f72:	60fa      	str	r2, [r7, #12]
 1000f74:	781a      	ldrb	r2, [r3, #0]
 1000f76:	687b      	ldr	r3, [r7, #4]
 1000f78:	72da      	strb	r2, [r3, #11]
	px_tx_msg->uc_att_level = *puc_data++;
 1000f7a:	68fb      	ldr	r3, [r7, #12]
 1000f7c:	1c5a      	adds	r2, r3, #1
 1000f7e:	60fa      	str	r2, [r7, #12]
 1000f80:	781a      	ldrb	r2, [r3, #0]
 1000f82:	687b      	ldr	r3, [r7, #4]
 1000f84:	719a      	strb	r2, [r3, #6]
	px_tx_msg->uc_mod_type = (enum mode_types)*puc_data++;
 1000f86:	68fb      	ldr	r3, [r7, #12]
 1000f88:	1c5a      	adds	r2, r3, #1
 1000f8a:	60fa      	str	r2, [r7, #12]
 1000f8c:	781a      	ldrb	r2, [r3, #0]
 1000f8e:	687b      	ldr	r3, [r7, #4]
 1000f90:	725a      	strb	r2, [r3, #9]
	px_tx_msg->uc_scheme = (enum mod_schemes)*puc_data++;
 1000f92:	68fb      	ldr	r3, [r7, #12]
 1000f94:	1c5a      	adds	r2, r3, #1
 1000f96:	60fa      	str	r2, [r7, #12]
 1000f98:	781a      	ldrb	r2, [r3, #0]
 1000f9a:	687b      	ldr	r3, [r7, #4]
 1000f9c:	71da      	strb	r2, [r3, #7]
	px_tx_msg->uc_tx_mode = *puc_data++;
 1000f9e:	68fb      	ldr	r3, [r7, #12]
 1000fa0:	1c5a      	adds	r2, r3, #1
 1000fa2:	60fa      	str	r2, [r7, #12]
 1000fa4:	781a      	ldrb	r2, [r3, #0]
 1000fa6:	687b      	ldr	r3, [r7, #4]
 1000fa8:	729a      	strb	r2, [r3, #10]
	px_tx_msg->ul_tx_time = ((uint32_t)*puc_data++) << 24;
 1000faa:	68fb      	ldr	r3, [r7, #12]
 1000fac:	1c5a      	adds	r2, r3, #1
 1000fae:	60fa      	str	r2, [r7, #12]
 1000fb0:	781b      	ldrb	r3, [r3, #0]
 1000fb2:	061a      	lsls	r2, r3, #24
 1000fb4:	687b      	ldr	r3, [r7, #4]
 1000fb6:	601a      	str	r2, [r3, #0]
	px_tx_msg->ul_tx_time += ((uint32_t)*puc_data++) << 16;
 1000fb8:	68fb      	ldr	r3, [r7, #12]
 1000fba:	1c5a      	adds	r2, r3, #1
 1000fbc:	60fa      	str	r2, [r7, #12]
 1000fbe:	781b      	ldrb	r3, [r3, #0]
 1000fc0:	041b      	lsls	r3, r3, #16
 1000fc2:	687a      	ldr	r2, [r7, #4]
 1000fc4:	6812      	ldr	r2, [r2, #0]
 1000fc6:	441a      	add	r2, r3
 1000fc8:	687b      	ldr	r3, [r7, #4]
 1000fca:	601a      	str	r2, [r3, #0]
	px_tx_msg->ul_tx_time += ((uint32_t)*puc_data++) << 8;
 1000fcc:	68fb      	ldr	r3, [r7, #12]
 1000fce:	1c5a      	adds	r2, r3, #1
 1000fd0:	60fa      	str	r2, [r7, #12]
 1000fd2:	781b      	ldrb	r3, [r3, #0]
 1000fd4:	021b      	lsls	r3, r3, #8
 1000fd6:	687a      	ldr	r2, [r7, #4]
 1000fd8:	6812      	ldr	r2, [r2, #0]
 1000fda:	441a      	add	r2, r3
 1000fdc:	687b      	ldr	r3, [r7, #4]
 1000fde:	601a      	str	r2, [r3, #0]
	px_tx_msg->ul_tx_time += (uint32_t)*puc_data++;
 1000fe0:	68fb      	ldr	r3, [r7, #12]
 1000fe2:	1c5a      	adds	r2, r3, #1
 1000fe4:	60fa      	str	r2, [r7, #12]
 1000fe6:	781b      	ldrb	r3, [r3, #0]
 1000fe8:	461a      	mov	r2, r3
 1000fea:	687b      	ldr	r3, [r7, #4]
 1000fec:	681b      	ldr	r3, [r3, #0]
 1000fee:	441a      	add	r2, r3
 1000ff0:	687b      	ldr	r3, [r7, #4]
 1000ff2:	601a      	str	r2, [r3, #0]
	px_tx_msg->uc_disable_rx = *puc_data++;
 1000ff4:	68fb      	ldr	r3, [r7, #12]
 1000ff6:	1c5a      	adds	r2, r3, #1
 1000ff8:	60fa      	str	r2, [r7, #12]
 1000ffa:	781a      	ldrb	r2, [r3, #0]
 1000ffc:	687b      	ldr	r3, [r7, #4]
 1000ffe:	721a      	strb	r2, [r3, #8]
	px_tx_msg->us_data_len = ((uint16_t)*puc_data++) << 8;
 1001000:	68fb      	ldr	r3, [r7, #12]
 1001002:	1c5a      	adds	r2, r3, #1
 1001004:	60fa      	str	r2, [r7, #12]
 1001006:	781b      	ldrb	r3, [r3, #0]
 1001008:	b29b      	uxth	r3, r3
 100100a:	021b      	lsls	r3, r3, #8
 100100c:	b29a      	uxth	r2, r3
 100100e:	687b      	ldr	r3, [r7, #4]
 1001010:	809a      	strh	r2, [r3, #4]
	px_tx_msg->us_data_len += (uint16_t)*puc_data++;
 1001012:	68fb      	ldr	r3, [r7, #12]
 1001014:	1c5a      	adds	r2, r3, #1
 1001016:	60fa      	str	r2, [r7, #12]
 1001018:	781b      	ldrb	r3, [r3, #0]
 100101a:	b29b      	uxth	r3, r3
 100101c:	687a      	ldr	r2, [r7, #4]
 100101e:	8892      	ldrh	r2, [r2, #4]
 1001020:	b292      	uxth	r2, r2
 1001022:	4413      	add	r3, r2
 1001024:	b29a      	uxth	r2, r3
 1001026:	687b      	ldr	r3, [r7, #4]
 1001028:	809a      	strh	r2, [r3, #4]
	px_tx_msg->puc_data_buf = spuc_serial_data_buf;
 100102a:	687b      	ldr	r3, [r7, #4]
 100102c:	4a1b      	ldr	r2, [pc, #108]	; (100109c <serial_if_parse_tx_msg+0x13c>)
 100102e:	f8c3 200d 	str.w	r2, [r3, #13]

	/* protect memory: check data len */
	if (px_tx_msg->us_data_len > sizeof(spuc_serial_data_buf)) {
 1001032:	687b      	ldr	r3, [r7, #4]
 1001034:	889b      	ldrh	r3, [r3, #4]
 1001036:	b29b      	uxth	r3, r3
 1001038:	f5b3 7f4a 	cmp.w	r3, #808	; 0x328
 100103c:	d905      	bls.n	100104a <serial_if_parse_tx_msg+0xea>
		px_tx_msg->us_data_len = 0;
 100103e:	687b      	ldr	r3, [r7, #4]
 1001040:	2200      	movs	r2, #0
 1001042:	711a      	strb	r2, [r3, #4]
 1001044:	2200      	movs	r2, #0
 1001046:	715a      	strb	r2, [r3, #5]
		return;
 1001048:	e024      	b.n	1001094 <serial_if_parse_tx_msg+0x134>
	}

	if (px_tx_msg->uc_mod_type == MODE_TYPE_A) {
 100104a:	687b      	ldr	r3, [r7, #4]
 100104c:	7a5b      	ldrb	r3, [r3, #9]
 100104e:	2b00      	cmp	r3, #0
 1001050:	d118      	bne.n	1001084 <serial_if_parse_tx_msg+0x124>
		/* Generic Data Frame */
		spuc_serial_data_buf[0] = 0xAA;
 1001052:	4b12      	ldr	r3, [pc, #72]	; (100109c <serial_if_parse_tx_msg+0x13c>)
 1001054:	22aa      	movs	r2, #170	; 0xaa
 1001056:	701a      	strb	r2, [r3, #0]
		spuc_serial_data_buf[1] = 0xAA;
 1001058:	4b10      	ldr	r3, [pc, #64]	; (100109c <serial_if_parse_tx_msg+0x13c>)
 100105a:	22aa      	movs	r2, #170	; 0xaa
 100105c:	705a      	strb	r2, [r3, #1]
		spuc_serial_data_buf[2] = 0xAA;
 100105e:	4b0f      	ldr	r3, [pc, #60]	; (100109c <serial_if_parse_tx_msg+0x13c>)
 1001060:	22aa      	movs	r2, #170	; 0xaa
 1001062:	709a      	strb	r2, [r3, #2]
		px_tx_msg->us_data_len += 3;
 1001064:	687b      	ldr	r3, [r7, #4]
 1001066:	889b      	ldrh	r3, [r3, #4]
 1001068:	b29b      	uxth	r3, r3
 100106a:	3303      	adds	r3, #3
 100106c:	b29a      	uxth	r2, r3
 100106e:	687b      	ldr	r3, [r7, #4]
 1001070:	809a      	strh	r2, [r3, #4]
		/* copy data */
		memcpy(spuc_serial_data_buf + 3, puc_data, px_tx_msg->us_data_len);
 1001072:	480b      	ldr	r0, [pc, #44]	; (10010a0 <serial_if_parse_tx_msg+0x140>)
 1001074:	687b      	ldr	r3, [r7, #4]
 1001076:	889b      	ldrh	r3, [r3, #4]
 1001078:	b29b      	uxth	r3, r3
 100107a:	461a      	mov	r2, r3
 100107c:	68f9      	ldr	r1, [r7, #12]
 100107e:	4b09      	ldr	r3, [pc, #36]	; (10010a4 <serial_if_parse_tx_msg+0x144>)
 1001080:	4798      	blx	r3
 1001082:	e007      	b.n	1001094 <serial_if_parse_tx_msg+0x134>
	} else {
		/* copy data */
		memcpy(spuc_serial_data_buf, puc_data, px_tx_msg->us_data_len);
 1001084:	687b      	ldr	r3, [r7, #4]
 1001086:	889b      	ldrh	r3, [r3, #4]
 1001088:	b29b      	uxth	r3, r3
 100108a:	461a      	mov	r2, r3
 100108c:	68f9      	ldr	r1, [r7, #12]
 100108e:	4803      	ldr	r0, [pc, #12]	; (100109c <serial_if_parse_tx_msg+0x13c>)
 1001090:	4b04      	ldr	r3, [pc, #16]	; (10010a4 <serial_if_parse_tx_msg+0x144>)
 1001092:	4798      	blx	r3
	}
}
 1001094:	3710      	adds	r7, #16
 1001096:	46bd      	mov	sp, r7
 1001098:	bd80      	pop	{r7, pc}
 100109a:	bf00      	nop
 100109c:	20001110 	.word	0x20001110
 10010a0:	20001113 	.word	0x20001113
 10010a4:	0100c551 	.word	0x0100c551

010010a8 <_spi_send_cmd>:
 * \brief Function to read/write through SPI
 *
 * \return  ATPL360_SUCCESS if there is no error, otherwise returns ATPL360_ERROR.
 */
static atpl360_res_t _spi_send_cmd(uint8_t uc_cmd, atpl360_spi_data_t *px_spi_data)
{
 10010a8:	b580      	push	{r7, lr}
 10010aa:	b084      	sub	sp, #16
 10010ac:	af00      	add	r7, sp, #0
 10010ae:	4603      	mov	r3, r0
 10010b0:	6039      	str	r1, [r7, #0]
 10010b2:	71fb      	strb	r3, [r7, #7]
	uint8_t uc_cnt;
	atpl360_spi_status_t uc_status;

	if (uc_cmd == SPI_WR_CMD) {
 10010b4:	79fb      	ldrb	r3, [r7, #7]
 10010b6:	2b01      	cmp	r3, #1
 10010b8:	d103      	bne.n	10010c2 <_spi_send_cmd+0x1a>
		atpl360_spi_write_buf(px_spi_data);
 10010ba:	6838      	ldr	r0, [r7, #0]
 10010bc:	4b2d      	ldr	r3, [pc, #180]	; (1001174 <_spi_send_cmd+0xcc>)
 10010be:	4798      	blx	r3
 10010c0:	e002      	b.n	10010c8 <_spi_send_cmd+0x20>
	} else {
		atpl360_spi_read_buf(px_spi_data);
 10010c2:	6838      	ldr	r0, [r7, #0]
 10010c4:	4b2c      	ldr	r3, [pc, #176]	; (1001178 <_spi_send_cmd+0xd0>)
 10010c6:	4798      	blx	r3
	}

	uc_cnt = ATPL360_MAX_STATUS_CHECK;
 10010c8:	2302      	movs	r3, #2
 10010ca:	73fb      	strb	r3, [r7, #15]
	uc_status = atpl360_spi_get_status();
 10010cc:	4b2b      	ldr	r3, [pc, #172]	; (100117c <_spi_send_cmd+0xd4>)
 10010ce:	4798      	blx	r3
 10010d0:	4603      	mov	r3, r0
 10010d2:	73bb      	strb	r3, [r7, #14]

	while (uc_status != ATPL360_SPI_STATUS_CORTEX) {
 10010d4:	e045      	b.n	1001162 <_spi_send_cmd+0xba>
		if (uc_status == ATPL360_SPI_STATUS_UNKNOWN) {
 10010d6:	7bbb      	ldrb	r3, [r7, #14]
 10010d8:	2b00      	cmp	r3, #0
 10010da:	d121      	bne.n	1001120 <_spi_send_cmd+0x78>
			/* Safety condition in loop */
			if (_exception_event_cb_handler) {
 10010dc:	4b28      	ldr	r3, [pc, #160]	; (1001180 <_spi_send_cmd+0xd8>)
 10010de:	681b      	ldr	r3, [r3, #0]
 10010e0:	2b00      	cmp	r3, #0
 10010e2:	d003      	beq.n	10010ec <_spi_send_cmd+0x44>
				/* Report SPI Error to Application */
				_exception_event_cb_handler(ATPL360_EXCEPTION_UNEXPECTED_SPI_STATUS);
 10010e4:	4b26      	ldr	r3, [pc, #152]	; (1001180 <_spi_send_cmd+0xd8>)
 10010e6:	681b      	ldr	r3, [r3, #0]
 10010e8:	2000      	movs	r0, #0
 10010ea:	4798      	blx	r3
			}

			/* CRITICAL Safety condition in loop */
			if (!uc_cnt--) {
 10010ec:	7bfb      	ldrb	r3, [r7, #15]
 10010ee:	1e5a      	subs	r2, r3, #1
 10010f0:	73fa      	strb	r2, [r7, #15]
 10010f2:	2b00      	cmp	r3, #0
 10010f4:	d10b      	bne.n	100110e <_spi_send_cmd+0x66>
				if (_exception_event_cb_handler) {
 10010f6:	4b22      	ldr	r3, [pc, #136]	; (1001180 <_spi_send_cmd+0xd8>)
 10010f8:	681b      	ldr	r3, [r3, #0]
 10010fa:	2b00      	cmp	r3, #0
 10010fc:	d003      	beq.n	1001106 <_spi_send_cmd+0x5e>
					/* Report Critical SPI Error to Application */
					_exception_event_cb_handler(ATPL360_EXCEPTION_SPI_CRITICAL_ERROR);
 10010fe:	4b20      	ldr	r3, [pc, #128]	; (1001180 <_spi_send_cmd+0xd8>)
 1001100:	681b      	ldr	r3, [r3, #0]
 1001102:	2001      	movs	r0, #1
 1001104:	4798      	blx	r3
				}

				uc_cnt = ATPL360_MAX_STATUS_CHECK;
 1001106:	2302      	movs	r3, #2
 1001108:	73fb      	strb	r3, [r7, #15]
				return ATPL360_ERROR;
 100110a:	2301      	movs	r3, #1
 100110c:	e02d      	b.n	100116a <_spi_send_cmd+0xc2>
			}

			/* Wait to system re-start */
			sx_atpl360_hal_wrapper.plc_delay(DELAY_TREF_MS, ATPL360_RST_WAIT_MS);
 100110e:	4b1d      	ldr	r3, [pc, #116]	; (1001184 <_spi_send_cmd+0xdc>)
 1001110:	699b      	ldr	r3, [r3, #24]
 1001112:	2164      	movs	r1, #100	; 0x64
 1001114:	2001      	movs	r0, #1
 1001116:	4798      	blx	r3

			/* ATPL360 hard reset */
			sx_atpl360_hal_wrapper.plc_reset();
 1001118:	4b1a      	ldr	r3, [pc, #104]	; (1001184 <_spi_send_cmd+0xdc>)
 100111a:	685b      	ldr	r3, [r3, #4]
 100111c:	4798      	blx	r3
 100111e:	e00a      	b.n	1001136 <_spi_send_cmd+0x8e>
		} else if (uc_status == ATPL360_SPI_STATUS_FW_VALIDATING) {
 1001120:	7bbb      	ldrb	r3, [r7, #14]
 1001122:	2b03      	cmp	r3, #3
 1001124:	d107      	bne.n	1001136 <_spi_send_cmd+0x8e>
			/* Report Reset detection to Application */
			if (_exception_event_cb_handler) {
 1001126:	4b16      	ldr	r3, [pc, #88]	; (1001180 <_spi_send_cmd+0xd8>)
 1001128:	681b      	ldr	r3, [r3, #0]
 100112a:	2b00      	cmp	r3, #0
 100112c:	d003      	beq.n	1001136 <_spi_send_cmd+0x8e>
				_exception_event_cb_handler(ATPL360_EXCEPTION_RESET);
 100112e:	4b14      	ldr	r3, [pc, #80]	; (1001180 <_spi_send_cmd+0xd8>)
 1001130:	681b      	ldr	r3, [r3, #0]
 1001132:	2002      	movs	r0, #2
 1001134:	4798      	blx	r3
			}
		}

		/* Validate phase */
		if (uc_cmd == SPI_WR_CMD) {
 1001136:	79fb      	ldrb	r3, [r7, #7]
 1001138:	2b01      	cmp	r3, #1
 100113a:	d103      	bne.n	1001144 <_spi_send_cmd+0x9c>
			atpl360_spi_write_buf(px_spi_data);
 100113c:	6838      	ldr	r0, [r7, #0]
 100113e:	4b0d      	ldr	r3, [pc, #52]	; (1001174 <_spi_send_cmd+0xcc>)
 1001140:	4798      	blx	r3
 1001142:	e002      	b.n	100114a <_spi_send_cmd+0xa2>
		} else {
			atpl360_spi_read_buf(px_spi_data);
 1001144:	6838      	ldr	r0, [r7, #0]
 1001146:	4b0c      	ldr	r3, [pc, #48]	; (1001178 <_spi_send_cmd+0xd0>)
 1001148:	4798      	blx	r3
		}

		/* Check TX cfm flag */
		if (suc_waiting_tx_cfm) {
 100114a:	4b0f      	ldr	r3, [pc, #60]	; (1001188 <_spi_send_cmd+0xe0>)
 100114c:	781b      	ldrb	r3, [r3, #0]
 100114e:	b2db      	uxtb	r3, r3
 1001150:	2b00      	cmp	r3, #0
 1001152:	d002      	beq.n	100115a <_spi_send_cmd+0xb2>
			/* Report CFM Error to Application. Pending report TX_CFM and abort due to ATPL360 reset*/
			sb_report_tx_cfm_error_by_rst = true;
 1001154:	4b0d      	ldr	r3, [pc, #52]	; (100118c <_spi_send_cmd+0xe4>)
 1001156:	2201      	movs	r2, #1
 1001158:	701a      	strb	r2, [r3, #0]
		}

		/* Update SPI status */
		uc_status = atpl360_spi_get_status();
 100115a:	4b08      	ldr	r3, [pc, #32]	; (100117c <_spi_send_cmd+0xd4>)
 100115c:	4798      	blx	r3
 100115e:	4603      	mov	r3, r0
 1001160:	73bb      	strb	r3, [r7, #14]
	while (uc_status != ATPL360_SPI_STATUS_CORTEX) {
 1001162:	7bbb      	ldrb	r3, [r7, #14]
 1001164:	2b02      	cmp	r3, #2
 1001166:	d1b6      	bne.n	10010d6 <_spi_send_cmd+0x2e>
	}

	return ATPL360_SUCCESS;
 1001168:	2300      	movs	r3, #0
}
 100116a:	4618      	mov	r0, r3
 100116c:	3710      	adds	r7, #16
 100116e:	46bd      	mov	sp, r7
 1001170:	bd80      	pop	{r7, pc}
 1001172:	bf00      	nop
 1001174:	010021a1 	.word	0x010021a1
 1001178:	010021d1 	.word	0x010021d1
 100117c:	0100227d 	.word	0x0100227d
 1001180:	200082e8 	.word	0x200082e8
 1001184:	200082cc 	.word	0x200082cc
 1001188:	20001cbc 	.word	0x20001cbc
 100118c:	20001cbd 	.word	0x20001cbd

01001190 <_get_interrupt_info>:
 * \brief Function to get Interrupt info
 *
 * \return Interrupt info in case of ATPl360 is enable. 0 in otherwise
 */
static void _get_interrupt_info(atpl360_events_t *px_events_info, atpl360_spi_status_info_t *x_status_info)
{
 1001190:	b580      	push	{r7, lr}
 1001192:	b088      	sub	sp, #32
 1001194:	af00      	add	r7, sp, #0
 1001196:	6078      	str	r0, [r7, #4]
 1001198:	6039      	str	r1, [r7, #0]
	atpl360_spi_data_t x_spi_data;
	uint8_t *puc_info;
	uint8_t puc_int_buffer[ATPL360_EVENT_DATA_LENGTH];

	puc_info = puc_int_buffer;
 100119a:	f107 030c 	add.w	r3, r7, #12
 100119e:	61fb      	str	r3, [r7, #28]

	/* Read Time Ref and Event flags */
	x_spi_data.us_mem_id = ATPL360_STATUS_INFO_ID;
 10011a0:	2300      	movs	r3, #0
 10011a2:	82fb      	strh	r3, [r7, #22]
	x_spi_data.us_len = sizeof(puc_int_buffer);
 10011a4:	2308      	movs	r3, #8
 10011a6:	82bb      	strh	r3, [r7, #20]
	x_spi_data.puc_data_buf = puc_info;
 10011a8:	69fb      	ldr	r3, [r7, #28]
 10011aa:	61bb      	str	r3, [r7, #24]
	if (_spi_send_cmd(SPI_RD_CMD, &x_spi_data) == ATPL360_SUCCESS) {
 10011ac:	f107 0314 	add.w	r3, r7, #20
 10011b0:	4619      	mov	r1, r3
 10011b2:	2000      	movs	r0, #0
 10011b4:	4b2e      	ldr	r3, [pc, #184]	; (1001270 <_get_interrupt_info+0xe0>)
 10011b6:	4798      	blx	r3
 10011b8:	4603      	mov	r3, r0
 10011ba:	2b00      	cmp	r3, #0
 10011bc:	d153      	bne.n	1001266 <_get_interrupt_info+0xd6>
		/* Extract events info */
		atpl360_spi_get_status_info(x_status_info);
 10011be:	6838      	ldr	r0, [r7, #0]
 10011c0:	4b2c      	ldr	r3, [pc, #176]	; (1001274 <_get_interrupt_info+0xe4>)
 10011c2:	4798      	blx	r3
		atpl360_comm_set_event_info(px_events_info, x_status_info->ul_flags);
 10011c4:	683b      	ldr	r3, [r7, #0]
 10011c6:	681b      	ldr	r3, [r3, #0]
 10011c8:	b29b      	uxth	r3, r3
 10011ca:	4619      	mov	r1, r3
 10011cc:	6878      	ldr	r0, [r7, #4]
 10011ce:	4b2a      	ldr	r3, [pc, #168]	; (1001278 <_get_interrupt_info+0xe8>)
 10011d0:	4798      	blx	r3

		/* Extract Timer info */
		px_events_info->ul_timer_ref = ((uint32_t)*puc_info++);
 10011d2:	69fb      	ldr	r3, [r7, #28]
 10011d4:	1c5a      	adds	r2, r3, #1
 10011d6:	61fa      	str	r2, [r7, #28]
 10011d8:	781b      	ldrb	r3, [r3, #0]
 10011da:	461a      	mov	r2, r3
 10011dc:	687b      	ldr	r3, [r7, #4]
 10011de:	601a      	str	r2, [r3, #0]
		px_events_info->ul_timer_ref += ((uint32_t)*puc_info++) << 8;
 10011e0:	69fb      	ldr	r3, [r7, #28]
 10011e2:	1c5a      	adds	r2, r3, #1
 10011e4:	61fa      	str	r2, [r7, #28]
 10011e6:	781b      	ldrb	r3, [r3, #0]
 10011e8:	021b      	lsls	r3, r3, #8
 10011ea:	687a      	ldr	r2, [r7, #4]
 10011ec:	6812      	ldr	r2, [r2, #0]
 10011ee:	441a      	add	r2, r3
 10011f0:	687b      	ldr	r3, [r7, #4]
 10011f2:	601a      	str	r2, [r3, #0]
		px_events_info->ul_timer_ref += ((uint32_t)*puc_info++) << 16;
 10011f4:	69fb      	ldr	r3, [r7, #28]
 10011f6:	1c5a      	adds	r2, r3, #1
 10011f8:	61fa      	str	r2, [r7, #28]
 10011fa:	781b      	ldrb	r3, [r3, #0]
 10011fc:	041b      	lsls	r3, r3, #16
 10011fe:	687a      	ldr	r2, [r7, #4]
 1001200:	6812      	ldr	r2, [r2, #0]
 1001202:	441a      	add	r2, r3
 1001204:	687b      	ldr	r3, [r7, #4]
 1001206:	601a      	str	r2, [r3, #0]
		px_events_info->ul_timer_ref += ((uint32_t)*puc_info++) << 24;
 1001208:	69fb      	ldr	r3, [r7, #28]
 100120a:	1c5a      	adds	r2, r3, #1
 100120c:	61fa      	str	r2, [r7, #28]
 100120e:	781b      	ldrb	r3, [r3, #0]
 1001210:	061b      	lsls	r3, r3, #24
 1001212:	687a      	ldr	r2, [r7, #4]
 1001214:	6812      	ldr	r2, [r2, #0]
 1001216:	441a      	add	r2, r3
 1001218:	687b      	ldr	r3, [r7, #4]
 100121a:	601a      	str	r2, [r3, #0]

		/* Extract Event info */
		px_events_info->ul_event_info = ((uint32_t)*puc_info++);
 100121c:	69fb      	ldr	r3, [r7, #28]
 100121e:	1c5a      	adds	r2, r3, #1
 1001220:	61fa      	str	r2, [r7, #28]
 1001222:	781b      	ldrb	r3, [r3, #0]
 1001224:	461a      	mov	r2, r3
 1001226:	687b      	ldr	r3, [r7, #4]
 1001228:	605a      	str	r2, [r3, #4]
		px_events_info->ul_event_info += ((uint32_t)*puc_info++) << 8;
 100122a:	69fb      	ldr	r3, [r7, #28]
 100122c:	1c5a      	adds	r2, r3, #1
 100122e:	61fa      	str	r2, [r7, #28]
 1001230:	781b      	ldrb	r3, [r3, #0]
 1001232:	021b      	lsls	r3, r3, #8
 1001234:	687a      	ldr	r2, [r7, #4]
 1001236:	6852      	ldr	r2, [r2, #4]
 1001238:	441a      	add	r2, r3
 100123a:	687b      	ldr	r3, [r7, #4]
 100123c:	605a      	str	r2, [r3, #4]
		px_events_info->ul_event_info += ((uint32_t)*puc_info++) << 16;
 100123e:	69fb      	ldr	r3, [r7, #28]
 1001240:	1c5a      	adds	r2, r3, #1
 1001242:	61fa      	str	r2, [r7, #28]
 1001244:	781b      	ldrb	r3, [r3, #0]
 1001246:	041b      	lsls	r3, r3, #16
 1001248:	687a      	ldr	r2, [r7, #4]
 100124a:	6852      	ldr	r2, [r2, #4]
 100124c:	441a      	add	r2, r3
 100124e:	687b      	ldr	r3, [r7, #4]
 1001250:	605a      	str	r2, [r3, #4]
		px_events_info->ul_event_info += ((uint32_t)*puc_info++) << 24;
 1001252:	69fb      	ldr	r3, [r7, #28]
 1001254:	1c5a      	adds	r2, r3, #1
 1001256:	61fa      	str	r2, [r7, #28]
 1001258:	781b      	ldrb	r3, [r3, #0]
 100125a:	061b      	lsls	r3, r3, #24
 100125c:	687a      	ldr	r2, [r7, #4]
 100125e:	6852      	ldr	r2, [r2, #4]
 1001260:	441a      	add	r2, r3
 1001262:	687b      	ldr	r3, [r7, #4]
 1001264:	605a      	str	r2, [r3, #4]
	}
}
 1001266:	bf00      	nop
 1001268:	3720      	adds	r7, #32
 100126a:	46bd      	mov	sp, r7
 100126c:	bd80      	pop	{r7, pc}
 100126e:	bf00      	nop
 1001270:	010010a9 	.word	0x010010a9
 1001274:	01002291 	.word	0x01002291
 1001278:	0100078d 	.word	0x0100078d

0100127c <_handler_atpl360_ext_int>:

/**
 * \brief External interrupt handler
 */
static void _handler_atpl360_ext_int(void)
{
 100127c:	b580      	push	{r7, lr}
 100127e:	b088      	sub	sp, #32
 1001280:	af00      	add	r7, sp, #0
	atpl360_events_t x_events_info;
	atpl360_spi_data_t x_spi_data;
	atpl360_spi_status_info_t x_spi_status_info;
	uint8_t uc_i;

	ul_int_cnt++;
 1001282:	4b66      	ldr	r3, [pc, #408]	; (100141c <_handler_atpl360_ext_int+0x1a0>)
 1001284:	681b      	ldr	r3, [r3, #0]
 1001286:	3301      	adds	r3, #1
 1001288:	4a64      	ldr	r2, [pc, #400]	; (100141c <_handler_atpl360_ext_int+0x1a0>)
 100128a:	6013      	str	r3, [r2, #0]

	if (sb_component_enabled) {
 100128c:	4b64      	ldr	r3, [pc, #400]	; (1001420 <_handler_atpl360_ext_int+0x1a4>)
 100128e:	781b      	ldrb	r3, [r3, #0]
 1001290:	2b00      	cmp	r3, #0
 1001292:	f000 80ba 	beq.w	100140a <_handler_atpl360_ext_int+0x18e>
		/* Time guard */
		sx_atpl360_hal_wrapper.plc_delay(DELAY_TREF_US, 20);
 1001296:	4b63      	ldr	r3, [pc, #396]	; (1001424 <_handler_atpl360_ext_int+0x1a8>)
 1001298:	699b      	ldr	r3, [r3, #24]
 100129a:	2114      	movs	r1, #20
 100129c:	2002      	movs	r0, #2
 100129e:	4798      	blx	r3

		/* capture information relative to ATPL360 events */
		_get_interrupt_info(&x_events_info, &x_spi_status_info);
 10012a0:	463a      	mov	r2, r7
 10012a2:	f107 0310 	add.w	r3, r7, #16
 10012a6:	4611      	mov	r1, r2
 10012a8:	4618      	mov	r0, r3
 10012aa:	4b5f      	ldr	r3, [pc, #380]	; (1001428 <_handler_atpl360_ext_int+0x1ac>)
 10012ac:	4798      	blx	r3

		/* Check MSG_CFM_EV_TYPE event */
		for (uc_i = 0; uc_i < NUM_TX_BUFFERS; uc_i++) {
 10012ae:	2300      	movs	r3, #0
 10012b0:	77fb      	strb	r3, [r7, #31]
 10012b2:	e02e      	b.n	1001312 <_handler_atpl360_ext_int+0x96>
			if (x_events_info.b_cfm_event_enable[uc_i]) {
 10012b4:	7ffb      	ldrb	r3, [r7, #31]
 10012b6:	f107 0220 	add.w	r2, r7, #32
 10012ba:	4413      	add	r3, r2
 10012bc:	f813 3c07 	ldrb.w	r3, [r3, #-7]
 10012c0:	2b00      	cmp	r3, #0
 10012c2:	d023      	beq.n	100130c <_handler_atpl360_ext_int+0x90>
				/* Read confirm message */
				x_spi_data.us_mem_id = atpl360_comm_get_event_id(MSG_CFM_EV_TYPE, uc_i);
 10012c4:	7ffb      	ldrb	r3, [r7, #31]
 10012c6:	4619      	mov	r1, r3
 10012c8:	2002      	movs	r0, #2
 10012ca:	4b58      	ldr	r3, [pc, #352]	; (100142c <_handler_atpl360_ext_int+0x1b0>)
 10012cc:	4798      	blx	r3
 10012ce:	4603      	mov	r3, r0
 10012d0:	817b      	strh	r3, [r7, #10]
				x_spi_data.puc_data_buf = spuc_cfm_buffer[uc_i];
 10012d2:	7ffa      	ldrb	r2, [r7, #31]
 10012d4:	4613      	mov	r3, r2
 10012d6:	009b      	lsls	r3, r3, #2
 10012d8:	4413      	add	r3, r2
 10012da:	005b      	lsls	r3, r3, #1
 10012dc:	4413      	add	r3, r2
 10012de:	4a54      	ldr	r2, [pc, #336]	; (1001430 <_handler_atpl360_ext_int+0x1b4>)
 10012e0:	4413      	add	r3, r2
 10012e2:	60fb      	str	r3, [r7, #12]
				x_spi_data.us_len = sizeof(spuc_cfm_buffer[uc_i]);
 10012e4:	230b      	movs	r3, #11
 10012e6:	813b      	strh	r3, [r7, #8]
				if (_spi_send_cmd(SPI_RD_CMD, &x_spi_data) == ATPL360_SUCCESS) {
 10012e8:	f107 0308 	add.w	r3, r7, #8
 10012ec:	4619      	mov	r1, r3
 10012ee:	2000      	movs	r0, #0
 10012f0:	4b50      	ldr	r3, [pc, #320]	; (1001434 <_handler_atpl360_ext_int+0x1b8>)
 10012f2:	4798      	blx	r3
 10012f4:	4603      	mov	r3, r0
 10012f6:	2b00      	cmp	r3, #0
 10012f8:	d108      	bne.n	100130c <_handler_atpl360_ext_int+0x90>
					spb_cfm_event_enable[uc_i] = true;
 10012fa:	7ffb      	ldrb	r3, [r7, #31]
 10012fc:	4a4e      	ldr	r2, [pc, #312]	; (1001438 <_handler_atpl360_ext_int+0x1bc>)
 10012fe:	2101      	movs	r1, #1
 1001300:	54d1      	strb	r1, [r2, r3]
					ul_int_tx_cnt++;
 1001302:	4b4e      	ldr	r3, [pc, #312]	; (100143c <_handler_atpl360_ext_int+0x1c0>)
 1001304:	681b      	ldr	r3, [r3, #0]
 1001306:	3301      	adds	r3, #1
 1001308:	4a4c      	ldr	r2, [pc, #304]	; (100143c <_handler_atpl360_ext_int+0x1c0>)
 100130a:	6013      	str	r3, [r2, #0]
		for (uc_i = 0; uc_i < NUM_TX_BUFFERS; uc_i++) {
 100130c:	7ffb      	ldrb	r3, [r7, #31]
 100130e:	3301      	adds	r3, #1
 1001310:	77fb      	strb	r3, [r7, #31]
 1001312:	7ffb      	ldrb	r3, [r7, #31]
 1001314:	2b01      	cmp	r3, #1
 1001316:	d9cd      	bls.n	10012b4 <_handler_atpl360_ext_int+0x38>
				}
			}
		}

		/* Check MSG_IND_DATA_EV_TYPE event (First event in rx) */
		if (x_events_info.b_data_ind_event_enable) {
 1001318:	7efb      	ldrb	r3, [r7, #27]
 100131a:	2b00      	cmp	r3, #0
 100131c:	d024      	beq.n	1001368 <_handler_atpl360_ext_int+0xec>
			/* Read DATA from indication message */
			x_spi_data.us_mem_id = atpl360_comm_get_event_id(MSG_IND_DATA_EV_TYPE, NULL);
 100131e:	2100      	movs	r1, #0
 1001320:	2000      	movs	r0, #0
 1001322:	4b42      	ldr	r3, [pc, #264]	; (100142c <_handler_atpl360_ext_int+0x1b0>)
 1001324:	4798      	blx	r3
 1001326:	4603      	mov	r3, r0
 1001328:	817b      	strh	r3, [r7, #10]
			x_spi_data.puc_data_buf = spuc_ind_buffer + sizeof(rx_msg_t) - 4;
 100132a:	4b45      	ldr	r3, [pc, #276]	; (1001440 <_handler_atpl360_ext_int+0x1c4>)
 100132c:	60fb      	str	r3, [r7, #12]
			x_spi_data.us_len = ATPL360_GET_EV_DAT_LEN_INFO(x_events_info.ul_event_info);
 100132e:	697b      	ldr	r3, [r7, #20]
 1001330:	b29b      	uxth	r3, r3
 1001332:	813b      	strh	r3, [r7, #8]
			if ((x_spi_data.us_len == 0) || (x_spi_data.us_len > ATPL360_DATA_PKT_SIZE)) {
 1001334:	893b      	ldrh	r3, [r7, #8]
 1001336:	2b00      	cmp	r3, #0
 1001338:	d003      	beq.n	1001342 <_handler_atpl360_ext_int+0xc6>
 100133a:	893b      	ldrh	r3, [r7, #8]
 100133c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 1001340:	d901      	bls.n	1001346 <_handler_atpl360_ext_int+0xca>
				x_spi_data.us_len = 1;
 1001342:	2301      	movs	r3, #1
 1001344:	813b      	strh	r3, [r7, #8]
			}

			if (_spi_send_cmd(SPI_RD_CMD, &x_spi_data) == ATPL360_SUCCESS) {
 1001346:	f107 0308 	add.w	r3, r7, #8
 100134a:	4619      	mov	r1, r3
 100134c:	2000      	movs	r0, #0
 100134e:	4b39      	ldr	r3, [pc, #228]	; (1001434 <_handler_atpl360_ext_int+0x1b8>)
 1001350:	4798      	blx	r3
 1001352:	4603      	mov	r3, r0
 1001354:	2b00      	cmp	r3, #0
 1001356:	d107      	bne.n	1001368 <_handler_atpl360_ext_int+0xec>
				sb_data_ind_event_enable = true;
 1001358:	4b3a      	ldr	r3, [pc, #232]	; (1001444 <_handler_atpl360_ext_int+0x1c8>)
 100135a:	2201      	movs	r2, #1
 100135c:	701a      	strb	r2, [r3, #0]
				ul_int_rx_data_cnt++;
 100135e:	4b3a      	ldr	r3, [pc, #232]	; (1001448 <_handler_atpl360_ext_int+0x1cc>)
 1001360:	681b      	ldr	r3, [r3, #0]
 1001362:	3301      	adds	r3, #1
 1001364:	4a38      	ldr	r2, [pc, #224]	; (1001448 <_handler_atpl360_ext_int+0x1cc>)
 1001366:	6013      	str	r3, [r2, #0]
			}
		}

		/* Check MSG_IND_PARAM_EV_TYPE event (Second event in rx) */
		if (x_events_info.b_qpar_ind_event_enable) {
 1001368:	7f3b      	ldrb	r3, [r7, #28]
 100136a:	2b00      	cmp	r3, #0
 100136c:	d01a      	beq.n	10013a4 <_handler_atpl360_ext_int+0x128>
			/* Read PARAMS from indication message */
			x_spi_data.us_mem_id = atpl360_comm_get_event_id(MSG_IND_PARAM_EV_TYPE, NULL);
 100136e:	2100      	movs	r1, #0
 1001370:	2001      	movs	r0, #1
 1001372:	4b2e      	ldr	r3, [pc, #184]	; (100142c <_handler_atpl360_ext_int+0x1b0>)
 1001374:	4798      	blx	r3
 1001376:	4603      	mov	r3, r0
 1001378:	817b      	strh	r3, [r7, #10]
			x_spi_data.puc_data_buf = spuc_ind_buffer;
 100137a:	4b34      	ldr	r3, [pc, #208]	; (100144c <_handler_atpl360_ext_int+0x1d0>)
 100137c:	60fb      	str	r3, [r7, #12]
			x_spi_data.us_len = sizeof(rx_msg_t) - 4;
 100137e:	231c      	movs	r3, #28
 1001380:	813b      	strh	r3, [r7, #8]
			if (_spi_send_cmd(SPI_RD_CMD, &x_spi_data) == ATPL360_SUCCESS) {
 1001382:	f107 0308 	add.w	r3, r7, #8
 1001386:	4619      	mov	r1, r3
 1001388:	2000      	movs	r0, #0
 100138a:	4b2a      	ldr	r3, [pc, #168]	; (1001434 <_handler_atpl360_ext_int+0x1b8>)
 100138c:	4798      	blx	r3
 100138e:	4603      	mov	r3, r0
 1001390:	2b00      	cmp	r3, #0
 1001392:	d107      	bne.n	10013a4 <_handler_atpl360_ext_int+0x128>
				sb_param_ind_event_enable = true;
 1001394:	4b2e      	ldr	r3, [pc, #184]	; (1001450 <_handler_atpl360_ext_int+0x1d4>)
 1001396:	2201      	movs	r2, #1
 1001398:	701a      	strb	r2, [r3, #0]
				ul_int_rx_qpar_cnt++;
 100139a:	4b2e      	ldr	r3, [pc, #184]	; (1001454 <_handler_atpl360_ext_int+0x1d8>)
 100139c:	681b      	ldr	r3, [r3, #0]
 100139e:	3301      	adds	r3, #1
 10013a0:	4a2c      	ldr	r2, [pc, #176]	; (1001454 <_handler_atpl360_ext_int+0x1d8>)
 10013a2:	6013      	str	r3, [r2, #0]
			}
		}

		/* Check REG_RSP_EV_TYPE event */
		if (x_events_info.b_reg_data_enable) {
 10013a4:	7fbb      	ldrb	r3, [r7, #30]
 10013a6:	2b00      	cmp	r3, #0
 10013a8:	d029      	beq.n	10013fe <_handler_atpl360_ext_int+0x182>
			/* Extract data and pkt len from event info */
			sus_reg_event_len = ATPL360_GET_EV_REG_LEN_INFO(x_events_info.ul_event_info);
 10013aa:	697b      	ldr	r3, [r7, #20]
 10013ac:	0c1b      	lsrs	r3, r3, #16
 10013ae:	b29a      	uxth	r2, r3
 10013b0:	4b29      	ldr	r3, [pc, #164]	; (1001458 <_handler_atpl360_ext_int+0x1dc>)
 10013b2:	801a      	strh	r2, [r3, #0]
			if ((sus_reg_event_len == 0) || (sus_reg_event_len > ATPL360_REG_PKT_SIZE)) {
 10013b4:	4b28      	ldr	r3, [pc, #160]	; (1001458 <_handler_atpl360_ext_int+0x1dc>)
 10013b6:	881b      	ldrh	r3, [r3, #0]
 10013b8:	b29b      	uxth	r3, r3
 10013ba:	2b00      	cmp	r3, #0
 10013bc:	d005      	beq.n	10013ca <_handler_atpl360_ext_int+0x14e>
 10013be:	4b26      	ldr	r3, [pc, #152]	; (1001458 <_handler_atpl360_ext_int+0x1dc>)
 10013c0:	881b      	ldrh	r3, [r3, #0]
 10013c2:	b29b      	uxth	r3, r3
 10013c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 10013c8:	d902      	bls.n	10013d0 <_handler_atpl360_ext_int+0x154>
				sus_reg_event_len = 1;
 10013ca:	4b23      	ldr	r3, [pc, #140]	; (1001458 <_handler_atpl360_ext_int+0x1dc>)
 10013cc:	2201      	movs	r2, #1
 10013ce:	801a      	strh	r2, [r3, #0]
			}

			x_spi_data.us_mem_id = atpl360_comm_get_event_id(REG_EV_TYPE, NULL);
 10013d0:	2100      	movs	r1, #0
 10013d2:	2004      	movs	r0, #4
 10013d4:	4b15      	ldr	r3, [pc, #84]	; (100142c <_handler_atpl360_ext_int+0x1b0>)
 10013d6:	4798      	blx	r3
 10013d8:	4603      	mov	r3, r0
 10013da:	817b      	strh	r3, [r7, #10]
			x_spi_data.puc_data_buf = spuc_reg_buffer;
 10013dc:	4b1f      	ldr	r3, [pc, #124]	; (100145c <_handler_atpl360_ext_int+0x1e0>)
 10013de:	60fb      	str	r3, [r7, #12]
			x_spi_data.us_len = sus_reg_event_len;
 10013e0:	4b1d      	ldr	r3, [pc, #116]	; (1001458 <_handler_atpl360_ext_int+0x1dc>)
 10013e2:	881b      	ldrh	r3, [r3, #0]
 10013e4:	b29b      	uxth	r3, r3
 10013e6:	813b      	strh	r3, [r7, #8]
			_spi_send_cmd(SPI_RD_CMD, &x_spi_data);
 10013e8:	f107 0308 	add.w	r3, r7, #8
 10013ec:	4619      	mov	r1, r3
 10013ee:	2000      	movs	r0, #0
 10013f0:	4b10      	ldr	r3, [pc, #64]	; (1001434 <_handler_atpl360_ext_int+0x1b8>)
 10013f2:	4798      	blx	r3
			ul_int_reg_cnt++;
 10013f4:	4b1a      	ldr	r3, [pc, #104]	; (1001460 <_handler_atpl360_ext_int+0x1e4>)
 10013f6:	681b      	ldr	r3, [r3, #0]
 10013f8:	3301      	adds	r3, #1
 10013fa:	4a19      	ldr	r2, [pc, #100]	; (1001460 <_handler_atpl360_ext_int+0x1e4>)
 10013fc:	6013      	str	r3, [r2, #0]
		}

		/* Time guard */
		sx_atpl360_hal_wrapper.plc_delay(DELAY_TREF_US, 20);
 10013fe:	4b09      	ldr	r3, [pc, #36]	; (1001424 <_handler_atpl360_ext_int+0x1a8>)
 1001400:	699b      	ldr	r3, [r3, #24]
 1001402:	2114      	movs	r1, #20
 1001404:	2002      	movs	r0, #2
 1001406:	4798      	blx	r3
	} else {
		/* Disable EXT INT */
		sx_atpl360_hal_wrapper.plc_enable_int(false);
	}
}
 1001408:	e003      	b.n	1001412 <_handler_atpl360_ext_int+0x196>
		sx_atpl360_hal_wrapper.plc_enable_int(false);
 100140a:	4b06      	ldr	r3, [pc, #24]	; (1001424 <_handler_atpl360_ext_int+0x1a8>)
 100140c:	695b      	ldr	r3, [r3, #20]
 100140e:	2000      	movs	r0, #0
 1001410:	4798      	blx	r3
}
 1001412:	bf00      	nop
 1001414:	3720      	adds	r7, #32
 1001416:	46bd      	mov	sp, r7
 1001418:	bd80      	pop	{r7, pc}
 100141a:	bf00      	nop
 100141c:	20001cc8 	.word	0x20001cc8
 1001420:	20001cc6 	.word	0x20001cc6
 1001424:	200082cc 	.word	0x200082cc
 1001428:	01001191 	.word	0x01001191
 100142c:	010006f9 	.word	0x010006f9
 1001430:	2000186c 	.word	0x2000186c
 1001434:	010010a9 	.word	0x010010a9
 1001438:	20001cc0 	.word	0x20001cc0
 100143c:	20001cd4 	.word	0x20001cd4
 1001440:	20001668 	.word	0x20001668
 1001444:	20001cc2 	.word	0x20001cc2
 1001448:	20001ccc 	.word	0x20001ccc
 100144c:	2000164c 	.word	0x2000164c
 1001450:	20001cc3 	.word	0x20001cc3
 1001454:	20001cd0 	.word	0x20001cd0
 1001458:	20001cc4 	.word	0x20001cc4
 100145c:	20001884 	.word	0x20001884
 1001460:	20001cd8 	.word	0x20001cd8

01001464 <_get_config>:
 * \param uc_len     Size in bytes of the configuration parameter
 *
 * \return true if success, false in otherwise
 */
static bool _get_config(uint16_t us_param_id, void *px_value, uint8_t uc_len, bool b_sync)
{
 1001464:	b580      	push	{r7, lr}
 1001466:	b090      	sub	sp, #64	; 0x40
 1001468:	af00      	add	r7, sp, #0
 100146a:	6039      	str	r1, [r7, #0]
 100146c:	4611      	mov	r1, r2
 100146e:	461a      	mov	r2, r3
 1001470:	4603      	mov	r3, r0
 1001472:	80fb      	strh	r3, [r7, #6]
 1001474:	460b      	mov	r3, r1
 1001476:	717b      	strb	r3, [r7, #5]
 1001478:	4613      	mov	r3, r2
 100147a:	713b      	strb	r3, [r7, #4]
	uint32_t ul_base_int;
	uint16_t us_sec_cnt;

	if (sb_component_enabled) {
 100147c:	4b5d      	ldr	r3, [pc, #372]	; (10015f4 <_get_config+0x190>)
 100147e:	781b      	ldrb	r3, [r3, #0]
 1001480:	2b00      	cmp	r3, #0
 1001482:	f000 80b1 	beq.w	10015e8 <_get_config+0x184>
		if (us_param_id & ATPL360_REG_ID_MASK) {
 1001486:	88fb      	ldrh	r3, [r7, #6]
 1001488:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 100148c:	2b00      	cmp	r3, #0
 100148e:	f000 8090 	beq.w	10015b2 <_get_config+0x14e>
			uint32_t ul_offset_addr;
			uint16_t us_reg_len;
			uint8_t *puc_buf;

			/* Set register address */
			ul_reg_addr = (uint32_t)(us_param_id & ATPL360_REG_OFFSET_MASK);
 1001492:	88fb      	ldrh	r3, [r7, #6]
 1001494:	f3c3 030b 	ubfx	r3, r3, #0, #12
 1001498:	63bb      	str	r3, [r7, #56]	; 0x38

			/* Get base address */
			ul_offset_addr = atpl360_comm_get_cfg_param_access_type(us_param_id);
 100149a:	88fb      	ldrh	r3, [r7, #6]
 100149c:	4618      	mov	r0, r3
 100149e:	4b56      	ldr	r3, [pc, #344]	; (10015f8 <_get_config+0x194>)
 10014a0:	4798      	blx	r3
 10014a2:	6378      	str	r0, [r7, #52]	; 0x34
			if (ul_offset_addr == 0) {
 10014a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 10014a6:	2b00      	cmp	r3, #0
 10014a8:	d104      	bne.n	10014b4 <_get_config+0x50>
				/* Param error */
				*(uint8_t *)px_value = 0;
 10014aa:	683b      	ldr	r3, [r7, #0]
 10014ac:	2200      	movs	r2, #0
 10014ae:	701a      	strb	r2, [r3, #0]
				return false;
 10014b0:	2300      	movs	r3, #0
 10014b2:	e09a      	b.n	10015ea <_get_config+0x186>
			}

			ul_reg_addr += ul_offset_addr;
 10014b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 10014b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 10014b8:	4413      	add	r3, r2
 10014ba:	63bb      	str	r3, [r7, #56]	; 0x38

			puc_buf = spuc_reg_buffer;
 10014bc:	4b4f      	ldr	r3, [pc, #316]	; (10015fc <_get_config+0x198>)
 10014be:	633b      	str	r3, [r7, #48]	; 0x30

			x_spi_data.us_len = 8;
 10014c0:	2308      	movs	r3, #8
 10014c2:	823b      	strh	r3, [r7, #16]
			x_spi_data.us_mem_id = ATPL360_REG_INFO_ID;
 10014c4:	2309      	movs	r3, #9
 10014c6:	827b      	strh	r3, [r7, #18]
			x_spi_data.puc_data_buf = puc_buf;
 10014c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 10014ca:	617b      	str	r3, [r7, #20]

			/* Set cmd and length */
			us_reg_len = ATPL360_REG_CMD_RD | (uint16_t)uc_len;
 10014cc:	797b      	ldrb	r3, [r7, #5]
 10014ce:	85fb      	strh	r3, [r7, #46]	; 0x2e

			/* Build command */
			*puc_buf++ = (uint8_t)(ul_reg_addr >> 24);
 10014d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 10014d2:	1c5a      	adds	r2, r3, #1
 10014d4:	633a      	str	r2, [r7, #48]	; 0x30
 10014d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 10014d8:	0e12      	lsrs	r2, r2, #24
 10014da:	b2d2      	uxtb	r2, r2
 10014dc:	701a      	strb	r2, [r3, #0]
			*puc_buf++ = (uint8_t)(ul_reg_addr >> 16);
 10014de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 10014e0:	1c5a      	adds	r2, r3, #1
 10014e2:	633a      	str	r2, [r7, #48]	; 0x30
 10014e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 10014e6:	0c12      	lsrs	r2, r2, #16
 10014e8:	b2d2      	uxtb	r2, r2
 10014ea:	701a      	strb	r2, [r3, #0]
			*puc_buf++ = (uint8_t)(ul_reg_addr >> 8);
 10014ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 10014ee:	1c5a      	adds	r2, r3, #1
 10014f0:	633a      	str	r2, [r7, #48]	; 0x30
 10014f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 10014f4:	0a12      	lsrs	r2, r2, #8
 10014f6:	b2d2      	uxtb	r2, r2
 10014f8:	701a      	strb	r2, [r3, #0]
			*puc_buf++ = (uint8_t)(ul_reg_addr);
 10014fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 10014fc:	1c5a      	adds	r2, r3, #1
 10014fe:	633a      	str	r2, [r7, #48]	; 0x30
 1001500:	6bba      	ldr	r2, [r7, #56]	; 0x38
 1001502:	b2d2      	uxtb	r2, r2
 1001504:	701a      	strb	r2, [r3, #0]
			*puc_buf++ = (uint8_t)(us_reg_len >> 8);
 1001506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 1001508:	1c5a      	adds	r2, r3, #1
 100150a:	633a      	str	r2, [r7, #48]	; 0x30
 100150c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 100150e:	0a12      	lsrs	r2, r2, #8
 1001510:	b292      	uxth	r2, r2
 1001512:	b2d2      	uxtb	r2, r2
 1001514:	701a      	strb	r2, [r3, #0]
			*puc_buf++ = (uint8_t)(us_reg_len);
 1001516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 1001518:	1c5a      	adds	r2, r3, #1
 100151a:	633a      	str	r2, [r7, #48]	; 0x30
 100151c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 100151e:	b2d2      	uxtb	r2, r2
 1001520:	701a      	strb	r2, [r3, #0]

			/* Send command */
			_spi_send_cmd(SPI_WR_CMD, &x_spi_data);
 1001522:	f107 0310 	add.w	r3, r7, #16
 1001526:	4619      	mov	r1, r3
 1001528:	2001      	movs	r0, #1
 100152a:	4b35      	ldr	r3, [pc, #212]	; (1001600 <_get_config+0x19c>)
 100152c:	4798      	blx	r3

			if (!b_sync) {
 100152e:	793b      	ldrb	r3, [r7, #4]
 1001530:	f083 0301 	eor.w	r3, r3, #1
 1001534:	b2db      	uxtb	r3, r3
 1001536:	2b00      	cmp	r3, #0
 1001538:	d001      	beq.n	100153e <_get_config+0xda>
				/* wait to interrupt to get reg value */
				return false;
 100153a:	2300      	movs	r3, #0
 100153c:	e055      	b.n	10015ea <_get_config+0x186>
			} else {
				us_sec_cnt = 0xFFFF;
 100153e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 1001542:	87fb      	strh	r3, [r7, #62]	; 0x3e
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
 1001544:	f3ef 8312 	mrs	r3, BASEPRI_MAX
 1001548:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 100154a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

				/* Check interrupt system */
				ul_base_int = __get_BASEPRI();
 100154c:	62bb      	str	r3, [r7, #40]	; 0x28
				if (ul_base_int) {
 100154e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 1001550:	2b00      	cmp	r3, #0
 1001552:	d014      	beq.n	100157e <_get_config+0x11a>
 1001554:	2300      	movs	r3, #0
 1001556:	623b      	str	r3, [r7, #32]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 1001558:	6a3b      	ldr	r3, [r7, #32]
 100155a:	f383 8811 	msr	BASEPRI, r3
					__set_BASEPRI(0);
				}

				/* Wait to the response */
				while (!sus_reg_event_len) {
 100155e:	e00e      	b.n	100157e <_get_config+0x11a>
					if (!us_sec_cnt--) {
 1001560:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 1001562:	1e5a      	subs	r2, r3, #1
 1001564:	87fa      	strh	r2, [r7, #62]	; 0x3e
 1001566:	2b00      	cmp	r3, #0
 1001568:	d109      	bne.n	100157e <_get_config+0x11a>
						/* Restore interrupt system */
						if (ul_base_int) {
 100156a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 100156c:	2b00      	cmp	r3, #0
 100156e:	d004      	beq.n	100157a <_get_config+0x116>
 1001570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 1001572:	61fb      	str	r3, [r7, #28]
 1001574:	69fb      	ldr	r3, [r7, #28]
 1001576:	f383 8811 	msr	BASEPRI, r3
							__set_BASEPRI(ul_base_int);
						}

						/* Error in get config cmd */
						return false;
 100157a:	2300      	movs	r3, #0
 100157c:	e035      	b.n	10015ea <_get_config+0x186>
				while (!sus_reg_event_len) {
 100157e:	4b21      	ldr	r3, [pc, #132]	; (1001604 <_get_config+0x1a0>)
 1001580:	881b      	ldrh	r3, [r3, #0]
 1001582:	b29b      	uxth	r3, r3
 1001584:	2b00      	cmp	r3, #0
 1001586:	d0eb      	beq.n	1001560 <_get_config+0xfc>
					}
				}

				/* Restore interrupt system */
				if (ul_base_int) {
 1001588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 100158a:	2b00      	cmp	r3, #0
 100158c:	d004      	beq.n	1001598 <_get_config+0x134>
 100158e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 1001590:	61bb      	str	r3, [r7, #24]
 1001592:	69bb      	ldr	r3, [r7, #24]
 1001594:	f383 8811 	msr	BASEPRI, r3
					__set_BASEPRI(ul_base_int);
				}

				/* copy reg info in data pointer */
				memcpy((uint8_t *)px_value, spuc_reg_buffer, sus_reg_event_len);
 1001598:	4b1a      	ldr	r3, [pc, #104]	; (1001604 <_get_config+0x1a0>)
 100159a:	881b      	ldrh	r3, [r3, #0]
 100159c:	b29b      	uxth	r3, r3
 100159e:	461a      	mov	r2, r3
 10015a0:	4916      	ldr	r1, [pc, #88]	; (10015fc <_get_config+0x198>)
 10015a2:	6838      	ldr	r0, [r7, #0]
 10015a4:	4b18      	ldr	r3, [pc, #96]	; (1001608 <_get_config+0x1a4>)
 10015a6:	4798      	blx	r3
				/* Reset event flag */
				sus_reg_event_len = 0;
 10015a8:	4b16      	ldr	r3, [pc, #88]	; (1001604 <_get_config+0x1a0>)
 10015aa:	2200      	movs	r2, #0
 10015ac:	801a      	strh	r2, [r3, #0]

				return true;
 10015ae:	2301      	movs	r3, #1
 10015b0:	e01b      	b.n	10015ea <_get_config+0x186>
			}
		} else if (us_param_id == ATPL360_TIME_REF_ID) {
 10015b2:	88fb      	ldrh	r3, [r7, #6]
 10015b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 10015b8:	d10e      	bne.n	10015d8 <_get_config+0x174>
			atpl360_spi_data_t x_spi_data;

			x_spi_data.us_len = uc_len;
 10015ba:	797b      	ldrb	r3, [r7, #5]
 10015bc:	b29b      	uxth	r3, r3
 10015be:	813b      	strh	r3, [r7, #8]
			x_spi_data.us_mem_id = ATPL360_STATUS_INFO_ID;
 10015c0:	2300      	movs	r3, #0
 10015c2:	817b      	strh	r3, [r7, #10]
			x_spi_data.puc_data_buf = (uint8_t *)px_value;
 10015c4:	683b      	ldr	r3, [r7, #0]
 10015c6:	60fb      	str	r3, [r7, #12]
			/* Send command */
			_spi_send_cmd(SPI_RD_CMD, &x_spi_data);
 10015c8:	f107 0308 	add.w	r3, r7, #8
 10015cc:	4619      	mov	r1, r3
 10015ce:	2000      	movs	r0, #0
 10015d0:	4b0b      	ldr	r3, [pc, #44]	; (1001600 <_get_config+0x19c>)
 10015d2:	4798      	blx	r3
			return true; /* Don't wait to interrupt to get reg value */
 10015d4:	2301      	movs	r3, #1
 10015d6:	e008      	b.n	10015ea <_get_config+0x186>
		} else {
			return atpl360_ib_get_param((atpl360_id_param_t)us_param_id, px_value, uc_len);
 10015d8:	797a      	ldrb	r2, [r7, #5]
 10015da:	88fb      	ldrh	r3, [r7, #6]
 10015dc:	6839      	ldr	r1, [r7, #0]
 10015de:	4618      	mov	r0, r3
 10015e0:	4b0a      	ldr	r3, [pc, #40]	; (100160c <_get_config+0x1a8>)
 10015e2:	4798      	blx	r3
 10015e4:	4603      	mov	r3, r0
 10015e6:	e000      	b.n	10015ea <_get_config+0x186>
		}
	} else {
		return false;
 10015e8:	2300      	movs	r3, #0
	}
}
 10015ea:	4618      	mov	r0, r3
 10015ec:	3740      	adds	r7, #64	; 0x40
 10015ee:	46bd      	mov	sp, r7
 10015f0:	bd80      	pop	{r7, pc}
 10015f2:	bf00      	nop
 10015f4:	20001cc6 	.word	0x20001cc6
 10015f8:	0100084d 	.word	0x0100084d
 10015fc:	20001884 	.word	0x20001884
 1001600:	010010a9 	.word	0x010010a9
 1001604:	20001cc4 	.word	0x20001cc4
 1001608:	0100c551 	.word	0x0100c551
 100160c:	01001d91 	.word	0x01001d91

01001610 <_set_config>:
 * \param px_value   Pointer to value of the configuration parameter
 * \param us_len     Size of the configuration parameter
 *
 */
static bool _set_config(uint16_t us_param_id, void *px_value, uint16_t us_len)
{
 1001610:	b580      	push	{r7, lr}
 1001612:	b08a      	sub	sp, #40	; 0x28
 1001614:	af00      	add	r7, sp, #0
 1001616:	4603      	mov	r3, r0
 1001618:	6039      	str	r1, [r7, #0]
 100161a:	80fb      	strh	r3, [r7, #6]
 100161c:	4613      	mov	r3, r2
 100161e:	80bb      	strh	r3, [r7, #4]
	if (us_param_id & ATPL360_REG_ID_MASK) {
 1001620:	88fb      	ldrh	r3, [r7, #6]
 1001622:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 1001626:	2b00      	cmp	r3, #0
 1001628:	f000 80a1 	beq.w	100176e <_set_config+0x15e>
		uint8_t *puc_buf;
		uint8_t *pul_ptr;
		uint32_t ul_delay;

		/* Set register address */
		ul_reg_addr = (uint32_t)(us_param_id & ATPL360_REG_OFFSET_MASK);
 100162c:	88fb      	ldrh	r3, [r7, #6]
 100162e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 1001632:	623b      	str	r3, [r7, #32]

		/* Get Access type and address */
		ul_reg_addr += atpl360_comm_get_cfg_param_access_type(us_param_id);
 1001634:	88fb      	ldrh	r3, [r7, #6]
 1001636:	4618      	mov	r0, r3
 1001638:	4b53      	ldr	r3, [pc, #332]	; (1001788 <_set_config+0x178>)
 100163a:	4798      	blx	r3
 100163c:	4602      	mov	r2, r0
 100163e:	6a3b      	ldr	r3, [r7, #32]
 1001640:	4413      	add	r3, r2
 1001642:	623b      	str	r3, [r7, #32]

		puc_buf = spuc_tx_buffer;
 1001644:	4b51      	ldr	r3, [pc, #324]	; (100178c <_set_config+0x17c>)
 1001646:	627b      	str	r3, [r7, #36]	; 0x24

		x_spi_data.us_len = us_len + 8;
 1001648:	88bb      	ldrh	r3, [r7, #4]
 100164a:	3308      	adds	r3, #8
 100164c:	b29b      	uxth	r3, r3
 100164e:	81bb      	strh	r3, [r7, #12]
		x_spi_data.us_mem_id = ATPL360_REG_INFO_ID;
 1001650:	2309      	movs	r3, #9
 1001652:	81fb      	strh	r3, [r7, #14]
		x_spi_data.puc_data_buf = puc_buf;
 1001654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 1001656:	613b      	str	r3, [r7, #16]

		/* Set cmd and length */
		us_reg_len = ATPL360_REG_CMD_WR | (us_len & ATPL360_REG_LEN_MASK);
 1001658:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 100165c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 1001660:	b21b      	sxth	r3, r3
 1001662:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 1001666:	b21b      	sxth	r3, r3
 1001668:	83fb      	strh	r3, [r7, #30]

		/* Build command */
		*puc_buf++ = (uint8_t)(ul_reg_addr >> 24);
 100166a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 100166c:	1c5a      	adds	r2, r3, #1
 100166e:	627a      	str	r2, [r7, #36]	; 0x24
 1001670:	6a3a      	ldr	r2, [r7, #32]
 1001672:	0e12      	lsrs	r2, r2, #24
 1001674:	b2d2      	uxtb	r2, r2
 1001676:	701a      	strb	r2, [r3, #0]
		*puc_buf++ = (uint8_t)(ul_reg_addr >> 16);
 1001678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 100167a:	1c5a      	adds	r2, r3, #1
 100167c:	627a      	str	r2, [r7, #36]	; 0x24
 100167e:	6a3a      	ldr	r2, [r7, #32]
 1001680:	0c12      	lsrs	r2, r2, #16
 1001682:	b2d2      	uxtb	r2, r2
 1001684:	701a      	strb	r2, [r3, #0]
		*puc_buf++ = (uint8_t)(ul_reg_addr >> 8);
 1001686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 1001688:	1c5a      	adds	r2, r3, #1
 100168a:	627a      	str	r2, [r7, #36]	; 0x24
 100168c:	6a3a      	ldr	r2, [r7, #32]
 100168e:	0a12      	lsrs	r2, r2, #8
 1001690:	b2d2      	uxtb	r2, r2
 1001692:	701a      	strb	r2, [r3, #0]
		*puc_buf++ = (uint8_t)(ul_reg_addr);
 1001694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 1001696:	1c5a      	adds	r2, r3, #1
 1001698:	627a      	str	r2, [r7, #36]	; 0x24
 100169a:	6a3a      	ldr	r2, [r7, #32]
 100169c:	b2d2      	uxtb	r2, r2
 100169e:	701a      	strb	r2, [r3, #0]
		*puc_buf++ = (uint8_t)(us_reg_len >> 8);
 10016a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 10016a2:	1c5a      	adds	r2, r3, #1
 10016a4:	627a      	str	r2, [r7, #36]	; 0x24
 10016a6:	8bfa      	ldrh	r2, [r7, #30]
 10016a8:	0a12      	lsrs	r2, r2, #8
 10016aa:	b292      	uxth	r2, r2
 10016ac:	b2d2      	uxtb	r2, r2
 10016ae:	701a      	strb	r2, [r3, #0]
		*puc_buf++ = (uint8_t)(us_reg_len);
 10016b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 10016b2:	1c5a      	adds	r2, r3, #1
 10016b4:	627a      	str	r2, [r7, #36]	; 0x24
 10016b6:	8bfa      	ldrh	r2, [r7, #30]
 10016b8:	b2d2      	uxtb	r2, r2
 10016ba:	701a      	strb	r2, [r3, #0]
		pul_ptr = (uint8_t *)px_value;
 10016bc:	683b      	ldr	r3, [r7, #0]
 10016be:	61bb      	str	r3, [r7, #24]
		if (us_len == 4) {
 10016c0:	88bb      	ldrh	r3, [r7, #4]
 10016c2:	2b04      	cmp	r3, #4
 10016c4:	d11e      	bne.n	1001704 <_set_config+0xf4>
			*puc_buf++ = *pul_ptr++;
 10016c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 10016c8:	1c5a      	adds	r2, r3, #1
 10016ca:	627a      	str	r2, [r7, #36]	; 0x24
 10016cc:	69ba      	ldr	r2, [r7, #24]
 10016ce:	1c51      	adds	r1, r2, #1
 10016d0:	61b9      	str	r1, [r7, #24]
 10016d2:	7812      	ldrb	r2, [r2, #0]
 10016d4:	701a      	strb	r2, [r3, #0]
			*puc_buf++ = *pul_ptr++;
 10016d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 10016d8:	1c5a      	adds	r2, r3, #1
 10016da:	627a      	str	r2, [r7, #36]	; 0x24
 10016dc:	69ba      	ldr	r2, [r7, #24]
 10016de:	1c51      	adds	r1, r2, #1
 10016e0:	61b9      	str	r1, [r7, #24]
 10016e2:	7812      	ldrb	r2, [r2, #0]
 10016e4:	701a      	strb	r2, [r3, #0]
			*puc_buf++ = *pul_ptr++;
 10016e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 10016e8:	1c5a      	adds	r2, r3, #1
 10016ea:	627a      	str	r2, [r7, #36]	; 0x24
 10016ec:	69ba      	ldr	r2, [r7, #24]
 10016ee:	1c51      	adds	r1, r2, #1
 10016f0:	61b9      	str	r1, [r7, #24]
 10016f2:	7812      	ldrb	r2, [r2, #0]
 10016f4:	701a      	strb	r2, [r3, #0]
			*puc_buf++ = *pul_ptr;
 10016f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 10016f8:	1c5a      	adds	r2, r3, #1
 10016fa:	627a      	str	r2, [r7, #36]	; 0x24
 10016fc:	69ba      	ldr	r2, [r7, #24]
 10016fe:	7812      	ldrb	r2, [r2, #0]
 1001700:	701a      	strb	r2, [r3, #0]
 1001702:	e01d      	b.n	1001740 <_set_config+0x130>
		} else if (us_len == 2) {
 1001704:	88bb      	ldrh	r3, [r7, #4]
 1001706:	2b02      	cmp	r3, #2
 1001708:	d110      	bne.n	100172c <_set_config+0x11c>
			*puc_buf++ = *pul_ptr++;
 100170a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 100170c:	1c5a      	adds	r2, r3, #1
 100170e:	627a      	str	r2, [r7, #36]	; 0x24
 1001710:	69ba      	ldr	r2, [r7, #24]
 1001712:	1c51      	adds	r1, r2, #1
 1001714:	61b9      	str	r1, [r7, #24]
 1001716:	7812      	ldrb	r2, [r2, #0]
 1001718:	701a      	strb	r2, [r3, #0]
			*puc_buf++ = *pul_ptr++;
 100171a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 100171c:	1c5a      	adds	r2, r3, #1
 100171e:	627a      	str	r2, [r7, #36]	; 0x24
 1001720:	69ba      	ldr	r2, [r7, #24]
 1001722:	1c51      	adds	r1, r2, #1
 1001724:	61b9      	str	r1, [r7, #24]
 1001726:	7812      	ldrb	r2, [r2, #0]
 1001728:	701a      	strb	r2, [r3, #0]
 100172a:	e009      	b.n	1001740 <_set_config+0x130>
		} else {
			memcpy(puc_buf, pul_ptr, us_len);
 100172c:	88bb      	ldrh	r3, [r7, #4]
 100172e:	461a      	mov	r2, r3
 1001730:	69b9      	ldr	r1, [r7, #24]
 1001732:	6a78      	ldr	r0, [r7, #36]	; 0x24
 1001734:	4b16      	ldr	r3, [pc, #88]	; (1001790 <_set_config+0x180>)
 1001736:	4798      	blx	r3
			puc_buf += us_len;
 1001738:	88bb      	ldrh	r3, [r7, #4]
 100173a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 100173c:	4413      	add	r3, r2
 100173e:	627b      	str	r3, [r7, #36]	; 0x24
		}

		/* Update spi data len */
		x_spi_data.us_len = puc_buf - spuc_tx_buffer;
 1001740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 1001742:	4a12      	ldr	r2, [pc, #72]	; (100178c <_set_config+0x17c>)
 1001744:	1a9b      	subs	r3, r3, r2
 1001746:	b29b      	uxth	r3, r3
 1001748:	81bb      	strh	r3, [r7, #12]

		/* Send command */
		_spi_send_cmd(SPI_WR_CMD, &x_spi_data);
 100174a:	f107 030c 	add.w	r3, r7, #12
 100174e:	4619      	mov	r1, r3
 1001750:	2001      	movs	r0, #1
 1001752:	4b10      	ldr	r3, [pc, #64]	; (1001794 <_set_config+0x184>)
 1001754:	4798      	blx	r3

		/* Guard delay to ensure writing operation completion. */
		ul_delay = atpl360_comm_get_cfg_param_delay_us(us_param_id);
 1001756:	88fb      	ldrh	r3, [r7, #6]
 1001758:	4618      	mov	r0, r3
 100175a:	4b0f      	ldr	r3, [pc, #60]	; (1001798 <_set_config+0x188>)
 100175c:	4798      	blx	r3
 100175e:	6178      	str	r0, [r7, #20]
		sx_atpl360_hal_wrapper.plc_delay(DELAY_TREF_US, ul_delay);
 1001760:	4b0e      	ldr	r3, [pc, #56]	; (100179c <_set_config+0x18c>)
 1001762:	699b      	ldr	r3, [r3, #24]
 1001764:	6979      	ldr	r1, [r7, #20]
 1001766:	2002      	movs	r0, #2
 1001768:	4798      	blx	r3

		return true;
 100176a:	2301      	movs	r3, #1
 100176c:	e007      	b.n	100177e <_set_config+0x16e>
	} else {
		return atpl360_ib_set_param((atpl360_id_param_t)us_param_id, px_value, (uint8_t)us_len);
 100176e:	88bb      	ldrh	r3, [r7, #4]
 1001770:	b2da      	uxtb	r2, r3
 1001772:	88fb      	ldrh	r3, [r7, #6]
 1001774:	6839      	ldr	r1, [r7, #0]
 1001776:	4618      	mov	r0, r3
 1001778:	4b09      	ldr	r3, [pc, #36]	; (10017a0 <_set_config+0x190>)
 100177a:	4798      	blx	r3
 100177c:	4603      	mov	r3, r0
	}
}
 100177e:	4618      	mov	r0, r3
 1001780:	3728      	adds	r7, #40	; 0x28
 1001782:	46bd      	mov	sp, r7
 1001784:	bd80      	pop	{r7, pc}
 1001786:	bf00      	nop
 1001788:	0100084d 	.word	0x0100084d
 100178c:	20001438 	.word	0x20001438
 1001790:	0100c551 	.word	0x0100c551
 1001794:	010010a9 	.word	0x010010a9
 1001798:	010008b9 	.word	0x010008b9
 100179c:	200082cc 	.word	0x200082cc
 10017a0:	01001e29 	.word	0x01001e29

010017a4 <_send_addons_cmd>:
 * \param px_msg  Pointer to command message
 * \param us_len  Length of the serial command message
 *
 */
static void _send_addons_cmd(uint8_t *px_msg, uint16_t us_len)
{
 10017a4:	b580      	push	{r7, lr}
 10017a6:	b082      	sub	sp, #8
 10017a8:	af00      	add	r7, sp, #0
 10017aa:	6078      	str	r0, [r7, #4]
 10017ac:	460b      	mov	r3, r1
 10017ae:	807b      	strh	r3, [r7, #2]
#ifdef ATPL360_ADDONS_ENABLE
	if (sb_component_enabled) {
 10017b0:	4b06      	ldr	r3, [pc, #24]	; (10017cc <_send_addons_cmd+0x28>)
 10017b2:	781b      	ldrb	r3, [r3, #0]
 10017b4:	2b00      	cmp	r3, #0
 10017b6:	d004      	beq.n	10017c2 <_send_addons_cmd+0x1e>
		atpl360_addon_cmd(px_msg, us_len);
 10017b8:	887b      	ldrh	r3, [r7, #2]
 10017ba:	4619      	mov	r1, r3
 10017bc:	6878      	ldr	r0, [r7, #4]
 10017be:	4b04      	ldr	r3, [pc, #16]	; (10017d0 <_send_addons_cmd+0x2c>)
 10017c0:	4798      	blx	r3

#else
	(void)px_msg;
	(void)us_len;
#endif
}
 10017c2:	bf00      	nop
 10017c4:	3708      	adds	r7, #8
 10017c6:	46bd      	mov	sp, r7
 10017c8:	bd80      	pop	{r7, pc}
 10017ca:	bf00      	nop
 10017cc:	20001cc6 	.word	0x20001cc6
 10017d0:	01000a39 	.word	0x01000a39

010017d4 <_send_data>:
 *
 * \param px_msg  Pointer to message struct to transmit
 *
 */
static uint8_t _send_data(tx_msg_t *px_msg)
{
 10017d4:	b580      	push	{r7, lr}
 10017d6:	b086      	sub	sp, #24
 10017d8:	af00      	add	r7, sp, #0
 10017da:	6078      	str	r0, [r7, #4]
	if (sb_component_enabled) {
 10017dc:	4b35      	ldr	r3, [pc, #212]	; (10018b4 <_send_data+0xe0>)
 10017de:	781b      	ldrb	r3, [r3, #0]
 10017e0:	2b00      	cmp	r3, #0
 10017e2:	d062      	beq.n	10018aa <_send_data+0xd6>
		uint16_t us_params_len;

#ifdef ATPL360_ADDONS_ENABLE
		atpl360_addon_stringify_tx(NULL, px_msg);
 10017e4:	6879      	ldr	r1, [r7, #4]
 10017e6:	2000      	movs	r0, #0
 10017e8:	4b33      	ldr	r3, [pc, #204]	; (10018b8 <_send_data+0xe4>)
 10017ea:	4798      	blx	r3
#endif

		us_params_len = atpl360_comm_stringify(spuc_tx_buffer, (void *)px_msg, sizeof(tx_msg_t));
 10017ec:	2211      	movs	r2, #17
 10017ee:	6879      	ldr	r1, [r7, #4]
 10017f0:	4832      	ldr	r0, [pc, #200]	; (10018bc <_send_data+0xe8>)
 10017f2:	4b33      	ldr	r3, [pc, #204]	; (10018c0 <_send_data+0xec>)
 10017f4:	4798      	blx	r3
 10017f6:	4603      	mov	r3, r0
 10017f8:	82fb      	strh	r3, [r7, #22]

		/* Send tx message in 2 steps: parameters and data */
		if (us_params_len) {
 10017fa:	8afb      	ldrh	r3, [r7, #22]
 10017fc:	2b00      	cmp	r3, #0
 10017fe:	d052      	beq.n	10018a6 <_send_data+0xd2>
			atpl360_spi_data_t x_spi_data;

			if (sus_prod_info & ATPL360_G3_MODE_MASK) {
 1001800:	4b30      	ldr	r3, [pc, #192]	; (10018c4 <_send_data+0xf0>)
 1001802:	881b      	ldrh	r3, [r3, #0]
 1001804:	f003 0307 	and.w	r3, r3, #7
 1001808:	2b00      	cmp	r3, #0
 100180a:	d02f      	beq.n	100186c <_send_data+0x98>
				/* Send tx params */
				x_spi_data.us_len = us_params_len;
 100180c:	8afb      	ldrh	r3, [r7, #22]
 100180e:	81bb      	strh	r3, [r7, #12]
				x_spi_data.us_mem_id = atpl360_comm_get_tx_params_id(px_msg);
 1001810:	6878      	ldr	r0, [r7, #4]
 1001812:	4b2d      	ldr	r3, [pc, #180]	; (10018c8 <_send_data+0xf4>)
 1001814:	4798      	blx	r3
 1001816:	4603      	mov	r3, r0
 1001818:	81fb      	strh	r3, [r7, #14]
				x_spi_data.puc_data_buf = spuc_tx_buffer;
 100181a:	4b28      	ldr	r3, [pc, #160]	; (10018bc <_send_data+0xe8>)
 100181c:	613b      	str	r3, [r7, #16]
				_spi_send_cmd(SPI_WR_CMD, &x_spi_data);
 100181e:	f107 030c 	add.w	r3, r7, #12
 1001822:	4619      	mov	r1, r3
 1001824:	2001      	movs	r0, #1
 1001826:	4b29      	ldr	r3, [pc, #164]	; (10018cc <_send_data+0xf8>)
 1001828:	4798      	blx	r3

				sx_atpl360_hal_wrapper.plc_delay(DELAY_TREF_US, ATPL360_DELAY_TX_DATA_US);
 100182a:	4b29      	ldr	r3, [pc, #164]	; (10018d0 <_send_data+0xfc>)
 100182c:	699b      	ldr	r3, [r3, #24]
 100182e:	2164      	movs	r1, #100	; 0x64
 1001830:	2002      	movs	r0, #2
 1001832:	4798      	blx	r3

				if (!spb_cfm_event_enable[0]) {
 1001834:	4b27      	ldr	r3, [pc, #156]	; (10018d4 <_send_data+0x100>)
 1001836:	781b      	ldrb	r3, [r3, #0]
 1001838:	b2db      	uxtb	r3, r3
 100183a:	f083 0301 	eor.w	r3, r3, #1
 100183e:	b2db      	uxtb	r3, r3
 1001840:	2b00      	cmp	r3, #0
 1001842:	d027      	beq.n	1001894 <_send_data+0xc0>
					/* Send tx data */
					x_spi_data.us_len = px_msg->us_data_len;
 1001844:	687b      	ldr	r3, [r7, #4]
 1001846:	889b      	ldrh	r3, [r3, #4]
 1001848:	b29b      	uxth	r3, r3
 100184a:	81bb      	strh	r3, [r7, #12]
					x_spi_data.us_mem_id = atpl360_comm_get_tx_data_id(px_msg);
 100184c:	6878      	ldr	r0, [r7, #4]
 100184e:	4b22      	ldr	r3, [pc, #136]	; (10018d8 <_send_data+0x104>)
 1001850:	4798      	blx	r3
 1001852:	4603      	mov	r3, r0
 1001854:	81fb      	strh	r3, [r7, #14]
					x_spi_data.puc_data_buf = spuc_tx_buffer + us_params_len;
 1001856:	8afb      	ldrh	r3, [r7, #22]
 1001858:	4a18      	ldr	r2, [pc, #96]	; (10018bc <_send_data+0xe8>)
 100185a:	4413      	add	r3, r2
 100185c:	613b      	str	r3, [r7, #16]
					_spi_send_cmd(SPI_WR_CMD, &x_spi_data);
 100185e:	f107 030c 	add.w	r3, r7, #12
 1001862:	4619      	mov	r1, r3
 1001864:	2001      	movs	r0, #1
 1001866:	4b19      	ldr	r3, [pc, #100]	; (10018cc <_send_data+0xf8>)
 1001868:	4798      	blx	r3
 100186a:	e013      	b.n	1001894 <_send_data+0xc0>
				}
			} else {
				/* Send tx msg */
				x_spi_data.us_len = us_params_len + px_msg->us_data_len;
 100186c:	687b      	ldr	r3, [r7, #4]
 100186e:	889b      	ldrh	r3, [r3, #4]
 1001870:	b29a      	uxth	r2, r3
 1001872:	8afb      	ldrh	r3, [r7, #22]
 1001874:	4413      	add	r3, r2
 1001876:	b29b      	uxth	r3, r3
 1001878:	81bb      	strh	r3, [r7, #12]
				x_spi_data.us_mem_id = atpl360_comm_get_tx_params_id(px_msg);
 100187a:	6878      	ldr	r0, [r7, #4]
 100187c:	4b12      	ldr	r3, [pc, #72]	; (10018c8 <_send_data+0xf4>)
 100187e:	4798      	blx	r3
 1001880:	4603      	mov	r3, r0
 1001882:	81fb      	strh	r3, [r7, #14]
				x_spi_data.puc_data_buf = spuc_tx_buffer;
 1001884:	4b0d      	ldr	r3, [pc, #52]	; (10018bc <_send_data+0xe8>)
 1001886:	613b      	str	r3, [r7, #16]
				_spi_send_cmd(SPI_WR_CMD, &x_spi_data);
 1001888:	f107 030c 	add.w	r3, r7, #12
 100188c:	4619      	mov	r1, r3
 100188e:	2001      	movs	r0, #1
 1001890:	4b0e      	ldr	r3, [pc, #56]	; (10018cc <_send_data+0xf8>)
 1001892:	4798      	blx	r3
			}

			/* Set TX cfm flag */
			suc_waiting_tx_cfm++;
 1001894:	4b11      	ldr	r3, [pc, #68]	; (10018dc <_send_data+0x108>)
 1001896:	781b      	ldrb	r3, [r3, #0]
 1001898:	b2db      	uxtb	r3, r3
 100189a:	3301      	adds	r3, #1
 100189c:	b2da      	uxtb	r2, r3
 100189e:	4b0f      	ldr	r3, [pc, #60]	; (10018dc <_send_data+0x108>)
 10018a0:	701a      	strb	r2, [r3, #0]

			return TX_RESULT_PROCESS;
 10018a2:	2300      	movs	r3, #0
 10018a4:	e002      	b.n	10018ac <_send_data+0xd8>
		} else {
			return TX_RESULT_INV_LENGTH;
 10018a6:	2302      	movs	r3, #2
 10018a8:	e000      	b.n	10018ac <_send_data+0xd8>
		}
	} else {
		return TX_RESULT_NO_TX;
 10018aa:	23ff      	movs	r3, #255	; 0xff
	}
}
 10018ac:	4618      	mov	r0, r3
 10018ae:	3718      	adds	r7, #24
 10018b0:	46bd      	mov	sp, r7
 10018b2:	bd80      	pop	{r7, pc}
 10018b4:	20001cc6 	.word	0x20001cc6
 10018b8:	01000f4b 	.word	0x01000f4b
 10018bc:	20001438 	.word	0x20001438
 10018c0:	01000311 	.word	0x01000311
 10018c4:	20001cdc 	.word	0x20001cdc
 10018c8:	01000741 	.word	0x01000741
 10018cc:	010010a9 	.word	0x010010a9
 10018d0:	200082cc 	.word	0x200082cc
 10018d4:	20001cc0 	.word	0x20001cc0
 10018d8:	01000767 	.word	0x01000767
 10018dc:	20001cbc 	.word	0x20001cbc

010018e0 <_set_callbacks>:
 *
 * \param px_cbs  Pointer to ATPL360 Callback struct
 *
 */
static void _set_callbacks(atpl360_dev_callbacks_t *px_cbs)
{
 10018e0:	b580      	push	{r7, lr}
 10018e2:	b082      	sub	sp, #8
 10018e4:	af00      	add	r7, sp, #0
 10018e6:	6078      	str	r0, [r7, #4]
	_data_confirm_cb_handler = px_cbs->data_confirm;
 10018e8:	687b      	ldr	r3, [r7, #4]
 10018ea:	681b      	ldr	r3, [r3, #0]
 10018ec:	4a0b      	ldr	r2, [pc, #44]	; (100191c <_set_callbacks+0x3c>)
 10018ee:	6013      	str	r3, [r2, #0]
	_data_indication_cb_handler = px_cbs->data_indication;
 10018f0:	687b      	ldr	r3, [r7, #4]
 10018f2:	685b      	ldr	r3, [r3, #4]
 10018f4:	4a0a      	ldr	r2, [pc, #40]	; (1001920 <_set_callbacks+0x40>)
 10018f6:	6013      	str	r3, [r2, #0]
	_addons_event_cb_handler = px_cbs->addons_event;
 10018f8:	687b      	ldr	r3, [r7, #4]
 10018fa:	689b      	ldr	r3, [r3, #8]
 10018fc:	4a09      	ldr	r2, [pc, #36]	; (1001924 <_set_callbacks+0x44>)
 10018fe:	6013      	str	r3, [r2, #0]
	_exception_event_cb_handler = px_cbs->exception_event;
 1001900:	687b      	ldr	r3, [r7, #4]
 1001902:	68db      	ldr	r3, [r3, #12]
 1001904:	4a08      	ldr	r2, [pc, #32]	; (1001928 <_set_callbacks+0x48>)
 1001906:	6013      	str	r3, [r2, #0]

#ifdef ATPL360_ADDONS_ENABLE
	atpl360_addon_set_event_callback(px_cbs->addons_event);
 1001908:	687b      	ldr	r3, [r7, #4]
 100190a:	689b      	ldr	r3, [r3, #8]
 100190c:	4618      	mov	r0, r3
 100190e:	4b07      	ldr	r3, [pc, #28]	; (100192c <_set_callbacks+0x4c>)
 1001910:	4798      	blx	r3
#endif
}
 1001912:	bf00      	nop
 1001914:	3708      	adds	r7, #8
 1001916:	46bd      	mov	sp, r7
 1001918:	bd80      	pop	{r7, pc}
 100191a:	bf00      	nop
 100191c:	200082c4 	.word	0x200082c4
 1001920:	200082c8 	.word	0x200082c8
 1001924:	200082ec 	.word	0x200082ec
 1001928:	200082e8 	.word	0x200082e8
 100192c:	01000a1d 	.word	0x01000a1d

01001930 <_init_system>:
/**
 * \brief Function to init internal system
 *
 */
static void _init_system(void)
{
 1001930:	b580      	push	{r7, lr}
 1001932:	af00      	add	r7, sp, #0
	/* Init Callback function pointers */
	_data_confirm_cb_handler = NULL;
 1001934:	4b1d      	ldr	r3, [pc, #116]	; (10019ac <_init_system+0x7c>)
 1001936:	2200      	movs	r2, #0
 1001938:	601a      	str	r2, [r3, #0]
	_data_indication_cb_handler = NULL;
 100193a:	4b1d      	ldr	r3, [pc, #116]	; (10019b0 <_init_system+0x80>)
 100193c:	2200      	movs	r2, #0
 100193e:	601a      	str	r2, [r3, #0]
	_addons_event_cb_handler = NULL;
 1001940:	4b1c      	ldr	r3, [pc, #112]	; (10019b4 <_init_system+0x84>)
 1001942:	2200      	movs	r2, #0
 1001944:	601a      	str	r2, [r3, #0]

	/* Init internal SPI controller */
	atpl360_spi_initialize();
 1001946:	4b1c      	ldr	r3, [pc, #112]	; (10019b8 <_init_system+0x88>)
 1001948:	4798      	blx	r3

	/* Initialize HAL SPI */
	sx_atpl360_hal_wrapper.plc_init();
 100194a:	4b1c      	ldr	r3, [pc, #112]	; (10019bc <_init_system+0x8c>)
 100194c:	681b      	ldr	r3, [r3, #0]
 100194e:	4798      	blx	r3
	sx_atpl360_hal_wrapper.plc_reset();
 1001950:	4b1a      	ldr	r3, [pc, #104]	; (10019bc <_init_system+0x8c>)
 1001952:	685b      	ldr	r3, [r3, #4]
 1001954:	4798      	blx	r3

	/* Set ATPl360 handler and enable int */
	sx_atpl360_hal_wrapper.plc_set_handler(_handler_atpl360_ext_int);
 1001956:	4b19      	ldr	r3, [pc, #100]	; (10019bc <_init_system+0x8c>)
 1001958:	689b      	ldr	r3, [r3, #8]
 100195a:	4819      	ldr	r0, [pc, #100]	; (10019c0 <_init_system+0x90>)
 100195c:	4798      	blx	r3

	/* Init event indicators */
	memset((uint8_t *)spb_cfm_event_enable, false, NUM_TX_BUFFERS);
 100195e:	2202      	movs	r2, #2
 1001960:	2100      	movs	r1, #0
 1001962:	4818      	ldr	r0, [pc, #96]	; (10019c4 <_init_system+0x94>)
 1001964:	4b18      	ldr	r3, [pc, #96]	; (10019c8 <_init_system+0x98>)
 1001966:	4798      	blx	r3
	sb_data_ind_event_enable = false;
 1001968:	4b18      	ldr	r3, [pc, #96]	; (10019cc <_init_system+0x9c>)
 100196a:	2200      	movs	r2, #0
 100196c:	701a      	strb	r2, [r3, #0]
	sb_param_ind_event_enable = false;
 100196e:	4b18      	ldr	r3, [pc, #96]	; (10019d0 <_init_system+0xa0>)
 1001970:	2200      	movs	r2, #0
 1001972:	701a      	strb	r2, [r3, #0]
	sus_reg_event_len = 0;
 1001974:	4b17      	ldr	r3, [pc, #92]	; (10019d4 <_init_system+0xa4>)
 1001976:	2200      	movs	r2, #0
 1001978:	801a      	strh	r2, [r3, #0]

	/* Init internal buffers */
	memset(spuc_tx_buffer, 0, sizeof(spuc_tx_buffer));
 100197a:	f240 2211 	movw	r2, #529	; 0x211
 100197e:	2100      	movs	r1, #0
 1001980:	4815      	ldr	r0, [pc, #84]	; (10019d8 <_init_system+0xa8>)
 1001982:	4b11      	ldr	r3, [pc, #68]	; (10019c8 <_init_system+0x98>)
 1001984:	4798      	blx	r3
	memset(spuc_ind_buffer, 0, sizeof(spuc_ind_buffer));
 1001986:	f44f 7208 	mov.w	r2, #544	; 0x220
 100198a:	2100      	movs	r1, #0
 100198c:	4813      	ldr	r0, [pc, #76]	; (10019dc <_init_system+0xac>)
 100198e:	4b0e      	ldr	r3, [pc, #56]	; (10019c8 <_init_system+0x98>)
 1001990:	4798      	blx	r3
	memset(spuc_cfm_buffer, 0, sizeof(spuc_cfm_buffer));
 1001992:	2216      	movs	r2, #22
 1001994:	2100      	movs	r1, #0
 1001996:	4812      	ldr	r0, [pc, #72]	; (10019e0 <_init_system+0xb0>)
 1001998:	4b0b      	ldr	r3, [pc, #44]	; (10019c8 <_init_system+0x98>)
 100199a:	4798      	blx	r3
#ifdef ATPL360_ADDONS_ENABLE
	memset(spuc_addon_buffer, 0, sizeof(spuc_addon_buffer));
 100199c:	f240 2225 	movw	r2, #549	; 0x225
 10019a0:	2100      	movs	r1, #0
 10019a2:	4810      	ldr	r0, [pc, #64]	; (10019e4 <_init_system+0xb4>)
 10019a4:	4b08      	ldr	r3, [pc, #32]	; (10019c8 <_init_system+0x98>)
 10019a6:	4798      	blx	r3
#endif
}
 10019a8:	bf00      	nop
 10019aa:	bd80      	pop	{r7, pc}
 10019ac:	200082c4 	.word	0x200082c4
 10019b0:	200082c8 	.word	0x200082c8
 10019b4:	200082ec 	.word	0x200082ec
 10019b8:	01002205 	.word	0x01002205
 10019bc:	200082cc 	.word	0x200082cc
 10019c0:	0100127d 	.word	0x0100127d
 10019c4:	20001cc0 	.word	0x20001cc0
 10019c8:	0100c685 	.word	0x0100c685
 10019cc:	20001cc2 	.word	0x20001cc2
 10019d0:	20001cc3 	.word	0x20001cc3
 10019d4:	20001cc4 	.word	0x20001cc4
 10019d8:	20001438 	.word	0x20001438
 10019dc:	2000164c 	.word	0x2000164c
 10019e0:	2000186c 	.word	0x2000186c
 10019e4:	20001a84 	.word	0x20001a84

010019e8 <atpl360_init>:
 * \param descr           Pointer to ATPL360 descriptor
 * \param px_hal_wrapper  Pointer to HAL wrapper (hardware abstraction layer functions)
 *
 */
void atpl360_init(atpl360_descriptor_t *const px_descr, atpl360_hal_wrapper_t *px_hal_wrapper)
{
 10019e8:	b580      	push	{r7, lr}
 10019ea:	b082      	sub	sp, #8
 10019ec:	af00      	add	r7, sp, #0
 10019ee:	6078      	str	r0, [r7, #4]
 10019f0:	6039      	str	r1, [r7, #0]
	/* Fill HAL wrapper functions to access hardware peripherals */
	memcpy(&sx_atpl360_hal_wrapper, px_hal_wrapper, sizeof(atpl360_hal_wrapper_t));
 10019f2:	221c      	movs	r2, #28
 10019f4:	6839      	ldr	r1, [r7, #0]
 10019f6:	4820      	ldr	r0, [pc, #128]	; (1001a78 <atpl360_init+0x90>)
 10019f8:	4b20      	ldr	r3, [pc, #128]	; (1001a7c <atpl360_init+0x94>)
 10019fa:	4798      	blx	r3

	px_descr->set_callbacks = _set_callbacks;
 10019fc:	687b      	ldr	r3, [r7, #4]
 10019fe:	4a20      	ldr	r2, [pc, #128]	; (1001a80 <atpl360_init+0x98>)
 1001a00:	601a      	str	r2, [r3, #0]
	px_descr->send_data = _send_data;
 1001a02:	687b      	ldr	r3, [r7, #4]
 1001a04:	4a1f      	ldr	r2, [pc, #124]	; (1001a84 <atpl360_init+0x9c>)
 1001a06:	605a      	str	r2, [r3, #4]
	px_descr->get_config = _get_config;
 1001a08:	687b      	ldr	r3, [r7, #4]
 1001a0a:	4a1f      	ldr	r2, [pc, #124]	; (1001a88 <atpl360_init+0xa0>)
 1001a0c:	609a      	str	r2, [r3, #8]
	px_descr->set_config = _set_config;
 1001a0e:	687b      	ldr	r3, [r7, #4]
 1001a10:	4a1e      	ldr	r2, [pc, #120]	; (1001a8c <atpl360_init+0xa4>)
 1001a12:	60da      	str	r2, [r3, #12]
	px_descr->send_addons_cmd = _send_addons_cmd;
 1001a14:	687b      	ldr	r3, [r7, #4]
 1001a16:	4a1e      	ldr	r2, [pc, #120]	; (1001a90 <atpl360_init+0xa8>)
 1001a18:	611a      	str	r2, [r3, #16]

	/* component must be explicitly enabled */
	atpl360_disable();
 1001a1a:	4b1e      	ldr	r3, [pc, #120]	; (1001a94 <atpl360_init+0xac>)
 1001a1c:	4798      	blx	r3

#ifdef ATPL360_ADDONS_ENABLE
	sx_addon_desc.send_data = _send_data;
 1001a1e:	4b1e      	ldr	r3, [pc, #120]	; (1001a98 <atpl360_init+0xb0>)
 1001a20:	4a18      	ldr	r2, [pc, #96]	; (1001a84 <atpl360_init+0x9c>)
 1001a22:	601a      	str	r2, [r3, #0]
	sx_addon_desc.get_config = _get_config;
 1001a24:	4b1c      	ldr	r3, [pc, #112]	; (1001a98 <atpl360_init+0xb0>)
 1001a26:	4a18      	ldr	r2, [pc, #96]	; (1001a88 <atpl360_init+0xa0>)
 1001a28:	605a      	str	r2, [r3, #4]
	sx_addon_desc.set_config = _set_config;
 1001a2a:	4b1b      	ldr	r3, [pc, #108]	; (1001a98 <atpl360_init+0xb0>)
 1001a2c:	4a17      	ldr	r2, [pc, #92]	; (1001a8c <atpl360_init+0xa4>)
 1001a2e:	609a      	str	r2, [r3, #8]
	sx_addon_desc.puc_addon_buffer = &spuc_addon_buffer[0];
 1001a30:	4b19      	ldr	r3, [pc, #100]	; (1001a98 <atpl360_init+0xb0>)
 1001a32:	4a1a      	ldr	r2, [pc, #104]	; (1001a9c <atpl360_init+0xb4>)
 1001a34:	60da      	str	r2, [r3, #12]
	atpl360_addon_init(&sx_addon_desc);
 1001a36:	4818      	ldr	r0, [pc, #96]	; (1001a98 <atpl360_init+0xb0>)
 1001a38:	4b19      	ldr	r3, [pc, #100]	; (1001aa0 <atpl360_init+0xb8>)
 1001a3a:	4798      	blx	r3
#endif

	/* Init int counter */
	ul_int_rx_data_cnt = 0;
 1001a3c:	4b19      	ldr	r3, [pc, #100]	; (1001aa4 <atpl360_init+0xbc>)
 1001a3e:	2200      	movs	r2, #0
 1001a40:	601a      	str	r2, [r3, #0]
	ul_int_tx_cnt = 0;
 1001a42:	4b19      	ldr	r3, [pc, #100]	; (1001aa8 <atpl360_init+0xc0>)
 1001a44:	2200      	movs	r2, #0
 1001a46:	601a      	str	r2, [r3, #0]
	ul_int_reg_cnt = 0;
 1001a48:	4b18      	ldr	r3, [pc, #96]	; (1001aac <atpl360_init+0xc4>)
 1001a4a:	2200      	movs	r2, #0
 1001a4c:	601a      	str	r2, [r3, #0]

	/* Init TX cfm flag */
	suc_waiting_tx_cfm = 0;
 1001a4e:	4b18      	ldr	r3, [pc, #96]	; (1001ab0 <atpl360_init+0xc8>)
 1001a50:	2200      	movs	r2, #0
 1001a52:	701a      	strb	r2, [r3, #0]
	sb_report_tx_cfm_error_by_rst = false;
 1001a54:	4b17      	ldr	r3, [pc, #92]	; (1001ab4 <atpl360_init+0xcc>)
 1001a56:	2200      	movs	r2, #0
 1001a58:	701a      	strb	r2, [r3, #0]

	/* Database for IB initialization */
	atpl360_ib_init();
 1001a5a:	4b17      	ldr	r3, [pc, #92]	; (1001ab8 <atpl360_init+0xd0>)
 1001a5c:	4798      	blx	r3

	/* Get product info */
	atpl360_ib_get_param(ATPL360_HOST_PRODUCT_ID, &sus_prod_info, sizeof(sus_prod_info));
 1001a5e:	2202      	movs	r2, #2
 1001a60:	4916      	ldr	r1, [pc, #88]	; (1001abc <atpl360_init+0xd4>)
 1001a62:	f44f 7088 	mov.w	r0, #272	; 0x110
 1001a66:	4b16      	ldr	r3, [pc, #88]	; (1001ac0 <atpl360_init+0xd8>)
 1001a68:	4798      	blx	r3

	/* init internal vars */
	_init_system();
 1001a6a:	4b16      	ldr	r3, [pc, #88]	; (1001ac4 <atpl360_init+0xdc>)
 1001a6c:	4798      	blx	r3
}
 1001a6e:	bf00      	nop
 1001a70:	3708      	adds	r7, #8
 1001a72:	46bd      	mov	sp, r7
 1001a74:	bd80      	pop	{r7, pc}
 1001a76:	bf00      	nop
 1001a78:	200082cc 	.word	0x200082cc
 1001a7c:	0100c551 	.word	0x0100c551
 1001a80:	010018e1 	.word	0x010018e1
 1001a84:	010017d5 	.word	0x010017d5
 1001a88:	01001465 	.word	0x01001465
 1001a8c:	01001611 	.word	0x01001611
 1001a90:	010017a5 	.word	0x010017a5
 1001a94:	01001b31 	.word	0x01001b31
 1001a98:	20001cac 	.word	0x20001cac
 1001a9c:	20001a84 	.word	0x20001a84
 1001aa0:	01000a01 	.word	0x01000a01
 1001aa4:	20001ccc 	.word	0x20001ccc
 1001aa8:	20001cd4 	.word	0x20001cd4
 1001aac:	20001cd8 	.word	0x20001cd8
 1001ab0:	20001cbc 	.word	0x20001cbc
 1001ab4:	20001cbd 	.word	0x20001cbd
 1001ab8:	01001d6d 	.word	0x01001d6d
 1001abc:	20001cdc 	.word	0x20001cdc
 1001ac0:	01001d91 	.word	0x01001d91
 1001ac4:	01001931 	.word	0x01001931

01001ac8 <atpl360_enable>:
 * \param ul_binary_len       Size of binary file for ATPl360
 *
 * \return Result of enable operation
 */
atpl360_res_t atpl360_enable(uint32_t ul_binary_address, uint32_t ul_binary_len)
{
 1001ac8:	b580      	push	{r7, lr}
 1001aca:	b086      	sub	sp, #24
 1001acc:	af00      	add	r7, sp, #0
 1001ace:	6078      	str	r0, [r7, #4]
 1001ad0:	6039      	str	r1, [r7, #0]
	atpl360_spi_data_t x_spi_data;
	uint8_t puc_int_buffer[ATPL360_EVENT_DATA_LENGTH];

	/* Disable EXT INT */
	sx_atpl360_hal_wrapper.plc_enable_int(false);
 1001ad2:	4b13      	ldr	r3, [pc, #76]	; (1001b20 <atpl360_enable+0x58>)
 1001ad4:	695b      	ldr	r3, [r3, #20]
 1001ad6:	2000      	movs	r0, #0
 1001ad8:	4798      	blx	r3

	atpl360_boot_init(ul_binary_address, ul_binary_len);
 1001ada:	6839      	ldr	r1, [r7, #0]
 1001adc:	6878      	ldr	r0, [r7, #4]
 1001ade:	4b11      	ldr	r3, [pc, #68]	; (1001b24 <atpl360_enable+0x5c>)
 1001ae0:	4798      	blx	r3

	/* Read Time Ref to get SPI status */
	x_spi_data.us_mem_id = ATPL360_STATUS_INFO_ID;
 1001ae2:	2300      	movs	r3, #0
 1001ae4:	827b      	strh	r3, [r7, #18]
	x_spi_data.us_len = sizeof(puc_int_buffer);
 1001ae6:	2308      	movs	r3, #8
 1001ae8:	823b      	strh	r3, [r7, #16]
	x_spi_data.puc_data_buf = puc_int_buffer;
 1001aea:	f107 0308 	add.w	r3, r7, #8
 1001aee:	617b      	str	r3, [r7, #20]
	if (_spi_send_cmd(SPI_RD_CMD, &x_spi_data) == ATPL360_ERROR) {
 1001af0:	f107 0310 	add.w	r3, r7, #16
 1001af4:	4619      	mov	r1, r3
 1001af6:	2000      	movs	r0, #0
 1001af8:	4b0b      	ldr	r3, [pc, #44]	; (1001b28 <atpl360_enable+0x60>)
 1001afa:	4798      	blx	r3
 1001afc:	4603      	mov	r3, r0
 1001afe:	2b01      	cmp	r3, #1
 1001b00:	d101      	bne.n	1001b06 <atpl360_enable+0x3e>
		return ATPL360_ERROR;
 1001b02:	2301      	movs	r3, #1
 1001b04:	e007      	b.n	1001b16 <atpl360_enable+0x4e>
	}

	sb_component_enabled = true;
 1001b06:	4b09      	ldr	r3, [pc, #36]	; (1001b2c <atpl360_enable+0x64>)
 1001b08:	2201      	movs	r2, #1
 1001b0a:	701a      	strb	r2, [r3, #0]

	/* Enable EXT INT */
	sx_atpl360_hal_wrapper.plc_enable_int(true);
 1001b0c:	4b04      	ldr	r3, [pc, #16]	; (1001b20 <atpl360_enable+0x58>)
 1001b0e:	695b      	ldr	r3, [r3, #20]
 1001b10:	2001      	movs	r0, #1
 1001b12:	4798      	blx	r3

	return ATPL360_SUCCESS;
 1001b14:	2300      	movs	r3, #0
}
 1001b16:	4618      	mov	r0, r3
 1001b18:	3718      	adds	r7, #24
 1001b1a:	46bd      	mov	sp, r7
 1001b1c:	bd80      	pop	{r7, pc}
 1001b1e:	bf00      	nop
 1001b20:	200082cc 	.word	0x200082cc
 1001b24:	01001efd 	.word	0x01001efd
 1001b28:	010010a9 	.word	0x010010a9
 1001b2c:	20001cc6 	.word	0x20001cc6

01001b30 <atpl360_disable>:

void atpl360_disable(void)
{
 1001b30:	b580      	push	{r7, lr}
 1001b32:	af00      	add	r7, sp, #0
	sb_component_enabled = false;
 1001b34:	4b05      	ldr	r3, [pc, #20]	; (1001b4c <atpl360_disable+0x1c>)
 1001b36:	2200      	movs	r2, #0
 1001b38:	701a      	strb	r2, [r3, #0]

	/* Disable EXT INT by default */
	sx_atpl360_hal_wrapper.plc_enable_int(false);
 1001b3a:	4b05      	ldr	r3, [pc, #20]	; (1001b50 <atpl360_disable+0x20>)
 1001b3c:	695b      	ldr	r3, [r3, #20]
 1001b3e:	2000      	movs	r0, #0
 1001b40:	4798      	blx	r3

	/* PL360 reset */
	sx_atpl360_hal_wrapper.plc_reset();
 1001b42:	4b03      	ldr	r3, [pc, #12]	; (1001b50 <atpl360_disable+0x20>)
 1001b44:	685b      	ldr	r3, [r3, #4]
 1001b46:	4798      	blx	r3
}
 1001b48:	bf00      	nop
 1001b4a:	bd80      	pop	{r7, pc}
 1001b4c:	20001cc6 	.word	0x20001cc6
 1001b50:	200082cc 	.word	0x200082cc

01001b54 <atpl360_handle_events>:
/**
 * \brief Function to Check ATPL360 pending events
 *
 */
void atpl360_handle_events(void)
{
 1001b54:	b580      	push	{r7, lr}
 1001b56:	b092      	sub	sp, #72	; 0x48
 1001b58:	af00      	add	r7, sp, #0
	uint8_t uc_i;

	if (sb_component_enabled) {
 1001b5a:	4b72      	ldr	r3, [pc, #456]	; (1001d24 <atpl360_handle_events+0x1d0>)
 1001b5c:	781b      	ldrb	r3, [r3, #0]
 1001b5e:	2b00      	cmp	r3, #0
 1001b60:	f000 80dd 	beq.w	1001d1e <atpl360_handle_events+0x1ca>
		/* Check CFM report error due to ATPL360 reset */
		if (sb_report_tx_cfm_error_by_rst) {
 1001b64:	4b70      	ldr	r3, [pc, #448]	; (1001d28 <atpl360_handle_events+0x1d4>)
 1001b66:	781b      	ldrb	r3, [r3, #0]
 1001b68:	b2db      	uxtb	r3, r3
 1001b6a:	2b00      	cmp	r3, #0
 1001b6c:	d019      	beq.n	1001ba2 <atpl360_handle_events+0x4e>
			tx_cfm_t x_tx_cfm;

			sb_report_tx_cfm_error_by_rst = false;
 1001b6e:	4b6e      	ldr	r3, [pc, #440]	; (1001d28 <atpl360_handle_events+0x1d4>)
 1001b70:	2200      	movs	r2, #0
 1001b72:	701a      	strb	r2, [r3, #0]
			suc_waiting_tx_cfm = 0;
 1001b74:	4b6d      	ldr	r3, [pc, #436]	; (1001d2c <atpl360_handle_events+0x1d8>)
 1001b76:	2200      	movs	r2, #0
 1001b78:	701a      	strb	r2, [r3, #0]

			x_tx_cfm.uc_tx_result = TX_RESULT_NO_TX;
 1001b7a:	23ff      	movs	r3, #255	; 0xff
 1001b7c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
			x_tx_cfm.ul_tx_time = 0;
 1001b80:	2300      	movs	r3, #0
 1001b82:	633b      	str	r3, [r7, #48]	; 0x30
			x_tx_cfm.ul_rms_calc = 0;
 1001b84:	2300      	movs	r3, #0
 1001b86:	637b      	str	r3, [r7, #52]	; 0x34

			if (_data_confirm_cb_handler) {
 1001b88:	4b69      	ldr	r3, [pc, #420]	; (1001d30 <atpl360_handle_events+0x1dc>)
 1001b8a:	681b      	ldr	r3, [r3, #0]
 1001b8c:	2b00      	cmp	r3, #0
 1001b8e:	f000 80c5 	beq.w	1001d1c <atpl360_handle_events+0x1c8>
				_data_confirm_cb_handler(&x_tx_cfm);
 1001b92:	4b67      	ldr	r3, [pc, #412]	; (1001d30 <atpl360_handle_events+0x1dc>)
 1001b94:	681b      	ldr	r3, [r3, #0]
 1001b96:	f107 0230 	add.w	r2, r7, #48	; 0x30
 1001b9a:	4610      	mov	r0, r2
 1001b9c:	4798      	blx	r3
			}

			return;
 1001b9e:	bf00      	nop
 1001ba0:	e0bc      	b.n	1001d1c <atpl360_handle_events+0x1c8>
		}

		/* Check msg cfm events */
		for (uc_i = 0; uc_i < NUM_TX_BUFFERS; uc_i++) {
 1001ba2:	2300      	movs	r3, #0
 1001ba4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 1001ba8:	e053      	b.n	1001c52 <atpl360_handle_events+0xfe>
			if (spb_cfm_event_enable[uc_i]) {
 1001baa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 1001bae:	4a61      	ldr	r2, [pc, #388]	; (1001d34 <atpl360_handle_events+0x1e0>)
 1001bb0:	5cd3      	ldrb	r3, [r2, r3]
 1001bb2:	b2db      	uxtb	r3, r3
 1001bb4:	2b00      	cmp	r3, #0
 1001bb6:	d047      	beq.n	1001c48 <atpl360_handle_events+0xf4>
				tx_cfm_t x_tx_cfm;
				uint8_t uc_ret;

				suc_waiting_tx_cfm--;
 1001bb8:	4b5c      	ldr	r3, [pc, #368]	; (1001d2c <atpl360_handle_events+0x1d8>)
 1001bba:	781b      	ldrb	r3, [r3, #0]
 1001bbc:	b2db      	uxtb	r3, r3
 1001bbe:	3b01      	subs	r3, #1
 1001bc0:	b2da      	uxtb	r2, r3
 1001bc2:	4b5a      	ldr	r3, [pc, #360]	; (1001d2c <atpl360_handle_events+0x1d8>)
 1001bc4:	701a      	strb	r2, [r3, #0]

				uc_ret = atpl360_comm_parse((void *)&x_tx_cfm, spuc_cfm_buffer[uc_i], sizeof(tx_cfm_t));
 1001bc6:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 1001bca:	4613      	mov	r3, r2
 1001bcc:	009b      	lsls	r3, r3, #2
 1001bce:	4413      	add	r3, r2
 1001bd0:	005b      	lsls	r3, r3, #1
 1001bd2:	4413      	add	r3, r2
 1001bd4:	4a58      	ldr	r2, [pc, #352]	; (1001d38 <atpl360_handle_events+0x1e4>)
 1001bd6:	1899      	adds	r1, r3, r2
 1001bd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 1001bdc:	220b      	movs	r2, #11
 1001bde:	4618      	mov	r0, r3
 1001be0:	4b56      	ldr	r3, [pc, #344]	; (1001d3c <atpl360_handle_events+0x1e8>)
 1001be2:	4798      	blx	r3
 1001be4:	4603      	mov	r3, r0
 1001be6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

#ifdef ATPL360_ADDONS_ENABLE
				/* Check Addons */
				if (_addons_event_cb_handler) {
 1001bea:	4b55      	ldr	r3, [pc, #340]	; (1001d40 <atpl360_handle_events+0x1ec>)
 1001bec:	681b      	ldr	r3, [r3, #0]
 1001bee:	2b00      	cmp	r3, #0
 1001bf0:	d017      	beq.n	1001c22 <atpl360_handle_events+0xce>
					if (uc_ret == ATPL360_COMM_SUCCESS) {
 1001bf2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 1001bf6:	2b00      	cmp	r3, #0
 1001bf8:	d113      	bne.n	1001c22 <atpl360_handle_events+0xce>
						uint16_t us_rsp_len;

						/* report to addon */
						us_rsp_len = atpl360_addon_stringify_cfm(spuc_addon_buffer, &x_tx_cfm);
 1001bfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 1001bfe:	4619      	mov	r1, r3
 1001c00:	4850      	ldr	r0, [pc, #320]	; (1001d44 <atpl360_handle_events+0x1f0>)
 1001c02:	4b51      	ldr	r3, [pc, #324]	; (1001d48 <atpl360_handle_events+0x1f4>)
 1001c04:	4798      	blx	r3
 1001c06:	4603      	mov	r3, r0
 1001c08:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
						/* execute callback */
						if (us_rsp_len) {
 1001c0c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 1001c10:	2b00      	cmp	r3, #0
 1001c12:	d006      	beq.n	1001c22 <atpl360_handle_events+0xce>
							_addons_event_cb_handler(spuc_addon_buffer, us_rsp_len);
 1001c14:	4b4a      	ldr	r3, [pc, #296]	; (1001d40 <atpl360_handle_events+0x1ec>)
 1001c16:	681b      	ldr	r3, [r3, #0]
 1001c18:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 1001c1c:	4611      	mov	r1, r2
 1001c1e:	4849      	ldr	r0, [pc, #292]	; (1001d44 <atpl360_handle_events+0x1f0>)
 1001c20:	4798      	blx	r3
						}
					}
				}
#endif

				if (_data_confirm_cb_handler) {
 1001c22:	4b43      	ldr	r3, [pc, #268]	; (1001d30 <atpl360_handle_events+0x1dc>)
 1001c24:	681b      	ldr	r3, [r3, #0]
 1001c26:	2b00      	cmp	r3, #0
 1001c28:	d009      	beq.n	1001c3e <atpl360_handle_events+0xea>
					if (uc_ret == ATPL360_COMM_SUCCESS) {
 1001c2a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 1001c2e:	2b00      	cmp	r3, #0
 1001c30:	d105      	bne.n	1001c3e <atpl360_handle_events+0xea>
						_data_confirm_cb_handler(&x_tx_cfm);
 1001c32:	4b3f      	ldr	r3, [pc, #252]	; (1001d30 <atpl360_handle_events+0x1dc>)
 1001c34:	681b      	ldr	r3, [r3, #0]
 1001c36:	f107 0224 	add.w	r2, r7, #36	; 0x24
 1001c3a:	4610      	mov	r0, r2
 1001c3c:	4798      	blx	r3
					}
				}

				/* Reset event flag */
				spb_cfm_event_enable[uc_i] = false;
 1001c3e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 1001c42:	4a3c      	ldr	r2, [pc, #240]	; (1001d34 <atpl360_handle_events+0x1e0>)
 1001c44:	2100      	movs	r1, #0
 1001c46:	54d1      	strb	r1, [r2, r3]
		for (uc_i = 0; uc_i < NUM_TX_BUFFERS; uc_i++) {
 1001c48:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 1001c4c:	3301      	adds	r3, #1
 1001c4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 1001c52:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 1001c56:	2b01      	cmp	r3, #1
 1001c58:	d9a7      	bls.n	1001baa <atpl360_handle_events+0x56>
			}
		}

		/* Check quality parameters and data msg ind events */
		if (sb_param_ind_event_enable && sb_data_ind_event_enable) {
 1001c5a:	4b3c      	ldr	r3, [pc, #240]	; (1001d4c <atpl360_handle_events+0x1f8>)
 1001c5c:	781b      	ldrb	r3, [r3, #0]
 1001c5e:	b2db      	uxtb	r3, r3
 1001c60:	2b00      	cmp	r3, #0
 1001c62:	d03b      	beq.n	1001cdc <atpl360_handle_events+0x188>
 1001c64:	4b3a      	ldr	r3, [pc, #232]	; (1001d50 <atpl360_handle_events+0x1fc>)
 1001c66:	781b      	ldrb	r3, [r3, #0]
 1001c68:	b2db      	uxtb	r3, r3
 1001c6a:	2b00      	cmp	r3, #0
 1001c6c:	d036      	beq.n	1001cdc <atpl360_handle_events+0x188>
			rx_msg_t x_rx_msg;
			uint8_t uc_ret;

			uc_ret = atpl360_comm_parse((void *)&x_rx_msg, spuc_ind_buffer, sizeof(rx_msg_t));
 1001c6e:	1d3b      	adds	r3, r7, #4
 1001c70:	2220      	movs	r2, #32
 1001c72:	4938      	ldr	r1, [pc, #224]	; (1001d54 <atpl360_handle_events+0x200>)
 1001c74:	4618      	mov	r0, r3
 1001c76:	4b31      	ldr	r3, [pc, #196]	; (1001d3c <atpl360_handle_events+0x1e8>)
 1001c78:	4798      	blx	r3
 1001c7a:	4603      	mov	r3, r0
 1001c7c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

#ifdef ATPL360_ADDONS_ENABLE
			/* Check Addons */
			if (_addons_event_cb_handler) {
 1001c80:	4b2f      	ldr	r3, [pc, #188]	; (1001d40 <atpl360_handle_events+0x1ec>)
 1001c82:	681b      	ldr	r3, [r3, #0]
 1001c84:	2b00      	cmp	r3, #0
 1001c86:	d016      	beq.n	1001cb6 <atpl360_handle_events+0x162>
				if (uc_ret == ATPL360_COMM_SUCCESS) {
 1001c88:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 1001c8c:	2b00      	cmp	r3, #0
 1001c8e:	d112      	bne.n	1001cb6 <atpl360_handle_events+0x162>
					uint16_t us_addon_len;

					/* report to addon */
					us_addon_len = atpl360_addon_stringify_ind(spuc_addon_buffer, &x_rx_msg);
 1001c90:	1d3b      	adds	r3, r7, #4
 1001c92:	4619      	mov	r1, r3
 1001c94:	482b      	ldr	r0, [pc, #172]	; (1001d44 <atpl360_handle_events+0x1f0>)
 1001c96:	4b30      	ldr	r3, [pc, #192]	; (1001d58 <atpl360_handle_events+0x204>)
 1001c98:	4798      	blx	r3
 1001c9a:	4603      	mov	r3, r0
 1001c9c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
					/* execute callback */
					if (us_addon_len) {
 1001ca0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 1001ca4:	2b00      	cmp	r3, #0
 1001ca6:	d006      	beq.n	1001cb6 <atpl360_handle_events+0x162>
						_addons_event_cb_handler(spuc_addon_buffer, us_addon_len);
 1001ca8:	4b25      	ldr	r3, [pc, #148]	; (1001d40 <atpl360_handle_events+0x1ec>)
 1001caa:	681b      	ldr	r3, [r3, #0]
 1001cac:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 1001cb0:	4611      	mov	r1, r2
 1001cb2:	4824      	ldr	r0, [pc, #144]	; (1001d44 <atpl360_handle_events+0x1f0>)
 1001cb4:	4798      	blx	r3
					}
				}
			}
#endif

			if (_data_indication_cb_handler) {
 1001cb6:	4b29      	ldr	r3, [pc, #164]	; (1001d5c <atpl360_handle_events+0x208>)
 1001cb8:	681b      	ldr	r3, [r3, #0]
 1001cba:	2b00      	cmp	r3, #0
 1001cbc:	d008      	beq.n	1001cd0 <atpl360_handle_events+0x17c>
				if (uc_ret == ATPL360_COMM_SUCCESS) {
 1001cbe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 1001cc2:	2b00      	cmp	r3, #0
 1001cc4:	d104      	bne.n	1001cd0 <atpl360_handle_events+0x17c>
					_data_indication_cb_handler(&x_rx_msg);
 1001cc6:	4b25      	ldr	r3, [pc, #148]	; (1001d5c <atpl360_handle_events+0x208>)
 1001cc8:	681b      	ldr	r3, [r3, #0]
 1001cca:	1d3a      	adds	r2, r7, #4
 1001ccc:	4610      	mov	r0, r2
 1001cce:	4798      	blx	r3
				}
			}

			/* Reset events flag */
			sb_param_ind_event_enable = false;
 1001cd0:	4b1e      	ldr	r3, [pc, #120]	; (1001d4c <atpl360_handle_events+0x1f8>)
 1001cd2:	2200      	movs	r2, #0
 1001cd4:	701a      	strb	r2, [r3, #0]
			sb_data_ind_event_enable = false;
 1001cd6:	4b1e      	ldr	r3, [pc, #120]	; (1001d50 <atpl360_handle_events+0x1fc>)
 1001cd8:	2200      	movs	r2, #0
 1001cda:	701a      	strb	r2, [r3, #0]
		}

#ifdef ATPL360_ADDONS_ENABLE
		/* Check reg events */
		if (sus_reg_event_len) {
 1001cdc:	4b20      	ldr	r3, [pc, #128]	; (1001d60 <atpl360_handle_events+0x20c>)
 1001cde:	881b      	ldrh	r3, [r3, #0]
 1001ce0:	b29b      	uxth	r3, r3
 1001ce2:	2b00      	cmp	r3, #0
 1001ce4:	d01b      	beq.n	1001d1e <atpl360_handle_events+0x1ca>
			/* Check Addons */
			if (_addons_event_cb_handler) {
 1001ce6:	4b16      	ldr	r3, [pc, #88]	; (1001d40 <atpl360_handle_events+0x1ec>)
 1001ce8:	681b      	ldr	r3, [r3, #0]
 1001cea:	2b00      	cmp	r3, #0
 1001cec:	d012      	beq.n	1001d14 <atpl360_handle_events+0x1c0>
				uint16_t us_addon_len;

				/* report to addon */
				us_addon_len = atpl360_addon_stringify_reg(spuc_addon_buffer, spuc_reg_buffer, sus_reg_event_len);
 1001cee:	4b1c      	ldr	r3, [pc, #112]	; (1001d60 <atpl360_handle_events+0x20c>)
 1001cf0:	881b      	ldrh	r3, [r3, #0]
 1001cf2:	b29b      	uxth	r3, r3
 1001cf4:	461a      	mov	r2, r3
 1001cf6:	491b      	ldr	r1, [pc, #108]	; (1001d64 <atpl360_handle_events+0x210>)
 1001cf8:	4812      	ldr	r0, [pc, #72]	; (1001d44 <atpl360_handle_events+0x1f0>)
 1001cfa:	4b1b      	ldr	r3, [pc, #108]	; (1001d68 <atpl360_handle_events+0x214>)
 1001cfc:	4798      	blx	r3
 1001cfe:	4603      	mov	r3, r0
 1001d00:	87fb      	strh	r3, [r7, #62]	; 0x3e
				/* execute callback */
				if (us_addon_len) {
 1001d02:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 1001d04:	2b00      	cmp	r3, #0
 1001d06:	d005      	beq.n	1001d14 <atpl360_handle_events+0x1c0>
					_addons_event_cb_handler(spuc_addon_buffer, us_addon_len);
 1001d08:	4b0d      	ldr	r3, [pc, #52]	; (1001d40 <atpl360_handle_events+0x1ec>)
 1001d0a:	681b      	ldr	r3, [r3, #0]
 1001d0c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 1001d0e:	4611      	mov	r1, r2
 1001d10:	480c      	ldr	r0, [pc, #48]	; (1001d44 <atpl360_handle_events+0x1f0>)
 1001d12:	4798      	blx	r3
				}
			}

			/* Reset event flag */
			sus_reg_event_len = 0;
 1001d14:	4b12      	ldr	r3, [pc, #72]	; (1001d60 <atpl360_handle_events+0x20c>)
 1001d16:	2200      	movs	r2, #0
 1001d18:	801a      	strh	r2, [r3, #0]
 1001d1a:	e000      	b.n	1001d1e <atpl360_handle_events+0x1ca>
			return;
 1001d1c:	bf00      	nop
		}
#endif
	}
}
 1001d1e:	3748      	adds	r7, #72	; 0x48
 1001d20:	46bd      	mov	sp, r7
 1001d22:	bd80      	pop	{r7, pc}
 1001d24:	20001cc6 	.word	0x20001cc6
 1001d28:	20001cbd 	.word	0x20001cbd
 1001d2c:	20001cbc 	.word	0x20001cbc
 1001d30:	200082c4 	.word	0x200082c4
 1001d34:	20001cc0 	.word	0x20001cc0
 1001d38:	2000186c 	.word	0x2000186c
 1001d3c:	01000415 	.word	0x01000415
 1001d40:	200082ec 	.word	0x200082ec
 1001d44:	20001a84 	.word	0x20001a84
 1001d48:	01000e8d 	.word	0x01000e8d
 1001d4c:	20001cc3 	.word	0x20001cc3
 1001d50:	20001cc2 	.word	0x20001cc2
 1001d54:	2000164c 	.word	0x2000164c
 1001d58:	01000c59 	.word	0x01000c59
 1001d5c:	200082c8 	.word	0x200082c8
 1001d60:	20001cc4 	.word	0x20001cc4
 1001d64:	20001884 	.word	0x20001884
 1001d68:	01000995 	.word	0x01000995

01001d6c <atpl360_ib_init>:

/**
 * \brief Initializes the addresses of the parameters of the information base
 */
void atpl360_ib_init(void)
{
 1001d6c:	b580      	push	{r7, lr}
 1001d6e:	af00      	add	r7, sp, #0
	px_db = atpl360_get_address_params_table();
 1001d70:	4b04      	ldr	r3, [pc, #16]	; (1001d84 <atpl360_ib_init+0x18>)
 1001d72:	4798      	blx	r3
 1001d74:	4602      	mov	r2, r0
 1001d76:	4b04      	ldr	r3, [pc, #16]	; (1001d88 <atpl360_ib_init+0x1c>)
 1001d78:	601a      	str	r2, [r3, #0]
	atpl360_ib_db_init();
 1001d7a:	4b04      	ldr	r3, [pc, #16]	; (1001d8c <atpl360_ib_init+0x20>)
 1001d7c:	4798      	blx	r3
}
 1001d7e:	bf00      	nop
 1001d80:	bd80      	pop	{r7, pc}
 1001d82:	bf00      	nop
 1001d84:	010002fd 	.word	0x010002fd
 1001d88:	20001ce0 	.word	0x20001ce0
 1001d8c:	010002b9 	.word	0x010002b9

01001d90 <atpl360_ib_get_param>:
 * \param id_param the identifier of the parameter
 * \param value pointer where the parameter is going to be stored
 * \param size_param size of the parameter
 */
bool atpl360_ib_get_param(atpl360_id_param_t id_param, void *value, uint8_t size_param)
{
 1001d90:	b580      	push	{r7, lr}
 1001d92:	b084      	sub	sp, #16
 1001d94:	af00      	add	r7, sp, #0
 1001d96:	4603      	mov	r3, r0
 1001d98:	6039      	str	r1, [r7, #0]
 1001d9a:	80fb      	strh	r3, [r7, #6]
 1001d9c:	4613      	mov	r3, r2
 1001d9e:	717b      	strb	r3, [r7, #5]
	uint16_t us_i;
	uint16_t us_idx = ATPL360_IB_PARAM_END;
 1001da0:	2305      	movs	r3, #5
 1001da2:	81bb      	strh	r3, [r7, #12]

	for (us_i = 0; us_i < ATPL360_IB_PARAM_END; us_i++) {
 1001da4:	2300      	movs	r3, #0
 1001da6:	81fb      	strh	r3, [r7, #14]
 1001da8:	e011      	b.n	1001dce <atpl360_ib_get_param+0x3e>
		if (id_param == px_db[us_i].id) {
 1001daa:	4b1d      	ldr	r3, [pc, #116]	; (1001e20 <atpl360_ib_get_param+0x90>)
 1001dac:	6819      	ldr	r1, [r3, #0]
 1001dae:	89fa      	ldrh	r2, [r7, #14]
 1001db0:	4613      	mov	r3, r2
 1001db2:	005b      	lsls	r3, r3, #1
 1001db4:	4413      	add	r3, r2
 1001db6:	009b      	lsls	r3, r3, #2
 1001db8:	440b      	add	r3, r1
 1001dba:	881b      	ldrh	r3, [r3, #0]
 1001dbc:	88fa      	ldrh	r2, [r7, #6]
 1001dbe:	429a      	cmp	r2, r3
 1001dc0:	d102      	bne.n	1001dc8 <atpl360_ib_get_param+0x38>
			us_idx = us_i;
 1001dc2:	89fb      	ldrh	r3, [r7, #14]
 1001dc4:	81bb      	strh	r3, [r7, #12]
			break;
 1001dc6:	e005      	b.n	1001dd4 <atpl360_ib_get_param+0x44>
	for (us_i = 0; us_i < ATPL360_IB_PARAM_END; us_i++) {
 1001dc8:	89fb      	ldrh	r3, [r7, #14]
 1001dca:	3301      	adds	r3, #1
 1001dcc:	81fb      	strh	r3, [r7, #14]
 1001dce:	89fb      	ldrh	r3, [r7, #14]
 1001dd0:	2b04      	cmp	r3, #4
 1001dd2:	d9ea      	bls.n	1001daa <atpl360_ib_get_param+0x1a>
		}
	}

	/* Checking that is a correct ID */
	if (us_idx >= ATPL360_IB_PARAM_END) {
 1001dd4:	89bb      	ldrh	r3, [r7, #12]
 1001dd6:	2b04      	cmp	r3, #4
 1001dd8:	d901      	bls.n	1001dde <atpl360_ib_get_param+0x4e>
		return false;
 1001dda:	2300      	movs	r3, #0
 1001ddc:	e01c      	b.n	1001e18 <atpl360_ib_get_param+0x88>
	}

	/* Checking that is right length */
	if (size_param != px_db[us_idx].size) {
 1001dde:	4b10      	ldr	r3, [pc, #64]	; (1001e20 <atpl360_ib_get_param+0x90>)
 1001de0:	6819      	ldr	r1, [r3, #0]
 1001de2:	89ba      	ldrh	r2, [r7, #12]
 1001de4:	4613      	mov	r3, r2
 1001de6:	005b      	lsls	r3, r3, #1
 1001de8:	4413      	add	r3, r2
 1001dea:	009b      	lsls	r3, r3, #2
 1001dec:	440b      	add	r3, r1
 1001dee:	7a1b      	ldrb	r3, [r3, #8]
 1001df0:	797a      	ldrb	r2, [r7, #5]
 1001df2:	429a      	cmp	r2, r3
 1001df4:	d001      	beq.n	1001dfa <atpl360_ib_get_param+0x6a>
		return false;
 1001df6:	2300      	movs	r3, #0
 1001df8:	e00e      	b.n	1001e18 <atpl360_ib_get_param+0x88>
	}

	/* Now the parameter can be copied safely */
	memcpy(value, px_db[us_idx].ptr_storage, size_param);
 1001dfa:	4b09      	ldr	r3, [pc, #36]	; (1001e20 <atpl360_ib_get_param+0x90>)
 1001dfc:	6819      	ldr	r1, [r3, #0]
 1001dfe:	89ba      	ldrh	r2, [r7, #12]
 1001e00:	4613      	mov	r3, r2
 1001e02:	005b      	lsls	r3, r3, #1
 1001e04:	4413      	add	r3, r2
 1001e06:	009b      	lsls	r3, r3, #2
 1001e08:	440b      	add	r3, r1
 1001e0a:	685b      	ldr	r3, [r3, #4]
 1001e0c:	797a      	ldrb	r2, [r7, #5]
 1001e0e:	4619      	mov	r1, r3
 1001e10:	6838      	ldr	r0, [r7, #0]
 1001e12:	4b04      	ldr	r3, [pc, #16]	; (1001e24 <atpl360_ib_get_param+0x94>)
 1001e14:	4798      	blx	r3

	return true;
 1001e16:	2301      	movs	r3, #1
}
 1001e18:	4618      	mov	r0, r3
 1001e1a:	3710      	adds	r7, #16
 1001e1c:	46bd      	mov	sp, r7
 1001e1e:	bd80      	pop	{r7, pc}
 1001e20:	20001ce0 	.word	0x20001ce0
 1001e24:	0100c551 	.word	0x0100c551

01001e28 <atpl360_ib_set_param>:
 * \param id_param the identifier of the parameter
 * \param value pointer where the parameter is going to be stored
 * \param size_param size of the parameter
 */
bool atpl360_ib_set_param(atpl360_id_param_t id_param, void *value, uint8_t size_param)
{
 1001e28:	b580      	push	{r7, lr}
 1001e2a:	b084      	sub	sp, #16
 1001e2c:	af00      	add	r7, sp, #0
 1001e2e:	4603      	mov	r3, r0
 1001e30:	6039      	str	r1, [r7, #0]
 1001e32:	80fb      	strh	r3, [r7, #6]
 1001e34:	4613      	mov	r3, r2
 1001e36:	717b      	strb	r3, [r7, #5]
	uint16_t us_i;
	uint16_t us_idx = ATPL360_IB_PARAM_END;
 1001e38:	2305      	movs	r3, #5
 1001e3a:	81bb      	strh	r3, [r7, #12]
	/* Find index in db table */

	for (us_i = 0; us_i < ATPL360_IB_PARAM_END; us_i++) {
 1001e3c:	2300      	movs	r3, #0
 1001e3e:	81fb      	strh	r3, [r7, #14]
 1001e40:	e011      	b.n	1001e66 <atpl360_ib_set_param+0x3e>
		if (id_param == px_db[us_i].id) {
 1001e42:	4b24      	ldr	r3, [pc, #144]	; (1001ed4 <atpl360_ib_set_param+0xac>)
 1001e44:	6819      	ldr	r1, [r3, #0]
 1001e46:	89fa      	ldrh	r2, [r7, #14]
 1001e48:	4613      	mov	r3, r2
 1001e4a:	005b      	lsls	r3, r3, #1
 1001e4c:	4413      	add	r3, r2
 1001e4e:	009b      	lsls	r3, r3, #2
 1001e50:	440b      	add	r3, r1
 1001e52:	881b      	ldrh	r3, [r3, #0]
 1001e54:	88fa      	ldrh	r2, [r7, #6]
 1001e56:	429a      	cmp	r2, r3
 1001e58:	d102      	bne.n	1001e60 <atpl360_ib_set_param+0x38>
			us_idx = us_i;
 1001e5a:	89fb      	ldrh	r3, [r7, #14]
 1001e5c:	81bb      	strh	r3, [r7, #12]
			break;
 1001e5e:	e005      	b.n	1001e6c <atpl360_ib_set_param+0x44>
	for (us_i = 0; us_i < ATPL360_IB_PARAM_END; us_i++) {
 1001e60:	89fb      	ldrh	r3, [r7, #14]
 1001e62:	3301      	adds	r3, #1
 1001e64:	81fb      	strh	r3, [r7, #14]
 1001e66:	89fb      	ldrh	r3, [r7, #14]
 1001e68:	2b04      	cmp	r3, #4
 1001e6a:	d9ea      	bls.n	1001e42 <atpl360_ib_set_param+0x1a>
		}
	}

	/* Checking that is a correct ID */
	if (us_idx >= ATPL360_IB_PARAM_END) {
 1001e6c:	89bb      	ldrh	r3, [r7, #12]
 1001e6e:	2b04      	cmp	r3, #4
 1001e70:	d901      	bls.n	1001e76 <atpl360_ib_set_param+0x4e>
		return false;
 1001e72:	2300      	movs	r3, #0
 1001e74:	e029      	b.n	1001eca <atpl360_ib_set_param+0xa2>
	}

	/* Checking that is right length */
	if (size_param != px_db[us_idx].size) {
 1001e76:	4b17      	ldr	r3, [pc, #92]	; (1001ed4 <atpl360_ib_set_param+0xac>)
 1001e78:	6819      	ldr	r1, [r3, #0]
 1001e7a:	89ba      	ldrh	r2, [r7, #12]
 1001e7c:	4613      	mov	r3, r2
 1001e7e:	005b      	lsls	r3, r3, #1
 1001e80:	4413      	add	r3, r2
 1001e82:	009b      	lsls	r3, r3, #2
 1001e84:	440b      	add	r3, r1
 1001e86:	7a1b      	ldrb	r3, [r3, #8]
 1001e88:	797a      	ldrb	r2, [r7, #5]
 1001e8a:	429a      	cmp	r2, r3
 1001e8c:	d001      	beq.n	1001e92 <atpl360_ib_set_param+0x6a>
		return false;
 1001e8e:	2300      	movs	r3, #0
 1001e90:	e01b      	b.n	1001eca <atpl360_ib_set_param+0xa2>
	}

	/* Checking that is not read only */
	if (px_db[us_idx].b_read_only) {
 1001e92:	4b10      	ldr	r3, [pc, #64]	; (1001ed4 <atpl360_ib_set_param+0xac>)
 1001e94:	6819      	ldr	r1, [r3, #0]
 1001e96:	89ba      	ldrh	r2, [r7, #12]
 1001e98:	4613      	mov	r3, r2
 1001e9a:	005b      	lsls	r3, r3, #1
 1001e9c:	4413      	add	r3, r2
 1001e9e:	009b      	lsls	r3, r3, #2
 1001ea0:	440b      	add	r3, r1
 1001ea2:	7a5b      	ldrb	r3, [r3, #9]
 1001ea4:	2b00      	cmp	r3, #0
 1001ea6:	d001      	beq.n	1001eac <atpl360_ib_set_param+0x84>
		return false;
 1001ea8:	2300      	movs	r3, #0
 1001eaa:	e00e      	b.n	1001eca <atpl360_ib_set_param+0xa2>
	}

	/* Now the parameter can be copied safely */
	memcpy(px_db[us_idx].ptr_storage, value, size_param);
 1001eac:	4b09      	ldr	r3, [pc, #36]	; (1001ed4 <atpl360_ib_set_param+0xac>)
 1001eae:	6819      	ldr	r1, [r3, #0]
 1001eb0:	89ba      	ldrh	r2, [r7, #12]
 1001eb2:	4613      	mov	r3, r2
 1001eb4:	005b      	lsls	r3, r3, #1
 1001eb6:	4413      	add	r3, r2
 1001eb8:	009b      	lsls	r3, r3, #2
 1001eba:	440b      	add	r3, r1
 1001ebc:	685b      	ldr	r3, [r3, #4]
 1001ebe:	797a      	ldrb	r2, [r7, #5]
 1001ec0:	6839      	ldr	r1, [r7, #0]
 1001ec2:	4618      	mov	r0, r3
 1001ec4:	4b04      	ldr	r3, [pc, #16]	; (1001ed8 <atpl360_ib_set_param+0xb0>)
 1001ec6:	4798      	blx	r3

	return true;
 1001ec8:	2301      	movs	r3, #1
}
 1001eca:	4618      	mov	r0, r3
 1001ecc:	3710      	adds	r7, #16
 1001ece:	46bd      	mov	sp, r7
 1001ed0:	bd80      	pop	{r7, pc}
 1001ed2:	bf00      	nop
 1001ed4:	20001ce0 	.word	0x20001ce0
 1001ed8:	0100c551 	.word	0x0100c551

01001edc <atpl360_boot_without_load>:
}

#endif

inline void atpl360_boot_without_load(void)
{
 1001edc:	b580      	push	{r7, lr}
 1001ede:	af00      	add	r7, sp, #0
#ifdef __ATPL360A__
	atpl360_spi_boot_disable();
#else
	#ifdef __ATPL360B__
	atpl360_spi_clk_boot_disable();
 1001ee0:	4b04      	ldr	r3, [pc, #16]	; (1001ef4 <atpl360_boot_without_load+0x18>)
 1001ee2:	4798      	blx	r3
	#else
		#error ERROR in ATPL360 mode definition. (__ATPL360A__, __ATPL360B__)
	#endif
#endif

	sx_atpl360_hal_wrapper.plc_delay(DELAY_TREF_MS, 5);
 1001ee4:	4b04      	ldr	r3, [pc, #16]	; (1001ef8 <atpl360_boot_without_load+0x1c>)
 1001ee6:	699b      	ldr	r3, [r3, #24]
 1001ee8:	2105      	movs	r1, #5
 1001eea:	2001      	movs	r0, #1
 1001eec:	4798      	blx	r3
}
 1001eee:	bf00      	nop
 1001ef0:	bd80      	pop	{r7, pc}
 1001ef2:	bf00      	nop
 1001ef4:	01002179 	.word	0x01002179
 1001ef8:	200082cc 	.word	0x200082cc

01001efc <atpl360_boot_init>:

void atpl360_boot_init(uint32_t ul_binary_address, uint32_t ul_binary_len)
{
 1001efc:	b480      	push	{r7}
 1001efe:	b083      	sub	sp, #12
 1001f00:	af00      	add	r7, sp, #0
 1001f02:	6078      	str	r0, [r7, #4]
 1001f04:	6039      	str	r1, [r7, #0]
	sul_binary_address = ul_binary_address;
 1001f06:	4a05      	ldr	r2, [pc, #20]	; (1001f1c <atpl360_boot_init+0x20>)
 1001f08:	687b      	ldr	r3, [r7, #4]
 1001f0a:	6013      	str	r3, [r2, #0]
	sul_binary_len = ul_binary_len;
 1001f0c:	4a04      	ldr	r2, [pc, #16]	; (1001f20 <atpl360_boot_init+0x24>)
 1001f0e:	683b      	ldr	r3, [r7, #0]
 1001f10:	6013      	str	r3, [r2, #0]
}
 1001f12:	bf00      	nop
 1001f14:	370c      	adds	r7, #12
 1001f16:	46bd      	mov	sp, r7
 1001f18:	bc80      	pop	{r7}
 1001f1a:	4770      	bx	lr
 1001f1c:	20001ce4 	.word	0x20001ce4
 1001f20:	20001ce8 	.word	0x20001ce8

01001f24 <atpl360_boot_download_firmware>:

void atpl360_boot_download_firmware(void)
{
 1001f24:	b580      	push	{r7, lr}
 1001f26:	af00      	add	r7, sp, #0
	sx_atpl360_hal_wrapper.plc_enable_int(false);
 1001f28:	4b10      	ldr	r3, [pc, #64]	; (1001f6c <atpl360_boot_download_firmware+0x48>)
 1001f2a:	695b      	ldr	r3, [r3, #20]
 1001f2c:	2000      	movs	r0, #0
 1001f2e:	4798      	blx	r3
	sx_atpl360_hal_wrapper.plc_reset();
 1001f30:	4b0e      	ldr	r3, [pc, #56]	; (1001f6c <atpl360_boot_download_firmware+0x48>)
 1001f32:	685b      	ldr	r3, [r3, #4]
 1001f34:	4798      	blx	r3

	atpl360_spi_boot_write_cmd_enable();
 1001f36:	4b0e      	ldr	r3, [pc, #56]	; (1001f70 <atpl360_boot_download_firmware+0x4c>)
 1001f38:	4798      	blx	r3
	atpl360_spi_boot_config_sys();
 1001f3a:	4b0e      	ldr	r3, [pc, #56]	; (1001f74 <atpl360_boot_download_firmware+0x50>)
 1001f3c:	4798      	blx	r3

#ifndef ATPL360_SEC_BOOT_MODE
	atpl360_spi_update_fw(sul_binary_address, sul_binary_len);
 1001f3e:	4b0e      	ldr	r3, [pc, #56]	; (1001f78 <atpl360_boot_download_firmware+0x54>)
 1001f40:	681a      	ldr	r2, [r3, #0]
 1001f42:	4b0e      	ldr	r3, [pc, #56]	; (1001f7c <atpl360_boot_download_firmware+0x58>)
 1001f44:	681b      	ldr	r3, [r3, #0]
 1001f46:	4619      	mov	r1, r3
 1001f48:	4610      	mov	r0, r2
 1001f4a:	4b0d      	ldr	r3, [pc, #52]	; (1001f80 <atpl360_boot_download_firmware+0x5c>)
 1001f4c:	4798      	blx	r3
	atpl360_spi_boot_sec_set_init_vector(x_sec_info.puc_iv);
	atpl360_spi_boot_sec_set_signature(x_sec_info.puc_sign);
	atpl360_spi_update_fw_sec(ul_addr, x_sec_info.us_num_pkts << 4);
#endif /* #ifndef ATPL360_SEC_BOOT_MODE */

	atpl360_spi_boot_disable_cpuwait();
 1001f4e:	4b0d      	ldr	r3, [pc, #52]	; (1001f84 <atpl360_boot_download_firmware+0x60>)
 1001f50:	4798      	blx	r3

#ifdef __ATPL360A__
	atpl360_spi_boot_disable();
#else
	#ifdef __ATPL360B__
	atpl360_spi_clk_boot_disable();
 1001f52:	4b0d      	ldr	r3, [pc, #52]	; (1001f88 <atpl360_boot_download_firmware+0x64>)
 1001f54:	4798      	blx	r3
	#else
		#error ERROR in ATPL360 mode definition. (__ATPL360A__, __ATPL360B__)
	#endif
#endif

	sx_atpl360_hal_wrapper.plc_delay(DELAY_TREF_MS, 10);
 1001f56:	4b05      	ldr	r3, [pc, #20]	; (1001f6c <atpl360_boot_download_firmware+0x48>)
 1001f58:	699b      	ldr	r3, [r3, #24]
 1001f5a:	210a      	movs	r1, #10
 1001f5c:	2001      	movs	r0, #1
 1001f5e:	4798      	blx	r3

	sx_atpl360_hal_wrapper.plc_enable_int(true);
 1001f60:	4b02      	ldr	r3, [pc, #8]	; (1001f6c <atpl360_boot_download_firmware+0x48>)
 1001f62:	695b      	ldr	r3, [r3, #20]
 1001f64:	2001      	movs	r0, #1
 1001f66:	4798      	blx	r3
}
 1001f68:	bf00      	nop
 1001f6a:	bd80      	pop	{r7, pc}
 1001f6c:	200082cc 	.word	0x200082cc
 1001f70:	0100221d 	.word	0x0100221d
 1001f74:	01002129 	.word	0x01002129
 1001f78:	20001ce4 	.word	0x20001ce4
 1001f7c:	20001ce8 	.word	0x20001ce8
 1001f80:	01002051 	.word	0x01002051
 1001f84:	010020d9 	.word	0x010020d9
 1001f88:	01002179 	.word	0x01002179

01001f8c <_check_spi_status>:

/* SPI protection counter */
static uint8_t suc_spi_flag_err;

static void _check_spi_status(atpl360_spi_status_info_t *px_spi_status)
{
 1001f8c:	b580      	push	{r7, lr}
 1001f8e:	b082      	sub	sp, #8
 1001f90:	af00      	add	r7, sp, #0
 1001f92:	6078      	str	r0, [r7, #4]
	/* Check who is in the other side (bootloader / atpl360) */
	if (ATPL360_CHECK_ID_BOOT_HEADER(px_spi_status->us_header_id)) {
 1001f94:	687b      	ldr	r3, [r7, #4]
 1001f96:	889b      	ldrh	r3, [r3, #4]
 1001f98:	461a      	mov	r2, r3
 1001f9a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 1001f9e:	4013      	ands	r3, r2
 1001fa0:	f245 6234 	movw	r2, #22068	; 0x5634
 1001fa4:	4293      	cmp	r3, r2
 1001fa6:	d10e      	bne.n	1001fc6 <_check_spi_status+0x3a>
		if (ATPL360_CHECK_CORTEX_RESET(px_spi_status->ul_flags)) {
 1001fa8:	687b      	ldr	r3, [r7, #4]
 1001faa:	681b      	ldr	r3, [r3, #0]
 1001fac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 1001fb0:	2b00      	cmp	r3, #0
 1001fb2:	d002      	beq.n	1001fba <_check_spi_status+0x2e>
			/* Debug Reset */
			atpl360_boot_without_load();
 1001fb4:	4b22      	ldr	r3, [pc, #136]	; (1002040 <_check_spi_status+0xb4>)
 1001fb6:	4798      	blx	r3
 1001fb8:	e001      	b.n	1001fbe <_check_spi_status+0x32>
		} else {
			atpl360_boot_download_firmware();
 1001fba:	4b22      	ldr	r3, [pc, #136]	; (1002044 <_check_spi_status+0xb8>)
 1001fbc:	4798      	blx	r3
		}

		s_spi_status = ATPL360_SPI_STATUS_FW_VALIDATING;
 1001fbe:	4b22      	ldr	r3, [pc, #136]	; (1002048 <_check_spi_status+0xbc>)
 1001fc0:	2203      	movs	r2, #3
 1001fc2:	701a      	strb	r2, [r3, #0]
	} else {
		/* Unexpected ID value -> Reset HW ATPL360 */
		s_spi_status = ATPL360_SPI_STATUS_UNKNOWN;
	}

	return;
 1001fc4:	e039      	b.n	100203a <_check_spi_status+0xae>
	} else if (ATPL360_CHECK_ID_CORTEX_HEADER(px_spi_status->us_header_id)) {
 1001fc6:	687b      	ldr	r3, [r7, #4]
 1001fc8:	889b      	ldrh	r3, [r3, #4]
 1001fca:	f241 1222 	movw	r2, #4386	; 0x1122
 1001fce:	4293      	cmp	r3, r2
 1001fd0:	d12d      	bne.n	100202e <_check_spi_status+0xa2>
		if (s_spi_status == ATPL360_SPI_STATUS_UNKNOWN || s_spi_status == ATPL360_SPI_STATUS_CORTEX || s_spi_status == ATPL360_SPI_STATUS_FW_VALIDATING) {
 1001fd2:	4b1d      	ldr	r3, [pc, #116]	; (1002048 <_check_spi_status+0xbc>)
 1001fd4:	781b      	ldrb	r3, [r3, #0]
 1001fd6:	2b00      	cmp	r3, #0
 1001fd8:	d007      	beq.n	1001fea <_check_spi_status+0x5e>
 1001fda:	4b1b      	ldr	r3, [pc, #108]	; (1002048 <_check_spi_status+0xbc>)
 1001fdc:	781b      	ldrb	r3, [r3, #0]
 1001fde:	2b02      	cmp	r3, #2
 1001fe0:	d003      	beq.n	1001fea <_check_spi_status+0x5e>
 1001fe2:	4b19      	ldr	r3, [pc, #100]	; (1002048 <_check_spi_status+0xbc>)
 1001fe4:	781b      	ldrb	r3, [r3, #0]
 1001fe6:	2b03      	cmp	r3, #3
 1001fe8:	d11d      	bne.n	1002026 <_check_spi_status+0x9a>
			s_spi_status = ATPL360_SPI_STATUS_CORTEX;
 1001fea:	4b17      	ldr	r3, [pc, #92]	; (1002048 <_check_spi_status+0xbc>)
 1001fec:	2202      	movs	r2, #2
 1001fee:	701a      	strb	r2, [r3, #0]
			if (px_spi_status->ul_flags & 0xFF00) {
 1001ff0:	687b      	ldr	r3, [r7, #4]
 1001ff2:	681b      	ldr	r3, [r3, #0]
 1001ff4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 1001ff8:	2b00      	cmp	r3, #0
 1001ffa:	d010      	beq.n	100201e <_check_spi_status+0x92>
				px_spi_status->ul_flags = 0;
 1001ffc:	687b      	ldr	r3, [r7, #4]
 1001ffe:	2200      	movs	r2, #0
 1002000:	601a      	str	r2, [r3, #0]
				if (++suc_spi_flag_err > 3) {
 1002002:	4b12      	ldr	r3, [pc, #72]	; (100204c <_check_spi_status+0xc0>)
 1002004:	781b      	ldrb	r3, [r3, #0]
 1002006:	3301      	adds	r3, #1
 1002008:	b2da      	uxtb	r2, r3
 100200a:	4b10      	ldr	r3, [pc, #64]	; (100204c <_check_spi_status+0xc0>)
 100200c:	701a      	strb	r2, [r3, #0]
 100200e:	4b0f      	ldr	r3, [pc, #60]	; (100204c <_check_spi_status+0xc0>)
 1002010:	781b      	ldrb	r3, [r3, #0]
 1002012:	2b03      	cmp	r3, #3
 1002014:	d90f      	bls.n	1002036 <_check_spi_status+0xaa>
					s_spi_status = ATPL360_SPI_STATUS_UNKNOWN;
 1002016:	4b0c      	ldr	r3, [pc, #48]	; (1002048 <_check_spi_status+0xbc>)
 1002018:	2200      	movs	r2, #0
 100201a:	701a      	strb	r2, [r3, #0]
			if (px_spi_status->ul_flags & 0xFF00) {
 100201c:	e00b      	b.n	1002036 <_check_spi_status+0xaa>
				suc_spi_flag_err = 0;
 100201e:	4b0b      	ldr	r3, [pc, #44]	; (100204c <_check_spi_status+0xc0>)
 1002020:	2200      	movs	r2, #0
 1002022:	701a      	strb	r2, [r3, #0]
			if (px_spi_status->ul_flags & 0xFF00) {
 1002024:	e007      	b.n	1002036 <_check_spi_status+0xaa>
			s_spi_status = ATPL360_SPI_STATUS_UNKNOWN;
 1002026:	4b08      	ldr	r3, [pc, #32]	; (1002048 <_check_spi_status+0xbc>)
 1002028:	2200      	movs	r2, #0
 100202a:	701a      	strb	r2, [r3, #0]
	return;
 100202c:	e005      	b.n	100203a <_check_spi_status+0xae>
		s_spi_status = ATPL360_SPI_STATUS_UNKNOWN;
 100202e:	4b06      	ldr	r3, [pc, #24]	; (1002048 <_check_spi_status+0xbc>)
 1002030:	2200      	movs	r2, #0
 1002032:	701a      	strb	r2, [r3, #0]
	return;
 1002034:	e000      	b.n	1002038 <_check_spi_status+0xac>
			if (px_spi_status->ul_flags & 0xFF00) {
 1002036:	bf00      	nop
	return;
 1002038:	bf00      	nop
}
 100203a:	3708      	adds	r7, #8
 100203c:	46bd      	mov	sp, r7
 100203e:	bd80      	pop	{r7, pc}
 1002040:	01001edd 	.word	0x01001edd
 1002044:	01001f25 	.word	0x01001f25
 1002048:	20001cec 	.word	0x20001cec
 100204c:	20001cf8 	.word	0x20001cf8

01002050 <atpl360_spi_update_fw>:
 */
#ifdef ATPL360_ENABLE_SPI_DEBUG_MODE
uint8_t puc_bin[512];
#endif
void atpl360_spi_update_fw(uint32_t ul_fw_addr, uint32_t ul_fw_size)
{
 1002050:	b590      	push	{r4, r7, lr}
 1002052:	b089      	sub	sp, #36	; 0x24
 1002054:	af02      	add	r7, sp, #8
 1002056:	6078      	str	r0, [r7, #4]
 1002058:	6039      	str	r1, [r7, #0]
	uint32_t ul_fw_prog_addr;
	uint32_t ul_fw_pending_len;
	uint16_t us_fw_fragment_len;
	uint8_t uc_padding;

	ul_fw_pending_len = ul_fw_size;
 100205a:	683b      	ldr	r3, [r7, #0]
 100205c:	60fb      	str	r3, [r7, #12]
	puc_fw_data = (uint8_t *)ul_fw_addr;
 100205e:	687b      	ldr	r3, [r7, #4]
 1002060:	617b      	str	r3, [r7, #20]
	ul_fw_prog_addr = ATPL360_BOOT_PROGRAM_ADDR;
 1002062:	2300      	movs	r3, #0
 1002064:	613b      	str	r3, [r7, #16]
	uc_padding = 0;
 1002066:	2300      	movs	r3, #0
 1002068:	727b      	strb	r3, [r7, #9]
	while (ul_fw_pending_len) {
 100206a:	e02b      	b.n	10020c4 <atpl360_spi_update_fw+0x74>
		if (ul_fw_pending_len > PDC_SPI_FUP_BUFFER_SIZE) {
 100206c:	68fb      	ldr	r3, [r7, #12]
 100206e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 1002072:	d903      	bls.n	100207c <atpl360_spi_update_fw+0x2c>
			us_fw_fragment_len = PDC_SPI_FUP_BUFFER_SIZE;
 1002074:	f44f 7300 	mov.w	r3, #512	; 0x200
 1002078:	817b      	strh	r3, [r7, #10]
 100207a:	e00b      	b.n	1002094 <atpl360_spi_update_fw+0x44>
		} else {
			us_fw_fragment_len = ul_fw_pending_len;
 100207c:	68fb      	ldr	r3, [r7, #12]
 100207e:	817b      	strh	r3, [r7, #10]
			uc_padding = us_fw_fragment_len % 4;
 1002080:	897b      	ldrh	r3, [r7, #10]
 1002082:	b2db      	uxtb	r3, r3
 1002084:	f003 0303 	and.w	r3, r3, #3
 1002088:	727b      	strb	r3, [r7, #9]
			us_fw_fragment_len += uc_padding;
 100208a:	7a7b      	ldrb	r3, [r7, #9]
 100208c:	b29a      	uxth	r2, r3
 100208e:	897b      	ldrh	r3, [r7, #10]
 1002090:	4413      	add	r3, r2
 1002092:	817b      	strh	r3, [r7, #10]
		}

		/* Write fw block data */
		sx_atpl360_hal_wrapper.plc_send_boot_cmd(ATPL360_BOOT_CMD_WRITE_BUF, ul_fw_prog_addr, us_fw_fragment_len, puc_fw_data, NULL);
 1002094:	4b0f      	ldr	r3, [pc, #60]	; (10020d4 <atpl360_spi_update_fw+0x84>)
 1002096:	68dc      	ldr	r4, [r3, #12]
 1002098:	897a      	ldrh	r2, [r7, #10]
 100209a:	2300      	movs	r3, #0
 100209c:	9300      	str	r3, [sp, #0]
 100209e:	697b      	ldr	r3, [r7, #20]
 10020a0:	6939      	ldr	r1, [r7, #16]
 10020a2:	2001      	movs	r0, #1
 10020a4:	47a0      	blx	r4

		/* Update counters */
		ul_fw_pending_len -= (us_fw_fragment_len - uc_padding);
 10020a6:	897a      	ldrh	r2, [r7, #10]
 10020a8:	7a7b      	ldrb	r3, [r7, #9]
 10020aa:	1ad3      	subs	r3, r2, r3
 10020ac:	461a      	mov	r2, r3
 10020ae:	68fb      	ldr	r3, [r7, #12]
 10020b0:	1a9b      	subs	r3, r3, r2
 10020b2:	60fb      	str	r3, [r7, #12]
		puc_fw_data += us_fw_fragment_len;
 10020b4:	897b      	ldrh	r3, [r7, #10]
 10020b6:	697a      	ldr	r2, [r7, #20]
 10020b8:	4413      	add	r3, r2
 10020ba:	617b      	str	r3, [r7, #20]
		ul_fw_prog_addr += us_fw_fragment_len;
 10020bc:	897b      	ldrh	r3, [r7, #10]
 10020be:	693a      	ldr	r2, [r7, #16]
 10020c0:	4413      	add	r3, r2
 10020c2:	613b      	str	r3, [r7, #16]
	while (ul_fw_pending_len) {
 10020c4:	68fb      	ldr	r3, [r7, #12]
 10020c6:	2b00      	cmp	r3, #0
 10020c8:	d1d0      	bne.n	100206c <atpl360_spi_update_fw+0x1c>
	puc_fw_data = (uint8_t *)ul_fw_addr;
	ul_fw_prog_addr = ATPL360_BOOT_PROGRAM_ADDR;
	/* Read fw block data */
	sx_atpl360_hal_wrapper.plc_send_boot_cmd(ATPL360_BOOT_CMD_READ_BUF, ul_fw_prog_addr, us_fw_fragment_len, puc_fw_data, puc_bin_data);
#endif
}
 10020ca:	bf00      	nop
 10020cc:	371c      	adds	r7, #28
 10020ce:	46bd      	mov	sp, r7
 10020d0:	bd90      	pop	{r4, r7, pc}
 10020d2:	bf00      	nop
 10020d4:	200082cc 	.word	0x200082cc

010020d8 <atpl360_spi_boot_disable_cpuwait>:
/**
 * \brief Write CPUWAIT = 0
 *
 */
void atpl360_spi_boot_disable_cpuwait(void)
{
 10020d8:	b590      	push	{r4, r7, lr}
 10020da:	b085      	sub	sp, #20
 10020dc:	af02      	add	r7, sp, #8
	uint32_t ul_reg_value;
	uint8_t puc_value[4];

	ul_reg_value = ATPL360_MISCR_PPM_CALIB_OFF | ATPL360_MISCR_MEM_96_96_CFG | ATPL360_MISCR_EN_ACCESS_ERROR | ATPL360_MISCR_SET_GPIO_12_ZC;
 10020de:	4b0f      	ldr	r3, [pc, #60]	; (100211c <atpl360_spi_boot_disable_cpuwait+0x44>)
 10020e0:	607b      	str	r3, [r7, #4]
	puc_value[3] = (uint8_t)(ul_reg_value >> 24);
 10020e2:	687b      	ldr	r3, [r7, #4]
 10020e4:	0e1b      	lsrs	r3, r3, #24
 10020e6:	b2db      	uxtb	r3, r3
 10020e8:	70fb      	strb	r3, [r7, #3]
	puc_value[2] = (uint8_t)(ul_reg_value >> 16);
 10020ea:	687b      	ldr	r3, [r7, #4]
 10020ec:	0c1b      	lsrs	r3, r3, #16
 10020ee:	b2db      	uxtb	r3, r3
 10020f0:	70bb      	strb	r3, [r7, #2]
	puc_value[1] = (uint8_t)(ul_reg_value >> 8);
 10020f2:	687b      	ldr	r3, [r7, #4]
 10020f4:	0a1b      	lsrs	r3, r3, #8
 10020f6:	b2db      	uxtb	r3, r3
 10020f8:	707b      	strb	r3, [r7, #1]
	puc_value[0] = (uint8_t)(ul_reg_value);
 10020fa:	687b      	ldr	r3, [r7, #4]
 10020fc:	b2db      	uxtb	r3, r3
 10020fe:	703b      	strb	r3, [r7, #0]
	sx_atpl360_hal_wrapper.plc_send_boot_cmd(ATPL360_BOOT_CMD_WRITE_WORD, ATPL360_MISCR, sizeof(puc_value), puc_value, NULL);
 1002100:	4b07      	ldr	r3, [pc, #28]	; (1002120 <atpl360_spi_boot_disable_cpuwait+0x48>)
 1002102:	68dc      	ldr	r4, [r3, #12]
 1002104:	463a      	mov	r2, r7
 1002106:	2300      	movs	r3, #0
 1002108:	9300      	str	r3, [sp, #0]
 100210a:	4613      	mov	r3, r2
 100210c:	2204      	movs	r2, #4
 100210e:	4905      	ldr	r1, [pc, #20]	; (1002124 <atpl360_spi_boot_disable_cpuwait+0x4c>)
 1002110:	2000      	movs	r0, #0
 1002112:	47a0      	blx	r4
}
 1002114:	bf00      	nop
 1002116:	370c      	adds	r7, #12
 1002118:	46bd      	mov	sp, r7
 100211a:	bd90      	pop	{r4, r7, pc}
 100211c:	01010000 	.word	0x01010000
 1002120:	200082cc 	.word	0x200082cc
 1002124:	400e1800 	.word	0x400e1800

01002128 <atpl360_spi_boot_config_sys>:
/**
 * \brief Config system
 *
 */
void atpl360_spi_boot_config_sys(void)
{
 1002128:	b590      	push	{r4, r7, lr}
 100212a:	b085      	sub	sp, #20
 100212c:	af02      	add	r7, sp, #8
	uint32_t ul_reg_value;
	uint8_t puc_value[4];

	/* Send CPU Wait Cmd */
	ul_reg_value = ATPL360_MISCR_CPUWAIT | ATPL360_MISCR_PPM_CALIB_OFF | ATPL360_MISCR_MEM_96_96_CFG |
 100212e:	4b0f      	ldr	r3, [pc, #60]	; (100216c <atpl360_spi_boot_config_sys+0x44>)
 1002130:	607b      	str	r3, [r7, #4]
			ATPL360_MISCR_EN_ACCESS_ERROR | ATPL360_MISCR_SET_GPIO_12_ZC;
	puc_value[3] = (uint8_t)(ul_reg_value >> 24);
 1002132:	687b      	ldr	r3, [r7, #4]
 1002134:	0e1b      	lsrs	r3, r3, #24
 1002136:	b2db      	uxtb	r3, r3
 1002138:	70fb      	strb	r3, [r7, #3]
	puc_value[2] = (uint8_t)(ul_reg_value >> 16);
 100213a:	687b      	ldr	r3, [r7, #4]
 100213c:	0c1b      	lsrs	r3, r3, #16
 100213e:	b2db      	uxtb	r3, r3
 1002140:	70bb      	strb	r3, [r7, #2]
	puc_value[1] = (uint8_t)(ul_reg_value >> 8);
 1002142:	687b      	ldr	r3, [r7, #4]
 1002144:	0a1b      	lsrs	r3, r3, #8
 1002146:	b2db      	uxtb	r3, r3
 1002148:	707b      	strb	r3, [r7, #1]
	puc_value[0] = (uint8_t)(ul_reg_value);
 100214a:	687b      	ldr	r3, [r7, #4]
 100214c:	b2db      	uxtb	r3, r3
 100214e:	703b      	strb	r3, [r7, #0]
	sx_atpl360_hal_wrapper.plc_send_boot_cmd(ATPL360_BOOT_CMD_WRITE_WORD, ATPL360_MISCR, sizeof(puc_value), puc_value, NULL);
 1002150:	4b07      	ldr	r3, [pc, #28]	; (1002170 <atpl360_spi_boot_config_sys+0x48>)
 1002152:	68dc      	ldr	r4, [r3, #12]
 1002154:	463a      	mov	r2, r7
 1002156:	2300      	movs	r3, #0
 1002158:	9300      	str	r3, [sp, #0]
 100215a:	4613      	mov	r3, r2
 100215c:	2204      	movs	r2, #4
 100215e:	4905      	ldr	r1, [pc, #20]	; (1002174 <atpl360_spi_boot_config_sys+0x4c>)
 1002160:	2000      	movs	r0, #0
 1002162:	47a0      	blx	r4
#ifdef ATPL360_ENABLE_SPI_DEBUG_MODE
	memset(puc_value, 0, 4);
	sx_atpl360_hal_wrapper.plc_send_boot_cmd(ATPL360_BOOT_CMD_READ_WORD, ATPL360_MISCR, sizeof(puc_value), puc_value, puc_value);
	ul_reg_value = *(uint32_t *)puc_value;
#endif
}
 1002164:	bf00      	nop
 1002166:	370c      	adds	r7, #12
 1002168:	46bd      	mov	sp, r7
 100216a:	bd90      	pop	{r4, r7, pc}
 100216c:	01010001 	.word	0x01010001
 1002170:	200082cc 	.word	0x200082cc
 1002174:	400e1800 	.word	0x400e1800

01002178 <atpl360_spi_clk_boot_disable>:
/**
 * \brief Disable ATPL360 bootloader (SPI, CLK)
 *
 */
void atpl360_spi_clk_boot_disable(void)
{
 1002178:	b590      	push	{r4, r7, lr}
 100217a:	b083      	sub	sp, #12
 100217c:	af02      	add	r7, sp, #8
	sx_atpl360_hal_wrapper.plc_send_boot_cmd(ATPL360_BOOT_CMD_DIS_SPI_CLK_CTRL, 0, 0, NULL, NULL);
 100217e:	4b07      	ldr	r3, [pc, #28]	; (100219c <atpl360_spi_clk_boot_disable+0x24>)
 1002180:	68dc      	ldr	r4, [r3, #12]
 1002182:	2300      	movs	r3, #0
 1002184:	9300      	str	r3, [sp, #0]
 1002186:	2300      	movs	r3, #0
 1002188:	2200      	movs	r2, #0
 100218a:	2100      	movs	r1, #0
 100218c:	f24a 606a 	movw	r0, #42602	; 0xa66a
 1002190:	47a0      	blx	r4
}
 1002192:	bf00      	nop
 1002194:	3704      	adds	r7, #4
 1002196:	46bd      	mov	sp, r7
 1002198:	bd90      	pop	{r4, r7, pc}
 100219a:	bf00      	nop
 100219c:	200082cc 	.word	0x200082cc

010021a0 <atpl360_spi_write_buf>:
 *
 * \param px_data                         Pointer to SPI tx data info
 *
 */
void atpl360_spi_write_buf(atpl360_spi_data_t *px_data)
{
 10021a0:	b580      	push	{r7, lr}
 10021a2:	b082      	sub	sp, #8
 10021a4:	af00      	add	r7, sp, #0
 10021a6:	6078      	str	r0, [r7, #4]
	sx_atpl360_hal_wrapper.plc_write_read_cmd(ATPL360_CMD_WRITE, (void *)px_data, (void *)&spx_status_info);
 10021a8:	4b06      	ldr	r3, [pc, #24]	; (10021c4 <atpl360_spi_write_buf+0x24>)
 10021aa:	691b      	ldr	r3, [r3, #16]
 10021ac:	4a06      	ldr	r2, [pc, #24]	; (10021c8 <atpl360_spi_write_buf+0x28>)
 10021ae:	6879      	ldr	r1, [r7, #4]
 10021b0:	2001      	movs	r0, #1
 10021b2:	4798      	blx	r3
	_check_spi_status((atpl360_spi_status_info_t *)&spx_status_info);
 10021b4:	4804      	ldr	r0, [pc, #16]	; (10021c8 <atpl360_spi_write_buf+0x28>)
 10021b6:	4b05      	ldr	r3, [pc, #20]	; (10021cc <atpl360_spi_write_buf+0x2c>)
 10021b8:	4798      	blx	r3
}
 10021ba:	bf00      	nop
 10021bc:	3708      	adds	r7, #8
 10021be:	46bd      	mov	sp, r7
 10021c0:	bd80      	pop	{r7, pc}
 10021c2:	bf00      	nop
 10021c4:	200082cc 	.word	0x200082cc
 10021c8:	20001cf0 	.word	0x20001cf0
 10021cc:	01001f8d 	.word	0x01001f8d

010021d0 <atpl360_spi_read_buf>:
 *
 * \param px_data          Pointer to SPI rx data info
 * \return  true if there is no error, otherwise returns false.
 */
bool atpl360_spi_read_buf(atpl360_spi_data_t *px_data)
{
 10021d0:	b580      	push	{r7, lr}
 10021d2:	b084      	sub	sp, #16
 10021d4:	af00      	add	r7, sp, #0
 10021d6:	6078      	str	r0, [r7, #4]
	bool b_res;

	b_res = sx_atpl360_hal_wrapper.plc_write_read_cmd(ATPL360_CMD_READ, (void *)px_data, (void *)&spx_status_info);
 10021d8:	4b07      	ldr	r3, [pc, #28]	; (10021f8 <atpl360_spi_read_buf+0x28>)
 10021da:	691b      	ldr	r3, [r3, #16]
 10021dc:	4a07      	ldr	r2, [pc, #28]	; (10021fc <atpl360_spi_read_buf+0x2c>)
 10021de:	6879      	ldr	r1, [r7, #4]
 10021e0:	2000      	movs	r0, #0
 10021e2:	4798      	blx	r3
 10021e4:	4603      	mov	r3, r0
 10021e6:	73fb      	strb	r3, [r7, #15]
	_check_spi_status((atpl360_spi_status_info_t *)&spx_status_info);
 10021e8:	4804      	ldr	r0, [pc, #16]	; (10021fc <atpl360_spi_read_buf+0x2c>)
 10021ea:	4b05      	ldr	r3, [pc, #20]	; (1002200 <atpl360_spi_read_buf+0x30>)
 10021ec:	4798      	blx	r3

	return b_res;
 10021ee:	7bfb      	ldrb	r3, [r7, #15]
}
 10021f0:	4618      	mov	r0, r3
 10021f2:	3710      	adds	r7, #16
 10021f4:	46bd      	mov	sp, r7
 10021f6:	bd80      	pop	{r7, pc}
 10021f8:	200082cc 	.word	0x200082cc
 10021fc:	20001cf0 	.word	0x20001cf0
 1002200:	01001f8d 	.word	0x01001f8d

01002204 <atpl360_spi_initialize>:
/**
 * \brief Initialize ATPL360 communication interface
 *
 */
void atpl360_spi_initialize(void)
{
 1002204:	b480      	push	{r7}
 1002206:	af00      	add	r7, sp, #0
	/* Status Initialization */
	s_spi_status = ATPL360_SPI_STATUS_UNKNOWN;
 1002208:	4b03      	ldr	r3, [pc, #12]	; (1002218 <atpl360_spi_initialize+0x14>)
 100220a:	2200      	movs	r2, #0
 100220c:	701a      	strb	r2, [r3, #0]
}
 100220e:	bf00      	nop
 1002210:	46bd      	mov	sp, r7
 1002212:	bc80      	pop	{r7}
 1002214:	4770      	bx	lr
 1002216:	bf00      	nop
 1002218:	20001cec 	.word	0x20001cec

0100221c <atpl360_spi_boot_write_cmd_enable>:
/**
 * \brief Enable Write operation in bootloader
 *
 */
void atpl360_spi_boot_write_cmd_enable(void)
{
 100221c:	b590      	push	{r4, r7, lr}
 100221e:	b085      	sub	sp, #20
 1002220:	af02      	add	r7, sp, #8
	uint8_t auc_value[4];

	auc_value[3] = (uint8_t)(ATPL360_BOOT_WRITE_KEY >> 24);
 1002222:	2353      	movs	r3, #83	; 0x53
 1002224:	71fb      	strb	r3, [r7, #7]
	auc_value[2] = (uint8_t)(ATPL360_BOOT_WRITE_KEY >> 16);
 1002226:	2345      	movs	r3, #69	; 0x45
 1002228:	71bb      	strb	r3, [r7, #6]
	auc_value[1] = (uint8_t)(ATPL360_BOOT_WRITE_KEY >> 8);
 100222a:	23ac      	movs	r3, #172	; 0xac
 100222c:	717b      	strb	r3, [r7, #5]
	auc_value[0] = (uint8_t)(ATPL360_BOOT_WRITE_KEY);
 100222e:	23ba      	movs	r3, #186	; 0xba
 1002230:	713b      	strb	r3, [r7, #4]
	sx_atpl360_hal_wrapper.plc_send_boot_cmd(ATPL360_BOOT_CMD_ENABLE_WRITE, 0, sizeof(auc_value), auc_value, NULL);
 1002232:	4b11      	ldr	r3, [pc, #68]	; (1002278 <atpl360_spi_boot_write_cmd_enable+0x5c>)
 1002234:	68dc      	ldr	r4, [r3, #12]
 1002236:	1d3a      	adds	r2, r7, #4
 1002238:	2300      	movs	r3, #0
 100223a:	9300      	str	r3, [sp, #0]
 100223c:	4613      	mov	r3, r2
 100223e:	2204      	movs	r2, #4
 1002240:	2100      	movs	r1, #0
 1002242:	f64d 6005 	movw	r0, #56837	; 0xde05
 1002246:	47a0      	blx	r4

	auc_value[3] = (uint8_t)(ATPL360_BOOT_WRITE_KEY >> 8);
 1002248:	23ac      	movs	r3, #172	; 0xac
 100224a:	71fb      	strb	r3, [r7, #7]
	auc_value[2] = (uint8_t)(ATPL360_BOOT_WRITE_KEY);
 100224c:	23ba      	movs	r3, #186	; 0xba
 100224e:	71bb      	strb	r3, [r7, #6]
	auc_value[1] = (uint8_t)(ATPL360_BOOT_WRITE_KEY >> 24);
 1002250:	2353      	movs	r3, #83	; 0x53
 1002252:	717b      	strb	r3, [r7, #5]
	auc_value[0] = (uint8_t)(ATPL360_BOOT_WRITE_KEY >> 16);
 1002254:	2345      	movs	r3, #69	; 0x45
 1002256:	713b      	strb	r3, [r7, #4]
	sx_atpl360_hal_wrapper.plc_send_boot_cmd(ATPL360_BOOT_CMD_ENABLE_WRITE, 0, sizeof(auc_value), auc_value, NULL);
 1002258:	4b07      	ldr	r3, [pc, #28]	; (1002278 <atpl360_spi_boot_write_cmd_enable+0x5c>)
 100225a:	68dc      	ldr	r4, [r3, #12]
 100225c:	1d3a      	adds	r2, r7, #4
 100225e:	2300      	movs	r3, #0
 1002260:	9300      	str	r3, [sp, #0]
 1002262:	4613      	mov	r3, r2
 1002264:	2204      	movs	r2, #4
 1002266:	2100      	movs	r1, #0
 1002268:	f64d 6005 	movw	r0, #56837	; 0xde05
 100226c:	47a0      	blx	r4
}
 100226e:	bf00      	nop
 1002270:	370c      	adds	r7, #12
 1002272:	46bd      	mov	sp, r7
 1002274:	bd90      	pop	{r4, r7, pc}
 1002276:	bf00      	nop
 1002278:	200082cc 	.word	0x200082cc

0100227c <atpl360_spi_get_status>:
	/* Send decryption signature */
	sx_atpl360_hal_wrapper.plc_send_boot_cmd(ATPL360_BOOT_SET_DEC_SIGN, 0, 16, puc_signature, NULL);
}

atpl360_spi_status_t atpl360_spi_get_status(void)
{
 100227c:	b480      	push	{r7}
 100227e:	af00      	add	r7, sp, #0
	return s_spi_status;
 1002280:	4b02      	ldr	r3, [pc, #8]	; (100228c <atpl360_spi_get_status+0x10>)
 1002282:	781b      	ldrb	r3, [r3, #0]
}
 1002284:	4618      	mov	r0, r3
 1002286:	46bd      	mov	sp, r7
 1002288:	bc80      	pop	{r7}
 100228a:	4770      	bx	lr
 100228c:	20001cec 	.word	0x20001cec

01002290 <atpl360_spi_get_status_info>:

void atpl360_spi_get_status_info(atpl360_spi_status_info_t *px_status_info)
{
 1002290:	b580      	push	{r7, lr}
 1002292:	b082      	sub	sp, #8
 1002294:	af00      	add	r7, sp, #0
 1002296:	6078      	str	r0, [r7, #4]
	memcpy(px_status_info, (void const *)&spx_status_info, sizeof(atpl360_spi_status_info_t));
 1002298:	2208      	movs	r2, #8
 100229a:	4904      	ldr	r1, [pc, #16]	; (10022ac <atpl360_spi_get_status_info+0x1c>)
 100229c:	6878      	ldr	r0, [r7, #4]
 100229e:	4b04      	ldr	r3, [pc, #16]	; (10022b0 <atpl360_spi_get_status_info+0x20>)
 10022a0:	4798      	blx	r3
}
 10022a2:	bf00      	nop
 10022a4:	3708      	adds	r7, #8
 10022a6:	46bd      	mov	sp, r7
 10022a8:	bd80      	pop	{r7, pc}
 10022aa:	bf00      	nop
 10022ac:	20001cf0 	.word	0x20001cf0
 10022b0:	0100c551 	.word	0x0100c551

010022b4 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
 10022b4:	b580      	push	{r7, lr}
 10022b6:	b082      	sub	sp, #8
 10022b8:	af00      	add	r7, sp, #0
 10022ba:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
 10022bc:	687b      	ldr	r3, [r7, #4]
 10022be:	2b07      	cmp	r3, #7
 10022c0:	d831      	bhi.n	1002326 <osc_enable+0x72>
 10022c2:	a201      	add	r2, pc, #4	; (adr r2, 10022c8 <osc_enable+0x14>)
 10022c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 10022c8:	01002325 	.word	0x01002325
 10022cc:	010022e9 	.word	0x010022e9
 10022d0:	010022f1 	.word	0x010022f1
 10022d4:	010022f9 	.word	0x010022f9
 10022d8:	01002301 	.word	0x01002301
 10022dc:	01002309 	.word	0x01002309
 10022e0:	01002311 	.word	0x01002311
 10022e4:	0100231b 	.word	0x0100231b
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
 10022e8:	2000      	movs	r0, #0
 10022ea:	4b11      	ldr	r3, [pc, #68]	; (1002330 <osc_enable+0x7c>)
 10022ec:	4798      	blx	r3
		break;
 10022ee:	e01a      	b.n	1002326 <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
 10022f0:	2001      	movs	r0, #1
 10022f2:	4b0f      	ldr	r3, [pc, #60]	; (1002330 <osc_enable+0x7c>)
 10022f4:	4798      	blx	r3
		break;
 10022f6:	e016      	b.n	1002326 <osc_enable+0x72>


	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
 10022f8:	2000      	movs	r0, #0
 10022fa:	4b0e      	ldr	r3, [pc, #56]	; (1002334 <osc_enable+0x80>)
 10022fc:	4798      	blx	r3
		break;
 10022fe:	e012      	b.n	1002326 <osc_enable+0x72>

	case OSC_MAINCK_16M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_16_MHz);
 1002300:	2010      	movs	r0, #16
 1002302:	4b0c      	ldr	r3, [pc, #48]	; (1002334 <osc_enable+0x80>)
 1002304:	4798      	blx	r3
		break;
 1002306:	e00e      	b.n	1002326 <osc_enable+0x72>

	case OSC_MAINCK_24M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_24_MHz);
 1002308:	2020      	movs	r0, #32
 100230a:	4b0a      	ldr	r3, [pc, #40]	; (1002334 <osc_enable+0x80>)
 100230c:	4798      	blx	r3
		break;
 100230e:	e00a      	b.n	1002326 <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
 1002310:	213e      	movs	r1, #62	; 0x3e
 1002312:	2000      	movs	r0, #0
 1002314:	4b08      	ldr	r3, [pc, #32]	; (1002338 <osc_enable+0x84>)
 1002316:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
 1002318:	e005      	b.n	1002326 <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
 100231a:	213e      	movs	r1, #62	; 0x3e
 100231c:	2001      	movs	r0, #1
 100231e:	4b06      	ldr	r3, [pc, #24]	; (1002338 <osc_enable+0x84>)
 1002320:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
 1002322:	e000      	b.n	1002326 <osc_enable+0x72>
		break;
 1002324:	bf00      	nop
	}
}
 1002326:	bf00      	nop
 1002328:	3708      	adds	r7, #8
 100232a:	46bd      	mov	sp, r7
 100232c:	bd80      	pop	{r7, pc}
 100232e:	bf00      	nop
 1002330:	01004849 	.word	0x01004849
 1002334:	010048b5 	.word	0x010048b5
 1002338:	01004925 	.word	0x01004925

0100233c <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
 100233c:	b580      	push	{r7, lr}
 100233e:	b082      	sub	sp, #8
 1002340:	af00      	add	r7, sp, #0
 1002342:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
 1002344:	687b      	ldr	r3, [r7, #4]
 1002346:	2b07      	cmp	r3, #7
 1002348:	d826      	bhi.n	1002398 <osc_is_ready+0x5c>
 100234a:	a201      	add	r2, pc, #4	; (adr r2, 1002350 <osc_is_ready+0x14>)
 100234c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 1002350:	01002371 	.word	0x01002371
 1002354:	01002375 	.word	0x01002375
 1002358:	01002375 	.word	0x01002375
 100235c:	01002387 	.word	0x01002387
 1002360:	01002387 	.word	0x01002387
 1002364:	01002387 	.word	0x01002387
 1002368:	01002387 	.word	0x01002387
 100236c:	01002387 	.word	0x01002387
	case OSC_SLCK_32K_RC:
		return 1;
 1002370:	2301      	movs	r3, #1
 1002372:	e012      	b.n	100239a <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
 1002374:	4b0b      	ldr	r3, [pc, #44]	; (10023a4 <osc_is_ready+0x68>)
 1002376:	4798      	blx	r3
 1002378:	4603      	mov	r3, r0
 100237a:	2b00      	cmp	r3, #0
 100237c:	bf14      	ite	ne
 100237e:	2301      	movne	r3, #1
 1002380:	2300      	moveq	r3, #0
 1002382:	b2db      	uxtb	r3, r3
 1002384:	e009      	b.n	100239a <osc_is_ready+0x5e>
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_16M_RC:
	case OSC_MAINCK_24M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
 1002386:	4b08      	ldr	r3, [pc, #32]	; (10023a8 <osc_is_ready+0x6c>)
 1002388:	4798      	blx	r3
 100238a:	4603      	mov	r3, r0
 100238c:	2b00      	cmp	r3, #0
 100238e:	bf14      	ite	ne
 1002390:	2301      	movne	r3, #1
 1002392:	2300      	moveq	r3, #0
 1002394:	b2db      	uxtb	r3, r3
 1002396:	e000      	b.n	100239a <osc_is_ready+0x5e>
	}

	return 0;
 1002398:	2300      	movs	r3, #0
}
 100239a:	4618      	mov	r0, r3
 100239c:	3708      	adds	r7, #8
 100239e:	46bd      	mov	sp, r7
 10023a0:	bd80      	pop	{r7, pc}
 10023a2:	bf00      	nop
 10023a4:	01004881 	.word	0x01004881
 10023a8:	0100499d 	.word	0x0100499d

010023ac <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
 10023ac:	b480      	push	{r7}
 10023ae:	b083      	sub	sp, #12
 10023b0:	af00      	add	r7, sp, #0
 10023b2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
 10023b4:	687b      	ldr	r3, [r7, #4]
 10023b6:	2b07      	cmp	r3, #7
 10023b8:	d825      	bhi.n	1002406 <osc_get_rate+0x5a>
 10023ba:	a201      	add	r2, pc, #4	; (adr r2, 10023c0 <osc_get_rate+0x14>)
 10023bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 10023c0:	010023e1 	.word	0x010023e1
 10023c4:	010023e7 	.word	0x010023e7
 10023c8:	010023ed 	.word	0x010023ed
 10023cc:	010023f3 	.word	0x010023f3
 10023d0:	010023f7 	.word	0x010023f7
 10023d4:	010023fb 	.word	0x010023fb
 10023d8:	010023ff 	.word	0x010023ff
 10023dc:	01002403 	.word	0x01002403
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
 10023e0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 10023e4:	e010      	b.n	1002408 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
 10023e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 10023ea:	e00d      	b.n	1002408 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
 10023ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 10023f0:	e00a      	b.n	1002408 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
 10023f2:	4b08      	ldr	r3, [pc, #32]	; (1002414 <osc_get_rate+0x68>)
 10023f4:	e008      	b.n	1002408 <osc_get_rate+0x5c>

	case OSC_MAINCK_16M_RC:
		return OSC_MAINCK_16M_RC_HZ;
 10023f6:	4b08      	ldr	r3, [pc, #32]	; (1002418 <osc_get_rate+0x6c>)
 10023f8:	e006      	b.n	1002408 <osc_get_rate+0x5c>

	case OSC_MAINCK_24M_RC:
		return OSC_MAINCK_24M_RC_HZ;
 10023fa:	4b08      	ldr	r3, [pc, #32]	; (100241c <osc_get_rate+0x70>)
 10023fc:	e004      	b.n	1002408 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
 10023fe:	2300      	movs	r3, #0
 1002400:	e002      	b.n	1002408 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
 1002402:	2300      	movs	r3, #0
 1002404:	e000      	b.n	1002408 <osc_get_rate+0x5c>
#endif
	}

	return 0;
 1002406:	2300      	movs	r3, #0
}
 1002408:	4618      	mov	r0, r3
 100240a:	370c      	adds	r7, #12
 100240c:	46bd      	mov	sp, r7
 100240e:	bc80      	pop	{r7}
 1002410:	4770      	bx	lr
 1002412:	bf00      	nop
 1002414:	007a1200 	.word	0x007a1200
 1002418:	00f42400 	.word	0x00f42400
 100241c:	016e3600 	.word	0x016e3600

01002420 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
 1002420:	b580      	push	{r7, lr}
 1002422:	b082      	sub	sp, #8
 1002424:	af00      	add	r7, sp, #0
 1002426:	4603      	mov	r3, r0
 1002428:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
 100242a:	bf00      	nop
 100242c:	79fb      	ldrb	r3, [r7, #7]
 100242e:	4618      	mov	r0, r3
 1002430:	4b05      	ldr	r3, [pc, #20]	; (1002448 <osc_wait_ready+0x28>)
 1002432:	4798      	blx	r3
 1002434:	4603      	mov	r3, r0
 1002436:	f083 0301 	eor.w	r3, r3, #1
 100243a:	b2db      	uxtb	r3, r3
 100243c:	2b00      	cmp	r3, #0
 100243e:	d1f5      	bne.n	100242c <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
 1002440:	bf00      	nop
 1002442:	3708      	adds	r7, #8
 1002444:	46bd      	mov	sp, r7
 1002446:	bd80      	pop	{r7, pc}
 1002448:	0100233d 	.word	0x0100233d

0100244c <pll_config_init>:
 * \note The SAMG PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
 100244c:	b580      	push	{r7, lr}
 100244e:	b086      	sub	sp, #24
 1002450:	af00      	add	r7, sp, #0
 1002452:	60f8      	str	r0, [r7, #12]
 1002454:	607a      	str	r2, [r7, #4]
 1002456:	603b      	str	r3, [r7, #0]
 1002458:	460b      	mov	r3, r1
 100245a:	72fb      	strb	r3, [r7, #11]

	Assert(e_src < PLL_NR_SOURCES);
	Assert(ul_div < 2);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
 100245c:	7afb      	ldrb	r3, [r7, #11]
 100245e:	4618      	mov	r0, r3
 1002460:	4b0d      	ldr	r3, [pc, #52]	; (1002498 <pll_config_init+0x4c>)
 1002462:	4798      	blx	r3
 1002464:	4602      	mov	r2, r0
 1002466:	687b      	ldr	r3, [r7, #4]
 1002468:	fbb2 f3f3 	udiv	r3, r2, r3
 100246c:	617b      	str	r3, [r7, #20]

	vco_hz *= ul_mul;
 100246e:	697b      	ldr	r3, [r7, #20]
 1002470:	683a      	ldr	r2, [r7, #0]
 1002472:	fb02 f303 	mul.w	r3, r2, r3
 1002476:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= (PLL_OUTPUT_MIN_HZ - (PLL_OUTPUT_MIN_HZ >> 6)));
	Assert(vco_hz <= (PLL_OUTPUT_MAX_HZ + (PLL_OUTPUT_MAX_HZ >> 6)));

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_PLLAEN(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
 1002478:	683b      	ldr	r3, [r7, #0]
 100247a:	3b01      	subs	r3, #1
 100247c:	041a      	lsls	r2, r3, #16
 100247e:	4b07      	ldr	r3, [pc, #28]	; (100249c <pll_config_init+0x50>)
 1002480:	4013      	ands	r3, r2
 1002482:	687a      	ldr	r2, [r7, #4]
 1002484:	b2d2      	uxtb	r2, r2
 1002486:	4313      	orrs	r3, r2
 1002488:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
 100248c:	68fb      	ldr	r3, [r7, #12]
 100248e:	601a      	str	r2, [r3, #0]
}
 1002490:	bf00      	nop
 1002492:	3718      	adds	r7, #24
 1002494:	46bd      	mov	sp, r7
 1002496:	bd80      	pop	{r7, pc}
 1002498:	010023ad 	.word	0x010023ad
 100249c:	1fff0000 	.word	0x1fff0000

010024a0 <pll_enable>:
#endif
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
 10024a0:	b580      	push	{r7, lr}
 10024a2:	b082      	sub	sp, #8
 10024a4:	af00      	add	r7, sp, #0
 10024a6:	6078      	str	r0, [r7, #4]
 10024a8:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
 10024aa:	683b      	ldr	r3, [r7, #0]
 10024ac:	2b00      	cmp	r3, #0
 10024ae:	d106      	bne.n	10024be <pll_enable+0x1e>
		pmc_disable_pllack(); // Always stop PLL first!
 10024b0:	4b08      	ldr	r3, [pc, #32]	; (10024d4 <pll_enable+0x34>)
 10024b2:	4798      	blx	r3
		PMC->CKGR_PLLAR = p_cfg->ctrl;
 10024b4:	4a08      	ldr	r2, [pc, #32]	; (10024d8 <pll_enable+0x38>)
 10024b6:	687b      	ldr	r3, [r7, #4]
 10024b8:	681b      	ldr	r3, [r3, #0]
 10024ba:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		pmc_disable_pllbck(); // Always stop PLL first!
		PMC->CKGR_PLLBR = p_cfg->ctrl;
#endif
	}
}
 10024bc:	e005      	b.n	10024ca <pll_enable+0x2a>
		pmc_disable_pllbck(); // Always stop PLL first!
 10024be:	4b07      	ldr	r3, [pc, #28]	; (10024dc <pll_enable+0x3c>)
 10024c0:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
 10024c2:	4a05      	ldr	r2, [pc, #20]	; (10024d8 <pll_enable+0x38>)
 10024c4:	687b      	ldr	r3, [r7, #4]
 10024c6:	681b      	ldr	r3, [r3, #0]
 10024c8:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 10024ca:	bf00      	nop
 10024cc:	3708      	adds	r7, #8
 10024ce:	46bd      	mov	sp, r7
 10024d0:	bd80      	pop	{r7, pc}
 10024d2:	bf00      	nop
 10024d4:	010049b5 	.word	0x010049b5
 10024d8:	400e0400 	.word	0x400e0400
 10024dc:	010049e5 	.word	0x010049e5

010024e0 <pll_is_locked>:
#endif
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
 10024e0:	b580      	push	{r7, lr}
 10024e2:	b082      	sub	sp, #8
 10024e4:	af00      	add	r7, sp, #0
 10024e6:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
 10024e8:	687b      	ldr	r3, [r7, #4]
 10024ea:	2b00      	cmp	r3, #0
 10024ec:	d103      	bne.n	10024f6 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
 10024ee:	4b08      	ldr	r3, [pc, #32]	; (1002510 <pll_is_locked+0x30>)
 10024f0:	4798      	blx	r3
 10024f2:	4603      	mov	r3, r0
 10024f4:	e007      	b.n	1002506 <pll_is_locked+0x26>
#if SAMG55
	} else if (ul_pll_id == PLLB_ID) {
 10024f6:	687b      	ldr	r3, [r7, #4]
 10024f8:	2b01      	cmp	r3, #1
 10024fa:	d103      	bne.n	1002504 <pll_is_locked+0x24>
		return pmc_is_locked_pllbck();
 10024fc:	4b05      	ldr	r3, [pc, #20]	; (1002514 <pll_is_locked+0x34>)
 10024fe:	4798      	blx	r3
 1002500:	4603      	mov	r3, r0
 1002502:	e000      	b.n	1002506 <pll_is_locked+0x26>
#endif
	} else {
		return 0;
 1002504:	2300      	movs	r3, #0
	}
}
 1002506:	4618      	mov	r0, r3
 1002508:	3708      	adds	r7, #8
 100250a:	46bd      	mov	sp, r7
 100250c:	bd80      	pop	{r7, pc}
 100250e:	bf00      	nop
 1002510:	010049cd 	.word	0x010049cd
 1002514:	010049fd 	.word	0x010049fd

01002518 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
 1002518:	b580      	push	{r7, lr}
 100251a:	b082      	sub	sp, #8
 100251c:	af00      	add	r7, sp, #0
 100251e:	4603      	mov	r3, r0
 1002520:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
 1002522:	79fb      	ldrb	r3, [r7, #7]
 1002524:	3300      	adds	r3, #0
 1002526:	2b01      	cmp	r3, #1
 1002528:	d808      	bhi.n	100253c <pll_enable_source+0x24>
	case PLL_SRC_SLCK_RC:
	case PLL_SRC_SLCK_XTAL:
		osc_enable(e_src);
 100252a:	79fb      	ldrb	r3, [r7, #7]
 100252c:	4618      	mov	r0, r3
 100252e:	4b06      	ldr	r3, [pc, #24]	; (1002548 <pll_enable_source+0x30>)
 1002530:	4798      	blx	r3
		osc_wait_ready(e_src);
 1002532:	79fb      	ldrb	r3, [r7, #7]
 1002534:	4618      	mov	r0, r3
 1002536:	4b05      	ldr	r3, [pc, #20]	; (100254c <pll_enable_source+0x34>)
 1002538:	4798      	blx	r3
		break;
 100253a:	e000      	b.n	100253e <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
 100253c:	bf00      	nop
	}
}
 100253e:	bf00      	nop
 1002540:	3708      	adds	r7, #8
 1002542:	46bd      	mov	sp, r7
 1002544:	bd80      	pop	{r7, pc}
 1002546:	bf00      	nop
 1002548:	010022b5 	.word	0x010022b5
 100254c:	01002421 	.word	0x01002421

01002550 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
 1002550:	b580      	push	{r7, lr}
 1002552:	b082      	sub	sp, #8
 1002554:	af00      	add	r7, sp, #0
 1002556:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
 1002558:	bf00      	nop
 100255a:	6878      	ldr	r0, [r7, #4]
 100255c:	4b04      	ldr	r3, [pc, #16]	; (1002570 <pll_wait_for_lock+0x20>)
 100255e:	4798      	blx	r3
 1002560:	4603      	mov	r3, r0
 1002562:	2b00      	cmp	r3, #0
 1002564:	d0f9      	beq.n	100255a <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
 1002566:	2300      	movs	r3, #0
}
 1002568:	4618      	mov	r0, r3
 100256a:	3708      	adds	r7, #8
 100256c:	46bd      	mov	sp, r7
 100256e:	bd80      	pop	{r7, pc}
 1002570:	010024e1 	.word	0x010024e1

01002574 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
 1002574:	b580      	push	{r7, lr}
 1002576:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
 1002578:	2001      	movs	r0, #1
 100257a:	4b04      	ldr	r3, [pc, #16]	; (100258c <sysclk_get_main_hz+0x18>)
 100257c:	4798      	blx	r3
 100257e:	4602      	mov	r2, r0
 1002580:	f640 3372 	movw	r3, #2930	; 0xb72
 1002584:	fb03 f302 	mul.w	r3, r3, r2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
 1002588:	4618      	mov	r0, r3
 100258a:	bd80      	pop	{r7, pc}
 100258c:	010023ad 	.word	0x010023ad

01002590 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
 1002590:	b580      	push	{r7, lr}
 1002592:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
 1002594:	4b02      	ldr	r3, [pc, #8]	; (10025a0 <sysclk_get_cpu_hz+0x10>)
 1002596:	4798      	blx	r3
 1002598:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
 100259a:	4618      	mov	r0, r3
 100259c:	bd80      	pop	{r7, pc}
 100259e:	bf00      	nop
 10025a0:	01002575 	.word	0x01002575

010025a4 <sysclk_init>:
}
#endif // CONFIG_USBCLK_SOURCE
#endif

void sysclk_init(void)
{
 10025a4:	b590      	push	{r4, r7, lr}
 10025a6:	b0a7      	sub	sp, #156	; 0x9c
 10025a8:	af02      	add	r7, sp, #8
	uint32_t unique_id[32];
	uint32_t trim_value;
#endif

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
 10025aa:	4821      	ldr	r0, [pc, #132]	; (1002630 <sysclk_init+0x8c>)
 10025ac:	4b21      	ldr	r3, [pc, #132]	; (1002634 <sysclk_init+0x90>)
 10025ae:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
 10025b0:	2001      	movs	r0, #1
 10025b2:	4b21      	ldr	r3, [pc, #132]	; (1002638 <sysclk_init+0x94>)
 10025b4:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
 10025b6:	f107 0008 	add.w	r0, r7, #8
 10025ba:	f640 3372 	movw	r3, #2930	; 0xb72
 10025be:	2201      	movs	r2, #1
 10025c0:	2101      	movs	r1, #1
 10025c2:	4c1e      	ldr	r4, [pc, #120]	; (100263c <sysclk_init+0x98>)
 10025c4:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
 10025c6:	f107 0308 	add.w	r3, r7, #8
 10025ca:	2100      	movs	r1, #0
 10025cc:	4618      	mov	r0, r3
 10025ce:	4b1c      	ldr	r3, [pc, #112]	; (1002640 <sysclk_init+0x9c>)
 10025d0:	4798      	blx	r3
		pll_wait_for_lock(0);
 10025d2:	2000      	movs	r0, #0
 10025d4:	4b1b      	ldr	r3, [pc, #108]	; (1002644 <sysclk_init+0xa0>)
 10025d6:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
 10025d8:	2000      	movs	r0, #0
 10025da:	4b1b      	ldr	r3, [pc, #108]	; (1002648 <sysclk_init+0xa4>)
 10025dc:	4798      	blx	r3
	}
#endif
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
 10025de:	4b1b      	ldr	r3, [pc, #108]	; (100264c <sysclk_init+0xa8>)
 10025e0:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
 10025e2:	4b1b      	ldr	r3, [pc, #108]	; (1002650 <sysclk_init+0xac>)
 10025e4:	4798      	blx	r3
 10025e6:	4603      	mov	r3, r0
 10025e8:	4618      	mov	r0, r3
 10025ea:	4b12      	ldr	r3, [pc, #72]	; (1002634 <sysclk_init+0x90>)
 10025ec:	4798      	blx	r3
	}
#endif

#if SAMG55
	/* Set the trim value when system run near 120M */
	if ((SystemCoreClock <= (CHIP_FREQ_CPU_MAX + (CHIP_FREQ_CPU_MAX >> 3))) &&
 10025ee:	4b19      	ldr	r3, [pc, #100]	; (1002654 <sysclk_init+0xb0>)
 10025f0:	681b      	ldr	r3, [r3, #0]
 10025f2:	4a19      	ldr	r2, [pc, #100]	; (1002658 <sysclk_init+0xb4>)
 10025f4:	4293      	cmp	r3, r2
 10025f6:	d817      	bhi.n	1002628 <sysclk_init+0x84>
	(SystemCoreClock >= (CHIP_FREQ_CPU_MAX - (CHIP_FREQ_CPU_MAX >> 3)))) {
 10025f8:	4b16      	ldr	r3, [pc, #88]	; (1002654 <sysclk_init+0xb0>)
 10025fa:	681b      	ldr	r3, [r3, #0]
	if ((SystemCoreClock <= (CHIP_FREQ_CPU_MAX + (CHIP_FREQ_CPU_MAX >> 3))) &&
 10025fc:	4a17      	ldr	r2, [pc, #92]	; (100265c <sysclk_init+0xb8>)
 10025fe:	4293      	cmp	r3, r2
 1002600:	d912      	bls.n	1002628 <sysclk_init+0x84>
		/* Get the trim value from unique ID area */
		efc_perform_read_sequence(EFC, EFC_FCMD_STUI, EFC_FCMD_SPUI,
 1002602:	f107 020c 	add.w	r2, r7, #12
 1002606:	2320      	movs	r3, #32
 1002608:	9300      	str	r3, [sp, #0]
 100260a:	4613      	mov	r3, r2
 100260c:	220f      	movs	r2, #15
 100260e:	210e      	movs	r1, #14
 1002610:	4813      	ldr	r0, [pc, #76]	; (1002660 <sysclk_init+0xbc>)
 1002612:	4c14      	ldr	r4, [pc, #80]	; (1002664 <sysclk_init+0xc0>)
 1002614:	47a0      	blx	r4
		unique_id, 32);

		trim_value = unique_id[16] & 0x0000FFFF;
 1002616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 1002618:	b29b      	uxth	r3, r3
 100261a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		supc_set_regulator_trim_user(SUPC, trim_value);
 100261e:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 1002622:	4811      	ldr	r0, [pc, #68]	; (1002668 <sysclk_init+0xc4>)
 1002624:	4b11      	ldr	r3, [pc, #68]	; (100266c <sysclk_init+0xc8>)
 1002626:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
 1002628:	bf00      	nop
 100262a:	3794      	adds	r7, #148	; 0x94
 100262c:	46bd      	mov	sp, r7
 100262e:	bd90      	pop	{r4, r7, pc}
 1002630:	07270e00 	.word	0x07270e00
 1002634:	01007191 	.word	0x01007191
 1002638:	01002519 	.word	0x01002519
 100263c:	0100244d 	.word	0x0100244d
 1002640:	010024a1 	.word	0x010024a1
 1002644:	01002551 	.word	0x01002551
 1002648:	010047c9 	.word	0x010047c9
 100264c:	0100706d 	.word	0x0100706d
 1002650:	01002591 	.word	0x01002591
 1002654:	200001d8 	.word	0x200001d8
 1002658:	080befc0 	.word	0x080befc0
 100265c:	06422c3f 	.word	0x06422c3f
 1002660:	400e0a00 	.word	0x400e0a00
 1002664:	2000000b 	.word	0x2000000b
 1002668:	400e1410 	.word	0x400e1410
 100266c:	01004f23 	.word	0x01004f23

01002670 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
 1002670:	b480      	push	{r7}
 1002672:	b083      	sub	sp, #12
 1002674:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 1002676:	f3ef 8310 	mrs	r3, PRIMASK
 100267a:	607b      	str	r3, [r7, #4]
  return(result);
 100267c:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
 100267e:	2b00      	cmp	r3, #0
 1002680:	bf0c      	ite	eq
 1002682:	2301      	moveq	r3, #1
 1002684:	2300      	movne	r3, #0
 1002686:	b2db      	uxtb	r3, r3
 1002688:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 100268a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
 100268c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
 1002690:	4b04      	ldr	r3, [pc, #16]	; (10026a4 <cpu_irq_save+0x34>)
 1002692:	2200      	movs	r2, #0
 1002694:	701a      	strb	r2, [r3, #0]
	return flags;
 1002696:	683b      	ldr	r3, [r7, #0]
}
 1002698:	4618      	mov	r0, r3
 100269a:	370c      	adds	r7, #12
 100269c:	46bd      	mov	sp, r7
 100269e:	bc80      	pop	{r7}
 10026a0:	4770      	bx	lr
 10026a2:	bf00      	nop
 10026a4:	200001d4 	.word	0x200001d4

010026a8 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
 10026a8:	b480      	push	{r7}
 10026aa:	b083      	sub	sp, #12
 10026ac:	af00      	add	r7, sp, #0
 10026ae:	6078      	str	r0, [r7, #4]
	return (flags);
 10026b0:	687b      	ldr	r3, [r7, #4]
 10026b2:	2b00      	cmp	r3, #0
 10026b4:	bf14      	ite	ne
 10026b6:	2301      	movne	r3, #1
 10026b8:	2300      	moveq	r3, #0
 10026ba:	b2db      	uxtb	r3, r3
}
 10026bc:	4618      	mov	r0, r3
 10026be:	370c      	adds	r7, #12
 10026c0:	46bd      	mov	sp, r7
 10026c2:	bc80      	pop	{r7}
 10026c4:	4770      	bx	lr
	...

010026c8 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
 10026c8:	b580      	push	{r7, lr}
 10026ca:	b082      	sub	sp, #8
 10026cc:	af00      	add	r7, sp, #0
 10026ce:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
 10026d0:	6878      	ldr	r0, [r7, #4]
 10026d2:	4b07      	ldr	r3, [pc, #28]	; (10026f0 <cpu_irq_restore+0x28>)
 10026d4:	4798      	blx	r3
 10026d6:	4603      	mov	r3, r0
 10026d8:	2b00      	cmp	r3, #0
 10026da:	d005      	beq.n	10026e8 <cpu_irq_restore+0x20>
		cpu_irq_enable();
 10026dc:	4b05      	ldr	r3, [pc, #20]	; (10026f4 <cpu_irq_restore+0x2c>)
 10026de:	2201      	movs	r2, #1
 10026e0:	701a      	strb	r2, [r3, #0]
 10026e2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
 10026e6:	b662      	cpsie	i
}
 10026e8:	bf00      	nop
 10026ea:	3708      	adds	r7, #8
 10026ec:	46bd      	mov	sp, r7
 10026ee:	bd80      	pop	{r7, pc}
 10026f0:	010026a9 	.word	0x010026a9
 10026f4:	200001d4 	.word	0x200001d4

010026f8 <udi_cdc_comm_enable>:
static volatile bool udi_cdc_tx_both_buf_to_send[UDI_CDC_PORT_NB];

//@}

bool udi_cdc_comm_enable(void)
{
 10026f8:	b580      	push	{r7, lr}
 10026fa:	b082      	sub	sp, #8
 10026fc:	af00      	add	r7, sp, #0
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
 10026fe:	2300      	movs	r3, #0
 1002700:	71bb      	strb	r3, [r7, #6]
	udi_cdc_nb_comm_enabled = 0;
 1002702:	4b4f      	ldr	r3, [pc, #316]	; (1002840 <udi_cdc_comm_enable+0x148>)
 1002704:	2200      	movs	r2, #0
 1002706:	701a      	strb	r2, [r3, #0]
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
 1002708:	79bb      	ldrb	r3, [r7, #6]
 100270a:	4a4e      	ldr	r2, [pc, #312]	; (1002844 <udi_cdc_comm_enable+0x14c>)
 100270c:	2100      	movs	r1, #0
 100270e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	uid_cdc_state_msg[port].header.bmRequestType =
 1002712:	79ba      	ldrb	r2, [r7, #6]
 1002714:	494c      	ldr	r1, [pc, #304]	; (1002848 <udi_cdc_comm_enable+0x150>)
 1002716:	4613      	mov	r3, r2
 1002718:	009b      	lsls	r3, r3, #2
 100271a:	4413      	add	r3, r2
 100271c:	005b      	lsls	r3, r3, #1
 100271e:	440b      	add	r3, r1
 1002720:	22a1      	movs	r2, #161	; 0xa1
 1002722:	701a      	strb	r2, [r3, #0]
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
 1002724:	79ba      	ldrb	r2, [r7, #6]
 1002726:	4948      	ldr	r1, [pc, #288]	; (1002848 <udi_cdc_comm_enable+0x150>)
 1002728:	4613      	mov	r3, r2
 100272a:	009b      	lsls	r3, r3, #2
 100272c:	4413      	add	r3, r2
 100272e:	005b      	lsls	r3, r3, #1
 1002730:	440b      	add	r3, r1
 1002732:	3301      	adds	r3, #1
 1002734:	2220      	movs	r2, #32
 1002736:	701a      	strb	r2, [r3, #0]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
 1002738:	79ba      	ldrb	r2, [r7, #6]
 100273a:	4943      	ldr	r1, [pc, #268]	; (1002848 <udi_cdc_comm_enable+0x150>)
 100273c:	4613      	mov	r3, r2
 100273e:	009b      	lsls	r3, r3, #2
 1002740:	4413      	add	r3, r2
 1002742:	005b      	lsls	r3, r3, #1
 1002744:	440b      	add	r3, r1
 1002746:	3302      	adds	r3, #2
 1002748:	2200      	movs	r2, #0
 100274a:	801a      	strh	r2, [r3, #0]

	switch (port) {
 100274c:	79bb      	ldrb	r3, [r7, #6]
 100274e:	2b00      	cmp	r3, #0
 1002750:	d102      	bne.n	1002758 <udi_cdc_comm_enable+0x60>
#define UDI_CDC_PORT_TO_IFACE_COMM(index, unused) \
	case index: \
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_IFACE_COMM, ~)
 1002752:	2300      	movs	r3, #0
 1002754:	71fb      	strb	r3, [r7, #7]
 1002756:	e002      	b.n	100275e <udi_cdc_comm_enable+0x66>
#undef UDI_CDC_PORT_TO_IFACE_COMM
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
 1002758:	2300      	movs	r3, #0
 100275a:	71fb      	strb	r3, [r7, #7]
		break;
 100275c:	bf00      	nop
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
 100275e:	79ba      	ldrb	r2, [r7, #6]
 1002760:	79fb      	ldrb	r3, [r7, #7]
 1002762:	b298      	uxth	r0, r3
 1002764:	4938      	ldr	r1, [pc, #224]	; (1002848 <udi_cdc_comm_enable+0x150>)
 1002766:	4613      	mov	r3, r2
 1002768:	009b      	lsls	r3, r3, #2
 100276a:	4413      	add	r3, r2
 100276c:	005b      	lsls	r3, r3, #1
 100276e:	440b      	add	r3, r1
 1002770:	3304      	adds	r3, #4
 1002772:	4602      	mov	r2, r0
 1002774:	801a      	strh	r2, [r3, #0]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
 1002776:	79ba      	ldrb	r2, [r7, #6]
 1002778:	4933      	ldr	r1, [pc, #204]	; (1002848 <udi_cdc_comm_enable+0x150>)
 100277a:	4613      	mov	r3, r2
 100277c:	009b      	lsls	r3, r3, #2
 100277e:	4413      	add	r3, r2
 1002780:	005b      	lsls	r3, r3, #1
 1002782:	440b      	add	r3, r1
 1002784:	3306      	adds	r3, #6
 1002786:	2202      	movs	r2, #2
 1002788:	801a      	strh	r2, [r3, #0]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
 100278a:	79ba      	ldrb	r2, [r7, #6]
 100278c:	492e      	ldr	r1, [pc, #184]	; (1002848 <udi_cdc_comm_enable+0x150>)
 100278e:	4613      	mov	r3, r2
 1002790:	009b      	lsls	r3, r3, #2
 1002792:	4413      	add	r3, r2
 1002794:	005b      	lsls	r3, r3, #1
 1002796:	440b      	add	r3, r1
 1002798:	3308      	adds	r3, #8
 100279a:	2200      	movs	r2, #0
 100279c:	801a      	strh	r2, [r3, #0]

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
 100279e:	79ba      	ldrb	r2, [r7, #6]
 10027a0:	492a      	ldr	r1, [pc, #168]	; (100284c <udi_cdc_comm_enable+0x154>)
 10027a2:	4613      	mov	r3, r2
 10027a4:	00db      	lsls	r3, r3, #3
 10027a6:	1a9b      	subs	r3, r3, r2
 10027a8:	440b      	add	r3, r1
 10027aa:	2200      	movs	r2, #0
 10027ac:	701a      	strb	r2, [r3, #0]
 10027ae:	2200      	movs	r2, #0
 10027b0:	f062 023d 	orn	r2, r2, #61	; 0x3d
 10027b4:	705a      	strb	r2, [r3, #1]
 10027b6:	2200      	movs	r2, #0
 10027b8:	f042 0201 	orr.w	r2, r2, #1
 10027bc:	709a      	strb	r2, [r3, #2]
 10027be:	2200      	movs	r2, #0
 10027c0:	70da      	strb	r2, [r3, #3]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
 10027c2:	79ba      	ldrb	r2, [r7, #6]
 10027c4:	4921      	ldr	r1, [pc, #132]	; (100284c <udi_cdc_comm_enable+0x154>)
 10027c6:	4613      	mov	r3, r2
 10027c8:	00db      	lsls	r3, r3, #3
 10027ca:	1a9b      	subs	r3, r3, r2
 10027cc:	440b      	add	r3, r1
 10027ce:	3304      	adds	r3, #4
 10027d0:	2200      	movs	r2, #0
 10027d2:	701a      	strb	r2, [r3, #0]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
 10027d4:	79ba      	ldrb	r2, [r7, #6]
 10027d6:	491d      	ldr	r1, [pc, #116]	; (100284c <udi_cdc_comm_enable+0x154>)
 10027d8:	4613      	mov	r3, r2
 10027da:	00db      	lsls	r3, r3, #3
 10027dc:	1a9b      	subs	r3, r3, r2
 10027de:	440b      	add	r3, r1
 10027e0:	3305      	adds	r3, #5
 10027e2:	2200      	movs	r2, #0
 10027e4:	701a      	strb	r2, [r3, #0]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
 10027e6:	79ba      	ldrb	r2, [r7, #6]
 10027e8:	4918      	ldr	r1, [pc, #96]	; (100284c <udi_cdc_comm_enable+0x154>)
 10027ea:	4613      	mov	r3, r2
 10027ec:	00db      	lsls	r3, r3, #3
 10027ee:	1a9b      	subs	r3, r3, r2
 10027f0:	440b      	add	r3, r1
 10027f2:	3306      	adds	r3, #6
 10027f4:	2208      	movs	r2, #8
 10027f6:	701a      	strb	r2, [r3, #0]
	// Call application callback
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
 10027f8:	79ba      	ldrb	r2, [r7, #6]
 10027fa:	4613      	mov	r3, r2
 10027fc:	00db      	lsls	r3, r3, #3
 10027fe:	1a9b      	subs	r3, r3, r2
 1002800:	4a12      	ldr	r2, [pc, #72]	; (100284c <udi_cdc_comm_enable+0x154>)
 1002802:	441a      	add	r2, r3
 1002804:	79bb      	ldrb	r3, [r7, #6]
 1002806:	4611      	mov	r1, r2
 1002808:	4618      	mov	r0, r3
 100280a:	4b11      	ldr	r3, [pc, #68]	; (1002850 <udi_cdc_comm_enable+0x158>)
 100280c:	4798      	blx	r3
	if (!UDI_CDC_ENABLE_EXT(port)) {
 100280e:	79bb      	ldrb	r3, [r7, #6]
 1002810:	4618      	mov	r0, r3
 1002812:	4b10      	ldr	r3, [pc, #64]	; (1002854 <udi_cdc_comm_enable+0x15c>)
 1002814:	4798      	blx	r3
 1002816:	4603      	mov	r3, r0
 1002818:	f083 0301 	eor.w	r3, r3, #1
 100281c:	b2db      	uxtb	r3, r3
 100281e:	2b00      	cmp	r3, #0
 1002820:	d001      	beq.n	1002826 <udi_cdc_comm_enable+0x12e>
		return false;
 1002822:	2300      	movs	r3, #0
 1002824:	e007      	b.n	1002836 <udi_cdc_comm_enable+0x13e>
	}
	udi_cdc_nb_comm_enabled++;
 1002826:	4b06      	ldr	r3, [pc, #24]	; (1002840 <udi_cdc_comm_enable+0x148>)
 1002828:	781b      	ldrb	r3, [r3, #0]
 100282a:	b2db      	uxtb	r3, r3
 100282c:	3301      	adds	r3, #1
 100282e:	b2da      	uxtb	r2, r3
 1002830:	4b03      	ldr	r3, [pc, #12]	; (1002840 <udi_cdc_comm_enable+0x148>)
 1002832:	701a      	strb	r2, [r3, #0]
	return true;
 1002834:	2301      	movs	r3, #1
}
 1002836:	4618      	mov	r0, r3
 1002838:	3708      	adds	r7, #8
 100283a:	46bd      	mov	sp, r7
 100283c:	bd80      	pop	{r7, pc}
 100283e:	bf00      	nop
 1002840:	20001d12 	.word	0x20001d12
 1002844:	20001d04 	.word	0x20001d04
 1002848:	20001d08 	.word	0x20001d08
 100284c:	20001cfc 	.word	0x20001cfc
 1002850:	0100a291 	.word	0x0100a291
 1002854:	0100a1a3 	.word	0x0100a1a3

01002858 <udi_cdc_data_enable>:

bool udi_cdc_data_enable(void)
{
 1002858:	b580      	push	{r7, lr}
 100285a:	b082      	sub	sp, #8
 100285c:	af00      	add	r7, sp, #0
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
 100285e:	2300      	movs	r3, #0
 1002860:	71fb      	strb	r3, [r7, #7]
	udi_cdc_nb_data_enabled = 0;
 1002862:	4b2d      	ldr	r3, [pc, #180]	; (1002918 <udi_cdc_data_enable+0xc0>)
 1002864:	2200      	movs	r2, #0
 1002866:	701a      	strb	r2, [r3, #0]
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
 1002868:	79fb      	ldrb	r3, [r7, #7]
 100286a:	4a2c      	ldr	r2, [pc, #176]	; (100291c <udi_cdc_data_enable+0xc4>)
 100286c:	2100      	movs	r1, #0
 100286e:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_both_buf_to_send[port] = false;
 1002870:	79fb      	ldrb	r3, [r7, #7]
 1002872:	4a2b      	ldr	r2, [pc, #172]	; (1002920 <udi_cdc_data_enable+0xc8>)
 1002874:	2100      	movs	r1, #0
 1002876:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_buf_sel[port] = 0;
 1002878:	79fb      	ldrb	r3, [r7, #7]
 100287a:	4a2a      	ldr	r2, [pc, #168]	; (1002924 <udi_cdc_data_enable+0xcc>)
 100287c:	2100      	movs	r1, #0
 100287e:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_buf_nb[port][0] = 0;
 1002880:	79fb      	ldrb	r3, [r7, #7]
 1002882:	4a29      	ldr	r2, [pc, #164]	; (1002928 <udi_cdc_data_enable+0xd0>)
 1002884:	2100      	movs	r1, #0
 1002886:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
	udi_cdc_tx_buf_nb[port][1] = 0;
 100288a:	79fb      	ldrb	r3, [r7, #7]
 100288c:	4a26      	ldr	r2, [pc, #152]	; (1002928 <udi_cdc_data_enable+0xd0>)
 100288e:	009b      	lsls	r3, r3, #2
 1002890:	4413      	add	r3, r2
 1002892:	2200      	movs	r2, #0
 1002894:	805a      	strh	r2, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
 1002896:	79fb      	ldrb	r3, [r7, #7]
 1002898:	4a24      	ldr	r2, [pc, #144]	; (100292c <udi_cdc_data_enable+0xd4>)
 100289a:	2100      	movs	r1, #0
 100289c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	udi_cdc_tx_send(port);
 10028a0:	79fb      	ldrb	r3, [r7, #7]
 10028a2:	4618      	mov	r0, r3
 10028a4:	4b22      	ldr	r3, [pc, #136]	; (1002930 <udi_cdc_data_enable+0xd8>)
 10028a6:	4798      	blx	r3

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
 10028a8:	79fb      	ldrb	r3, [r7, #7]
 10028aa:	4a22      	ldr	r2, [pc, #136]	; (1002934 <udi_cdc_data_enable+0xdc>)
 10028ac:	2100      	movs	r1, #0
 10028ae:	54d1      	strb	r1, [r2, r3]
	udi_cdc_rx_buf_sel[port] = 0;
 10028b0:	79fb      	ldrb	r3, [r7, #7]
 10028b2:	4a21      	ldr	r2, [pc, #132]	; (1002938 <udi_cdc_data_enable+0xe0>)
 10028b4:	2100      	movs	r1, #0
 10028b6:	54d1      	strb	r1, [r2, r3]
	udi_cdc_rx_buf_nb[port][0] = 0;
 10028b8:	79fb      	ldrb	r3, [r7, #7]
 10028ba:	4a20      	ldr	r2, [pc, #128]	; (100293c <udi_cdc_data_enable+0xe4>)
 10028bc:	2100      	movs	r1, #0
 10028be:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
	udi_cdc_rx_buf_nb[port][1] = 0;
 10028c2:	79fb      	ldrb	r3, [r7, #7]
 10028c4:	4a1d      	ldr	r2, [pc, #116]	; (100293c <udi_cdc_data_enable+0xe4>)
 10028c6:	009b      	lsls	r3, r3, #2
 10028c8:	4413      	add	r3, r2
 10028ca:	2200      	movs	r2, #0
 10028cc:	805a      	strh	r2, [r3, #2]
	udi_cdc_rx_pos[port] = 0;
 10028ce:	79fb      	ldrb	r3, [r7, #7]
 10028d0:	4a1b      	ldr	r2, [pc, #108]	; (1002940 <udi_cdc_data_enable+0xe8>)
 10028d2:	2100      	movs	r1, #0
 10028d4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	if (!udi_cdc_rx_start(port)) {
 10028d8:	79fb      	ldrb	r3, [r7, #7]
 10028da:	4618      	mov	r0, r3
 10028dc:	4b19      	ldr	r3, [pc, #100]	; (1002944 <udi_cdc_data_enable+0xec>)
 10028de:	4798      	blx	r3
 10028e0:	4603      	mov	r3, r0
 10028e2:	f083 0301 	eor.w	r3, r3, #1
 10028e6:	b2db      	uxtb	r3, r3
 10028e8:	2b00      	cmp	r3, #0
 10028ea:	d001      	beq.n	10028f0 <udi_cdc_data_enable+0x98>
		return false;
 10028ec:	2300      	movs	r3, #0
 10028ee:	e00f      	b.n	1002910 <udi_cdc_data_enable+0xb8>
	}
	udi_cdc_nb_data_enabled++;
 10028f0:	4b09      	ldr	r3, [pc, #36]	; (1002918 <udi_cdc_data_enable+0xc0>)
 10028f2:	781b      	ldrb	r3, [r3, #0]
 10028f4:	b2db      	uxtb	r3, r3
 10028f6:	3301      	adds	r3, #1
 10028f8:	b2da      	uxtb	r2, r3
 10028fa:	4b07      	ldr	r3, [pc, #28]	; (1002918 <udi_cdc_data_enable+0xc0>)
 10028fc:	701a      	strb	r2, [r3, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
 10028fe:	4b06      	ldr	r3, [pc, #24]	; (1002918 <udi_cdc_data_enable+0xc0>)
 1002900:	781b      	ldrb	r3, [r3, #0]
 1002902:	b2db      	uxtb	r3, r3
 1002904:	2b01      	cmp	r3, #1
 1002906:	d102      	bne.n	100290e <udi_cdc_data_enable+0xb6>
		udi_cdc_data_running = true;
 1002908:	4b0f      	ldr	r3, [pc, #60]	; (1002948 <udi_cdc_data_enable+0xf0>)
 100290a:	2201      	movs	r2, #1
 100290c:	701a      	strb	r2, [r3, #0]
	}
	return true;
 100290e:	2301      	movs	r3, #1
}
 1002910:	4618      	mov	r0, r3
 1002912:	3708      	adds	r7, #8
 1002914:	46bd      	mov	sp, r7
 1002916:	bd80      	pop	{r7, pc}
 1002918:	20001d13 	.word	0x20001d13
 100291c:	20001e34 	.word	0x20001e34
 1002920:	20001e38 	.word	0x20001e38
 1002924:	20001e2c 	.word	0x20001e2c
 1002928:	20001e28 	.word	0x20001e28
 100292c:	20001e30 	.word	0x20001e30
 1002930:	01002d49 	.word	0x01002d49
 1002934:	20001da4 	.word	0x20001da4
 1002938:	20001d9c 	.word	0x20001d9c
 100293c:	20001d98 	.word	0x20001d98
 1002940:	20001da0 	.word	0x20001da0
 1002944:	01002b25 	.word	0x01002b25
 1002948:	20001d14 	.word	0x20001d14

0100294c <udi_cdc_comm_disable>:

void udi_cdc_comm_disable(void)
{
 100294c:	b480      	push	{r7}
 100294e:	af00      	add	r7, sp, #0
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
 1002950:	4b05      	ldr	r3, [pc, #20]	; (1002968 <udi_cdc_comm_disable+0x1c>)
 1002952:	781b      	ldrb	r3, [r3, #0]
 1002954:	b2db      	uxtb	r3, r3
 1002956:	3b01      	subs	r3, #1
 1002958:	b2da      	uxtb	r2, r3
 100295a:	4b03      	ldr	r3, [pc, #12]	; (1002968 <udi_cdc_comm_disable+0x1c>)
 100295c:	701a      	strb	r2, [r3, #0]
}
 100295e:	bf00      	nop
 1002960:	46bd      	mov	sp, r7
 1002962:	bc80      	pop	{r7}
 1002964:	4770      	bx	lr
 1002966:	bf00      	nop
 1002968:	20001d12 	.word	0x20001d12

0100296c <udi_cdc_data_disable>:

void udi_cdc_data_disable(void)
{
 100296c:	b580      	push	{r7, lr}
 100296e:	b082      	sub	sp, #8
 1002970:	af00      	add	r7, sp, #0
	uint8_t port;

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
 1002972:	4b0a      	ldr	r3, [pc, #40]	; (100299c <udi_cdc_data_disable+0x30>)
 1002974:	781b      	ldrb	r3, [r3, #0]
 1002976:	b2db      	uxtb	r3, r3
 1002978:	3b01      	subs	r3, #1
 100297a:	b2da      	uxtb	r2, r3
 100297c:	4b07      	ldr	r3, [pc, #28]	; (100299c <udi_cdc_data_disable+0x30>)
 100297e:	701a      	strb	r2, [r3, #0]
	port = udi_cdc_nb_data_enabled;
 1002980:	4b06      	ldr	r3, [pc, #24]	; (100299c <udi_cdc_data_disable+0x30>)
 1002982:	781b      	ldrb	r3, [r3, #0]
 1002984:	71fb      	strb	r3, [r7, #7]
	UDI_CDC_DISABLE_EXT(port);
 1002986:	79fb      	ldrb	r3, [r7, #7]
 1002988:	4618      	mov	r0, r3
 100298a:	4b05      	ldr	r3, [pc, #20]	; (10029a0 <udi_cdc_data_disable+0x34>)
 100298c:	4798      	blx	r3
	udi_cdc_data_running = false;
 100298e:	4b05      	ldr	r3, [pc, #20]	; (10029a4 <udi_cdc_data_disable+0x38>)
 1002990:	2200      	movs	r2, #0
 1002992:	701a      	strb	r2, [r3, #0]
}
 1002994:	bf00      	nop
 1002996:	3708      	adds	r7, #8
 1002998:	46bd      	mov	sp, r7
 100299a:	bd80      	pop	{r7, pc}
 100299c:	20001d13 	.word	0x20001d13
 10029a0:	0100a1b9 	.word	0x0100a1b9
 10029a4:	20001d14 	.word	0x20001d14

010029a8 <udi_cdc_comm_setup>:

bool udi_cdc_comm_setup(void)
{
 10029a8:	b580      	push	{r7, lr}
 10029aa:	b082      	sub	sp, #8
 10029ac:	af00      	add	r7, sp, #0
	uint8_t port = udi_cdc_setup_to_port();
 10029ae:	4b31      	ldr	r3, [pc, #196]	; (1002a74 <udi_cdc_comm_setup+0xcc>)
 10029b0:	4798      	blx	r3
 10029b2:	4603      	mov	r3, r0
 10029b4:	71fb      	strb	r3, [r7, #7]

	if (Udd_setup_is_in()) {
 10029b6:	4b30      	ldr	r3, [pc, #192]	; (1002a78 <udi_cdc_comm_setup+0xd0>)
 10029b8:	781b      	ldrb	r3, [r3, #0]
 10029ba:	b25b      	sxtb	r3, r3
 10029bc:	2b00      	cmp	r3, #0
 10029be:	da1c      	bge.n	10029fa <udi_cdc_comm_setup+0x52>
		// GET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
 10029c0:	4b2d      	ldr	r3, [pc, #180]	; (1002a78 <udi_cdc_comm_setup+0xd0>)
 10029c2:	781b      	ldrb	r3, [r3, #0]
 10029c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 10029c8:	2b20      	cmp	r3, #32
 10029ca:	d116      	bne.n	10029fa <udi_cdc_comm_setup+0x52>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
 10029cc:	4b2a      	ldr	r3, [pc, #168]	; (1002a78 <udi_cdc_comm_setup+0xd0>)
 10029ce:	785b      	ldrb	r3, [r3, #1]
 10029d0:	2b21      	cmp	r3, #33	; 0x21
 10029d2:	d112      	bne.n	10029fa <udi_cdc_comm_setup+0x52>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
 10029d4:	4b28      	ldr	r3, [pc, #160]	; (1002a78 <udi_cdc_comm_setup+0xd0>)
 10029d6:	88db      	ldrh	r3, [r3, #6]
				if (sizeof(usb_cdc_line_coding_t) !=
 10029d8:	2b07      	cmp	r3, #7
 10029da:	d001      	beq.n	10029e0 <udi_cdc_comm_setup+0x38>
					return false; // Error for USB host
 10029dc:	2300      	movs	r3, #0
 10029de:	e045      	b.n	1002a6c <udi_cdc_comm_setup+0xc4>
				udd_g_ctrlreq.payload =
						(uint8_t *) &
						udi_cdc_line_coding[port];
 10029e0:	79fa      	ldrb	r2, [r7, #7]
						(uint8_t *) &
 10029e2:	4613      	mov	r3, r2
 10029e4:	00db      	lsls	r3, r3, #3
 10029e6:	1a9b      	subs	r3, r3, r2
 10029e8:	4a24      	ldr	r2, [pc, #144]	; (1002a7c <udi_cdc_comm_setup+0xd4>)
 10029ea:	4413      	add	r3, r2
				udd_g_ctrlreq.payload =
 10029ec:	4a22      	ldr	r2, [pc, #136]	; (1002a78 <udi_cdc_comm_setup+0xd0>)
 10029ee:	6093      	str	r3, [r2, #8]
				udd_g_ctrlreq.payload_size =
 10029f0:	4b21      	ldr	r3, [pc, #132]	; (1002a78 <udi_cdc_comm_setup+0xd0>)
 10029f2:	2207      	movs	r2, #7
 10029f4:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
 10029f6:	2301      	movs	r3, #1
 10029f8:	e038      	b.n	1002a6c <udi_cdc_comm_setup+0xc4>
			}
		}
	}
	if (Udd_setup_is_out()) {
 10029fa:	4b1f      	ldr	r3, [pc, #124]	; (1002a78 <udi_cdc_comm_setup+0xd0>)
 10029fc:	781b      	ldrb	r3, [r3, #0]
 10029fe:	b25b      	sxtb	r3, r3
 1002a00:	2b00      	cmp	r3, #0
 1002a02:	db32      	blt.n	1002a6a <udi_cdc_comm_setup+0xc2>
		// SET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
 1002a04:	4b1c      	ldr	r3, [pc, #112]	; (1002a78 <udi_cdc_comm_setup+0xd0>)
 1002a06:	781b      	ldrb	r3, [r3, #0]
 1002a08:	f003 0360 	and.w	r3, r3, #96	; 0x60
 1002a0c:	2b20      	cmp	r3, #32
 1002a0e:	d12c      	bne.n	1002a6a <udi_cdc_comm_setup+0xc2>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
 1002a10:	4b19      	ldr	r3, [pc, #100]	; (1002a78 <udi_cdc_comm_setup+0xd0>)
 1002a12:	785b      	ldrb	r3, [r3, #1]
 1002a14:	2b20      	cmp	r3, #32
 1002a16:	d002      	beq.n	1002a1e <udi_cdc_comm_setup+0x76>
 1002a18:	2b22      	cmp	r3, #34	; 0x22
 1002a1a:	d016      	beq.n	1002a4a <udi_cdc_comm_setup+0xa2>
 1002a1c:	e025      	b.n	1002a6a <udi_cdc_comm_setup+0xc2>
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
 1002a1e:	4b16      	ldr	r3, [pc, #88]	; (1002a78 <udi_cdc_comm_setup+0xd0>)
 1002a20:	88db      	ldrh	r3, [r3, #6]
				if (sizeof(usb_cdc_line_coding_t) !=
 1002a22:	2b07      	cmp	r3, #7
 1002a24:	d001      	beq.n	1002a2a <udi_cdc_comm_setup+0x82>
					return false; // Error for USB host
 1002a26:	2300      	movs	r3, #0
 1002a28:	e020      	b.n	1002a6c <udi_cdc_comm_setup+0xc4>
				udd_g_ctrlreq.callback =
 1002a2a:	4b13      	ldr	r3, [pc, #76]	; (1002a78 <udi_cdc_comm_setup+0xd0>)
 1002a2c:	4a14      	ldr	r2, [pc, #80]	; (1002a80 <udi_cdc_comm_setup+0xd8>)
 1002a2e:	611a      	str	r2, [r3, #16]
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
						(uint8_t *) &
						udi_cdc_line_coding[port];
 1002a30:	79fa      	ldrb	r2, [r7, #7]
						(uint8_t *) &
 1002a32:	4613      	mov	r3, r2
 1002a34:	00db      	lsls	r3, r3, #3
 1002a36:	1a9b      	subs	r3, r3, r2
 1002a38:	4a10      	ldr	r2, [pc, #64]	; (1002a7c <udi_cdc_comm_setup+0xd4>)
 1002a3a:	4413      	add	r3, r2
				udd_g_ctrlreq.payload =
 1002a3c:	4a0e      	ldr	r2, [pc, #56]	; (1002a78 <udi_cdc_comm_setup+0xd0>)
 1002a3e:	6093      	str	r3, [r2, #8]
				udd_g_ctrlreq.payload_size =
 1002a40:	4b0d      	ldr	r3, [pc, #52]	; (1002a78 <udi_cdc_comm_setup+0xd0>)
 1002a42:	2207      	movs	r2, #7
 1002a44:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
 1002a46:	2301      	movs	r3, #1
 1002a48:	e010      	b.n	1002a6c <udi_cdc_comm_setup+0xc4>
			case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
				// According cdc spec 1.1 chapter 6.2.14
				UDI_CDC_SET_DTR_EXT(port, (0 !=
 1002a4a:	4b0b      	ldr	r3, [pc, #44]	; (1002a78 <udi_cdc_comm_setup+0xd0>)
 1002a4c:	885b      	ldrh	r3, [r3, #2]
 1002a4e:	f003 0301 	and.w	r3, r3, #1
 1002a52:	2b00      	cmp	r3, #0
 1002a54:	bf14      	ite	ne
 1002a56:	2301      	movne	r3, #1
 1002a58:	2300      	moveq	r3, #0
 1002a5a:	b2da      	uxtb	r2, r3
 1002a5c:	79fb      	ldrb	r3, [r7, #7]
 1002a5e:	4611      	mov	r1, r2
 1002a60:	4618      	mov	r0, r3
 1002a62:	4b08      	ldr	r3, [pc, #32]	; (1002a84 <udi_cdc_comm_setup+0xdc>)
 1002a64:	4798      	blx	r3
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_DTE_PRESENT)));
				UDI_CDC_SET_RTS_EXT(port, (0 !=
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
 1002a66:	2301      	movs	r3, #1
 1002a68:	e000      	b.n	1002a6c <udi_cdc_comm_setup+0xc4>
			}
		}
	}
	return false;  // request Not supported
 1002a6a:	2300      	movs	r3, #0
}
 1002a6c:	4618      	mov	r0, r3
 1002a6e:	3708      	adds	r7, #8
 1002a70:	46bd      	mov	sp, r7
 1002a72:	bd80      	pop	{r7, pc}
 1002a74:	01002ac1 	.word	0x01002ac1
 1002a78:	20008304 	.word	0x20008304
 1002a7c:	20001cfc 	.word	0x20001cfc
 1002a80:	01002aed 	.word	0x01002aed
 1002a84:	0100a1cd 	.word	0x0100a1cd

01002a88 <udi_cdc_data_setup>:

bool udi_cdc_data_setup(void)
{
 1002a88:	b480      	push	{r7}
 1002a8a:	af00      	add	r7, sp, #0
	return false;  // request Not supported
 1002a8c:	2300      	movs	r3, #0
}
 1002a8e:	4618      	mov	r0, r3
 1002a90:	46bd      	mov	sp, r7
 1002a92:	bc80      	pop	{r7}
 1002a94:	4770      	bx	lr

01002a96 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
 1002a96:	b480      	push	{r7}
 1002a98:	af00      	add	r7, sp, #0
	return 0;      // CDC don't have multiple alternate setting
 1002a9a:	2300      	movs	r3, #0
}
 1002a9c:	4618      	mov	r0, r3
 1002a9e:	46bd      	mov	sp, r7
 1002aa0:	bc80      	pop	{r7}
 1002aa2:	4770      	bx	lr

01002aa4 <udi_cdc_data_sof_notify>:

void udi_cdc_data_sof_notify(void)
{
 1002aa4:	b580      	push	{r7, lr}
 1002aa6:	af00      	add	r7, sp, #0
	static uint8_t port_notify = 0;

	// A call of udi_cdc_data_sof_notify() is done for each port
	udi_cdc_tx_send(port_notify);
 1002aa8:	4b03      	ldr	r3, [pc, #12]	; (1002ab8 <udi_cdc_data_sof_notify+0x14>)
 1002aaa:	781b      	ldrb	r3, [r3, #0]
 1002aac:	4618      	mov	r0, r3
 1002aae:	4b03      	ldr	r3, [pc, #12]	; (1002abc <udi_cdc_data_sof_notify+0x18>)
 1002ab0:	4798      	blx	r3
	port_notify++;
	if (port_notify >= UDI_CDC_PORT_NB) {
		port_notify = 0;
	}
#endif
}
 1002ab2:	bf00      	nop
 1002ab4:	bd80      	pop	{r7, pc}
 1002ab6:	bf00      	nop
 1002ab8:	20001e39 	.word	0x20001e39
 1002abc:	01002d49 	.word	0x01002d49

01002ac0 <udi_cdc_setup_to_port>:

//-------------------------------------------------
//------- Internal routines to control serial line

static uint8_t udi_cdc_setup_to_port(void)
{
 1002ac0:	b480      	push	{r7}
 1002ac2:	b083      	sub	sp, #12
 1002ac4:	af00      	add	r7, sp, #0
	uint8_t port;

	switch (udd_g_ctrlreq.req.wIndex & 0xFF) {
 1002ac6:	4b08      	ldr	r3, [pc, #32]	; (1002ae8 <udi_cdc_setup_to_port+0x28>)
 1002ac8:	889b      	ldrh	r3, [r3, #4]
 1002aca:	b2db      	uxtb	r3, r3
 1002acc:	2b00      	cmp	r3, #0
 1002ace:	d102      	bne.n	1002ad6 <udi_cdc_setup_to_port+0x16>
#define UDI_CDC_IFACE_COMM_TO_PORT(iface, unused) \
	case UDI_CDC_COMM_IFACE_NUMBER_##iface: \
		port = iface; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_IFACE_COMM_TO_PORT, ~)
 1002ad0:	2300      	movs	r3, #0
 1002ad2:	71fb      	strb	r3, [r7, #7]
 1002ad4:	e002      	b.n	1002adc <udi_cdc_setup_to_port+0x1c>
#undef UDI_CDC_IFACE_COMM_TO_PORT
	default:
		port = 0;
 1002ad6:	2300      	movs	r3, #0
 1002ad8:	71fb      	strb	r3, [r7, #7]
		break;
 1002ada:	bf00      	nop
	}
	return port;
 1002adc:	79fb      	ldrb	r3, [r7, #7]
}
 1002ade:	4618      	mov	r0, r3
 1002ae0:	370c      	adds	r7, #12
 1002ae2:	46bd      	mov	sp, r7
 1002ae4:	bc80      	pop	{r7}
 1002ae6:	4770      	bx	lr
 1002ae8:	20008304 	.word	0x20008304

01002aec <udi_cdc_line_coding_received>:

static void udi_cdc_line_coding_received(void)
{
 1002aec:	b580      	push	{r7, lr}
 1002aee:	b082      	sub	sp, #8
 1002af0:	af00      	add	r7, sp, #0
	uint8_t port = udi_cdc_setup_to_port();
 1002af2:	4b09      	ldr	r3, [pc, #36]	; (1002b18 <udi_cdc_line_coding_received+0x2c>)
 1002af4:	4798      	blx	r3
 1002af6:	4603      	mov	r3, r0
 1002af8:	71fb      	strb	r3, [r7, #7]
	UNUSED(port);

	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
 1002afa:	79fa      	ldrb	r2, [r7, #7]
 1002afc:	4613      	mov	r3, r2
 1002afe:	00db      	lsls	r3, r3, #3
 1002b00:	1a9b      	subs	r3, r3, r2
 1002b02:	4a06      	ldr	r2, [pc, #24]	; (1002b1c <udi_cdc_line_coding_received+0x30>)
 1002b04:	441a      	add	r2, r3
 1002b06:	79fb      	ldrb	r3, [r7, #7]
 1002b08:	4611      	mov	r1, r2
 1002b0a:	4618      	mov	r0, r3
 1002b0c:	4b04      	ldr	r3, [pc, #16]	; (1002b20 <udi_cdc_line_coding_received+0x34>)
 1002b0e:	4798      	blx	r3
}
 1002b10:	bf00      	nop
 1002b12:	3708      	adds	r7, #8
 1002b14:	46bd      	mov	sp, r7
 1002b16:	bd80      	pop	{r7, pc}
 1002b18:	01002ac1 	.word	0x01002ac1
 1002b1c:	20001cfc 	.word	0x20001cfc
 1002b20:	0100a291 	.word	0x0100a291

01002b24 <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
 1002b24:	b590      	push	{r4, r7, lr}
 1002b26:	b089      	sub	sp, #36	; 0x24
 1002b28:	af02      	add	r7, sp, #8
 1002b2a:	4603      	mov	r3, r0
 1002b2c:	71fb      	strb	r3, [r7, #7]
	irqflags_t flags;
	uint8_t buf_sel_trans;
	udd_ep_id_t ep;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
 1002b2e:	2300      	movs	r3, #0
 1002b30:	71fb      	strb	r3, [r7, #7]
#endif

	flags = cpu_irq_save();
 1002b32:	4b2f      	ldr	r3, [pc, #188]	; (1002bf0 <udi_cdc_rx_start+0xcc>)
 1002b34:	4798      	blx	r3
 1002b36:	6138      	str	r0, [r7, #16]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
 1002b38:	79fb      	ldrb	r3, [r7, #7]
 1002b3a:	4a2e      	ldr	r2, [pc, #184]	; (1002bf4 <udi_cdc_rx_start+0xd0>)
 1002b3c:	5cd3      	ldrb	r3, [r2, r3]
 1002b3e:	73fb      	strb	r3, [r7, #15]
	if (udi_cdc_rx_trans_ongoing[port] ||
 1002b40:	79fb      	ldrb	r3, [r7, #7]
 1002b42:	4a2d      	ldr	r2, [pc, #180]	; (1002bf8 <udi_cdc_rx_start+0xd4>)
 1002b44:	5cd3      	ldrb	r3, [r2, r3]
 1002b46:	b2db      	uxtb	r3, r3
 1002b48:	2b00      	cmp	r3, #0
 1002b4a:	d10e      	bne.n	1002b6a <udi_cdc_rx_start+0x46>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
 1002b4c:	79fb      	ldrb	r3, [r7, #7]
 1002b4e:	4a2b      	ldr	r2, [pc, #172]	; (1002bfc <udi_cdc_rx_start+0xd8>)
 1002b50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 1002b54:	b29a      	uxth	r2, r3
 1002b56:	79f9      	ldrb	r1, [r7, #7]
 1002b58:	7bfb      	ldrb	r3, [r7, #15]
 1002b5a:	4829      	ldr	r0, [pc, #164]	; (1002c00 <udi_cdc_rx_start+0xdc>)
 1002b5c:	0049      	lsls	r1, r1, #1
 1002b5e:	440b      	add	r3, r1
 1002b60:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 1002b64:	b29b      	uxth	r3, r3
	if (udi_cdc_rx_trans_ongoing[port] ||
 1002b66:	429a      	cmp	r2, r3
 1002b68:	d204      	bcs.n	1002b74 <udi_cdc_rx_start+0x50>
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
 1002b6a:	6938      	ldr	r0, [r7, #16]
 1002b6c:	4b25      	ldr	r3, [pc, #148]	; (1002c04 <udi_cdc_rx_start+0xe0>)
 1002b6e:	4798      	blx	r3
		return false;
 1002b70:	2300      	movs	r3, #0
 1002b72:	e038      	b.n	1002be6 <udi_cdc_rx_start+0xc2>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
 1002b74:	79fb      	ldrb	r3, [r7, #7]
 1002b76:	4a21      	ldr	r2, [pc, #132]	; (1002bfc <udi_cdc_rx_start+0xd8>)
 1002b78:	2100      	movs	r1, #0
 1002b7a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
 1002b7e:	79fb      	ldrb	r3, [r7, #7]
 1002b80:	7bfa      	ldrb	r2, [r7, #15]
 1002b82:	2a00      	cmp	r2, #0
 1002b84:	bf0c      	ite	eq
 1002b86:	2201      	moveq	r2, #1
 1002b88:	2200      	movne	r2, #0
 1002b8a:	b2d2      	uxtb	r2, r2
 1002b8c:	4611      	mov	r1, r2
 1002b8e:	4a19      	ldr	r2, [pc, #100]	; (1002bf4 <udi_cdc_rx_start+0xd0>)
 1002b90:	54d1      	strb	r1, [r2, r3]

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
 1002b92:	79fb      	ldrb	r3, [r7, #7]
 1002b94:	4a18      	ldr	r2, [pc, #96]	; (1002bf8 <udi_cdc_rx_start+0xd4>)
 1002b96:	2101      	movs	r1, #1
 1002b98:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
 1002b9a:	6938      	ldr	r0, [r7, #16]
 1002b9c:	4b19      	ldr	r3, [pc, #100]	; (1002c04 <udi_cdc_rx_start+0xe0>)
 1002b9e:	4798      	blx	r3

	if (udi_cdc_multi_is_rx_ready(port)) {
 1002ba0:	79fb      	ldrb	r3, [r7, #7]
 1002ba2:	4618      	mov	r0, r3
 1002ba4:	4b18      	ldr	r3, [pc, #96]	; (1002c08 <udi_cdc_rx_start+0xe4>)
 1002ba6:	4798      	blx	r3
 1002ba8:	4603      	mov	r3, r0
 1002baa:	2b00      	cmp	r3, #0
 1002bac:	d003      	beq.n	1002bb6 <udi_cdc_rx_start+0x92>
		UDI_CDC_RX_NOTIFY(port);
 1002bae:	79fb      	ldrb	r3, [r7, #7]
 1002bb0:	4618      	mov	r0, r3
 1002bb2:	4b16      	ldr	r3, [pc, #88]	; (1002c0c <udi_cdc_rx_start+0xe8>)
 1002bb4:	4798      	blx	r3
	}
	// Send the buffer with enable of short packet
	switch (port) {
 1002bb6:	79fb      	ldrb	r3, [r7, #7]
 1002bb8:	2b00      	cmp	r3, #0
 1002bba:	d102      	bne.n	1002bc2 <udi_cdc_rx_start+0x9e>
#define UDI_CDC_PORT_TO_DATA_EP_OUT(index, unused) \
	case index: \
		ep = UDI_CDC_DATA_EP_OUT_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_DATA_EP_OUT, ~)
 1002bbc:	2302      	movs	r3, #2
 1002bbe:	75fb      	strb	r3, [r7, #23]
 1002bc0:	e002      	b.n	1002bc8 <udi_cdc_rx_start+0xa4>
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
 1002bc2:	2302      	movs	r3, #2
 1002bc4:	75fb      	strb	r3, [r7, #23]
		break;
 1002bc6:	bf00      	nop
	}
	return udd_ep_run(ep,
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
 1002bc8:	79fa      	ldrb	r2, [r7, #7]
 1002bca:	7bfb      	ldrb	r3, [r7, #15]
 1002bcc:	0052      	lsls	r2, r2, #1
 1002bce:	4413      	add	r3, r2
 1002bd0:	019b      	lsls	r3, r3, #6
 1002bd2:	4a0f      	ldr	r2, [pc, #60]	; (1002c10 <udi_cdc_rx_start+0xec>)
 1002bd4:	441a      	add	r2, r3
	return udd_ep_run(ep,
 1002bd6:	7df8      	ldrb	r0, [r7, #23]
 1002bd8:	4b0e      	ldr	r3, [pc, #56]	; (1002c14 <udi_cdc_rx_start+0xf0>)
 1002bda:	9300      	str	r3, [sp, #0]
 1002bdc:	2340      	movs	r3, #64	; 0x40
 1002bde:	2101      	movs	r1, #1
 1002be0:	4c0d      	ldr	r4, [pc, #52]	; (1002c18 <udi_cdc_rx_start+0xf4>)
 1002be2:	47a0      	blx	r4
 1002be4:	4603      	mov	r3, r0
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
 1002be6:	4618      	mov	r0, r3
 1002be8:	371c      	adds	r7, #28
 1002bea:	46bd      	mov	sp, r7
 1002bec:	bd90      	pop	{r4, r7, pc}
 1002bee:	bf00      	nop
 1002bf0:	01002671 	.word	0x01002671
 1002bf4:	20001d9c 	.word	0x20001d9c
 1002bf8:	20001da4 	.word	0x20001da4
 1002bfc:	20001da0 	.word	0x20001da0
 1002c00:	20001d98 	.word	0x20001d98
 1002c04:	010026c9 	.word	0x010026c9
 1002c08:	01002f95 	.word	0x01002f95
 1002c0c:	0100a1e9 	.word	0x0100a1e9
 1002c10:	20001d18 	.word	0x20001d18
 1002c14:	01002c1d 	.word	0x01002c1d
 1002c18:	01005881 	.word	0x01005881

01002c1c <udi_cdc_data_received>:


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
 1002c1c:	b590      	push	{r4, r7, lr}
 1002c1e:	b087      	sub	sp, #28
 1002c20:	af02      	add	r7, sp, #8
 1002c22:	4603      	mov	r3, r0
 1002c24:	6039      	str	r1, [r7, #0]
 1002c26:	71fb      	strb	r3, [r7, #7]
 1002c28:	4613      	mov	r3, r2
 1002c2a:	71bb      	strb	r3, [r7, #6]
	uint8_t buf_sel_trans;
	uint8_t port;

	switch (ep) {
 1002c2c:	79bb      	ldrb	r3, [r7, #6]
 1002c2e:	2b02      	cmp	r3, #2
 1002c30:	d102      	bne.n	1002c38 <udi_cdc_data_received+0x1c>
#define UDI_CDC_DATA_EP_OUT_TO_PORT(index, unused) \
	case UDI_CDC_DATA_EP_OUT_##index: \
		port = index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_DATA_EP_OUT_TO_PORT, ~)
 1002c32:	2300      	movs	r3, #0
 1002c34:	73fb      	strb	r3, [r7, #15]
 1002c36:	e002      	b.n	1002c3e <udi_cdc_data_received+0x22>
#undef UDI_CDC_DATA_EP_OUT_TO_PORT
	default:
		port = 0;
 1002c38:	2300      	movs	r3, #0
 1002c3a:	73fb      	strb	r3, [r7, #15]
		break;
 1002c3c:	bf00      	nop
	}

	if (UDD_EP_TRANSFER_OK != status) {
 1002c3e:	79fb      	ldrb	r3, [r7, #7]
 1002c40:	2b00      	cmp	r3, #0
 1002c42:	d12e      	bne.n	1002ca2 <udi_cdc_data_received+0x86>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
 1002c44:	7bfb      	ldrb	r3, [r7, #15]
 1002c46:	4a19      	ldr	r2, [pc, #100]	; (1002cac <udi_cdc_data_received+0x90>)
 1002c48:	5cd3      	ldrb	r3, [r2, r3]
 1002c4a:	b2db      	uxtb	r3, r3
 1002c4c:	2b00      	cmp	r3, #0
 1002c4e:	bf0c      	ite	eq
 1002c50:	2301      	moveq	r3, #1
 1002c52:	2300      	movne	r3, #0
 1002c54:	b2db      	uxtb	r3, r3
 1002c56:	73bb      	strb	r3, [r7, #14]
	if (!n) {
 1002c58:	683b      	ldr	r3, [r7, #0]
 1002c5a:	2b00      	cmp	r3, #0
 1002c5c:	d10e      	bne.n	1002c7c <udi_cdc_data_received+0x60>
		udd_ep_run( ep,
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
 1002c5e:	7bfa      	ldrb	r2, [r7, #15]
 1002c60:	7bbb      	ldrb	r3, [r7, #14]
 1002c62:	0052      	lsls	r2, r2, #1
 1002c64:	4413      	add	r3, r2
 1002c66:	019b      	lsls	r3, r3, #6
 1002c68:	4a11      	ldr	r2, [pc, #68]	; (1002cb0 <udi_cdc_data_received+0x94>)
 1002c6a:	441a      	add	r2, r3
		udd_ep_run( ep,
 1002c6c:	79b8      	ldrb	r0, [r7, #6]
 1002c6e:	4b11      	ldr	r3, [pc, #68]	; (1002cb4 <udi_cdc_data_received+0x98>)
 1002c70:	9300      	str	r3, [sp, #0]
 1002c72:	2340      	movs	r3, #64	; 0x40
 1002c74:	2101      	movs	r1, #1
 1002c76:	4c10      	ldr	r4, [pc, #64]	; (1002cb8 <udi_cdc_data_received+0x9c>)
 1002c78:	47a0      	blx	r4
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
 1002c7a:	e013      	b.n	1002ca4 <udi_cdc_data_received+0x88>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
 1002c7c:	7bfa      	ldrb	r2, [r7, #15]
 1002c7e:	7bbb      	ldrb	r3, [r7, #14]
 1002c80:	6839      	ldr	r1, [r7, #0]
 1002c82:	b288      	uxth	r0, r1
 1002c84:	490d      	ldr	r1, [pc, #52]	; (1002cbc <udi_cdc_data_received+0xa0>)
 1002c86:	0052      	lsls	r2, r2, #1
 1002c88:	4413      	add	r3, r2
 1002c8a:	4602      	mov	r2, r0
 1002c8c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
 1002c90:	7bfb      	ldrb	r3, [r7, #15]
 1002c92:	4a0b      	ldr	r2, [pc, #44]	; (1002cc0 <udi_cdc_data_received+0xa4>)
 1002c94:	2100      	movs	r1, #0
 1002c96:	54d1      	strb	r1, [r2, r3]
	udi_cdc_rx_start(port);
 1002c98:	7bfb      	ldrb	r3, [r7, #15]
 1002c9a:	4618      	mov	r0, r3
 1002c9c:	4b09      	ldr	r3, [pc, #36]	; (1002cc4 <udi_cdc_data_received+0xa8>)
 1002c9e:	4798      	blx	r3
 1002ca0:	e000      	b.n	1002ca4 <udi_cdc_data_received+0x88>
		return;
 1002ca2:	bf00      	nop
}
 1002ca4:	3714      	adds	r7, #20
 1002ca6:	46bd      	mov	sp, r7
 1002ca8:	bd90      	pop	{r4, r7, pc}
 1002caa:	bf00      	nop
 1002cac:	20001d9c 	.word	0x20001d9c
 1002cb0:	20001d18 	.word	0x20001d18
 1002cb4:	01002c1d 	.word	0x01002c1d
 1002cb8:	01005881 	.word	0x01005881
 1002cbc:	20001d98 	.word	0x20001d98
 1002cc0:	20001da4 	.word	0x20001da4
 1002cc4:	01002b25 	.word	0x01002b25

01002cc8 <udi_cdc_data_sent>:


static void udi_cdc_data_sent(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
 1002cc8:	b580      	push	{r7, lr}
 1002cca:	b084      	sub	sp, #16
 1002ccc:	af00      	add	r7, sp, #0
 1002cce:	4603      	mov	r3, r0
 1002cd0:	6039      	str	r1, [r7, #0]
 1002cd2:	71fb      	strb	r3, [r7, #7]
 1002cd4:	4613      	mov	r3, r2
 1002cd6:	71bb      	strb	r3, [r7, #6]
	uint8_t port;
	UNUSED(n);

	switch (ep) {
 1002cd8:	79bb      	ldrb	r3, [r7, #6]
 1002cda:	2b81      	cmp	r3, #129	; 0x81
 1002cdc:	d102      	bne.n	1002ce4 <udi_cdc_data_sent+0x1c>
#define UDI_CDC_DATA_EP_IN_TO_PORT(index, unused) \
	case UDI_CDC_DATA_EP_IN_##index: \
		port = index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_DATA_EP_IN_TO_PORT, ~)
 1002cde:	2300      	movs	r3, #0
 1002ce0:	73fb      	strb	r3, [r7, #15]
 1002ce2:	e002      	b.n	1002cea <udi_cdc_data_sent+0x22>
#undef UDI_CDC_DATA_EP_IN_TO_PORT
	default:
		port = 0;
 1002ce4:	2300      	movs	r3, #0
 1002ce6:	73fb      	strb	r3, [r7, #15]
		break;
 1002ce8:	bf00      	nop
	}

	if (UDD_EP_TRANSFER_OK != status) {
 1002cea:	79fb      	ldrb	r3, [r7, #7]
 1002cec:	2b00      	cmp	r3, #0
 1002cee:	d11d      	bne.n	1002d2c <udi_cdc_data_sent+0x64>
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
 1002cf0:	7bfb      	ldrb	r3, [r7, #15]
 1002cf2:	7bfa      	ldrb	r2, [r7, #15]
 1002cf4:	490f      	ldr	r1, [pc, #60]	; (1002d34 <udi_cdc_data_sent+0x6c>)
 1002cf6:	5c8a      	ldrb	r2, [r1, r2]
 1002cf8:	b2d2      	uxtb	r2, r2
 1002cfa:	2a00      	cmp	r2, #0
 1002cfc:	bf0c      	ite	eq
 1002cfe:	2201      	moveq	r2, #1
 1002d00:	2200      	movne	r2, #0
 1002d02:	b2d2      	uxtb	r2, r2
 1002d04:	4611      	mov	r1, r2
 1002d06:	4a0c      	ldr	r2, [pc, #48]	; (1002d38 <udi_cdc_data_sent+0x70>)
 1002d08:	005b      	lsls	r3, r3, #1
 1002d0a:	440b      	add	r3, r1
 1002d0c:	2100      	movs	r1, #0
 1002d0e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	udi_cdc_tx_both_buf_to_send[port] = false;
 1002d12:	7bfb      	ldrb	r3, [r7, #15]
 1002d14:	4a09      	ldr	r2, [pc, #36]	; (1002d3c <udi_cdc_data_sent+0x74>)
 1002d16:	2100      	movs	r1, #0
 1002d18:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_trans_ongoing[port] = false;
 1002d1a:	7bfb      	ldrb	r3, [r7, #15]
 1002d1c:	4a08      	ldr	r2, [pc, #32]	; (1002d40 <udi_cdc_data_sent+0x78>)
 1002d1e:	2100      	movs	r1, #0
 1002d20:	54d1      	strb	r1, [r2, r3]

	if (n != 0) {
		UDI_CDC_TX_EMPTY_NOTIFY(port);
	}
	udi_cdc_tx_send(port);
 1002d22:	7bfb      	ldrb	r3, [r7, #15]
 1002d24:	4618      	mov	r0, r3
 1002d26:	4b07      	ldr	r3, [pc, #28]	; (1002d44 <udi_cdc_data_sent+0x7c>)
 1002d28:	4798      	blx	r3
 1002d2a:	e000      	b.n	1002d2e <udi_cdc_data_sent+0x66>
		return;
 1002d2c:	bf00      	nop
}
 1002d2e:	3710      	adds	r7, #16
 1002d30:	46bd      	mov	sp, r7
 1002d32:	bd80      	pop	{r7, pc}
 1002d34:	20001e2c 	.word	0x20001e2c
 1002d38:	20001e28 	.word	0x20001e28
 1002d3c:	20001e38 	.word	0x20001e38
 1002d40:	20001e34 	.word	0x20001e34
 1002d44:	01002d49 	.word	0x01002d49

01002d48 <udi_cdc_tx_send>:


static void udi_cdc_tx_send(uint8_t port)
{
 1002d48:	b590      	push	{r4, r7, lr}
 1002d4a:	b089      	sub	sp, #36	; 0x24
 1002d4c:	af02      	add	r7, sp, #8
 1002d4e:	4603      	mov	r3, r0
 1002d50:	71fb      	strb	r3, [r7, #7]
	bool b_short_packet;
	udd_ep_id_t ep;
	static uint16_t sof_zlp_counter = 0;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
 1002d52:	2300      	movs	r3, #0
 1002d54:	71fb      	strb	r3, [r7, #7]
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
 1002d56:	79fb      	ldrb	r3, [r7, #7]
 1002d58:	4a62      	ldr	r2, [pc, #392]	; (1002ee4 <udi_cdc_tx_send+0x19c>)
 1002d5a:	5cd3      	ldrb	r3, [r2, r3]
 1002d5c:	b2db      	uxtb	r3, r3
 1002d5e:	2b00      	cmp	r3, #0
 1002d60:	f040 80ba 	bne.w	1002ed8 <udi_cdc_tx_send+0x190>
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
 1002d64:	4b60      	ldr	r3, [pc, #384]	; (1002ee8 <udi_cdc_tx_send+0x1a0>)
 1002d66:	4798      	blx	r3
 1002d68:	4603      	mov	r3, r0
 1002d6a:	2b00      	cmp	r3, #0
 1002d6c:	d009      	beq.n	1002d82 <udi_cdc_tx_send+0x3a>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
 1002d6e:	79fb      	ldrb	r3, [r7, #7]
 1002d70:	4a5e      	ldr	r2, [pc, #376]	; (1002eec <udi_cdc_tx_send+0x1a4>)
 1002d72:	f832 4013 	ldrh.w	r4, [r2, r3, lsl #1]
 1002d76:	4b5e      	ldr	r3, [pc, #376]	; (1002ef0 <udi_cdc_tx_send+0x1a8>)
 1002d78:	4798      	blx	r3
 1002d7a:	4603      	mov	r3, r0
 1002d7c:	429c      	cmp	r4, r3
 1002d7e:	d10a      	bne.n	1002d96 <udi_cdc_tx_send+0x4e>
			return; // Wait next SOF to send next data
 1002d80:	e0ad      	b.n	1002ede <udi_cdc_tx_send+0x196>
		}
	}else{
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
 1002d82:	79fb      	ldrb	r3, [r7, #7]
 1002d84:	4a59      	ldr	r2, [pc, #356]	; (1002eec <udi_cdc_tx_send+0x1a4>)
 1002d86:	f832 4013 	ldrh.w	r4, [r2, r3, lsl #1]
 1002d8a:	4b5a      	ldr	r3, [pc, #360]	; (1002ef4 <udi_cdc_tx_send+0x1ac>)
 1002d8c:	4798      	blx	r3
 1002d8e:	4603      	mov	r3, r0
 1002d90:	429c      	cmp	r4, r3
 1002d92:	f000 80a3 	beq.w	1002edc <udi_cdc_tx_send+0x194>
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
 1002d96:	4b58      	ldr	r3, [pc, #352]	; (1002ef8 <udi_cdc_tx_send+0x1b0>)
 1002d98:	4798      	blx	r3
 1002d9a:	6138      	str	r0, [r7, #16]
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
 1002d9c:	79fb      	ldrb	r3, [r7, #7]
 1002d9e:	4a57      	ldr	r2, [pc, #348]	; (1002efc <udi_cdc_tx_send+0x1b4>)
 1002da0:	5cd3      	ldrb	r3, [r2, r3]
 1002da2:	75fb      	strb	r3, [r7, #23]
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
 1002da4:	79fa      	ldrb	r2, [r7, #7]
 1002da6:	7dfb      	ldrb	r3, [r7, #23]
 1002da8:	4955      	ldr	r1, [pc, #340]	; (1002f00 <udi_cdc_tx_send+0x1b8>)
 1002daa:	0052      	lsls	r2, r2, #1
 1002dac:	4413      	add	r3, r2
 1002dae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 1002db2:	2b00      	cmp	r3, #0
 1002db4:	d11f      	bne.n	1002df6 <udi_cdc_tx_send+0xae>
		sof_zlp_counter++;
 1002db6:	4b53      	ldr	r3, [pc, #332]	; (1002f04 <udi_cdc_tx_send+0x1bc>)
 1002db8:	881b      	ldrh	r3, [r3, #0]
 1002dba:	3301      	adds	r3, #1
 1002dbc:	b29a      	uxth	r2, r3
 1002dbe:	4b51      	ldr	r3, [pc, #324]	; (1002f04 <udi_cdc_tx_send+0x1bc>)
 1002dc0:	801a      	strh	r2, [r3, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
 1002dc2:	4b49      	ldr	r3, [pc, #292]	; (1002ee8 <udi_cdc_tx_send+0x1a0>)
 1002dc4:	4798      	blx	r3
 1002dc6:	4603      	mov	r3, r0
 1002dc8:	f083 0301 	eor.w	r3, r3, #1
 1002dcc:	b2db      	uxtb	r3, r3
 1002dce:	2b00      	cmp	r3, #0
 1002dd0:	d003      	beq.n	1002dda <udi_cdc_tx_send+0x92>
 1002dd2:	4b4c      	ldr	r3, [pc, #304]	; (1002f04 <udi_cdc_tx_send+0x1bc>)
 1002dd4:	881b      	ldrh	r3, [r3, #0]
 1002dd6:	2b63      	cmp	r3, #99	; 0x63
 1002dd8:	d909      	bls.n	1002dee <udi_cdc_tx_send+0xa6>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
 1002dda:	4b43      	ldr	r3, [pc, #268]	; (1002ee8 <udi_cdc_tx_send+0x1a0>)
 1002ddc:	4798      	blx	r3
 1002dde:	4603      	mov	r3, r0
 1002de0:	2b00      	cmp	r3, #0
 1002de2:	d008      	beq.n	1002df6 <udi_cdc_tx_send+0xae>
 1002de4:	4b47      	ldr	r3, [pc, #284]	; (1002f04 <udi_cdc_tx_send+0x1bc>)
 1002de6:	881b      	ldrh	r3, [r3, #0]
 1002de8:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 1002dec:	d203      	bcs.n	1002df6 <udi_cdc_tx_send+0xae>
			cpu_irq_restore(flags);
 1002dee:	6938      	ldr	r0, [r7, #16]
 1002df0:	4b45      	ldr	r3, [pc, #276]	; (1002f08 <udi_cdc_tx_send+0x1c0>)
 1002df2:	4798      	blx	r3
			return;
 1002df4:	e073      	b.n	1002ede <udi_cdc_tx_send+0x196>
		}
	}
	sof_zlp_counter = 0;
 1002df6:	4b43      	ldr	r3, [pc, #268]	; (1002f04 <udi_cdc_tx_send+0x1bc>)
 1002df8:	2200      	movs	r2, #0
 1002dfa:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
 1002dfc:	79fb      	ldrb	r3, [r7, #7]
 1002dfe:	4a43      	ldr	r2, [pc, #268]	; (1002f0c <udi_cdc_tx_send+0x1c4>)
 1002e00:	5cd3      	ldrb	r3, [r2, r3]
 1002e02:	b2db      	uxtb	r3, r3
 1002e04:	f083 0301 	eor.w	r3, r3, #1
 1002e08:	b2db      	uxtb	r3, r3
 1002e0a:	2b00      	cmp	r3, #0
 1002e0c:	d00a      	beq.n	1002e24 <udi_cdc_tx_send+0xdc>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
 1002e0e:	79fb      	ldrb	r3, [r7, #7]
 1002e10:	7dfa      	ldrb	r2, [r7, #23]
 1002e12:	2a00      	cmp	r2, #0
 1002e14:	bf0c      	ite	eq
 1002e16:	2201      	moveq	r2, #1
 1002e18:	2200      	movne	r2, #0
 1002e1a:	b2d2      	uxtb	r2, r2
 1002e1c:	4611      	mov	r1, r2
 1002e1e:	4a37      	ldr	r2, [pc, #220]	; (1002efc <udi_cdc_tx_send+0x1b4>)
 1002e20:	54d1      	strb	r1, [r2, r3]
 1002e22:	e006      	b.n	1002e32 <udi_cdc_tx_send+0xea>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
 1002e24:	7dfb      	ldrb	r3, [r7, #23]
 1002e26:	2b00      	cmp	r3, #0
 1002e28:	bf0c      	ite	eq
 1002e2a:	2301      	moveq	r3, #1
 1002e2c:	2300      	movne	r3, #0
 1002e2e:	b2db      	uxtb	r3, r3
 1002e30:	75fb      	strb	r3, [r7, #23]
	}
	udi_cdc_tx_trans_ongoing[port] = true;
 1002e32:	79fb      	ldrb	r3, [r7, #7]
 1002e34:	4a2b      	ldr	r2, [pc, #172]	; (1002ee4 <udi_cdc_tx_send+0x19c>)
 1002e36:	2101      	movs	r1, #1
 1002e38:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
 1002e3a:	6938      	ldr	r0, [r7, #16]
 1002e3c:	4b32      	ldr	r3, [pc, #200]	; (1002f08 <udi_cdc_tx_send+0x1c0>)
 1002e3e:	4798      	blx	r3

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
 1002e40:	79fa      	ldrb	r2, [r7, #7]
 1002e42:	7dfb      	ldrb	r3, [r7, #23]
 1002e44:	492e      	ldr	r1, [pc, #184]	; (1002f00 <udi_cdc_tx_send+0x1b8>)
 1002e46:	0052      	lsls	r2, r2, #1
 1002e48:	4413      	add	r3, r2
 1002e4a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 1002e4e:	2b40      	cmp	r3, #64	; 0x40
 1002e50:	bf14      	ite	ne
 1002e52:	2301      	movne	r3, #1
 1002e54:	2300      	moveq	r3, #0
 1002e56:	73fb      	strb	r3, [r7, #15]
	if (b_short_packet) {
 1002e58:	7bfb      	ldrb	r3, [r7, #15]
 1002e5a:	2b00      	cmp	r3, #0
 1002e5c:	d016      	beq.n	1002e8c <udi_cdc_tx_send+0x144>
		if (udd_is_high_speed()) {
 1002e5e:	4b22      	ldr	r3, [pc, #136]	; (1002ee8 <udi_cdc_tx_send+0x1a0>)
 1002e60:	4798      	blx	r3
 1002e62:	4603      	mov	r3, r0
 1002e64:	2b00      	cmp	r3, #0
 1002e66:	d008      	beq.n	1002e7a <udi_cdc_tx_send+0x132>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
 1002e68:	79fc      	ldrb	r4, [r7, #7]
 1002e6a:	4b21      	ldr	r3, [pc, #132]	; (1002ef0 <udi_cdc_tx_send+0x1a8>)
 1002e6c:	4798      	blx	r3
 1002e6e:	4603      	mov	r3, r0
 1002e70:	461a      	mov	r2, r3
 1002e72:	4b1e      	ldr	r3, [pc, #120]	; (1002eec <udi_cdc_tx_send+0x1a4>)
 1002e74:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 1002e78:	e00d      	b.n	1002e96 <udi_cdc_tx_send+0x14e>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
 1002e7a:	79fc      	ldrb	r4, [r7, #7]
 1002e7c:	4b1d      	ldr	r3, [pc, #116]	; (1002ef4 <udi_cdc_tx_send+0x1ac>)
 1002e7e:	4798      	blx	r3
 1002e80:	4603      	mov	r3, r0
 1002e82:	461a      	mov	r2, r3
 1002e84:	4b19      	ldr	r3, [pc, #100]	; (1002eec <udi_cdc_tx_send+0x1a4>)
 1002e86:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 1002e8a:	e004      	b.n	1002e96 <udi_cdc_tx_send+0x14e>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
 1002e8c:	79fb      	ldrb	r3, [r7, #7]
 1002e8e:	4a17      	ldr	r2, [pc, #92]	; (1002eec <udi_cdc_tx_send+0x1a4>)
 1002e90:	2100      	movs	r1, #0
 1002e92:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}

	// Send the buffer with enable of short packet
	switch (port) {
 1002e96:	79fb      	ldrb	r3, [r7, #7]
 1002e98:	2b00      	cmp	r3, #0
 1002e9a:	d102      	bne.n	1002ea2 <udi_cdc_tx_send+0x15a>
#define UDI_CDC_PORT_TO_DATA_EP_IN(index, unused) \
	case index: \
		ep = UDI_CDC_DATA_EP_IN_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_DATA_EP_IN, ~)
 1002e9c:	2381      	movs	r3, #129	; 0x81
 1002e9e:	75bb      	strb	r3, [r7, #22]
 1002ea0:	e002      	b.n	1002ea8 <udi_cdc_tx_send+0x160>
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
 1002ea2:	2381      	movs	r3, #129	; 0x81
 1002ea4:	75bb      	strb	r3, [r7, #22]
		break;
 1002ea6:	bf00      	nop
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
 1002ea8:	79fa      	ldrb	r2, [r7, #7]
 1002eaa:	7dfb      	ldrb	r3, [r7, #23]
 1002eac:	0052      	lsls	r2, r2, #1
 1002eae:	4413      	add	r3, r2
 1002eb0:	019b      	lsls	r3, r3, #6
 1002eb2:	4a17      	ldr	r2, [pc, #92]	; (1002f10 <udi_cdc_tx_send+0x1c8>)
 1002eb4:	189c      	adds	r4, r3, r2
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
 1002eb6:	79fa      	ldrb	r2, [r7, #7]
 1002eb8:	7dfb      	ldrb	r3, [r7, #23]
 1002eba:	4911      	ldr	r1, [pc, #68]	; (1002f00 <udi_cdc_tx_send+0x1b8>)
 1002ebc:	0052      	lsls	r2, r2, #1
 1002ebe:	4413      	add	r3, r2
 1002ec0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
	udd_ep_run( ep,
 1002ec4:	461a      	mov	r2, r3
 1002ec6:	7bf9      	ldrb	r1, [r7, #15]
 1002ec8:	7db8      	ldrb	r0, [r7, #22]
 1002eca:	4b12      	ldr	r3, [pc, #72]	; (1002f14 <udi_cdc_tx_send+0x1cc>)
 1002ecc:	9300      	str	r3, [sp, #0]
 1002ece:	4613      	mov	r3, r2
 1002ed0:	4622      	mov	r2, r4
 1002ed2:	4c11      	ldr	r4, [pc, #68]	; (1002f18 <udi_cdc_tx_send+0x1d0>)
 1002ed4:	47a0      	blx	r4
 1002ed6:	e002      	b.n	1002ede <udi_cdc_tx_send+0x196>
		return; // Already on going or wait next SOF to send next data
 1002ed8:	bf00      	nop
 1002eda:	e000      	b.n	1002ede <udi_cdc_tx_send+0x196>
			return; // Wait next SOF to send next data
 1002edc:	bf00      	nop
			udi_cdc_data_sent);
}
 1002ede:	371c      	adds	r7, #28
 1002ee0:	46bd      	mov	sp, r7
 1002ee2:	bd90      	pop	{r4, r7, pc}
 1002ee4:	20001e34 	.word	0x20001e34
 1002ee8:	010052a1 	.word	0x010052a1
 1002eec:	20001e30 	.word	0x20001e30
 1002ef0:	0100535d 	.word	0x0100535d
 1002ef4:	01005341 	.word	0x01005341
 1002ef8:	01002671 	.word	0x01002671
 1002efc:	20001e2c 	.word	0x20001e2c
 1002f00:	20001e28 	.word	0x20001e28
 1002f04:	20001e3a 	.word	0x20001e3a
 1002f08:	010026c9 	.word	0x010026c9
 1002f0c:	20001e38 	.word	0x20001e38
 1002f10:	20001da8 	.word	0x20001da8
 1002f14:	01002cc9 	.word	0x01002cc9
 1002f18:	01005881 	.word	0x01005881

01002f1c <udi_cdc_multi_get_nb_received_data>:
{
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_OVERRUN);
}

iram_size_t udi_cdc_multi_get_nb_received_data(uint8_t port)
{
 1002f1c:	b580      	push	{r7, lr}
 1002f1e:	b086      	sub	sp, #24
 1002f20:	af00      	add	r7, sp, #0
 1002f22:	4603      	mov	r3, r0
 1002f24:	71fb      	strb	r3, [r7, #7]
	irqflags_t flags;
	uint16_t pos;
	iram_size_t nb_received;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
 1002f26:	2300      	movs	r3, #0
 1002f28:	71fb      	strb	r3, [r7, #7]
#endif
	flags = cpu_irq_save();
 1002f2a:	4b10      	ldr	r3, [pc, #64]	; (1002f6c <udi_cdc_multi_get_nb_received_data+0x50>)
 1002f2c:	4798      	blx	r3
 1002f2e:	6178      	str	r0, [r7, #20]
	pos = udi_cdc_rx_pos[port];
 1002f30:	79fb      	ldrb	r3, [r7, #7]
 1002f32:	4a0f      	ldr	r2, [pc, #60]	; (1002f70 <udi_cdc_multi_get_nb_received_data+0x54>)
 1002f34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 1002f38:	827b      	strh	r3, [r7, #18]
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
 1002f3a:	79fb      	ldrb	r3, [r7, #7]
 1002f3c:	79fa      	ldrb	r2, [r7, #7]
 1002f3e:	490d      	ldr	r1, [pc, #52]	; (1002f74 <udi_cdc_multi_get_nb_received_data+0x58>)
 1002f40:	5c8a      	ldrb	r2, [r1, r2]
 1002f42:	b2d2      	uxtb	r2, r2
 1002f44:	4611      	mov	r1, r2
 1002f46:	4a0c      	ldr	r2, [pc, #48]	; (1002f78 <udi_cdc_multi_get_nb_received_data+0x5c>)
 1002f48:	005b      	lsls	r3, r3, #1
 1002f4a:	440b      	add	r3, r1
 1002f4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 1002f50:	b29b      	uxth	r3, r3
 1002f52:	461a      	mov	r2, r3
 1002f54:	8a7b      	ldrh	r3, [r7, #18]
 1002f56:	1ad3      	subs	r3, r2, r3
 1002f58:	60fb      	str	r3, [r7, #12]
	cpu_irq_restore(flags);
 1002f5a:	6978      	ldr	r0, [r7, #20]
 1002f5c:	4b07      	ldr	r3, [pc, #28]	; (1002f7c <udi_cdc_multi_get_nb_received_data+0x60>)
 1002f5e:	4798      	blx	r3
	return nb_received;
 1002f60:	68fb      	ldr	r3, [r7, #12]
}
 1002f62:	4618      	mov	r0, r3
 1002f64:	3718      	adds	r7, #24
 1002f66:	46bd      	mov	sp, r7
 1002f68:	bd80      	pop	{r7, pc}
 1002f6a:	bf00      	nop
 1002f6c:	01002671 	.word	0x01002671
 1002f70:	20001da0 	.word	0x20001da0
 1002f74:	20001d9c 	.word	0x20001d9c
 1002f78:	20001d98 	.word	0x20001d98
 1002f7c:	010026c9 	.word	0x010026c9

01002f80 <udi_cdc_get_nb_received_data>:

iram_size_t udi_cdc_get_nb_received_data(void)
{
 1002f80:	b580      	push	{r7, lr}
 1002f82:	af00      	add	r7, sp, #0
	return udi_cdc_multi_get_nb_received_data(0);
 1002f84:	2000      	movs	r0, #0
 1002f86:	4b02      	ldr	r3, [pc, #8]	; (1002f90 <udi_cdc_get_nb_received_data+0x10>)
 1002f88:	4798      	blx	r3
 1002f8a:	4603      	mov	r3, r0
}
 1002f8c:	4618      	mov	r0, r3
 1002f8e:	bd80      	pop	{r7, pc}
 1002f90:	01002f1d 	.word	0x01002f1d

01002f94 <udi_cdc_multi_is_rx_ready>:

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
 1002f94:	b580      	push	{r7, lr}
 1002f96:	b082      	sub	sp, #8
 1002f98:	af00      	add	r7, sp, #0
 1002f9a:	4603      	mov	r3, r0
 1002f9c:	71fb      	strb	r3, [r7, #7]
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
 1002f9e:	79fb      	ldrb	r3, [r7, #7]
 1002fa0:	4618      	mov	r0, r3
 1002fa2:	4b06      	ldr	r3, [pc, #24]	; (1002fbc <udi_cdc_multi_is_rx_ready+0x28>)
 1002fa4:	4798      	blx	r3
 1002fa6:	4603      	mov	r3, r0
 1002fa8:	2b00      	cmp	r3, #0
 1002faa:	bf14      	ite	ne
 1002fac:	2301      	movne	r3, #1
 1002fae:	2300      	moveq	r3, #0
 1002fb0:	b2db      	uxtb	r3, r3
}
 1002fb2:	4618      	mov	r0, r3
 1002fb4:	3708      	adds	r7, #8
 1002fb6:	46bd      	mov	sp, r7
 1002fb8:	bd80      	pop	{r7, pc}
 1002fba:	bf00      	nop
 1002fbc:	01002f1d 	.word	0x01002f1d

01002fc0 <udi_cdc_multi_read_buf>:
{
	return udi_cdc_multi_getc(0);
}

iram_size_t udi_cdc_multi_read_buf(uint8_t port, void* buf, iram_size_t size)
{
 1002fc0:	b580      	push	{r7, lr}
 1002fc2:	b088      	sub	sp, #32
 1002fc4:	af00      	add	r7, sp, #0
 1002fc6:	4603      	mov	r3, r0
 1002fc8:	60b9      	str	r1, [r7, #8]
 1002fca:	607a      	str	r2, [r7, #4]
 1002fcc:	73fb      	strb	r3, [r7, #15]
	irqflags_t flags;
	uint8_t *ptr_buf = (uint8_t *)buf;
 1002fce:	68bb      	ldr	r3, [r7, #8]
 1002fd0:	61fb      	str	r3, [r7, #28]
	uint16_t pos;
	uint8_t buf_sel;
	bool again;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
 1002fd2:	2300      	movs	r3, #0
 1002fd4:	73fb      	strb	r3, [r7, #15]
#endif

udi_cdc_read_buf_loop_wait:
	// Check available data
	flags = cpu_irq_save();
 1002fd6:	4b36      	ldr	r3, [pc, #216]	; (10030b0 <udi_cdc_multi_read_buf+0xf0>)
 1002fd8:	4798      	blx	r3
 1002fda:	6178      	str	r0, [r7, #20]
	pos = udi_cdc_rx_pos[port];
 1002fdc:	7bfb      	ldrb	r3, [r7, #15]
 1002fde:	4a35      	ldr	r2, [pc, #212]	; (10030b4 <udi_cdc_multi_read_buf+0xf4>)
 1002fe0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 1002fe4:	827b      	strh	r3, [r7, #18]
	buf_sel = udi_cdc_rx_buf_sel[port];
 1002fe6:	7bfb      	ldrb	r3, [r7, #15]
 1002fe8:	4a33      	ldr	r2, [pc, #204]	; (10030b8 <udi_cdc_multi_read_buf+0xf8>)
 1002fea:	5cd3      	ldrb	r3, [r2, r3]
 1002fec:	747b      	strb	r3, [r7, #17]
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
 1002fee:	7bfa      	ldrb	r2, [r7, #15]
 1002ff0:	7c7b      	ldrb	r3, [r7, #17]
 1002ff2:	4932      	ldr	r1, [pc, #200]	; (10030bc <udi_cdc_multi_read_buf+0xfc>)
 1002ff4:	0052      	lsls	r2, r2, #1
 1002ff6:	4413      	add	r3, r2
 1002ff8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 1002ffc:	b29b      	uxth	r3, r3
 1002ffe:	8a7a      	ldrh	r2, [r7, #18]
 1003000:	429a      	cmp	r2, r3
 1003002:	bf2c      	ite	cs
 1003004:	2301      	movcs	r3, #1
 1003006:	2300      	movcc	r3, #0
 1003008:	743b      	strb	r3, [r7, #16]
	cpu_irq_restore(flags);
 100300a:	6978      	ldr	r0, [r7, #20]
 100300c:	4b2c      	ldr	r3, [pc, #176]	; (10030c0 <udi_cdc_multi_read_buf+0x100>)
 100300e:	4798      	blx	r3
	while (again) {
 1003010:	7c3b      	ldrb	r3, [r7, #16]
 1003012:	2b00      	cmp	r3, #0
 1003014:	d009      	beq.n	100302a <udi_cdc_multi_read_buf+0x6a>
		if (!udi_cdc_data_running) {
 1003016:	4b2b      	ldr	r3, [pc, #172]	; (10030c4 <udi_cdc_multi_read_buf+0x104>)
 1003018:	781b      	ldrb	r3, [r3, #0]
 100301a:	b2db      	uxtb	r3, r3
 100301c:	f083 0301 	eor.w	r3, r3, #1
 1003020:	b2db      	uxtb	r3, r3
 1003022:	2b00      	cmp	r3, #0
 1003024:	d0d7      	beq.n	1002fd6 <udi_cdc_multi_read_buf+0x16>
			return size;
 1003026:	687b      	ldr	r3, [r7, #4]
 1003028:	e03d      	b.n	10030a6 <udi_cdc_multi_read_buf+0xe6>
		}
		goto udi_cdc_read_buf_loop_wait;
	}

	// Read data
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
 100302a:	7bfa      	ldrb	r2, [r7, #15]
 100302c:	7c7b      	ldrb	r3, [r7, #17]
 100302e:	4923      	ldr	r1, [pc, #140]	; (10030bc <udi_cdc_multi_read_buf+0xfc>)
 1003030:	0052      	lsls	r2, r2, #1
 1003032:	4413      	add	r3, r2
 1003034:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 1003038:	b29b      	uxth	r3, r3
 100303a:	461a      	mov	r2, r3
 100303c:	8a7b      	ldrh	r3, [r7, #18]
 100303e:	1ad3      	subs	r3, r2, r3
 1003040:	61bb      	str	r3, [r7, #24]
	if (copy_nb>size) {
 1003042:	69ba      	ldr	r2, [r7, #24]
 1003044:	687b      	ldr	r3, [r7, #4]
 1003046:	429a      	cmp	r2, r3
 1003048:	d901      	bls.n	100304e <udi_cdc_multi_read_buf+0x8e>
		copy_nb = size;
 100304a:	687b      	ldr	r3, [r7, #4]
 100304c:	61bb      	str	r3, [r7, #24]
	}
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
 100304e:	7bf9      	ldrb	r1, [r7, #15]
 1003050:	7c7a      	ldrb	r2, [r7, #17]
 1003052:	8a7b      	ldrh	r3, [r7, #18]
 1003054:	0049      	lsls	r1, r1, #1
 1003056:	440a      	add	r2, r1
 1003058:	0192      	lsls	r2, r2, #6
 100305a:	4413      	add	r3, r2
 100305c:	4a1a      	ldr	r2, [pc, #104]	; (10030c8 <udi_cdc_multi_read_buf+0x108>)
 100305e:	4413      	add	r3, r2
 1003060:	69ba      	ldr	r2, [r7, #24]
 1003062:	4619      	mov	r1, r3
 1003064:	69f8      	ldr	r0, [r7, #28]
 1003066:	4b19      	ldr	r3, [pc, #100]	; (10030cc <udi_cdc_multi_read_buf+0x10c>)
 1003068:	4798      	blx	r3
	udi_cdc_rx_pos[port] += copy_nb;
 100306a:	7bfb      	ldrb	r3, [r7, #15]
 100306c:	7bfa      	ldrb	r2, [r7, #15]
 100306e:	4911      	ldr	r1, [pc, #68]	; (10030b4 <udi_cdc_multi_read_buf+0xf4>)
 1003070:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 1003074:	b291      	uxth	r1, r2
 1003076:	69ba      	ldr	r2, [r7, #24]
 1003078:	b292      	uxth	r2, r2
 100307a:	440a      	add	r2, r1
 100307c:	b291      	uxth	r1, r2
 100307e:	4a0d      	ldr	r2, [pc, #52]	; (10030b4 <udi_cdc_multi_read_buf+0xf4>)
 1003080:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	ptr_buf += copy_nb;
 1003084:	69fa      	ldr	r2, [r7, #28]
 1003086:	69bb      	ldr	r3, [r7, #24]
 1003088:	4413      	add	r3, r2
 100308a:	61fb      	str	r3, [r7, #28]
	size -= copy_nb;
 100308c:	687a      	ldr	r2, [r7, #4]
 100308e:	69bb      	ldr	r3, [r7, #24]
 1003090:	1ad3      	subs	r3, r2, r3
 1003092:	607b      	str	r3, [r7, #4]
	udi_cdc_rx_start(port);
 1003094:	7bfb      	ldrb	r3, [r7, #15]
 1003096:	4618      	mov	r0, r3
 1003098:	4b0d      	ldr	r3, [pc, #52]	; (10030d0 <udi_cdc_multi_read_buf+0x110>)
 100309a:	4798      	blx	r3

	if (size) {
 100309c:	687b      	ldr	r3, [r7, #4]
 100309e:	2b00      	cmp	r3, #0
 10030a0:	d000      	beq.n	10030a4 <udi_cdc_multi_read_buf+0xe4>
		goto udi_cdc_read_buf_loop_wait;
 10030a2:	e798      	b.n	1002fd6 <udi_cdc_multi_read_buf+0x16>
	}
	return 0;
 10030a4:	2300      	movs	r3, #0
}
 10030a6:	4618      	mov	r0, r3
 10030a8:	3720      	adds	r7, #32
 10030aa:	46bd      	mov	sp, r7
 10030ac:	bd80      	pop	{r7, pc}
 10030ae:	bf00      	nop
 10030b0:	01002671 	.word	0x01002671
 10030b4:	20001da0 	.word	0x20001da0
 10030b8:	20001d9c 	.word	0x20001d9c
 10030bc:	20001d98 	.word	0x20001d98
 10030c0:	010026c9 	.word	0x010026c9
 10030c4:	20001d14 	.word	0x20001d14
 10030c8:	20001d18 	.word	0x20001d18
 10030cc:	0100c551 	.word	0x0100c551
 10030d0:	01002b25 	.word	0x01002b25

010030d4 <udi_cdc_read_buf>:
{
	return udi_cdc_multi_read_no_polling(0, buf, size);
}

iram_size_t udi_cdc_read_buf(void* buf, iram_size_t size)
{
 10030d4:	b580      	push	{r7, lr}
 10030d6:	b082      	sub	sp, #8
 10030d8:	af00      	add	r7, sp, #0
 10030da:	6078      	str	r0, [r7, #4]
 10030dc:	6039      	str	r1, [r7, #0]
	return udi_cdc_multi_read_buf(0, buf, size);
 10030de:	683a      	ldr	r2, [r7, #0]
 10030e0:	6879      	ldr	r1, [r7, #4]
 10030e2:	2000      	movs	r0, #0
 10030e4:	4b03      	ldr	r3, [pc, #12]	; (10030f4 <udi_cdc_read_buf+0x20>)
 10030e6:	4798      	blx	r3
 10030e8:	4603      	mov	r3, r0
}
 10030ea:	4618      	mov	r0, r3
 10030ec:	3708      	adds	r7, #8
 10030ee:	46bd      	mov	sp, r7
 10030f0:	bd80      	pop	{r7, pc}
 10030f2:	bf00      	nop
 10030f4:	01002fc1 	.word	0x01002fc1

010030f8 <udc_get_string_serial_name>:
	}
#  define USB_DEVICE_SERIAL_NAME_SIZE \
	USB_DEVICE_GET_SERIAL_NAME_LENGTH
#elif defined USB_DEVICE_SERIAL_NAME
	static const uint8_t *udc_get_string_serial_name(void)
	{
 10030f8:	b480      	push	{r7}
 10030fa:	af00      	add	r7, sp, #0
		return (const uint8_t *)USB_DEVICE_SERIAL_NAME;
 10030fc:	4b02      	ldr	r3, [pc, #8]	; (1003108 <udc_get_string_serial_name+0x10>)
	}
 10030fe:	4618      	mov	r0, r3
 1003100:	46bd      	mov	sp, r7
 1003102:	bc80      	pop	{r7}
 1003104:	4770      	bx	lr
 1003106:	bf00      	nop
 1003108:	010119cc 	.word	0x010119cc

0100310c <udc_get_eof_conf>:
 * \brief Returns a value to check the end of USB Configuration descriptor
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
 100310c:	b480      	push	{r7}
 100310e:	af00      	add	r7, sp, #0
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
 1003110:	4b06      	ldr	r3, [pc, #24]	; (100312c <udc_get_eof_conf+0x20>)
 1003112:	681b      	ldr	r3, [r3, #0]
 1003114:	681b      	ldr	r3, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
 1003116:	4a05      	ldr	r2, [pc, #20]	; (100312c <udc_get_eof_conf+0x20>)
 1003118:	6812      	ldr	r2, [r2, #0]
 100311a:	6812      	ldr	r2, [r2, #0]
 100311c:	8852      	ldrh	r2, [r2, #2]
 100311e:	b292      	uxth	r2, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
 1003120:	4413      	add	r3, r2
}
 1003122:	4618      	mov	r0, r3
 1003124:	46bd      	mov	sp, r7
 1003126:	bc80      	pop	{r7}
 1003128:	4770      	bx	lr
 100312a:	bf00      	nop
 100312c:	20001e48 	.word	0x20001e48

01003130 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
 1003130:	b580      	push	{r7, lr}
 1003132:	b084      	sub	sp, #16
 1003134:	af00      	add	r7, sp, #0
 1003136:	6078      	str	r0, [r7, #4]
 1003138:	460b      	mov	r3, r1
 100313a:	70fb      	strb	r3, [r7, #3]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
 100313c:	4b12      	ldr	r3, [pc, #72]	; (1003188 <udc_next_desc_in_iface+0x58>)
 100313e:	4798      	blx	r3
 1003140:	60f8      	str	r0, [r7, #12]
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
 1003142:	687b      	ldr	r3, [r7, #4]
 1003144:	781b      	ldrb	r3, [r3, #0]
 1003146:	461a      	mov	r2, r3
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
 1003148:	687b      	ldr	r3, [r7, #4]
 100314a:	4413      	add	r3, r2
 100314c:	607b      	str	r3, [r7, #4]
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
 100314e:	e010      	b.n	1003172 <udc_next_desc_in_iface+0x42>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
 1003150:	687b      	ldr	r3, [r7, #4]
 1003152:	785b      	ldrb	r3, [r3, #1]
 1003154:	2b04      	cmp	r3, #4
 1003156:	d011      	beq.n	100317c <udc_next_desc_in_iface+0x4c>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
 1003158:	687b      	ldr	r3, [r7, #4]
 100315a:	785b      	ldrb	r3, [r3, #1]
 100315c:	78fa      	ldrb	r2, [r7, #3]
 100315e:	429a      	cmp	r2, r3
 1003160:	d101      	bne.n	1003166 <udc_next_desc_in_iface+0x36>
			return desc; // Specific descriptor found
 1003162:	687b      	ldr	r3, [r7, #4]
 1003164:	e00c      	b.n	1003180 <udc_next_desc_in_iface+0x50>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
 1003166:	687b      	ldr	r3, [r7, #4]
 1003168:	781b      	ldrb	r3, [r3, #0]
 100316a:	461a      	mov	r2, r3
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
 100316c:	687b      	ldr	r3, [r7, #4]
 100316e:	4413      	add	r3, r2
 1003170:	607b      	str	r3, [r7, #4]
	while (ptr_eof_desc > desc) {
 1003172:	68fa      	ldr	r2, [r7, #12]
 1003174:	687b      	ldr	r3, [r7, #4]
 1003176:	429a      	cmp	r2, r3
 1003178:	d8ea      	bhi.n	1003150 <udc_next_desc_in_iface+0x20>
 100317a:	e000      	b.n	100317e <udc_next_desc_in_iface+0x4e>
			break; // End of global interface descriptor
 100317c:	bf00      	nop
	}
	return NULL; // No specific descriptor found
 100317e:	2300      	movs	r3, #0
}
 1003180:	4618      	mov	r0, r3
 1003182:	3710      	adds	r7, #16
 1003184:	46bd      	mov	sp, r7
 1003186:	bd80      	pop	{r7, pc}
 1003188:	0100310d 	.word	0x0100310d

0100318c <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
 100318c:	b580      	push	{r7, lr}
 100318e:	b084      	sub	sp, #16
 1003190:	af00      	add	r7, sp, #0
 1003192:	4603      	mov	r3, r0
 1003194:	460a      	mov	r2, r1
 1003196:	71fb      	strb	r3, [r7, #7]
 1003198:	4613      	mov	r3, r2
 100319a:	71bb      	strb	r3, [r7, #6]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
 100319c:	4b1e      	ldr	r3, [pc, #120]	; (1003218 <udc_update_iface_desc+0x8c>)
 100319e:	781b      	ldrb	r3, [r3, #0]
 10031a0:	2b00      	cmp	r3, #0
 10031a2:	d101      	bne.n	10031a8 <udc_update_iface_desc+0x1c>
		return false;
 10031a4:	2300      	movs	r3, #0
 10031a6:	e032      	b.n	100320e <udc_update_iface_desc+0x82>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
 10031a8:	4b1c      	ldr	r3, [pc, #112]	; (100321c <udc_update_iface_desc+0x90>)
 10031aa:	681b      	ldr	r3, [r3, #0]
 10031ac:	681b      	ldr	r3, [r3, #0]
 10031ae:	791b      	ldrb	r3, [r3, #4]
 10031b0:	79fa      	ldrb	r2, [r7, #7]
 10031b2:	429a      	cmp	r2, r3
 10031b4:	d301      	bcc.n	10031ba <udc_update_iface_desc+0x2e>
		return false;
 10031b6:	2300      	movs	r3, #0
 10031b8:	e029      	b.n	100320e <udc_update_iface_desc+0x82>
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;
 10031ba:	4b18      	ldr	r3, [pc, #96]	; (100321c <udc_update_iface_desc+0x90>)
 10031bc:	681b      	ldr	r3, [r3, #0]
 10031be:	681b      	ldr	r3, [r3, #0]
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
 10031c0:	4a17      	ldr	r2, [pc, #92]	; (1003220 <udc_update_iface_desc+0x94>)
 10031c2:	6013      	str	r3, [r2, #0]

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
 10031c4:	4b17      	ldr	r3, [pc, #92]	; (1003224 <udc_update_iface_desc+0x98>)
 10031c6:	4798      	blx	r3
 10031c8:	60f8      	str	r0, [r7, #12]
	while (ptr_end_desc >
 10031ca:	e01a      	b.n	1003202 <udc_update_iface_desc+0x76>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
 10031cc:	4b14      	ldr	r3, [pc, #80]	; (1003220 <udc_update_iface_desc+0x94>)
 10031ce:	681b      	ldr	r3, [r3, #0]
 10031d0:	785b      	ldrb	r3, [r3, #1]
 10031d2:	2b04      	cmp	r3, #4
 10031d4:	d10d      	bne.n	10031f2 <udc_update_iface_desc+0x66>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
 10031d6:	4b12      	ldr	r3, [pc, #72]	; (1003220 <udc_update_iface_desc+0x94>)
 10031d8:	681b      	ldr	r3, [r3, #0]
 10031da:	789b      	ldrb	r3, [r3, #2]
 10031dc:	79fa      	ldrb	r2, [r7, #7]
 10031de:	429a      	cmp	r2, r3
 10031e0:	d107      	bne.n	10031f2 <udc_update_iface_desc+0x66>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
 10031e2:	4b0f      	ldr	r3, [pc, #60]	; (1003220 <udc_update_iface_desc+0x94>)
 10031e4:	681b      	ldr	r3, [r3, #0]
 10031e6:	78db      	ldrb	r3, [r3, #3]
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
 10031e8:	79ba      	ldrb	r2, [r7, #6]
 10031ea:	429a      	cmp	r2, r3
 10031ec:	d101      	bne.n	10031f2 <udc_update_iface_desc+0x66>
				return true; // Interface found
 10031ee:	2301      	movs	r3, #1
 10031f0:	e00d      	b.n	100320e <udc_update_iface_desc+0x82>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
 10031f2:	4b0b      	ldr	r3, [pc, #44]	; (1003220 <udc_update_iface_desc+0x94>)
 10031f4:	681b      	ldr	r3, [r3, #0]
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
 10031f6:	4a0a      	ldr	r2, [pc, #40]	; (1003220 <udc_update_iface_desc+0x94>)
 10031f8:	6812      	ldr	r2, [r2, #0]
 10031fa:	7812      	ldrb	r2, [r2, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
 10031fc:	4413      	add	r3, r2
 10031fe:	4a08      	ldr	r2, [pc, #32]	; (1003220 <udc_update_iface_desc+0x94>)
 1003200:	6013      	str	r3, [r2, #0]
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
 1003202:	4b07      	ldr	r3, [pc, #28]	; (1003220 <udc_update_iface_desc+0x94>)
 1003204:	681b      	ldr	r3, [r3, #0]
	while (ptr_end_desc >
 1003206:	68fa      	ldr	r2, [r7, #12]
 1003208:	429a      	cmp	r2, r3
 100320a:	d8df      	bhi.n	10031cc <udc_update_iface_desc+0x40>
	}
	return false; // Interface not found
 100320c:	2300      	movs	r3, #0
}
 100320e:	4618      	mov	r0, r3
 1003210:	3710      	adds	r7, #16
 1003212:	46bd      	mov	sp, r7
 1003214:	bd80      	pop	{r7, pc}
 1003216:	bf00      	nop
 1003218:	20001e44 	.word	0x20001e44
 100321c:	20001e48 	.word	0x20001e48
 1003220:	20001e4c 	.word	0x20001e4c
 1003224:	0100310d 	.word	0x0100310d

01003228 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
 1003228:	b580      	push	{r7, lr}
 100322a:	b084      	sub	sp, #16
 100322c:	af00      	add	r7, sp, #0
 100322e:	4603      	mov	r3, r0
 1003230:	71fb      	strb	r3, [r7, #7]
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
 1003232:	79fb      	ldrb	r3, [r7, #7]
 1003234:	2100      	movs	r1, #0
 1003236:	4618      	mov	r0, r3
 1003238:	4b1e      	ldr	r3, [pc, #120]	; (10032b4 <udc_iface_disable+0x8c>)
 100323a:	4798      	blx	r3
 100323c:	4603      	mov	r3, r0
 100323e:	f083 0301 	eor.w	r3, r3, #1
 1003242:	b2db      	uxtb	r3, r3
 1003244:	2b00      	cmp	r3, #0
 1003246:	d001      	beq.n	100324c <udc_iface_disable+0x24>
		return false;
 1003248:	2300      	movs	r3, #0
 100324a:	e02f      	b.n	10032ac <udc_iface_disable+0x84>
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
 100324c:	4b1a      	ldr	r3, [pc, #104]	; (10032b8 <udc_iface_disable+0x90>)
 100324e:	681b      	ldr	r3, [r3, #0]
 1003250:	685a      	ldr	r2, [r3, #4]
 1003252:	79fb      	ldrb	r3, [r7, #7]
 1003254:	009b      	lsls	r3, r3, #2
 1003256:	4413      	add	r3, r2
 1003258:	681b      	ldr	r3, [r3, #0]
 100325a:	60bb      	str	r3, [r7, #8]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
 100325c:	68bb      	ldr	r3, [r7, #8]
 100325e:	68db      	ldr	r3, [r3, #12]
 1003260:	4798      	blx	r3
 1003262:	4603      	mov	r3, r0
 1003264:	461a      	mov	r2, r3
 1003266:	79fb      	ldrb	r3, [r7, #7]
 1003268:	4611      	mov	r1, r2
 100326a:	4618      	mov	r0, r3
 100326c:	4b11      	ldr	r3, [pc, #68]	; (10032b4 <udc_iface_disable+0x8c>)
 100326e:	4798      	blx	r3
 1003270:	4603      	mov	r3, r0
 1003272:	f083 0301 	eor.w	r3, r3, #1
 1003276:	b2db      	uxtb	r3, r3
 1003278:	2b00      	cmp	r3, #0
 100327a:	d001      	beq.n	1003280 <udc_iface_disable+0x58>
		return false;
 100327c:	2300      	movs	r3, #0
 100327e:	e015      	b.n	10032ac <udc_iface_disable+0x84>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
 1003280:	4b0e      	ldr	r3, [pc, #56]	; (10032bc <udc_iface_disable+0x94>)
 1003282:	681b      	ldr	r3, [r3, #0]
 1003284:	60fb      	str	r3, [r7, #12]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
 1003286:	2105      	movs	r1, #5
 1003288:	68f8      	ldr	r0, [r7, #12]
 100328a:	4b0d      	ldr	r3, [pc, #52]	; (10032c0 <udc_iface_disable+0x98>)
 100328c:	4798      	blx	r3
 100328e:	60f8      	str	r0, [r7, #12]
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
 1003290:	68fb      	ldr	r3, [r7, #12]
 1003292:	2b00      	cmp	r3, #0
 1003294:	d005      	beq.n	10032a2 <udc_iface_disable+0x7a>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
 1003296:	68fb      	ldr	r3, [r7, #12]
 1003298:	789b      	ldrb	r3, [r3, #2]
 100329a:	4618      	mov	r0, r3
 100329c:	4b09      	ldr	r3, [pc, #36]	; (10032c4 <udc_iface_disable+0x9c>)
 100329e:	4798      	blx	r3
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
 10032a0:	e7f1      	b.n	1003286 <udc_iface_disable+0x5e>
				break;
 10032a2:	bf00      	nop
		}
	}
#endif

	// Disable interface
	udi_api->disable();
 10032a4:	68bb      	ldr	r3, [r7, #8]
 10032a6:	685b      	ldr	r3, [r3, #4]
 10032a8:	4798      	blx	r3
	return true;
 10032aa:	2301      	movs	r3, #1
}
 10032ac:	4618      	mov	r0, r3
 10032ae:	3710      	adds	r7, #16
 10032b0:	46bd      	mov	sp, r7
 10032b2:	bd80      	pop	{r7, pc}
 10032b4:	0100318d 	.word	0x0100318d
 10032b8:	20001e48 	.word	0x20001e48
 10032bc:	20001e4c 	.word	0x20001e4c
 10032c0:	01003131 	.word	0x01003131
 10032c4:	01005581 	.word	0x01005581

010032c8 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
 10032c8:	b580      	push	{r7, lr}
 10032ca:	b084      	sub	sp, #16
 10032cc:	af00      	add	r7, sp, #0
 10032ce:	4603      	mov	r3, r0
 10032d0:	460a      	mov	r2, r1
 10032d2:	71fb      	strb	r3, [r7, #7]
 10032d4:	4613      	mov	r3, r2
 10032d6:	71bb      	strb	r3, [r7, #6]
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
 10032d8:	79ba      	ldrb	r2, [r7, #6]
 10032da:	79fb      	ldrb	r3, [r7, #7]
 10032dc:	4611      	mov	r1, r2
 10032de:	4618      	mov	r0, r3
 10032e0:	4b1a      	ldr	r3, [pc, #104]	; (100334c <udc_iface_enable+0x84>)
 10032e2:	4798      	blx	r3
 10032e4:	4603      	mov	r3, r0
 10032e6:	f083 0301 	eor.w	r3, r3, #1
 10032ea:	b2db      	uxtb	r3, r3
 10032ec:	2b00      	cmp	r3, #0
 10032ee:	d001      	beq.n	10032f4 <udc_iface_enable+0x2c>
		return false;
 10032f0:	2300      	movs	r3, #0
 10032f2:	e027      	b.n	1003344 <udc_iface_enable+0x7c>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
 10032f4:	4b16      	ldr	r3, [pc, #88]	; (1003350 <udc_iface_enable+0x88>)
 10032f6:	681b      	ldr	r3, [r3, #0]
 10032f8:	60fb      	str	r3, [r7, #12]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
 10032fa:	2105      	movs	r1, #5
 10032fc:	68f8      	ldr	r0, [r7, #12]
 10032fe:	4b15      	ldr	r3, [pc, #84]	; (1003354 <udc_iface_enable+0x8c>)
 1003300:	4798      	blx	r3
 1003302:	60f8      	str	r0, [r7, #12]
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
 1003304:	68fb      	ldr	r3, [r7, #12]
 1003306:	2b00      	cmp	r3, #0
 1003308:	d011      	beq.n	100332e <udc_iface_enable+0x66>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
 100330a:	68fb      	ldr	r3, [r7, #12]
 100330c:	7898      	ldrb	r0, [r3, #2]
 100330e:	68fb      	ldr	r3, [r7, #12]
 1003310:	78d9      	ldrb	r1, [r3, #3]
 1003312:	68fb      	ldr	r3, [r7, #12]
 1003314:	889b      	ldrh	r3, [r3, #4]
 1003316:	b29b      	uxth	r3, r3
 1003318:	461a      	mov	r2, r3
 100331a:	4b0f      	ldr	r3, [pc, #60]	; (1003358 <udc_iface_enable+0x90>)
 100331c:	4798      	blx	r3
 100331e:	4603      	mov	r3, r0
 1003320:	f083 0301 	eor.w	r3, r3, #1
 1003324:	b2db      	uxtb	r3, r3
 1003326:	2b00      	cmp	r3, #0
 1003328:	d0e7      	beq.n	10032fa <udc_iface_enable+0x32>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
 100332a:	2300      	movs	r3, #0
 100332c:	e00a      	b.n	1003344 <udc_iface_enable+0x7c>
			break;
 100332e:	bf00      	nop
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
 1003330:	4b0a      	ldr	r3, [pc, #40]	; (100335c <udc_iface_enable+0x94>)
 1003332:	681b      	ldr	r3, [r3, #0]
 1003334:	685a      	ldr	r2, [r3, #4]
 1003336:	79fb      	ldrb	r3, [r7, #7]
 1003338:	009b      	lsls	r3, r3, #2
 100333a:	4413      	add	r3, r2
 100333c:	681b      	ldr	r3, [r3, #0]
 100333e:	681b      	ldr	r3, [r3, #0]
 1003340:	4798      	blx	r3
 1003342:	4603      	mov	r3, r0
}
 1003344:	4618      	mov	r0, r3
 1003346:	3710      	adds	r7, #16
 1003348:	46bd      	mov	sp, r7
 100334a:	bd80      	pop	{r7, pc}
 100334c:	0100318d 	.word	0x0100318d
 1003350:	20001e4c 	.word	0x20001e4c
 1003354:	01003131 	.word	0x01003131
 1003358:	01005395 	.word	0x01005395
 100335c:	20001e48 	.word	0x20001e48

01003360 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
 1003360:	b580      	push	{r7, lr}
 1003362:	b082      	sub	sp, #8
 1003364:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
 1003366:	4b0f      	ldr	r3, [pc, #60]	; (10033a4 <udc_reset+0x44>)
 1003368:	781b      	ldrb	r3, [r3, #0]
 100336a:	2b00      	cmp	r3, #0
 100336c:	d010      	beq.n	1003390 <udc_reset+0x30>
		for (iface_num = 0;
 100336e:	2300      	movs	r3, #0
 1003370:	71fb      	strb	r3, [r7, #7]
 1003372:	e006      	b.n	1003382 <udc_reset+0x22>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
 1003374:	79fb      	ldrb	r3, [r7, #7]
 1003376:	4618      	mov	r0, r3
 1003378:	4b0b      	ldr	r3, [pc, #44]	; (10033a8 <udc_reset+0x48>)
 100337a:	4798      	blx	r3
				iface_num++) {
 100337c:	79fb      	ldrb	r3, [r7, #7]
 100337e:	3301      	adds	r3, #1
 1003380:	71fb      	strb	r3, [r7, #7]
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
 1003382:	4b0a      	ldr	r3, [pc, #40]	; (10033ac <udc_reset+0x4c>)
 1003384:	681b      	ldr	r3, [r3, #0]
 1003386:	681b      	ldr	r3, [r3, #0]
 1003388:	791b      	ldrb	r3, [r3, #4]
		for (iface_num = 0;
 100338a:	79fa      	ldrb	r2, [r7, #7]
 100338c:	429a      	cmp	r2, r3
 100338e:	d3f1      	bcc.n	1003374 <udc_reset+0x14>
		}
	}
	udc_num_configuration = 0;
 1003390:	4b04      	ldr	r3, [pc, #16]	; (10033a4 <udc_reset+0x44>)
 1003392:	2200      	movs	r2, #0
 1003394:	701a      	strb	r2, [r3, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
 1003396:	4b06      	ldr	r3, [pc, #24]	; (10033b0 <udc_reset+0x50>)
 1003398:	2201      	movs	r2, #1
 100339a:	801a      	strh	r2, [r3, #0]
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
 100339c:	bf00      	nop
 100339e:	3708      	adds	r7, #8
 10033a0:	46bd      	mov	sp, r7
 10033a2:	bd80      	pop	{r7, pc}
 10033a4:	20001e44 	.word	0x20001e44
 10033a8:	01003229 	.word	0x01003229
 10033ac:	20001e48 	.word	0x20001e48
 10033b0:	20001e3c 	.word	0x20001e3c

010033b4 <udc_sof_notify>:

void udc_sof_notify(void)
{
 10033b4:	b580      	push	{r7, lr}
 10033b6:	b082      	sub	sp, #8
 10033b8:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
 10033ba:	4b14      	ldr	r3, [pc, #80]	; (100340c <udc_sof_notify+0x58>)
 10033bc:	781b      	ldrb	r3, [r3, #0]
 10033be:	2b00      	cmp	r3, #0
 10033c0:	d01f      	beq.n	1003402 <udc_sof_notify+0x4e>
		for (iface_num = 0;
 10033c2:	2300      	movs	r3, #0
 10033c4:	71fb      	strb	r3, [r7, #7]
 10033c6:	e015      	b.n	10033f4 <udc_sof_notify+0x40>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
 10033c8:	4b11      	ldr	r3, [pc, #68]	; (1003410 <udc_sof_notify+0x5c>)
 10033ca:	681b      	ldr	r3, [r3, #0]
 10033cc:	685a      	ldr	r2, [r3, #4]
 10033ce:	79fb      	ldrb	r3, [r7, #7]
 10033d0:	009b      	lsls	r3, r3, #2
 10033d2:	4413      	add	r3, r2
 10033d4:	681b      	ldr	r3, [r3, #0]
 10033d6:	691b      	ldr	r3, [r3, #16]
 10033d8:	2b00      	cmp	r3, #0
 10033da:	d008      	beq.n	10033ee <udc_sof_notify+0x3a>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
 10033dc:	4b0c      	ldr	r3, [pc, #48]	; (1003410 <udc_sof_notify+0x5c>)
 10033de:	681b      	ldr	r3, [r3, #0]
 10033e0:	685a      	ldr	r2, [r3, #4]
 10033e2:	79fb      	ldrb	r3, [r7, #7]
 10033e4:	009b      	lsls	r3, r3, #2
 10033e6:	4413      	add	r3, r2
 10033e8:	681b      	ldr	r3, [r3, #0]
 10033ea:	691b      	ldr	r3, [r3, #16]
 10033ec:	4798      	blx	r3
				iface_num++) {
 10033ee:	79fb      	ldrb	r3, [r7, #7]
 10033f0:	3301      	adds	r3, #1
 10033f2:	71fb      	strb	r3, [r7, #7]
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
 10033f4:	4b06      	ldr	r3, [pc, #24]	; (1003410 <udc_sof_notify+0x5c>)
 10033f6:	681b      	ldr	r3, [r3, #0]
 10033f8:	681b      	ldr	r3, [r3, #0]
 10033fa:	791b      	ldrb	r3, [r3, #4]
		for (iface_num = 0;
 10033fc:	79fa      	ldrb	r2, [r7, #7]
 10033fe:	429a      	cmp	r2, r3
 1003400:	d3e2      	bcc.n	10033c8 <udc_sof_notify+0x14>
			}
		}
	}
}
 1003402:	bf00      	nop
 1003404:	3708      	adds	r7, #8
 1003406:	46bd      	mov	sp, r7
 1003408:	bd80      	pop	{r7, pc}
 100340a:	bf00      	nop
 100340c:	20001e44 	.word	0x20001e44
 1003410:	20001e48 	.word	0x20001e48

01003414 <udc_req_std_dev_get_status>:
 * \brief Standard device request to get device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
 1003414:	b580      	push	{r7, lr}
 1003416:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
 1003418:	4b06      	ldr	r3, [pc, #24]	; (1003434 <udc_req_std_dev_get_status+0x20>)
 100341a:	88db      	ldrh	r3, [r3, #6]
 100341c:	2b02      	cmp	r3, #2
 100341e:	d001      	beq.n	1003424 <udc_req_std_dev_get_status+0x10>
		return false;
 1003420:	2300      	movs	r3, #0
 1003422:	e004      	b.n	100342e <udc_req_std_dev_get_status+0x1a>
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
 1003424:	2102      	movs	r1, #2
 1003426:	4804      	ldr	r0, [pc, #16]	; (1003438 <udc_req_std_dev_get_status+0x24>)
 1003428:	4b04      	ldr	r3, [pc, #16]	; (100343c <udc_req_std_dev_get_status+0x28>)
 100342a:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
 100342c:	2301      	movs	r3, #1
}
 100342e:	4618      	mov	r0, r3
 1003430:	bd80      	pop	{r7, pc}
 1003432:	bf00      	nop
 1003434:	20008304 	.word	0x20008304
 1003438:	20001e3c 	.word	0x20001e3c
 100343c:	0100536d 	.word	0x0100536d

01003440 <udc_req_std_ep_get_status>:
 * \brief Standard endpoint request to get endpoint status
 *
 * \return true if success
 */
static bool udc_req_std_ep_get_status(void)
{
 1003440:	b580      	push	{r7, lr}
 1003442:	af00      	add	r7, sp, #0
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
 1003444:	4b0b      	ldr	r3, [pc, #44]	; (1003474 <udc_req_std_ep_get_status+0x34>)
 1003446:	88db      	ldrh	r3, [r3, #6]
 1003448:	2b02      	cmp	r3, #2
 100344a:	d001      	beq.n	1003450 <udc_req_std_ep_get_status+0x10>
		return false;
 100344c:	2300      	movs	r3, #0
 100344e:	e00e      	b.n	100346e <udc_req_std_ep_get_status+0x2e>
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
 1003450:	4b08      	ldr	r3, [pc, #32]	; (1003474 <udc_req_std_ep_get_status+0x34>)
 1003452:	889b      	ldrh	r3, [r3, #4]
 1003454:	b2db      	uxtb	r3, r3
 1003456:	4618      	mov	r0, r3
 1003458:	4b07      	ldr	r3, [pc, #28]	; (1003478 <udc_req_std_ep_get_status+0x38>)
 100345a:	4798      	blx	r3
 100345c:	4603      	mov	r3, r0
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
 100345e:	b29a      	uxth	r2, r3
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
 1003460:	4b06      	ldr	r3, [pc, #24]	; (100347c <udc_req_std_ep_get_status+0x3c>)
 1003462:	801a      	strh	r2, [r3, #0]

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
 1003464:	2102      	movs	r1, #2
 1003466:	4805      	ldr	r0, [pc, #20]	; (100347c <udc_req_std_ep_get_status+0x3c>)
 1003468:	4b05      	ldr	r3, [pc, #20]	; (1003480 <udc_req_std_ep_get_status+0x40>)
 100346a:	4798      	blx	r3
			sizeof(udc_ep_status));
	return true;
 100346c:	2301      	movs	r3, #1
}
 100346e:	4618      	mov	r0, r3
 1003470:	bd80      	pop	{r7, pc}
 1003472:	bf00      	nop
 1003474:	20008304 	.word	0x20008304
 1003478:	010055f1 	.word	0x010055f1
 100347c:	20001e50 	.word	0x20001e50
 1003480:	0100536d 	.word	0x0100536d

01003484 <udc_req_std_dev_clear_feature>:
 * \brief Standard device request to change device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
 1003484:	b480      	push	{r7}
 1003486:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
 1003488:	4b0b      	ldr	r3, [pc, #44]	; (10034b8 <udc_req_std_dev_clear_feature+0x34>)
 100348a:	88db      	ldrh	r3, [r3, #6]
 100348c:	2b00      	cmp	r3, #0
 100348e:	d001      	beq.n	1003494 <udc_req_std_dev_clear_feature+0x10>
		return false;
 1003490:	2300      	movs	r3, #0
 1003492:	e00d      	b.n	10034b0 <udc_req_std_dev_clear_feature+0x2c>
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
 1003494:	4b08      	ldr	r3, [pc, #32]	; (10034b8 <udc_req_std_dev_clear_feature+0x34>)
 1003496:	885b      	ldrh	r3, [r3, #2]
 1003498:	2b01      	cmp	r3, #1
 100349a:	d108      	bne.n	10034ae <udc_req_std_dev_clear_feature+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
 100349c:	4b07      	ldr	r3, [pc, #28]	; (10034bc <udc_req_std_dev_clear_feature+0x38>)
 100349e:	881b      	ldrh	r3, [r3, #0]
 10034a0:	f023 0302 	bic.w	r3, r3, #2
 10034a4:	b29a      	uxth	r2, r3
 10034a6:	4b05      	ldr	r3, [pc, #20]	; (10034bc <udc_req_std_dev_clear_feature+0x38>)
 10034a8:	801a      	strh	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
 10034aa:	2301      	movs	r3, #1
 10034ac:	e000      	b.n	10034b0 <udc_req_std_dev_clear_feature+0x2c>
	}
	return false;
 10034ae:	2300      	movs	r3, #0
}
 10034b0:	4618      	mov	r0, r3
 10034b2:	46bd      	mov	sp, r7
 10034b4:	bc80      	pop	{r7}
 10034b6:	4770      	bx	lr
 10034b8:	20008304 	.word	0x20008304
 10034bc:	20001e3c 	.word	0x20001e3c

010034c0 <udc_req_std_ep_clear_feature>:
 * \brief Standard endpoint request to clear endpoint feature
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
 10034c0:	b580      	push	{r7, lr}
 10034c2:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
 10034c4:	4b0a      	ldr	r3, [pc, #40]	; (10034f0 <udc_req_std_ep_clear_feature+0x30>)
 10034c6:	88db      	ldrh	r3, [r3, #6]
 10034c8:	2b00      	cmp	r3, #0
 10034ca:	d001      	beq.n	10034d0 <udc_req_std_ep_clear_feature+0x10>
		return false;
 10034cc:	2300      	movs	r3, #0
 10034ce:	e00c      	b.n	10034ea <udc_req_std_ep_clear_feature+0x2a>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
 10034d0:	4b07      	ldr	r3, [pc, #28]	; (10034f0 <udc_req_std_ep_clear_feature+0x30>)
 10034d2:	885b      	ldrh	r3, [r3, #2]
 10034d4:	2b00      	cmp	r3, #0
 10034d6:	d107      	bne.n	10034e8 <udc_req_std_ep_clear_feature+0x28>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
 10034d8:	4b05      	ldr	r3, [pc, #20]	; (10034f0 <udc_req_std_ep_clear_feature+0x30>)
 10034da:	889b      	ldrh	r3, [r3, #4]
 10034dc:	b2db      	uxtb	r3, r3
 10034de:	4618      	mov	r0, r3
 10034e0:	4b04      	ldr	r3, [pc, #16]	; (10034f4 <udc_req_std_ep_clear_feature+0x34>)
 10034e2:	4798      	blx	r3
 10034e4:	4603      	mov	r3, r0
 10034e6:	e000      	b.n	10034ea <udc_req_std_ep_clear_feature+0x2a>
	}
	return false;
 10034e8:	2300      	movs	r3, #0
}
 10034ea:	4618      	mov	r0, r3
 10034ec:	bd80      	pop	{r7, pc}
 10034ee:	bf00      	nop
 10034f0:	20008304 	.word	0x20008304
 10034f4:	01005755 	.word	0x01005755

010034f8 <udc_req_std_dev_set_feature>:
 * \brief Standard device request to set a feature
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
 10034f8:	b480      	push	{r7}
 10034fa:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
 10034fc:	4b08      	ldr	r3, [pc, #32]	; (1003520 <udc_req_std_dev_set_feature+0x28>)
 10034fe:	88db      	ldrh	r3, [r3, #6]
 1003500:	2b00      	cmp	r3, #0
 1003502:	d001      	beq.n	1003508 <udc_req_std_dev_set_feature+0x10>
		return false;
 1003504:	2300      	movs	r3, #0
 1003506:	e007      	b.n	1003518 <udc_req_std_dev_set_feature+0x20>
	}

	switch (udd_g_ctrlreq.req.wValue) {
 1003508:	4b05      	ldr	r3, [pc, #20]	; (1003520 <udc_req_std_dev_set_feature+0x28>)
 100350a:	885b      	ldrh	r3, [r3, #2]
 100350c:	2b01      	cmp	r3, #1
 100350e:	d002      	beq.n	1003516 <udc_req_std_dev_set_feature+0x1e>
			break;
		}
		break;
#endif
	default:
		break;
 1003510:	bf00      	nop
	}
	return false;
 1003512:	2300      	movs	r3, #0
 1003514:	e000      	b.n	1003518 <udc_req_std_dev_set_feature+0x20>
		return false;
 1003516:	2300      	movs	r3, #0
}
 1003518:	4618      	mov	r0, r3
 100351a:	46bd      	mov	sp, r7
 100351c:	bc80      	pop	{r7}
 100351e:	4770      	bx	lr
 1003520:	20008304 	.word	0x20008304

01003524 <udc_req_std_ep_set_feature>:
 *
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
 1003524:	b580      	push	{r7, lr}
 1003526:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
 1003528:	4b0d      	ldr	r3, [pc, #52]	; (1003560 <udc_req_std_ep_set_feature+0x3c>)
 100352a:	88db      	ldrh	r3, [r3, #6]
 100352c:	2b00      	cmp	r3, #0
 100352e:	d001      	beq.n	1003534 <udc_req_std_ep_set_feature+0x10>
		return false;
 1003530:	2300      	movs	r3, #0
 1003532:	e012      	b.n	100355a <udc_req_std_ep_set_feature+0x36>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
 1003534:	4b0a      	ldr	r3, [pc, #40]	; (1003560 <udc_req_std_ep_set_feature+0x3c>)
 1003536:	885b      	ldrh	r3, [r3, #2]
 1003538:	2b00      	cmp	r3, #0
 100353a:	d10d      	bne.n	1003558 <udc_req_std_ep_set_feature+0x34>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
 100353c:	4b08      	ldr	r3, [pc, #32]	; (1003560 <udc_req_std_ep_set_feature+0x3c>)
 100353e:	889b      	ldrh	r3, [r3, #4]
 1003540:	b2db      	uxtb	r3, r3
 1003542:	4618      	mov	r0, r3
 1003544:	4b07      	ldr	r3, [pc, #28]	; (1003564 <udc_req_std_ep_set_feature+0x40>)
 1003546:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
 1003548:	4b05      	ldr	r3, [pc, #20]	; (1003560 <udc_req_std_ep_set_feature+0x3c>)
 100354a:	889b      	ldrh	r3, [r3, #4]
 100354c:	b2db      	uxtb	r3, r3
 100354e:	4618      	mov	r0, r3
 1003550:	4b05      	ldr	r3, [pc, #20]	; (1003568 <udc_req_std_ep_set_feature+0x44>)
 1003552:	4798      	blx	r3
 1003554:	4603      	mov	r3, r0
 1003556:	e000      	b.n	100355a <udc_req_std_ep_set_feature+0x36>
	}
	return false;
 1003558:	2300      	movs	r3, #0
}
 100355a:	4618      	mov	r0, r3
 100355c:	bd80      	pop	{r7, pc}
 100355e:	bf00      	nop
 1003560:	20008304 	.word	0x20008304
 1003564:	010059d9 	.word	0x010059d9
 1003568:	01005661 	.word	0x01005661

0100356c <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
 100356c:	b580      	push	{r7, lr}
 100356e:	af00      	add	r7, sp, #0
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
 1003570:	4b05      	ldr	r3, [pc, #20]	; (1003588 <udc_valid_address+0x1c>)
 1003572:	885b      	ldrh	r3, [r3, #2]
 1003574:	b2db      	uxtb	r3, r3
 1003576:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 100357a:	b2db      	uxtb	r3, r3
 100357c:	4618      	mov	r0, r3
 100357e:	4b03      	ldr	r3, [pc, #12]	; (100358c <udc_valid_address+0x20>)
 1003580:	4798      	blx	r3
}
 1003582:	bf00      	nop
 1003584:	bd80      	pop	{r7, pc}
 1003586:	bf00      	nop
 1003588:	20008304 	.word	0x20008304
 100358c:	010052b1 	.word	0x010052b1

01003590 <udc_req_std_dev_set_address>:
 * \brief Standard device request to set device address
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
 1003590:	b480      	push	{r7}
 1003592:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
 1003594:	4b06      	ldr	r3, [pc, #24]	; (10035b0 <udc_req_std_dev_set_address+0x20>)
 1003596:	88db      	ldrh	r3, [r3, #6]
 1003598:	2b00      	cmp	r3, #0
 100359a:	d001      	beq.n	10035a0 <udc_req_std_dev_set_address+0x10>
		return false;
 100359c:	2300      	movs	r3, #0
 100359e:	e003      	b.n	10035a8 <udc_req_std_dev_set_address+0x18>
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
 10035a0:	4b03      	ldr	r3, [pc, #12]	; (10035b0 <udc_req_std_dev_set_address+0x20>)
 10035a2:	4a04      	ldr	r2, [pc, #16]	; (10035b4 <udc_req_std_dev_set_address+0x24>)
 10035a4:	611a      	str	r2, [r3, #16]
	return true;
 10035a6:	2301      	movs	r3, #1
}
 10035a8:	4618      	mov	r0, r3
 10035aa:	46bd      	mov	sp, r7
 10035ac:	bc80      	pop	{r7}
 10035ae:	4770      	bx	lr
 10035b0:	20008304 	.word	0x20008304
 10035b4:	0100356d 	.word	0x0100356d

010035b8 <udc_req_std_dev_get_str_desc>:
 * \brief Standard device request to get device string descriptor
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_str_desc(void)
{
 10035b8:	b580      	push	{r7, lr}
 10035ba:	b084      	sub	sp, #16
 10035bc:	af00      	add	r7, sp, #0
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;
 10035be:	2300      	movs	r3, #0
 10035c0:	71fb      	strb	r3, [r7, #7]

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
 10035c2:	4b29      	ldr	r3, [pc, #164]	; (1003668 <udc_req_std_dev_get_str_desc+0xb0>)
 10035c4:	885b      	ldrh	r3, [r3, #2]
 10035c6:	b2db      	uxtb	r3, r3
 10035c8:	2b03      	cmp	r3, #3
 10035ca:	d820      	bhi.n	100360e <udc_req_std_dev_get_str_desc+0x56>
 10035cc:	a201      	add	r2, pc, #4	; (adr r2, 10035d4 <udc_req_std_dev_get_str_desc+0x1c>)
 10035ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 10035d2:	bf00      	nop
 10035d4:	010035e5 	.word	0x010035e5
 10035d8:	010035ef 	.word	0x010035ef
 10035dc:	010035f9 	.word	0x010035f9
 10035e0:	01003603 	.word	0x01003603
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
 10035e4:	2104      	movs	r1, #4
 10035e6:	4821      	ldr	r0, [pc, #132]	; (100366c <udc_req_std_dev_get_str_desc+0xb4>)
 10035e8:	4b21      	ldr	r3, [pc, #132]	; (1003670 <udc_req_std_dev_get_str_desc+0xb8>)
 10035ea:	4798      	blx	r3
				sizeof(udc_string_desc_languageid));
		break;
 10035ec:	e011      	b.n	1003612 <udc_req_std_dev_get_str_desc+0x5a>

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
 10035ee:	2309      	movs	r3, #9
 10035f0:	71fb      	strb	r3, [r7, #7]
		str = udc_string_manufacturer_name;
 10035f2:	4b20      	ldr	r3, [pc, #128]	; (1003674 <udc_req_std_dev_get_str_desc+0xbc>)
 10035f4:	60bb      	str	r3, [r7, #8]
		break;
 10035f6:	e00c      	b.n	1003612 <udc_req_std_dev_get_str_desc+0x5a>
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
 10035f8:	230f      	movs	r3, #15
 10035fa:	71fb      	strb	r3, [r7, #7]
		str = udc_string_product_name;
 10035fc:	4b1e      	ldr	r3, [pc, #120]	; (1003678 <udc_req_std_dev_get_str_desc+0xc0>)
 10035fe:	60bb      	str	r3, [r7, #8]
		break;
 1003600:	e007      	b.n	1003612 <udc_req_std_dev_get_str_desc+0x5a>
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
 1003602:	2307      	movs	r3, #7
 1003604:	71fb      	strb	r3, [r7, #7]
		str = udc_get_string_serial_name();
 1003606:	4b1d      	ldr	r3, [pc, #116]	; (100367c <udc_req_std_dev_get_str_desc+0xc4>)
 1003608:	4798      	blx	r3
 100360a:	60b8      	str	r0, [r7, #8]
		break;
 100360c:	e001      	b.n	1003612 <udc_req_std_dev_get_str_desc+0x5a>
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
			break;
		}
#endif
		return false;
 100360e:	2300      	movs	r3, #0
 1003610:	e026      	b.n	1003660 <udc_req_std_dev_get_str_desc+0xa8>
	}

	if (str_length) {
 1003612:	79fb      	ldrb	r3, [r7, #7]
 1003614:	2b00      	cmp	r3, #0
 1003616:	d022      	beq.n	100365e <udc_req_std_dev_get_str_desc+0xa6>
		for(i = 0; i < str_length; i++) {
 1003618:	2300      	movs	r3, #0
 100361a:	73fb      	strb	r3, [r7, #15]
 100361c:	e00d      	b.n	100363a <udc_req_std_dev_get_str_desc+0x82>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
 100361e:	7bfb      	ldrb	r3, [r7, #15]
 1003620:	7bfa      	ldrb	r2, [r7, #15]
 1003622:	68b9      	ldr	r1, [r7, #8]
 1003624:	440a      	add	r2, r1
 1003626:	7812      	ldrb	r2, [r2, #0]
 1003628:	b291      	uxth	r1, r2
 100362a:	4a15      	ldr	r2, [pc, #84]	; (1003680 <udc_req_std_dev_get_str_desc+0xc8>)
 100362c:	005b      	lsls	r3, r3, #1
 100362e:	4413      	add	r3, r2
 1003630:	460a      	mov	r2, r1
 1003632:	805a      	strh	r2, [r3, #2]
		for(i = 0; i < str_length; i++) {
 1003634:	7bfb      	ldrb	r3, [r7, #15]
 1003636:	3301      	adds	r3, #1
 1003638:	73fb      	strb	r3, [r7, #15]
 100363a:	7bfa      	ldrb	r2, [r7, #15]
 100363c:	79fb      	ldrb	r3, [r7, #7]
 100363e:	429a      	cmp	r2, r3
 1003640:	d3ed      	bcc.n	100361e <udc_req_std_dev_get_str_desc+0x66>
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
 1003642:	79fb      	ldrb	r3, [r7, #7]
 1003644:	3301      	adds	r3, #1
 1003646:	b2db      	uxtb	r3, r3
 1003648:	005b      	lsls	r3, r3, #1
 100364a:	b2da      	uxtb	r2, r3
 100364c:	4b0c      	ldr	r3, [pc, #48]	; (1003680 <udc_req_std_dev_get_str_desc+0xc8>)
 100364e:	701a      	strb	r2, [r3, #0]
		udd_set_setup_payload(
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
 1003650:	4b0b      	ldr	r3, [pc, #44]	; (1003680 <udc_req_std_dev_get_str_desc+0xc8>)
 1003652:	781b      	ldrb	r3, [r3, #0]
		udd_set_setup_payload(
 1003654:	b29b      	uxth	r3, r3
 1003656:	4619      	mov	r1, r3
 1003658:	4809      	ldr	r0, [pc, #36]	; (1003680 <udc_req_std_dev_get_str_desc+0xc8>)
 100365a:	4b05      	ldr	r3, [pc, #20]	; (1003670 <udc_req_std_dev_get_str_desc+0xb8>)
 100365c:	4798      	blx	r3
	}

	return true;
 100365e:	2301      	movs	r3, #1
}
 1003660:	4618      	mov	r0, r3
 1003662:	3710      	adds	r7, #16
 1003664:	46bd      	mov	sp, r7
 1003666:	bd80      	pop	{r7, pc}
 1003668:	20008304 	.word	0x20008304
 100366c:	20000194 	.word	0x20000194
 1003670:	0100536d 	.word	0x0100536d
 1003674:	20000198 	.word	0x20000198
 1003678:	200001a4 	.word	0x200001a4
 100367c:	010030f9 	.word	0x010030f9
 1003680:	200001b4 	.word	0x200001b4

01003684 <udc_req_std_dev_get_descriptor>:
 * \brief Standard device request to get descriptors about USB device
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_descriptor(void)
{
 1003684:	b580      	push	{r7, lr}
 1003686:	b082      	sub	sp, #8
 1003688:	af00      	add	r7, sp, #0
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
 100368a:	4b41      	ldr	r3, [pc, #260]	; (1003790 <udc_req_std_dev_get_descriptor+0x10c>)
 100368c:	885b      	ldrh	r3, [r3, #2]
 100368e:	71fb      	strb	r3, [r7, #7]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
 1003690:	4b3f      	ldr	r3, [pc, #252]	; (1003790 <udc_req_std_dev_get_descriptor+0x10c>)
 1003692:	885b      	ldrh	r3, [r3, #2]
 1003694:	0a1b      	lsrs	r3, r3, #8
 1003696:	b29b      	uxth	r3, r3
 1003698:	b2db      	uxtb	r3, r3
 100369a:	3b01      	subs	r3, #1
 100369c:	2b0e      	cmp	r3, #14
 100369e:	d865      	bhi.n	100376c <udc_req_std_dev_get_descriptor+0xe8>
 10036a0:	a201      	add	r2, pc, #4	; (adr r2, 10036a8 <udc_req_std_dev_get_descriptor+0x24>)
 10036a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 10036a6:	bf00      	nop
 10036a8:	010036e5 	.word	0x010036e5
 10036ac:	010036fb 	.word	0x010036fb
 10036b0:	01003759 	.word	0x01003759
 10036b4:	0100376d 	.word	0x0100376d
 10036b8:	0100376d 	.word	0x0100376d
 10036bc:	0100376d 	.word	0x0100376d
 10036c0:	0100376d 	.word	0x0100376d
 10036c4:	0100376d 	.word	0x0100376d
 10036c8:	0100376d 	.word	0x0100376d
 10036cc:	0100376d 	.word	0x0100376d
 10036d0:	0100376d 	.word	0x0100376d
 10036d4:	0100376d 	.word	0x0100376d
 10036d8:	0100376d 	.word	0x0100376d
 10036dc:	0100376d 	.word	0x0100376d
 10036e0:	01003737 	.word	0x01003737
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
 10036e4:	4b2b      	ldr	r3, [pc, #172]	; (1003794 <udc_req_std_dev_get_descriptor+0x110>)
 10036e6:	681a      	ldr	r2, [r3, #0]
				udc_config.confdev_lsfs->bLength);
 10036e8:	4b2a      	ldr	r3, [pc, #168]	; (1003794 <udc_req_std_dev_get_descriptor+0x110>)
 10036ea:	681b      	ldr	r3, [r3, #0]
 10036ec:	781b      	ldrb	r3, [r3, #0]
			udd_set_setup_payload(
 10036ee:	b29b      	uxth	r3, r3
 10036f0:	4619      	mov	r1, r3
 10036f2:	4610      	mov	r0, r2
 10036f4:	4b28      	ldr	r3, [pc, #160]	; (1003798 <udc_req_std_dev_get_descriptor+0x114>)
 10036f6:	4798      	blx	r3
		}
		break;
 10036f8:	e03b      	b.n	1003772 <udc_req_std_dev_get_descriptor+0xee>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
 10036fa:	4b26      	ldr	r3, [pc, #152]	; (1003794 <udc_req_std_dev_get_descriptor+0x110>)
 10036fc:	681b      	ldr	r3, [r3, #0]
 10036fe:	7c5b      	ldrb	r3, [r3, #17]
 1003700:	79fa      	ldrb	r2, [r7, #7]
 1003702:	429a      	cmp	r2, r3
 1003704:	d301      	bcc.n	100370a <udc_req_std_dev_get_descriptor+0x86>
					bNumConfigurations) {
				return false;
 1003706:	2300      	movs	r3, #0
 1003708:	e03e      	b.n	1003788 <udc_req_std_dev_get_descriptor+0x104>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
 100370a:	4b22      	ldr	r3, [pc, #136]	; (1003794 <udc_req_std_dev_get_descriptor+0x110>)
 100370c:	685a      	ldr	r2, [r3, #4]
 100370e:	79fb      	ldrb	r3, [r7, #7]
 1003710:	00db      	lsls	r3, r3, #3
 1003712:	4413      	add	r3, r2
 1003714:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
 1003716:	4b1f      	ldr	r3, [pc, #124]	; (1003794 <udc_req_std_dev_get_descriptor+0x110>)
 1003718:	685a      	ldr	r2, [r3, #4]
 100371a:	79fb      	ldrb	r3, [r7, #7]
 100371c:	00db      	lsls	r3, r3, #3
 100371e:	4413      	add	r3, r2
 1003720:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
 1003722:	885b      	ldrh	r3, [r3, #2]
 1003724:	b29b      	uxth	r3, r3
 1003726:	4619      	mov	r1, r3
 1003728:	4b1b      	ldr	r3, [pc, #108]	; (1003798 <udc_req_std_dev_get_descriptor+0x114>)
 100372a:	4798      	blx	r3
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
 100372c:	4b18      	ldr	r3, [pc, #96]	; (1003790 <udc_req_std_dev_get_descriptor+0x10c>)
 100372e:	689b      	ldr	r3, [r3, #8]
 1003730:	2202      	movs	r2, #2
 1003732:	705a      	strb	r2, [r3, #1]
				USB_DT_CONFIGURATION;
		break;
 1003734:	e01d      	b.n	1003772 <udc_req_std_dev_get_descriptor+0xee>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
 1003736:	4b17      	ldr	r3, [pc, #92]	; (1003794 <udc_req_std_dev_get_descriptor+0x110>)
 1003738:	689b      	ldr	r3, [r3, #8]
 100373a:	2b00      	cmp	r3, #0
 100373c:	d101      	bne.n	1003742 <udc_req_std_dev_get_descriptor+0xbe>
			return false;
 100373e:	2300      	movs	r3, #0
 1003740:	e022      	b.n	1003788 <udc_req_std_dev_get_descriptor+0x104>
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
 1003742:	4b14      	ldr	r3, [pc, #80]	; (1003794 <udc_req_std_dev_get_descriptor+0x110>)
 1003744:	689a      	ldr	r2, [r3, #8]
				udc_config.conf_bos->wTotalLength);
 1003746:	4b13      	ldr	r3, [pc, #76]	; (1003794 <udc_req_std_dev_get_descriptor+0x110>)
 1003748:	689b      	ldr	r3, [r3, #8]
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
 100374a:	885b      	ldrh	r3, [r3, #2]
 100374c:	b29b      	uxth	r3, r3
 100374e:	4619      	mov	r1, r3
 1003750:	4610      	mov	r0, r2
 1003752:	4b11      	ldr	r3, [pc, #68]	; (1003798 <udc_req_std_dev_get_descriptor+0x114>)
 1003754:	4798      	blx	r3
		break;
 1003756:	e00c      	b.n	1003772 <udc_req_std_dev_get_descriptor+0xee>

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
 1003758:	4b10      	ldr	r3, [pc, #64]	; (100379c <udc_req_std_dev_get_descriptor+0x118>)
 100375a:	4798      	blx	r3
 100375c:	4603      	mov	r3, r0
 100375e:	f083 0301 	eor.w	r3, r3, #1
 1003762:	b2db      	uxtb	r3, r3
 1003764:	2b00      	cmp	r3, #0
 1003766:	d003      	beq.n	1003770 <udc_req_std_dev_get_descriptor+0xec>
			return false;
 1003768:	2300      	movs	r3, #0
 100376a:	e00d      	b.n	1003788 <udc_req_std_dev_get_descriptor+0x104>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
 100376c:	2300      	movs	r3, #0
 100376e:	e00b      	b.n	1003788 <udc_req_std_dev_get_descriptor+0x104>
		break;
 1003770:	bf00      	nop
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
 1003772:	4b07      	ldr	r3, [pc, #28]	; (1003790 <udc_req_std_dev_get_descriptor+0x10c>)
 1003774:	88da      	ldrh	r2, [r3, #6]
 1003776:	4b06      	ldr	r3, [pc, #24]	; (1003790 <udc_req_std_dev_get_descriptor+0x10c>)
 1003778:	899b      	ldrh	r3, [r3, #12]
 100377a:	429a      	cmp	r2, r3
 100377c:	d203      	bcs.n	1003786 <udc_req_std_dev_get_descriptor+0x102>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
 100377e:	4b04      	ldr	r3, [pc, #16]	; (1003790 <udc_req_std_dev_get_descriptor+0x10c>)
 1003780:	88da      	ldrh	r2, [r3, #6]
 1003782:	4b03      	ldr	r3, [pc, #12]	; (1003790 <udc_req_std_dev_get_descriptor+0x10c>)
 1003784:	819a      	strh	r2, [r3, #12]
	}
	return true;
 1003786:	2301      	movs	r3, #1
}
 1003788:	4618      	mov	r0, r3
 100378a:	3708      	adds	r7, #8
 100378c:	46bd      	mov	sp, r7
 100378e:	bd80      	pop	{r7, pc}
 1003790:	20008304 	.word	0x20008304
 1003794:	20000188 	.word	0x20000188
 1003798:	0100536d 	.word	0x0100536d
 100379c:	010035b9 	.word	0x010035b9

010037a0 <udc_req_std_dev_get_configuration>:
 * \brief Standard device request to get configuration number
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
 10037a0:	b580      	push	{r7, lr}
 10037a2:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != 1) {
 10037a4:	4b06      	ldr	r3, [pc, #24]	; (10037c0 <udc_req_std_dev_get_configuration+0x20>)
 10037a6:	88db      	ldrh	r3, [r3, #6]
 10037a8:	2b01      	cmp	r3, #1
 10037aa:	d001      	beq.n	10037b0 <udc_req_std_dev_get_configuration+0x10>
		return false;
 10037ac:	2300      	movs	r3, #0
 10037ae:	e004      	b.n	10037ba <udc_req_std_dev_get_configuration+0x1a>
	}

	udd_set_setup_payload(&udc_num_configuration,1);
 10037b0:	2101      	movs	r1, #1
 10037b2:	4804      	ldr	r0, [pc, #16]	; (10037c4 <udc_req_std_dev_get_configuration+0x24>)
 10037b4:	4b04      	ldr	r3, [pc, #16]	; (10037c8 <udc_req_std_dev_get_configuration+0x28>)
 10037b6:	4798      	blx	r3
	return true;
 10037b8:	2301      	movs	r3, #1
}
 10037ba:	4618      	mov	r0, r3
 10037bc:	bd80      	pop	{r7, pc}
 10037be:	bf00      	nop
 10037c0:	20008304 	.word	0x20008304
 10037c4:	20001e44 	.word	0x20001e44
 10037c8:	0100536d 	.word	0x0100536d

010037cc <udc_req_std_dev_set_configuration>:
 * \brief Standard device request to enable a configuration
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_configuration(void)
{
 10037cc:	b580      	push	{r7, lr}
 10037ce:	b082      	sub	sp, #8
 10037d0:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
 10037d2:	4b27      	ldr	r3, [pc, #156]	; (1003870 <udc_req_std_dev_set_configuration+0xa4>)
 10037d4:	88db      	ldrh	r3, [r3, #6]
 10037d6:	2b00      	cmp	r3, #0
 10037d8:	d001      	beq.n	10037de <udc_req_std_dev_set_configuration+0x12>
		return false;
 10037da:	2300      	movs	r3, #0
 10037dc:	e043      	b.n	1003866 <udc_req_std_dev_set_configuration+0x9a>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
 10037de:	4b25      	ldr	r3, [pc, #148]	; (1003874 <udc_req_std_dev_set_configuration+0xa8>)
 10037e0:	4798      	blx	r3
 10037e2:	4603      	mov	r3, r0
 10037e4:	2b00      	cmp	r3, #0
 10037e6:	d101      	bne.n	10037ec <udc_req_std_dev_set_configuration+0x20>
		return false;
 10037e8:	2300      	movs	r3, #0
 10037ea:	e03c      	b.n	1003866 <udc_req_std_dev_set_configuration+0x9a>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
 10037ec:	4b20      	ldr	r3, [pc, #128]	; (1003870 <udc_req_std_dev_set_configuration+0xa4>)
 10037ee:	885b      	ldrh	r3, [r3, #2]
 10037f0:	b2db      	uxtb	r3, r3
				udc_config.confdev_lsfs->bNumConfigurations) {
 10037f2:	4a21      	ldr	r2, [pc, #132]	; (1003878 <udc_req_std_dev_set_configuration+0xac>)
 10037f4:	6812      	ldr	r2, [r2, #0]
 10037f6:	7c52      	ldrb	r2, [r2, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
 10037f8:	4293      	cmp	r3, r2
 10037fa:	dd01      	ble.n	1003800 <udc_req_std_dev_set_configuration+0x34>
			return false;
 10037fc:	2300      	movs	r3, #0
 10037fe:	e032      	b.n	1003866 <udc_req_std_dev_set_configuration+0x9a>
		}
	}

	// Reset current configuration
	udc_reset();
 1003800:	4b1e      	ldr	r3, [pc, #120]	; (100387c <udc_req_std_dev_set_configuration+0xb0>)
 1003802:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
 1003804:	4b1a      	ldr	r3, [pc, #104]	; (1003870 <udc_req_std_dev_set_configuration+0xa4>)
 1003806:	885b      	ldrh	r3, [r3, #2]
 1003808:	b2da      	uxtb	r2, r3
 100380a:	4b1d      	ldr	r3, [pc, #116]	; (1003880 <udc_req_std_dev_set_configuration+0xb4>)
 100380c:	701a      	strb	r2, [r3, #0]
	if (udc_num_configuration == 0) {
 100380e:	4b1c      	ldr	r3, [pc, #112]	; (1003880 <udc_req_std_dev_set_configuration+0xb4>)
 1003810:	781b      	ldrb	r3, [r3, #0]
 1003812:	2b00      	cmp	r3, #0
 1003814:	d101      	bne.n	100381a <udc_req_std_dev_set_configuration+0x4e>
		return true; // Default empty configuration requested
 1003816:	2301      	movs	r3, #1
 1003818:	e025      	b.n	1003866 <udc_req_std_dev_set_configuration+0x9a>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
 100381a:	4b17      	ldr	r3, [pc, #92]	; (1003878 <udc_req_std_dev_set_configuration+0xac>)
 100381c:	685a      	ldr	r2, [r3, #4]
 100381e:	4b18      	ldr	r3, [pc, #96]	; (1003880 <udc_req_std_dev_set_configuration+0xb4>)
 1003820:	781b      	ldrb	r3, [r3, #0]
 1003822:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 1003826:	3b01      	subs	r3, #1
 1003828:	00db      	lsls	r3, r3, #3
 100382a:	4413      	add	r3, r2
 100382c:	4a15      	ldr	r2, [pc, #84]	; (1003884 <udc_req_std_dev_set_configuration+0xb8>)
 100382e:	6013      	str	r3, [r2, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
 1003830:	2300      	movs	r3, #0
 1003832:	71fb      	strb	r3, [r7, #7]
 1003834:	e00f      	b.n	1003856 <udc_req_std_dev_set_configuration+0x8a>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
 1003836:	79fb      	ldrb	r3, [r7, #7]
 1003838:	2100      	movs	r1, #0
 100383a:	4618      	mov	r0, r3
 100383c:	4b12      	ldr	r3, [pc, #72]	; (1003888 <udc_req_std_dev_set_configuration+0xbc>)
 100383e:	4798      	blx	r3
 1003840:	4603      	mov	r3, r0
 1003842:	f083 0301 	eor.w	r3, r3, #1
 1003846:	b2db      	uxtb	r3, r3
 1003848:	2b00      	cmp	r3, #0
 100384a:	d001      	beq.n	1003850 <udc_req_std_dev_set_configuration+0x84>
			return false;
 100384c:	2300      	movs	r3, #0
 100384e:	e00a      	b.n	1003866 <udc_req_std_dev_set_configuration+0x9a>
			iface_num++) {
 1003850:	79fb      	ldrb	r3, [r7, #7]
 1003852:	3301      	adds	r3, #1
 1003854:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
 1003856:	4b0b      	ldr	r3, [pc, #44]	; (1003884 <udc_req_std_dev_set_configuration+0xb8>)
 1003858:	681b      	ldr	r3, [r3, #0]
 100385a:	681b      	ldr	r3, [r3, #0]
 100385c:	791b      	ldrb	r3, [r3, #4]
 100385e:	79fa      	ldrb	r2, [r7, #7]
 1003860:	429a      	cmp	r2, r3
 1003862:	d3e8      	bcc.n	1003836 <udc_req_std_dev_set_configuration+0x6a>
		}
	}
	return true;
 1003864:	2301      	movs	r3, #1
}
 1003866:	4618      	mov	r0, r3
 1003868:	3708      	adds	r7, #8
 100386a:	46bd      	mov	sp, r7
 100386c:	bd80      	pop	{r7, pc}
 100386e:	bf00      	nop
 1003870:	20008304 	.word	0x20008304
 1003874:	01005315 	.word	0x01005315
 1003878:	20000188 	.word	0x20000188
 100387c:	01003361 	.word	0x01003361
 1003880:	20001e44 	.word	0x20001e44
 1003884:	20001e48 	.word	0x20001e48
 1003888:	010032c9 	.word	0x010032c9

0100388c <udc_req_std_iface_get_setting>:
 * to get the alternate setting number of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_get_setting(void)
{
 100388c:	b580      	push	{r7, lr}
 100388e:	b082      	sub	sp, #8
 1003890:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
 1003892:	4b1e      	ldr	r3, [pc, #120]	; (100390c <udc_req_std_iface_get_setting+0x80>)
 1003894:	88db      	ldrh	r3, [r3, #6]
 1003896:	2b01      	cmp	r3, #1
 1003898:	d001      	beq.n	100389e <udc_req_std_iface_get_setting+0x12>
		return false; // Error in request
 100389a:	2300      	movs	r3, #0
 100389c:	e032      	b.n	1003904 <udc_req_std_iface_get_setting+0x78>
	}
	if (!udc_num_configuration) {
 100389e:	4b1c      	ldr	r3, [pc, #112]	; (1003910 <udc_req_std_iface_get_setting+0x84>)
 10038a0:	781b      	ldrb	r3, [r3, #0]
 10038a2:	2b00      	cmp	r3, #0
 10038a4:	d101      	bne.n	10038aa <udc_req_std_iface_get_setting+0x1e>
		return false; // The device is not is configured state yet
 10038a6:	2300      	movs	r3, #0
 10038a8:	e02c      	b.n	1003904 <udc_req_std_iface_get_setting+0x78>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
 10038aa:	4b18      	ldr	r3, [pc, #96]	; (100390c <udc_req_std_iface_get_setting+0x80>)
 10038ac:	889b      	ldrh	r3, [r3, #4]
 10038ae:	71fb      	strb	r3, [r7, #7]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
 10038b0:	4b18      	ldr	r3, [pc, #96]	; (1003914 <udc_req_std_iface_get_setting+0x88>)
 10038b2:	681b      	ldr	r3, [r3, #0]
 10038b4:	681b      	ldr	r3, [r3, #0]
 10038b6:	791b      	ldrb	r3, [r3, #4]
 10038b8:	79fa      	ldrb	r2, [r7, #7]
 10038ba:	429a      	cmp	r2, r3
 10038bc:	d301      	bcc.n	10038c2 <udc_req_std_iface_get_setting+0x36>
		return false;
 10038be:	2300      	movs	r3, #0
 10038c0:	e020      	b.n	1003904 <udc_req_std_iface_get_setting+0x78>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
 10038c2:	79fb      	ldrb	r3, [r7, #7]
 10038c4:	2100      	movs	r1, #0
 10038c6:	4618      	mov	r0, r3
 10038c8:	4b13      	ldr	r3, [pc, #76]	; (1003918 <udc_req_std_iface_get_setting+0x8c>)
 10038ca:	4798      	blx	r3
 10038cc:	4603      	mov	r3, r0
 10038ce:	f083 0301 	eor.w	r3, r3, #1
 10038d2:	b2db      	uxtb	r3, r3
 10038d4:	2b00      	cmp	r3, #0
 10038d6:	d001      	beq.n	10038dc <udc_req_std_iface_get_setting+0x50>
		return false;
 10038d8:	2300      	movs	r3, #0
 10038da:	e013      	b.n	1003904 <udc_req_std_iface_get_setting+0x78>
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
 10038dc:	4b0d      	ldr	r3, [pc, #52]	; (1003914 <udc_req_std_iface_get_setting+0x88>)
 10038de:	681b      	ldr	r3, [r3, #0]
 10038e0:	685a      	ldr	r2, [r3, #4]
 10038e2:	79fb      	ldrb	r3, [r7, #7]
 10038e4:	009b      	lsls	r3, r3, #2
 10038e6:	4413      	add	r3, r2
 10038e8:	681b      	ldr	r3, [r3, #0]
 10038ea:	603b      	str	r3, [r7, #0]
	udc_iface_setting = udi_api->getsetting();
 10038ec:	683b      	ldr	r3, [r7, #0]
 10038ee:	68db      	ldr	r3, [r3, #12]
 10038f0:	4798      	blx	r3
 10038f2:	4603      	mov	r3, r0
 10038f4:	461a      	mov	r2, r3
 10038f6:	4b09      	ldr	r3, [pc, #36]	; (100391c <udc_req_std_iface_get_setting+0x90>)
 10038f8:	701a      	strb	r2, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
 10038fa:	2101      	movs	r1, #1
 10038fc:	4807      	ldr	r0, [pc, #28]	; (100391c <udc_req_std_iface_get_setting+0x90>)
 10038fe:	4b08      	ldr	r3, [pc, #32]	; (1003920 <udc_req_std_iface_get_setting+0x94>)
 1003900:	4798      	blx	r3
	return true;
 1003902:	2301      	movs	r3, #1
}
 1003904:	4618      	mov	r0, r3
 1003906:	3708      	adds	r7, #8
 1003908:	46bd      	mov	sp, r7
 100390a:	bd80      	pop	{r7, pc}
 100390c:	20008304 	.word	0x20008304
 1003910:	20001e44 	.word	0x20001e44
 1003914:	20001e48 	.word	0x20001e48
 1003918:	0100318d 	.word	0x0100318d
 100391c:	20001e40 	.word	0x20001e40
 1003920:	0100536d 	.word	0x0100536d

01003924 <udc_req_std_iface_set_setting>:
 * to set an alternate setting of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_set_setting(void)
{
 1003924:	b580      	push	{r7, lr}
 1003926:	b082      	sub	sp, #8
 1003928:	af00      	add	r7, sp, #0
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
 100392a:	4b14      	ldr	r3, [pc, #80]	; (100397c <udc_req_std_iface_set_setting+0x58>)
 100392c:	88db      	ldrh	r3, [r3, #6]
 100392e:	2b00      	cmp	r3, #0
 1003930:	d001      	beq.n	1003936 <udc_req_std_iface_set_setting+0x12>
		return false; // Error in request
 1003932:	2300      	movs	r3, #0
 1003934:	e01e      	b.n	1003974 <udc_req_std_iface_set_setting+0x50>
	}
	if (!udc_num_configuration) {
 1003936:	4b12      	ldr	r3, [pc, #72]	; (1003980 <udc_req_std_iface_set_setting+0x5c>)
 1003938:	781b      	ldrb	r3, [r3, #0]
 100393a:	2b00      	cmp	r3, #0
 100393c:	d101      	bne.n	1003942 <udc_req_std_iface_set_setting+0x1e>
		return false; // The device is not is configured state yet
 100393e:	2300      	movs	r3, #0
 1003940:	e018      	b.n	1003974 <udc_req_std_iface_set_setting+0x50>
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
 1003942:	4b0e      	ldr	r3, [pc, #56]	; (100397c <udc_req_std_iface_set_setting+0x58>)
 1003944:	889b      	ldrh	r3, [r3, #4]
 1003946:	71fb      	strb	r3, [r7, #7]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
 1003948:	4b0c      	ldr	r3, [pc, #48]	; (100397c <udc_req_std_iface_set_setting+0x58>)
 100394a:	885b      	ldrh	r3, [r3, #2]
 100394c:	71bb      	strb	r3, [r7, #6]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
 100394e:	79fb      	ldrb	r3, [r7, #7]
 1003950:	4618      	mov	r0, r3
 1003952:	4b0c      	ldr	r3, [pc, #48]	; (1003984 <udc_req_std_iface_set_setting+0x60>)
 1003954:	4798      	blx	r3
 1003956:	4603      	mov	r3, r0
 1003958:	f083 0301 	eor.w	r3, r3, #1
 100395c:	b2db      	uxtb	r3, r3
 100395e:	2b00      	cmp	r3, #0
 1003960:	d001      	beq.n	1003966 <udc_req_std_iface_set_setting+0x42>
		return false;
 1003962:	2300      	movs	r3, #0
 1003964:	e006      	b.n	1003974 <udc_req_std_iface_set_setting+0x50>
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
 1003966:	79ba      	ldrb	r2, [r7, #6]
 1003968:	79fb      	ldrb	r3, [r7, #7]
 100396a:	4611      	mov	r1, r2
 100396c:	4618      	mov	r0, r3
 100396e:	4b06      	ldr	r3, [pc, #24]	; (1003988 <udc_req_std_iface_set_setting+0x64>)
 1003970:	4798      	blx	r3
 1003972:	4603      	mov	r3, r0
}
 1003974:	4618      	mov	r0, r3
 1003976:	3708      	adds	r7, #8
 1003978:	46bd      	mov	sp, r7
 100397a:	bd80      	pop	{r7, pc}
 100397c:	20008304 	.word	0x20008304
 1003980:	20001e44 	.word	0x20001e44
 1003984:	01003229 	.word	0x01003229
 1003988:	010032c9 	.word	0x010032c9

0100398c <udc_reqstd>:
 * \brief Main routine to manage the standard USB SETUP request
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
 100398c:	b580      	push	{r7, lr}
 100398e:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
 1003990:	4b4d      	ldr	r3, [pc, #308]	; (1003ac8 <udc_reqstd+0x13c>)
 1003992:	781b      	ldrb	r3, [r3, #0]
 1003994:	b25b      	sxtb	r3, r3
 1003996:	2b00      	cmp	r3, #0
 1003998:	da3e      	bge.n	1003a18 <udc_reqstd+0x8c>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
 100399a:	4b4b      	ldr	r3, [pc, #300]	; (1003ac8 <udc_reqstd+0x13c>)
 100399c:	88db      	ldrh	r3, [r3, #6]
 100399e:	2b00      	cmp	r3, #0
 10039a0:	d101      	bne.n	10039a6 <udc_reqstd+0x1a>
			return false; // Error for USB host
 10039a2:	2300      	movs	r3, #0
 10039a4:	e08e      	b.n	1003ac4 <udc_reqstd+0x138>
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
 10039a6:	4b48      	ldr	r3, [pc, #288]	; (1003ac8 <udc_reqstd+0x13c>)
 10039a8:	781b      	ldrb	r3, [r3, #0]
 10039aa:	f003 031f 	and.w	r3, r3, #31
 10039ae:	2b00      	cmp	r3, #0
 10039b0:	d114      	bne.n	10039dc <udc_reqstd+0x50>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
 10039b2:	4b45      	ldr	r3, [pc, #276]	; (1003ac8 <udc_reqstd+0x13c>)
 10039b4:	785b      	ldrb	r3, [r3, #1]
 10039b6:	2b06      	cmp	r3, #6
 10039b8:	d008      	beq.n	10039cc <udc_reqstd+0x40>
 10039ba:	2b08      	cmp	r3, #8
 10039bc:	d00a      	beq.n	10039d4 <udc_reqstd+0x48>
 10039be:	2b00      	cmp	r3, #0
 10039c0:	d000      	beq.n	10039c4 <udc_reqstd+0x38>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
			default:
				break;
 10039c2:	e00b      	b.n	10039dc <udc_reqstd+0x50>
				return udc_req_std_dev_get_status();
 10039c4:	4b41      	ldr	r3, [pc, #260]	; (1003acc <udc_reqstd+0x140>)
 10039c6:	4798      	blx	r3
 10039c8:	4603      	mov	r3, r0
 10039ca:	e07b      	b.n	1003ac4 <udc_reqstd+0x138>
				return udc_req_std_dev_get_descriptor();
 10039cc:	4b40      	ldr	r3, [pc, #256]	; (1003ad0 <udc_reqstd+0x144>)
 10039ce:	4798      	blx	r3
 10039d0:	4603      	mov	r3, r0
 10039d2:	e077      	b.n	1003ac4 <udc_reqstd+0x138>
				return udc_req_std_dev_get_configuration();
 10039d4:	4b3f      	ldr	r3, [pc, #252]	; (1003ad4 <udc_reqstd+0x148>)
 10039d6:	4798      	blx	r3
 10039d8:	4603      	mov	r3, r0
 10039da:	e073      	b.n	1003ac4 <udc_reqstd+0x138>
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
 10039dc:	4b3a      	ldr	r3, [pc, #232]	; (1003ac8 <udc_reqstd+0x13c>)
 10039de:	781b      	ldrb	r3, [r3, #0]
 10039e0:	f003 031f 	and.w	r3, r3, #31
 10039e4:	2b01      	cmp	r3, #1
 10039e6:	d108      	bne.n	10039fa <udc_reqstd+0x6e>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
 10039e8:	4b37      	ldr	r3, [pc, #220]	; (1003ac8 <udc_reqstd+0x13c>)
 10039ea:	785b      	ldrb	r3, [r3, #1]
 10039ec:	2b0a      	cmp	r3, #10
 10039ee:	d000      	beq.n	10039f2 <udc_reqstd+0x66>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
			default:
				break;
 10039f0:	e003      	b.n	10039fa <udc_reqstd+0x6e>
				return udc_req_std_iface_get_setting();
 10039f2:	4b39      	ldr	r3, [pc, #228]	; (1003ad8 <udc_reqstd+0x14c>)
 10039f4:	4798      	blx	r3
 10039f6:	4603      	mov	r3, r0
 10039f8:	e064      	b.n	1003ac4 <udc_reqstd+0x138>
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
 10039fa:	4b33      	ldr	r3, [pc, #204]	; (1003ac8 <udc_reqstd+0x13c>)
 10039fc:	781b      	ldrb	r3, [r3, #0]
 10039fe:	f003 031f 	and.w	r3, r3, #31
 1003a02:	2b02      	cmp	r3, #2
 1003a04:	d15d      	bne.n	1003ac2 <udc_reqstd+0x136>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
 1003a06:	4b30      	ldr	r3, [pc, #192]	; (1003ac8 <udc_reqstd+0x13c>)
 1003a08:	785b      	ldrb	r3, [r3, #1]
 1003a0a:	2b00      	cmp	r3, #0
 1003a0c:	d000      	beq.n	1003a10 <udc_reqstd+0x84>
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
			default:
				break;
 1003a0e:	e058      	b.n	1003ac2 <udc_reqstd+0x136>
				return udc_req_std_ep_get_status();
 1003a10:	4b32      	ldr	r3, [pc, #200]	; (1003adc <udc_reqstd+0x150>)
 1003a12:	4798      	blx	r3
 1003a14:	4603      	mov	r3, r0
 1003a16:	e055      	b.n	1003ac4 <udc_reqstd+0x138>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
 1003a18:	4b2b      	ldr	r3, [pc, #172]	; (1003ac8 <udc_reqstd+0x13c>)
 1003a1a:	781b      	ldrb	r3, [r3, #0]
 1003a1c:	f003 031f 	and.w	r3, r3, #31
 1003a20:	2b00      	cmp	r3, #0
 1003a22:	d12a      	bne.n	1003a7a <udc_reqstd+0xee>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
 1003a24:	4b28      	ldr	r3, [pc, #160]	; (1003ac8 <udc_reqstd+0x13c>)
 1003a26:	785b      	ldrb	r3, [r3, #1]
 1003a28:	3b01      	subs	r3, #1
 1003a2a:	2b08      	cmp	r3, #8
 1003a2c:	d824      	bhi.n	1003a78 <udc_reqstd+0xec>
 1003a2e:	a201      	add	r2, pc, #4	; (adr r2, 1003a34 <udc_reqstd+0xa8>)
 1003a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 1003a34:	01003a61 	.word	0x01003a61
 1003a38:	01003a79 	.word	0x01003a79
 1003a3c:	01003a69 	.word	0x01003a69
 1003a40:	01003a79 	.word	0x01003a79
 1003a44:	01003a59 	.word	0x01003a59
 1003a48:	01003a79 	.word	0x01003a79
 1003a4c:	01003a79 	.word	0x01003a79
 1003a50:	01003a79 	.word	0x01003a79
 1003a54:	01003a71 	.word	0x01003a71
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
 1003a58:	4b21      	ldr	r3, [pc, #132]	; (1003ae0 <udc_reqstd+0x154>)
 1003a5a:	4798      	blx	r3
 1003a5c:	4603      	mov	r3, r0
 1003a5e:	e031      	b.n	1003ac4 <udc_reqstd+0x138>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
 1003a60:	4b20      	ldr	r3, [pc, #128]	; (1003ae4 <udc_reqstd+0x158>)
 1003a62:	4798      	blx	r3
 1003a64:	4603      	mov	r3, r0
 1003a66:	e02d      	b.n	1003ac4 <udc_reqstd+0x138>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
 1003a68:	4b1f      	ldr	r3, [pc, #124]	; (1003ae8 <udc_reqstd+0x15c>)
 1003a6a:	4798      	blx	r3
 1003a6c:	4603      	mov	r3, r0
 1003a6e:	e029      	b.n	1003ac4 <udc_reqstd+0x138>
			case USB_REQ_SET_CONFIGURATION:
				return udc_req_std_dev_set_configuration();
 1003a70:	4b1e      	ldr	r3, [pc, #120]	; (1003aec <udc_reqstd+0x160>)
 1003a72:	4798      	blx	r3
 1003a74:	4603      	mov	r3, r0
 1003a76:	e025      	b.n	1003ac4 <udc_reqstd+0x138>
			case USB_REQ_SET_DESCRIPTOR:
				/* Not supported (defined as optional by the USB 2.0 spec) */
				break;
			default:
				break;
 1003a78:	bf00      	nop
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
 1003a7a:	4b13      	ldr	r3, [pc, #76]	; (1003ac8 <udc_reqstd+0x13c>)
 1003a7c:	781b      	ldrb	r3, [r3, #0]
 1003a7e:	f003 031f 	and.w	r3, r3, #31
 1003a82:	2b01      	cmp	r3, #1
 1003a84:	d108      	bne.n	1003a98 <udc_reqstd+0x10c>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
 1003a86:	4b10      	ldr	r3, [pc, #64]	; (1003ac8 <udc_reqstd+0x13c>)
 1003a88:	785b      	ldrb	r3, [r3, #1]
 1003a8a:	2b0b      	cmp	r3, #11
 1003a8c:	d000      	beq.n	1003a90 <udc_reqstd+0x104>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
			default:
				break;
 1003a8e:	e003      	b.n	1003a98 <udc_reqstd+0x10c>
				return udc_req_std_iface_set_setting();
 1003a90:	4b17      	ldr	r3, [pc, #92]	; (1003af0 <udc_reqstd+0x164>)
 1003a92:	4798      	blx	r3
 1003a94:	4603      	mov	r3, r0
 1003a96:	e015      	b.n	1003ac4 <udc_reqstd+0x138>
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
 1003a98:	4b0b      	ldr	r3, [pc, #44]	; (1003ac8 <udc_reqstd+0x13c>)
 1003a9a:	781b      	ldrb	r3, [r3, #0]
 1003a9c:	f003 031f 	and.w	r3, r3, #31
 1003aa0:	2b02      	cmp	r3, #2
 1003aa2:	d10e      	bne.n	1003ac2 <udc_reqstd+0x136>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
 1003aa4:	4b08      	ldr	r3, [pc, #32]	; (1003ac8 <udc_reqstd+0x13c>)
 1003aa6:	785b      	ldrb	r3, [r3, #1]
 1003aa8:	2b01      	cmp	r3, #1
 1003aaa:	d002      	beq.n	1003ab2 <udc_reqstd+0x126>
 1003aac:	2b03      	cmp	r3, #3
 1003aae:	d004      	beq.n	1003aba <udc_reqstd+0x12e>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
			default:
				break;
 1003ab0:	e007      	b.n	1003ac2 <udc_reqstd+0x136>
				return udc_req_std_ep_clear_feature();
 1003ab2:	4b10      	ldr	r3, [pc, #64]	; (1003af4 <udc_reqstd+0x168>)
 1003ab4:	4798      	blx	r3
 1003ab6:	4603      	mov	r3, r0
 1003ab8:	e004      	b.n	1003ac4 <udc_reqstd+0x138>
				return udc_req_std_ep_set_feature();
 1003aba:	4b0f      	ldr	r3, [pc, #60]	; (1003af8 <udc_reqstd+0x16c>)
 1003abc:	4798      	blx	r3
 1003abe:	4603      	mov	r3, r0
 1003ac0:	e000      	b.n	1003ac4 <udc_reqstd+0x138>
			}
		}
#endif
	}
	return false;
 1003ac2:	2300      	movs	r3, #0
}
 1003ac4:	4618      	mov	r0, r3
 1003ac6:	bd80      	pop	{r7, pc}
 1003ac8:	20008304 	.word	0x20008304
 1003acc:	01003415 	.word	0x01003415
 1003ad0:	01003685 	.word	0x01003685
 1003ad4:	010037a1 	.word	0x010037a1
 1003ad8:	0100388d 	.word	0x0100388d
 1003adc:	01003441 	.word	0x01003441
 1003ae0:	01003591 	.word	0x01003591
 1003ae4:	01003485 	.word	0x01003485
 1003ae8:	010034f9 	.word	0x010034f9
 1003aec:	010037cd 	.word	0x010037cd
 1003af0:	01003925 	.word	0x01003925
 1003af4:	010034c1 	.word	0x010034c1
 1003af8:	01003525 	.word	0x01003525

01003afc <udc_req_iface>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_iface(void)
{
 1003afc:	b580      	push	{r7, lr}
 1003afe:	b082      	sub	sp, #8
 1003b00:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
 1003b02:	4b20      	ldr	r3, [pc, #128]	; (1003b84 <udc_req_iface+0x88>)
 1003b04:	781b      	ldrb	r3, [r3, #0]
 1003b06:	2b00      	cmp	r3, #0
 1003b08:	d101      	bne.n	1003b0e <udc_req_iface+0x12>
		return false; // The device is not is configured state yet
 1003b0a:	2300      	movs	r3, #0
 1003b0c:	e036      	b.n	1003b7c <udc_req_iface+0x80>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
 1003b0e:	4b1e      	ldr	r3, [pc, #120]	; (1003b88 <udc_req_iface+0x8c>)
 1003b10:	889b      	ldrh	r3, [r3, #4]
 1003b12:	71fb      	strb	r3, [r7, #7]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
 1003b14:	4b1d      	ldr	r3, [pc, #116]	; (1003b8c <udc_req_iface+0x90>)
 1003b16:	681b      	ldr	r3, [r3, #0]
 1003b18:	681b      	ldr	r3, [r3, #0]
 1003b1a:	791b      	ldrb	r3, [r3, #4]
 1003b1c:	79fa      	ldrb	r2, [r7, #7]
 1003b1e:	429a      	cmp	r2, r3
 1003b20:	d301      	bcc.n	1003b26 <udc_req_iface+0x2a>
		return false;
 1003b22:	2300      	movs	r3, #0
 1003b24:	e02a      	b.n	1003b7c <udc_req_iface+0x80>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
 1003b26:	79fb      	ldrb	r3, [r7, #7]
 1003b28:	2100      	movs	r1, #0
 1003b2a:	4618      	mov	r0, r3
 1003b2c:	4b18      	ldr	r3, [pc, #96]	; (1003b90 <udc_req_iface+0x94>)
 1003b2e:	4798      	blx	r3
 1003b30:	4603      	mov	r3, r0
 1003b32:	f083 0301 	eor.w	r3, r3, #1
 1003b36:	b2db      	uxtb	r3, r3
 1003b38:	2b00      	cmp	r3, #0
 1003b3a:	d001      	beq.n	1003b40 <udc_req_iface+0x44>
		return false;
 1003b3c:	2300      	movs	r3, #0
 1003b3e:	e01d      	b.n	1003b7c <udc_req_iface+0x80>
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
 1003b40:	4b12      	ldr	r3, [pc, #72]	; (1003b8c <udc_req_iface+0x90>)
 1003b42:	681b      	ldr	r3, [r3, #0]
 1003b44:	685a      	ldr	r2, [r3, #4]
 1003b46:	79fb      	ldrb	r3, [r7, #7]
 1003b48:	009b      	lsls	r3, r3, #2
 1003b4a:	4413      	add	r3, r2
 1003b4c:	681b      	ldr	r3, [r3, #0]
 1003b4e:	603b      	str	r3, [r7, #0]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
 1003b50:	683b      	ldr	r3, [r7, #0]
 1003b52:	68db      	ldr	r3, [r3, #12]
 1003b54:	4798      	blx	r3
 1003b56:	4603      	mov	r3, r0
 1003b58:	461a      	mov	r2, r3
 1003b5a:	79fb      	ldrb	r3, [r7, #7]
 1003b5c:	4611      	mov	r1, r2
 1003b5e:	4618      	mov	r0, r3
 1003b60:	4b0b      	ldr	r3, [pc, #44]	; (1003b90 <udc_req_iface+0x94>)
 1003b62:	4798      	blx	r3
 1003b64:	4603      	mov	r3, r0
 1003b66:	f083 0301 	eor.w	r3, r3, #1
 1003b6a:	b2db      	uxtb	r3, r3
 1003b6c:	2b00      	cmp	r3, #0
 1003b6e:	d001      	beq.n	1003b74 <udc_req_iface+0x78>
		return false;
 1003b70:	2300      	movs	r3, #0
 1003b72:	e003      	b.n	1003b7c <udc_req_iface+0x80>
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
 1003b74:	683b      	ldr	r3, [r7, #0]
 1003b76:	689b      	ldr	r3, [r3, #8]
 1003b78:	4798      	blx	r3
 1003b7a:	4603      	mov	r3, r0
}
 1003b7c:	4618      	mov	r0, r3
 1003b7e:	3708      	adds	r7, #8
 1003b80:	46bd      	mov	sp, r7
 1003b82:	bd80      	pop	{r7, pc}
 1003b84:	20001e44 	.word	0x20001e44
 1003b88:	20008304 	.word	0x20008304
 1003b8c:	20001e48 	.word	0x20001e48
 1003b90:	0100318d 	.word	0x0100318d

01003b94 <udc_req_ep>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_ep(void)
{
 1003b94:	b580      	push	{r7, lr}
 1003b96:	b082      	sub	sp, #8
 1003b98:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
 1003b9a:	4b1e      	ldr	r3, [pc, #120]	; (1003c14 <udc_req_ep+0x80>)
 1003b9c:	781b      	ldrb	r3, [r3, #0]
 1003b9e:	2b00      	cmp	r3, #0
 1003ba0:	d101      	bne.n	1003ba6 <udc_req_ep+0x12>
		return false; // The device is not is configured state yet
 1003ba2:	2300      	movs	r3, #0
 1003ba4:	e032      	b.n	1003c0c <udc_req_ep+0x78>
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
 1003ba6:	4b1c      	ldr	r3, [pc, #112]	; (1003c18 <udc_req_ep+0x84>)
 1003ba8:	889b      	ldrh	r3, [r3, #4]
 1003baa:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
 1003bac:	2300      	movs	r3, #0
 1003bae:	71fb      	strb	r3, [r7, #7]
 1003bb0:	e024      	b.n	1003bfc <udc_req_ep+0x68>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
 1003bb2:	4b1a      	ldr	r3, [pc, #104]	; (1003c1c <udc_req_ep+0x88>)
 1003bb4:	681b      	ldr	r3, [r3, #0]
 1003bb6:	685a      	ldr	r2, [r3, #4]
 1003bb8:	79fb      	ldrb	r3, [r7, #7]
 1003bba:	009b      	lsls	r3, r3, #2
 1003bbc:	4413      	add	r3, r2
 1003bbe:	681b      	ldr	r3, [r3, #0]
 1003bc0:	603b      	str	r3, [r7, #0]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
 1003bc2:	683b      	ldr	r3, [r7, #0]
 1003bc4:	68db      	ldr	r3, [r3, #12]
 1003bc6:	4798      	blx	r3
 1003bc8:	4603      	mov	r3, r0
 1003bca:	461a      	mov	r2, r3
 1003bcc:	79fb      	ldrb	r3, [r7, #7]
 1003bce:	4611      	mov	r1, r2
 1003bd0:	4618      	mov	r0, r3
 1003bd2:	4b13      	ldr	r3, [pc, #76]	; (1003c20 <udc_req_ep+0x8c>)
 1003bd4:	4798      	blx	r3
 1003bd6:	4603      	mov	r3, r0
 1003bd8:	f083 0301 	eor.w	r3, r3, #1
 1003bdc:	b2db      	uxtb	r3, r3
 1003bde:	2b00      	cmp	r3, #0
 1003be0:	d001      	beq.n	1003be6 <udc_req_ep+0x52>
			return false;
 1003be2:	2300      	movs	r3, #0
 1003be4:	e012      	b.n	1003c0c <udc_req_ep+0x78>
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
 1003be6:	683b      	ldr	r3, [r7, #0]
 1003be8:	689b      	ldr	r3, [r3, #8]
 1003bea:	4798      	blx	r3
 1003bec:	4603      	mov	r3, r0
 1003bee:	2b00      	cmp	r3, #0
 1003bf0:	d001      	beq.n	1003bf6 <udc_req_ep+0x62>
			return true;
 1003bf2:	2301      	movs	r3, #1
 1003bf4:	e00a      	b.n	1003c0c <udc_req_ep+0x78>
			iface_num++) {
 1003bf6:	79fb      	ldrb	r3, [r7, #7]
 1003bf8:	3301      	adds	r3, #1
 1003bfa:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
 1003bfc:	4b07      	ldr	r3, [pc, #28]	; (1003c1c <udc_req_ep+0x88>)
 1003bfe:	681b      	ldr	r3, [r3, #0]
 1003c00:	681b      	ldr	r3, [r3, #0]
 1003c02:	791b      	ldrb	r3, [r3, #4]
 1003c04:	79fa      	ldrb	r2, [r7, #7]
 1003c06:	429a      	cmp	r2, r3
 1003c08:	d3d3      	bcc.n	1003bb2 <udc_req_ep+0x1e>
		}
	}
	return false;
 1003c0a:	2300      	movs	r3, #0
}
 1003c0c:	4618      	mov	r0, r3
 1003c0e:	3708      	adds	r7, #8
 1003c10:	46bd      	mov	sp, r7
 1003c12:	bd80      	pop	{r7, pc}
 1003c14:	20001e44 	.word	0x20001e44
 1003c18:	20008304 	.word	0x20008304
 1003c1c:	20001e48 	.word	0x20001e48
 1003c20:	0100318d 	.word	0x0100318d

01003c24 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
 1003c24:	b580      	push	{r7, lr}
 1003c26:	af00      	add	r7, sp, #0
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
 1003c28:	4b1e      	ldr	r3, [pc, #120]	; (1003ca4 <udc_process_setup+0x80>)
 1003c2a:	2200      	movs	r2, #0
 1003c2c:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
 1003c2e:	4b1d      	ldr	r3, [pc, #116]	; (1003ca4 <udc_process_setup+0x80>)
 1003c30:	2200      	movs	r2, #0
 1003c32:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
 1003c34:	4b1b      	ldr	r3, [pc, #108]	; (1003ca4 <udc_process_setup+0x80>)
 1003c36:	2200      	movs	r2, #0
 1003c38:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
 1003c3a:	4b1a      	ldr	r3, [pc, #104]	; (1003ca4 <udc_process_setup+0x80>)
 1003c3c:	781b      	ldrb	r3, [r3, #0]
 1003c3e:	b25b      	sxtb	r3, r3
 1003c40:	2b00      	cmp	r3, #0
 1003c42:	da05      	bge.n	1003c50 <udc_process_setup+0x2c>
		if (udd_g_ctrlreq.req.wLength == 0) {
 1003c44:	4b17      	ldr	r3, [pc, #92]	; (1003ca4 <udc_process_setup+0x80>)
 1003c46:	88db      	ldrh	r3, [r3, #6]
 1003c48:	2b00      	cmp	r3, #0
 1003c4a:	d101      	bne.n	1003c50 <udc_process_setup+0x2c>
			return false; // Error from USB host
 1003c4c:	2300      	movs	r3, #0
 1003c4e:	e027      	b.n	1003ca0 <udc_process_setup+0x7c>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
 1003c50:	4b14      	ldr	r3, [pc, #80]	; (1003ca4 <udc_process_setup+0x80>)
 1003c52:	781b      	ldrb	r3, [r3, #0]
 1003c54:	f003 0360 	and.w	r3, r3, #96	; 0x60
 1003c58:	2b00      	cmp	r3, #0
 1003c5a:	d106      	bne.n	1003c6a <udc_process_setup+0x46>
		if (udc_reqstd()) {
 1003c5c:	4b12      	ldr	r3, [pc, #72]	; (1003ca8 <udc_process_setup+0x84>)
 1003c5e:	4798      	blx	r3
 1003c60:	4603      	mov	r3, r0
 1003c62:	2b00      	cmp	r3, #0
 1003c64:	d001      	beq.n	1003c6a <udc_process_setup+0x46>
			return true;
 1003c66:	2301      	movs	r3, #1
 1003c68:	e01a      	b.n	1003ca0 <udc_process_setup+0x7c>
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
 1003c6a:	4b0e      	ldr	r3, [pc, #56]	; (1003ca4 <udc_process_setup+0x80>)
 1003c6c:	781b      	ldrb	r3, [r3, #0]
 1003c6e:	f003 031f 	and.w	r3, r3, #31
 1003c72:	2b01      	cmp	r3, #1
 1003c74:	d106      	bne.n	1003c84 <udc_process_setup+0x60>
		if (udc_req_iface()) {
 1003c76:	4b0d      	ldr	r3, [pc, #52]	; (1003cac <udc_process_setup+0x88>)
 1003c78:	4798      	blx	r3
 1003c7a:	4603      	mov	r3, r0
 1003c7c:	2b00      	cmp	r3, #0
 1003c7e:	d001      	beq.n	1003c84 <udc_process_setup+0x60>
			return true;
 1003c80:	2301      	movs	r3, #1
 1003c82:	e00d      	b.n	1003ca0 <udc_process_setup+0x7c>
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
 1003c84:	4b07      	ldr	r3, [pc, #28]	; (1003ca4 <udc_process_setup+0x80>)
 1003c86:	781b      	ldrb	r3, [r3, #0]
 1003c88:	f003 031f 	and.w	r3, r3, #31
 1003c8c:	2b02      	cmp	r3, #2
 1003c8e:	d106      	bne.n	1003c9e <udc_process_setup+0x7a>
		if (udc_req_ep()) {
 1003c90:	4b07      	ldr	r3, [pc, #28]	; (1003cb0 <udc_process_setup+0x8c>)
 1003c92:	4798      	blx	r3
 1003c94:	4603      	mov	r3, r0
 1003c96:	2b00      	cmp	r3, #0
 1003c98:	d001      	beq.n	1003c9e <udc_process_setup+0x7a>
			return true;
 1003c9a:	2301      	movs	r3, #1
 1003c9c:	e000      	b.n	1003ca0 <udc_process_setup+0x7c>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
 1003c9e:	2300      	movs	r3, #0
#endif
}
 1003ca0:	4618      	mov	r0, r3
 1003ca2:	bd80      	pop	{r7, pc}
 1003ca4:	20008304 	.word	0x20008304
 1003ca8:	0100398d 	.word	0x0100398d
 1003cac:	01003afd 	.word	0x01003afd
 1003cb0:	01003b95 	.word	0x01003b95

01003cb4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
 1003cb4:	b580      	push	{r7, lr}
 1003cb6:	b086      	sub	sp, #24
 1003cb8:	af00      	add	r7, sp, #0
 1003cba:	60f8      	str	r0, [r7, #12]
 1003cbc:	60b9      	str	r1, [r7, #8]
 1003cbe:	607a      	str	r2, [r7, #4]
	int nChars = 0;
 1003cc0:	2300      	movs	r3, #0
 1003cc2:	617b      	str	r3, [r7, #20]

	if (file != 0) {
 1003cc4:	68fb      	ldr	r3, [r7, #12]
 1003cc6:	2b00      	cmp	r3, #0
 1003cc8:	d012      	beq.n	1003cf0 <_read+0x3c>
		return -1;
 1003cca:	f04f 33ff 	mov.w	r3, #4294967295
 1003cce:	e013      	b.n	1003cf8 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
 1003cd0:	4b0b      	ldr	r3, [pc, #44]	; (1003d00 <_read+0x4c>)
 1003cd2:	681b      	ldr	r3, [r3, #0]
 1003cd4:	4a0b      	ldr	r2, [pc, #44]	; (1003d04 <_read+0x50>)
 1003cd6:	6812      	ldr	r2, [r2, #0]
 1003cd8:	68b9      	ldr	r1, [r7, #8]
 1003cda:	4610      	mov	r0, r2
 1003cdc:	4798      	blx	r3
		ptr++;
 1003cde:	68bb      	ldr	r3, [r7, #8]
 1003ce0:	3301      	adds	r3, #1
 1003ce2:	60bb      	str	r3, [r7, #8]
		nChars++;
 1003ce4:	697b      	ldr	r3, [r7, #20]
 1003ce6:	3301      	adds	r3, #1
 1003ce8:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
 1003cea:	687b      	ldr	r3, [r7, #4]
 1003cec:	3b01      	subs	r3, #1
 1003cee:	607b      	str	r3, [r7, #4]
 1003cf0:	687b      	ldr	r3, [r7, #4]
 1003cf2:	2b00      	cmp	r3, #0
 1003cf4:	dcec      	bgt.n	1003cd0 <_read+0x1c>
	}
	return nChars;
 1003cf6:	697b      	ldr	r3, [r7, #20]
}
 1003cf8:	4618      	mov	r0, r3
 1003cfa:	3718      	adds	r7, #24
 1003cfc:	46bd      	mov	sp, r7
 1003cfe:	bd80      	pop	{r7, pc}
 1003d00:	200082f8 	.word	0x200082f8
 1003d04:	20008300 	.word	0x20008300

01003d08 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
 1003d08:	b580      	push	{r7, lr}
 1003d0a:	b086      	sub	sp, #24
 1003d0c:	af00      	add	r7, sp, #0
 1003d0e:	60f8      	str	r0, [r7, #12]
 1003d10:	60b9      	str	r1, [r7, #8]
 1003d12:	607a      	str	r2, [r7, #4]
	int nChars = 0;
 1003d14:	2300      	movs	r3, #0
 1003d16:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
 1003d18:	68fb      	ldr	r3, [r7, #12]
 1003d1a:	2b01      	cmp	r3, #1
 1003d1c:	d02f      	beq.n	1003d7e <_write+0x76>
 1003d1e:	68fb      	ldr	r3, [r7, #12]
 1003d20:	2b02      	cmp	r3, #2
 1003d22:	d02c      	beq.n	1003d7e <_write+0x76>
 1003d24:	68fb      	ldr	r3, [r7, #12]
 1003d26:	2b03      	cmp	r3, #3
 1003d28:	d029      	beq.n	1003d7e <_write+0x76>
		return -1;
 1003d2a:	f04f 33ff 	mov.w	r3, #4294967295
 1003d2e:	e02a      	b.n	1003d86 <_write+0x7e>
	}

	for (; len != 0; --len) {
                if (*ptr == '\n')
 1003d30:	68bb      	ldr	r3, [r7, #8]
 1003d32:	781b      	ldrb	r3, [r3, #0]
 1003d34:	2b0a      	cmp	r3, #10
 1003d36:	d10c      	bne.n	1003d52 <_write+0x4a>
                    if (ptr_put(stdio_base, '\r') < 0)
 1003d38:	4b15      	ldr	r3, [pc, #84]	; (1003d90 <_write+0x88>)
 1003d3a:	681b      	ldr	r3, [r3, #0]
 1003d3c:	4a15      	ldr	r2, [pc, #84]	; (1003d94 <_write+0x8c>)
 1003d3e:	6812      	ldr	r2, [r2, #0]
 1003d40:	210d      	movs	r1, #13
 1003d42:	4610      	mov	r0, r2
 1003d44:	4798      	blx	r3
 1003d46:	4603      	mov	r3, r0
 1003d48:	2b00      	cmp	r3, #0
 1003d4a:	da02      	bge.n	1003d52 <_write+0x4a>
                          return -1;
 1003d4c:	f04f 33ff 	mov.w	r3, #4294967295
 1003d50:	e019      	b.n	1003d86 <_write+0x7e>
		if (ptr_put(stdio_base, *ptr++) < 0) {
 1003d52:	4b0f      	ldr	r3, [pc, #60]	; (1003d90 <_write+0x88>)
 1003d54:	681a      	ldr	r2, [r3, #0]
 1003d56:	4b0f      	ldr	r3, [pc, #60]	; (1003d94 <_write+0x8c>)
 1003d58:	6818      	ldr	r0, [r3, #0]
 1003d5a:	68bb      	ldr	r3, [r7, #8]
 1003d5c:	1c59      	adds	r1, r3, #1
 1003d5e:	60b9      	str	r1, [r7, #8]
 1003d60:	781b      	ldrb	r3, [r3, #0]
 1003d62:	4619      	mov	r1, r3
 1003d64:	4790      	blx	r2
 1003d66:	4603      	mov	r3, r0
 1003d68:	2b00      	cmp	r3, #0
 1003d6a:	da02      	bge.n	1003d72 <_write+0x6a>
			return -1;
 1003d6c:	f04f 33ff 	mov.w	r3, #4294967295
 1003d70:	e009      	b.n	1003d86 <_write+0x7e>
		}
		++nChars;
 1003d72:	697b      	ldr	r3, [r7, #20]
 1003d74:	3301      	adds	r3, #1
 1003d76:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
 1003d78:	687b      	ldr	r3, [r7, #4]
 1003d7a:	3b01      	subs	r3, #1
 1003d7c:	607b      	str	r3, [r7, #4]
 1003d7e:	687b      	ldr	r3, [r7, #4]
 1003d80:	2b00      	cmp	r3, #0
 1003d82:	d1d5      	bne.n	1003d30 <_write+0x28>
	}
	return nChars;
 1003d84:	697b      	ldr	r3, [r7, #20]
}
 1003d86:	4618      	mov	r0, r3
 1003d88:	3718      	adds	r7, #24
 1003d8a:	46bd      	mov	sp, r7
 1003d8c:	bd80      	pop	{r7, pc}
 1003d8e:	bf00      	nop
 1003d90:	200082fc 	.word	0x200082fc
 1003d94:	20008300 	.word	0x20008300

01003d98 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
 1003d98:	b580      	push	{r7, lr}
 1003d9a:	b082      	sub	sp, #8
 1003d9c:	af00      	add	r7, sp, #0
 1003d9e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
 1003da0:	6878      	ldr	r0, [r7, #4]
 1003da2:	4b03      	ldr	r3, [pc, #12]	; (1003db0 <sysclk_enable_peripheral_clock+0x18>)
 1003da4:	4798      	blx	r3
}
 1003da6:	bf00      	nop
 1003da8:	3708      	adds	r7, #8
 1003daa:	46bd      	mov	sp, r7
 1003dac:	bd80      	pop	{r7, pc}
 1003dae:	bf00      	nop
 1003db0:	01004a15 	.word	0x01004a15

01003db4 <ioport_init>:
{
 1003db4:	b580      	push	{r7, lr}
 1003db6:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_PIOA);
 1003db8:	200b      	movs	r0, #11
 1003dba:	4b03      	ldr	r3, [pc, #12]	; (1003dc8 <ioport_init+0x14>)
 1003dbc:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOB);
 1003dbe:	200c      	movs	r0, #12
 1003dc0:	4b01      	ldr	r3, [pc, #4]	; (1003dc8 <ioport_init+0x14>)
 1003dc2:	4798      	blx	r3
}
 1003dc4:	bf00      	nop
 1003dc6:	bd80      	pop	{r7, pc}
 1003dc8:	01003d99 	.word	0x01003d99

01003dcc <ioport_disable_pin>:
{
 1003dcc:	b480      	push	{r7}
 1003dce:	b089      	sub	sp, #36	; 0x24
 1003dd0:	af00      	add	r7, sp, #0
 1003dd2:	6078      	str	r0, [r7, #4]
 1003dd4:	687b      	ldr	r3, [r7, #4]
 1003dd6:	61fb      	str	r3, [r7, #28]
 1003dd8:	69fb      	ldr	r3, [r7, #28]
 1003dda:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
 1003ddc:	69bb      	ldr	r3, [r7, #24]
 1003dde:	095a      	lsrs	r2, r3, #5
 1003de0:	69fb      	ldr	r3, [r7, #28]
 1003de2:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
 1003de4:	697b      	ldr	r3, [r7, #20]
 1003de6:	f003 031f 	and.w	r3, r3, #31
 1003dea:	2101      	movs	r1, #1
 1003dec:	fa01 f303 	lsl.w	r3, r1, r3
 1003df0:	613a      	str	r2, [r7, #16]
 1003df2:	60fb      	str	r3, [r7, #12]
 1003df4:	693b      	ldr	r3, [r7, #16]
 1003df6:	60bb      	str	r3, [r7, #8]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
 1003df8:	68bb      	ldr	r3, [r7, #8]
 1003dfa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 1003dfe:	f203 7307 	addw	r3, r3, #1799	; 0x707
 1003e02:	025b      	lsls	r3, r3, #9
 1003e04:	461a      	mov	r2, r3
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
 1003e06:	68fb      	ldr	r3, [r7, #12]
 1003e08:	6053      	str	r3, [r2, #4]
}
 1003e0a:	bf00      	nop
 1003e0c:	3724      	adds	r7, #36	; 0x24
 1003e0e:	46bd      	mov	sp, r7
 1003e10:	bc80      	pop	{r7}
 1003e12:	4770      	bx	lr

01003e14 <ioport_disable_port>:
{
 1003e14:	b480      	push	{r7}
 1003e16:	b087      	sub	sp, #28
 1003e18:	af00      	add	r7, sp, #0
 1003e1a:	6078      	str	r0, [r7, #4]
 1003e1c:	6039      	str	r1, [r7, #0]
 1003e1e:	687b      	ldr	r3, [r7, #4]
 1003e20:	617b      	str	r3, [r7, #20]
 1003e22:	683b      	ldr	r3, [r7, #0]
 1003e24:	613b      	str	r3, [r7, #16]
 1003e26:	697b      	ldr	r3, [r7, #20]
 1003e28:	60fb      	str	r3, [r7, #12]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
 1003e2a:	68fb      	ldr	r3, [r7, #12]
 1003e2c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 1003e30:	f203 7307 	addw	r3, r3, #1799	; 0x707
 1003e34:	025b      	lsls	r3, r3, #9
 1003e36:	461a      	mov	r2, r3
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
 1003e38:	693b      	ldr	r3, [r7, #16]
 1003e3a:	6053      	str	r3, [r2, #4]
}
 1003e3c:	bf00      	nop
 1003e3e:	371c      	adds	r7, #28
 1003e40:	46bd      	mov	sp, r7
 1003e42:	bc80      	pop	{r7}
 1003e44:	4770      	bx	lr

01003e46 <ioport_set_port_mode>:
{
 1003e46:	b480      	push	{r7}
 1003e48:	b08b      	sub	sp, #44	; 0x2c
 1003e4a:	af00      	add	r7, sp, #0
 1003e4c:	60f8      	str	r0, [r7, #12]
 1003e4e:	60b9      	str	r1, [r7, #8]
 1003e50:	607a      	str	r2, [r7, #4]
 1003e52:	68fb      	ldr	r3, [r7, #12]
 1003e54:	627b      	str	r3, [r7, #36]	; 0x24
 1003e56:	68bb      	ldr	r3, [r7, #8]
 1003e58:	623b      	str	r3, [r7, #32]
 1003e5a:	687b      	ldr	r3, [r7, #4]
 1003e5c:	61fb      	str	r3, [r7, #28]
 1003e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 1003e60:	61bb      	str	r3, [r7, #24]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
 1003e62:	69bb      	ldr	r3, [r7, #24]
 1003e64:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 1003e68:	f203 7307 	addw	r3, r3, #1799	; 0x707
 1003e6c:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_port_to_base(port);
 1003e6e:	617b      	str	r3, [r7, #20]
	if (mode & IOPORT_MODE_PULLUP) {
 1003e70:	69fb      	ldr	r3, [r7, #28]
 1003e72:	f003 0308 	and.w	r3, r3, #8
 1003e76:	2b00      	cmp	r3, #0
 1003e78:	d003      	beq.n	1003e82 <ioport_set_port_mode+0x3c>
		base->PIO_PUER = mask;
 1003e7a:	697b      	ldr	r3, [r7, #20]
 1003e7c:	6a3a      	ldr	r2, [r7, #32]
 1003e7e:	665a      	str	r2, [r3, #100]	; 0x64
 1003e80:	e002      	b.n	1003e88 <ioport_set_port_mode+0x42>
		base->PIO_PUDR = mask;
 1003e82:	697b      	ldr	r3, [r7, #20]
 1003e84:	6a3a      	ldr	r2, [r7, #32]
 1003e86:	661a      	str	r2, [r3, #96]	; 0x60
	if (mode & IOPORT_MODE_PULLDOWN) {
 1003e88:	69fb      	ldr	r3, [r7, #28]
 1003e8a:	f003 0310 	and.w	r3, r3, #16
 1003e8e:	2b00      	cmp	r3, #0
 1003e90:	d004      	beq.n	1003e9c <ioport_set_port_mode+0x56>
		base->PIO_PPDER = mask;
 1003e92:	697b      	ldr	r3, [r7, #20]
 1003e94:	6a3a      	ldr	r2, [r7, #32]
 1003e96:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 1003e9a:	e003      	b.n	1003ea4 <ioport_set_port_mode+0x5e>
		base->PIO_PPDDR = mask;
 1003e9c:	697b      	ldr	r3, [r7, #20]
 1003e9e:	6a3a      	ldr	r2, [r7, #32]
 1003ea0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	if (mode & IOPORT_MODE_OPEN_DRAIN) {
 1003ea4:	69fb      	ldr	r3, [r7, #28]
 1003ea6:	f003 0320 	and.w	r3, r3, #32
 1003eaa:	2b00      	cmp	r3, #0
 1003eac:	d003      	beq.n	1003eb6 <ioport_set_port_mode+0x70>
		base->PIO_MDER = mask;
 1003eae:	697b      	ldr	r3, [r7, #20]
 1003eb0:	6a3a      	ldr	r2, [r7, #32]
 1003eb2:	651a      	str	r2, [r3, #80]	; 0x50
 1003eb4:	e002      	b.n	1003ebc <ioport_set_port_mode+0x76>
		base->PIO_MDDR = mask;
 1003eb6:	697b      	ldr	r3, [r7, #20]
 1003eb8:	6a3a      	ldr	r2, [r7, #32]
 1003eba:	655a      	str	r2, [r3, #84]	; 0x54
	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
 1003ebc:	69fb      	ldr	r3, [r7, #28]
 1003ebe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 1003ec2:	2b00      	cmp	r3, #0
 1003ec4:	d003      	beq.n	1003ece <ioport_set_port_mode+0x88>
		base->PIO_IFER = mask;
 1003ec6:	697b      	ldr	r3, [r7, #20]
 1003ec8:	6a3a      	ldr	r2, [r7, #32]
 1003eca:	621a      	str	r2, [r3, #32]
 1003ecc:	e002      	b.n	1003ed4 <ioport_set_port_mode+0x8e>
		base->PIO_IFDR = mask;
 1003ece:	697b      	ldr	r3, [r7, #20]
 1003ed0:	6a3a      	ldr	r2, [r7, #32]
 1003ed2:	625a      	str	r2, [r3, #36]	; 0x24
	if (mode & IOPORT_MODE_DEBOUNCE) {
 1003ed4:	69fb      	ldr	r3, [r7, #28]
 1003ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 1003eda:	2b00      	cmp	r3, #0
 1003edc:	d004      	beq.n	1003ee8 <ioport_set_port_mode+0xa2>
		base->PIO_IFSCER = mask;
 1003ede:	697b      	ldr	r3, [r7, #20]
 1003ee0:	6a3a      	ldr	r2, [r7, #32]
 1003ee2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 1003ee6:	e003      	b.n	1003ef0 <ioport_set_port_mode+0xaa>
		base->PIO_IFSCDR = mask;
 1003ee8:	697b      	ldr	r3, [r7, #20]
 1003eea:	6a3a      	ldr	r2, [r7, #32]
 1003eec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if (mode & IOPORT_MODE_MUX_BIT0) {
 1003ef0:	69fb      	ldr	r3, [r7, #28]
 1003ef2:	f003 0301 	and.w	r3, r3, #1
 1003ef6:	2b00      	cmp	r3, #0
 1003ef8:	d006      	beq.n	1003f08 <ioport_set_port_mode+0xc2>
		base->PIO_ABCDSR[0] |= mask;
 1003efa:	697b      	ldr	r3, [r7, #20]
 1003efc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 1003efe:	6a3b      	ldr	r3, [r7, #32]
 1003f00:	431a      	orrs	r2, r3
 1003f02:	697b      	ldr	r3, [r7, #20]
 1003f04:	671a      	str	r2, [r3, #112]	; 0x70
 1003f06:	e006      	b.n	1003f16 <ioport_set_port_mode+0xd0>
		base->PIO_ABCDSR[0] &= ~mask;
 1003f08:	697b      	ldr	r3, [r7, #20]
 1003f0a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 1003f0c:	6a3b      	ldr	r3, [r7, #32]
 1003f0e:	43db      	mvns	r3, r3
 1003f10:	401a      	ands	r2, r3
 1003f12:	697b      	ldr	r3, [r7, #20]
 1003f14:	671a      	str	r2, [r3, #112]	; 0x70
	if (mode & IOPORT_MODE_MUX_BIT1) {
 1003f16:	69fb      	ldr	r3, [r7, #28]
 1003f18:	f003 0302 	and.w	r3, r3, #2
 1003f1c:	2b00      	cmp	r3, #0
 1003f1e:	d006      	beq.n	1003f2e <ioport_set_port_mode+0xe8>
		base->PIO_ABCDSR[1] |= mask;
 1003f20:	697b      	ldr	r3, [r7, #20]
 1003f22:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 1003f24:	6a3b      	ldr	r3, [r7, #32]
 1003f26:	431a      	orrs	r2, r3
 1003f28:	697b      	ldr	r3, [r7, #20]
 1003f2a:	675a      	str	r2, [r3, #116]	; 0x74
}
 1003f2c:	e006      	b.n	1003f3c <ioport_set_port_mode+0xf6>
		base->PIO_ABCDSR[1] &= ~mask;
 1003f2e:	697b      	ldr	r3, [r7, #20]
 1003f30:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 1003f32:	6a3b      	ldr	r3, [r7, #32]
 1003f34:	43db      	mvns	r3, r3
 1003f36:	401a      	ands	r2, r3
 1003f38:	697b      	ldr	r3, [r7, #20]
 1003f3a:	675a      	str	r2, [r3, #116]	; 0x74
 1003f3c:	bf00      	nop
 1003f3e:	372c      	adds	r7, #44	; 0x2c
 1003f40:	46bd      	mov	sp, r7
 1003f42:	bc80      	pop	{r7}
 1003f44:	4770      	bx	lr

01003f46 <ioport_set_pin_mode>:
{
 1003f46:	b480      	push	{r7}
 1003f48:	b08d      	sub	sp, #52	; 0x34
 1003f4a:	af00      	add	r7, sp, #0
 1003f4c:	6078      	str	r0, [r7, #4]
 1003f4e:	6039      	str	r1, [r7, #0]
 1003f50:	687b      	ldr	r3, [r7, #4]
 1003f52:	62fb      	str	r3, [r7, #44]	; 0x2c
 1003f54:	683b      	ldr	r3, [r7, #0]
 1003f56:	62bb      	str	r3, [r7, #40]	; 0x28
 1003f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 1003f5a:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
 1003f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 1003f5e:	095a      	lsrs	r2, r3, #5
 1003f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 1003f62:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
 1003f64:	6a3b      	ldr	r3, [r7, #32]
 1003f66:	f003 031f 	and.w	r3, r3, #31
 1003f6a:	2101      	movs	r1, #1
 1003f6c:	fa01 f303 	lsl.w	r3, r1, r3
 1003f70:	61fa      	str	r2, [r7, #28]
 1003f72:	61bb      	str	r3, [r7, #24]
 1003f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 1003f76:	617b      	str	r3, [r7, #20]
 1003f78:	69fb      	ldr	r3, [r7, #28]
 1003f7a:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
 1003f7c:	693b      	ldr	r3, [r7, #16]
 1003f7e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 1003f82:	f203 7307 	addw	r3, r3, #1799	; 0x707
 1003f86:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_port_to_base(port);
 1003f88:	60fb      	str	r3, [r7, #12]
	if (mode & IOPORT_MODE_PULLUP) {
 1003f8a:	697b      	ldr	r3, [r7, #20]
 1003f8c:	f003 0308 	and.w	r3, r3, #8
 1003f90:	2b00      	cmp	r3, #0
 1003f92:	d003      	beq.n	1003f9c <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
 1003f94:	68fb      	ldr	r3, [r7, #12]
 1003f96:	69ba      	ldr	r2, [r7, #24]
 1003f98:	665a      	str	r2, [r3, #100]	; 0x64
 1003f9a:	e002      	b.n	1003fa2 <ioport_set_pin_mode+0x5c>
		base->PIO_PUDR = mask;
 1003f9c:	68fb      	ldr	r3, [r7, #12]
 1003f9e:	69ba      	ldr	r2, [r7, #24]
 1003fa0:	661a      	str	r2, [r3, #96]	; 0x60
	if (mode & IOPORT_MODE_PULLDOWN) {
 1003fa2:	697b      	ldr	r3, [r7, #20]
 1003fa4:	f003 0310 	and.w	r3, r3, #16
 1003fa8:	2b00      	cmp	r3, #0
 1003faa:	d004      	beq.n	1003fb6 <ioport_set_pin_mode+0x70>
		base->PIO_PPDER = mask;
 1003fac:	68fb      	ldr	r3, [r7, #12]
 1003fae:	69ba      	ldr	r2, [r7, #24]
 1003fb0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 1003fb4:	e003      	b.n	1003fbe <ioport_set_pin_mode+0x78>
		base->PIO_PPDDR = mask;
 1003fb6:	68fb      	ldr	r3, [r7, #12]
 1003fb8:	69ba      	ldr	r2, [r7, #24]
 1003fba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	if (mode & IOPORT_MODE_OPEN_DRAIN) {
 1003fbe:	697b      	ldr	r3, [r7, #20]
 1003fc0:	f003 0320 	and.w	r3, r3, #32
 1003fc4:	2b00      	cmp	r3, #0
 1003fc6:	d003      	beq.n	1003fd0 <ioport_set_pin_mode+0x8a>
		base->PIO_MDER = mask;
 1003fc8:	68fb      	ldr	r3, [r7, #12]
 1003fca:	69ba      	ldr	r2, [r7, #24]
 1003fcc:	651a      	str	r2, [r3, #80]	; 0x50
 1003fce:	e002      	b.n	1003fd6 <ioport_set_pin_mode+0x90>
		base->PIO_MDDR = mask;
 1003fd0:	68fb      	ldr	r3, [r7, #12]
 1003fd2:	69ba      	ldr	r2, [r7, #24]
 1003fd4:	655a      	str	r2, [r3, #84]	; 0x54
	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
 1003fd6:	697b      	ldr	r3, [r7, #20]
 1003fd8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 1003fdc:	2b00      	cmp	r3, #0
 1003fde:	d003      	beq.n	1003fe8 <ioport_set_pin_mode+0xa2>
		base->PIO_IFER = mask;
 1003fe0:	68fb      	ldr	r3, [r7, #12]
 1003fe2:	69ba      	ldr	r2, [r7, #24]
 1003fe4:	621a      	str	r2, [r3, #32]
 1003fe6:	e002      	b.n	1003fee <ioport_set_pin_mode+0xa8>
		base->PIO_IFDR = mask;
 1003fe8:	68fb      	ldr	r3, [r7, #12]
 1003fea:	69ba      	ldr	r2, [r7, #24]
 1003fec:	625a      	str	r2, [r3, #36]	; 0x24
	if (mode & IOPORT_MODE_DEBOUNCE) {
 1003fee:	697b      	ldr	r3, [r7, #20]
 1003ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 1003ff4:	2b00      	cmp	r3, #0
 1003ff6:	d004      	beq.n	1004002 <ioport_set_pin_mode+0xbc>
		base->PIO_IFSCER = mask;
 1003ff8:	68fb      	ldr	r3, [r7, #12]
 1003ffa:	69ba      	ldr	r2, [r7, #24]
 1003ffc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 1004000:	e003      	b.n	100400a <ioport_set_pin_mode+0xc4>
		base->PIO_IFSCDR = mask;
 1004002:	68fb      	ldr	r3, [r7, #12]
 1004004:	69ba      	ldr	r2, [r7, #24]
 1004006:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if (mode & IOPORT_MODE_MUX_BIT0) {
 100400a:	697b      	ldr	r3, [r7, #20]
 100400c:	f003 0301 	and.w	r3, r3, #1
 1004010:	2b00      	cmp	r3, #0
 1004012:	d006      	beq.n	1004022 <ioport_set_pin_mode+0xdc>
		base->PIO_ABCDSR[0] |= mask;
 1004014:	68fb      	ldr	r3, [r7, #12]
 1004016:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 1004018:	69bb      	ldr	r3, [r7, #24]
 100401a:	431a      	orrs	r2, r3
 100401c:	68fb      	ldr	r3, [r7, #12]
 100401e:	671a      	str	r2, [r3, #112]	; 0x70
 1004020:	e006      	b.n	1004030 <ioport_set_pin_mode+0xea>
		base->PIO_ABCDSR[0] &= ~mask;
 1004022:	68fb      	ldr	r3, [r7, #12]
 1004024:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 1004026:	69bb      	ldr	r3, [r7, #24]
 1004028:	43db      	mvns	r3, r3
 100402a:	401a      	ands	r2, r3
 100402c:	68fb      	ldr	r3, [r7, #12]
 100402e:	671a      	str	r2, [r3, #112]	; 0x70
	if (mode & IOPORT_MODE_MUX_BIT1) {
 1004030:	697b      	ldr	r3, [r7, #20]
 1004032:	f003 0302 	and.w	r3, r3, #2
 1004036:	2b00      	cmp	r3, #0
 1004038:	d006      	beq.n	1004048 <ioport_set_pin_mode+0x102>
		base->PIO_ABCDSR[1] |= mask;
 100403a:	68fb      	ldr	r3, [r7, #12]
 100403c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 100403e:	69bb      	ldr	r3, [r7, #24]
 1004040:	431a      	orrs	r2, r3
 1004042:	68fb      	ldr	r3, [r7, #12]
 1004044:	675a      	str	r2, [r3, #116]	; 0x74
}
 1004046:	e006      	b.n	1004056 <ioport_set_pin_mode+0x110>
		base->PIO_ABCDSR[1] &= ~mask;
 1004048:	68fb      	ldr	r3, [r7, #12]
 100404a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 100404c:	69bb      	ldr	r3, [r7, #24]
 100404e:	43db      	mvns	r3, r3
 1004050:	401a      	ands	r2, r3
 1004052:	68fb      	ldr	r3, [r7, #12]
 1004054:	675a      	str	r2, [r3, #116]	; 0x74
 1004056:	bf00      	nop
 1004058:	3734      	adds	r7, #52	; 0x34
 100405a:	46bd      	mov	sp, r7
 100405c:	bc80      	pop	{r7}
 100405e:	4770      	bx	lr

01004060 <ioport_set_pin_dir>:
{
 1004060:	b480      	push	{r7}
 1004062:	b08d      	sub	sp, #52	; 0x34
 1004064:	af00      	add	r7, sp, #0
 1004066:	6078      	str	r0, [r7, #4]
 1004068:	460b      	mov	r3, r1
 100406a:	70fb      	strb	r3, [r7, #3]
 100406c:	687b      	ldr	r3, [r7, #4]
 100406e:	62fb      	str	r3, [r7, #44]	; 0x2c
 1004070:	78fb      	ldrb	r3, [r7, #3]
 1004072:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 1004076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 1004078:	627b      	str	r3, [r7, #36]	; 0x24
 100407a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 100407c:	623b      	str	r3, [r7, #32]
	return pin >> 5;
 100407e:	6a3b      	ldr	r3, [r7, #32]
 1004080:	095b      	lsrs	r3, r3, #5
 1004082:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
 1004084:	69fb      	ldr	r3, [r7, #28]
 1004086:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 100408a:	f203 7307 	addw	r3, r3, #1799	; 0x707
 100408e:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
 1004090:	61bb      	str	r3, [r7, #24]
	if (dir == IOPORT_DIR_OUTPUT) {
 1004092:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 1004096:	2b01      	cmp	r3, #1
 1004098:	d109      	bne.n	10040ae <ioport_set_pin_dir+0x4e>
 100409a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 100409c:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
 100409e:	697b      	ldr	r3, [r7, #20]
 10040a0:	f003 031f 	and.w	r3, r3, #31
 10040a4:	2201      	movs	r2, #1
 10040a6:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 10040a8:	69bb      	ldr	r3, [r7, #24]
 10040aa:	611a      	str	r2, [r3, #16]
 10040ac:	e00c      	b.n	10040c8 <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
 10040ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 10040b2:	2b00      	cmp	r3, #0
 10040b4:	d108      	bne.n	10040c8 <ioport_set_pin_dir+0x68>
 10040b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 10040b8:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
 10040ba:	693b      	ldr	r3, [r7, #16]
 10040bc:	f003 031f 	and.w	r3, r3, #31
 10040c0:	2201      	movs	r2, #1
 10040c2:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
 10040c4:	69bb      	ldr	r3, [r7, #24]
 10040c6:	615a      	str	r2, [r3, #20]
 10040c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 10040ca:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
 10040cc:	68fb      	ldr	r3, [r7, #12]
 10040ce:	f003 031f 	and.w	r3, r3, #31
 10040d2:	2201      	movs	r2, #1
 10040d4:	409a      	lsls	r2, r3
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 10040d6:	69bb      	ldr	r3, [r7, #24]
 10040d8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
 10040dc:	bf00      	nop
 10040de:	3734      	adds	r7, #52	; 0x34
 10040e0:	46bd      	mov	sp, r7
 10040e2:	bc80      	pop	{r7}
 10040e4:	4770      	bx	lr

010040e6 <ioport_set_pin_level>:
{
 10040e6:	b480      	push	{r7}
 10040e8:	b08b      	sub	sp, #44	; 0x2c
 10040ea:	af00      	add	r7, sp, #0
 10040ec:	6078      	str	r0, [r7, #4]
 10040ee:	460b      	mov	r3, r1
 10040f0:	70fb      	strb	r3, [r7, #3]
 10040f2:	687b      	ldr	r3, [r7, #4]
 10040f4:	627b      	str	r3, [r7, #36]	; 0x24
 10040f6:	78fb      	ldrb	r3, [r7, #3]
 10040f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 10040fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 10040fe:	61fb      	str	r3, [r7, #28]
 1004100:	69fb      	ldr	r3, [r7, #28]
 1004102:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
 1004104:	69bb      	ldr	r3, [r7, #24]
 1004106:	095b      	lsrs	r3, r3, #5
 1004108:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
 100410a:	697b      	ldr	r3, [r7, #20]
 100410c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 1004110:	f203 7307 	addw	r3, r3, #1799	; 0x707
 1004114:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
 1004116:	613b      	str	r3, [r7, #16]
	if (level) {
 1004118:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 100411c:	2b00      	cmp	r3, #0
 100411e:	d009      	beq.n	1004134 <ioport_set_pin_level+0x4e>
 1004120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 1004122:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
 1004124:	68fb      	ldr	r3, [r7, #12]
 1004126:	f003 031f 	and.w	r3, r3, #31
 100412a:	2201      	movs	r2, #1
 100412c:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
 100412e:	693b      	ldr	r3, [r7, #16]
 1004130:	631a      	str	r2, [r3, #48]	; 0x30
}
 1004132:	e008      	b.n	1004146 <ioport_set_pin_level+0x60>
 1004134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 1004136:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
 1004138:	68bb      	ldr	r3, [r7, #8]
 100413a:	f003 031f 	and.w	r3, r3, #31
 100413e:	2201      	movs	r2, #1
 1004140:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
 1004142:	693b      	ldr	r3, [r7, #16]
 1004144:	635a      	str	r2, [r3, #52]	; 0x34
 1004146:	bf00      	nop
 1004148:	372c      	adds	r7, #44	; 0x2c
 100414a:	46bd      	mov	sp, r7
 100414c:	bc80      	pop	{r7}
 100414e:	4770      	bx	lr

01004150 <board_init>:
		ioport_set_pin_sense_mode(pin, sense); \
	} \
	while (0)

void board_init(void)
{
 1004150:	b580      	push	{r7, lr}
 1004152:	af00      	add	r7, sp, #0

	/* GPIO has been deprecated, the old code just keeps it for compatibility.
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
 1004154:	4b24      	ldr	r3, [pc, #144]	; (10041e8 <board_init+0x98>)
 1004156:	4798      	blx	r3

	/* Configure the pins connected to LEDs as output and set their
	 * default initial state to high (LEDs off).
	 */
	ioport_set_pin_dir(LED0_GPIO, IOPORT_DIR_OUTPUT);
 1004158:	2101      	movs	r1, #1
 100415a:	200c      	movs	r0, #12
 100415c:	4b23      	ldr	r3, [pc, #140]	; (10041ec <board_init+0x9c>)
 100415e:	4798      	blx	r3
	ioport_set_pin_level(LED0_GPIO, LED0_INACTIVE_LEVEL);
 1004160:	2101      	movs	r1, #1
 1004162:	200c      	movs	r0, #12
 1004164:	4b22      	ldr	r3, [pc, #136]	; (10041f0 <board_init+0xa0>)
 1004166:	4798      	blx	r3
	ioport_set_pin_dir(LED1_GPIO, IOPORT_DIR_OUTPUT);
 1004168:	2101      	movs	r1, #1
 100416a:	200f      	movs	r0, #15
 100416c:	4b1f      	ldr	r3, [pc, #124]	; (10041ec <board_init+0x9c>)
 100416e:	4798      	blx	r3
	ioport_set_pin_level(LED1_GPIO, LED0_INACTIVE_LEVEL);
 1004170:	2101      	movs	r1, #1
 1004172:	200f      	movs	r0, #15
 1004174:	4b1e      	ldr	r3, [pc, #120]	; (10041f0 <board_init+0xa0>)
 1004176:	4798      	blx	r3

	/* Configure ATPL360 SPI pins */
	ioport_set_pin_peripheral_mode(SPI3_MISO_GPIO, SPI3_MISO_FLAGS);
 1004178:	2100      	movs	r1, #0
 100417a:	2004      	movs	r0, #4
 100417c:	4b1d      	ldr	r3, [pc, #116]	; (10041f4 <board_init+0xa4>)
 100417e:	4798      	blx	r3
 1004180:	2004      	movs	r0, #4
 1004182:	4b1d      	ldr	r3, [pc, #116]	; (10041f8 <board_init+0xa8>)
 1004184:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(SPI3_MOSI_GPIO, SPI3_MOSI_FLAGS);
 1004186:	2100      	movs	r1, #0
 1004188:	2003      	movs	r0, #3
 100418a:	4b1a      	ldr	r3, [pc, #104]	; (10041f4 <board_init+0xa4>)
 100418c:	4798      	blx	r3
 100418e:	2003      	movs	r0, #3
 1004190:	4b19      	ldr	r3, [pc, #100]	; (10041f8 <board_init+0xa8>)
 1004192:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(SPI3_SPCK_GPIO, SPI3_SPCK_FLAGS);
 1004194:	2100      	movs	r1, #0
 1004196:	202d      	movs	r0, #45	; 0x2d
 1004198:	4b16      	ldr	r3, [pc, #88]	; (10041f4 <board_init+0xa4>)
 100419a:	4798      	blx	r3
 100419c:	202d      	movs	r0, #45	; 0x2d
 100419e:	4b16      	ldr	r3, [pc, #88]	; (10041f8 <board_init+0xa8>)
 10041a0:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(SPI3_NPCS0_GPIO, SPI3_NPCS0_FLAGS);
 10041a2:	2100      	movs	r1, #0
 10041a4:	202e      	movs	r0, #46	; 0x2e
 10041a6:	4b13      	ldr	r3, [pc, #76]	; (10041f4 <board_init+0xa4>)
 10041a8:	4798      	blx	r3
 10041aa:	202e      	movs	r0, #46	; 0x2e
 10041ac:	4b12      	ldr	r3, [pc, #72]	; (10041f8 <board_init+0xa8>)
 10041ae:	4798      	blx	r3
	/* Enable FLEXCOM */
	flexcom_enable(BOARD_FLEXCOM_SPI3);
 10041b0:	4812      	ldr	r0, [pc, #72]	; (10041fc <board_init+0xac>)
 10041b2:	4b13      	ldr	r3, [pc, #76]	; (1004200 <board_init+0xb0>)
 10041b4:	4798      	blx	r3
	flexcom_set_opmode(BOARD_FLEXCOM_SPI3, FLEXCOM_SPI);
 10041b6:	2102      	movs	r1, #2
 10041b8:	4810      	ldr	r0, [pc, #64]	; (10041fc <board_init+0xac>)
 10041ba:	4b12      	ldr	r3, [pc, #72]	; (1004204 <board_init+0xb4>)
 10041bc:	4798      	blx	r3
	flexcom_set_opmode(BOARD_FLEXCOM_SPI0, FLEXCOM_SPI);
#endif

#if defined(CONF_BOARD_UART_MIKROBUS) || defined(CONF_BOARD_UART_CONSOLE)
	/* Configure USART 4 */
	ioport_set_port_peripheral_mode(PINS_USART4_PORT, PINS_USART4, PINS_USART4_FLAGS);
 10041be:	2200      	movs	r2, #0
 10041c0:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 10041c4:	2001      	movs	r0, #1
 10041c6:	4b10      	ldr	r3, [pc, #64]	; (1004208 <board_init+0xb8>)
 10041c8:	4798      	blx	r3
 10041ca:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 10041ce:	2001      	movs	r0, #1
 10041d0:	4b0e      	ldr	r3, [pc, #56]	; (100420c <board_init+0xbc>)
 10041d2:	4798      	blx	r3
	/* Enable FLEXCOM */
	flexcom_enable(BOARD_FLEXCOM_USART4);
 10041d4:	480e      	ldr	r0, [pc, #56]	; (1004210 <board_init+0xc0>)
 10041d6:	4b0a      	ldr	r3, [pc, #40]	; (1004200 <board_init+0xb0>)
 10041d8:	4798      	blx	r3
	flexcom_set_opmode(BOARD_FLEXCOM_USART4, FLEXCOM_USART);
 10041da:	2101      	movs	r1, #1
 10041dc:	480c      	ldr	r0, [pc, #48]	; (1004210 <board_init+0xc0>)
 10041de:	4b09      	ldr	r3, [pc, #36]	; (1004204 <board_init+0xb4>)
 10041e0:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_USB_PORT
	gpio_configure_pin(USB_VBUS_PIN, USB_VBUS_FLAGS);
#endif
}
 10041e2:	bf00      	nop
 10041e4:	bd80      	pop	{r7, pc}
 10041e6:	bf00      	nop
 10041e8:	01003db5 	.word	0x01003db5
 10041ec:	01004061 	.word	0x01004061
 10041f0:	010040e7 	.word	0x010040e7
 10041f4:	01003f47 	.word	0x01003f47
 10041f8:	01003dcd 	.word	0x01003dcd
 10041fc:	40018000 	.word	0x40018000
 1004200:	01004331 	.word	0x01004331
 1004204:	01004499 	.word	0x01004499
 1004208:	01003e47 	.word	0x01003e47
 100420c:	01003e15 	.word	0x01003e15
 1004210:	4001c000 	.word	0x4001c000

01004214 <efc_init>:
 * \param ul_fws The number of wait states in cycle (no shift).
 *
 * \return 0 if successful.
 */
uint32_t efc_init(Efc *p_efc, uint32_t ul_access_mode, uint32_t ul_fws)
{
 1004214:	b580      	push	{r7, lr}
 1004216:	b084      	sub	sp, #16
 1004218:	af00      	add	r7, sp, #0
 100421a:	60f8      	str	r0, [r7, #12]
 100421c:	60b9      	str	r1, [r7, #8]
 100421e:	607a      	str	r2, [r7, #4]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
	efc_write_fmr(p_efc, ul_access_mode | EEFC_FMR_FWS(ul_fws) | EEFC_FMR_CLOE);
 1004220:	687b      	ldr	r3, [r7, #4]
 1004222:	021b      	lsls	r3, r3, #8
 1004224:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 1004228:	68bb      	ldr	r3, [r7, #8]
 100422a:	4313      	orrs	r3, r2
 100422c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 1004230:	4619      	mov	r1, r3
 1004232:	68f8      	ldr	r0, [r7, #12]
 1004234:	4b03      	ldr	r3, [pc, #12]	; (1004244 <efc_init+0x30>)
 1004236:	4798      	blx	r3
#else
	efc_write_fmr(p_efc, ul_access_mode | EEFC_FMR_FWS(ul_fws));
#endif
	return EFC_RC_OK;
 1004238:	2300      	movs	r3, #0
}
 100423a:	4618      	mov	r0, r3
 100423c:	3710      	adds	r7, #16
 100423e:	46bd      	mov	sp, r7
 1004240:	bd80      	pop	{r7, pc}
 1004242:	bf00      	nop
 1004244:	200000ad 	.word	0x200000ad

01004248 <cpu_irq_save>:
{
 1004248:	b480      	push	{r7}
 100424a:	b083      	sub	sp, #12
 100424c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 100424e:	f3ef 8310 	mrs	r3, PRIMASK
 1004252:	607b      	str	r3, [r7, #4]
  return(result);
 1004254:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
 1004256:	2b00      	cmp	r3, #0
 1004258:	bf0c      	ite	eq
 100425a:	2301      	moveq	r3, #1
 100425c:	2300      	movne	r3, #0
 100425e:	b2db      	uxtb	r3, r3
 1004260:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 1004262:	b672      	cpsid	i
 1004264:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
 1004268:	4b04      	ldr	r3, [pc, #16]	; (100427c <cpu_irq_save+0x34>)
 100426a:	2200      	movs	r2, #0
 100426c:	701a      	strb	r2, [r3, #0]
	return flags;
 100426e:	683b      	ldr	r3, [r7, #0]
}
 1004270:	4618      	mov	r0, r3
 1004272:	370c      	adds	r7, #12
 1004274:	46bd      	mov	sp, r7
 1004276:	bc80      	pop	{r7}
 1004278:	4770      	bx	lr
 100427a:	bf00      	nop
 100427c:	200001d4 	.word	0x200001d4

01004280 <cpu_irq_is_enabled_flags>:
{
 1004280:	b480      	push	{r7}
 1004282:	b083      	sub	sp, #12
 1004284:	af00      	add	r7, sp, #0
 1004286:	6078      	str	r0, [r7, #4]
	return (flags);
 1004288:	687b      	ldr	r3, [r7, #4]
 100428a:	2b00      	cmp	r3, #0
 100428c:	bf14      	ite	ne
 100428e:	2301      	movne	r3, #1
 1004290:	2300      	moveq	r3, #0
 1004292:	b2db      	uxtb	r3, r3
}
 1004294:	4618      	mov	r0, r3
 1004296:	370c      	adds	r7, #12
 1004298:	46bd      	mov	sp, r7
 100429a:	bc80      	pop	{r7}
 100429c:	4770      	bx	lr
	...

010042a0 <cpu_irq_restore>:
{
 10042a0:	b580      	push	{r7, lr}
 10042a2:	b082      	sub	sp, #8
 10042a4:	af00      	add	r7, sp, #0
 10042a6:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
 10042a8:	6878      	ldr	r0, [r7, #4]
 10042aa:	4b07      	ldr	r3, [pc, #28]	; (10042c8 <cpu_irq_restore+0x28>)
 10042ac:	4798      	blx	r3
 10042ae:	4603      	mov	r3, r0
 10042b0:	2b00      	cmp	r3, #0
 10042b2:	d005      	beq.n	10042c0 <cpu_irq_restore+0x20>
		cpu_irq_enable();
 10042b4:	4b05      	ldr	r3, [pc, #20]	; (10042cc <cpu_irq_restore+0x2c>)
 10042b6:	2201      	movs	r2, #1
 10042b8:	701a      	strb	r2, [r3, #0]
 10042ba:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
 10042be:	b662      	cpsie	i
}
 10042c0:	bf00      	nop
 10042c2:	3708      	adds	r7, #8
 10042c4:	46bd      	mov	sp, r7
 10042c6:	bd80      	pop	{r7, pc}
 10042c8:	01004281 	.word	0x01004281
 10042cc:	200001d4 	.word	0x200001d4

010042d0 <sysclk_enable_peripheral_clock>:
{
 10042d0:	b580      	push	{r7, lr}
 10042d2:	b082      	sub	sp, #8
 10042d4:	af00      	add	r7, sp, #0
 10042d6:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
 10042d8:	6878      	ldr	r0, [r7, #4]
 10042da:	4b03      	ldr	r3, [pc, #12]	; (10042e8 <sysclk_enable_peripheral_clock+0x18>)
 10042dc:	4798      	blx	r3
}
 10042de:	bf00      	nop
 10042e0:	3708      	adds	r7, #8
 10042e2:	46bd      	mov	sp, r7
 10042e4:	bd80      	pop	{r7, pc}
 10042e6:	bf00      	nop
 10042e8:	01004a15 	.word	0x01004a15

010042ec <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
 10042ec:	b580      	push	{r7, lr}
 10042ee:	b084      	sub	sp, #16
 10042f0:	af00      	add	r7, sp, #0
 10042f2:	4603      	mov	r3, r0
 10042f4:	71fb      	strb	r3, [r7, #7]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
 10042f6:	79fb      	ldrb	r3, [r7, #7]
 10042f8:	4a0a      	ldr	r2, [pc, #40]	; (1004324 <sleepmgr_lock_mode+0x38>)
 10042fa:	5cd3      	ldrb	r3, [r2, r3]
 10042fc:	2bff      	cmp	r3, #255	; 0xff
 10042fe:	d100      	bne.n	1004302 <sleepmgr_lock_mode+0x16>
		while (true) {
 1004300:	e7fe      	b.n	1004300 <sleepmgr_lock_mode+0x14>
			// Check APP or change the data type to uint16_t.
		}
	}

	// Enter a critical section
	flags = cpu_irq_save();
 1004302:	4b09      	ldr	r3, [pc, #36]	; (1004328 <sleepmgr_lock_mode+0x3c>)
 1004304:	4798      	blx	r3
 1004306:	60f8      	str	r0, [r7, #12]

	++sleepmgr_locks[mode];
 1004308:	79fb      	ldrb	r3, [r7, #7]
 100430a:	4a06      	ldr	r2, [pc, #24]	; (1004324 <sleepmgr_lock_mode+0x38>)
 100430c:	5cd2      	ldrb	r2, [r2, r3]
 100430e:	3201      	adds	r2, #1
 1004310:	b2d1      	uxtb	r1, r2
 1004312:	4a04      	ldr	r2, [pc, #16]	; (1004324 <sleepmgr_lock_mode+0x38>)
 1004314:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
 1004316:	68f8      	ldr	r0, [r7, #12]
 1004318:	4b04      	ldr	r3, [pc, #16]	; (100432c <sleepmgr_lock_mode+0x40>)
 100431a:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
 100431c:	bf00      	nop
 100431e:	3710      	adds	r7, #16
 1004320:	46bd      	mov	sp, r7
 1004322:	bd80      	pop	{r7, pc}
 1004324:	200082f0 	.word	0x200082f0
 1004328:	01004249 	.word	0x01004249
 100432c:	010042a1 	.word	0x010042a1

01004330 <flexcom_enable>:
 *
 * \param p_flexcom  Pointer to a FLEXCOM instance.
 *
 */
void flexcom_enable(Flexcom *p_flexcom)
{
 1004330:	b580      	push	{r7, lr}
 1004332:	b082      	sub	sp, #8
 1004334:	af00      	add	r7, sp, #0
 1004336:	6078      	str	r0, [r7, #4]
#if SAMG55
    #define PMC_PCK_PRES_CLK_1  PMC_PCK_PRES(0)
#endif

	sleepmgr_lock_mode(SLEEPMGR_ACTIVE);
 1004338:	2000      	movs	r0, #0
 100433a:	4b4a      	ldr	r3, [pc, #296]	; (1004464 <flexcom_enable+0x134>)
 100433c:	4798      	blx	r3
	/* Enable PMC clock for FLEXCOM */
#ifdef ID_FLEXCOM7
	 if (p_flexcom == FLEXCOM7) {
 100433e:	687b      	ldr	r3, [r7, #4]
 1004340:	4a49      	ldr	r2, [pc, #292]	; (1004468 <flexcom_enable+0x138>)
 1004342:	4293      	cmp	r3, r2
 1004344:	d10d      	bne.n	1004362 <flexcom_enable+0x32>
		sysclk_enable_peripheral_clock(ID_FLEXCOM7);
 1004346:	2007      	movs	r0, #7
 1004348:	4b48      	ldr	r3, [pc, #288]	; (100446c <flexcom_enable+0x13c>)
 100434a:	4798      	blx	r3
		/* Enable PCK output */
		pmc_disable_pck(PMC_PCK_7);
 100434c:	2007      	movs	r0, #7
 100434e:	4b48      	ldr	r3, [pc, #288]	; (1004470 <flexcom_enable+0x140>)
 1004350:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
 1004352:	2100      	movs	r1, #0
 1004354:	2007      	movs	r0, #7
 1004356:	4b47      	ldr	r3, [pc, #284]	; (1004474 <flexcom_enable+0x144>)
 1004358:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_7);
 100435a:	2007      	movs	r0, #7
 100435c:	4b46      	ldr	r3, [pc, #280]	; (1004478 <flexcom_enable+0x148>)
 100435e:	4798      	blx	r3
	} else
#endif
	{
		Assert(false);
	}
}
 1004360:	e07c      	b.n	100445c <flexcom_enable+0x12c>
	if (p_flexcom == FLEXCOM6) {
 1004362:	687b      	ldr	r3, [r7, #4]
 1004364:	4a45      	ldr	r2, [pc, #276]	; (100447c <flexcom_enable+0x14c>)
 1004366:	4293      	cmp	r3, r2
 1004368:	d10d      	bne.n	1004386 <flexcom_enable+0x56>
		sysclk_enable_peripheral_clock(ID_FLEXCOM6);
 100436a:	2016      	movs	r0, #22
 100436c:	4b3f      	ldr	r3, [pc, #252]	; (100446c <flexcom_enable+0x13c>)
 100436e:	4798      	blx	r3
		pmc_disable_pck(PMC_PCK_7);
 1004370:	2007      	movs	r0, #7
 1004372:	4b3f      	ldr	r3, [pc, #252]	; (1004470 <flexcom_enable+0x140>)
 1004374:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
 1004376:	2100      	movs	r1, #0
 1004378:	2007      	movs	r0, #7
 100437a:	4b3e      	ldr	r3, [pc, #248]	; (1004474 <flexcom_enable+0x144>)
 100437c:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_7);
 100437e:	2007      	movs	r0, #7
 1004380:	4b3d      	ldr	r3, [pc, #244]	; (1004478 <flexcom_enable+0x148>)
 1004382:	4798      	blx	r3
}
 1004384:	e06a      	b.n	100445c <flexcom_enable+0x12c>
	if (p_flexcom == FLEXCOM5) {
 1004386:	687b      	ldr	r3, [r7, #4]
 1004388:	4a3d      	ldr	r2, [pc, #244]	; (1004480 <flexcom_enable+0x150>)
 100438a:	4293      	cmp	r3, r2
 100438c:	d10d      	bne.n	10043aa <flexcom_enable+0x7a>
		sysclk_enable_peripheral_clock(ID_FLEXCOM5);
 100438e:	2015      	movs	r0, #21
 1004390:	4b36      	ldr	r3, [pc, #216]	; (100446c <flexcom_enable+0x13c>)
 1004392:	4798      	blx	r3
		pmc_disable_pck(PMC_PCK_7);
 1004394:	2007      	movs	r0, #7
 1004396:	4b36      	ldr	r3, [pc, #216]	; (1004470 <flexcom_enable+0x140>)
 1004398:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
 100439a:	2100      	movs	r1, #0
 100439c:	2007      	movs	r0, #7
 100439e:	4b35      	ldr	r3, [pc, #212]	; (1004474 <flexcom_enable+0x144>)
 10043a0:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_7);
 10043a2:	2007      	movs	r0, #7
 10043a4:	4b34      	ldr	r3, [pc, #208]	; (1004478 <flexcom_enable+0x148>)
 10043a6:	4798      	blx	r3
}
 10043a8:	e058      	b.n	100445c <flexcom_enable+0x12c>
	if (p_flexcom == FLEXCOM4) {
 10043aa:	687b      	ldr	r3, [r7, #4]
 10043ac:	4a35      	ldr	r2, [pc, #212]	; (1004484 <flexcom_enable+0x154>)
 10043ae:	4293      	cmp	r3, r2
 10043b0:	d10d      	bne.n	10043ce <flexcom_enable+0x9e>
		sysclk_enable_peripheral_clock(ID_FLEXCOM4);
 10043b2:	2014      	movs	r0, #20
 10043b4:	4b2d      	ldr	r3, [pc, #180]	; (100446c <flexcom_enable+0x13c>)
 10043b6:	4798      	blx	r3
		pmc_disable_pck(PMC_PCK_7);
 10043b8:	2007      	movs	r0, #7
 10043ba:	4b2d      	ldr	r3, [pc, #180]	; (1004470 <flexcom_enable+0x140>)
 10043bc:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
 10043be:	2100      	movs	r1, #0
 10043c0:	2007      	movs	r0, #7
 10043c2:	4b2c      	ldr	r3, [pc, #176]	; (1004474 <flexcom_enable+0x144>)
 10043c4:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_7);
 10043c6:	2007      	movs	r0, #7
 10043c8:	4b2b      	ldr	r3, [pc, #172]	; (1004478 <flexcom_enable+0x148>)
 10043ca:	4798      	blx	r3
}
 10043cc:	e046      	b.n	100445c <flexcom_enable+0x12c>
	if (p_flexcom == FLEXCOM3) {
 10043ce:	687b      	ldr	r3, [r7, #4]
 10043d0:	4a2d      	ldr	r2, [pc, #180]	; (1004488 <flexcom_enable+0x158>)
 10043d2:	4293      	cmp	r3, r2
 10043d4:	d10d      	bne.n	10043f2 <flexcom_enable+0xc2>
		sysclk_enable_peripheral_clock(ID_FLEXCOM3);
 10043d6:	2013      	movs	r0, #19
 10043d8:	4b24      	ldr	r3, [pc, #144]	; (100446c <flexcom_enable+0x13c>)
 10043da:	4798      	blx	r3
		pmc_disable_pck(PMC_PCK_6);
 10043dc:	2006      	movs	r0, #6
 10043de:	4b24      	ldr	r3, [pc, #144]	; (1004470 <flexcom_enable+0x140>)
 10043e0:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
 10043e2:	2100      	movs	r1, #0
 10043e4:	2006      	movs	r0, #6
 10043e6:	4b23      	ldr	r3, [pc, #140]	; (1004474 <flexcom_enable+0x144>)
 10043e8:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_6);
 10043ea:	2006      	movs	r0, #6
 10043ec:	4b22      	ldr	r3, [pc, #136]	; (1004478 <flexcom_enable+0x148>)
 10043ee:	4798      	blx	r3
}
 10043f0:	e034      	b.n	100445c <flexcom_enable+0x12c>
	if (p_flexcom == FLEXCOM2) {
 10043f2:	687b      	ldr	r3, [r7, #4]
 10043f4:	4a25      	ldr	r2, [pc, #148]	; (100448c <flexcom_enable+0x15c>)
 10043f6:	4293      	cmp	r3, r2
 10043f8:	d10d      	bne.n	1004416 <flexcom_enable+0xe6>
		sysclk_enable_peripheral_clock(ID_FLEXCOM2);
 10043fa:	200e      	movs	r0, #14
 10043fc:	4b1b      	ldr	r3, [pc, #108]	; (100446c <flexcom_enable+0x13c>)
 10043fe:	4798      	blx	r3
		pmc_disable_pck(PMC_PCK_6);
 1004400:	2006      	movs	r0, #6
 1004402:	4b1b      	ldr	r3, [pc, #108]	; (1004470 <flexcom_enable+0x140>)
 1004404:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
 1004406:	2100      	movs	r1, #0
 1004408:	2006      	movs	r0, #6
 100440a:	4b1a      	ldr	r3, [pc, #104]	; (1004474 <flexcom_enable+0x144>)
 100440c:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_6);
 100440e:	2006      	movs	r0, #6
 1004410:	4b19      	ldr	r3, [pc, #100]	; (1004478 <flexcom_enable+0x148>)
 1004412:	4798      	blx	r3
}
 1004414:	e022      	b.n	100445c <flexcom_enable+0x12c>
	if (p_flexcom == FLEXCOM1) {
 1004416:	687b      	ldr	r3, [r7, #4]
 1004418:	4a1d      	ldr	r2, [pc, #116]	; (1004490 <flexcom_enable+0x160>)
 100441a:	4293      	cmp	r3, r2
 100441c:	d10d      	bne.n	100443a <flexcom_enable+0x10a>
		sysclk_enable_peripheral_clock(ID_FLEXCOM1);
 100441e:	2009      	movs	r0, #9
 1004420:	4b12      	ldr	r3, [pc, #72]	; (100446c <flexcom_enable+0x13c>)
 1004422:	4798      	blx	r3
		pmc_disable_pck(PMC_PCK_6);
 1004424:	2006      	movs	r0, #6
 1004426:	4b12      	ldr	r3, [pc, #72]	; (1004470 <flexcom_enable+0x140>)
 1004428:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
 100442a:	2100      	movs	r1, #0
 100442c:	2006      	movs	r0, #6
 100442e:	4b11      	ldr	r3, [pc, #68]	; (1004474 <flexcom_enable+0x144>)
 1004430:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_6);
 1004432:	2006      	movs	r0, #6
 1004434:	4b10      	ldr	r3, [pc, #64]	; (1004478 <flexcom_enable+0x148>)
 1004436:	4798      	blx	r3
}
 1004438:	e010      	b.n	100445c <flexcom_enable+0x12c>
	if (p_flexcom == FLEXCOM0) {
 100443a:	687b      	ldr	r3, [r7, #4]
 100443c:	4a15      	ldr	r2, [pc, #84]	; (1004494 <flexcom_enable+0x164>)
 100443e:	4293      	cmp	r3, r2
 1004440:	d10c      	bne.n	100445c <flexcom_enable+0x12c>
		sysclk_enable_peripheral_clock(ID_FLEXCOM0);
 1004442:	2008      	movs	r0, #8
 1004444:	4b09      	ldr	r3, [pc, #36]	; (100446c <flexcom_enable+0x13c>)
 1004446:	4798      	blx	r3
		pmc_disable_pck(PMC_PCK_6);
 1004448:	2006      	movs	r0, #6
 100444a:	4b09      	ldr	r3, [pc, #36]	; (1004470 <flexcom_enable+0x140>)
 100444c:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
 100444e:	2100      	movs	r1, #0
 1004450:	2006      	movs	r0, #6
 1004452:	4b08      	ldr	r3, [pc, #32]	; (1004474 <flexcom_enable+0x144>)
 1004454:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_6);
 1004456:	2006      	movs	r0, #6
 1004458:	4b07      	ldr	r3, [pc, #28]	; (1004478 <flexcom_enable+0x148>)
 100445a:	4798      	blx	r3
}
 100445c:	bf00      	nop
 100445e:	3708      	adds	r7, #8
 1004460:	46bd      	mov	sp, r7
 1004462:	bd80      	pop	{r7, pc}
 1004464:	010042ed 	.word	0x010042ed
 1004468:	40034000 	.word	0x40034000
 100446c:	010042d1 	.word	0x010042d1
 1004470:	01004b91 	.word	0x01004b91
 1004474:	01004b15 	.word	0x01004b15
 1004478:	01004b6d 	.word	0x01004b6d
 100447c:	40040000 	.word	0x40040000
 1004480:	40008000 	.word	0x40008000
 1004484:	4001c000 	.word	0x4001c000
 1004488:	40018000 	.word	0x40018000
 100448c:	40024000 	.word	0x40024000
 1004490:	40020000 	.word	0x40020000
 1004494:	4000c000 	.word	0x4000c000

01004498 <flexcom_set_opmode>:
 * \param p_flexcom  Pointer to a FLEXCOM instance.
 * \param opmode  Opration mode.
 *
 */
void flexcom_set_opmode(Flexcom *p_flexcom, enum flexcom_opmode opmode)
{
 1004498:	b480      	push	{r7}
 100449a:	b083      	sub	sp, #12
 100449c:	af00      	add	r7, sp, #0
 100449e:	6078      	str	r0, [r7, #4]
 10044a0:	460b      	mov	r3, r1
 10044a2:	70fb      	strb	r3, [r7, #3]
	p_flexcom->FLEXCOM_MR = opmode;
 10044a4:	78fa      	ldrb	r2, [r7, #3]
 10044a6:	687b      	ldr	r3, [r7, #4]
 10044a8:	601a      	str	r2, [r3, #0]
}
 10044aa:	bf00      	nop
 10044ac:	370c      	adds	r7, #12
 10044ae:	46bd      	mov	sp, r7
 10044b0:	bc80      	pop	{r7}
 10044b2:	4770      	bx	lr

010044b4 <pdc_tx_init>:
 */
void pdc_tx_init(
		Pdc *p_pdc,
		pdc_packet_t *p_packet,
		pdc_packet_t *p_next_packet)
{
 10044b4:	b480      	push	{r7}
 10044b6:	b085      	sub	sp, #20
 10044b8:	af00      	add	r7, sp, #0
 10044ba:	60f8      	str	r0, [r7, #12]
 10044bc:	60b9      	str	r1, [r7, #8]
 10044be:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
 10044c0:	68bb      	ldr	r3, [r7, #8]
 10044c2:	2b00      	cmp	r3, #0
 10044c4:	d007      	beq.n	10044d6 <pdc_tx_init+0x22>
		p_pdc->PERIPH_TPR = p_packet->ul_addr;
 10044c6:	68bb      	ldr	r3, [r7, #8]
 10044c8:	681a      	ldr	r2, [r3, #0]
 10044ca:	68fb      	ldr	r3, [r7, #12]
 10044cc:	609a      	str	r2, [r3, #8]
		p_pdc->PERIPH_TCR = p_packet->ul_size;
 10044ce:	68bb      	ldr	r3, [r7, #8]
 10044d0:	685a      	ldr	r2, [r3, #4]
 10044d2:	68fb      	ldr	r3, [r7, #12]
 10044d4:	60da      	str	r2, [r3, #12]
	}
	if (p_next_packet) {
 10044d6:	687b      	ldr	r3, [r7, #4]
 10044d8:	2b00      	cmp	r3, #0
 10044da:	d007      	beq.n	10044ec <pdc_tx_init+0x38>
		p_pdc->PERIPH_TNPR = p_next_packet->ul_addr;
 10044dc:	687b      	ldr	r3, [r7, #4]
 10044de:	681a      	ldr	r2, [r3, #0]
 10044e0:	68fb      	ldr	r3, [r7, #12]
 10044e2:	619a      	str	r2, [r3, #24]
		p_pdc->PERIPH_TNCR = p_next_packet->ul_size;
 10044e4:	687b      	ldr	r3, [r7, #4]
 10044e6:	685a      	ldr	r2, [r3, #4]
 10044e8:	68fb      	ldr	r3, [r7, #12]
 10044ea:	61da      	str	r2, [r3, #28]
	}
}
 10044ec:	bf00      	nop
 10044ee:	3714      	adds	r7, #20
 10044f0:	46bd      	mov	sp, r7
 10044f2:	bc80      	pop	{r7}
 10044f4:	4770      	bx	lr

010044f6 <pdc_rx_init>:
 */
void pdc_rx_init(
		Pdc *p_pdc,
		pdc_packet_t *p_packet,
		pdc_packet_t *p_next_packet)
{
 10044f6:	b480      	push	{r7}
 10044f8:	b085      	sub	sp, #20
 10044fa:	af00      	add	r7, sp, #0
 10044fc:	60f8      	str	r0, [r7, #12]
 10044fe:	60b9      	str	r1, [r7, #8]
 1004500:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
 1004502:	68bb      	ldr	r3, [r7, #8]
 1004504:	2b00      	cmp	r3, #0
 1004506:	d007      	beq.n	1004518 <pdc_rx_init+0x22>
		p_pdc->PERIPH_RPR = p_packet->ul_addr;
 1004508:	68bb      	ldr	r3, [r7, #8]
 100450a:	681a      	ldr	r2, [r3, #0]
 100450c:	68fb      	ldr	r3, [r7, #12]
 100450e:	601a      	str	r2, [r3, #0]
		p_pdc->PERIPH_RCR = p_packet->ul_size;
 1004510:	68bb      	ldr	r3, [r7, #8]
 1004512:	685a      	ldr	r2, [r3, #4]
 1004514:	68fb      	ldr	r3, [r7, #12]
 1004516:	605a      	str	r2, [r3, #4]
	}
	if (p_next_packet) {
 1004518:	687b      	ldr	r3, [r7, #4]
 100451a:	2b00      	cmp	r3, #0
 100451c:	d007      	beq.n	100452e <pdc_rx_init+0x38>
		p_pdc->PERIPH_RNPR = p_next_packet->ul_addr;
 100451e:	687b      	ldr	r3, [r7, #4]
 1004520:	681a      	ldr	r2, [r3, #0]
 1004522:	68fb      	ldr	r3, [r7, #12]
 1004524:	611a      	str	r2, [r3, #16]
		p_pdc->PERIPH_RNCR = p_next_packet->ul_size;
 1004526:	687b      	ldr	r3, [r7, #4]
 1004528:	685a      	ldr	r2, [r3, #4]
 100452a:	68fb      	ldr	r3, [r7, #12]
 100452c:	615a      	str	r2, [r3, #20]
	}
}
 100452e:	bf00      	nop
 1004530:	3714      	adds	r7, #20
 1004532:	46bd      	mov	sp, r7
 1004534:	bc80      	pop	{r7}
 1004536:	4770      	bx	lr

01004538 <pdc_enable_transfer>:
 *                        (bit PERIPH_PTCR_RXTEN and bit PERIPH_PTCR_TXTEN)
 */
void pdc_enable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
 1004538:	b480      	push	{r7}
 100453a:	b083      	sub	sp, #12
 100453c:	af00      	add	r7, sp, #0
 100453e:	6078      	str	r0, [r7, #4]
 1004540:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
 1004542:	683a      	ldr	r2, [r7, #0]
 1004544:	f240 1301 	movw	r3, #257	; 0x101
 1004548:	4013      	ands	r3, r2
	p_pdc->PERIPH_PTCR =
 100454a:	687a      	ldr	r2, [r7, #4]
 100454c:	6213      	str	r3, [r2, #32]
}
 100454e:	bf00      	nop
 1004550:	370c      	adds	r7, #12
 1004552:	46bd      	mov	sp, r7
 1004554:	bc80      	pop	{r7}
 1004556:	4770      	bx	lr

01004558 <pdc_disable_transfer>:
 *                        (bit PERIPH_PTCR_TXTDIS, bit PERIPH_PTCR_TXTDIS)
 */
void pdc_disable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
 1004558:	b480      	push	{r7}
 100455a:	b083      	sub	sp, #12
 100455c:	af00      	add	r7, sp, #0
 100455e:	6078      	str	r0, [r7, #4]
 1004560:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
 1004562:	683a      	ldr	r2, [r7, #0]
 1004564:	f240 2302 	movw	r3, #514	; 0x202
 1004568:	4013      	ands	r3, r2
	p_pdc->PERIPH_PTCR =
 100456a:	687a      	ldr	r2, [r7, #4]
 100456c:	6213      	str	r3, [r2, #32]
}
 100456e:	bf00      	nop
 1004570:	370c      	adds	r7, #12
 1004572:	46bd      	mov	sp, r7
 1004574:	bc80      	pop	{r7}
 1004576:	4770      	bx	lr

01004578 <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
 1004578:	b480      	push	{r7}
 100457a:	b085      	sub	sp, #20
 100457c:	af00      	add	r7, sp, #0
 100457e:	60f8      	str	r0, [r7, #12]
 1004580:	60b9      	str	r1, [r7, #8]
 1004582:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
 1004584:	687b      	ldr	r3, [r7, #4]
 1004586:	f003 0310 	and.w	r3, r3, #16
 100458a:	2b00      	cmp	r3, #0
 100458c:	d020      	beq.n	10045d0 <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
 100458e:	68fb      	ldr	r3, [r7, #12]
 1004590:	68ba      	ldr	r2, [r7, #8]
 1004592:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
 1004596:	687b      	ldr	r3, [r7, #4]
 1004598:	f003 0320 	and.w	r3, r3, #32
 100459c:	2b00      	cmp	r3, #0
 100459e:	d004      	beq.n	10045aa <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
 10045a0:	68fb      	ldr	r3, [r7, #12]
 10045a2:	68ba      	ldr	r2, [r7, #8]
 10045a4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 10045a8:	e003      	b.n	10045b2 <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
 10045aa:	68fb      	ldr	r3, [r7, #12]
 10045ac:	68ba      	ldr	r2, [r7, #8]
 10045ae:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
 10045b2:	687b      	ldr	r3, [r7, #4]
 10045b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 10045b8:	2b00      	cmp	r3, #0
 10045ba:	d004      	beq.n	10045c6 <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
 10045bc:	68fb      	ldr	r3, [r7, #12]
 10045be:	68ba      	ldr	r2, [r7, #8]
 10045c0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
 10045c4:	e008      	b.n	10045d8 <pio_configure_interrupt+0x60>
			p_pio->PIO_LSR = ul_mask;
 10045c6:	68fb      	ldr	r3, [r7, #12]
 10045c8:	68ba      	ldr	r2, [r7, #8]
 10045ca:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
 10045ce:	e003      	b.n	10045d8 <pio_configure_interrupt+0x60>
		p_pio->PIO_AIMDR = ul_mask;
 10045d0:	68fb      	ldr	r3, [r7, #12]
 10045d2:	68ba      	ldr	r2, [r7, #8]
 10045d4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 10045d8:	bf00      	nop
 10045da:	3714      	adds	r7, #20
 10045dc:	46bd      	mov	sp, r7
 10045de:	bc80      	pop	{r7}
 10045e0:	4770      	bx	lr

010045e2 <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
 10045e2:	b480      	push	{r7}
 10045e4:	b083      	sub	sp, #12
 10045e6:	af00      	add	r7, sp, #0
 10045e8:	6078      	str	r0, [r7, #4]
 10045ea:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IER = ul_mask;
 10045ec:	687b      	ldr	r3, [r7, #4]
 10045ee:	683a      	ldr	r2, [r7, #0]
 10045f0:	641a      	str	r2, [r3, #64]	; 0x40
}
 10045f2:	bf00      	nop
 10045f4:	370c      	adds	r7, #12
 10045f6:	46bd      	mov	sp, r7
 10045f8:	bc80      	pop	{r7}
 10045fa:	4770      	bx	lr

010045fc <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
 10045fc:	b480      	push	{r7}
 10045fe:	b083      	sub	sp, #12
 1004600:	af00      	add	r7, sp, #0
 1004602:	6078      	str	r0, [r7, #4]
 1004604:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
 1004606:	687b      	ldr	r3, [r7, #4]
 1004608:	683a      	ldr	r2, [r7, #0]
 100460a:	645a      	str	r2, [r3, #68]	; 0x44
}
 100460c:	bf00      	nop
 100460e:	370c      	adds	r7, #12
 1004610:	46bd      	mov	sp, r7
 1004612:	bc80      	pop	{r7}
 1004614:	4770      	bx	lr

01004616 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
 1004616:	b480      	push	{r7}
 1004618:	b083      	sub	sp, #12
 100461a:	af00      	add	r7, sp, #0
 100461c:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
 100461e:	687b      	ldr	r3, [r7, #4]
 1004620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 1004622:	4618      	mov	r0, r3
 1004624:	370c      	adds	r7, #12
 1004626:	46bd      	mov	sp, r7
 1004628:	bc80      	pop	{r7}
 100462a:	4770      	bx	lr

0100462c <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
 100462c:	b480      	push	{r7}
 100462e:	b083      	sub	sp, #12
 1004630:	af00      	add	r7, sp, #0
 1004632:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
 1004634:	687b      	ldr	r3, [r7, #4]
 1004636:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 1004638:	4618      	mov	r0, r3
 100463a:	370c      	adds	r7, #12
 100463c:	46bd      	mov	sp, r7
 100463e:	bc80      	pop	{r7}
 1004640:	4770      	bx	lr
	...

01004644 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
 1004644:	b580      	push	{r7, lr}
 1004646:	b084      	sub	sp, #16
 1004648:	af00      	add	r7, sp, #0
 100464a:	6078      	str	r0, [r7, #4]
 100464c:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
 100464e:	6878      	ldr	r0, [r7, #4]
 1004650:	4b26      	ldr	r3, [pc, #152]	; (10046ec <pio_handler_process+0xa8>)
 1004652:	4798      	blx	r3
 1004654:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
 1004656:	6878      	ldr	r0, [r7, #4]
 1004658:	4b25      	ldr	r3, [pc, #148]	; (10046f0 <pio_handler_process+0xac>)
 100465a:	4798      	blx	r3
 100465c:	4602      	mov	r2, r0
 100465e:	68fb      	ldr	r3, [r7, #12]
 1004660:	4013      	ands	r3, r2
 1004662:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
 1004664:	68fb      	ldr	r3, [r7, #12]
 1004666:	2b00      	cmp	r3, #0
 1004668:	d03c      	beq.n	10046e4 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
 100466a:	2300      	movs	r3, #0
 100466c:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
 100466e:	e034      	b.n	10046da <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
 1004670:	4a20      	ldr	r2, [pc, #128]	; (10046f4 <pio_handler_process+0xb0>)
 1004672:	68bb      	ldr	r3, [r7, #8]
 1004674:	011b      	lsls	r3, r3, #4
 1004676:	4413      	add	r3, r2
 1004678:	681a      	ldr	r2, [r3, #0]
 100467a:	683b      	ldr	r3, [r7, #0]
 100467c:	429a      	cmp	r2, r3
 100467e:	d126      	bne.n	10046ce <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
 1004680:	4a1c      	ldr	r2, [pc, #112]	; (10046f4 <pio_handler_process+0xb0>)
 1004682:	68bb      	ldr	r3, [r7, #8]
 1004684:	011b      	lsls	r3, r3, #4
 1004686:	4413      	add	r3, r2
 1004688:	3304      	adds	r3, #4
 100468a:	681a      	ldr	r2, [r3, #0]
 100468c:	68fb      	ldr	r3, [r7, #12]
 100468e:	4013      	ands	r3, r2
 1004690:	2b00      	cmp	r3, #0
 1004692:	d01c      	beq.n	10046ce <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
 1004694:	4a17      	ldr	r2, [pc, #92]	; (10046f4 <pio_handler_process+0xb0>)
 1004696:	68bb      	ldr	r3, [r7, #8]
 1004698:	011b      	lsls	r3, r3, #4
 100469a:	4413      	add	r3, r2
 100469c:	330c      	adds	r3, #12
 100469e:	681b      	ldr	r3, [r3, #0]
 10046a0:	4914      	ldr	r1, [pc, #80]	; (10046f4 <pio_handler_process+0xb0>)
 10046a2:	68ba      	ldr	r2, [r7, #8]
 10046a4:	0112      	lsls	r2, r2, #4
 10046a6:	440a      	add	r2, r1
 10046a8:	6810      	ldr	r0, [r2, #0]
 10046aa:	4912      	ldr	r1, [pc, #72]	; (10046f4 <pio_handler_process+0xb0>)
 10046ac:	68ba      	ldr	r2, [r7, #8]
 10046ae:	0112      	lsls	r2, r2, #4
 10046b0:	440a      	add	r2, r1
 10046b2:	3204      	adds	r2, #4
 10046b4:	6812      	ldr	r2, [r2, #0]
 10046b6:	4611      	mov	r1, r2
 10046b8:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
 10046ba:	4a0e      	ldr	r2, [pc, #56]	; (10046f4 <pio_handler_process+0xb0>)
 10046bc:	68bb      	ldr	r3, [r7, #8]
 10046be:	011b      	lsls	r3, r3, #4
 10046c0:	4413      	add	r3, r2
 10046c2:	3304      	adds	r3, #4
 10046c4:	681b      	ldr	r3, [r3, #0]
 10046c6:	43db      	mvns	r3, r3
 10046c8:	68fa      	ldr	r2, [r7, #12]
 10046ca:	4013      	ands	r3, r2
 10046cc:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
 10046ce:	68bb      	ldr	r3, [r7, #8]
 10046d0:	3301      	adds	r3, #1
 10046d2:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
 10046d4:	68bb      	ldr	r3, [r7, #8]
 10046d6:	2b06      	cmp	r3, #6
 10046d8:	d803      	bhi.n	10046e2 <pio_handler_process+0x9e>
		while (status != 0) {
 10046da:	68fb      	ldr	r3, [r7, #12]
 10046dc:	2b00      	cmp	r3, #0
 10046de:	d1c7      	bne.n	1004670 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
 10046e0:	e000      	b.n	10046e4 <pio_handler_process+0xa0>
				break;
 10046e2:	bf00      	nop
}
 10046e4:	bf00      	nop
 10046e6:	3710      	adds	r7, #16
 10046e8:	46bd      	mov	sp, r7
 10046ea:	bd80      	pop	{r7, pc}
 10046ec:	01004617 	.word	0x01004617
 10046f0:	0100462d 	.word	0x0100462d
 10046f4:	20001e54 	.word	0x20001e54

010046f8 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
 10046f8:	b580      	push	{r7, lr}
 10046fa:	b086      	sub	sp, #24
 10046fc:	af00      	add	r7, sp, #0
 10046fe:	60f8      	str	r0, [r7, #12]
 1004700:	60b9      	str	r1, [r7, #8]
 1004702:	607a      	str	r2, [r7, #4]
 1004704:	603b      	str	r3, [r7, #0]
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
 1004706:	4b21      	ldr	r3, [pc, #132]	; (100478c <pio_handler_set+0x94>)
 1004708:	681b      	ldr	r3, [r3, #0]
 100470a:	2b06      	cmp	r3, #6
 100470c:	d901      	bls.n	1004712 <pio_handler_set+0x1a>
		return 1;
 100470e:	2301      	movs	r3, #1
 1004710:	e038      	b.n	1004784 <pio_handler_set+0x8c>

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
 1004712:	2300      	movs	r3, #0
 1004714:	75fb      	strb	r3, [r7, #23]
 1004716:	e011      	b.n	100473c <pio_handler_set+0x44>
		pSource = &(gs_interrupt_sources[i]);
 1004718:	7dfb      	ldrb	r3, [r7, #23]
 100471a:	011b      	lsls	r3, r3, #4
 100471c:	4a1c      	ldr	r2, [pc, #112]	; (1004790 <pio_handler_set+0x98>)
 100471e:	4413      	add	r3, r2
 1004720:	613b      	str	r3, [r7, #16]
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
 1004722:	693b      	ldr	r3, [r7, #16]
 1004724:	681a      	ldr	r2, [r3, #0]
 1004726:	68bb      	ldr	r3, [r7, #8]
 1004728:	429a      	cmp	r2, r3
 100472a:	d104      	bne.n	1004736 <pio_handler_set+0x3e>
 100472c:	693b      	ldr	r3, [r7, #16]
 100472e:	685a      	ldr	r2, [r3, #4]
 1004730:	687b      	ldr	r3, [r7, #4]
 1004732:	429a      	cmp	r2, r3
 1004734:	d008      	beq.n	1004748 <pio_handler_set+0x50>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
 1004736:	7dfb      	ldrb	r3, [r7, #23]
 1004738:	3301      	adds	r3, #1
 100473a:	75fb      	strb	r3, [r7, #23]
 100473c:	7dfa      	ldrb	r2, [r7, #23]
 100473e:	4b13      	ldr	r3, [pc, #76]	; (100478c <pio_handler_set+0x94>)
 1004740:	681b      	ldr	r3, [r3, #0]
 1004742:	429a      	cmp	r2, r3
 1004744:	d9e8      	bls.n	1004718 <pio_handler_set+0x20>
 1004746:	e000      	b.n	100474a <pio_handler_set+0x52>
			break;
 1004748:	bf00      	nop
		}
	}

	/* Define new source */
	pSource->id = ul_id;
 100474a:	693b      	ldr	r3, [r7, #16]
 100474c:	68ba      	ldr	r2, [r7, #8]
 100474e:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
 1004750:	693b      	ldr	r3, [r7, #16]
 1004752:	687a      	ldr	r2, [r7, #4]
 1004754:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
 1004756:	693b      	ldr	r3, [r7, #16]
 1004758:	683a      	ldr	r2, [r7, #0]
 100475a:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
 100475c:	693b      	ldr	r3, [r7, #16]
 100475e:	6a3a      	ldr	r2, [r7, #32]
 1004760:	60da      	str	r2, [r3, #12]
	if (i == gs_ul_nb_sources + 1) {
 1004762:	7dfa      	ldrb	r2, [r7, #23]
 1004764:	4b09      	ldr	r3, [pc, #36]	; (100478c <pio_handler_set+0x94>)
 1004766:	681b      	ldr	r3, [r3, #0]
 1004768:	3301      	adds	r3, #1
 100476a:	429a      	cmp	r2, r3
 100476c:	d104      	bne.n	1004778 <pio_handler_set+0x80>
		gs_ul_nb_sources++;
 100476e:	4b07      	ldr	r3, [pc, #28]	; (100478c <pio_handler_set+0x94>)
 1004770:	681b      	ldr	r3, [r3, #0]
 1004772:	3301      	adds	r3, #1
 1004774:	4a05      	ldr	r2, [pc, #20]	; (100478c <pio_handler_set+0x94>)
 1004776:	6013      	str	r3, [r2, #0]
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
 1004778:	683a      	ldr	r2, [r7, #0]
 100477a:	6879      	ldr	r1, [r7, #4]
 100477c:	68f8      	ldr	r0, [r7, #12]
 100477e:	4b05      	ldr	r3, [pc, #20]	; (1004794 <pio_handler_set+0x9c>)
 1004780:	4798      	blx	r3

	return 0;
 1004782:	2300      	movs	r3, #0
}
 1004784:	4618      	mov	r0, r3
 1004786:	3718      	adds	r7, #24
 1004788:	46bd      	mov	sp, r7
 100478a:	bd80      	pop	{r7, pc}
 100478c:	20001ec4 	.word	0x20001ec4
 1004790:	20001e54 	.word	0x20001e54
 1004794:	01004579 	.word	0x01004579

01004798 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
 1004798:	b580      	push	{r7, lr}
 100479a:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
 100479c:	210b      	movs	r1, #11
 100479e:	4802      	ldr	r0, [pc, #8]	; (10047a8 <PIOA_Handler+0x10>)
 10047a0:	4b02      	ldr	r3, [pc, #8]	; (10047ac <PIOA_Handler+0x14>)
 10047a2:	4798      	blx	r3
}
 10047a4:	bf00      	nop
 10047a6:	bd80      	pop	{r7, pc}
 10047a8:	400e0e00 	.word	0x400e0e00
 10047ac:	01004645 	.word	0x01004645

010047b0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
 10047b0:	b580      	push	{r7, lr}
 10047b2:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
 10047b4:	210c      	movs	r1, #12
 10047b6:	4802      	ldr	r0, [pc, #8]	; (10047c0 <PIOB_Handler+0x10>)
 10047b8:	4b02      	ldr	r3, [pc, #8]	; (10047c4 <PIOB_Handler+0x14>)
 10047ba:	4798      	blx	r3
}
 10047bc:	bf00      	nop
 10047be:	bd80      	pop	{r7, pc}
 10047c0:	400e1000 	.word	0x400e1000
 10047c4:	01004645 	.word	0x01004645

010047c8 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
 10047c8:	b480      	push	{r7}
 10047ca:	b085      	sub	sp, #20
 10047cc:	af00      	add	r7, sp, #0
 10047ce:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
 10047d0:	491c      	ldr	r1, [pc, #112]	; (1004844 <pmc_switch_mck_to_pllack+0x7c>)
 10047d2:	4b1c      	ldr	r3, [pc, #112]	; (1004844 <pmc_switch_mck_to_pllack+0x7c>)
 10047d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 10047d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 10047da:	687b      	ldr	r3, [r7, #4]
 10047dc:	4313      	orrs	r3, r2
 10047de:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 10047e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 10047e4:	60fb      	str	r3, [r7, #12]
 10047e6:	e007      	b.n	10047f8 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
 10047e8:	68fb      	ldr	r3, [r7, #12]
 10047ea:	2b00      	cmp	r3, #0
 10047ec:	d101      	bne.n	10047f2 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
 10047ee:	2301      	movs	r3, #1
 10047f0:	e023      	b.n	100483a <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
 10047f2:	68fb      	ldr	r3, [r7, #12]
 10047f4:	3b01      	subs	r3, #1
 10047f6:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 10047f8:	4b12      	ldr	r3, [pc, #72]	; (1004844 <pmc_switch_mck_to_pllack+0x7c>)
 10047fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 10047fc:	f003 0308 	and.w	r3, r3, #8
 1004800:	2b00      	cmp	r3, #0
 1004802:	d0f1      	beq.n	10047e8 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
 1004804:	4a0f      	ldr	r2, [pc, #60]	; (1004844 <pmc_switch_mck_to_pllack+0x7c>)
 1004806:	4b0f      	ldr	r3, [pc, #60]	; (1004844 <pmc_switch_mck_to_pllack+0x7c>)
 1004808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 100480a:	f023 0303 	bic.w	r3, r3, #3
 100480e:	f043 0302 	orr.w	r3, r3, #2
 1004812:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 1004814:	f44f 6300 	mov.w	r3, #2048	; 0x800
 1004818:	60fb      	str	r3, [r7, #12]
 100481a:	e007      	b.n	100482c <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
 100481c:	68fb      	ldr	r3, [r7, #12]
 100481e:	2b00      	cmp	r3, #0
 1004820:	d101      	bne.n	1004826 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
 1004822:	2301      	movs	r3, #1
 1004824:	e009      	b.n	100483a <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
 1004826:	68fb      	ldr	r3, [r7, #12]
 1004828:	3b01      	subs	r3, #1
 100482a:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 100482c:	4b05      	ldr	r3, [pc, #20]	; (1004844 <pmc_switch_mck_to_pllack+0x7c>)
 100482e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 1004830:	f003 0308 	and.w	r3, r3, #8
 1004834:	2b00      	cmp	r3, #0
 1004836:	d0f1      	beq.n	100481c <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
 1004838:	2300      	movs	r3, #0
}
 100483a:	4618      	mov	r0, r3
 100483c:	3714      	adds	r7, #20
 100483e:	46bd      	mov	sp, r7
 1004840:	bc80      	pop	{r7}
 1004842:	4770      	bx	lr
 1004844:	400e0400 	.word	0x400e0400

01004848 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
 1004848:	b480      	push	{r7}
 100484a:	b083      	sub	sp, #12
 100484c:	af00      	add	r7, sp, #0
 100484e:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
 1004850:	687b      	ldr	r3, [r7, #4]
 1004852:	2b01      	cmp	r3, #1
 1004854:	d107      	bne.n	1004866 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
 1004856:	4a08      	ldr	r2, [pc, #32]	; (1004878 <pmc_switch_sclk_to_32kxtal+0x30>)
 1004858:	4b07      	ldr	r3, [pc, #28]	; (1004878 <pmc_switch_sclk_to_32kxtal+0x30>)
 100485a:	689b      	ldr	r3, [r3, #8]
 100485c:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
 1004860:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 1004864:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
 1004866:	4b04      	ldr	r3, [pc, #16]	; (1004878 <pmc_switch_sclk_to_32kxtal+0x30>)
 1004868:	4a04      	ldr	r2, [pc, #16]	; (100487c <pmc_switch_sclk_to_32kxtal+0x34>)
 100486a:	601a      	str	r2, [r3, #0]
}
 100486c:	bf00      	nop
 100486e:	370c      	adds	r7, #12
 1004870:	46bd      	mov	sp, r7
 1004872:	bc80      	pop	{r7}
 1004874:	4770      	bx	lr
 1004876:	bf00      	nop
 1004878:	400e1410 	.word	0x400e1410
 100487c:	a5000008 	.word	0xa5000008

01004880 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
 1004880:	b480      	push	{r7}
 1004882:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
 1004884:	4b09      	ldr	r3, [pc, #36]	; (10048ac <pmc_osc_is_ready_32kxtal+0x2c>)
 1004886:	695b      	ldr	r3, [r3, #20]
 1004888:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
 100488c:	2b00      	cmp	r3, #0
 100488e:	d007      	beq.n	10048a0 <pmc_osc_is_ready_32kxtal+0x20>
 1004890:	4b07      	ldr	r3, [pc, #28]	; (10048b0 <pmc_osc_is_ready_32kxtal+0x30>)
 1004892:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 1004894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 1004898:	2b00      	cmp	r3, #0
 100489a:	d001      	beq.n	10048a0 <pmc_osc_is_ready_32kxtal+0x20>
 100489c:	2301      	movs	r3, #1
 100489e:	e000      	b.n	10048a2 <pmc_osc_is_ready_32kxtal+0x22>
 10048a0:	2300      	movs	r3, #0
}
 10048a2:	4618      	mov	r0, r3
 10048a4:	46bd      	mov	sp, r7
 10048a6:	bc80      	pop	{r7}
 10048a8:	4770      	bx	lr
 10048aa:	bf00      	nop
 10048ac:	400e1410 	.word	0x400e1410
 10048b0:	400e0400 	.word	0x400e0400

010048b4 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
 10048b4:	b480      	push	{r7}
 10048b6:	b083      	sub	sp, #12
 10048b8:	af00      	add	r7, sp, #0
 10048ba:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
 10048bc:	4a18      	ldr	r2, [pc, #96]	; (1004920 <pmc_switch_mainck_to_fastrc+0x6c>)
 10048be:	4b18      	ldr	r3, [pc, #96]	; (1004920 <pmc_switch_mainck_to_fastrc+0x6c>)
 10048c0:	6a1b      	ldr	r3, [r3, #32]
 10048c2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
 10048c6:	f043 0308 	orr.w	r3, r3, #8
 10048ca:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
 10048cc:	bf00      	nop
 10048ce:	4b14      	ldr	r3, [pc, #80]	; (1004920 <pmc_switch_mainck_to_fastrc+0x6c>)
 10048d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 10048d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 10048d6:	2b00      	cmp	r3, #0
 10048d8:	d0f9      	beq.n	10048ce <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
 10048da:	4911      	ldr	r1, [pc, #68]	; (1004920 <pmc_switch_mainck_to_fastrc+0x6c>)
 10048dc:	4b10      	ldr	r3, [pc, #64]	; (1004920 <pmc_switch_mainck_to_fastrc+0x6c>)
 10048de:	6a1b      	ldr	r3, [r3, #32]
 10048e0:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
 10048e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
 10048e8:	687a      	ldr	r2, [r7, #4]
 10048ea:	4313      	orrs	r3, r2
 10048ec:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
 10048f0:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
 10048f2:	bf00      	nop
 10048f4:	4b0a      	ldr	r3, [pc, #40]	; (1004920 <pmc_switch_mainck_to_fastrc+0x6c>)
 10048f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 10048f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 10048fc:	2b00      	cmp	r3, #0
 10048fe:	d0f9      	beq.n	10048f4 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
 1004900:	4a07      	ldr	r2, [pc, #28]	; (1004920 <pmc_switch_mainck_to_fastrc+0x6c>)
 1004902:	4b07      	ldr	r3, [pc, #28]	; (1004920 <pmc_switch_mainck_to_fastrc+0x6c>)
 1004904:	6a1b      	ldr	r3, [r3, #32]
 1004906:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
 100490a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 100490e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
 1004912:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
 1004914:	bf00      	nop
 1004916:	370c      	adds	r7, #12
 1004918:	46bd      	mov	sp, r7
 100491a:	bc80      	pop	{r7}
 100491c:	4770      	bx	lr
 100491e:	bf00      	nop
 1004920:	400e0400 	.word	0x400e0400

01004924 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
 1004924:	b480      	push	{r7}
 1004926:	b083      	sub	sp, #12
 1004928:	af00      	add	r7, sp, #0
 100492a:	6078      	str	r0, [r7, #4]
 100492c:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
 100492e:	687b      	ldr	r3, [r7, #4]
 1004930:	2b00      	cmp	r3, #0
 1004932:	d008      	beq.n	1004946 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
 1004934:	4916      	ldr	r1, [pc, #88]	; (1004990 <pmc_switch_mainck_to_xtal+0x6c>)
 1004936:	4b16      	ldr	r3, [pc, #88]	; (1004990 <pmc_switch_mainck_to_xtal+0x6c>)
 1004938:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
 100493a:	4a16      	ldr	r2, [pc, #88]	; (1004994 <pmc_switch_mainck_to_xtal+0x70>)
 100493c:	401a      	ands	r2, r3
 100493e:	4b16      	ldr	r3, [pc, #88]	; (1004998 <pmc_switch_mainck_to_xtal+0x74>)
 1004940:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
 1004942:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
 1004944:	e01e      	b.n	1004984 <pmc_switch_mainck_to_xtal+0x60>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
 1004946:	4912      	ldr	r1, [pc, #72]	; (1004990 <pmc_switch_mainck_to_xtal+0x6c>)
 1004948:	4b11      	ldr	r3, [pc, #68]	; (1004990 <pmc_switch_mainck_to_xtal+0x6c>)
 100494a:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
 100494c:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
 1004950:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
 1004954:	683a      	ldr	r2, [r7, #0]
 1004956:	0212      	lsls	r2, r2, #8
 1004958:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
 100495a:	4313      	orrs	r3, r2
 100495c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
 1004960:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
 1004964:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
 1004966:	bf00      	nop
 1004968:	4b09      	ldr	r3, [pc, #36]	; (1004990 <pmc_switch_mainck_to_xtal+0x6c>)
 100496a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 100496c:	f003 0301 	and.w	r3, r3, #1
 1004970:	2b00      	cmp	r3, #0
 1004972:	d0f9      	beq.n	1004968 <pmc_switch_mainck_to_xtal+0x44>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
 1004974:	4a06      	ldr	r2, [pc, #24]	; (1004990 <pmc_switch_mainck_to_xtal+0x6c>)
 1004976:	4b06      	ldr	r3, [pc, #24]	; (1004990 <pmc_switch_mainck_to_xtal+0x6c>)
 1004978:	6a1b      	ldr	r3, [r3, #32]
 100497a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
 100497e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 1004982:	6213      	str	r3, [r2, #32]
}
 1004984:	bf00      	nop
 1004986:	370c      	adds	r7, #12
 1004988:	46bd      	mov	sp, r7
 100498a:	bc80      	pop	{r7}
 100498c:	4770      	bx	lr
 100498e:	bf00      	nop
 1004990:	400e0400 	.word	0x400e0400
 1004994:	fec8fffc 	.word	0xfec8fffc
 1004998:	01370002 	.word	0x01370002

0100499c <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
 100499c:	b480      	push	{r7}
 100499e:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
 10049a0:	4b03      	ldr	r3, [pc, #12]	; (10049b0 <pmc_osc_is_ready_mainck+0x14>)
 10049a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 10049a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 10049a8:	4618      	mov	r0, r3
 10049aa:	46bd      	mov	sp, r7
 10049ac:	bc80      	pop	{r7}
 10049ae:	4770      	bx	lr
 10049b0:	400e0400 	.word	0x400e0400

010049b4 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
 10049b4:	b480      	push	{r7}
 10049b6:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
 10049b8:	4b03      	ldr	r3, [pc, #12]	; (10049c8 <pmc_disable_pllack+0x14>)
 10049ba:	2200      	movs	r2, #0
 10049bc:	629a      	str	r2, [r3, #40]	; 0x28
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
#endif
}
 10049be:	bf00      	nop
 10049c0:	46bd      	mov	sp, r7
 10049c2:	bc80      	pop	{r7}
 10049c4:	4770      	bx	lr
 10049c6:	bf00      	nop
 10049c8:	400e0400 	.word	0x400e0400

010049cc <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
 10049cc:	b480      	push	{r7}
 10049ce:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
 10049d0:	4b03      	ldr	r3, [pc, #12]	; (10049e0 <pmc_is_locked_pllack+0x14>)
 10049d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 10049d4:	f003 0302 	and.w	r3, r3, #2
}
 10049d8:	4618      	mov	r0, r3
 10049da:	46bd      	mov	sp, r7
 10049dc:	bc80      	pop	{r7}
 10049de:	4770      	bx	lr
 10049e0:	400e0400 	.word	0x400e0400

010049e4 <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
 10049e4:	b480      	push	{r7}
 10049e6:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
 10049e8:	4b03      	ldr	r3, [pc, #12]	; (10049f8 <pmc_disable_pllbck+0x14>)
 10049ea:	2200      	movs	r2, #0
 10049ec:	62da      	str	r2, [r3, #44]	; 0x2c
}
 10049ee:	bf00      	nop
 10049f0:	46bd      	mov	sp, r7
 10049f2:	bc80      	pop	{r7}
 10049f4:	4770      	bx	lr
 10049f6:	bf00      	nop
 10049f8:	400e0400 	.word	0x400e0400

010049fc <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
 10049fc:	b480      	push	{r7}
 10049fe:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
 1004a00:	4b03      	ldr	r3, [pc, #12]	; (1004a10 <pmc_is_locked_pllbck+0x14>)
 1004a02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 1004a04:	f003 0304 	and.w	r3, r3, #4
}
 1004a08:	4618      	mov	r0, r3
 1004a0a:	46bd      	mov	sp, r7
 1004a0c:	bc80      	pop	{r7}
 1004a0e:	4770      	bx	lr
 1004a10:	400e0400 	.word	0x400e0400

01004a14 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
 1004a14:	b480      	push	{r7}
 1004a16:	b083      	sub	sp, #12
 1004a18:	af00      	add	r7, sp, #0
 1004a1a:	6078      	str	r0, [r7, #4]
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
 1004a1c:	687b      	ldr	r3, [r7, #4]
 1004a1e:	2b32      	cmp	r3, #50	; 0x32
 1004a20:	d901      	bls.n	1004a26 <pmc_enable_periph_clk+0x12>
		return 1;
 1004a22:	2301      	movs	r3, #1
 1004a24:	e02f      	b.n	1004a86 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
 1004a26:	687b      	ldr	r3, [r7, #4]
 1004a28:	2b1f      	cmp	r3, #31
 1004a2a:	d813      	bhi.n	1004a54 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
 1004a2c:	4b18      	ldr	r3, [pc, #96]	; (1004a90 <pmc_enable_periph_clk+0x7c>)
 1004a2e:	699a      	ldr	r2, [r3, #24]
 1004a30:	2101      	movs	r1, #1
 1004a32:	687b      	ldr	r3, [r7, #4]
 1004a34:	fa01 f303 	lsl.w	r3, r1, r3
 1004a38:	401a      	ands	r2, r3
 1004a3a:	2101      	movs	r1, #1
 1004a3c:	687b      	ldr	r3, [r7, #4]
 1004a3e:	fa01 f303 	lsl.w	r3, r1, r3
 1004a42:	429a      	cmp	r2, r3
 1004a44:	d01e      	beq.n	1004a84 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
 1004a46:	4a12      	ldr	r2, [pc, #72]	; (1004a90 <pmc_enable_periph_clk+0x7c>)
 1004a48:	2101      	movs	r1, #1
 1004a4a:	687b      	ldr	r3, [r7, #4]
 1004a4c:	fa01 f303 	lsl.w	r3, r1, r3
 1004a50:	6113      	str	r3, [r2, #16]
 1004a52:	e017      	b.n	1004a84 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
 1004a54:	687b      	ldr	r3, [r7, #4]
 1004a56:	3b20      	subs	r3, #32
 1004a58:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
 1004a5a:	4b0d      	ldr	r3, [pc, #52]	; (1004a90 <pmc_enable_periph_clk+0x7c>)
 1004a5c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 1004a60:	2101      	movs	r1, #1
 1004a62:	687b      	ldr	r3, [r7, #4]
 1004a64:	fa01 f303 	lsl.w	r3, r1, r3
 1004a68:	401a      	ands	r2, r3
 1004a6a:	2101      	movs	r1, #1
 1004a6c:	687b      	ldr	r3, [r7, #4]
 1004a6e:	fa01 f303 	lsl.w	r3, r1, r3
 1004a72:	429a      	cmp	r2, r3
 1004a74:	d006      	beq.n	1004a84 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
 1004a76:	4a06      	ldr	r2, [pc, #24]	; (1004a90 <pmc_enable_periph_clk+0x7c>)
 1004a78:	2101      	movs	r1, #1
 1004a7a:	687b      	ldr	r3, [r7, #4]
 1004a7c:	fa01 f303 	lsl.w	r3, r1, r3
 1004a80:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
 1004a84:	2300      	movs	r3, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
 1004a86:	4618      	mov	r0, r3
 1004a88:	370c      	adds	r7, #12
 1004a8a:	46bd      	mov	sp, r7
 1004a8c:	bc80      	pop	{r7}
 1004a8e:	4770      	bx	lr
 1004a90:	400e0400 	.word	0x400e0400

01004a94 <pmc_disable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
 1004a94:	b480      	push	{r7}
 1004a96:	b083      	sub	sp, #12
 1004a98:	af00      	add	r7, sp, #0
 1004a9a:	6078      	str	r0, [r7, #4]
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
 1004a9c:	687b      	ldr	r3, [r7, #4]
 1004a9e:	2b32      	cmp	r3, #50	; 0x32
 1004aa0:	d901      	bls.n	1004aa6 <pmc_disable_periph_clk+0x12>
		return 1;
 1004aa2:	2301      	movs	r3, #1
 1004aa4:	e02f      	b.n	1004b06 <pmc_disable_periph_clk+0x72>
	}

	if (ul_id < 32) {
 1004aa6:	687b      	ldr	r3, [r7, #4]
 1004aa8:	2b1f      	cmp	r3, #31
 1004aaa:	d813      	bhi.n	1004ad4 <pmc_disable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
 1004aac:	4b18      	ldr	r3, [pc, #96]	; (1004b10 <pmc_disable_periph_clk+0x7c>)
 1004aae:	699a      	ldr	r2, [r3, #24]
 1004ab0:	2101      	movs	r1, #1
 1004ab2:	687b      	ldr	r3, [r7, #4]
 1004ab4:	fa01 f303 	lsl.w	r3, r1, r3
 1004ab8:	401a      	ands	r2, r3
 1004aba:	2101      	movs	r1, #1
 1004abc:	687b      	ldr	r3, [r7, #4]
 1004abe:	fa01 f303 	lsl.w	r3, r1, r3
 1004ac2:	429a      	cmp	r2, r3
 1004ac4:	d11e      	bne.n	1004b04 <pmc_disable_periph_clk+0x70>
			PMC->PMC_PCDR0 = 1 << ul_id;
 1004ac6:	4a12      	ldr	r2, [pc, #72]	; (1004b10 <pmc_disable_periph_clk+0x7c>)
 1004ac8:	2101      	movs	r1, #1
 1004aca:	687b      	ldr	r3, [r7, #4]
 1004acc:	fa01 f303 	lsl.w	r3, r1, r3
 1004ad0:	6153      	str	r3, [r2, #20]
 1004ad2:	e017      	b.n	1004b04 <pmc_disable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 \
		|| SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
 1004ad4:	687b      	ldr	r3, [r7, #4]
 1004ad6:	3b20      	subs	r3, #32
 1004ad8:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
 1004ada:	4b0d      	ldr	r3, [pc, #52]	; (1004b10 <pmc_disable_periph_clk+0x7c>)
 1004adc:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 1004ae0:	2101      	movs	r1, #1
 1004ae2:	687b      	ldr	r3, [r7, #4]
 1004ae4:	fa01 f303 	lsl.w	r3, r1, r3
 1004ae8:	401a      	ands	r2, r3
 1004aea:	2101      	movs	r1, #1
 1004aec:	687b      	ldr	r3, [r7, #4]
 1004aee:	fa01 f303 	lsl.w	r3, r1, r3
 1004af2:	429a      	cmp	r2, r3
 1004af4:	d106      	bne.n	1004b04 <pmc_disable_periph_clk+0x70>
			PMC->PMC_PCDR1 = 1 << ul_id;
 1004af6:	4a06      	ldr	r2, [pc, #24]	; (1004b10 <pmc_disable_periph_clk+0x7c>)
 1004af8:	2101      	movs	r1, #1
 1004afa:	687b      	ldr	r3, [r7, #4]
 1004afc:	fa01 f303 	lsl.w	r3, r1, r3
 1004b00:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
		}
#endif
	}
	return 0;
 1004b04:	2300      	movs	r3, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
 1004b06:	4618      	mov	r0, r3
 1004b08:	370c      	adds	r7, #12
 1004b0a:	46bd      	mov	sp, r7
 1004b0c:	bc80      	pop	{r7}
 1004b0e:	4770      	bx	lr
 1004b10:	400e0400 	.word	0x400e0400

01004b14 <pmc_switch_pck_to_mck>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_pck_to_mck(uint32_t ul_id, uint32_t ul_pres)
{
 1004b14:	b480      	push	{r7}
 1004b16:	b085      	sub	sp, #20
 1004b18:	af00      	add	r7, sp, #0
 1004b1a:	6078      	str	r0, [r7, #4]
 1004b1c:	6039      	str	r1, [r7, #0]
	uint32_t ul_timeout;

	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_MCK | ul_pres;
 1004b1e:	4912      	ldr	r1, [pc, #72]	; (1004b68 <pmc_switch_pck_to_mck+0x54>)
 1004b20:	683b      	ldr	r3, [r7, #0]
 1004b22:	f043 0204 	orr.w	r2, r3, #4
 1004b26:	687b      	ldr	r3, [r7, #4]
 1004b28:	3310      	adds	r3, #16
 1004b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (ul_timeout = PMC_TIMEOUT;
 1004b2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 1004b32:	60fb      	str	r3, [r7, #12]
 1004b34:	e007      	b.n	1004b46 <pmc_switch_pck_to_mck+0x32>
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
		if (ul_timeout == 0) {
 1004b36:	68fb      	ldr	r3, [r7, #12]
 1004b38:	2b00      	cmp	r3, #0
 1004b3a:	d101      	bne.n	1004b40 <pmc_switch_pck_to_mck+0x2c>
			return 1;
 1004b3c:	2301      	movs	r3, #1
 1004b3e:	e00d      	b.n	1004b5c <pmc_switch_pck_to_mck+0x48>
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 1004b40:	68fb      	ldr	r3, [r7, #12]
 1004b42:	3b01      	subs	r3, #1
 1004b44:	60fb      	str	r3, [r7, #12]
 1004b46:	4b08      	ldr	r3, [pc, #32]	; (1004b68 <pmc_switch_pck_to_mck+0x54>)
 1004b48:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 1004b4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 1004b4e:	687b      	ldr	r3, [r7, #4]
 1004b50:	fa01 f303 	lsl.w	r3, r1, r3
 1004b54:	4013      	ands	r3, r2
	for (ul_timeout = PMC_TIMEOUT;
 1004b56:	2b00      	cmp	r3, #0
 1004b58:	d0ed      	beq.n	1004b36 <pmc_switch_pck_to_mck+0x22>
		}
	}

	return 0;
 1004b5a:	2300      	movs	r3, #0
}
 1004b5c:	4618      	mov	r0, r3
 1004b5e:	3714      	adds	r7, #20
 1004b60:	46bd      	mov	sp, r7
 1004b62:	bc80      	pop	{r7}
 1004b64:	4770      	bx	lr
 1004b66:	bf00      	nop
 1004b68:	400e0400 	.word	0x400e0400

01004b6c <pmc_enable_pck>:
 * \brief Enable the specified programmable clock.
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
 1004b6c:	b480      	push	{r7}
 1004b6e:	b083      	sub	sp, #12
 1004b70:	af00      	add	r7, sp, #0
 1004b72:	6078      	str	r0, [r7, #4]
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
 1004b74:	4a05      	ldr	r2, [pc, #20]	; (1004b8c <pmc_enable_pck+0x20>)
 1004b76:	f44f 7180 	mov.w	r1, #256	; 0x100
 1004b7a:	687b      	ldr	r3, [r7, #4]
 1004b7c:	fa01 f303 	lsl.w	r3, r1, r3
 1004b80:	6013      	str	r3, [r2, #0]
}
 1004b82:	bf00      	nop
 1004b84:	370c      	adds	r7, #12
 1004b86:	46bd      	mov	sp, r7
 1004b88:	bc80      	pop	{r7}
 1004b8a:	4770      	bx	lr
 1004b8c:	400e0400 	.word	0x400e0400

01004b90 <pmc_disable_pck>:
 * \brief Disable the specified programmable clock.
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_disable_pck(uint32_t ul_id)
{
 1004b90:	b480      	push	{r7}
 1004b92:	b083      	sub	sp, #12
 1004b94:	af00      	add	r7, sp, #0
 1004b96:	6078      	str	r0, [r7, #4]
	PMC->PMC_SCDR = PMC_SCER_PCK0 << ul_id;
 1004b98:	4a05      	ldr	r2, [pc, #20]	; (1004bb0 <pmc_disable_pck+0x20>)
 1004b9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 1004b9e:	687b      	ldr	r3, [r7, #4]
 1004ba0:	fa01 f303 	lsl.w	r3, r1, r3
 1004ba4:	6053      	str	r3, [r2, #4]
}
 1004ba6:	bf00      	nop
 1004ba8:	370c      	adds	r7, #12
 1004baa:	46bd      	mov	sp, r7
 1004bac:	bc80      	pop	{r7}
 1004bae:	4770      	bx	lr
 1004bb0:	400e0400 	.word	0x400e0400

01004bb4 <pmc_is_wakeup_clocks_restored>:
#endif
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
 1004bb4:	b480      	push	{r7}
 1004bb6:	af00      	add	r7, sp, #0
	return !b_is_sleep_clock_used;
 1004bb8:	4b08      	ldr	r3, [pc, #32]	; (1004bdc <pmc_is_wakeup_clocks_restored+0x28>)
 1004bba:	781b      	ldrb	r3, [r3, #0]
 1004bbc:	b2db      	uxtb	r3, r3
 1004bbe:	2b00      	cmp	r3, #0
 1004bc0:	bf14      	ite	ne
 1004bc2:	2301      	movne	r3, #1
 1004bc4:	2300      	moveq	r3, #0
 1004bc6:	b2db      	uxtb	r3, r3
 1004bc8:	f083 0301 	eor.w	r3, r3, #1
 1004bcc:	b2db      	uxtb	r3, r3
 1004bce:	f003 0301 	and.w	r3, r3, #1
 1004bd2:	b2db      	uxtb	r3, r3
}
 1004bd4:	4618      	mov	r0, r3
 1004bd6:	46bd      	mov	sp, r7
 1004bd8:	bc80      	pop	{r7}
 1004bda:	4770      	bx	lr
 1004bdc:	20001ec8 	.word	0x20001ec8

01004be0 <sysclk_enable_peripheral_clock>:
{
 1004be0:	b580      	push	{r7, lr}
 1004be2:	b082      	sub	sp, #8
 1004be4:	af00      	add	r7, sp, #0
 1004be6:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
 1004be8:	6878      	ldr	r0, [r7, #4]
 1004bea:	4b03      	ldr	r3, [pc, #12]	; (1004bf8 <sysclk_enable_peripheral_clock+0x18>)
 1004bec:	4798      	blx	r3
}
 1004bee:	bf00      	nop
 1004bf0:	3708      	adds	r7, #8
 1004bf2:	46bd      	mov	sp, r7
 1004bf4:	bd80      	pop	{r7, pc}
 1004bf6:	bf00      	nop
 1004bf8:	01004a15 	.word	0x01004a15

01004bfc <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
 1004bfc:	b580      	push	{r7, lr}
 1004bfe:	b082      	sub	sp, #8
 1004c00:	af00      	add	r7, sp, #0
 1004c02:	6078      	str	r0, [r7, #4]
	else if (p_spi == SPI1) {
		sysclk_enable_peripheral_clock(ID_SPI1);
	}
	#endif
#elif (SAMG55)
	if (p_spi == SPI0) {
 1004c04:	687b      	ldr	r3, [r7, #4]
 1004c06:	4a21      	ldr	r2, [pc, #132]	; (1004c8c <spi_enable_clock+0x90>)
 1004c08:	4293      	cmp	r3, r2
 1004c0a:	d103      	bne.n	1004c14 <spi_enable_clock+0x18>
		sysclk_enable_peripheral_clock(ID_FLEXCOM0);
 1004c0c:	2008      	movs	r0, #8
 1004c0e:	4b20      	ldr	r3, [pc, #128]	; (1004c90 <spi_enable_clock+0x94>)
 1004c10:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
 1004c12:	e036      	b.n	1004c82 <spi_enable_clock+0x86>
	else if (p_spi == SPI1) {
 1004c14:	687b      	ldr	r3, [r7, #4]
 1004c16:	4a1f      	ldr	r2, [pc, #124]	; (1004c94 <spi_enable_clock+0x98>)
 1004c18:	4293      	cmp	r3, r2
 1004c1a:	d103      	bne.n	1004c24 <spi_enable_clock+0x28>
		sysclk_enable_peripheral_clock(ID_FLEXCOM1);
 1004c1c:	2009      	movs	r0, #9
 1004c1e:	4b1c      	ldr	r3, [pc, #112]	; (1004c90 <spi_enable_clock+0x94>)
 1004c20:	4798      	blx	r3
}
 1004c22:	e02e      	b.n	1004c82 <spi_enable_clock+0x86>
	else if (p_spi == SPI2) {
 1004c24:	687b      	ldr	r3, [r7, #4]
 1004c26:	4a1c      	ldr	r2, [pc, #112]	; (1004c98 <spi_enable_clock+0x9c>)
 1004c28:	4293      	cmp	r3, r2
 1004c2a:	d103      	bne.n	1004c34 <spi_enable_clock+0x38>
		sysclk_enable_peripheral_clock(ID_FLEXCOM2);
 1004c2c:	200e      	movs	r0, #14
 1004c2e:	4b18      	ldr	r3, [pc, #96]	; (1004c90 <spi_enable_clock+0x94>)
 1004c30:	4798      	blx	r3
}
 1004c32:	e026      	b.n	1004c82 <spi_enable_clock+0x86>
	else if (p_spi == SPI3) {
 1004c34:	687b      	ldr	r3, [r7, #4]
 1004c36:	4a19      	ldr	r2, [pc, #100]	; (1004c9c <spi_enable_clock+0xa0>)
 1004c38:	4293      	cmp	r3, r2
 1004c3a:	d103      	bne.n	1004c44 <spi_enable_clock+0x48>
		sysclk_enable_peripheral_clock(ID_FLEXCOM3);
 1004c3c:	2013      	movs	r0, #19
 1004c3e:	4b14      	ldr	r3, [pc, #80]	; (1004c90 <spi_enable_clock+0x94>)
 1004c40:	4798      	blx	r3
}
 1004c42:	e01e      	b.n	1004c82 <spi_enable_clock+0x86>
	else if (p_spi == SPI4) {
 1004c44:	687b      	ldr	r3, [r7, #4]
 1004c46:	4a16      	ldr	r2, [pc, #88]	; (1004ca0 <spi_enable_clock+0xa4>)
 1004c48:	4293      	cmp	r3, r2
 1004c4a:	d103      	bne.n	1004c54 <spi_enable_clock+0x58>
		sysclk_enable_peripheral_clock(ID_FLEXCOM4);
 1004c4c:	2014      	movs	r0, #20
 1004c4e:	4b10      	ldr	r3, [pc, #64]	; (1004c90 <spi_enable_clock+0x94>)
 1004c50:	4798      	blx	r3
}
 1004c52:	e016      	b.n	1004c82 <spi_enable_clock+0x86>
	else if (p_spi == SPI5) {
 1004c54:	687b      	ldr	r3, [r7, #4]
 1004c56:	4a13      	ldr	r2, [pc, #76]	; (1004ca4 <spi_enable_clock+0xa8>)
 1004c58:	4293      	cmp	r3, r2
 1004c5a:	d103      	bne.n	1004c64 <spi_enable_clock+0x68>
		sysclk_enable_peripheral_clock(ID_FLEXCOM5);
 1004c5c:	2015      	movs	r0, #21
 1004c5e:	4b0c      	ldr	r3, [pc, #48]	; (1004c90 <spi_enable_clock+0x94>)
 1004c60:	4798      	blx	r3
}
 1004c62:	e00e      	b.n	1004c82 <spi_enable_clock+0x86>
	else if (p_spi == SPI6) {
 1004c64:	687b      	ldr	r3, [r7, #4]
 1004c66:	4a10      	ldr	r2, [pc, #64]	; (1004ca8 <spi_enable_clock+0xac>)
 1004c68:	4293      	cmp	r3, r2
 1004c6a:	d103      	bne.n	1004c74 <spi_enable_clock+0x78>
		sysclk_enable_peripheral_clock(ID_FLEXCOM6);
 1004c6c:	2016      	movs	r0, #22
 1004c6e:	4b08      	ldr	r3, [pc, #32]	; (1004c90 <spi_enable_clock+0x94>)
 1004c70:	4798      	blx	r3
}
 1004c72:	e006      	b.n	1004c82 <spi_enable_clock+0x86>
	else if (p_spi == SPI7) {
 1004c74:	687b      	ldr	r3, [r7, #4]
 1004c76:	4a0d      	ldr	r2, [pc, #52]	; (1004cac <spi_enable_clock+0xb0>)
 1004c78:	4293      	cmp	r3, r2
 1004c7a:	d102      	bne.n	1004c82 <spi_enable_clock+0x86>
		sysclk_enable_peripheral_clock(ID_FLEXCOM7);
 1004c7c:	2007      	movs	r0, #7
 1004c7e:	4b04      	ldr	r3, [pc, #16]	; (1004c90 <spi_enable_clock+0x94>)
 1004c80:	4798      	blx	r3
}
 1004c82:	bf00      	nop
 1004c84:	3708      	adds	r7, #8
 1004c86:	46bd      	mov	sp, r7
 1004c88:	bd80      	pop	{r7, pc}
 1004c8a:	bf00      	nop
 1004c8c:	4000c400 	.word	0x4000c400
 1004c90:	01004be1 	.word	0x01004be1
 1004c94:	40020400 	.word	0x40020400
 1004c98:	40024400 	.word	0x40024400
 1004c9c:	40018400 	.word	0x40018400
 1004ca0:	4001c400 	.word	0x4001c400
 1004ca4:	40008400 	.word	0x40008400
 1004ca8:	40040400 	.word	0x40040400
 1004cac:	40034400 	.word	0x40034400

01004cb0 <spi_set_peripheral_chip_select_value>:
 *                 The decode mode can be enabled/disabled by follow functions:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
 1004cb0:	b480      	push	{r7}
 1004cb2:	b083      	sub	sp, #12
 1004cb4:	af00      	add	r7, sp, #0
 1004cb6:	6078      	str	r0, [r7, #4]
 1004cb8:	6039      	str	r1, [r7, #0]
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
 1004cba:	687b      	ldr	r3, [r7, #4]
 1004cbc:	685b      	ldr	r3, [r3, #4]
 1004cbe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 1004cc2:	687b      	ldr	r3, [r7, #4]
 1004cc4:	605a      	str	r2, [r3, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
 1004cc6:	687b      	ldr	r3, [r7, #4]
 1004cc8:	685a      	ldr	r2, [r3, #4]
 1004cca:	683b      	ldr	r3, [r7, #0]
 1004ccc:	041b      	lsls	r3, r3, #16
 1004cce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 1004cd2:	431a      	orrs	r2, r3
 1004cd4:	687b      	ldr	r3, [r7, #4]
 1004cd6:	605a      	str	r2, [r3, #4]
}
 1004cd8:	bf00      	nop
 1004cda:	370c      	adds	r7, #12
 1004cdc:	46bd      	mov	sp, r7
 1004cde:	bc80      	pop	{r7}
 1004ce0:	4770      	bx	lr

01004ce2 <spi_set_clock_polarity>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
 1004ce2:	b480      	push	{r7}
 1004ce4:	b085      	sub	sp, #20
 1004ce6:	af00      	add	r7, sp, #0
 1004ce8:	60f8      	str	r0, [r7, #12]
 1004cea:	60b9      	str	r1, [r7, #8]
 1004cec:	607a      	str	r2, [r7, #4]
	if (ul_polarity) {
 1004cee:	687b      	ldr	r3, [r7, #4]
 1004cf0:	2b00      	cmp	r3, #0
 1004cf2:	d00c      	beq.n	1004d0e <spi_set_clock_polarity+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
 1004cf4:	68fb      	ldr	r3, [r7, #12]
 1004cf6:	68ba      	ldr	r2, [r7, #8]
 1004cf8:	320c      	adds	r2, #12
 1004cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 1004cfe:	f043 0101 	orr.w	r1, r3, #1
 1004d02:	68fb      	ldr	r3, [r7, #12]
 1004d04:	68ba      	ldr	r2, [r7, #8]
 1004d06:	320c      	adds	r2, #12
 1004d08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
	}
}
 1004d0c:	e00b      	b.n	1004d26 <spi_set_clock_polarity+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
 1004d0e:	68fb      	ldr	r3, [r7, #12]
 1004d10:	68ba      	ldr	r2, [r7, #8]
 1004d12:	320c      	adds	r2, #12
 1004d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 1004d18:	f023 0101 	bic.w	r1, r3, #1
 1004d1c:	68fb      	ldr	r3, [r7, #12]
 1004d1e:	68ba      	ldr	r2, [r7, #8]
 1004d20:	320c      	adds	r2, #12
 1004d22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 1004d26:	bf00      	nop
 1004d28:	3714      	adds	r7, #20
 1004d2a:	46bd      	mov	sp, r7
 1004d2c:	bc80      	pop	{r7}
 1004d2e:	4770      	bx	lr

01004d30 <spi_set_clock_phase>:
 * \param p_spi Pointer to an SPI instance.
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
 1004d30:	b480      	push	{r7}
 1004d32:	b085      	sub	sp, #20
 1004d34:	af00      	add	r7, sp, #0
 1004d36:	60f8      	str	r0, [r7, #12]
 1004d38:	60b9      	str	r1, [r7, #8]
 1004d3a:	607a      	str	r2, [r7, #4]
	if (ul_phase) {
 1004d3c:	687b      	ldr	r3, [r7, #4]
 1004d3e:	2b00      	cmp	r3, #0
 1004d40:	d00c      	beq.n	1004d5c <spi_set_clock_phase+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
 1004d42:	68fb      	ldr	r3, [r7, #12]
 1004d44:	68ba      	ldr	r2, [r7, #8]
 1004d46:	320c      	adds	r2, #12
 1004d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 1004d4c:	f043 0102 	orr.w	r1, r3, #2
 1004d50:	68fb      	ldr	r3, [r7, #12]
 1004d52:	68ba      	ldr	r2, [r7, #8]
 1004d54:	320c      	adds	r2, #12
 1004d56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
	}
}
 1004d5a:	e00b      	b.n	1004d74 <spi_set_clock_phase+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
 1004d5c:	68fb      	ldr	r3, [r7, #12]
 1004d5e:	68ba      	ldr	r2, [r7, #8]
 1004d60:	320c      	adds	r2, #12
 1004d62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 1004d66:	f023 0102 	bic.w	r1, r3, #2
 1004d6a:	68fb      	ldr	r3, [r7, #12]
 1004d6c:	68ba      	ldr	r2, [r7, #8]
 1004d6e:	320c      	adds	r2, #12
 1004d70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 1004d74:	bf00      	nop
 1004d76:	3714      	adds	r7, #20
 1004d78:	46bd      	mov	sp, r7
 1004d7a:	bc80      	pop	{r7}
 1004d7c:	4770      	bx	lr

01004d7e <spi_configure_cs_behavior>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
 1004d7e:	b480      	push	{r7}
 1004d80:	b085      	sub	sp, #20
 1004d82:	af00      	add	r7, sp, #0
 1004d84:	60f8      	str	r0, [r7, #12]
 1004d86:	60b9      	str	r1, [r7, #8]
 1004d88:	607a      	str	r2, [r7, #4]
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
 1004d8a:	687b      	ldr	r3, [r7, #4]
 1004d8c:	2b04      	cmp	r3, #4
 1004d8e:	d118      	bne.n	1004dc2 <spi_configure_cs_behavior+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
 1004d90:	68fb      	ldr	r3, [r7, #12]
 1004d92:	68ba      	ldr	r2, [r7, #8]
 1004d94:	320c      	adds	r2, #12
 1004d96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 1004d9a:	f023 0108 	bic.w	r1, r3, #8
 1004d9e:	68fb      	ldr	r3, [r7, #12]
 1004da0:	68ba      	ldr	r2, [r7, #8]
 1004da2:	320c      	adds	r2, #12
 1004da4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
 1004da8:	68fb      	ldr	r3, [r7, #12]
 1004daa:	68ba      	ldr	r2, [r7, #8]
 1004dac:	320c      	adds	r2, #12
 1004dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 1004db2:	f043 0104 	orr.w	r1, r3, #4
 1004db6:	68fb      	ldr	r3, [r7, #12]
 1004db8:	68ba      	ldr	r2, [r7, #8]
 1004dba:	320c      	adds	r2, #12
 1004dbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
	}
}
 1004dc0:	e02a      	b.n	1004e18 <spi_configure_cs_behavior+0x9a>
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
 1004dc2:	687b      	ldr	r3, [r7, #4]
 1004dc4:	2b00      	cmp	r3, #0
 1004dc6:	d118      	bne.n	1004dfa <spi_configure_cs_behavior+0x7c>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
 1004dc8:	68fb      	ldr	r3, [r7, #12]
 1004dca:	68ba      	ldr	r2, [r7, #8]
 1004dcc:	320c      	adds	r2, #12
 1004dce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 1004dd2:	f023 0108 	bic.w	r1, r3, #8
 1004dd6:	68fb      	ldr	r3, [r7, #12]
 1004dd8:	68ba      	ldr	r2, [r7, #8]
 1004dda:	320c      	adds	r2, #12
 1004ddc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
 1004de0:	68fb      	ldr	r3, [r7, #12]
 1004de2:	68ba      	ldr	r2, [r7, #8]
 1004de4:	320c      	adds	r2, #12
 1004de6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 1004dea:	f023 0104 	bic.w	r1, r3, #4
 1004dee:	68fb      	ldr	r3, [r7, #12]
 1004df0:	68ba      	ldr	r2, [r7, #8]
 1004df2:	320c      	adds	r2, #12
 1004df4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 1004df8:	e00e      	b.n	1004e18 <spi_configure_cs_behavior+0x9a>
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
 1004dfa:	687b      	ldr	r3, [r7, #4]
 1004dfc:	2b08      	cmp	r3, #8
 1004dfe:	d10b      	bne.n	1004e18 <spi_configure_cs_behavior+0x9a>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
 1004e00:	68fb      	ldr	r3, [r7, #12]
 1004e02:	68ba      	ldr	r2, [r7, #8]
 1004e04:	320c      	adds	r2, #12
 1004e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 1004e0a:	f043 0108 	orr.w	r1, r3, #8
 1004e0e:	68fb      	ldr	r3, [r7, #12]
 1004e10:	68ba      	ldr	r2, [r7, #8]
 1004e12:	320c      	adds	r2, #12
 1004e14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 1004e18:	bf00      	nop
 1004e1a:	3714      	adds	r7, #20
 1004e1c:	46bd      	mov	sp, r7
 1004e1e:	bc80      	pop	{r7}
 1004e20:	4770      	bx	lr

01004e22 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
 1004e22:	b480      	push	{r7}
 1004e24:	b085      	sub	sp, #20
 1004e26:	af00      	add	r7, sp, #0
 1004e28:	60f8      	str	r0, [r7, #12]
 1004e2a:	60b9      	str	r1, [r7, #8]
 1004e2c:	607a      	str	r2, [r7, #4]
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
 1004e2e:	68fb      	ldr	r3, [r7, #12]
 1004e30:	68ba      	ldr	r2, [r7, #8]
 1004e32:	320c      	adds	r2, #12
 1004e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 1004e38:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
 1004e3c:	68fb      	ldr	r3, [r7, #12]
 1004e3e:	68ba      	ldr	r2, [r7, #8]
 1004e40:	320c      	adds	r2, #12
 1004e42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
 1004e46:	68fb      	ldr	r3, [r7, #12]
 1004e48:	68ba      	ldr	r2, [r7, #8]
 1004e4a:	320c      	adds	r2, #12
 1004e4c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 1004e50:	687b      	ldr	r3, [r7, #4]
 1004e52:	ea42 0103 	orr.w	r1, r2, r3
 1004e56:	68fb      	ldr	r3, [r7, #12]
 1004e58:	68ba      	ldr	r2, [r7, #8]
 1004e5a:	320c      	adds	r2, #12
 1004e5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 1004e60:	bf00      	nop
 1004e62:	3714      	adds	r7, #20
 1004e64:	46bd      	mov	sp, r7
 1004e66:	bc80      	pop	{r7}
 1004e68:	4770      	bx	lr

01004e6a <spi_set_baudrate_div>:
 * \retval is 0 Success.
 * \retval is -1 Error.
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
 1004e6a:	b480      	push	{r7}
 1004e6c:	b085      	sub	sp, #20
 1004e6e:	af00      	add	r7, sp, #0
 1004e70:	60f8      	str	r0, [r7, #12]
 1004e72:	60b9      	str	r1, [r7, #8]
 1004e74:	4613      	mov	r3, r2
 1004e76:	71fb      	strb	r3, [r7, #7]
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider){
 1004e78:	79fb      	ldrb	r3, [r7, #7]
 1004e7a:	2b00      	cmp	r3, #0
 1004e7c:	d102      	bne.n	1004e84 <spi_set_baudrate_div+0x1a>
        return -1;
 1004e7e:	f04f 33ff 	mov.w	r3, #4294967295
 1004e82:	e01b      	b.n	1004ebc <spi_set_baudrate_div+0x52>
	}
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
 1004e84:	68fb      	ldr	r3, [r7, #12]
 1004e86:	68ba      	ldr	r2, [r7, #8]
 1004e88:	320c      	adds	r2, #12
 1004e8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 1004e8e:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
 1004e92:	68fb      	ldr	r3, [r7, #12]
 1004e94:	68ba      	ldr	r2, [r7, #8]
 1004e96:	320c      	adds	r2, #12
 1004e98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
 1004e9c:	68fb      	ldr	r3, [r7, #12]
 1004e9e:	68ba      	ldr	r2, [r7, #8]
 1004ea0:	320c      	adds	r2, #12
 1004ea2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 1004ea6:	79fb      	ldrb	r3, [r7, #7]
 1004ea8:	021b      	lsls	r3, r3, #8
 1004eaa:	b29b      	uxth	r3, r3
 1004eac:	ea42 0103 	orr.w	r1, r2, r3
 1004eb0:	68fb      	ldr	r3, [r7, #12]
 1004eb2:	68ba      	ldr	r2, [r7, #8]
 1004eb4:	320c      	adds	r2, #12
 1004eb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return 0;
 1004eba:	2300      	movs	r3, #0
}
 1004ebc:	4618      	mov	r0, r3
 1004ebe:	3714      	adds	r7, #20
 1004ec0:	46bd      	mov	sp, r7
 1004ec2:	bc80      	pop	{r7}
 1004ec4:	4770      	bx	lr

01004ec6 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
 1004ec6:	b480      	push	{r7}
 1004ec8:	b085      	sub	sp, #20
 1004eca:	af00      	add	r7, sp, #0
 1004ecc:	60f8      	str	r0, [r7, #12]
 1004ece:	60b9      	str	r1, [r7, #8]
 1004ed0:	4611      	mov	r1, r2
 1004ed2:	461a      	mov	r2, r3
 1004ed4:	460b      	mov	r3, r1
 1004ed6:	71fb      	strb	r3, [r7, #7]
 1004ed8:	4613      	mov	r3, r2
 1004eda:	71bb      	strb	r3, [r7, #6]
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
 1004edc:	68fb      	ldr	r3, [r7, #12]
 1004ede:	68ba      	ldr	r2, [r7, #8]
 1004ee0:	320c      	adds	r2, #12
 1004ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 1004ee6:	b299      	uxth	r1, r3
 1004ee8:	68fb      	ldr	r3, [r7, #12]
 1004eea:	68ba      	ldr	r2, [r7, #8]
 1004eec:	320c      	adds	r2, #12
 1004eee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
 1004ef2:	68fb      	ldr	r3, [r7, #12]
 1004ef4:	68ba      	ldr	r2, [r7, #8]
 1004ef6:	320c      	adds	r2, #12
 1004ef8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 1004efc:	79fb      	ldrb	r3, [r7, #7]
 1004efe:	041b      	lsls	r3, r3, #16
 1004f00:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
			| SPI_CSR_DLYBCT(uc_dlybct);
 1004f04:	79b9      	ldrb	r1, [r7, #6]
 1004f06:	0609      	lsls	r1, r1, #24
 1004f08:	430b      	orrs	r3, r1
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
 1004f0a:	ea42 0103 	orr.w	r1, r2, r3
 1004f0e:	68fb      	ldr	r3, [r7, #12]
 1004f10:	68ba      	ldr	r2, [r7, #8]
 1004f12:	320c      	adds	r2, #12
 1004f14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 1004f18:	bf00      	nop
 1004f1a:	3714      	adds	r7, #20
 1004f1c:	46bd      	mov	sp, r7
 1004f1e:	bc80      	pop	{r7}
 1004f20:	4770      	bx	lr

01004f22 <supc_set_regulator_trim_user>:
 * \param value the trim value.
 *
 * \note For the trim value in 96M PLL, please read the value in flash unique identifier area.
 */
void supc_set_regulator_trim_user(Supc *p_supc, uint32_t value)
{
 1004f22:	b480      	push	{r7}
 1004f24:	b085      	sub	sp, #20
 1004f26:	af00      	add	r7, sp, #0
 1004f28:	6078      	str	r0, [r7, #4]
 1004f2a:	6039      	str	r1, [r7, #0]
#if SAMG54
	uint32_t ul_mr = p_supc->SUPC_MR & (~SUPC_MR_VRVDD_Msk);
	p_supc->SUPC_MR = SUPC_MR_KEY_PASSWD | ul_mr | SUPC_MR_VDDSEL_USER_VRVDD
		 | SUPC_MR_VRVDD(value);
#else
	uint32_t ul_pwmr = p_supc->SUPC_PWMR & (~(0xFu << 9));
 1004f2c:	687b      	ldr	r3, [r7, #4]
 1004f2e:	69db      	ldr	r3, [r3, #28]
 1004f30:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 1004f34:	60fb      	str	r3, [r7, #12]
	p_supc->SUPC_PWMR = SUPC_PWMR_KEY_PASSWD | ul_pwmr | SUPC_PWMR_ECPWRS
		| ((value & 0xFu) << 9);
 1004f36:	683b      	ldr	r3, [r7, #0]
 1004f38:	025b      	lsls	r3, r3, #9
 1004f3a:	f403 52f0 	and.w	r2, r3, #7680	; 0x1e00
 1004f3e:	68fb      	ldr	r3, [r7, #12]
 1004f40:	4313      	orrs	r3, r2
 1004f42:	f043 43b4 	orr.w	r3, r3, #1509949440	; 0x5a000000
 1004f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	p_supc->SUPC_PWMR = SUPC_PWMR_KEY_PASSWD | ul_pwmr | SUPC_PWMR_ECPWRS
 1004f4a:	687a      	ldr	r2, [r7, #4]
 1004f4c:	61d3      	str	r3, [r2, #28]
#endif
}
 1004f4e:	bf00      	nop
 1004f50:	3714      	adds	r7, #20
 1004f52:	46bd      	mov	sp, r7
 1004f54:	bc80      	pop	{r7}
 1004f56:	4770      	bx	lr

01004f58 <cpu_irq_save>:
{
 1004f58:	b480      	push	{r7}
 1004f5a:	b083      	sub	sp, #12
 1004f5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 1004f5e:	f3ef 8310 	mrs	r3, PRIMASK
 1004f62:	607b      	str	r3, [r7, #4]
  return(result);
 1004f64:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
 1004f66:	2b00      	cmp	r3, #0
 1004f68:	bf0c      	ite	eq
 1004f6a:	2301      	moveq	r3, #1
 1004f6c:	2300      	movne	r3, #0
 1004f6e:	b2db      	uxtb	r3, r3
 1004f70:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 1004f72:	b672      	cpsid	i
 1004f74:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
 1004f78:	4b04      	ldr	r3, [pc, #16]	; (1004f8c <cpu_irq_save+0x34>)
 1004f7a:	2200      	movs	r2, #0
 1004f7c:	701a      	strb	r2, [r3, #0]
	return flags;
 1004f7e:	683b      	ldr	r3, [r7, #0]
}
 1004f80:	4618      	mov	r0, r3
 1004f82:	370c      	adds	r7, #12
 1004f84:	46bd      	mov	sp, r7
 1004f86:	bc80      	pop	{r7}
 1004f88:	4770      	bx	lr
 1004f8a:	bf00      	nop
 1004f8c:	200001d4 	.word	0x200001d4

01004f90 <cpu_irq_is_enabled_flags>:
{
 1004f90:	b480      	push	{r7}
 1004f92:	b083      	sub	sp, #12
 1004f94:	af00      	add	r7, sp, #0
 1004f96:	6078      	str	r0, [r7, #4]
	return (flags);
 1004f98:	687b      	ldr	r3, [r7, #4]
 1004f9a:	2b00      	cmp	r3, #0
 1004f9c:	bf14      	ite	ne
 1004f9e:	2301      	movne	r3, #1
 1004fa0:	2300      	moveq	r3, #0
 1004fa2:	b2db      	uxtb	r3, r3
}
 1004fa4:	4618      	mov	r0, r3
 1004fa6:	370c      	adds	r7, #12
 1004fa8:	46bd      	mov	sp, r7
 1004faa:	bc80      	pop	{r7}
 1004fac:	4770      	bx	lr
	...

01004fb0 <cpu_irq_restore>:
{
 1004fb0:	b580      	push	{r7, lr}
 1004fb2:	b082      	sub	sp, #8
 1004fb4:	af00      	add	r7, sp, #0
 1004fb6:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
 1004fb8:	6878      	ldr	r0, [r7, #4]
 1004fba:	4b07      	ldr	r3, [pc, #28]	; (1004fd8 <cpu_irq_restore+0x28>)
 1004fbc:	4798      	blx	r3
 1004fbe:	4603      	mov	r3, r0
 1004fc0:	2b00      	cmp	r3, #0
 1004fc2:	d005      	beq.n	1004fd0 <cpu_irq_restore+0x20>
		cpu_irq_enable();
 1004fc4:	4b05      	ldr	r3, [pc, #20]	; (1004fdc <cpu_irq_restore+0x2c>)
 1004fc6:	2201      	movs	r2, #1
 1004fc8:	701a      	strb	r2, [r3, #0]
 1004fca:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
 1004fce:	b662      	cpsie	i
}
 1004fd0:	bf00      	nop
 1004fd2:	3708      	adds	r7, #8
 1004fd4:	46bd      	mov	sp, r7
 1004fd6:	bd80      	pop	{r7, pc}
 1004fd8:	01004f91 	.word	0x01004f91
 1004fdc:	200001d4 	.word	0x200001d4

01004fe0 <sleepmgr_lock_mode>:
{
 1004fe0:	b580      	push	{r7, lr}
 1004fe2:	b084      	sub	sp, #16
 1004fe4:	af00      	add	r7, sp, #0
 1004fe6:	4603      	mov	r3, r0
 1004fe8:	71fb      	strb	r3, [r7, #7]
	if(sleepmgr_locks[mode] >= 0xff) {
 1004fea:	79fb      	ldrb	r3, [r7, #7]
 1004fec:	4a0a      	ldr	r2, [pc, #40]	; (1005018 <sleepmgr_lock_mode+0x38>)
 1004fee:	5cd3      	ldrb	r3, [r2, r3]
 1004ff0:	2bff      	cmp	r3, #255	; 0xff
 1004ff2:	d100      	bne.n	1004ff6 <sleepmgr_lock_mode+0x16>
		while (true) {
 1004ff4:	e7fe      	b.n	1004ff4 <sleepmgr_lock_mode+0x14>
	flags = cpu_irq_save();
 1004ff6:	4b09      	ldr	r3, [pc, #36]	; (100501c <sleepmgr_lock_mode+0x3c>)
 1004ff8:	4798      	blx	r3
 1004ffa:	60f8      	str	r0, [r7, #12]
	++sleepmgr_locks[mode];
 1004ffc:	79fb      	ldrb	r3, [r7, #7]
 1004ffe:	4a06      	ldr	r2, [pc, #24]	; (1005018 <sleepmgr_lock_mode+0x38>)
 1005000:	5cd2      	ldrb	r2, [r2, r3]
 1005002:	3201      	adds	r2, #1
 1005004:	b2d1      	uxtb	r1, r2
 1005006:	4a04      	ldr	r2, [pc, #16]	; (1005018 <sleepmgr_lock_mode+0x38>)
 1005008:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
 100500a:	68f8      	ldr	r0, [r7, #12]
 100500c:	4b04      	ldr	r3, [pc, #16]	; (1005020 <sleepmgr_lock_mode+0x40>)
 100500e:	4798      	blx	r3
}
 1005010:	bf00      	nop
 1005012:	3710      	adds	r7, #16
 1005014:	46bd      	mov	sp, r7
 1005016:	bd80      	pop	{r7, pc}
 1005018:	200082f0 	.word	0x200082f0
 100501c:	01004f59 	.word	0x01004f59
 1005020:	01004fb1 	.word	0x01004fb1

01005024 <sleepmgr_unlock_mode>:
 * manager can put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to unlock.
 */
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
 1005024:	b580      	push	{r7, lr}
 1005026:	b084      	sub	sp, #16
 1005028:	af00      	add	r7, sp, #0
 100502a:	4603      	mov	r3, r0
 100502c:	71fb      	strb	r3, [r7, #7]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
 100502e:	79fb      	ldrb	r3, [r7, #7]
 1005030:	4a0a      	ldr	r2, [pc, #40]	; (100505c <sleepmgr_unlock_mode+0x38>)
 1005032:	5cd3      	ldrb	r3, [r2, r3]
 1005034:	2b00      	cmp	r3, #0
 1005036:	d100      	bne.n	100503a <sleepmgr_unlock_mode+0x16>
		while (true) {
 1005038:	e7fe      	b.n	1005038 <sleepmgr_unlock_mode+0x14>
			// Check APP.
		}
	}

	// Enter a critical section
	flags = cpu_irq_save();
 100503a:	4b09      	ldr	r3, [pc, #36]	; (1005060 <sleepmgr_unlock_mode+0x3c>)
 100503c:	4798      	blx	r3
 100503e:	60f8      	str	r0, [r7, #12]

	--sleepmgr_locks[mode];
 1005040:	79fb      	ldrb	r3, [r7, #7]
 1005042:	4a06      	ldr	r2, [pc, #24]	; (100505c <sleepmgr_unlock_mode+0x38>)
 1005044:	5cd2      	ldrb	r2, [r2, r3]
 1005046:	3a01      	subs	r2, #1
 1005048:	b2d1      	uxtb	r1, r2
 100504a:	4a04      	ldr	r2, [pc, #16]	; (100505c <sleepmgr_unlock_mode+0x38>)
 100504c:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
 100504e:	68f8      	ldr	r0, [r7, #12]
 1005050:	4b04      	ldr	r3, [pc, #16]	; (1005064 <sleepmgr_unlock_mode+0x40>)
 1005052:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
 1005054:	bf00      	nop
 1005056:	3710      	adds	r7, #16
 1005058:	46bd      	mov	sp, r7
 100505a:	bd80      	pop	{r7, pc}
 100505c:	200082f0 	.word	0x200082f0
 1005060:	01004f59 	.word	0x01004f59
 1005064:	01004fb1 	.word	0x01004fb1

01005068 <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
 1005068:	b580      	push	{r7, lr}
 100506a:	b082      	sub	sp, #8
 100506c:	af00      	add	r7, sp, #0
 100506e:	4603      	mov	r3, r0
 1005070:	71fb      	strb	r3, [r7, #7]
	if (!b_idle && udd_b_idle) {
 1005072:	79fb      	ldrb	r3, [r7, #7]
 1005074:	f083 0301 	eor.w	r3, r3, #1
 1005078:	b2db      	uxtb	r3, r3
 100507a:	2b00      	cmp	r3, #0
 100507c:	d006      	beq.n	100508c <udd_sleep_mode+0x24>
 100507e:	4b0d      	ldr	r3, [pc, #52]	; (10050b4 <udd_sleep_mode+0x4c>)
 1005080:	781b      	ldrb	r3, [r3, #0]
 1005082:	2b00      	cmp	r3, #0
 1005084:	d002      	beq.n	100508c <udd_sleep_mode+0x24>
		sleepmgr_unlock_mode(UDP_SLEEP_MODE_USB_IDLE);
 1005086:	2000      	movs	r0, #0
 1005088:	4b0b      	ldr	r3, [pc, #44]	; (10050b8 <udd_sleep_mode+0x50>)
 100508a:	4798      	blx	r3
	}
	if (b_idle && !udd_b_idle) {
 100508c:	79fb      	ldrb	r3, [r7, #7]
 100508e:	2b00      	cmp	r3, #0
 1005090:	d009      	beq.n	10050a6 <udd_sleep_mode+0x3e>
 1005092:	4b08      	ldr	r3, [pc, #32]	; (10050b4 <udd_sleep_mode+0x4c>)
 1005094:	781b      	ldrb	r3, [r3, #0]
 1005096:	f083 0301 	eor.w	r3, r3, #1
 100509a:	b2db      	uxtb	r3, r3
 100509c:	2b00      	cmp	r3, #0
 100509e:	d002      	beq.n	10050a6 <udd_sleep_mode+0x3e>
		sleepmgr_lock_mode(UDP_SLEEP_MODE_USB_IDLE);
 10050a0:	2000      	movs	r0, #0
 10050a2:	4b06      	ldr	r3, [pc, #24]	; (10050bc <udd_sleep_mode+0x54>)
 10050a4:	4798      	blx	r3
	}
	udd_b_idle = b_idle;
 10050a6:	4a03      	ldr	r2, [pc, #12]	; (10050b4 <udd_sleep_mode+0x4c>)
 10050a8:	79fb      	ldrb	r3, [r7, #7]
 10050aa:	7013      	strb	r3, [r2, #0]
}
 10050ac:	bf00      	nop
 10050ae:	3708      	adds	r7, #8
 10050b0:	46bd      	mov	sp, r7
 10050b2:	bd80      	pop	{r7, pc}
 10050b4:	20001ec9 	.word	0x20001ec9
 10050b8:	01005025 	.word	0x01005025
 10050bc:	01004fe1 	.word	0x01004fe1

010050c0 <UDP_Handler>:
 * - control endpoint events (setup reception, end of data transfer, underflow, overflow, stall)
 * - bulk/interrupt/isochronous endpoints events (end of data transfer)
 *
 */
ISR(UDD_USB_INT_FUN)
{
 10050c0:	b580      	push	{r7, lr}
 10050c2:	af00      	add	r7, sp, #0
	/* For fast wakeup clocks restore
	 * In WAIT mode, clocks are switched to FASTRC.
	 * After wakeup clocks should be restored, before that ISR should not
	 * be served.
	 */
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
 10050c4:	4b66      	ldr	r3, [pc, #408]	; (1005260 <UDP_Handler+0x1a0>)
 10050c6:	4798      	blx	r3
 10050c8:	4603      	mov	r3, r0
 10050ca:	f083 0301 	eor.w	r3, r3, #1
 10050ce:	b2db      	uxtb	r3, r3
 10050d0:	2b00      	cmp	r3, #0
 10050d2:	d00c      	beq.n	10050ee <UDP_Handler+0x2e>
 10050d4:	4b63      	ldr	r3, [pc, #396]	; (1005264 <UDP_Handler+0x1a4>)
 10050d6:	69db      	ldr	r3, [r3, #28]
 10050d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 10050dc:	2b00      	cmp	r3, #0
 10050de:	d106      	bne.n	10050ee <UDP_Handler+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 10050e0:	b672      	cpsid	i
 10050e2:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
 10050e6:	4b60      	ldr	r3, [pc, #384]	; (1005268 <UDP_Handler+0x1a8>)
 10050e8:	2200      	movs	r2, #0
 10050ea:	701a      	strb	r2, [r3, #0]
		return;
 10050ec:	e0b7      	b.n	100525e <UDP_Handler+0x19e>
	}
#endif
	/* The UDP peripheral clock in the Power Management Controller (PMC)
	   must be enabled before any read/write operations to the UDP registers
	   including the UDP_TXVC register. */
	udd_enable_periph_ck();
 10050ee:	2030      	movs	r0, #48	; 0x30
 10050f0:	4b5e      	ldr	r3, [pc, #376]	; (100526c <UDP_Handler+0x1ac>)
 10050f2:	4798      	blx	r3

	if (Is_udd_sof_interrupt_enabled() && Is_udd_sof()) {
 10050f4:	4b5b      	ldr	r3, [pc, #364]	; (1005264 <UDP_Handler+0x1a4>)
 10050f6:	699b      	ldr	r3, [r3, #24]
 10050f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 10050fc:	2b00      	cmp	r3, #0
 10050fe:	d00e      	beq.n	100511e <UDP_Handler+0x5e>
 1005100:	4b58      	ldr	r3, [pc, #352]	; (1005264 <UDP_Handler+0x1a4>)
 1005102:	69db      	ldr	r3, [r3, #28]
 1005104:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 1005108:	2b00      	cmp	r3, #0
 100510a:	d008      	beq.n	100511e <UDP_Handler+0x5e>
		udd_ack_sof();
 100510c:	4b55      	ldr	r3, [pc, #340]	; (1005264 <UDP_Handler+0x1a4>)
 100510e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 1005112:	621a      	str	r2, [r3, #32]
		udc_sof_notify();
 1005114:	4b56      	ldr	r3, [pc, #344]	; (1005270 <UDP_Handler+0x1b0>)
 1005116:	4798      	blx	r3
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
 1005118:	4b56      	ldr	r3, [pc, #344]	; (1005274 <UDP_Handler+0x1b4>)
 100511a:	4798      	blx	r3
#endif
		goto udd_interrupt_sof_end;
 100511c:	e09d      	b.n	100525a <UDP_Handler+0x19a>
	}

	if (udd_ctrl_interrupt()) {
 100511e:	4b56      	ldr	r3, [pc, #344]	; (1005278 <UDP_Handler+0x1b8>)
 1005120:	4798      	blx	r3
 1005122:	4603      	mov	r3, r0
 1005124:	2b00      	cmp	r3, #0
 1005126:	f040 8095 	bne.w	1005254 <UDP_Handler+0x194>
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
	}

#if (0 != USB_DEVICE_MAX_EP)
	if (udd_ep_interrupt()) {
 100512a:	4b54      	ldr	r3, [pc, #336]	; (100527c <UDP_Handler+0x1bc>)
 100512c:	4798      	blx	r3
 100512e:	4603      	mov	r3, r0
 1005130:	2b00      	cmp	r3, #0
 1005132:	f040 8091 	bne.w	1005258 <UDP_Handler+0x198>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
 1005136:	4b4b      	ldr	r3, [pc, #300]	; (1005264 <UDP_Handler+0x1a4>)
 1005138:	699b      	ldr	r3, [r3, #24]
 100513a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 100513e:	2b00      	cmp	r3, #0
 1005140:	d005      	beq.n	100514e <UDP_Handler+0x8e>
 1005142:	4b48      	ldr	r3, [pc, #288]	; (1005264 <UDP_Handler+0x1a4>)
 1005144:	69db      	ldr	r3, [r3, #28]
 1005146:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 100514a:	2b00      	cmp	r3, #0
 100514c:	d117      	bne.n	100517e <UDP_Handler+0xbe>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
 100514e:	4b45      	ldr	r3, [pc, #276]	; (1005264 <UDP_Handler+0x1a4>)
 1005150:	699b      	ldr	r3, [r3, #24]
 1005152:	f403 7300 	and.w	r3, r3, #512	; 0x200
	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
 1005156:	2b00      	cmp	r3, #0
 1005158:	d005      	beq.n	1005166 <UDP_Handler+0xa6>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
 100515a:	4b42      	ldr	r3, [pc, #264]	; (1005264 <UDP_Handler+0x1a4>)
 100515c:	69db      	ldr	r3, [r3, #28]
 100515e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 1005162:	2b00      	cmp	r3, #0
 1005164:	d10b      	bne.n	100517e <UDP_Handler+0xbe>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
 1005166:	4b3f      	ldr	r3, [pc, #252]	; (1005264 <UDP_Handler+0x1a4>)
 1005168:	699b      	ldr	r3, [r3, #24]
 100516a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
 100516e:	2b00      	cmp	r3, #0
 1005170:	d01f      	beq.n	10051b2 <UDP_Handler+0xf2>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
 1005172:	4b3c      	ldr	r3, [pc, #240]	; (1005264 <UDP_Handler+0x1a4>)
 1005174:	69db      	ldr	r3, [r3, #28]
 1005176:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 100517a:	2b00      	cmp	r3, #0
 100517c:	d019      	beq.n	10051b2 <UDP_Handler+0xf2>
		// Ack wakeup interrupt and enable suspend interrupt
		udd_ack_wakeups();
 100517e:	4b39      	ldr	r3, [pc, #228]	; (1005264 <UDP_Handler+0x1a4>)
 1005180:	f44f 5218 	mov.w	r2, #9728	; 0x2600
 1005184:	621a      	str	r2, [r3, #32]
		// Do resume operations
		udd_disable_wakeups();
 1005186:	4b37      	ldr	r3, [pc, #220]	; (1005264 <UDP_Handler+0x1a4>)
 1005188:	f44f 5218 	mov.w	r2, #9728	; 0x2600
 100518c:	615a      	str	r2, [r3, #20]

		udd_sleep_mode(true); // Enter in IDLE mode
 100518e:	2001      	movs	r0, #1
 1005190:	4b3b      	ldr	r3, [pc, #236]	; (1005280 <UDP_Handler+0x1c0>)
 1005192:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
 1005194:	4b3b      	ldr	r3, [pc, #236]	; (1005284 <UDP_Handler+0x1c4>)
 1005196:	4798      	blx	r3
#endif
		udd_ack_suspend();
 1005198:	4b32      	ldr	r3, [pc, #200]	; (1005264 <UDP_Handler+0x1a4>)
 100519a:	f44f 7280 	mov.w	r2, #256	; 0x100
 100519e:	621a      	str	r2, [r3, #32]
		udd_enable_suspend_interrupt();
 10051a0:	4b30      	ldr	r3, [pc, #192]	; (1005264 <UDP_Handler+0x1a4>)
 10051a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 10051a6:	611a      	str	r2, [r3, #16]
		udd_enable_sof_interrupt();
 10051a8:	4b2e      	ldr	r3, [pc, #184]	; (1005264 <UDP_Handler+0x1a4>)
 10051aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 10051ae:	611a      	str	r2, [r3, #16]
		goto udd_interrupt_end;
 10051b0:	e053      	b.n	100525a <UDP_Handler+0x19a>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
 10051b2:	4b2c      	ldr	r3, [pc, #176]	; (1005264 <UDP_Handler+0x1a4>)
 10051b4:	699b      	ldr	r3, [r3, #24]
 10051b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 10051ba:	2b00      	cmp	r3, #0
 10051bc:	d022      	beq.n	1005204 <UDP_Handler+0x144>
 10051be:	4b29      	ldr	r3, [pc, #164]	; (1005264 <UDP_Handler+0x1a4>)
 10051c0:	69db      	ldr	r3, [r3, #28]
 10051c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 10051c6:	2b00      	cmp	r3, #0
 10051c8:	d01c      	beq.n	1005204 <UDP_Handler+0x144>
		// Ack suspend interrupt and enable resume interrupt
		udd_ack_suspend();
 10051ca:	4b26      	ldr	r3, [pc, #152]	; (1005264 <UDP_Handler+0x1a4>)
 10051cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 10051d0:	621a      	str	r2, [r3, #32]
		udd_disable_suspend_interrupt();
 10051d2:	4b24      	ldr	r3, [pc, #144]	; (1005264 <UDP_Handler+0x1a4>)
 10051d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 10051d8:	615a      	str	r2, [r3, #20]
		udd_enable_wake_up_interrupt();
 10051da:	4b22      	ldr	r3, [pc, #136]	; (1005264 <UDP_Handler+0x1a4>)
 10051dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 10051e0:	611a      	str	r2, [r3, #16]
		udd_enable_resume_interrupt();
 10051e2:	4b20      	ldr	r3, [pc, #128]	; (1005264 <UDP_Handler+0x1a4>)
 10051e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 10051e8:	611a      	str	r2, [r3, #16]
		udd_enable_ext_resume_interrupt();
 10051ea:	4b1e      	ldr	r3, [pc, #120]	; (1005264 <UDP_Handler+0x1a4>)
 10051ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 10051f0:	611a      	str	r2, [r3, #16]
		udd_disable_periph_ck();
 10051f2:	2030      	movs	r0, #48	; 0x30
 10051f4:	4b24      	ldr	r3, [pc, #144]	; (1005288 <UDP_Handler+0x1c8>)
 10051f6:	4798      	blx	r3

		udd_sleep_mode(false); // Enter in SUSPEND mode
 10051f8:	2000      	movs	r0, #0
 10051fa:	4b21      	ldr	r3, [pc, #132]	; (1005280 <UDP_Handler+0x1c0>)
 10051fc:	4798      	blx	r3
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
 10051fe:	4b23      	ldr	r3, [pc, #140]	; (100528c <UDP_Handler+0x1cc>)
 1005200:	4798      	blx	r3
#endif
		goto udd_interrupt_end;
 1005202:	e02a      	b.n	100525a <UDP_Handler+0x19a>
	}
	if (Is_udd_reset()) {
 1005204:	4b17      	ldr	r3, [pc, #92]	; (1005264 <UDP_Handler+0x1a4>)
 1005206:	69db      	ldr	r3, [r3, #28]
 1005208:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 100520c:	2b00      	cmp	r3, #0
 100520e:	d025      	beq.n	100525c <UDP_Handler+0x19c>
		// USB bus reset detection
		udd_ack_reset();
 1005210:	4b14      	ldr	r3, [pc, #80]	; (1005264 <UDP_Handler+0x1a4>)
 1005212:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 1005216:	621a      	str	r2, [r3, #32]

		// Abort all jobs on-going
#if (0 != USB_DEVICE_MAX_EP)
		udd_ep_job_table_kill();
 1005218:	4b1d      	ldr	r3, [pc, #116]	; (1005290 <UDP_Handler+0x1d0>)
 100521a:	4798      	blx	r3
#endif
		// Reset USB Device Stack Core
		udc_reset();
 100521c:	4b1d      	ldr	r3, [pc, #116]	; (1005294 <UDP_Handler+0x1d4>)
 100521e:	4798      	blx	r3
		// Reset device state
		udd_disable_address_state();
 1005220:	4a10      	ldr	r2, [pc, #64]	; (1005264 <UDP_Handler+0x1a4>)
 1005222:	4b10      	ldr	r3, [pc, #64]	; (1005264 <UDP_Handler+0x1a4>)
 1005224:	685b      	ldr	r3, [r3, #4]
 1005226:	f023 0301 	bic.w	r3, r3, #1
 100522a:	6053      	str	r3, [r2, #4]
		udd_disable_configured_state();
 100522c:	4a0d      	ldr	r2, [pc, #52]	; (1005264 <UDP_Handler+0x1a4>)
 100522e:	4b0d      	ldr	r3, [pc, #52]	; (1005264 <UDP_Handler+0x1a4>)
 1005230:	685b      	ldr	r3, [r3, #4]
 1005232:	f023 0302 	bic.w	r3, r3, #2
 1005236:	6053      	str	r3, [r2, #4]
		// Reset endpoint control
		udd_reset_ep_ctrl();
 1005238:	4b17      	ldr	r3, [pc, #92]	; (1005298 <UDP_Handler+0x1d8>)
 100523a:	4798      	blx	r3
		// Reset endpoint control management
		udd_ctrl_init();
 100523c:	4b17      	ldr	r3, [pc, #92]	; (100529c <UDP_Handler+0x1dc>)
 100523e:	4798      	blx	r3
		// After a USB reset, the suspend and SOF interrupt masks has been reseted
		// Thus, re-enable these
		udd_enable_suspend_interrupt();
 1005240:	4b08      	ldr	r3, [pc, #32]	; (1005264 <UDP_Handler+0x1a4>)
 1005242:	f44f 7280 	mov.w	r2, #256	; 0x100
 1005246:	611a      	str	r2, [r3, #16]
		udd_enable_sof_interrupt();
 1005248:	4b06      	ldr	r3, [pc, #24]	; (1005264 <UDP_Handler+0x1a4>)
 100524a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 100524e:	611a      	str	r2, [r3, #16]
		goto udd_interrupt_end;
 1005250:	bf00      	nop
 1005252:	e002      	b.n	100525a <UDP_Handler+0x19a>
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
 1005254:	bf00      	nop
 1005256:	e000      	b.n	100525a <UDP_Handler+0x19a>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
 1005258:	bf00      	nop
	}

udd_interrupt_end:
udd_interrupt_sof_end:
	return;
 100525a:	bf00      	nop
 100525c:	bf00      	nop
}
 100525e:	bd80      	pop	{r7, pc}
 1005260:	01004bb5 	.word	0x01004bb5
 1005264:	40044000 	.word	0x40044000
 1005268:	200001d4 	.word	0x200001d4
 100526c:	01004a15 	.word	0x01004a15
 1005270:	010033b5 	.word	0x010033b5
 1005274:	0100a197 	.word	0x0100a197
 1005278:	01006399 	.word	0x01006399
 100527c:	010069f1 	.word	0x010069f1
 1005280:	01005069 	.word	0x01005069
 1005284:	0100a18b 	.word	0x0100a18b
 1005288:	01004a95 	.word	0x01004a95
 100528c:	0100a17f 	.word	0x0100a17f
 1005290:	01006441 	.word	0x01006441
 1005294:	01003361 	.word	0x01003361
 1005298:	01005bf5 	.word	0x01005bf5
 100529c:	01005c9d 	.word	0x01005c9d

010052a0 <udd_is_high_speed>:
	udd_sleep_mode(false);
}


bool udd_is_high_speed(void)
{
 10052a0:	b480      	push	{r7}
 10052a2:	af00      	add	r7, sp, #0
	return false;
 10052a4:	2300      	movs	r3, #0
}
 10052a6:	4618      	mov	r0, r3
 10052a8:	46bd      	mov	sp, r7
 10052aa:	bc80      	pop	{r7}
 10052ac:	4770      	bx	lr
	...

010052b0 <udd_set_address>:


void udd_set_address(uint8_t address)
{
 10052b0:	b480      	push	{r7}
 10052b2:	b083      	sub	sp, #12
 10052b4:	af00      	add	r7, sp, #0
 10052b6:	4603      	mov	r3, r0
 10052b8:	71fb      	strb	r3, [r7, #7]
	udd_disable_address_state();
 10052ba:	4a15      	ldr	r2, [pc, #84]	; (1005310 <udd_set_address+0x60>)
 10052bc:	4b14      	ldr	r3, [pc, #80]	; (1005310 <udd_set_address+0x60>)
 10052be:	685b      	ldr	r3, [r3, #4]
 10052c0:	f023 0301 	bic.w	r3, r3, #1
 10052c4:	6053      	str	r3, [r2, #4]
	udd_disable_address();
 10052c6:	4a12      	ldr	r2, [pc, #72]	; (1005310 <udd_set_address+0x60>)
 10052c8:	4b11      	ldr	r3, [pc, #68]	; (1005310 <udd_set_address+0x60>)
 10052ca:	689b      	ldr	r3, [r3, #8]
 10052cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 10052d0:	6093      	str	r3, [r2, #8]
	if (address) {
 10052d2:	79fb      	ldrb	r3, [r7, #7]
 10052d4:	2b00      	cmp	r3, #0
 10052d6:	d015      	beq.n	1005304 <udd_set_address+0x54>
		udd_configure_address(address);
 10052d8:	490d      	ldr	r1, [pc, #52]	; (1005310 <udd_set_address+0x60>)
 10052da:	4b0d      	ldr	r3, [pc, #52]	; (1005310 <udd_set_address+0x60>)
 10052dc:	689b      	ldr	r3, [r3, #8]
 10052de:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 10052e2:	79fb      	ldrb	r3, [r7, #7]
 10052e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 10052e8:	4313      	orrs	r3, r2
 10052ea:	608b      	str	r3, [r1, #8]
		udd_enable_address();
 10052ec:	4a08      	ldr	r2, [pc, #32]	; (1005310 <udd_set_address+0x60>)
 10052ee:	4b08      	ldr	r3, [pc, #32]	; (1005310 <udd_set_address+0x60>)
 10052f0:	689b      	ldr	r3, [r3, #8]
 10052f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 10052f6:	6093      	str	r3, [r2, #8]
		udd_enable_address_state();
 10052f8:	4a05      	ldr	r2, [pc, #20]	; (1005310 <udd_set_address+0x60>)
 10052fa:	4b05      	ldr	r3, [pc, #20]	; (1005310 <udd_set_address+0x60>)
 10052fc:	685b      	ldr	r3, [r3, #4]
 10052fe:	f043 0301 	orr.w	r3, r3, #1
 1005302:	6053      	str	r3, [r2, #4]
	}
}
 1005304:	bf00      	nop
 1005306:	370c      	adds	r7, #12
 1005308:	46bd      	mov	sp, r7
 100530a:	bc80      	pop	{r7}
 100530c:	4770      	bx	lr
 100530e:	bf00      	nop
 1005310:	40044000 	.word	0x40044000

01005314 <udd_getaddress>:


uint8_t udd_getaddress(void)
{
 1005314:	b480      	push	{r7}
 1005316:	af00      	add	r7, sp, #0
	if (Is_udd_address_state_enabled())
 1005318:	4b08      	ldr	r3, [pc, #32]	; (100533c <udd_getaddress+0x28>)
 100531a:	685b      	ldr	r3, [r3, #4]
 100531c:	f003 0301 	and.w	r3, r3, #1
 1005320:	2b00      	cmp	r3, #0
 1005322:	d006      	beq.n	1005332 <udd_getaddress+0x1e>
		return udd_get_configured_address();
 1005324:	4b05      	ldr	r3, [pc, #20]	; (100533c <udd_getaddress+0x28>)
 1005326:	689b      	ldr	r3, [r3, #8]
 1005328:	b2db      	uxtb	r3, r3
 100532a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 100532e:	b2db      	uxtb	r3, r3
 1005330:	e000      	b.n	1005334 <udd_getaddress+0x20>
	return 0;
 1005332:	2300      	movs	r3, #0
}
 1005334:	4618      	mov	r0, r3
 1005336:	46bd      	mov	sp, r7
 1005338:	bc80      	pop	{r7}
 100533a:	4770      	bx	lr
 100533c:	40044000 	.word	0x40044000

01005340 <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
 1005340:	b480      	push	{r7}
 1005342:	af00      	add	r7, sp, #0
	return udd_frame_number();
 1005344:	4b04      	ldr	r3, [pc, #16]	; (1005358 <udd_get_frame_number+0x18>)
 1005346:	681b      	ldr	r3, [r3, #0]
 1005348:	b29b      	uxth	r3, r3
 100534a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 100534e:	b29b      	uxth	r3, r3
}
 1005350:	4618      	mov	r0, r3
 1005352:	46bd      	mov	sp, r7
 1005354:	bc80      	pop	{r7}
 1005356:	4770      	bx	lr
 1005358:	40044000 	.word	0x40044000

0100535c <udd_get_micro_frame_number>:


uint16_t udd_get_micro_frame_number(void)
{
 100535c:	b480      	push	{r7}
 100535e:	af00      	add	r7, sp, #0
	return 0;
 1005360:	2300      	movs	r3, #0
}
 1005362:	4618      	mov	r0, r3
 1005364:	46bd      	mov	sp, r7
 1005366:	bc80      	pop	{r7}
 1005368:	4770      	bx	lr
	...

0100536c <udd_set_setup_payload>:
	}
}


void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
 100536c:	b480      	push	{r7}
 100536e:	b083      	sub	sp, #12
 1005370:	af00      	add	r7, sp, #0
 1005372:	6078      	str	r0, [r7, #4]
 1005374:	460b      	mov	r3, r1
 1005376:	807b      	strh	r3, [r7, #2]
	udd_g_ctrlreq.payload = payload;
 1005378:	4a05      	ldr	r2, [pc, #20]	; (1005390 <udd_set_setup_payload+0x24>)
 100537a:	687b      	ldr	r3, [r7, #4]
 100537c:	6093      	str	r3, [r2, #8]
	udd_g_ctrlreq.payload_size = payload_size;
 100537e:	4a04      	ldr	r2, [pc, #16]	; (1005390 <udd_set_setup_payload+0x24>)
 1005380:	887b      	ldrh	r3, [r7, #2]
 1005382:	8193      	strh	r3, [r2, #12]
}
 1005384:	bf00      	nop
 1005386:	370c      	adds	r7, #12
 1005388:	46bd      	mov	sp, r7
 100538a:	bc80      	pop	{r7}
 100538c:	4770      	bx	lr
 100538e:	bf00      	nop
 1005390:	20008304 	.word	0x20008304

01005394 <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
 1005394:	b480      	push	{r7}
 1005396:	b087      	sub	sp, #28
 1005398:	af00      	add	r7, sp, #0
 100539a:	4603      	mov	r3, r0
 100539c:	71fb      	strb	r3, [r7, #7]
 100539e:	460b      	mov	r3, r1
 10053a0:	71bb      	strb	r3, [r7, #6]
 10053a2:	4613      	mov	r3, r2
 10053a4:	80bb      	strh	r3, [r7, #4]
	udd_ep_job_t *ptr_job;
	bool b_dir_in;
	bool b_iso;
	b_dir_in = ep & USB_EP_DIR_IN;
 10053a6:	79fb      	ldrb	r3, [r7, #7]
 10053a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 10053ac:	2b00      	cmp	r3, #0
 10053ae:	bf14      	ite	ne
 10053b0:	2301      	movne	r3, #1
 10053b2:	2300      	moveq	r3, #0
 10053b4:	75fb      	strb	r3, [r7, #23]
	b_iso = (bmAttributes&USB_EP_TYPE_MASK) == USB_EP_TYPE_ISOCHRONOUS;
 10053b6:	79bb      	ldrb	r3, [r7, #6]
 10053b8:	f003 0303 	and.w	r3, r3, #3
 10053bc:	2b01      	cmp	r3, #1
 10053be:	bf0c      	ite	eq
 10053c0:	2301      	moveq	r3, #1
 10053c2:	2300      	movne	r3, #0
 10053c4:	75bb      	strb	r3, [r7, #22]
	ep = ep & USB_EP_ADDR_MASK;
 10053c6:	79fb      	ldrb	r3, [r7, #7]
 10053c8:	f003 030f 	and.w	r3, r3, #15
 10053cc:	71fb      	strb	r3, [r7, #7]

	if (ep > USB_DEVICE_MAX_EP) {
 10053ce:	79fb      	ldrb	r3, [r7, #7]
 10053d0:	2b03      	cmp	r3, #3
 10053d2:	d901      	bls.n	10053d8 <udd_ep_alloc+0x44>
		return false;
 10053d4:	2300      	movs	r3, #0
 10053d6:	e0ca      	b.n	100556e <udd_ep_alloc+0x1da>
	}
	if (Is_udd_endpoint_enabled(ep)) {
 10053d8:	4a67      	ldr	r2, [pc, #412]	; (1005578 <udd_ep_alloc+0x1e4>)
 10053da:	79fb      	ldrb	r3, [r7, #7]
 10053dc:	330c      	adds	r3, #12
 10053de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 10053e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 10053e6:	2b00      	cmp	r3, #0
 10053e8:	d001      	beq.n	10053ee <udd_ep_alloc+0x5a>
		return false;
 10053ea:	2300      	movs	r3, #0
 10053ec:	e0bf      	b.n	100556e <udd_ep_alloc+0x1da>
	}

	// Check parameters
	if (b_iso && (!udd_is_endpoint_support_iso(ep))) {
 10053ee:	7dbb      	ldrb	r3, [r7, #22]
 10053f0:	2b00      	cmp	r3, #0
 10053f2:	d007      	beq.n	1005404 <udd_ep_alloc+0x70>
 10053f4:	79fb      	ldrb	r3, [r7, #7]
 10053f6:	2b00      	cmp	r3, #0
 10053f8:	d002      	beq.n	1005400 <udd_ep_alloc+0x6c>
 10053fa:	79fb      	ldrb	r3, [r7, #7]
 10053fc:	2b03      	cmp	r3, #3
 10053fe:	d101      	bne.n	1005404 <udd_ep_alloc+0x70>
		return false;
 1005400:	2300      	movs	r3, #0
 1005402:	e0b4      	b.n	100556e <udd_ep_alloc+0x1da>
	}
	if (MaxEndpointSize > udd_get_endpoint_size_max(ep)) {
 1005404:	88ba      	ldrh	r2, [r7, #4]
 1005406:	79fb      	ldrb	r3, [r7, #7]
 1005408:	2b04      	cmp	r3, #4
 100540a:	d002      	beq.n	1005412 <udd_ep_alloc+0x7e>
 100540c:	79fb      	ldrb	r3, [r7, #7]
 100540e:	2b05      	cmp	r3, #5
 1005410:	d102      	bne.n	1005418 <udd_ep_alloc+0x84>
 1005412:	f44f 7300 	mov.w	r3, #512	; 0x200
 1005416:	e000      	b.n	100541a <udd_ep_alloc+0x86>
 1005418:	2340      	movs	r3, #64	; 0x40
 100541a:	429a      	cmp	r2, r3
 100541c:	dd01      	ble.n	1005422 <udd_ep_alloc+0x8e>
		return false;
 100541e:	2300      	movs	r3, #0
 1005420:	e0a5      	b.n	100556e <udd_ep_alloc+0x1da>
	}
	ptr_job = &udd_ep_job[ep - 1];
 1005422:	79fb      	ldrb	r3, [r7, #7]
 1005424:	1e5a      	subs	r2, r3, #1
 1005426:	4613      	mov	r3, r2
 1005428:	009b      	lsls	r3, r3, #2
 100542a:	4413      	add	r3, r2
 100542c:	009b      	lsls	r3, r3, #2
 100542e:	4a53      	ldr	r2, [pc, #332]	; (100557c <udd_ep_alloc+0x1e8>)
 1005430:	4413      	add	r3, r2
 1005432:	613b      	str	r3, [r7, #16]

	// Set endpoint size
	ptr_job->size = MaxEndpointSize;
 1005434:	88bb      	ldrh	r3, [r7, #4]
 1005436:	f3c3 0309 	ubfx	r3, r3, #0, #10
 100543a:	b299      	uxth	r1, r3
 100543c:	693a      	ldr	r2, [r7, #16]
 100543e:	8a13      	ldrh	r3, [r2, #16]
 1005440:	f361 0309 	bfi	r3, r1, #0, #10
 1005444:	8213      	strh	r3, [r2, #16]
	ptr_job->b_buf_end = false;
 1005446:	693a      	ldr	r2, [r7, #16]
 1005448:	7c53      	ldrb	r3, [r2, #17]
 100544a:	f36f 13c7 	bfc	r3, #7, #1
 100544e:	7453      	strb	r3, [r2, #17]
	ptr_job->b_stall_requested = false;
 1005450:	693a      	ldr	r2, [r7, #16]
 1005452:	7c53      	ldrb	r3, [r2, #17]
 1005454:	f36f 1345 	bfc	r3, #5, #1
 1005458:	7453      	strb	r3, [r2, #17]
	if (b_dir_in) {
 100545a:	7dfb      	ldrb	r3, [r7, #23]
 100545c:	2b00      	cmp	r3, #0
 100545e:	d004      	beq.n	100546a <udd_ep_alloc+0xd6>
		// No data buffered in FIFO
		ptr_job->bank = 0;
 1005460:	693a      	ldr	r2, [r7, #16]
 1005462:	7c53      	ldrb	r3, [r2, #17]
 1005464:	f36f 0383 	bfc	r3, #2, #2
 1005468:	7453      	strb	r3, [r2, #17]
	}

	// Reset FIFOs
	udd_reset_endpoint(ep);
 100546a:	4943      	ldr	r1, [pc, #268]	; (1005578 <udd_ep_alloc+0x1e4>)
 100546c:	4b42      	ldr	r3, [pc, #264]	; (1005578 <udd_ep_alloc+0x1e4>)
 100546e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 1005470:	79fb      	ldrb	r3, [r7, #7]
 1005472:	2001      	movs	r0, #1
 1005474:	fa00 f303 	lsl.w	r3, r0, r3
 1005478:	4313      	orrs	r3, r2
 100547a:	628b      	str	r3, [r1, #40]	; 0x28
 100547c:	bf00      	nop
 100547e:	4b3e      	ldr	r3, [pc, #248]	; (1005578 <udd_ep_alloc+0x1e4>)
 1005480:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 1005482:	79fb      	ldrb	r3, [r7, #7]
 1005484:	2101      	movs	r1, #1
 1005486:	fa01 f303 	lsl.w	r3, r1, r3
 100548a:	4013      	ands	r3, r2
 100548c:	2b00      	cmp	r3, #0
 100548e:	d0f6      	beq.n	100547e <udd_ep_alloc+0xea>
 1005490:	4939      	ldr	r1, [pc, #228]	; (1005578 <udd_ep_alloc+0x1e4>)
 1005492:	4b39      	ldr	r3, [pc, #228]	; (1005578 <udd_ep_alloc+0x1e4>)
 1005494:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 1005496:	79fb      	ldrb	r3, [r7, #7]
 1005498:	2001      	movs	r0, #1
 100549a:	fa00 f303 	lsl.w	r3, r0, r3
 100549e:	43db      	mvns	r3, r3
 10054a0:	4013      	ands	r3, r2
 10054a2:	628b      	str	r3, [r1, #40]	; 0x28
	// Set configuration of new endpoint
	udd_configure_endpoint(ep,
 10054a4:	4a34      	ldr	r2, [pc, #208]	; (1005578 <udd_ep_alloc+0x1e4>)
 10054a6:	79fb      	ldrb	r3, [r7, #7]
 10054a8:	330c      	adds	r3, #12
 10054aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 10054ae:	60fb      	str	r3, [r7, #12]
 10054b0:	68fb      	ldr	r3, [r7, #12]
 10054b2:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
 10054b6:	60fb      	str	r3, [r7, #12]
 10054b8:	68fb      	ldr	r3, [r7, #12]
 10054ba:	f423 4307 	bic.w	r3, r3, #34560	; 0x8700
 10054be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 10054c2:	60fb      	str	r3, [r7, #12]
 10054c4:	7dfb      	ldrb	r3, [r7, #23]
 10054c6:	2b00      	cmp	r3, #0
 10054c8:	d00d      	beq.n	10054e6 <udd_ep_alloc+0x152>
 10054ca:	79bb      	ldrb	r3, [r7, #6]
 10054cc:	021b      	lsls	r3, r3, #8
 10054ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 10054d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 10054d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 10054da:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 10054de:	f248 7380 	movw	r3, #34688	; 0x8780
 10054e2:	4013      	ands	r3, r2
 10054e4:	e008      	b.n	10054f8 <udd_ep_alloc+0x164>
 10054e6:	79bb      	ldrb	r3, [r7, #6]
 10054e8:	021b      	lsls	r3, r3, #8
 10054ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 10054ee:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 10054f2:	f248 7380 	movw	r3, #34688	; 0x8780
 10054f6:	4013      	ands	r3, r2
 10054f8:	68fa      	ldr	r2, [r7, #12]
 10054fa:	4313      	orrs	r3, r2
 10054fc:	60fb      	str	r3, [r7, #12]
 10054fe:	491e      	ldr	r1, [pc, #120]	; (1005578 <udd_ep_alloc+0x1e4>)
 1005500:	79fb      	ldrb	r3, [r7, #7]
 1005502:	68fa      	ldr	r2, [r7, #12]
 1005504:	330c      	adds	r3, #12
 1005506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 100550a:	bf00      	nop
 100550c:	4a1a      	ldr	r2, [pc, #104]	; (1005578 <udd_ep_alloc+0x1e4>)
 100550e:	79fb      	ldrb	r3, [r7, #7]
 1005510:	330c      	adds	r3, #12
 1005512:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 1005516:	7dfb      	ldrb	r3, [r7, #23]
 1005518:	2b00      	cmp	r3, #0
 100551a:	d00a      	beq.n	1005532 <udd_ep_alloc+0x19e>
 100551c:	79bb      	ldrb	r3, [r7, #6]
 100551e:	021b      	lsls	r3, r3, #8
 1005520:	f403 7340 	and.w	r3, r3, #768	; 0x300
 1005524:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 1005528:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 100552c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 1005530:	e005      	b.n	100553e <udd_ep_alloc+0x1aa>
 1005532:	79bb      	ldrb	r3, [r7, #6]
 1005534:	021b      	lsls	r3, r3, #8
 1005536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 100553a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 100553e:	401a      	ands	r2, r3
 1005540:	7dfb      	ldrb	r3, [r7, #23]
 1005542:	2b00      	cmp	r3, #0
 1005544:	d00a      	beq.n	100555c <udd_ep_alloc+0x1c8>
 1005546:	79bb      	ldrb	r3, [r7, #6]
 1005548:	021b      	lsls	r3, r3, #8
 100554a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 100554e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 1005552:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 1005556:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 100555a:	e005      	b.n	1005568 <udd_ep_alloc+0x1d4>
 100555c:	79bb      	ldrb	r3, [r7, #6]
 100555e:	021b      	lsls	r3, r3, #8
 1005560:	f403 7340 	and.w	r3, r3, #768	; 0x300
 1005564:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 1005568:	429a      	cmp	r2, r3
 100556a:	d1cf      	bne.n	100550c <udd_ep_alloc+0x178>
		(b_dir_in ? ((bmAttributes&USB_EP_TYPE_MASK) | 0x4) : (bmAttributes&USB_EP_TYPE_MASK)),
		0);
	return true;
 100556c:	2301      	movs	r3, #1
}
 100556e:	4618      	mov	r0, r3
 1005570:	371c      	adds	r7, #28
 1005572:	46bd      	mov	sp, r7
 1005574:	bc80      	pop	{r7}
 1005576:	4770      	bx	lr
 1005578:	40044000 	.word	0x40044000
 100557c:	20001ed0 	.word	0x20001ed0

01005580 <udd_ep_free>:


void udd_ep_free(udd_ep_id_t ep)
{
 1005580:	b580      	push	{r7, lr}
 1005582:	b084      	sub	sp, #16
 1005584:	af00      	add	r7, sp, #0
 1005586:	4603      	mov	r3, r0
 1005588:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
 100558a:	79fb      	ldrb	r3, [r7, #7]
 100558c:	f003 030f 	and.w	r3, r3, #15
 1005590:	73fb      	strb	r3, [r7, #15]
	if (USB_DEVICE_MAX_EP < ep_index) {
 1005592:	7bfb      	ldrb	r3, [r7, #15]
 1005594:	2b03      	cmp	r3, #3
 1005596:	d822      	bhi.n	10055de <udd_ep_free+0x5e>
		return;
	}
	udd_disable_endpoint(ep_index);
 1005598:	4a13      	ldr	r2, [pc, #76]	; (10055e8 <udd_ep_free+0x68>)
 100559a:	7bfb      	ldrb	r3, [r7, #15]
 100559c:	330c      	adds	r3, #12
 100559e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 10055a2:	60bb      	str	r3, [r7, #8]
 10055a4:	68bb      	ldr	r3, [r7, #8]
 10055a6:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
 10055aa:	60bb      	str	r3, [r7, #8]
 10055ac:	68bb      	ldr	r3, [r7, #8]
 10055ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 10055b2:	60bb      	str	r3, [r7, #8]
 10055b4:	490c      	ldr	r1, [pc, #48]	; (10055e8 <udd_ep_free+0x68>)
 10055b6:	7bfb      	ldrb	r3, [r7, #15]
 10055b8:	68ba      	ldr	r2, [r7, #8]
 10055ba:	330c      	adds	r3, #12
 10055bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 10055c0:	bf00      	nop
 10055c2:	4a09      	ldr	r2, [pc, #36]	; (10055e8 <udd_ep_free+0x68>)
 10055c4:	7bfb      	ldrb	r3, [r7, #15]
 10055c6:	330c      	adds	r3, #12
 10055c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 10055cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 10055d0:	2b00      	cmp	r3, #0
 10055d2:	d1f6      	bne.n	10055c2 <udd_ep_free+0x42>
	udd_ep_abort_job(ep);
 10055d4:	79fb      	ldrb	r3, [r7, #7]
 10055d6:	4618      	mov	r0, r3
 10055d8:	4b04      	ldr	r3, [pc, #16]	; (10055ec <udd_ep_free+0x6c>)
 10055da:	4798      	blx	r3
 10055dc:	e000      	b.n	10055e0 <udd_ep_free+0x60>
		return;
 10055de:	bf00      	nop
}
 10055e0:	3710      	adds	r7, #16
 10055e2:	46bd      	mov	sp, r7
 10055e4:	bd80      	pop	{r7, pc}
 10055e6:	bf00      	nop
 10055e8:	40044000 	.word	0x40044000
 10055ec:	01006485 	.word	0x01006485

010055f0 <udd_ep_is_halted>:


bool udd_ep_is_halted(udd_ep_id_t ep)
{
 10055f0:	b480      	push	{r7}
 10055f2:	b085      	sub	sp, #20
 10055f4:	af00      	add	r7, sp, #0
 10055f6:	4603      	mov	r3, r0
 10055f8:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
 10055fa:	79fb      	ldrb	r3, [r7, #7]
 10055fc:	f003 030f 	and.w	r3, r3, #15
 1005600:	73fb      	strb	r3, [r7, #15]
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
 1005602:	7bfb      	ldrb	r3, [r7, #15]
 1005604:	1e5a      	subs	r2, r3, #1
 1005606:	4613      	mov	r3, r2
 1005608:	009b      	lsls	r3, r3, #2
 100560a:	4413      	add	r3, r2
 100560c:	009b      	lsls	r3, r3, #2
 100560e:	4a12      	ldr	r2, [pc, #72]	; (1005658 <udd_ep_is_halted+0x68>)
 1005610:	4413      	add	r3, r2
 1005612:	60bb      	str	r3, [r7, #8]
	if (USB_DEVICE_MAX_EP < ep_index) {
 1005614:	7bfb      	ldrb	r3, [r7, #15]
 1005616:	2b03      	cmp	r3, #3
 1005618:	d901      	bls.n	100561e <udd_ep_is_halted+0x2e>
		return false;
 100561a:	2300      	movs	r3, #0
 100561c:	e017      	b.n	100564e <udd_ep_is_halted+0x5e>
	}
	return ptr_job->b_stall_requested ||
 100561e:	68bb      	ldr	r3, [r7, #8]
 1005620:	7c5b      	ldrb	r3, [r3, #17]
 1005622:	f003 0320 	and.w	r3, r3, #32
 1005626:	b2db      	uxtb	r3, r3
 1005628:	2b00      	cmp	r3, #0
 100562a:	d10a      	bne.n	1005642 <udd_ep_is_halted+0x52>
			Is_udd_endpoint_stall_pending(ep & USB_EP_ADDR_MASK);
 100562c:	4a0b      	ldr	r2, [pc, #44]	; (100565c <udd_ep_is_halted+0x6c>)
 100562e:	79fb      	ldrb	r3, [r7, #7]
 1005630:	f003 030f 	and.w	r3, r3, #15
 1005634:	330c      	adds	r3, #12
 1005636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 100563a:	f003 0328 	and.w	r3, r3, #40	; 0x28
	return ptr_job->b_stall_requested ||
 100563e:	2b00      	cmp	r3, #0
 1005640:	d001      	beq.n	1005646 <udd_ep_is_halted+0x56>
 1005642:	2301      	movs	r3, #1
 1005644:	e000      	b.n	1005648 <udd_ep_is_halted+0x58>
 1005646:	2300      	movs	r3, #0
 1005648:	f003 0301 	and.w	r3, r3, #1
 100564c:	b2db      	uxtb	r3, r3
}
 100564e:	4618      	mov	r0, r3
 1005650:	3714      	adds	r7, #20
 1005652:	46bd      	mov	sp, r7
 1005654:	bc80      	pop	{r7}
 1005656:	4770      	bx	lr
 1005658:	20001ed0 	.word	0x20001ed0
 100565c:	40044000 	.word	0x40044000

01005660 <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
 1005660:	b580      	push	{r7, lr}
 1005662:	b086      	sub	sp, #24
 1005664:	af00      	add	r7, sp, #0
 1005666:	4603      	mov	r3, r0
 1005668:	71fb      	strb	r3, [r7, #7]
	bool b_dir_in = ep & USB_EP_DIR_IN;
 100566a:	79fb      	ldrb	r3, [r7, #7]
 100566c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 1005670:	2b00      	cmp	r3, #0
 1005672:	bf14      	ite	ne
 1005674:	2301      	movne	r3, #1
 1005676:	2300      	moveq	r3, #0
 1005678:	75fb      	strb	r3, [r7, #23]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
 100567a:	79fb      	ldrb	r3, [r7, #7]
 100567c:	f003 030f 	and.w	r3, r3, #15
 1005680:	75bb      	strb	r3, [r7, #22]
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
 1005682:	7dbb      	ldrb	r3, [r7, #22]
 1005684:	1e5a      	subs	r2, r3, #1
 1005686:	4613      	mov	r3, r2
 1005688:	009b      	lsls	r3, r3, #2
 100568a:	4413      	add	r3, r2
 100568c:	009b      	lsls	r3, r3, #2
 100568e:	4a2d      	ldr	r2, [pc, #180]	; (1005744 <udd_ep_set_halt+0xe4>)
 1005690:	4413      	add	r3, r2
 1005692:	613b      	str	r3, [r7, #16]
	irqflags_t flags;
	if (USB_DEVICE_MAX_EP < ep_index) {
 1005694:	7dbb      	ldrb	r3, [r7, #22]
 1005696:	2b03      	cmp	r3, #3
 1005698:	d901      	bls.n	100569e <udd_ep_set_halt+0x3e>
		return false;
 100569a:	2300      	movs	r3, #0
 100569c:	e04d      	b.n	100573a <udd_ep_set_halt+0xda>
	}
	flags = cpu_irq_save();
 100569e:	4b2a      	ldr	r3, [pc, #168]	; (1005748 <udd_ep_set_halt+0xe8>)
 10056a0:	4798      	blx	r3
 10056a2:	60f8      	str	r0, [r7, #12]
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
 10056a4:	7dfb      	ldrb	r3, [r7, #23]
 10056a6:	2b00      	cmp	r3, #0
 10056a8:	d01f      	beq.n	10056ea <udd_ep_set_halt+0x8a>
 10056aa:	4a28      	ldr	r2, [pc, #160]	; (100574c <udd_ep_set_halt+0xec>)
 10056ac:	7dbb      	ldrb	r3, [r7, #22]
 10056ae:	330c      	adds	r3, #12
 10056b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 10056b4:	f003 0310 	and.w	r3, r3, #16
 10056b8:	2b00      	cmp	r3, #0
 10056ba:	d106      	bne.n	10056ca <udd_ep_set_halt+0x6a>
				|| ptr_job->bank > 1)) {
 10056bc:	693b      	ldr	r3, [r7, #16]
 10056be:	7c5b      	ldrb	r3, [r3, #17]
 10056c0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 10056c4:	b2db      	uxtb	r3, r3
 10056c6:	2b01      	cmp	r3, #1
 10056c8:	dd0f      	ble.n	10056ea <udd_ep_set_halt+0x8a>
		// Halt until banks sent
		ptr_job->b_stall_requested = true;
 10056ca:	693a      	ldr	r2, [r7, #16]
 10056cc:	7c53      	ldrb	r3, [r2, #17]
 10056ce:	f043 0320 	orr.w	r3, r3, #32
 10056d2:	7453      	strb	r3, [r2, #17]
		udd_enable_endpoint_interrupt(ep_index);
 10056d4:	4a1d      	ldr	r2, [pc, #116]	; (100574c <udd_ep_set_halt+0xec>)
 10056d6:	7dbb      	ldrb	r3, [r7, #22]
 10056d8:	2101      	movs	r1, #1
 10056da:	fa01 f303 	lsl.w	r3, r1, r3
 10056de:	6113      	str	r3, [r2, #16]
		cpu_irq_restore(flags);
 10056e0:	68f8      	ldr	r0, [r7, #12]
 10056e2:	4b1b      	ldr	r3, [pc, #108]	; (1005750 <udd_ep_set_halt+0xf0>)
 10056e4:	4798      	blx	r3
		return true;
 10056e6:	2301      	movs	r3, #1
 10056e8:	e027      	b.n	100573a <udd_ep_set_halt+0xda>
	} else {
		// Stall endpoint
		udd_enable_stall_handshake(ep_index);
 10056ea:	4a18      	ldr	r2, [pc, #96]	; (100574c <udd_ep_set_halt+0xec>)
 10056ec:	7dbb      	ldrb	r3, [r7, #22]
 10056ee:	330c      	adds	r3, #12
 10056f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 10056f4:	60bb      	str	r3, [r7, #8]
 10056f6:	68bb      	ldr	r3, [r7, #8]
 10056f8:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
 10056fc:	60bb      	str	r3, [r7, #8]
 10056fe:	68bb      	ldr	r3, [r7, #8]
 1005700:	f043 0320 	orr.w	r3, r3, #32
 1005704:	60bb      	str	r3, [r7, #8]
 1005706:	4911      	ldr	r1, [pc, #68]	; (100574c <udd_ep_set_halt+0xec>)
 1005708:	7dbb      	ldrb	r3, [r7, #22]
 100570a:	68ba      	ldr	r2, [r7, #8]
 100570c:	330c      	adds	r3, #12
 100570e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 1005712:	bf00      	nop
 1005714:	4a0d      	ldr	r2, [pc, #52]	; (100574c <udd_ep_set_halt+0xec>)
 1005716:	7dbb      	ldrb	r3, [r7, #22]
 1005718:	330c      	adds	r3, #12
 100571a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 100571e:	f003 0320 	and.w	r3, r3, #32
 1005722:	2b20      	cmp	r3, #32
 1005724:	d1f6      	bne.n	1005714 <udd_ep_set_halt+0xb4>
		udd_enable_endpoint_interrupt(ep_index);
 1005726:	4a09      	ldr	r2, [pc, #36]	; (100574c <udd_ep_set_halt+0xec>)
 1005728:	7dbb      	ldrb	r3, [r7, #22]
 100572a:	2101      	movs	r1, #1
 100572c:	fa01 f303 	lsl.w	r3, r1, r3
 1005730:	6113      	str	r3, [r2, #16]
		cpu_irq_restore(flags);
 1005732:	68f8      	ldr	r0, [r7, #12]
 1005734:	4b06      	ldr	r3, [pc, #24]	; (1005750 <udd_ep_set_halt+0xf0>)
 1005736:	4798      	blx	r3
	}
	return true;
 1005738:	2301      	movs	r3, #1
}
 100573a:	4618      	mov	r0, r3
 100573c:	3718      	adds	r7, #24
 100573e:	46bd      	mov	sp, r7
 1005740:	bd80      	pop	{r7, pc}
 1005742:	bf00      	nop
 1005744:	20001ed0 	.word	0x20001ed0
 1005748:	01004f59 	.word	0x01004f59
 100574c:	40044000 	.word	0x40044000
 1005750:	01004fb1 	.word	0x01004fb1

01005754 <udd_ep_clear_halt>:


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
 1005754:	b580      	push	{r7, lr}
 1005756:	b086      	sub	sp, #24
 1005758:	af00      	add	r7, sp, #0
 100575a:	4603      	mov	r3, r0
 100575c:	71fb      	strb	r3, [r7, #7]
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
 100575e:	79fb      	ldrb	r3, [r7, #7]
 1005760:	f003 030f 	and.w	r3, r3, #15
 1005764:	71fb      	strb	r3, [r7, #7]
	if (USB_DEVICE_MAX_EP < ep)
 1005766:	79fb      	ldrb	r3, [r7, #7]
 1005768:	2b03      	cmp	r3, #3
 100576a:	d901      	bls.n	1005770 <udd_ep_clear_halt+0x1c>
		return false;
 100576c:	2300      	movs	r3, #0
 100576e:	e07f      	b.n	1005870 <udd_ep_clear_halt+0x11c>
	ptr_job = &udd_ep_job[ep - 1];
 1005770:	79fb      	ldrb	r3, [r7, #7]
 1005772:	1e5a      	subs	r2, r3, #1
 1005774:	4613      	mov	r3, r2
 1005776:	009b      	lsls	r3, r3, #2
 1005778:	4413      	add	r3, r2
 100577a:	009b      	lsls	r3, r3, #2
 100577c:	4a3e      	ldr	r2, [pc, #248]	; (1005878 <udd_ep_clear_halt+0x124>)
 100577e:	4413      	add	r3, r2
 1005780:	617b      	str	r3, [r7, #20]

	ptr_job->b_stall_requested = false;
 1005782:	697a      	ldr	r2, [r7, #20]
 1005784:	7c53      	ldrb	r3, [r2, #17]
 1005786:	f36f 1345 	bfc	r3, #5, #1
 100578a:	7453      	strb	r3, [r2, #17]
	if (Is_udd_endpoint_stall_requested(ep)) {
 100578c:	4a3b      	ldr	r2, [pc, #236]	; (100587c <udd_ep_clear_halt+0x128>)
 100578e:	79fb      	ldrb	r3, [r7, #7]
 1005790:	330c      	adds	r3, #12
 1005792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 1005796:	f003 0320 	and.w	r3, r3, #32
 100579a:	2b00      	cmp	r3, #0
 100579c:	d067      	beq.n	100586e <udd_ep_clear_halt+0x11a>
		// Remove stall
		udd_disable_stall_handshake(ep);
 100579e:	4a37      	ldr	r2, [pc, #220]	; (100587c <udd_ep_clear_halt+0x128>)
 10057a0:	79fb      	ldrb	r3, [r7, #7]
 10057a2:	330c      	adds	r3, #12
 10057a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 10057a8:	613b      	str	r3, [r7, #16]
 10057aa:	693b      	ldr	r3, [r7, #16]
 10057ac:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
 10057b0:	613b      	str	r3, [r7, #16]
 10057b2:	693b      	ldr	r3, [r7, #16]
 10057b4:	f023 0320 	bic.w	r3, r3, #32
 10057b8:	613b      	str	r3, [r7, #16]
 10057ba:	4930      	ldr	r1, [pc, #192]	; (100587c <udd_ep_clear_halt+0x128>)
 10057bc:	79fb      	ldrb	r3, [r7, #7]
 10057be:	693a      	ldr	r2, [r7, #16]
 10057c0:	330c      	adds	r3, #12
 10057c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 10057c6:	bf00      	nop
 10057c8:	4a2c      	ldr	r2, [pc, #176]	; (100587c <udd_ep_clear_halt+0x128>)
 10057ca:	79fb      	ldrb	r3, [r7, #7]
 10057cc:	330c      	adds	r3, #12
 10057ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 10057d2:	f003 0320 	and.w	r3, r3, #32
 10057d6:	2b00      	cmp	r3, #0
 10057d8:	d1f6      	bne.n	10057c8 <udd_ep_clear_halt+0x74>
		// Reset FIFO and data toggle (after stall cleared)
		udd_reset_endpoint(ep);
 10057da:	4928      	ldr	r1, [pc, #160]	; (100587c <udd_ep_clear_halt+0x128>)
 10057dc:	4b27      	ldr	r3, [pc, #156]	; (100587c <udd_ep_clear_halt+0x128>)
 10057de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 10057e0:	79fb      	ldrb	r3, [r7, #7]
 10057e2:	2001      	movs	r0, #1
 10057e4:	fa00 f303 	lsl.w	r3, r0, r3
 10057e8:	4313      	orrs	r3, r2
 10057ea:	628b      	str	r3, [r1, #40]	; 0x28
 10057ec:	bf00      	nop
 10057ee:	4b23      	ldr	r3, [pc, #140]	; (100587c <udd_ep_clear_halt+0x128>)
 10057f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 10057f2:	79fb      	ldrb	r3, [r7, #7]
 10057f4:	2101      	movs	r1, #1
 10057f6:	fa01 f303 	lsl.w	r3, r1, r3
 10057fa:	4013      	ands	r3, r2
 10057fc:	2b00      	cmp	r3, #0
 10057fe:	d0f6      	beq.n	10057ee <udd_ep_clear_halt+0x9a>
 1005800:	491e      	ldr	r1, [pc, #120]	; (100587c <udd_ep_clear_halt+0x128>)
 1005802:	4b1e      	ldr	r3, [pc, #120]	; (100587c <udd_ep_clear_halt+0x128>)
 1005804:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 1005806:	79fb      	ldrb	r3, [r7, #7]
 1005808:	2001      	movs	r0, #1
 100580a:	fa00 f303 	lsl.w	r3, r0, r3
 100580e:	43db      	mvns	r3, r3
 1005810:	4013      	ands	r3, r2
 1005812:	628b      	str	r3, [r1, #40]	; 0x28
		// Clear stall status
		udd_ack_stall(ep);
 1005814:	4a19      	ldr	r2, [pc, #100]	; (100587c <udd_ep_clear_halt+0x128>)
 1005816:	79fb      	ldrb	r3, [r7, #7]
 1005818:	330c      	adds	r3, #12
 100581a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 100581e:	60fb      	str	r3, [r7, #12]
 1005820:	68fb      	ldr	r3, [r7, #12]
 1005822:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
 1005826:	60fb      	str	r3, [r7, #12]
 1005828:	68fb      	ldr	r3, [r7, #12]
 100582a:	f023 0308 	bic.w	r3, r3, #8
 100582e:	60fb      	str	r3, [r7, #12]
 1005830:	4912      	ldr	r1, [pc, #72]	; (100587c <udd_ep_clear_halt+0x128>)
 1005832:	79fb      	ldrb	r3, [r7, #7]
 1005834:	68fa      	ldr	r2, [r7, #12]
 1005836:	330c      	adds	r3, #12
 1005838:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 100583c:	bf00      	nop
 100583e:	4a0f      	ldr	r2, [pc, #60]	; (100587c <udd_ep_clear_halt+0x128>)
 1005840:	79fb      	ldrb	r3, [r7, #7]
 1005842:	330c      	adds	r3, #12
 1005844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 1005848:	f003 0308 	and.w	r3, r3, #8
 100584c:	2b00      	cmp	r3, #0
 100584e:	d1f6      	bne.n	100583e <udd_ep_clear_halt+0xea>
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
 1005850:	697b      	ldr	r3, [r7, #20]
 1005852:	7c5b      	ldrb	r3, [r3, #17]
 1005854:	f003 0310 	and.w	r3, r3, #16
 1005858:	b2db      	uxtb	r3, r3
 100585a:	2b00      	cmp	r3, #0
 100585c:	d007      	beq.n	100586e <udd_ep_clear_halt+0x11a>
			ptr_job->busy = false;
 100585e:	697a      	ldr	r2, [r7, #20]
 1005860:	7c53      	ldrb	r3, [r2, #17]
 1005862:	f36f 1304 	bfc	r3, #4, #1
 1005866:	7453      	strb	r3, [r2, #17]
			ptr_job->call_nohalt();
 1005868:	697b      	ldr	r3, [r7, #20]
 100586a:	681b      	ldr	r3, [r3, #0]
 100586c:	4798      	blx	r3
		}
	}
	return true;
 100586e:	2301      	movs	r3, #1
}
 1005870:	4618      	mov	r0, r3
 1005872:	3718      	adds	r7, #24
 1005874:	46bd      	mov	sp, r7
 1005876:	bd80      	pop	{r7, pc}
 1005878:	20001ed0 	.word	0x20001ed0
 100587c:	40044000 	.word	0x40044000

01005880 <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
 1005880:	b580      	push	{r7, lr}
 1005882:	b088      	sub	sp, #32
 1005884:	af00      	add	r7, sp, #0
 1005886:	60ba      	str	r2, [r7, #8]
 1005888:	607b      	str	r3, [r7, #4]
 100588a:	4603      	mov	r3, r0
 100588c:	73fb      	strb	r3, [r7, #15]
 100588e:	460b      	mov	r3, r1
 1005890:	73bb      	strb	r3, [r7, #14]
	udd_ep_job_t *ptr_job;
	irqflags_t flags;
	bool b_dir_in = ep & USB_EP_DIR_IN;
 1005892:	7bfb      	ldrb	r3, [r7, #15]
 1005894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 1005898:	2b00      	cmp	r3, #0
 100589a:	bf14      	ite	ne
 100589c:	2301      	movne	r3, #1
 100589e:	2300      	moveq	r3, #0
 10058a0:	77fb      	strb	r3, [r7, #31]

	ep &= USB_EP_ADDR_MASK;
 10058a2:	7bfb      	ldrb	r3, [r7, #15]
 10058a4:	f003 030f 	and.w	r3, r3, #15
 10058a8:	73fb      	strb	r3, [r7, #15]
	if (USB_DEVICE_MAX_EP < ep) {
 10058aa:	7bfb      	ldrb	r3, [r7, #15]
 10058ac:	2b03      	cmp	r3, #3
 10058ae:	d901      	bls.n	10058b4 <udd_ep_run+0x34>
		return false;
 10058b0:	2300      	movs	r3, #0
 10058b2:	e083      	b.n	10059bc <udd_ep_run+0x13c>
	}
	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
 10058b4:	7bfb      	ldrb	r3, [r7, #15]
 10058b6:	1e5a      	subs	r2, r3, #1
 10058b8:	4613      	mov	r3, r2
 10058ba:	009b      	lsls	r3, r3, #2
 10058bc:	4413      	add	r3, r2
 10058be:	009b      	lsls	r3, r3, #2
 10058c0:	4a40      	ldr	r2, [pc, #256]	; (10059c4 <udd_ep_run+0x144>)
 10058c2:	4413      	add	r3, r2
 10058c4:	61bb      	str	r3, [r7, #24]

	if ((!Is_udd_endpoint_enabled(ep))
 10058c6:	4a40      	ldr	r2, [pc, #256]	; (10059c8 <udd_ep_run+0x148>)
 10058c8:	7bfb      	ldrb	r3, [r7, #15]
 10058ca:	330c      	adds	r3, #12
 10058cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 10058d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 10058d4:	2b00      	cmp	r3, #0
 10058d6:	d00f      	beq.n	10058f8 <udd_ep_run+0x78>
			|| ptr_job->b_stall_requested
 10058d8:	69bb      	ldr	r3, [r7, #24]
 10058da:	7c5b      	ldrb	r3, [r3, #17]
 10058dc:	f003 0320 	and.w	r3, r3, #32
 10058e0:	b2db      	uxtb	r3, r3
 10058e2:	2b00      	cmp	r3, #0
 10058e4:	d108      	bne.n	10058f8 <udd_ep_run+0x78>
			|| Is_udd_endpoint_stall_requested(ep)) {
 10058e6:	4a38      	ldr	r2, [pc, #224]	; (10059c8 <udd_ep_run+0x148>)
 10058e8:	7bfb      	ldrb	r3, [r7, #15]
 10058ea:	330c      	adds	r3, #12
 10058ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 10058f0:	f003 0320 	and.w	r3, r3, #32
 10058f4:	2b00      	cmp	r3, #0
 10058f6:	d001      	beq.n	10058fc <udd_ep_run+0x7c>
		return false; // Endpoint is halted
 10058f8:	2300      	movs	r3, #0
 10058fa:	e05f      	b.n	10059bc <udd_ep_run+0x13c>
	}

	flags = cpu_irq_save();
 10058fc:	4b33      	ldr	r3, [pc, #204]	; (10059cc <udd_ep_run+0x14c>)
 10058fe:	4798      	blx	r3
 1005900:	6178      	str	r0, [r7, #20]
	if (ptr_job->busy == true) {
 1005902:	69bb      	ldr	r3, [r7, #24]
 1005904:	7c5b      	ldrb	r3, [r3, #17]
 1005906:	f003 0310 	and.w	r3, r3, #16
 100590a:	b2db      	uxtb	r3, r3
 100590c:	2b00      	cmp	r3, #0
 100590e:	d004      	beq.n	100591a <udd_ep_run+0x9a>
		cpu_irq_restore(flags);
 1005910:	6978      	ldr	r0, [r7, #20]
 1005912:	4b2f      	ldr	r3, [pc, #188]	; (10059d0 <udd_ep_run+0x150>)
 1005914:	4798      	blx	r3
		return false; // Job already on going
 1005916:	2300      	movs	r3, #0
 1005918:	e050      	b.n	10059bc <udd_ep_run+0x13c>
	}
	ptr_job->busy = true;
 100591a:	69ba      	ldr	r2, [r7, #24]
 100591c:	7c53      	ldrb	r3, [r2, #17]
 100591e:	f043 0310 	orr.w	r3, r3, #16
 1005922:	7453      	strb	r3, [r2, #17]
	cpu_irq_restore(flags);
 1005924:	6978      	ldr	r0, [r7, #20]
 1005926:	4b2a      	ldr	r3, [pc, #168]	; (10059d0 <udd_ep_run+0x150>)
 1005928:	4798      	blx	r3

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
 100592a:	69bb      	ldr	r3, [r7, #24]
 100592c:	68ba      	ldr	r2, [r7, #8]
 100592e:	605a      	str	r2, [r3, #4]
	ptr_job->buf_size = buf_size;
 1005930:	69bb      	ldr	r3, [r7, #24]
 1005932:	687a      	ldr	r2, [r7, #4]
 1005934:	609a      	str	r2, [r3, #8]
	ptr_job->buf_cnt = 0;
 1005936:	69bb      	ldr	r3, [r7, #24]
 1005938:	2200      	movs	r2, #0
 100593a:	60da      	str	r2, [r3, #12]
	ptr_job->call_trans = callback;
 100593c:	69bb      	ldr	r3, [r7, #24]
 100593e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 1005940:	601a      	str	r2, [r3, #0]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
 1005942:	7bbb      	ldrb	r3, [r7, #14]
 1005944:	2b00      	cmp	r3, #0
 1005946:	d102      	bne.n	100594e <udd_ep_run+0xce>
 1005948:	687b      	ldr	r3, [r7, #4]
 100594a:	2b00      	cmp	r3, #0
 100594c:	d101      	bne.n	1005952 <udd_ep_run+0xd2>
 100594e:	2301      	movs	r3, #1
 1005950:	e000      	b.n	1005954 <udd_ep_run+0xd4>
 1005952:	2300      	movs	r3, #0
 1005954:	b2db      	uxtb	r3, r3
 1005956:	f003 0301 	and.w	r3, r3, #1
 100595a:	b2d9      	uxtb	r1, r3
 100595c:	69ba      	ldr	r2, [r7, #24]
 100595e:	7c53      	ldrb	r3, [r2, #17]
 1005960:	f361 1386 	bfi	r3, r1, #6, #1
 1005964:	7453      	strb	r3, [r2, #17]
	ptr_job->b_buf_end = false;
 1005966:	69ba      	ldr	r2, [r7, #24]
 1005968:	7c53      	ldrb	r3, [r2, #17]
 100596a:	f36f 13c7 	bfc	r3, #7, #1
 100596e:	7453      	strb	r3, [r2, #17]

	flags = cpu_irq_save();
 1005970:	4b16      	ldr	r3, [pc, #88]	; (10059cc <udd_ep_run+0x14c>)
 1005972:	4798      	blx	r3
 1005974:	6178      	str	r0, [r7, #20]
	udd_enable_endpoint_interrupt(ep);
 1005976:	4a14      	ldr	r2, [pc, #80]	; (10059c8 <udd_ep_run+0x148>)
 1005978:	7bfb      	ldrb	r3, [r7, #15]
 100597a:	2101      	movs	r1, #1
 100597c:	fa01 f303 	lsl.w	r3, r1, r3
 1005980:	6113      	str	r3, [r2, #16]
	// Request first transfer
	if (b_dir_in) {
 1005982:	7ffb      	ldrb	r3, [r7, #31]
 1005984:	2b00      	cmp	r3, #0
 1005986:	d015      	beq.n	10059b4 <udd_ep_run+0x134>
		if (Is_udd_in_pending(ep)) {
 1005988:	4a0f      	ldr	r2, [pc, #60]	; (10059c8 <udd_ep_run+0x148>)
 100598a:	7bfb      	ldrb	r3, [r7, #15]
 100598c:	330c      	adds	r3, #12
 100598e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 1005992:	f003 0311 	and.w	r3, r3, #17
 1005996:	2b00      	cmp	r3, #0
 1005998:	d10c      	bne.n	10059b4 <udd_ep_run+0x134>
			// Append more data (handled in interrupt service)
		} else {
			// Start new, try to fill 1~2 banks before handling status
			if (udd_ep_in_sent(ep, true)) {
 100599a:	7bfb      	ldrb	r3, [r7, #15]
 100599c:	2101      	movs	r1, #1
 100599e:	4618      	mov	r0, r3
 10059a0:	4b0c      	ldr	r3, [pc, #48]	; (10059d4 <udd_ep_run+0x154>)
 10059a2:	4798      	blx	r3
 10059a4:	4603      	mov	r3, r0
 10059a6:	2b00      	cmp	r3, #0
 10059a8:	d004      	beq.n	10059b4 <udd_ep_run+0x134>
				// Over one bank
				udd_ep_in_sent(ep, false);
 10059aa:	7bfb      	ldrb	r3, [r7, #15]
 10059ac:	2100      	movs	r1, #0
 10059ae:	4618      	mov	r0, r3
 10059b0:	4b08      	ldr	r3, [pc, #32]	; (10059d4 <udd_ep_run+0x154>)
 10059b2:	4798      	blx	r3
			}
		}
	} else {
		// Waiting for OUT received interrupt
	}
	cpu_irq_restore(flags);
 10059b4:	6978      	ldr	r0, [r7, #20]
 10059b6:	4b06      	ldr	r3, [pc, #24]	; (10059d0 <udd_ep_run+0x150>)
 10059b8:	4798      	blx	r3

	return true;
 10059ba:	2301      	movs	r3, #1
}
 10059bc:	4618      	mov	r0, r3
 10059be:	3720      	adds	r7, #32
 10059c0:	46bd      	mov	sp, r7
 10059c2:	bd80      	pop	{r7, pc}
 10059c4:	20001ed0 	.word	0x20001ed0
 10059c8:	40044000 	.word	0x40044000
 10059cc:	01004f59 	.word	0x01004f59
 10059d0:	01004fb1 	.word	0x01004fb1
 10059d4:	010067dd 	.word	0x010067dd

010059d8 <udd_ep_abort>:


void udd_ep_abort(udd_ep_id_t ep)
{
 10059d8:	b580      	push	{r7, lr}
 10059da:	b088      	sub	sp, #32
 10059dc:	af00      	add	r7, sp, #0
 10059de:	4603      	mov	r3, r0
 10059e0:	71fb      	strb	r3, [r7, #7]
	bool b_dir_in = ep & USB_EP_DIR_IN;
 10059e2:	79fb      	ldrb	r3, [r7, #7]
 10059e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 10059e8:	2b00      	cmp	r3, #0
 10059ea:	bf14      	ite	ne
 10059ec:	2301      	movne	r3, #1
 10059ee:	2300      	moveq	r3, #0
 10059f0:	77fb      	strb	r3, [r7, #31]
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
 10059f2:	79fb      	ldrb	r3, [r7, #7]
 10059f4:	f003 030f 	and.w	r3, r3, #15
 10059f8:	71fb      	strb	r3, [r7, #7]
	if (USB_DEVICE_MAX_EP < ep)
 10059fa:	79fb      	ldrb	r3, [r7, #7]
 10059fc:	2b03      	cmp	r3, #3
 10059fe:	f200 80e9 	bhi.w	1005bd4 <udd_ep_abort+0x1fc>
		return;

	// Disable interrupts
	flags = cpu_irq_save();
 1005a02:	4b76      	ldr	r3, [pc, #472]	; (1005bdc <udd_ep_abort+0x204>)
 1005a04:	4798      	blx	r3
 1005a06:	61b8      	str	r0, [r7, #24]
	udd_disable_endpoint_interrupt(ep);
 1005a08:	4a75      	ldr	r2, [pc, #468]	; (1005be0 <udd_ep_abort+0x208>)
 1005a0a:	79fb      	ldrb	r3, [r7, #7]
 1005a0c:	2101      	movs	r1, #1
 1005a0e:	fa01 f303 	lsl.w	r3, r1, r3
 1005a12:	6153      	str	r3, [r2, #20]
	cpu_irq_restore(flags);
 1005a14:	69b8      	ldr	r0, [r7, #24]
 1005a16:	4b73      	ldr	r3, [pc, #460]	; (1005be4 <udd_ep_abort+0x20c>)
 1005a18:	4798      	blx	r3
	// Clear pending statuses
	if (b_dir_in) {
 1005a1a:	7ffb      	ldrb	r3, [r7, #31]
 1005a1c:	2b00      	cmp	r3, #0
 1005a1e:	f000 80ae 	beq.w	1005b7e <udd_ep_abort+0x1a6>
		// Kill banks
		if (Is_udd_transmit_ready(ep)) {
 1005a22:	4a6f      	ldr	r2, [pc, #444]	; (1005be0 <udd_ep_abort+0x208>)
 1005a24:	79fb      	ldrb	r3, [r7, #7]
 1005a26:	330c      	adds	r3, #12
 1005a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 1005a2c:	f003 0310 	and.w	r3, r3, #16
 1005a30:	2b00      	cmp	r3, #0
 1005a32:	d073      	beq.n	1005b1c <udd_ep_abort+0x144>
			udd_kill_data_in_fifo(ep,
 1005a34:	79fb      	ldrb	r3, [r7, #7]
 1005a36:	2b00      	cmp	r3, #0
 1005a38:	d052      	beq.n	1005ae0 <udd_ep_abort+0x108>
 1005a3a:	79fb      	ldrb	r3, [r7, #7]
 1005a3c:	2b03      	cmp	r3, #3
 1005a3e:	d04f      	beq.n	1005ae0 <udd_ep_abort+0x108>
 1005a40:	4a67      	ldr	r2, [pc, #412]	; (1005be0 <udd_ep_abort+0x208>)
 1005a42:	79fb      	ldrb	r3, [r7, #7]
 1005a44:	330c      	adds	r3, #12
 1005a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 1005a4a:	617b      	str	r3, [r7, #20]
 1005a4c:	697b      	ldr	r3, [r7, #20]
 1005a4e:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
 1005a52:	617b      	str	r3, [r7, #20]
 1005a54:	697b      	ldr	r3, [r7, #20]
 1005a56:	f023 0310 	bic.w	r3, r3, #16
 1005a5a:	617b      	str	r3, [r7, #20]
 1005a5c:	4960      	ldr	r1, [pc, #384]	; (1005be0 <udd_ep_abort+0x208>)
 1005a5e:	79fb      	ldrb	r3, [r7, #7]
 1005a60:	697a      	ldr	r2, [r7, #20]
 1005a62:	330c      	adds	r3, #12
 1005a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 1005a68:	bf00      	nop
 1005a6a:	4a5d      	ldr	r2, [pc, #372]	; (1005be0 <udd_ep_abort+0x208>)
 1005a6c:	79fb      	ldrb	r3, [r7, #7]
 1005a6e:	330c      	adds	r3, #12
 1005a70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 1005a74:	f003 0310 	and.w	r3, r3, #16
 1005a78:	2b00      	cmp	r3, #0
 1005a7a:	d1f6      	bne.n	1005a6a <udd_ep_abort+0x92>
 1005a7c:	bf00      	nop
 1005a7e:	4a58      	ldr	r2, [pc, #352]	; (1005be0 <udd_ep_abort+0x208>)
 1005a80:	79fb      	ldrb	r3, [r7, #7]
 1005a82:	330c      	adds	r3, #12
 1005a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 1005a88:	f003 0310 	and.w	r3, r3, #16
 1005a8c:	2b00      	cmp	r3, #0
 1005a8e:	d1f6      	bne.n	1005a7e <udd_ep_abort+0xa6>
 1005a90:	4a53      	ldr	r2, [pc, #332]	; (1005be0 <udd_ep_abort+0x208>)
 1005a92:	79fb      	ldrb	r3, [r7, #7]
 1005a94:	330c      	adds	r3, #12
 1005a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 1005a9a:	613b      	str	r3, [r7, #16]
 1005a9c:	693b      	ldr	r3, [r7, #16]
 1005a9e:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
 1005aa2:	613b      	str	r3, [r7, #16]
 1005aa4:	693b      	ldr	r3, [r7, #16]
 1005aa6:	f043 0310 	orr.w	r3, r3, #16
 1005aaa:	613b      	str	r3, [r7, #16]
 1005aac:	494c      	ldr	r1, [pc, #304]	; (1005be0 <udd_ep_abort+0x208>)
 1005aae:	79fb      	ldrb	r3, [r7, #7]
 1005ab0:	693a      	ldr	r2, [r7, #16]
 1005ab2:	330c      	adds	r3, #12
 1005ab4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 1005ab8:	bf00      	nop
 1005aba:	4a49      	ldr	r2, [pc, #292]	; (1005be0 <udd_ep_abort+0x208>)
 1005abc:	79fb      	ldrb	r3, [r7, #7]
 1005abe:	330c      	adds	r3, #12
 1005ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 1005ac4:	f003 0310 	and.w	r3, r3, #16
 1005ac8:	2b10      	cmp	r3, #16
 1005aca:	d1f6      	bne.n	1005aba <udd_ep_abort+0xe2>
 1005acc:	bf00      	nop
 1005ace:	4a44      	ldr	r2, [pc, #272]	; (1005be0 <udd_ep_abort+0x208>)
 1005ad0:	79fb      	ldrb	r3, [r7, #7]
 1005ad2:	330c      	adds	r3, #12
 1005ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 1005ad8:	f003 0310 	and.w	r3, r3, #16
 1005adc:	2b00      	cmp	r3, #0
 1005ade:	d0f6      	beq.n	1005ace <udd_ep_abort+0xf6>
 1005ae0:	4a3f      	ldr	r2, [pc, #252]	; (1005be0 <udd_ep_abort+0x208>)
 1005ae2:	79fb      	ldrb	r3, [r7, #7]
 1005ae4:	330c      	adds	r3, #12
 1005ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 1005aea:	60fb      	str	r3, [r7, #12]
 1005aec:	68fb      	ldr	r3, [r7, #12]
 1005aee:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
 1005af2:	60fb      	str	r3, [r7, #12]
 1005af4:	68fb      	ldr	r3, [r7, #12]
 1005af6:	f023 0310 	bic.w	r3, r3, #16
 1005afa:	60fb      	str	r3, [r7, #12]
 1005afc:	4938      	ldr	r1, [pc, #224]	; (1005be0 <udd_ep_abort+0x208>)
 1005afe:	79fb      	ldrb	r3, [r7, #7]
 1005b00:	68fa      	ldr	r2, [r7, #12]
 1005b02:	330c      	adds	r3, #12
 1005b04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 1005b08:	bf00      	nop
 1005b0a:	4a35      	ldr	r2, [pc, #212]	; (1005be0 <udd_ep_abort+0x208>)
 1005b0c:	79fb      	ldrb	r3, [r7, #7]
 1005b0e:	330c      	adds	r3, #12
 1005b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 1005b14:	f003 0310 	and.w	r3, r3, #16
 1005b18:	2b00      	cmp	r3, #0
 1005b1a:	d1f6      	bne.n	1005b0a <udd_ep_abort+0x132>
					udd_get_endpoint_bank_max_nbr(ep)>1);
		}
		udd_ack_in_sent(ep);
 1005b1c:	4a30      	ldr	r2, [pc, #192]	; (1005be0 <udd_ep_abort+0x208>)
 1005b1e:	79fb      	ldrb	r3, [r7, #7]
 1005b20:	330c      	adds	r3, #12
 1005b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 1005b26:	60bb      	str	r3, [r7, #8]
 1005b28:	68bb      	ldr	r3, [r7, #8]
 1005b2a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
 1005b2e:	60bb      	str	r3, [r7, #8]
 1005b30:	68bb      	ldr	r3, [r7, #8]
 1005b32:	f023 0301 	bic.w	r3, r3, #1
 1005b36:	60bb      	str	r3, [r7, #8]
 1005b38:	4929      	ldr	r1, [pc, #164]	; (1005be0 <udd_ep_abort+0x208>)
 1005b3a:	79fb      	ldrb	r3, [r7, #7]
 1005b3c:	68ba      	ldr	r2, [r7, #8]
 1005b3e:	330c      	adds	r3, #12
 1005b40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 1005b44:	bf00      	nop
 1005b46:	4a26      	ldr	r2, [pc, #152]	; (1005be0 <udd_ep_abort+0x208>)
 1005b48:	79fb      	ldrb	r3, [r7, #7]
 1005b4a:	330c      	adds	r3, #12
 1005b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 1005b50:	f003 0301 	and.w	r3, r3, #1
 1005b54:	2b00      	cmp	r3, #0
 1005b56:	d1f6      	bne.n	1005b46 <udd_ep_abort+0x16e>
		// Reset number of buffered banks
		udd_ep_job[ep - 1].bank = 0;
 1005b58:	79fb      	ldrb	r3, [r7, #7]
 1005b5a:	1e5a      	subs	r2, r3, #1
 1005b5c:	4922      	ldr	r1, [pc, #136]	; (1005be8 <udd_ep_abort+0x210>)
 1005b5e:	4613      	mov	r3, r2
 1005b60:	009b      	lsls	r3, r3, #2
 1005b62:	4413      	add	r3, r2
 1005b64:	009b      	lsls	r3, r3, #2
 1005b66:	440b      	add	r3, r1
 1005b68:	f103 0210 	add.w	r2, r3, #16
 1005b6c:	7853      	ldrb	r3, [r2, #1]
 1005b6e:	f36f 0383 	bfc	r3, #2, #2
 1005b72:	7053      	strb	r3, [r2, #1]
 1005b74:	e00c      	b.n	1005b90 <udd_ep_abort+0x1b8>
	} else {
		// Clear all pending banks statuses
		while(Is_udd_any_bank_received(ep)) {
			udd_ep_ack_out_received(ep);
 1005b76:	79fb      	ldrb	r3, [r7, #7]
 1005b78:	4618      	mov	r0, r3
 1005b7a:	4b1c      	ldr	r3, [pc, #112]	; (1005bec <udd_ep_abort+0x214>)
 1005b7c:	4798      	blx	r3
		while(Is_udd_any_bank_received(ep)) {
 1005b7e:	4a18      	ldr	r2, [pc, #96]	; (1005be0 <udd_ep_abort+0x208>)
 1005b80:	79fb      	ldrb	r3, [r7, #7]
 1005b82:	330c      	adds	r3, #12
 1005b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 1005b88:	f003 0342 	and.w	r3, r3, #66	; 0x42
 1005b8c:	2b00      	cmp	r3, #0
 1005b8e:	d1f2      	bne.n	1005b76 <udd_ep_abort+0x19e>
		}
	}
	// Reset FIFO and data toggle
	udd_reset_endpoint(ep);
 1005b90:	4913      	ldr	r1, [pc, #76]	; (1005be0 <udd_ep_abort+0x208>)
 1005b92:	4b13      	ldr	r3, [pc, #76]	; (1005be0 <udd_ep_abort+0x208>)
 1005b94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 1005b96:	79fb      	ldrb	r3, [r7, #7]
 1005b98:	2001      	movs	r0, #1
 1005b9a:	fa00 f303 	lsl.w	r3, r0, r3
 1005b9e:	4313      	orrs	r3, r2
 1005ba0:	628b      	str	r3, [r1, #40]	; 0x28
 1005ba2:	bf00      	nop
 1005ba4:	4b0e      	ldr	r3, [pc, #56]	; (1005be0 <udd_ep_abort+0x208>)
 1005ba6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 1005ba8:	79fb      	ldrb	r3, [r7, #7]
 1005baa:	2101      	movs	r1, #1
 1005bac:	fa01 f303 	lsl.w	r3, r1, r3
 1005bb0:	4013      	ands	r3, r2
 1005bb2:	2b00      	cmp	r3, #0
 1005bb4:	d0f6      	beq.n	1005ba4 <udd_ep_abort+0x1cc>
 1005bb6:	490a      	ldr	r1, [pc, #40]	; (1005be0 <udd_ep_abort+0x208>)
 1005bb8:	4b09      	ldr	r3, [pc, #36]	; (1005be0 <udd_ep_abort+0x208>)
 1005bba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 1005bbc:	79fb      	ldrb	r3, [r7, #7]
 1005bbe:	2001      	movs	r0, #1
 1005bc0:	fa00 f303 	lsl.w	r3, r0, r3
 1005bc4:	43db      	mvns	r3, r3
 1005bc6:	4013      	ands	r3, r2
 1005bc8:	628b      	str	r3, [r1, #40]	; 0x28
	// Abort job
	udd_ep_abort_job(ep);
 1005bca:	79fb      	ldrb	r3, [r7, #7]
 1005bcc:	4618      	mov	r0, r3
 1005bce:	4b08      	ldr	r3, [pc, #32]	; (1005bf0 <udd_ep_abort+0x218>)
 1005bd0:	4798      	blx	r3
 1005bd2:	e000      	b.n	1005bd6 <udd_ep_abort+0x1fe>
		return;
 1005bd4:	bf00      	nop
}
 1005bd6:	3720      	adds	r7, #32
 1005bd8:	46bd      	mov	sp, r7
 1005bda:	bd80      	pop	{r7, pc}
 1005bdc:	01004f59 	.word	0x01004f59
 1005be0:	40044000 	.word	0x40044000
 1005be4:	01004fb1 	.word	0x01004fb1
 1005be8:	20001ed0 	.word	0x20001ed0
 1005bec:	01006535 	.word	0x01006535
 1005bf0:	01006485 	.word	0x01006485

01005bf4 <udd_reset_ep_ctrl>:

//--------------------------------------------------------
//--- INTERNAL ROUTINES TO MANAGED THE CONTROL ENDPOINT

static void udd_reset_ep_ctrl(void)
{
 1005bf4:	b580      	push	{r7, lr}
 1005bf6:	b084      	sub	sp, #16
 1005bf8:	af00      	add	r7, sp, #0
	irqflags_t flags;

	// Reset USB address to 0
	udd_enable_address();
 1005bfa:	4a25      	ldr	r2, [pc, #148]	; (1005c90 <udd_reset_ep_ctrl+0x9c>)
 1005bfc:	4b24      	ldr	r3, [pc, #144]	; (1005c90 <udd_reset_ep_ctrl+0x9c>)
 1005bfe:	689b      	ldr	r3, [r3, #8]
 1005c00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 1005c04:	6093      	str	r3, [r2, #8]
	udd_configure_address(0);
 1005c06:	4a22      	ldr	r2, [pc, #136]	; (1005c90 <udd_reset_ep_ctrl+0x9c>)
 1005c08:	4b21      	ldr	r3, [pc, #132]	; (1005c90 <udd_reset_ep_ctrl+0x9c>)
 1005c0a:	689b      	ldr	r3, [r3, #8]
 1005c0c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 1005c10:	6093      	str	r3, [r2, #8]
	// Alloc and configure control endpoint in OUT direction
	udd_configure_endpoint(0, USB_EP_TYPE_CONTROL, 0);
 1005c12:	4b1f      	ldr	r3, [pc, #124]	; (1005c90 <udd_reset_ep_ctrl+0x9c>)
 1005c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 1005c16:	60bb      	str	r3, [r7, #8]
 1005c18:	68bb      	ldr	r3, [r7, #8]
 1005c1a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
 1005c1e:	60bb      	str	r3, [r7, #8]
 1005c20:	68bb      	ldr	r3, [r7, #8]
 1005c22:	f423 4307 	bic.w	r3, r3, #34560	; 0x8700
 1005c26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 1005c2a:	60bb      	str	r3, [r7, #8]
 1005c2c:	68bb      	ldr	r3, [r7, #8]
 1005c2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 1005c32:	60bb      	str	r3, [r7, #8]
 1005c34:	4a16      	ldr	r2, [pc, #88]	; (1005c90 <udd_reset_ep_ctrl+0x9c>)
 1005c36:	68bb      	ldr	r3, [r7, #8]
 1005c38:	6313      	str	r3, [r2, #48]	; 0x30
 1005c3a:	bf00      	nop
 1005c3c:	4b14      	ldr	r3, [pc, #80]	; (1005c90 <udd_reset_ep_ctrl+0x9c>)
 1005c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 1005c40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 1005c44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 1005c48:	d1f8      	bne.n	1005c3c <udd_reset_ep_ctrl+0x48>
	udd_enable_endpoint(0);
 1005c4a:	4b11      	ldr	r3, [pc, #68]	; (1005c90 <udd_reset_ep_ctrl+0x9c>)
 1005c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 1005c4e:	607b      	str	r3, [r7, #4]
 1005c50:	687b      	ldr	r3, [r7, #4]
 1005c52:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
 1005c56:	607b      	str	r3, [r7, #4]
 1005c58:	687b      	ldr	r3, [r7, #4]
 1005c5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 1005c5e:	607b      	str	r3, [r7, #4]
 1005c60:	4a0b      	ldr	r2, [pc, #44]	; (1005c90 <udd_reset_ep_ctrl+0x9c>)
 1005c62:	687b      	ldr	r3, [r7, #4]
 1005c64:	6313      	str	r3, [r2, #48]	; 0x30
 1005c66:	bf00      	nop
 1005c68:	4b09      	ldr	r3, [pc, #36]	; (1005c90 <udd_reset_ep_ctrl+0x9c>)
 1005c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 1005c6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 1005c70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 1005c74:	d1f8      	bne.n	1005c68 <udd_reset_ep_ctrl+0x74>

	flags = cpu_irq_save();
 1005c76:	4b07      	ldr	r3, [pc, #28]	; (1005c94 <udd_reset_ep_ctrl+0xa0>)
 1005c78:	4798      	blx	r3
 1005c7a:	60f8      	str	r0, [r7, #12]
	udd_enable_endpoint_interrupt(0);
 1005c7c:	4b04      	ldr	r3, [pc, #16]	; (1005c90 <udd_reset_ep_ctrl+0x9c>)
 1005c7e:	2201      	movs	r2, #1
 1005c80:	611a      	str	r2, [r3, #16]
	cpu_irq_restore(flags);
 1005c82:	68f8      	ldr	r0, [r7, #12]
 1005c84:	4b04      	ldr	r3, [pc, #16]	; (1005c98 <udd_reset_ep_ctrl+0xa4>)
 1005c86:	4798      	blx	r3
}
 1005c88:	bf00      	nop
 1005c8a:	3710      	adds	r7, #16
 1005c8c:	46bd      	mov	sp, r7
 1005c8e:	bd80      	pop	{r7, pc}
 1005c90:	40044000 	.word	0x40044000
 1005c94:	01004f59 	.word	0x01004f59
 1005c98:	01004fb1 	.word	0x01004fb1

01005c9c <udd_ctrl_init>:

static void udd_ctrl_init(void)
{
 1005c9c:	b480      	push	{r7}
 1005c9e:	af00      	add	r7, sp, #0
	udd_g_ctrlreq.callback = NULL;
 1005ca0:	4b07      	ldr	r3, [pc, #28]	; (1005cc0 <udd_ctrl_init+0x24>)
 1005ca2:	2200      	movs	r2, #0
 1005ca4:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
 1005ca6:	4b06      	ldr	r3, [pc, #24]	; (1005cc0 <udd_ctrl_init+0x24>)
 1005ca8:	2200      	movs	r2, #0
 1005caa:	615a      	str	r2, [r3, #20]
	udd_g_ctrlreq.payload_size = 0;
 1005cac:	4b04      	ldr	r3, [pc, #16]	; (1005cc0 <udd_ctrl_init+0x24>)
 1005cae:	2200      	movs	r2, #0
 1005cb0:	819a      	strh	r2, [r3, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
 1005cb2:	4b04      	ldr	r3, [pc, #16]	; (1005cc4 <udd_ctrl_init+0x28>)
 1005cb4:	2200      	movs	r2, #0
 1005cb6:	701a      	strb	r2, [r3, #0]
}
 1005cb8:	bf00      	nop
 1005cba:	46bd      	mov	sp, r7
 1005cbc:	bc80      	pop	{r7}
 1005cbe:	4770      	bx	lr
 1005cc0:	20008304 	.word	0x20008304
 1005cc4:	20001eca 	.word	0x20001eca

01005cc8 <udd_ctrl_setup_received>:


static void udd_ctrl_setup_received(void)
{
 1005cc8:	b580      	push	{r7, lr}
 1005cca:	b086      	sub	sp, #24
 1005ccc:	af00      	add	r7, sp, #0
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
 1005cce:	4b63      	ldr	r3, [pc, #396]	; (1005e5c <udd_ctrl_setup_received+0x194>)
 1005cd0:	781b      	ldrb	r3, [r3, #0]
 1005cd2:	2b00      	cmp	r3, #0
 1005cd4:	d003      	beq.n	1005cde <udd_ctrl_setup_received+0x16>
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
 1005cd6:	4b62      	ldr	r3, [pc, #392]	; (1005e60 <udd_ctrl_setup_received+0x198>)
 1005cd8:	4798      	blx	r3

		// Reinitializes control endpoint management
		udd_ctrl_init();
 1005cda:	4b62      	ldr	r3, [pc, #392]	; (1005e64 <udd_ctrl_setup_received+0x19c>)
 1005cdc:	4798      	blx	r3
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
 1005cde:	4b62      	ldr	r3, [pc, #392]	; (1005e68 <udd_ctrl_setup_received+0x1a0>)
 1005ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 1005ce2:	0c1b      	lsrs	r3, r3, #16
 1005ce4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 1005ce8:	2b08      	cmp	r3, #8
 1005cea:	d017      	beq.n	1005d1c <udd_ctrl_setup_received+0x54>
		udd_ack_setup_received(0);
 1005cec:	4b5e      	ldr	r3, [pc, #376]	; (1005e68 <udd_ctrl_setup_received+0x1a0>)
 1005cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 1005cf0:	613b      	str	r3, [r7, #16]
 1005cf2:	693b      	ldr	r3, [r7, #16]
 1005cf4:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
 1005cf8:	613b      	str	r3, [r7, #16]
 1005cfa:	693b      	ldr	r3, [r7, #16]
 1005cfc:	f023 0304 	bic.w	r3, r3, #4
 1005d00:	613b      	str	r3, [r7, #16]
 1005d02:	4a59      	ldr	r2, [pc, #356]	; (1005e68 <udd_ctrl_setup_received+0x1a0>)
 1005d04:	693b      	ldr	r3, [r7, #16]
 1005d06:	6313      	str	r3, [r2, #48]	; 0x30
 1005d08:	bf00      	nop
 1005d0a:	4b57      	ldr	r3, [pc, #348]	; (1005e68 <udd_ctrl_setup_received+0x1a0>)
 1005d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 1005d0e:	f003 0304 	and.w	r3, r3, #4
 1005d12:	2b00      	cmp	r3, #0
 1005d14:	d1f9      	bne.n	1005d0a <udd_ctrl_setup_received+0x42>
		udd_ctrl_stall_data();
 1005d16:	4b55      	ldr	r3, [pc, #340]	; (1005e6c <udd_ctrl_setup_received+0x1a4>)
 1005d18:	4798      	blx	r3
		return; // Error data number doesn't correspond to SETUP packet
 1005d1a:	e09b      	b.n	1005e54 <udd_ctrl_setup_received+0x18c>
	}
	for (i = 0; i < 8; i++) {
 1005d1c:	2300      	movs	r3, #0
 1005d1e:	75fb      	strb	r3, [r7, #23]
 1005d20:	e009      	b.n	1005d36 <udd_ctrl_setup_received+0x6e>
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
 1005d22:	7dfb      	ldrb	r3, [r7, #23]
 1005d24:	4a52      	ldr	r2, [pc, #328]	; (1005e70 <udd_ctrl_setup_received+0x1a8>)
 1005d26:	4413      	add	r3, r2
			udd_endpoint_fifo_read(0);
 1005d28:	4a4f      	ldr	r2, [pc, #316]	; (1005e68 <udd_ctrl_setup_received+0x1a0>)
 1005d2a:	6d12      	ldr	r2, [r2, #80]	; 0x50
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
 1005d2c:	b2d2      	uxtb	r2, r2
 1005d2e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 1005d30:	7dfb      	ldrb	r3, [r7, #23]
 1005d32:	3301      	adds	r3, #1
 1005d34:	75fb      	strb	r3, [r7, #23]
 1005d36:	7dfb      	ldrb	r3, [r7, #23]
 1005d38:	2b07      	cmp	r3, #7
 1005d3a:	d9f2      	bls.n	1005d22 <udd_ctrl_setup_received+0x5a>
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
 1005d3c:	4b4c      	ldr	r3, [pc, #304]	; (1005e70 <udd_ctrl_setup_received+0x1a8>)
 1005d3e:	885a      	ldrh	r2, [r3, #2]
 1005d40:	4b4b      	ldr	r3, [pc, #300]	; (1005e70 <udd_ctrl_setup_received+0x1a8>)
 1005d42:	805a      	strh	r2, [r3, #2]
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
 1005d44:	4b4a      	ldr	r3, [pc, #296]	; (1005e70 <udd_ctrl_setup_received+0x1a8>)
 1005d46:	889a      	ldrh	r2, [r3, #4]
 1005d48:	4b49      	ldr	r3, [pc, #292]	; (1005e70 <udd_ctrl_setup_received+0x1a8>)
 1005d4a:	809a      	strh	r2, [r3, #4]
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
 1005d4c:	4b48      	ldr	r3, [pc, #288]	; (1005e70 <udd_ctrl_setup_received+0x1a8>)
 1005d4e:	88da      	ldrh	r2, [r3, #6]
 1005d50:	4b47      	ldr	r3, [pc, #284]	; (1005e70 <udd_ctrl_setup_received+0x1a8>)
 1005d52:	80da      	strh	r2, [r3, #6]

	// Decode setup request
	if (udc_process_setup() == false) {
 1005d54:	4b47      	ldr	r3, [pc, #284]	; (1005e74 <udd_ctrl_setup_received+0x1ac>)
 1005d56:	4798      	blx	r3
 1005d58:	4603      	mov	r3, r0
 1005d5a:	f083 0301 	eor.w	r3, r3, #1
 1005d5e:	b2db      	uxtb	r3, r3
 1005d60:	2b00      	cmp	r3, #0
 1005d62:	d017      	beq.n	1005d94 <udd_ctrl_setup_received+0xcc>
		// Setup request unknown then stall it
		udd_ack_setup_received(0);
 1005d64:	4b40      	ldr	r3, [pc, #256]	; (1005e68 <udd_ctrl_setup_received+0x1a0>)
 1005d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 1005d68:	60fb      	str	r3, [r7, #12]
 1005d6a:	68fb      	ldr	r3, [r7, #12]
 1005d6c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
 1005d70:	60fb      	str	r3, [r7, #12]
 1005d72:	68fb      	ldr	r3, [r7, #12]
 1005d74:	f023 0304 	bic.w	r3, r3, #4
 1005d78:	60fb      	str	r3, [r7, #12]
 1005d7a:	4a3b      	ldr	r2, [pc, #236]	; (1005e68 <udd_ctrl_setup_received+0x1a0>)
 1005d7c:	68fb      	ldr	r3, [r7, #12]
 1005d7e:	6313      	str	r3, [r2, #48]	; 0x30
 1005d80:	bf00      	nop
 1005d82:	4b39      	ldr	r3, [pc, #228]	; (1005e68 <udd_ctrl_setup_received+0x1a0>)
 1005d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 1005d86:	f003 0304 	and.w	r3, r3, #4
 1005d8a:	2b00      	cmp	r3, #0
 1005d8c:	d1f9      	bne.n	1005d82 <udd_ctrl_setup_received+0xba>
		udd_ctrl_stall_data();
 1005d8e:	4b37      	ldr	r3, [pc, #220]	; (1005e6c <udd_ctrl_setup_received+0x1a4>)
 1005d90:	4798      	blx	r3
		return;
 1005d92:	e05f      	b.n	1005e54 <udd_ctrl_setup_received+0x18c>
	}

	if (Udd_setup_is_in()) {
 1005d94:	4b36      	ldr	r3, [pc, #216]	; (1005e70 <udd_ctrl_setup_received+0x1a8>)
 1005d96:	781b      	ldrb	r3, [r3, #0]
 1005d98:	b25b      	sxtb	r3, r3
 1005d9a:	2b00      	cmp	r3, #0
 1005d9c:	da35      	bge.n	1005e0a <udd_ctrl_setup_received+0x142>
		// Set DIR
		udd_set_endpoint_direction_in(0);
 1005d9e:	4b32      	ldr	r3, [pc, #200]	; (1005e68 <udd_ctrl_setup_received+0x1a0>)
 1005da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 1005da2:	60bb      	str	r3, [r7, #8]
 1005da4:	68bb      	ldr	r3, [r7, #8]
 1005da6:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
 1005daa:	60bb      	str	r3, [r7, #8]
 1005dac:	68bb      	ldr	r3, [r7, #8]
 1005dae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 1005db2:	60bb      	str	r3, [r7, #8]
 1005db4:	4a2c      	ldr	r2, [pc, #176]	; (1005e68 <udd_ctrl_setup_received+0x1a0>)
 1005db6:	68bb      	ldr	r3, [r7, #8]
 1005db8:	6313      	str	r3, [r2, #48]	; 0x30
 1005dba:	bf00      	nop
 1005dbc:	4b2a      	ldr	r3, [pc, #168]	; (1005e68 <udd_ctrl_setup_received+0x1a0>)
 1005dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 1005dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 1005dc4:	2b80      	cmp	r3, #128	; 0x80
 1005dc6:	d1f9      	bne.n	1005dbc <udd_ctrl_setup_received+0xf4>
		udd_ack_setup_received(0);
 1005dc8:	4b27      	ldr	r3, [pc, #156]	; (1005e68 <udd_ctrl_setup_received+0x1a0>)
 1005dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 1005dcc:	607b      	str	r3, [r7, #4]
 1005dce:	687b      	ldr	r3, [r7, #4]
 1005dd0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
 1005dd4:	607b      	str	r3, [r7, #4]
 1005dd6:	687b      	ldr	r3, [r7, #4]
 1005dd8:	f023 0304 	bic.w	r3, r3, #4
 1005ddc:	607b      	str	r3, [r7, #4]
 1005dde:	4a22      	ldr	r2, [pc, #136]	; (1005e68 <udd_ctrl_setup_received+0x1a0>)
 1005de0:	687b      	ldr	r3, [r7, #4]
 1005de2:	6313      	str	r3, [r2, #48]	; 0x30
 1005de4:	bf00      	nop
 1005de6:	4b20      	ldr	r3, [pc, #128]	; (1005e68 <udd_ctrl_setup_received+0x1a0>)
 1005de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 1005dea:	f003 0304 	and.w	r3, r3, #4
 1005dee:	2b00      	cmp	r3, #0
 1005df0:	d1f9      	bne.n	1005de6 <udd_ctrl_setup_received+0x11e>
		// IN data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
 1005df2:	4b21      	ldr	r3, [pc, #132]	; (1005e78 <udd_ctrl_setup_received+0x1b0>)
 1005df4:	2200      	movs	r2, #0
 1005df6:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_nb_trans = 0;
 1005df8:	4b20      	ldr	r3, [pc, #128]	; (1005e7c <udd_ctrl_setup_received+0x1b4>)
 1005dfa:	2200      	movs	r2, #0
 1005dfc:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
 1005dfe:	4b17      	ldr	r3, [pc, #92]	; (1005e5c <udd_ctrl_setup_received+0x194>)
 1005e00:	2202      	movs	r2, #2
 1005e02:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
 1005e04:	4b1e      	ldr	r3, [pc, #120]	; (1005e80 <udd_ctrl_setup_received+0x1b8>)
 1005e06:	4798      	blx	r3
 1005e08:	e024      	b.n	1005e54 <udd_ctrl_setup_received+0x18c>
	} else {
		udd_ack_setup_received(0);
 1005e0a:	4b17      	ldr	r3, [pc, #92]	; (1005e68 <udd_ctrl_setup_received+0x1a0>)
 1005e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 1005e0e:	603b      	str	r3, [r7, #0]
 1005e10:	683b      	ldr	r3, [r7, #0]
 1005e12:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
 1005e16:	603b      	str	r3, [r7, #0]
 1005e18:	683b      	ldr	r3, [r7, #0]
 1005e1a:	f023 0304 	bic.w	r3, r3, #4
 1005e1e:	603b      	str	r3, [r7, #0]
 1005e20:	4a11      	ldr	r2, [pc, #68]	; (1005e68 <udd_ctrl_setup_received+0x1a0>)
 1005e22:	683b      	ldr	r3, [r7, #0]
 1005e24:	6313      	str	r3, [r2, #48]	; 0x30
 1005e26:	bf00      	nop
 1005e28:	4b0f      	ldr	r3, [pc, #60]	; (1005e68 <udd_ctrl_setup_received+0x1a0>)
 1005e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 1005e2c:	f003 0304 	and.w	r3, r3, #4
 1005e30:	2b00      	cmp	r3, #0
 1005e32:	d1f9      	bne.n	1005e28 <udd_ctrl_setup_received+0x160>
		if (0 == udd_g_ctrlreq.req.wLength) {
 1005e34:	4b0e      	ldr	r3, [pc, #56]	; (1005e70 <udd_ctrl_setup_received+0x1a8>)
 1005e36:	88db      	ldrh	r3, [r3, #6]
 1005e38:	2b00      	cmp	r3, #0
 1005e3a:	d102      	bne.n	1005e42 <udd_ctrl_setup_received+0x17a>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
 1005e3c:	4b11      	ldr	r3, [pc, #68]	; (1005e84 <udd_ctrl_setup_received+0x1bc>)
 1005e3e:	4798      	blx	r3
			return;
 1005e40:	e008      	b.n	1005e54 <udd_ctrl_setup_received+0x18c>
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
 1005e42:	4b0d      	ldr	r3, [pc, #52]	; (1005e78 <udd_ctrl_setup_received+0x1b0>)
 1005e44:	2200      	movs	r2, #0
 1005e46:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_nb_trans = 0;
 1005e48:	4b0c      	ldr	r3, [pc, #48]	; (1005e7c <udd_ctrl_setup_received+0x1b4>)
 1005e4a:	2200      	movs	r2, #0
 1005e4c:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
 1005e4e:	4b03      	ldr	r3, [pc, #12]	; (1005e5c <udd_ctrl_setup_received+0x194>)
 1005e50:	2201      	movs	r2, #1
 1005e52:	701a      	strb	r2, [r3, #0]
	}
}
 1005e54:	3718      	adds	r7, #24
 1005e56:	46bd      	mov	sp, r7
 1005e58:	bd80      	pop	{r7, pc}
 1005e5a:	bf00      	nop
 1005e5c:	20001eca 	.word	0x20001eca
 1005e60:	0100637d 	.word	0x0100637d
 1005e64:	01005c9d 	.word	0x01005c9d
 1005e68:	40044000 	.word	0x40044000
 1005e6c:	010062d5 	.word	0x010062d5
 1005e70:	20008304 	.word	0x20008304
 1005e74:	01003c25 	.word	0x01003c25
 1005e78:	20001ecc 	.word	0x20001ecc
 1005e7c:	20001ece 	.word	0x20001ece
 1005e80:	01005e89 	.word	0x01005e89
 1005e84:	0100631d 	.word	0x0100631d

01005e88 <udd_ctrl_in_sent>:


static void udd_ctrl_in_sent(void)
{
 1005e88:	b580      	push	{r7, lr}
 1005e8a:	b088      	sub	sp, #32
 1005e8c:	af00      	add	r7, sp, #0
	uint16_t nb_remain;
	uint8_t i;
	uint8_t *ptr_src;
	irqflags_t flags;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
 1005e8e:	4b71      	ldr	r3, [pc, #452]	; (1006054 <udd_ctrl_in_sent+0x1cc>)
 1005e90:	781b      	ldrb	r3, [r3, #0]
 1005e92:	2b03      	cmp	r3, #3
 1005e94:	d119      	bne.n	1005eca <udd_ctrl_in_sent+0x42>
		// Ack
		udd_ack_in_sent(0);
 1005e96:	4b70      	ldr	r3, [pc, #448]	; (1006058 <udd_ctrl_in_sent+0x1d0>)
 1005e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 1005e9a:	613b      	str	r3, [r7, #16]
 1005e9c:	693b      	ldr	r3, [r7, #16]
 1005e9e:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
 1005ea2:	613b      	str	r3, [r7, #16]
 1005ea4:	693b      	ldr	r3, [r7, #16]
 1005ea6:	f023 0301 	bic.w	r3, r3, #1
 1005eaa:	613b      	str	r3, [r7, #16]
 1005eac:	4a6a      	ldr	r2, [pc, #424]	; (1006058 <udd_ctrl_in_sent+0x1d0>)
 1005eae:	693b      	ldr	r3, [r7, #16]
 1005eb0:	6313      	str	r3, [r2, #48]	; 0x30
 1005eb2:	bf00      	nop
 1005eb4:	4b68      	ldr	r3, [pc, #416]	; (1006058 <udd_ctrl_in_sent+0x1d0>)
 1005eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 1005eb8:	f003 0301 	and.w	r3, r3, #1
 1005ebc:	2b00      	cmp	r3, #0
 1005ebe:	d1f9      	bne.n	1005eb4 <udd_ctrl_in_sent+0x2c>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
 1005ec0:	4b66      	ldr	r3, [pc, #408]	; (100605c <udd_ctrl_in_sent+0x1d4>)
 1005ec2:	4798      	blx	r3
		// Reinitializes control endpoint management
		udd_ctrl_init();
 1005ec4:	4b66      	ldr	r3, [pc, #408]	; (1006060 <udd_ctrl_in_sent+0x1d8>)
 1005ec6:	4798      	blx	r3
		return;
 1005ec8:	e0c1      	b.n	100604e <udd_ctrl_in_sent+0x1c6>
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
 1005eca:	4b66      	ldr	r3, [pc, #408]	; (1006064 <udd_ctrl_in_sent+0x1dc>)
 1005ecc:	899a      	ldrh	r2, [r3, #12]
 1005ece:	4b66      	ldr	r3, [pc, #408]	; (1006068 <udd_ctrl_in_sent+0x1e0>)
 1005ed0:	881b      	ldrh	r3, [r3, #0]
 1005ed2:	1ad3      	subs	r3, r2, r3
 1005ed4:	83fb      	strh	r3, [r7, #30]
	if (0 == nb_remain) {
 1005ed6:	8bfb      	ldrh	r3, [r7, #30]
 1005ed8:	2b00      	cmp	r3, #0
 1005eda:	d13c      	bne.n	1005f56 <udd_ctrl_in_sent+0xce>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous payload buffer
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
 1005edc:	4b63      	ldr	r3, [pc, #396]	; (100606c <udd_ctrl_in_sent+0x1e4>)
 1005ede:	881a      	ldrh	r2, [r3, #0]
 1005ee0:	4b61      	ldr	r3, [pc, #388]	; (1006068 <udd_ctrl_in_sent+0x1e0>)
 1005ee2:	881b      	ldrh	r3, [r3, #0]
 1005ee4:	4413      	add	r3, r2
 1005ee6:	b29a      	uxth	r2, r3
 1005ee8:	4b60      	ldr	r3, [pc, #384]	; (100606c <udd_ctrl_in_sent+0x1e4>)
 1005eea:	801a      	strh	r2, [r3, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
 1005eec:	4b5d      	ldr	r3, [pc, #372]	; (1006064 <udd_ctrl_in_sent+0x1dc>)
 1005eee:	88da      	ldrh	r2, [r3, #6]
 1005ef0:	4b5e      	ldr	r3, [pc, #376]	; (100606c <udd_ctrl_in_sent+0x1e4>)
 1005ef2:	881b      	ldrh	r3, [r3, #0]
 1005ef4:	429a      	cmp	r2, r3
 1005ef6:	d003      	beq.n	1005f00 <udd_ctrl_in_sent+0x78>
				|| b_shortpacket) {
 1005ef8:	4b5d      	ldr	r3, [pc, #372]	; (1006070 <udd_ctrl_in_sent+0x1e8>)
 1005efa:	781b      	ldrb	r3, [r3, #0]
 1005efc:	2b00      	cmp	r3, #0
 1005efe:	d017      	beq.n	1005f30 <udd_ctrl_in_sent+0xa8>
			// All data requested are transfered or a short packet has been sent
			// then it is the end of data phase.
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
 1005f00:	4b5c      	ldr	r3, [pc, #368]	; (1006074 <udd_ctrl_in_sent+0x1ec>)
 1005f02:	4798      	blx	r3
			udd_ack_in_sent(0);
 1005f04:	4b54      	ldr	r3, [pc, #336]	; (1006058 <udd_ctrl_in_sent+0x1d0>)
 1005f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 1005f08:	60fb      	str	r3, [r7, #12]
 1005f0a:	68fb      	ldr	r3, [r7, #12]
 1005f0c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
 1005f10:	60fb      	str	r3, [r7, #12]
 1005f12:	68fb      	ldr	r3, [r7, #12]
 1005f14:	f023 0301 	bic.w	r3, r3, #1
 1005f18:	60fb      	str	r3, [r7, #12]
 1005f1a:	4a4f      	ldr	r2, [pc, #316]	; (1006058 <udd_ctrl_in_sent+0x1d0>)
 1005f1c:	68fb      	ldr	r3, [r7, #12]
 1005f1e:	6313      	str	r3, [r2, #48]	; 0x30
 1005f20:	bf00      	nop
 1005f22:	4b4d      	ldr	r3, [pc, #308]	; (1006058 <udd_ctrl_in_sent+0x1d0>)
 1005f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 1005f26:	f003 0301 	and.w	r3, r3, #1
 1005f2a:	2b00      	cmp	r3, #0
 1005f2c:	d1f9      	bne.n	1005f22 <udd_ctrl_in_sent+0x9a>
			return;
 1005f2e:	e08e      	b.n	100604e <udd_ctrl_in_sent+0x1c6>
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
 1005f30:	4b4c      	ldr	r3, [pc, #304]	; (1006064 <udd_ctrl_in_sent+0x1dc>)
 1005f32:	695b      	ldr	r3, [r3, #20]
 1005f34:	2b00      	cmp	r3, #0
 1005f36:	d00e      	beq.n	1005f56 <udd_ctrl_in_sent+0xce>
				|| (!udd_g_ctrlreq.over_under_run())) {
 1005f38:	4b4a      	ldr	r3, [pc, #296]	; (1006064 <udd_ctrl_in_sent+0x1dc>)
 1005f3a:	695b      	ldr	r3, [r3, #20]
 1005f3c:	4798      	blx	r3
 1005f3e:	4603      	mov	r3, r0
 1005f40:	f083 0301 	eor.w	r3, r3, #1
 1005f44:	b2db      	uxtb	r3, r3
 1005f46:	2b00      	cmp	r3, #0
 1005f48:	d105      	bne.n	1005f56 <udd_ctrl_in_sent+0xce>
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_nb_trans = 0;
 1005f4a:	4b47      	ldr	r3, [pc, #284]	; (1006068 <udd_ctrl_in_sent+0x1e0>)
 1005f4c:	2200      	movs	r2, #0
 1005f4e:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
 1005f50:	4b44      	ldr	r3, [pc, #272]	; (1006064 <udd_ctrl_in_sent+0x1dc>)
 1005f52:	899b      	ldrh	r3, [r3, #12]
 1005f54:	83fb      	strh	r3, [r7, #30]
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
 1005f56:	8bfb      	ldrh	r3, [r7, #30]
 1005f58:	2b3f      	cmp	r3, #63	; 0x3f
 1005f5a:	d905      	bls.n	1005f68 <udd_ctrl_in_sent+0xe0>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
 1005f5c:	2340      	movs	r3, #64	; 0x40
 1005f5e:	83fb      	strh	r3, [r7, #30]
		b_shortpacket = false;
 1005f60:	4b43      	ldr	r3, [pc, #268]	; (1006070 <udd_ctrl_in_sent+0x1e8>)
 1005f62:	2200      	movs	r2, #0
 1005f64:	701a      	strb	r2, [r3, #0]
 1005f66:	e002      	b.n	1005f6e <udd_ctrl_in_sent+0xe6>
	} else {
		b_shortpacket = true;
 1005f68:	4b41      	ldr	r3, [pc, #260]	; (1006070 <udd_ctrl_in_sent+0x1e8>)
 1005f6a:	2201      	movs	r2, #1
 1005f6c:	701a      	strb	r2, [r3, #0]
	}
	// Fill buffer of endpoint control
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
 1005f6e:	4b3d      	ldr	r3, [pc, #244]	; (1006064 <udd_ctrl_in_sent+0x1dc>)
 1005f70:	689b      	ldr	r3, [r3, #8]
 1005f72:	4a3d      	ldr	r2, [pc, #244]	; (1006068 <udd_ctrl_in_sent+0x1e0>)
 1005f74:	8812      	ldrh	r2, [r2, #0]
 1005f76:	4413      	add	r3, r2
 1005f78:	61bb      	str	r3, [r7, #24]
	// The IN data don't must be written in endpoint 0 DPRAM during
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is received the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
 1005f7a:	4b3f      	ldr	r3, [pc, #252]	; (1006078 <udd_ctrl_in_sent+0x1f0>)
 1005f7c:	4798      	blx	r3
 1005f7e:	6178      	str	r0, [r7, #20]
	if (Is_udd_bank0_received(0)) {
 1005f80:	4b35      	ldr	r3, [pc, #212]	; (1006058 <udd_ctrl_in_sent+0x1d0>)
 1005f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 1005f84:	f003 0302 	and.w	r3, r3, #2
 1005f88:	2b00      	cmp	r3, #0
 1005f8a:	d01b      	beq.n	1005fc4 <udd_ctrl_in_sent+0x13c>
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
 1005f8c:	6978      	ldr	r0, [r7, #20]
 1005f8e:	4b3b      	ldr	r3, [pc, #236]	; (100607c <udd_ctrl_in_sent+0x1f4>)
 1005f90:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
 1005f92:	4b30      	ldr	r3, [pc, #192]	; (1006054 <udd_ctrl_in_sent+0x1cc>)
 1005f94:	2204      	movs	r2, #4
 1005f96:	701a      	strb	r2, [r3, #0]
		udd_ack_in_sent(0);
 1005f98:	4b2f      	ldr	r3, [pc, #188]	; (1006058 <udd_ctrl_in_sent+0x1d0>)
 1005f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 1005f9c:	60bb      	str	r3, [r7, #8]
 1005f9e:	68bb      	ldr	r3, [r7, #8]
 1005fa0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
 1005fa4:	60bb      	str	r3, [r7, #8]
 1005fa6:	68bb      	ldr	r3, [r7, #8]
 1005fa8:	f023 0301 	bic.w	r3, r3, #1
 1005fac:	60bb      	str	r3, [r7, #8]
 1005fae:	4a2a      	ldr	r2, [pc, #168]	; (1006058 <udd_ctrl_in_sent+0x1d0>)
 1005fb0:	68bb      	ldr	r3, [r7, #8]
 1005fb2:	6313      	str	r3, [r2, #48]	; 0x30
 1005fb4:	bf00      	nop
 1005fb6:	4b28      	ldr	r3, [pc, #160]	; (1006058 <udd_ctrl_in_sent+0x1d0>)
 1005fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 1005fba:	f003 0301 	and.w	r3, r3, #1
 1005fbe:	2b00      	cmp	r3, #0
 1005fc0:	d1f9      	bne.n	1005fb6 <udd_ctrl_in_sent+0x12e>
		return; // Exit of IN DATA phase
 1005fc2:	e044      	b.n	100604e <udd_ctrl_in_sent+0x1c6>
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
 1005fc4:	2300      	movs	r3, #0
 1005fc6:	777b      	strb	r3, [r7, #29]
 1005fc8:	e008      	b.n	1005fdc <udd_ctrl_in_sent+0x154>
		udd_endpoint_fifo_write(0, *ptr_src++);
 1005fca:	4923      	ldr	r1, [pc, #140]	; (1006058 <udd_ctrl_in_sent+0x1d0>)
 1005fcc:	69bb      	ldr	r3, [r7, #24]
 1005fce:	1c5a      	adds	r2, r3, #1
 1005fd0:	61ba      	str	r2, [r7, #24]
 1005fd2:	781b      	ldrb	r3, [r3, #0]
 1005fd4:	650b      	str	r3, [r1, #80]	; 0x50
	for (i = 0; i < nb_remain; i++) {
 1005fd6:	7f7b      	ldrb	r3, [r7, #29]
 1005fd8:	3301      	adds	r3, #1
 1005fda:	777b      	strb	r3, [r7, #29]
 1005fdc:	7f7b      	ldrb	r3, [r7, #29]
 1005fde:	b29b      	uxth	r3, r3
 1005fe0:	8bfa      	ldrh	r2, [r7, #30]
 1005fe2:	429a      	cmp	r2, r3
 1005fe4:	d8f1      	bhi.n	1005fca <udd_ctrl_in_sent+0x142>
	}
	udd_ctrl_payload_nb_trans += nb_remain;
 1005fe6:	4b20      	ldr	r3, [pc, #128]	; (1006068 <udd_ctrl_in_sent+0x1e0>)
 1005fe8:	881a      	ldrh	r2, [r3, #0]
 1005fea:	8bfb      	ldrh	r3, [r7, #30]
 1005fec:	4413      	add	r3, r2
 1005fee:	b29a      	uxth	r2, r3
 1005ff0:	4b1d      	ldr	r3, [pc, #116]	; (1006068 <udd_ctrl_in_sent+0x1e0>)
 1005ff2:	801a      	strh	r2, [r3, #0]
	// Validate and send the data available in the control endpoint buffer
	udd_set_transmit_ready(0);
 1005ff4:	4b18      	ldr	r3, [pc, #96]	; (1006058 <udd_ctrl_in_sent+0x1d0>)
 1005ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 1005ff8:	607b      	str	r3, [r7, #4]
 1005ffa:	687b      	ldr	r3, [r7, #4]
 1005ffc:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
 1006000:	607b      	str	r3, [r7, #4]
 1006002:	687b      	ldr	r3, [r7, #4]
 1006004:	f043 0310 	orr.w	r3, r3, #16
 1006008:	607b      	str	r3, [r7, #4]
 100600a:	4a13      	ldr	r2, [pc, #76]	; (1006058 <udd_ctrl_in_sent+0x1d0>)
 100600c:	687b      	ldr	r3, [r7, #4]
 100600e:	6313      	str	r3, [r2, #48]	; 0x30
 1006010:	bf00      	nop
 1006012:	4b11      	ldr	r3, [pc, #68]	; (1006058 <udd_ctrl_in_sent+0x1d0>)
 1006014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 1006016:	f003 0310 	and.w	r3, r3, #16
 100601a:	2b10      	cmp	r3, #16
 100601c:	d1f9      	bne.n	1006012 <udd_ctrl_in_sent+0x18a>
	udd_ack_in_sent(0);
 100601e:	4b0e      	ldr	r3, [pc, #56]	; (1006058 <udd_ctrl_in_sent+0x1d0>)
 1006020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 1006022:	603b      	str	r3, [r7, #0]
 1006024:	683b      	ldr	r3, [r7, #0]
 1006026:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
 100602a:	603b      	str	r3, [r7, #0]
 100602c:	683b      	ldr	r3, [r7, #0]
 100602e:	f023 0301 	bic.w	r3, r3, #1
 1006032:	603b      	str	r3, [r7, #0]
 1006034:	4a08      	ldr	r2, [pc, #32]	; (1006058 <udd_ctrl_in_sent+0x1d0>)
 1006036:	683b      	ldr	r3, [r7, #0]
 1006038:	6313      	str	r3, [r2, #48]	; 0x30
 100603a:	bf00      	nop
 100603c:	4b06      	ldr	r3, [pc, #24]	; (1006058 <udd_ctrl_in_sent+0x1d0>)
 100603e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 1006040:	f003 0301 	and.w	r3, r3, #1
 1006044:	2b00      	cmp	r3, #0
 1006046:	d1f9      	bne.n	100603c <udd_ctrl_in_sent+0x1b4>

	// In case of abort of DATA IN phase, no need to enable nak OUT interrupt
	// because OUT endpoint is already free and ZLP OUT accepted.
	cpu_irq_restore(flags);
 1006048:	6978      	ldr	r0, [r7, #20]
 100604a:	4b0c      	ldr	r3, [pc, #48]	; (100607c <udd_ctrl_in_sent+0x1f4>)
 100604c:	4798      	blx	r3
}
 100604e:	3720      	adds	r7, #32
 1006050:	46bd      	mov	sp, r7
 1006052:	bd80      	pop	{r7, pc}
 1006054:	20001eca 	.word	0x20001eca
 1006058:	40044000 	.word	0x40044000
 100605c:	0100637d 	.word	0x0100637d
 1006060:	01005c9d 	.word	0x01005c9d
 1006064:	20008304 	.word	0x20008304
 1006068:	20001ece 	.word	0x20001ece
 100606c:	20001ecc 	.word	0x20001ecc
 1006070:	20001f0c 	.word	0x20001f0c
 1006074:	01006365 	.word	0x01006365
 1006078:	01004f59 	.word	0x01004f59
 100607c:	01004fb1 	.word	0x01004fb1

01006080 <udd_ctrl_out_received>:


static void udd_ctrl_out_received(void)
{
 1006080:	b580      	push	{r7, lr}
 1006082:	b088      	sub	sp, #32
 1006084:	af00      	add	r7, sp, #0
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
 1006086:	4b8a      	ldr	r3, [pc, #552]	; (10062b0 <udd_ctrl_out_received+0x230>)
 1006088:	781b      	ldrb	r3, [r3, #0]
 100608a:	2b01      	cmp	r3, #1
 100608c:	d024      	beq.n	10060d8 <udd_ctrl_out_received+0x58>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
 100608e:	4b88      	ldr	r3, [pc, #544]	; (10062b0 <udd_ctrl_out_received+0x230>)
 1006090:	781b      	ldrb	r3, [r3, #0]
 1006092:	2b02      	cmp	r3, #2
 1006094:	d003      	beq.n	100609e <udd_ctrl_out_received+0x1e>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
 1006096:	4b86      	ldr	r3, [pc, #536]	; (10062b0 <udd_ctrl_out_received+0x230>)
 1006098:	781b      	ldrb	r3, [r3, #0]
 100609a:	2b04      	cmp	r3, #4
 100609c:	d102      	bne.n	10060a4 <udd_ctrl_out_received+0x24>
				udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
 100609e:	4b85      	ldr	r3, [pc, #532]	; (10062b4 <udd_ctrl_out_received+0x234>)
 10060a0:	4798      	blx	r3
 10060a2:	e001      	b.n	10060a8 <udd_ctrl_out_received+0x28>
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
 10060a4:	4b84      	ldr	r3, [pc, #528]	; (10062b8 <udd_ctrl_out_received+0x238>)
 10060a6:	4798      	blx	r3
		}
		udd_ack_bank0_received(0);
 10060a8:	4b84      	ldr	r3, [pc, #528]	; (10062bc <udd_ctrl_out_received+0x23c>)
 10060aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 10060ac:	617b      	str	r3, [r7, #20]
 10060ae:	697b      	ldr	r3, [r7, #20]
 10060b0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
 10060b4:	617b      	str	r3, [r7, #20]
 10060b6:	697b      	ldr	r3, [r7, #20]
 10060b8:	f023 0302 	bic.w	r3, r3, #2
 10060bc:	617b      	str	r3, [r7, #20]
 10060be:	4a7f      	ldr	r2, [pc, #508]	; (10062bc <udd_ctrl_out_received+0x23c>)
 10060c0:	697b      	ldr	r3, [r7, #20]
 10060c2:	6313      	str	r3, [r2, #48]	; 0x30
 10060c4:	bf00      	nop
 10060c6:	4b7d      	ldr	r3, [pc, #500]	; (10062bc <udd_ctrl_out_received+0x23c>)
 10060c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 10060ca:	f003 0302 	and.w	r3, r3, #2
 10060ce:	2b00      	cmp	r3, #0
 10060d0:	d1f9      	bne.n	10060c6 <udd_ctrl_out_received+0x46>
		// Reinitializes control endpoint management
		udd_ctrl_init();
 10060d2:	4b7b      	ldr	r3, [pc, #492]	; (10062c0 <udd_ctrl_out_received+0x240>)
 10060d4:	4798      	blx	r3
		return;
 10060d6:	e0e7      	b.n	10062a8 <udd_ctrl_out_received+0x228>
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
 10060d8:	4b78      	ldr	r3, [pc, #480]	; (10062bc <udd_ctrl_out_received+0x23c>)
 10060da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 10060dc:	0c1b      	lsrs	r3, r3, #16
 10060de:	b29b      	uxth	r3, r3
 10060e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 10060e4:	83bb      	strh	r3, [r7, #28]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
 10060e6:	4b77      	ldr	r3, [pc, #476]	; (10062c4 <udd_ctrl_out_received+0x244>)
 10060e8:	899b      	ldrh	r3, [r3, #12]
 10060ea:	461a      	mov	r2, r3
 10060ec:	4b76      	ldr	r3, [pc, #472]	; (10062c8 <udd_ctrl_out_received+0x248>)
 10060ee:	881b      	ldrh	r3, [r3, #0]
 10060f0:	4619      	mov	r1, r3
 10060f2:	8bbb      	ldrh	r3, [r7, #28]
 10060f4:	440b      	add	r3, r1
 10060f6:	429a      	cmp	r2, r3
 10060f8:	da05      	bge.n	1006106 <udd_ctrl_out_received+0x86>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
 10060fa:	4b72      	ldr	r3, [pc, #456]	; (10062c4 <udd_ctrl_out_received+0x244>)
 10060fc:	899a      	ldrh	r2, [r3, #12]
 10060fe:	4b72      	ldr	r3, [pc, #456]	; (10062c8 <udd_ctrl_out_received+0x248>)
 1006100:	881b      	ldrh	r3, [r3, #0]
 1006102:	1ad3      	subs	r3, r2, r3
 1006104:	83bb      	strh	r3, [r7, #28]
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
 1006106:	4b6f      	ldr	r3, [pc, #444]	; (10062c4 <udd_ctrl_out_received+0x244>)
 1006108:	689b      	ldr	r3, [r3, #8]
 100610a:	4a6f      	ldr	r2, [pc, #444]	; (10062c8 <udd_ctrl_out_received+0x248>)
 100610c:	8812      	ldrh	r2, [r2, #0]
 100610e:	4413      	add	r3, r2
 1006110:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < nb_data; i++) {
 1006112:	2300      	movs	r3, #0
 1006114:	77fb      	strb	r3, [r7, #31]
 1006116:	e009      	b.n	100612c <udd_ctrl_out_received+0xac>
		*ptr_dest++ = udd_endpoint_fifo_read(0);
 1006118:	69bb      	ldr	r3, [r7, #24]
 100611a:	1c5a      	adds	r2, r3, #1
 100611c:	61ba      	str	r2, [r7, #24]
 100611e:	4a67      	ldr	r2, [pc, #412]	; (10062bc <udd_ctrl_out_received+0x23c>)
 1006120:	6d12      	ldr	r2, [r2, #80]	; 0x50
 1006122:	b2d2      	uxtb	r2, r2
 1006124:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < nb_data; i++) {
 1006126:	7ffb      	ldrb	r3, [r7, #31]
 1006128:	3301      	adds	r3, #1
 100612a:	77fb      	strb	r3, [r7, #31]
 100612c:	7ffb      	ldrb	r3, [r7, #31]
 100612e:	b29b      	uxth	r3, r3
 1006130:	8bba      	ldrh	r2, [r7, #28]
 1006132:	429a      	cmp	r2, r3
 1006134:	d8f0      	bhi.n	1006118 <udd_ctrl_out_received+0x98>
	}
	udd_ctrl_payload_nb_trans += nb_data;
 1006136:	4b64      	ldr	r3, [pc, #400]	; (10062c8 <udd_ctrl_out_received+0x248>)
 1006138:	881a      	ldrh	r2, [r3, #0]
 100613a:	8bbb      	ldrh	r3, [r7, #28]
 100613c:	4413      	add	r3, r2
 100613e:	b29a      	uxth	r2, r3
 1006140:	4b61      	ldr	r3, [pc, #388]	; (10062c8 <udd_ctrl_out_received+0x248>)
 1006142:	801a      	strh	r2, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
 1006144:	8bbb      	ldrh	r3, [r7, #28]
 1006146:	2b40      	cmp	r3, #64	; 0x40
 1006148:	d10a      	bne.n	1006160 <udd_ctrl_out_received+0xe0>
			|| (udd_g_ctrlreq.req.wLength <=
 100614a:	4b5e      	ldr	r3, [pc, #376]	; (10062c4 <udd_ctrl_out_received+0x244>)
 100614c:	88db      	ldrh	r3, [r3, #6]
 100614e:	461a      	mov	r2, r3
			(udd_ctrl_prev_payload_nb_trans +
 1006150:	4b5e      	ldr	r3, [pc, #376]	; (10062cc <udd_ctrl_out_received+0x24c>)
 1006152:	881b      	ldrh	r3, [r3, #0]
 1006154:	4619      	mov	r1, r3
 1006156:	4b5c      	ldr	r3, [pc, #368]	; (10062c8 <udd_ctrl_out_received+0x248>)
 1006158:	881b      	ldrh	r3, [r3, #0]
 100615a:	440b      	add	r3, r1
			|| (udd_g_ctrlreq.req.wLength <=
 100615c:	429a      	cmp	r2, r3
 100615e:	dc40      	bgt.n	10061e2 <udd_ctrl_out_received+0x162>
			udd_ctrl_payload_nb_trans))) {
		// End of reception because it is a short packet
		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
 1006160:	4b59      	ldr	r3, [pc, #356]	; (10062c8 <udd_ctrl_out_received+0x248>)
 1006162:	881a      	ldrh	r2, [r3, #0]
 1006164:	4b57      	ldr	r3, [pc, #348]	; (10062c4 <udd_ctrl_out_received+0x244>)
 1006166:	819a      	strh	r2, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
 1006168:	4b56      	ldr	r3, [pc, #344]	; (10062c4 <udd_ctrl_out_received+0x244>)
 100616a:	695b      	ldr	r3, [r3, #20]
 100616c:	2b00      	cmp	r3, #0
 100616e:	d020      	beq.n	10061b2 <udd_ctrl_out_received+0x132>
			if (!udd_g_ctrlreq.over_under_run()) {
 1006170:	4b54      	ldr	r3, [pc, #336]	; (10062c4 <udd_ctrl_out_received+0x244>)
 1006172:	695b      	ldr	r3, [r3, #20]
 1006174:	4798      	blx	r3
 1006176:	4603      	mov	r3, r0
 1006178:	f083 0301 	eor.w	r3, r3, #1
 100617c:	b2db      	uxtb	r3, r3
 100617e:	2b00      	cmp	r3, #0
 1006180:	d017      	beq.n	10061b2 <udd_ctrl_out_received+0x132>
				// Stall ZLP
				udd_ctrl_stall_data();
 1006182:	4b4d      	ldr	r3, [pc, #308]	; (10062b8 <udd_ctrl_out_received+0x238>)
 1006184:	4798      	blx	r3
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_bank0_received(0);
 1006186:	4b4d      	ldr	r3, [pc, #308]	; (10062bc <udd_ctrl_out_received+0x23c>)
 1006188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 100618a:	613b      	str	r3, [r7, #16]
 100618c:	693b      	ldr	r3, [r7, #16]
 100618e:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
 1006192:	613b      	str	r3, [r7, #16]
 1006194:	693b      	ldr	r3, [r7, #16]
 1006196:	f023 0302 	bic.w	r3, r3, #2
 100619a:	613b      	str	r3, [r7, #16]
 100619c:	4a47      	ldr	r2, [pc, #284]	; (10062bc <udd_ctrl_out_received+0x23c>)
 100619e:	693b      	ldr	r3, [r7, #16]
 10061a0:	6313      	str	r3, [r2, #48]	; 0x30
 10061a2:	bf00      	nop
 10061a4:	4b45      	ldr	r3, [pc, #276]	; (10062bc <udd_ctrl_out_received+0x23c>)
 10061a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 10061a8:	f003 0302 	and.w	r3, r3, #2
 10061ac:	2b00      	cmp	r3, #0
 10061ae:	d1f9      	bne.n	10061a4 <udd_ctrl_out_received+0x124>
				return;
 10061b0:	e07a      	b.n	10062a8 <udd_ctrl_out_received+0x228>
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_bank0_received(0);
 10061b2:	4b42      	ldr	r3, [pc, #264]	; (10062bc <udd_ctrl_out_received+0x23c>)
 10061b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 10061b6:	60fb      	str	r3, [r7, #12]
 10061b8:	68fb      	ldr	r3, [r7, #12]
 10061ba:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
 10061be:	60fb      	str	r3, [r7, #12]
 10061c0:	68fb      	ldr	r3, [r7, #12]
 10061c2:	f023 0302 	bic.w	r3, r3, #2
 10061c6:	60fb      	str	r3, [r7, #12]
 10061c8:	4a3c      	ldr	r2, [pc, #240]	; (10062bc <udd_ctrl_out_received+0x23c>)
 10061ca:	68fb      	ldr	r3, [r7, #12]
 10061cc:	6313      	str	r3, [r2, #48]	; 0x30
 10061ce:	bf00      	nop
 10061d0:	4b3a      	ldr	r3, [pc, #232]	; (10062bc <udd_ctrl_out_received+0x23c>)
 10061d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 10061d4:	f003 0302 	and.w	r3, r3, #2
 10061d8:	2b00      	cmp	r3, #0
 10061da:	d1f9      	bne.n	10061d0 <udd_ctrl_out_received+0x150>
		udd_ctrl_send_zlp_in();
 10061dc:	4b3c      	ldr	r3, [pc, #240]	; (10062d0 <udd_ctrl_out_received+0x250>)
 10061de:	4798      	blx	r3
		return;
 10061e0:	e062      	b.n	10062a8 <udd_ctrl_out_received+0x228>
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
 10061e2:	4b38      	ldr	r3, [pc, #224]	; (10062c4 <udd_ctrl_out_received+0x244>)
 10061e4:	899a      	ldrh	r2, [r3, #12]
 10061e6:	4b38      	ldr	r3, [pc, #224]	; (10062c8 <udd_ctrl_out_received+0x248>)
 10061e8:	881b      	ldrh	r3, [r3, #0]
 10061ea:	429a      	cmp	r2, r3
 10061ec:	d147      	bne.n	100627e <udd_ctrl_out_received+0x1fe>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
 10061ee:	4b35      	ldr	r3, [pc, #212]	; (10062c4 <udd_ctrl_out_received+0x244>)
 10061f0:	695b      	ldr	r3, [r3, #20]
 10061f2:	2b00      	cmp	r3, #0
 10061f4:	d117      	bne.n	1006226 <udd_ctrl_out_received+0x1a6>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
 10061f6:	4b30      	ldr	r3, [pc, #192]	; (10062b8 <udd_ctrl_out_received+0x238>)
 10061f8:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_bank0_received(0);
 10061fa:	4b30      	ldr	r3, [pc, #192]	; (10062bc <udd_ctrl_out_received+0x23c>)
 10061fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 10061fe:	60bb      	str	r3, [r7, #8]
 1006200:	68bb      	ldr	r3, [r7, #8]
 1006202:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
 1006206:	60bb      	str	r3, [r7, #8]
 1006208:	68bb      	ldr	r3, [r7, #8]
 100620a:	f023 0302 	bic.w	r3, r3, #2
 100620e:	60bb      	str	r3, [r7, #8]
 1006210:	4a2a      	ldr	r2, [pc, #168]	; (10062bc <udd_ctrl_out_received+0x23c>)
 1006212:	68bb      	ldr	r3, [r7, #8]
 1006214:	6313      	str	r3, [r2, #48]	; 0x30
 1006216:	bf00      	nop
 1006218:	4b28      	ldr	r3, [pc, #160]	; (10062bc <udd_ctrl_out_received+0x23c>)
 100621a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 100621c:	f003 0302 	and.w	r3, r3, #2
 1006220:	2b00      	cmp	r3, #0
 1006222:	d1f9      	bne.n	1006218 <udd_ctrl_out_received+0x198>
			return;
 1006224:	e040      	b.n	10062a8 <udd_ctrl_out_received+0x228>
		}
		if (!udd_g_ctrlreq.over_under_run()) {
 1006226:	4b27      	ldr	r3, [pc, #156]	; (10062c4 <udd_ctrl_out_received+0x244>)
 1006228:	695b      	ldr	r3, [r3, #20]
 100622a:	4798      	blx	r3
 100622c:	4603      	mov	r3, r0
 100622e:	f083 0301 	eor.w	r3, r3, #1
 1006232:	b2db      	uxtb	r3, r3
 1006234:	2b00      	cmp	r3, #0
 1006236:	d017      	beq.n	1006268 <udd_ctrl_out_received+0x1e8>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
 1006238:	4b1f      	ldr	r3, [pc, #124]	; (10062b8 <udd_ctrl_out_received+0x238>)
 100623a:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_bank0_received(0);
 100623c:	4b1f      	ldr	r3, [pc, #124]	; (10062bc <udd_ctrl_out_received+0x23c>)
 100623e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 1006240:	607b      	str	r3, [r7, #4]
 1006242:	687b      	ldr	r3, [r7, #4]
 1006244:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
 1006248:	607b      	str	r3, [r7, #4]
 100624a:	687b      	ldr	r3, [r7, #4]
 100624c:	f023 0302 	bic.w	r3, r3, #2
 1006250:	607b      	str	r3, [r7, #4]
 1006252:	4a1a      	ldr	r2, [pc, #104]	; (10062bc <udd_ctrl_out_received+0x23c>)
 1006254:	687b      	ldr	r3, [r7, #4]
 1006256:	6313      	str	r3, [r2, #48]	; 0x30
 1006258:	bf00      	nop
 100625a:	4b18      	ldr	r3, [pc, #96]	; (10062bc <udd_ctrl_out_received+0x23c>)
 100625c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 100625e:	f003 0302 	and.w	r3, r3, #2
 1006262:	2b00      	cmp	r3, #0
 1006264:	d1f9      	bne.n	100625a <udd_ctrl_out_received+0x1da>
			return;
 1006266:	e01f      	b.n	10062a8 <udd_ctrl_out_received+0x228>
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
 1006268:	4b18      	ldr	r3, [pc, #96]	; (10062cc <udd_ctrl_out_received+0x24c>)
 100626a:	881a      	ldrh	r2, [r3, #0]
 100626c:	4b16      	ldr	r3, [pc, #88]	; (10062c8 <udd_ctrl_out_received+0x248>)
 100626e:	881b      	ldrh	r3, [r3, #0]
 1006270:	4413      	add	r3, r2
 1006272:	b29a      	uxth	r2, r3
 1006274:	4b15      	ldr	r3, [pc, #84]	; (10062cc <udd_ctrl_out_received+0x24c>)
 1006276:	801a      	strh	r2, [r3, #0]
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
 1006278:	4b13      	ldr	r3, [pc, #76]	; (10062c8 <udd_ctrl_out_received+0x248>)
 100627a:	2200      	movs	r2, #0
 100627c:	801a      	strh	r2, [r3, #0]
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_bank0_received(0);
 100627e:	4b0f      	ldr	r3, [pc, #60]	; (10062bc <udd_ctrl_out_received+0x23c>)
 1006280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 1006282:	603b      	str	r3, [r7, #0]
 1006284:	683b      	ldr	r3, [r7, #0]
 1006286:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
 100628a:	603b      	str	r3, [r7, #0]
 100628c:	683b      	ldr	r3, [r7, #0]
 100628e:	f023 0302 	bic.w	r3, r3, #2
 1006292:	603b      	str	r3, [r7, #0]
 1006294:	4a09      	ldr	r2, [pc, #36]	; (10062bc <udd_ctrl_out_received+0x23c>)
 1006296:	683b      	ldr	r3, [r7, #0]
 1006298:	6313      	str	r3, [r2, #48]	; 0x30
 100629a:	bf00      	nop
 100629c:	4b07      	ldr	r3, [pc, #28]	; (10062bc <udd_ctrl_out_received+0x23c>)
 100629e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 10062a0:	f003 0302 	and.w	r3, r3, #2
 10062a4:	2b00      	cmp	r3, #0
 10062a6:	d1f9      	bne.n	100629c <udd_ctrl_out_received+0x21c>
}
 10062a8:	3720      	adds	r7, #32
 10062aa:	46bd      	mov	sp, r7
 10062ac:	bd80      	pop	{r7, pc}
 10062ae:	bf00      	nop
 10062b0:	20001eca 	.word	0x20001eca
 10062b4:	0100637d 	.word	0x0100637d
 10062b8:	010062d5 	.word	0x010062d5
 10062bc:	40044000 	.word	0x40044000
 10062c0:	01005c9d 	.word	0x01005c9d
 10062c4:	20008304 	.word	0x20008304
 10062c8:	20001ece 	.word	0x20001ece
 10062cc:	20001ecc 	.word	0x20001ecc
 10062d0:	0100631d 	.word	0x0100631d

010062d4 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
 10062d4:	b480      	push	{r7}
 10062d6:	b083      	sub	sp, #12
 10062d8:	af00      	add	r7, sp, #0
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
 10062da:	4b0e      	ldr	r3, [pc, #56]	; (1006314 <udd_ctrl_stall_data+0x40>)
 10062dc:	2205      	movs	r2, #5
 10062de:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
 10062e0:	4b0d      	ldr	r3, [pc, #52]	; (1006318 <udd_ctrl_stall_data+0x44>)
 10062e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 10062e4:	607b      	str	r3, [r7, #4]
 10062e6:	687b      	ldr	r3, [r7, #4]
 10062e8:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
 10062ec:	607b      	str	r3, [r7, #4]
 10062ee:	687b      	ldr	r3, [r7, #4]
 10062f0:	f043 0320 	orr.w	r3, r3, #32
 10062f4:	607b      	str	r3, [r7, #4]
 10062f6:	4a08      	ldr	r2, [pc, #32]	; (1006318 <udd_ctrl_stall_data+0x44>)
 10062f8:	687b      	ldr	r3, [r7, #4]
 10062fa:	6313      	str	r3, [r2, #48]	; 0x30
 10062fc:	bf00      	nop
 10062fe:	4b06      	ldr	r3, [pc, #24]	; (1006318 <udd_ctrl_stall_data+0x44>)
 1006300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 1006302:	f003 0320 	and.w	r3, r3, #32
 1006306:	2b20      	cmp	r3, #32
 1006308:	d1f9      	bne.n	10062fe <udd_ctrl_stall_data+0x2a>
}
 100630a:	bf00      	nop
 100630c:	370c      	adds	r7, #12
 100630e:	46bd      	mov	sp, r7
 1006310:	bc80      	pop	{r7}
 1006312:	4770      	bx	lr
 1006314:	20001eca 	.word	0x20001eca
 1006318:	40044000 	.word	0x40044000

0100631c <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
 100631c:	b480      	push	{r7}
 100631e:	b083      	sub	sp, #12
 1006320:	af00      	add	r7, sp, #0
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
 1006322:	4b0e      	ldr	r3, [pc, #56]	; (100635c <udd_ctrl_send_zlp_in+0x40>)
 1006324:	2203      	movs	r2, #3
 1006326:	701a      	strb	r2, [r3, #0]
	// Validate and send empty IN packet on control endpoint
	// Send ZLP on IN endpoint
	udd_set_transmit_ready(0);
 1006328:	4b0d      	ldr	r3, [pc, #52]	; (1006360 <udd_ctrl_send_zlp_in+0x44>)
 100632a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 100632c:	607b      	str	r3, [r7, #4]
 100632e:	687b      	ldr	r3, [r7, #4]
 1006330:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
 1006334:	607b      	str	r3, [r7, #4]
 1006336:	687b      	ldr	r3, [r7, #4]
 1006338:	f043 0310 	orr.w	r3, r3, #16
 100633c:	607b      	str	r3, [r7, #4]
 100633e:	4a08      	ldr	r2, [pc, #32]	; (1006360 <udd_ctrl_send_zlp_in+0x44>)
 1006340:	687b      	ldr	r3, [r7, #4]
 1006342:	6313      	str	r3, [r2, #48]	; 0x30
 1006344:	bf00      	nop
 1006346:	4b06      	ldr	r3, [pc, #24]	; (1006360 <udd_ctrl_send_zlp_in+0x44>)
 1006348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 100634a:	f003 0310 	and.w	r3, r3, #16
 100634e:	2b10      	cmp	r3, #16
 1006350:	d1f9      	bne.n	1006346 <udd_ctrl_send_zlp_in+0x2a>
}
 1006352:	bf00      	nop
 1006354:	370c      	adds	r7, #12
 1006356:	46bd      	mov	sp, r7
 1006358:	bc80      	pop	{r7}
 100635a:	4770      	bx	lr
 100635c:	20001eca 	.word	0x20001eca
 1006360:	40044000 	.word	0x40044000

01006364 <udd_ctrl_send_zlp_out>:


static void udd_ctrl_send_zlp_out(void)
{
 1006364:	b480      	push	{r7}
 1006366:	af00      	add	r7, sp, #0
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
 1006368:	4b03      	ldr	r3, [pc, #12]	; (1006378 <udd_ctrl_send_zlp_out+0x14>)
 100636a:	2204      	movs	r2, #4
 100636c:	701a      	strb	r2, [r3, #0]
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free
}
 100636e:	bf00      	nop
 1006370:	46bd      	mov	sp, r7
 1006372:	bc80      	pop	{r7}
 1006374:	4770      	bx	lr
 1006376:	bf00      	nop
 1006378:	20001eca 	.word	0x20001eca

0100637c <udd_ctrl_endofrequest>:


static void udd_ctrl_endofrequest(void)
{
 100637c:	b580      	push	{r7, lr}
 100637e:	af00      	add	r7, sp, #0
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
 1006380:	4b04      	ldr	r3, [pc, #16]	; (1006394 <udd_ctrl_endofrequest+0x18>)
 1006382:	691b      	ldr	r3, [r3, #16]
 1006384:	2b00      	cmp	r3, #0
 1006386:	d002      	beq.n	100638e <udd_ctrl_endofrequest+0x12>
		udd_g_ctrlreq.callback();
 1006388:	4b02      	ldr	r3, [pc, #8]	; (1006394 <udd_ctrl_endofrequest+0x18>)
 100638a:	691b      	ldr	r3, [r3, #16]
 100638c:	4798      	blx	r3
	}
}
 100638e:	bf00      	nop
 1006390:	bd80      	pop	{r7, pc}
 1006392:	bf00      	nop
 1006394:	20008304 	.word	0x20008304

01006398 <udd_ctrl_interrupt>:


static bool udd_ctrl_interrupt(void)
{
 1006398:	b580      	push	{r7, lr}
 100639a:	b082      	sub	sp, #8
 100639c:	af00      	add	r7, sp, #0
	if (!Is_udd_endpoint_interrupt(0))
 100639e:	4b24      	ldr	r3, [pc, #144]	; (1006430 <udd_ctrl_interrupt+0x98>)
 10063a0:	69db      	ldr	r3, [r3, #28]
 10063a2:	f003 0301 	and.w	r3, r3, #1
 10063a6:	2b00      	cmp	r3, #0
 10063a8:	d101      	bne.n	10063ae <udd_ctrl_interrupt+0x16>
		return false; // No interrupt events on control endpoint
 10063aa:	2300      	movs	r3, #0
 10063ac:	e03b      	b.n	1006426 <udd_ctrl_interrupt+0x8e>

	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
 10063ae:	4b20      	ldr	r3, [pc, #128]	; (1006430 <udd_ctrl_interrupt+0x98>)
 10063b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 10063b2:	f003 0304 	and.w	r3, r3, #4
 10063b6:	2b00      	cmp	r3, #0
 10063b8:	d003      	beq.n	10063c2 <udd_ctrl_interrupt+0x2a>
		// SETUP packet received
		udd_ctrl_setup_received();
 10063ba:	4b1e      	ldr	r3, [pc, #120]	; (1006434 <udd_ctrl_interrupt+0x9c>)
 10063bc:	4798      	blx	r3
		return true;
 10063be:	2301      	movs	r3, #1
 10063c0:	e031      	b.n	1006426 <udd_ctrl_interrupt+0x8e>
	}
	if (Is_udd_in_sent(0)) {
 10063c2:	4b1b      	ldr	r3, [pc, #108]	; (1006430 <udd_ctrl_interrupt+0x98>)
 10063c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 10063c6:	f003 0301 	and.w	r3, r3, #1
 10063ca:	2b00      	cmp	r3, #0
 10063cc:	d003      	beq.n	10063d6 <udd_ctrl_interrupt+0x3e>
		// IN packet sent
		udd_ctrl_in_sent();
 10063ce:	4b1a      	ldr	r3, [pc, #104]	; (1006438 <udd_ctrl_interrupt+0xa0>)
 10063d0:	4798      	blx	r3
		return true;
 10063d2:	2301      	movs	r3, #1
 10063d4:	e027      	b.n	1006426 <udd_ctrl_interrupt+0x8e>
	}
	if (Is_udd_bank0_received(0)) {
 10063d6:	4b16      	ldr	r3, [pc, #88]	; (1006430 <udd_ctrl_interrupt+0x98>)
 10063d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 10063da:	f003 0302 	and.w	r3, r3, #2
 10063de:	2b00      	cmp	r3, #0
 10063e0:	d003      	beq.n	10063ea <udd_ctrl_interrupt+0x52>
		// OUT packet received
		udd_ctrl_out_received();
 10063e2:	4b16      	ldr	r3, [pc, #88]	; (100643c <udd_ctrl_interrupt+0xa4>)
 10063e4:	4798      	blx	r3
		return true;
 10063e6:	2301      	movs	r3, #1
 10063e8:	e01d      	b.n	1006426 <udd_ctrl_interrupt+0x8e>
	}
	if (Is_udd_stall(0)) {
 10063ea:	4b11      	ldr	r3, [pc, #68]	; (1006430 <udd_ctrl_interrupt+0x98>)
 10063ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 10063ee:	f003 0308 	and.w	r3, r3, #8
 10063f2:	2b00      	cmp	r3, #0
 10063f4:	d016      	beq.n	1006424 <udd_ctrl_interrupt+0x8c>
		// STALLed
		udd_ack_stall(0);
 10063f6:	4b0e      	ldr	r3, [pc, #56]	; (1006430 <udd_ctrl_interrupt+0x98>)
 10063f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 10063fa:	607b      	str	r3, [r7, #4]
 10063fc:	687b      	ldr	r3, [r7, #4]
 10063fe:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
 1006402:	607b      	str	r3, [r7, #4]
 1006404:	687b      	ldr	r3, [r7, #4]
 1006406:	f023 0308 	bic.w	r3, r3, #8
 100640a:	607b      	str	r3, [r7, #4]
 100640c:	4a08      	ldr	r2, [pc, #32]	; (1006430 <udd_ctrl_interrupt+0x98>)
 100640e:	687b      	ldr	r3, [r7, #4]
 1006410:	6313      	str	r3, [r2, #48]	; 0x30
 1006412:	bf00      	nop
 1006414:	4b06      	ldr	r3, [pc, #24]	; (1006430 <udd_ctrl_interrupt+0x98>)
 1006416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 1006418:	f003 0308 	and.w	r3, r3, #8
 100641c:	2b00      	cmp	r3, #0
 100641e:	d1f9      	bne.n	1006414 <udd_ctrl_interrupt+0x7c>
		return true;
 1006420:	2301      	movs	r3, #1
 1006422:	e000      	b.n	1006426 <udd_ctrl_interrupt+0x8e>
	}
	return false;
 1006424:	2300      	movs	r3, #0
}
 1006426:	4618      	mov	r0, r3
 1006428:	3708      	adds	r7, #8
 100642a:	46bd      	mov	sp, r7
 100642c:	bd80      	pop	{r7, pc}
 100642e:	bf00      	nop
 1006430:	40044000 	.word	0x40044000
 1006434:	01005cc9 	.word	0x01005cc9
 1006438:	01005e89 	.word	0x01005e89
 100643c:	01006081 	.word	0x01006081

01006440 <udd_ep_job_table_kill>:
	}
}


static void udd_ep_job_table_kill(void)
{
 1006440:	b580      	push	{r7, lr}
 1006442:	b082      	sub	sp, #8
 1006444:	af00      	add	r7, sp, #0
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
 1006446:	2300      	movs	r3, #0
 1006448:	71fb      	strb	r3, [r7, #7]
 100644a:	e010      	b.n	100646e <udd_ep_job_table_kill+0x2e>
		udd_ep_finish_job(&udd_ep_job[i], UDD_EP_TRANSFER_ABORT, i + 1);
 100644c:	79fa      	ldrb	r2, [r7, #7]
 100644e:	4613      	mov	r3, r2
 1006450:	009b      	lsls	r3, r3, #2
 1006452:	4413      	add	r3, r2
 1006454:	009b      	lsls	r3, r3, #2
 1006456:	4a09      	ldr	r2, [pc, #36]	; (100647c <udd_ep_job_table_kill+0x3c>)
 1006458:	1898      	adds	r0, r3, r2
 100645a:	79fb      	ldrb	r3, [r7, #7]
 100645c:	3301      	adds	r3, #1
 100645e:	b2db      	uxtb	r3, r3
 1006460:	461a      	mov	r2, r3
 1006462:	2101      	movs	r1, #1
 1006464:	4b06      	ldr	r3, [pc, #24]	; (1006480 <udd_ep_job_table_kill+0x40>)
 1006466:	4798      	blx	r3
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
 1006468:	79fb      	ldrb	r3, [r7, #7]
 100646a:	3301      	adds	r3, #1
 100646c:	71fb      	strb	r3, [r7, #7]
 100646e:	79fb      	ldrb	r3, [r7, #7]
 1006470:	2b02      	cmp	r3, #2
 1006472:	d9eb      	bls.n	100644c <udd_ep_job_table_kill+0xc>
	}
}
 1006474:	bf00      	nop
 1006476:	3708      	adds	r7, #8
 1006478:	46bd      	mov	sp, r7
 100647a:	bd80      	pop	{r7, pc}
 100647c:	20001ed0 	.word	0x20001ed0
 1006480:	010064c1 	.word	0x010064c1

01006484 <udd_ep_abort_job>:


static void udd_ep_abort_job(udd_ep_id_t ep)
{
 1006484:	b580      	push	{r7, lr}
 1006486:	b082      	sub	sp, #8
 1006488:	af00      	add	r7, sp, #0
 100648a:	4603      	mov	r3, r0
 100648c:	71fb      	strb	r3, [r7, #7]
	ep &= USB_EP_ADDR_MASK;
 100648e:	79fb      	ldrb	r3, [r7, #7]
 1006490:	f003 030f 	and.w	r3, r3, #15
 1006494:	71fb      	strb	r3, [r7, #7]

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], UDD_EP_TRANSFER_ABORT, ep);
 1006496:	79fb      	ldrb	r3, [r7, #7]
 1006498:	1e5a      	subs	r2, r3, #1
 100649a:	4613      	mov	r3, r2
 100649c:	009b      	lsls	r3, r3, #2
 100649e:	4413      	add	r3, r2
 10064a0:	009b      	lsls	r3, r3, #2
 10064a2:	4a05      	ldr	r2, [pc, #20]	; (10064b8 <udd_ep_abort_job+0x34>)
 10064a4:	4413      	add	r3, r2
 10064a6:	79fa      	ldrb	r2, [r7, #7]
 10064a8:	2101      	movs	r1, #1
 10064aa:	4618      	mov	r0, r3
 10064ac:	4b03      	ldr	r3, [pc, #12]	; (10064bc <udd_ep_abort_job+0x38>)
 10064ae:	4798      	blx	r3
}
 10064b0:	bf00      	nop
 10064b2:	3708      	adds	r7, #8
 10064b4:	46bd      	mov	sp, r7
 10064b6:	bd80      	pop	{r7, pc}
 10064b8:	20001ed0 	.word	0x20001ed0
 10064bc:	010064c1 	.word	0x010064c1

010064c0 <udd_ep_finish_job>:


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, int status,
		uint8_t ep_num)
{
 10064c0:	b580      	push	{r7, lr}
 10064c2:	b084      	sub	sp, #16
 10064c4:	af00      	add	r7, sp, #0
 10064c6:	60f8      	str	r0, [r7, #12]
 10064c8:	60b9      	str	r1, [r7, #8]
 10064ca:	4613      	mov	r3, r2
 10064cc:	71fb      	strb	r3, [r7, #7]
	if (ptr_job->busy == false) {
 10064ce:	68fb      	ldr	r3, [r7, #12]
 10064d0:	7c5b      	ldrb	r3, [r3, #17]
 10064d2:	f003 0310 	and.w	r3, r3, #16
 10064d6:	b2db      	uxtb	r3, r3
 10064d8:	2b00      	cmp	r3, #0
 10064da:	d023      	beq.n	1006524 <udd_ep_finish_job+0x64>
		return; // No on-going job
	}
	ptr_job->busy = false;
 10064dc:	68fa      	ldr	r2, [r7, #12]
 10064de:	7c53      	ldrb	r3, [r2, #17]
 10064e0:	f36f 1304 	bfc	r3, #4, #1
 10064e4:	7453      	strb	r3, [r2, #17]
	if (NULL == ptr_job->call_trans) {
 10064e6:	68fb      	ldr	r3, [r7, #12]
 10064e8:	681b      	ldr	r3, [r3, #0]
 10064ea:	2b00      	cmp	r3, #0
 10064ec:	d01c      	beq.n	1006528 <udd_ep_finish_job+0x68>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_type_in(ep_num)) {
 10064ee:	4a10      	ldr	r2, [pc, #64]	; (1006530 <udd_ep_finish_job+0x70>)
 10064f0:	79fb      	ldrb	r3, [r7, #7]
 10064f2:	330c      	adds	r3, #12
 10064f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 10064f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 10064fc:	2b00      	cmp	r3, #0
 10064fe:	d003      	beq.n	1006508 <udd_ep_finish_job+0x48>
		ep_num |= USB_EP_DIR_IN;
 1006500:	79fb      	ldrb	r3, [r7, #7]
 1006502:	f063 037f 	orn	r3, r3, #127	; 0x7f
 1006506:	71fb      	strb	r3, [r7, #7]
	}
	ptr_job->call_trans((status == UDD_EP_TRANSFER_ABORT) ?
 1006508:	68fb      	ldr	r3, [r7, #12]
 100650a:	681b      	ldr	r3, [r3, #0]
 100650c:	68ba      	ldr	r2, [r7, #8]
 100650e:	2a01      	cmp	r2, #1
 1006510:	bf0c      	ite	eq
 1006512:	2201      	moveq	r2, #1
 1006514:	2200      	movne	r2, #0
 1006516:	b2d2      	uxtb	r2, r2
 1006518:	4610      	mov	r0, r2
 100651a:	68fa      	ldr	r2, [r7, #12]
 100651c:	6891      	ldr	r1, [r2, #8]
 100651e:	79fa      	ldrb	r2, [r7, #7]
 1006520:	4798      	blx	r3
 1006522:	e002      	b.n	100652a <udd_ep_finish_job+0x6a>
		return; // No on-going job
 1006524:	bf00      	nop
 1006526:	e000      	b.n	100652a <udd_ep_finish_job+0x6a>
		return; // No callback linked to job
 1006528:	bf00      	nop
		UDD_EP_TRANSFER_ABORT : UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}
 100652a:	3710      	adds	r7, #16
 100652c:	46bd      	mov	sp, r7
 100652e:	bd80      	pop	{r7, pc}
 1006530:	40044000 	.word	0x40044000

01006534 <udd_ep_ack_out_received>:


static void udd_ep_ack_out_received(udd_ep_id_t ep)
{
 1006534:	b480      	push	{r7}
 1006536:	b087      	sub	sp, #28
 1006538:	af00      	add	r7, sp, #0
 100653a:	4603      	mov	r3, r0
 100653c:	71fb      	strb	r3, [r7, #7]
	bool bank0_received, bank1_received;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
 100653e:	79fb      	ldrb	r3, [r7, #7]
 1006540:	1e5a      	subs	r2, r3, #1
 1006542:	4613      	mov	r3, r2
 1006544:	009b      	lsls	r3, r3, #2
 1006546:	4413      	add	r3, r2
 1006548:	009b      	lsls	r3, r3, #2
 100654a:	4a45      	ldr	r2, [pc, #276]	; (1006660 <udd_ep_ack_out_received+0x12c>)
 100654c:	4413      	add	r3, r2
 100654e:	617b      	str	r3, [r7, #20]

	bank0_received = Is_udd_bank0_received(ep);
 1006550:	4a44      	ldr	r2, [pc, #272]	; (1006664 <udd_ep_ack_out_received+0x130>)
 1006552:	79fb      	ldrb	r3, [r7, #7]
 1006554:	330c      	adds	r3, #12
 1006556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 100655a:	f003 0302 	and.w	r3, r3, #2
 100655e:	2b00      	cmp	r3, #0
 1006560:	bf14      	ite	ne
 1006562:	2301      	movne	r3, #1
 1006564:	2300      	moveq	r3, #0
 1006566:	74fb      	strb	r3, [r7, #19]
	bank1_received = Is_udd_bank1_received(ep);
 1006568:	4a3e      	ldr	r2, [pc, #248]	; (1006664 <udd_ep_ack_out_received+0x130>)
 100656a:	79fb      	ldrb	r3, [r7, #7]
 100656c:	330c      	adds	r3, #12
 100656e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 1006572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 1006576:	2b00      	cmp	r3, #0
 1006578:	bf14      	ite	ne
 100657a:	2301      	movne	r3, #1
 100657c:	2300      	moveq	r3, #0
 100657e:	74bb      	strb	r3, [r7, #18]

	if (bank0_received && bank1_received) {
 1006580:	7cfb      	ldrb	r3, [r7, #19]
 1006582:	2b00      	cmp	r3, #0
 1006584:	d002      	beq.n	100658c <udd_ep_ack_out_received+0x58>
 1006586:	7cbb      	ldrb	r3, [r7, #18]
 1006588:	2b00      	cmp	r3, #0
 100658a:	d10e      	bne.n	10065aa <udd_ep_ack_out_received+0x76>
		// The only way is to use ptr_job->bank
	} else if (bank0_received) {
 100658c:	7cfb      	ldrb	r3, [r7, #19]
 100658e:	2b00      	cmp	r3, #0
 1006590:	d005      	beq.n	100659e <udd_ep_ack_out_received+0x6a>
		// Must be bank0
		ptr_job->bank = 0;
 1006592:	697a      	ldr	r2, [r7, #20]
 1006594:	7c53      	ldrb	r3, [r2, #17]
 1006596:	f36f 0383 	bfc	r3, #2, #2
 100659a:	7453      	strb	r3, [r2, #17]
 100659c:	e005      	b.n	10065aa <udd_ep_ack_out_received+0x76>
	} else {
		// Must be bank1
		ptr_job->bank = 1;
 100659e:	697a      	ldr	r2, [r7, #20]
 10065a0:	7c53      	ldrb	r3, [r2, #17]
 10065a2:	2101      	movs	r1, #1
 10065a4:	f361 0383 	bfi	r3, r1, #2, #2
 10065a8:	7453      	strb	r3, [r2, #17]
	}
	if (ptr_job->bank == 0) {
 10065aa:	697b      	ldr	r3, [r7, #20]
 10065ac:	7c5b      	ldrb	r3, [r3, #17]
 10065ae:	f003 030c 	and.w	r3, r3, #12
 10065b2:	b2db      	uxtb	r3, r3
 10065b4:	2b00      	cmp	r3, #0
 10065b6:	d12a      	bne.n	100660e <udd_ep_ack_out_received+0xda>
		udd_ack_bank0_received(ep);
 10065b8:	4a2a      	ldr	r2, [pc, #168]	; (1006664 <udd_ep_ack_out_received+0x130>)
 10065ba:	79fb      	ldrb	r3, [r7, #7]
 10065bc:	330c      	adds	r3, #12
 10065be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 10065c2:	60fb      	str	r3, [r7, #12]
 10065c4:	68fb      	ldr	r3, [r7, #12]
 10065c6:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
 10065ca:	60fb      	str	r3, [r7, #12]
 10065cc:	68fb      	ldr	r3, [r7, #12]
 10065ce:	f023 0302 	bic.w	r3, r3, #2
 10065d2:	60fb      	str	r3, [r7, #12]
 10065d4:	4923      	ldr	r1, [pc, #140]	; (1006664 <udd_ep_ack_out_received+0x130>)
 10065d6:	79fb      	ldrb	r3, [r7, #7]
 10065d8:	68fa      	ldr	r2, [r7, #12]
 10065da:	330c      	adds	r3, #12
 10065dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 10065e0:	bf00      	nop
 10065e2:	4a20      	ldr	r2, [pc, #128]	; (1006664 <udd_ep_ack_out_received+0x130>)
 10065e4:	79fb      	ldrb	r3, [r7, #7]
 10065e6:	330c      	adds	r3, #12
 10065e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 10065ec:	f003 0302 	and.w	r3, r3, #2
 10065f0:	2b00      	cmp	r3, #0
 10065f2:	d1f6      	bne.n	10065e2 <udd_ep_ack_out_received+0xae>
		if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
 10065f4:	79fb      	ldrb	r3, [r7, #7]
 10065f6:	2b00      	cmp	r3, #0
 10065f8:	d02c      	beq.n	1006654 <udd_ep_ack_out_received+0x120>
 10065fa:	79fb      	ldrb	r3, [r7, #7]
 10065fc:	2b03      	cmp	r3, #3
 10065fe:	d029      	beq.n	1006654 <udd_ep_ack_out_received+0x120>
			ptr_job->bank = 1;
 1006600:	697a      	ldr	r2, [r7, #20]
 1006602:	7c53      	ldrb	r3, [r2, #17]
 1006604:	2101      	movs	r1, #1
 1006606:	f361 0383 	bfi	r3, r1, #2, #2
 100660a:	7453      	strb	r3, [r2, #17]
		}
	} else {
		udd_ack_bank1_received(ep);
		ptr_job->bank = 0;
	}
}
 100660c:	e022      	b.n	1006654 <udd_ep_ack_out_received+0x120>
		udd_ack_bank1_received(ep);
 100660e:	4a15      	ldr	r2, [pc, #84]	; (1006664 <udd_ep_ack_out_received+0x130>)
 1006610:	79fb      	ldrb	r3, [r7, #7]
 1006612:	330c      	adds	r3, #12
 1006614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 1006618:	60bb      	str	r3, [r7, #8]
 100661a:	68bb      	ldr	r3, [r7, #8]
 100661c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
 1006620:	60bb      	str	r3, [r7, #8]
 1006622:	68bb      	ldr	r3, [r7, #8]
 1006624:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 1006628:	60bb      	str	r3, [r7, #8]
 100662a:	490e      	ldr	r1, [pc, #56]	; (1006664 <udd_ep_ack_out_received+0x130>)
 100662c:	79fb      	ldrb	r3, [r7, #7]
 100662e:	68ba      	ldr	r2, [r7, #8]
 1006630:	330c      	adds	r3, #12
 1006632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 1006636:	bf00      	nop
 1006638:	4a0a      	ldr	r2, [pc, #40]	; (1006664 <udd_ep_ack_out_received+0x130>)
 100663a:	79fb      	ldrb	r3, [r7, #7]
 100663c:	330c      	adds	r3, #12
 100663e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 1006642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 1006646:	2b00      	cmp	r3, #0
 1006648:	d1f6      	bne.n	1006638 <udd_ep_ack_out_received+0x104>
		ptr_job->bank = 0;
 100664a:	697a      	ldr	r2, [r7, #20]
 100664c:	7c53      	ldrb	r3, [r2, #17]
 100664e:	f36f 0383 	bfc	r3, #2, #2
 1006652:	7453      	strb	r3, [r2, #17]
}
 1006654:	bf00      	nop
 1006656:	371c      	adds	r7, #28
 1006658:	46bd      	mov	sp, r7
 100665a:	bc80      	pop	{r7}
 100665c:	4770      	bx	lr
 100665e:	bf00      	nop
 1006660:	20001ed0 	.word	0x20001ed0
 1006664:	40044000 	.word	0x40044000

01006668 <udd_ep_write_fifo>:


static bool udd_ep_write_fifo(udd_ep_id_t ep)
{
 1006668:	b480      	push	{r7}
 100666a:	b089      	sub	sp, #36	; 0x24
 100666c:	af00      	add	r7, sp, #0
 100666e:	4603      	mov	r3, r0
 1006670:	71fb      	strb	r3, [r7, #7]
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
 1006672:	79fb      	ldrb	r3, [r7, #7]
 1006674:	1e5a      	subs	r2, r3, #1
 1006676:	4613      	mov	r3, r2
 1006678:	009b      	lsls	r3, r3, #2
 100667a:	4413      	add	r3, r2
 100667c:	009b      	lsls	r3, r3, #2
 100667e:	4a55      	ldr	r2, [pc, #340]	; (10067d4 <udd_ep_write_fifo+0x16c>)
 1006680:	4413      	add	r3, r2
 1006682:	613b      	str	r3, [r7, #16]
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
 1006684:	693b      	ldr	r3, [r7, #16]
 1006686:	685a      	ldr	r2, [r3, #4]
 1006688:	693b      	ldr	r3, [r7, #16]
 100668a:	68db      	ldr	r3, [r3, #12]
 100668c:	4413      	add	r3, r2
 100668e:	61fb      	str	r3, [r7, #28]
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
 1006690:	693b      	ldr	r3, [r7, #16]
 1006692:	689a      	ldr	r2, [r3, #8]
 1006694:	693b      	ldr	r3, [r7, #16]
 1006696:	68db      	ldr	r3, [r3, #12]
 1006698:	1ad3      	subs	r3, r2, r3
 100669a:	60fb      	str	r3, [r7, #12]
	uint32_t pkt_size = ptr_job->size;
 100669c:	693b      	ldr	r3, [r7, #16]
 100669e:	8a1b      	ldrh	r3, [r3, #16]
 10066a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 10066a4:	b29b      	uxth	r3, r3
 10066a6:	61bb      	str	r3, [r7, #24]
	bool is_short_pkt = false;
 10066a8:	2300      	movs	r3, #0
 10066aa:	75fb      	strb	r3, [r7, #23]

	// Packet size
	if (nb_remain < pkt_size) {
 10066ac:	68fa      	ldr	r2, [r7, #12]
 10066ae:	69bb      	ldr	r3, [r7, #24]
 10066b0:	429a      	cmp	r2, r3
 10066b2:	d203      	bcs.n	10066bc <udd_ep_write_fifo+0x54>
		pkt_size = nb_remain;
 10066b4:	68fb      	ldr	r3, [r7, #12]
 10066b6:	61bb      	str	r3, [r7, #24]
		is_short_pkt = true;
 10066b8:	2301      	movs	r3, #1
 10066ba:	75fb      	strb	r3, [r7, #23]
	}

	// Modify job information
	ptr_job->buf_cnt += pkt_size;
 10066bc:	693b      	ldr	r3, [r7, #16]
 10066be:	68da      	ldr	r2, [r3, #12]
 10066c0:	69bb      	ldr	r3, [r7, #24]
 10066c2:	441a      	add	r2, r3
 10066c4:	693b      	ldr	r3, [r7, #16]
 10066c6:	60da      	str	r2, [r3, #12]

	// Speed block data transfer to FIFO (DPRAM)
	for (; pkt_size >= 8; pkt_size -= 8) {
 10066c8:	e05a      	b.n	1006780 <udd_ep_write_fifo+0x118>
		udd_endpoint_fifo_write(ep, *ptr_src++);
 10066ca:	4843      	ldr	r0, [pc, #268]	; (10067d8 <udd_ep_write_fifo+0x170>)
 10066cc:	79fa      	ldrb	r2, [r7, #7]
 10066ce:	69fb      	ldr	r3, [r7, #28]
 10066d0:	1c59      	adds	r1, r3, #1
 10066d2:	61f9      	str	r1, [r7, #28]
 10066d4:	781b      	ldrb	r3, [r3, #0]
 10066d6:	4619      	mov	r1, r3
 10066d8:	f102 0314 	add.w	r3, r2, #20
 10066dc:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
 10066e0:	483d      	ldr	r0, [pc, #244]	; (10067d8 <udd_ep_write_fifo+0x170>)
 10066e2:	79fa      	ldrb	r2, [r7, #7]
 10066e4:	69fb      	ldr	r3, [r7, #28]
 10066e6:	1c59      	adds	r1, r3, #1
 10066e8:	61f9      	str	r1, [r7, #28]
 10066ea:	781b      	ldrb	r3, [r3, #0]
 10066ec:	4619      	mov	r1, r3
 10066ee:	f102 0314 	add.w	r3, r2, #20
 10066f2:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
 10066f6:	4838      	ldr	r0, [pc, #224]	; (10067d8 <udd_ep_write_fifo+0x170>)
 10066f8:	79fa      	ldrb	r2, [r7, #7]
 10066fa:	69fb      	ldr	r3, [r7, #28]
 10066fc:	1c59      	adds	r1, r3, #1
 10066fe:	61f9      	str	r1, [r7, #28]
 1006700:	781b      	ldrb	r3, [r3, #0]
 1006702:	4619      	mov	r1, r3
 1006704:	f102 0314 	add.w	r3, r2, #20
 1006708:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
 100670c:	4832      	ldr	r0, [pc, #200]	; (10067d8 <udd_ep_write_fifo+0x170>)
 100670e:	79fa      	ldrb	r2, [r7, #7]
 1006710:	69fb      	ldr	r3, [r7, #28]
 1006712:	1c59      	adds	r1, r3, #1
 1006714:	61f9      	str	r1, [r7, #28]
 1006716:	781b      	ldrb	r3, [r3, #0]
 1006718:	4619      	mov	r1, r3
 100671a:	f102 0314 	add.w	r3, r2, #20
 100671e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
 1006722:	482d      	ldr	r0, [pc, #180]	; (10067d8 <udd_ep_write_fifo+0x170>)
 1006724:	79fa      	ldrb	r2, [r7, #7]
 1006726:	69fb      	ldr	r3, [r7, #28]
 1006728:	1c59      	adds	r1, r3, #1
 100672a:	61f9      	str	r1, [r7, #28]
 100672c:	781b      	ldrb	r3, [r3, #0]
 100672e:	4619      	mov	r1, r3
 1006730:	f102 0314 	add.w	r3, r2, #20
 1006734:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
 1006738:	4827      	ldr	r0, [pc, #156]	; (10067d8 <udd_ep_write_fifo+0x170>)
 100673a:	79fa      	ldrb	r2, [r7, #7]
 100673c:	69fb      	ldr	r3, [r7, #28]
 100673e:	1c59      	adds	r1, r3, #1
 1006740:	61f9      	str	r1, [r7, #28]
 1006742:	781b      	ldrb	r3, [r3, #0]
 1006744:	4619      	mov	r1, r3
 1006746:	f102 0314 	add.w	r3, r2, #20
 100674a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
 100674e:	4822      	ldr	r0, [pc, #136]	; (10067d8 <udd_ep_write_fifo+0x170>)
 1006750:	79fa      	ldrb	r2, [r7, #7]
 1006752:	69fb      	ldr	r3, [r7, #28]
 1006754:	1c59      	adds	r1, r3, #1
 1006756:	61f9      	str	r1, [r7, #28]
 1006758:	781b      	ldrb	r3, [r3, #0]
 100675a:	4619      	mov	r1, r3
 100675c:	f102 0314 	add.w	r3, r2, #20
 1006760:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
 1006764:	481c      	ldr	r0, [pc, #112]	; (10067d8 <udd_ep_write_fifo+0x170>)
 1006766:	79fa      	ldrb	r2, [r7, #7]
 1006768:	69fb      	ldr	r3, [r7, #28]
 100676a:	1c59      	adds	r1, r3, #1
 100676c:	61f9      	str	r1, [r7, #28]
 100676e:	781b      	ldrb	r3, [r3, #0]
 1006770:	4619      	mov	r1, r3
 1006772:	f102 0314 	add.w	r3, r2, #20
 1006776:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
	for (; pkt_size >= 8; pkt_size -= 8) {
 100677a:	69bb      	ldr	r3, [r7, #24]
 100677c:	3b08      	subs	r3, #8
 100677e:	61bb      	str	r3, [r7, #24]
 1006780:	69bb      	ldr	r3, [r7, #24]
 1006782:	2b07      	cmp	r3, #7
 1006784:	d8a1      	bhi.n	10066ca <udd_ep_write_fifo+0x62>
	}
	// Normal speed data transfer to FIFO (DPRAM)
	for (; pkt_size; pkt_size--) {
 1006786:	e00d      	b.n	10067a4 <udd_ep_write_fifo+0x13c>
		udd_endpoint_fifo_write(ep, *ptr_src++);
 1006788:	4813      	ldr	r0, [pc, #76]	; (10067d8 <udd_ep_write_fifo+0x170>)
 100678a:	79fa      	ldrb	r2, [r7, #7]
 100678c:	69fb      	ldr	r3, [r7, #28]
 100678e:	1c59      	adds	r1, r3, #1
 1006790:	61f9      	str	r1, [r7, #28]
 1006792:	781b      	ldrb	r3, [r3, #0]
 1006794:	4619      	mov	r1, r3
 1006796:	f102 0314 	add.w	r3, r2, #20
 100679a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
	for (; pkt_size; pkt_size--) {
 100679e:	69bb      	ldr	r3, [r7, #24]
 10067a0:	3b01      	subs	r3, #1
 10067a2:	61bb      	str	r3, [r7, #24]
 10067a4:	69bb      	ldr	r3, [r7, #24]
 10067a6:	2b00      	cmp	r3, #0
 10067a8:	d1ee      	bne.n	1006788 <udd_ep_write_fifo+0x120>
	}

	// Add to buffered banks
	ptr_job->bank++;
 10067aa:	693b      	ldr	r3, [r7, #16]
 10067ac:	7c5b      	ldrb	r3, [r3, #17]
 10067ae:	f3c3 0381 	ubfx	r3, r3, #2, #2
 10067b2:	b2db      	uxtb	r3, r3
 10067b4:	3301      	adds	r3, #1
 10067b6:	f003 0303 	and.w	r3, r3, #3
 10067ba:	b2d9      	uxtb	r1, r3
 10067bc:	693a      	ldr	r2, [r7, #16]
 10067be:	7c53      	ldrb	r3, [r2, #17]
 10067c0:	f361 0383 	bfi	r3, r1, #2, #2
 10067c4:	7453      	strb	r3, [r2, #17]
	return is_short_pkt;
 10067c6:	7dfb      	ldrb	r3, [r7, #23]
}
 10067c8:	4618      	mov	r0, r3
 10067ca:	3724      	adds	r7, #36	; 0x24
 10067cc:	46bd      	mov	sp, r7
 10067ce:	bc80      	pop	{r7}
 10067d0:	4770      	bx	lr
 10067d2:	bf00      	nop
 10067d4:	20001ed0 	.word	0x20001ed0
 10067d8:	40044000 	.word	0x40044000

010067dc <udd_ep_in_sent>:


static bool udd_ep_in_sent(udd_ep_id_t ep, bool b_tx)
{
 10067dc:	b580      	push	{r7, lr}
 10067de:	b086      	sub	sp, #24
 10067e0:	af00      	add	r7, sp, #0
 10067e2:	4603      	mov	r3, r0
 10067e4:	460a      	mov	r2, r1
 10067e6:	71fb      	strb	r3, [r7, #7]
 10067e8:	4613      	mov	r3, r2
 10067ea:	71bb      	strb	r3, [r7, #6]
	bool b_shortpacket;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
 10067ec:	79fb      	ldrb	r3, [r7, #7]
 10067ee:	1e5a      	subs	r2, r3, #1
 10067f0:	4613      	mov	r3, r2
 10067f2:	009b      	lsls	r3, r3, #2
 10067f4:	4413      	add	r3, r2
 10067f6:	009b      	lsls	r3, r3, #2
 10067f8:	4a36      	ldr	r2, [pc, #216]	; (10068d4 <udd_ep_in_sent+0xf8>)
 10067fa:	4413      	add	r3, r2
 10067fc:	617b      	str	r3, [r7, #20]

	// All banks are full
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
 10067fe:	697b      	ldr	r3, [r7, #20]
 1006800:	7c5b      	ldrb	r3, [r3, #17]
 1006802:	f3c3 0381 	ubfx	r3, r3, #2, #2
 1006806:	b2db      	uxtb	r3, r3
 1006808:	461a      	mov	r2, r3
 100680a:	79fb      	ldrb	r3, [r7, #7]
 100680c:	2b00      	cmp	r3, #0
 100680e:	d002      	beq.n	1006816 <udd_ep_in_sent+0x3a>
 1006810:	79fb      	ldrb	r3, [r7, #7]
 1006812:	2b03      	cmp	r3, #3
 1006814:	d101      	bne.n	100681a <udd_ep_in_sent+0x3e>
 1006816:	2301      	movs	r3, #1
 1006818:	e000      	b.n	100681c <udd_ep_in_sent+0x40>
 100681a:	2302      	movs	r3, #2
 100681c:	429a      	cmp	r2, r3
 100681e:	db01      	blt.n	1006824 <udd_ep_in_sent+0x48>
		return true; // Data pending
 1006820:	2301      	movs	r3, #1
 1006822:	e052      	b.n	10068ca <udd_ep_in_sent+0xee>
	}

	// No more data in buffer
	if (ptr_job->buf_cnt >= ptr_job->buf_size && !ptr_job->b_shortpacket) {
 1006824:	697b      	ldr	r3, [r7, #20]
 1006826:	68da      	ldr	r2, [r3, #12]
 1006828:	697b      	ldr	r3, [r7, #20]
 100682a:	689b      	ldr	r3, [r3, #8]
 100682c:	429a      	cmp	r2, r3
 100682e:	d308      	bcc.n	1006842 <udd_ep_in_sent+0x66>
 1006830:	697b      	ldr	r3, [r7, #20]
 1006832:	7c5b      	ldrb	r3, [r3, #17]
 1006834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 1006838:	b2db      	uxtb	r3, r3
 100683a:	2b00      	cmp	r3, #0
 100683c:	d101      	bne.n	1006842 <udd_ep_in_sent+0x66>
		return false;
 100683e:	2300      	movs	r3, #0
 1006840:	e043      	b.n	10068ca <udd_ep_in_sent+0xee>
	}

	// Fill FIFO
	b_shortpacket = udd_ep_write_fifo(ep);
 1006842:	79fb      	ldrb	r3, [r7, #7]
 1006844:	4618      	mov	r0, r3
 1006846:	4b24      	ldr	r3, [pc, #144]	; (10068d8 <udd_ep_in_sent+0xfc>)
 1006848:	4798      	blx	r3
 100684a:	4603      	mov	r3, r0
 100684c:	74fb      	strb	r3, [r7, #19]

	// Data is ready to send
	if (b_tx) {
 100684e:	79bb      	ldrb	r3, [r7, #6]
 1006850:	2b00      	cmp	r3, #0
 1006852:	d01d      	beq.n	1006890 <udd_ep_in_sent+0xb4>
		udd_set_transmit_ready(ep);
 1006854:	4a21      	ldr	r2, [pc, #132]	; (10068dc <udd_ep_in_sent+0x100>)
 1006856:	79fb      	ldrb	r3, [r7, #7]
 1006858:	330c      	adds	r3, #12
 100685a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 100685e:	60fb      	str	r3, [r7, #12]
 1006860:	68fb      	ldr	r3, [r7, #12]
 1006862:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
 1006866:	60fb      	str	r3, [r7, #12]
 1006868:	68fb      	ldr	r3, [r7, #12]
 100686a:	f043 0310 	orr.w	r3, r3, #16
 100686e:	60fb      	str	r3, [r7, #12]
 1006870:	491a      	ldr	r1, [pc, #104]	; (10068dc <udd_ep_in_sent+0x100>)
 1006872:	79fb      	ldrb	r3, [r7, #7]
 1006874:	68fa      	ldr	r2, [r7, #12]
 1006876:	330c      	adds	r3, #12
 1006878:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 100687c:	bf00      	nop
 100687e:	4a17      	ldr	r2, [pc, #92]	; (10068dc <udd_ep_in_sent+0x100>)
 1006880:	79fb      	ldrb	r3, [r7, #7]
 1006882:	330c      	adds	r3, #12
 1006884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 1006888:	f003 0310 	and.w	r3, r3, #16
 100688c:	2b10      	cmp	r3, #16
 100688e:	d1f6      	bne.n	100687e <udd_ep_in_sent+0xa2>
	}
	// Short PKT? no need to send it again.
	if (b_shortpacket) {
 1006890:	7cfb      	ldrb	r3, [r7, #19]
 1006892:	2b00      	cmp	r3, #0
 1006894:	d004      	beq.n	10068a0 <udd_ep_in_sent+0xc4>
		ptr_job->b_shortpacket = false;
 1006896:	697a      	ldr	r2, [r7, #20]
 1006898:	7c53      	ldrb	r3, [r2, #17]
 100689a:	f36f 1386 	bfc	r3, #6, #1
 100689e:	7453      	strb	r3, [r2, #17]
	}
	// All transfer done, including ZLP, Finish Job
	if ((ptr_job->buf_cnt >= ptr_job->buf_size)
 10068a0:	697b      	ldr	r3, [r7, #20]
 10068a2:	68da      	ldr	r2, [r3, #12]
 10068a4:	697b      	ldr	r3, [r7, #20]
 10068a6:	689b      	ldr	r3, [r3, #8]
 10068a8:	429a      	cmp	r2, r3
 10068aa:	d30d      	bcc.n	10068c8 <udd_ep_in_sent+0xec>
			&& (!ptr_job->b_shortpacket)) {
 10068ac:	697b      	ldr	r3, [r7, #20]
 10068ae:	7c5b      	ldrb	r3, [r3, #17]
 10068b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 10068b4:	b2db      	uxtb	r3, r3
 10068b6:	2b00      	cmp	r3, #0
 10068b8:	d106      	bne.n	10068c8 <udd_ep_in_sent+0xec>
		ptr_job->b_buf_end = true;
 10068ba:	697a      	ldr	r2, [r7, #20]
 10068bc:	7c53      	ldrb	r3, [r2, #17]
 10068be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 10068c2:	7453      	strb	r3, [r2, #17]
		return false;
 10068c4:	2300      	movs	r3, #0
 10068c6:	e000      	b.n	10068ca <udd_ep_in_sent+0xee>
	}
	return true; // Pending
 10068c8:	2301      	movs	r3, #1
}
 10068ca:	4618      	mov	r0, r3
 10068cc:	3718      	adds	r7, #24
 10068ce:	46bd      	mov	sp, r7
 10068d0:	bd80      	pop	{r7, pc}
 10068d2:	bf00      	nop
 10068d4:	20001ed0 	.word	0x20001ed0
 10068d8:	01006669 	.word	0x01006669
 10068dc:	40044000 	.word	0x40044000

010068e0 <udd_ep_out_received>:


static void udd_ep_out_received(udd_ep_id_t ep)
{
 10068e0:	b580      	push	{r7, lr}
 10068e2:	b08a      	sub	sp, #40	; 0x28
 10068e4:	af00      	add	r7, sp, #0
 10068e6:	4603      	mov	r3, r0
 10068e8:	71fb      	strb	r3, [r7, #7]
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
 10068ea:	79fb      	ldrb	r3, [r7, #7]
 10068ec:	1e5a      	subs	r2, r3, #1
 10068ee:	4613      	mov	r3, r2
 10068f0:	009b      	lsls	r3, r3, #2
 10068f2:	4413      	add	r3, r2
 10068f4:	009b      	lsls	r3, r3, #2
 10068f6:	4a3a      	ldr	r2, [pc, #232]	; (10069e0 <udd_ep_out_received+0x100>)
 10068f8:	4413      	add	r3, r2
 10068fa:	617b      	str	r3, [r7, #20]
	uint32_t nb_data = 0, i;
 10068fc:	2300      	movs	r3, #0
 10068fe:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
 1006900:	697b      	ldr	r3, [r7, #20]
 1006902:	689a      	ldr	r2, [r3, #8]
 1006904:	697b      	ldr	r3, [r7, #20]
 1006906:	68db      	ldr	r3, [r3, #12]
 1006908:	1ad3      	subs	r3, r2, r3
 100690a:	613b      	str	r3, [r7, #16]
	uint32_t pkt_size = ptr_job->size;
 100690c:	697b      	ldr	r3, [r7, #20]
 100690e:	8a1b      	ldrh	r3, [r3, #16]
 1006910:	f3c3 0309 	ubfx	r3, r3, #0, #10
 1006914:	b29b      	uxth	r3, r3
 1006916:	60fb      	str	r3, [r7, #12]
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
 1006918:	697b      	ldr	r3, [r7, #20]
 100691a:	685a      	ldr	r2, [r3, #4]
 100691c:	697b      	ldr	r3, [r7, #20]
 100691e:	68db      	ldr	r3, [r3, #12]
 1006920:	4413      	add	r3, r2
 1006922:	61fb      	str	r3, [r7, #28]
	bool b_full = false, b_short;
 1006924:	2300      	movs	r3, #0
 1006926:	76fb      	strb	r3, [r7, #27]

	// Read byte count
	nb_data = udd_byte_count(ep);
 1006928:	4a2e      	ldr	r2, [pc, #184]	; (10069e4 <udd_ep_out_received+0x104>)
 100692a:	79fb      	ldrb	r3, [r7, #7]
 100692c:	330c      	adds	r3, #12
 100692e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 1006932:	0c1b      	lsrs	r3, r3, #16
 1006934:	f3c3 030a 	ubfx	r3, r3, #0, #11
 1006938:	627b      	str	r3, [r7, #36]	; 0x24
	b_short = (nb_data < pkt_size);
 100693a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 100693c:	68fb      	ldr	r3, [r7, #12]
 100693e:	429a      	cmp	r2, r3
 1006940:	bf34      	ite	cc
 1006942:	2301      	movcc	r3, #1
 1006944:	2300      	movcs	r3, #0
 1006946:	72fb      	strb	r3, [r7, #11]

	// Copy data if there is
	if (nb_data > 0) {
 1006948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 100694a:	2b00      	cmp	r3, #0
 100694c:	d021      	beq.n	1006992 <udd_ep_out_received+0xb2>
		if (nb_data >= nb_remain) {
 100694e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 1006950:	693b      	ldr	r3, [r7, #16]
 1006952:	429a      	cmp	r2, r3
 1006954:	d303      	bcc.n	100695e <udd_ep_out_received+0x7e>
			nb_data = nb_remain;
 1006956:	693b      	ldr	r3, [r7, #16]
 1006958:	627b      	str	r3, [r7, #36]	; 0x24
			b_full = true;
 100695a:	2301      	movs	r3, #1
 100695c:	76fb      	strb	r3, [r7, #27]
		}
		// Modify job information
		ptr_job->buf_cnt += nb_data;
 100695e:	697b      	ldr	r3, [r7, #20]
 1006960:	68da      	ldr	r2, [r3, #12]
 1006962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 1006964:	441a      	add	r2, r3
 1006966:	697b      	ldr	r3, [r7, #20]
 1006968:	60da      	str	r2, [r3, #12]

		// Copy FIFO (DPRAM) to buffer
		for (i = 0; i < nb_data; i++) {
 100696a:	2300      	movs	r3, #0
 100696c:	623b      	str	r3, [r7, #32]
 100696e:	e00c      	b.n	100698a <udd_ep_out_received+0xaa>
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
 1006970:	69fb      	ldr	r3, [r7, #28]
 1006972:	1c5a      	adds	r2, r3, #1
 1006974:	61fa      	str	r2, [r7, #28]
 1006976:	491b      	ldr	r1, [pc, #108]	; (10069e4 <udd_ep_out_received+0x104>)
 1006978:	79fa      	ldrb	r2, [r7, #7]
 100697a:	3214      	adds	r2, #20
 100697c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 1006980:	b2d2      	uxtb	r2, r2
 1006982:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < nb_data; i++) {
 1006984:	6a3b      	ldr	r3, [r7, #32]
 1006986:	3301      	adds	r3, #1
 1006988:	623b      	str	r3, [r7, #32]
 100698a:	6a3a      	ldr	r2, [r7, #32]
 100698c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 100698e:	429a      	cmp	r2, r3
 1006990:	d3ee      	bcc.n	1006970 <udd_ep_out_received+0x90>
		}
	}
	// Clear FIFO Status
	udd_ep_ack_out_received(ep);
 1006992:	79fb      	ldrb	r3, [r7, #7]
 1006994:	4618      	mov	r0, r3
 1006996:	4b14      	ldr	r3, [pc, #80]	; (10069e8 <udd_ep_out_received+0x108>)
 1006998:	4798      	blx	r3
	// Finish job on error or short packet
	if ((b_full || b_short) &&
 100699a:	7efb      	ldrb	r3, [r7, #27]
 100699c:	2b00      	cmp	r3, #0
 100699e:	d102      	bne.n	10069a6 <udd_ep_out_received+0xc6>
 10069a0:	7afb      	ldrb	r3, [r7, #11]
 10069a2:	2b00      	cmp	r3, #0
 10069a4:	d018      	beq.n	10069d8 <udd_ep_out_received+0xf8>
			!Is_udd_endpoint_stall_requested(ep)) {
 10069a6:	4a0f      	ldr	r2, [pc, #60]	; (10069e4 <udd_ep_out_received+0x104>)
 10069a8:	79fb      	ldrb	r3, [r7, #7]
 10069aa:	330c      	adds	r3, #12
 10069ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 10069b0:	f003 0320 	and.w	r3, r3, #32
	if ((b_full || b_short) &&
 10069b4:	2b00      	cmp	r3, #0
 10069b6:	d10f      	bne.n	10069d8 <udd_ep_out_received+0xf8>
		udd_disable_endpoint_interrupt(ep);
 10069b8:	4a0a      	ldr	r2, [pc, #40]	; (10069e4 <udd_ep_out_received+0x104>)
 10069ba:	79fb      	ldrb	r3, [r7, #7]
 10069bc:	2101      	movs	r1, #1
 10069be:	fa01 f303 	lsl.w	r3, r1, r3
 10069c2:	6153      	str	r3, [r2, #20]
		ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
 10069c4:	697b      	ldr	r3, [r7, #20]
 10069c6:	68da      	ldr	r2, [r3, #12]
 10069c8:	697b      	ldr	r3, [r7, #20]
 10069ca:	609a      	str	r2, [r3, #8]
		udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
 10069cc:	79fb      	ldrb	r3, [r7, #7]
 10069ce:	461a      	mov	r2, r3
 10069d0:	2100      	movs	r1, #0
 10069d2:	6978      	ldr	r0, [r7, #20]
 10069d4:	4b05      	ldr	r3, [pc, #20]	; (10069ec <udd_ep_out_received+0x10c>)
 10069d6:	4798      	blx	r3
	}
}
 10069d8:	bf00      	nop
 10069da:	3728      	adds	r7, #40	; 0x28
 10069dc:	46bd      	mov	sp, r7
 10069de:	bd80      	pop	{r7, pc}
 10069e0:	20001ed0 	.word	0x20001ed0
 10069e4:	40044000 	.word	0x40044000
 10069e8:	01006535 	.word	0x01006535
 10069ec:	010064c1 	.word	0x010064c1

010069f0 <udd_ep_interrupt>:


static bool udd_ep_interrupt(void)
{
 10069f0:	b580      	push	{r7, lr}
 10069f2:	b08e      	sub	sp, #56	; 0x38
 10069f4:	af00      	add	r7, sp, #0
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
 10069f6:	2301      	movs	r3, #1
 10069f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 10069fc:	e260      	b.n	1006ec0 <udd_ep_interrupt+0x4d0>
		// Check RXRDY and TXEMPTY event for none DMA endpoints
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
 10069fe:	4b9e      	ldr	r3, [pc, #632]	; (1006c78 <udd_ep_interrupt+0x288>)
 1006a00:	699a      	ldr	r2, [r3, #24]
 1006a02:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 1006a06:	2101      	movs	r1, #1
 1006a08:	fa01 f303 	lsl.w	r3, r1, r3
 1006a0c:	4013      	ands	r3, r2
 1006a0e:	2b00      	cmp	r3, #0
 1006a10:	f000 8250 	beq.w	1006eb4 <udd_ep_interrupt+0x4c4>
			continue;
		}

		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
 1006a14:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 1006a18:	1e5a      	subs	r2, r3, #1
 1006a1a:	4613      	mov	r3, r2
 1006a1c:	009b      	lsls	r3, r3, #2
 1006a1e:	4413      	add	r3, r2
 1006a20:	009b      	lsls	r3, r3, #2
 1006a22:	4a96      	ldr	r2, [pc, #600]	; (1006c7c <udd_ep_interrupt+0x28c>)
 1006a24:	4413      	add	r3, r2
 1006a26:	633b      	str	r3, [r7, #48]	; 0x30

		// RXOUT: Full packet received
		if (Is_udd_any_bank_received(ep)) {
 1006a28:	4a93      	ldr	r2, [pc, #588]	; (1006c78 <udd_ep_interrupt+0x288>)
 1006a2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 1006a2e:	330c      	adds	r3, #12
 1006a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 1006a34:	f003 0342 	and.w	r3, r3, #66	; 0x42
 1006a38:	2b00      	cmp	r3, #0
 1006a3a:	d006      	beq.n	1006a4a <udd_ep_interrupt+0x5a>
			udd_ep_out_received(ep);
 1006a3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 1006a40:	4618      	mov	r0, r3
 1006a42:	4b8f      	ldr	r3, [pc, #572]	; (1006c80 <udd_ep_interrupt+0x290>)
 1006a44:	4798      	blx	r3
			return true;
 1006a46:	2301      	movs	r3, #1
 1006a48:	e240      	b.n	1006ecc <udd_ep_interrupt+0x4dc>
		}
		// TXIN: packet sent
		if (Is_udd_in_sent(ep)) {
 1006a4a:	4a8b      	ldr	r2, [pc, #556]	; (1006c78 <udd_ep_interrupt+0x288>)
 1006a4c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 1006a50:	330c      	adds	r3, #12
 1006a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 1006a56:	f003 0301 	and.w	r3, r3, #1
 1006a5a:	2b00      	cmp	r3, #0
 1006a5c:	f000 81ec 	beq.w	1006e38 <udd_ep_interrupt+0x448>

			ptr_job->bank--;
 1006a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 1006a62:	7c5b      	ldrb	r3, [r3, #17]
 1006a64:	f3c3 0381 	ubfx	r3, r3, #2, #2
 1006a68:	b2db      	uxtb	r3, r3
 1006a6a:	3303      	adds	r3, #3
 1006a6c:	f003 0303 	and.w	r3, r3, #3
 1006a70:	b2d9      	uxtb	r1, r3
 1006a72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 1006a74:	7c53      	ldrb	r3, [r2, #17]
 1006a76:	f361 0383 	bfi	r3, r1, #2, #2
 1006a7a:	7453      	strb	r3, [r2, #17]
			// Stall when all banks free
			if (ptr_job->b_stall_requested) {
 1006a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 1006a7e:	7c5b      	ldrb	r3, [r3, #17]
 1006a80:	f003 0320 	and.w	r3, r3, #32
 1006a84:	b2db      	uxtb	r3, r3
 1006a86:	2b00      	cmp	r3, #0
 1006a88:	f000 8093 	beq.w	1006bb2 <udd_ep_interrupt+0x1c2>
				if (ptr_job->bank) {
 1006a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 1006a8e:	7c5b      	ldrb	r3, [r3, #17]
 1006a90:	f003 030c 	and.w	r3, r3, #12
 1006a94:	b2db      	uxtb	r3, r3
 1006a96:	2b00      	cmp	r3, #0
 1006a98:	d042      	beq.n	1006b20 <udd_ep_interrupt+0x130>
					// Send remaining
					udd_set_transmit_ready(ep);
 1006a9a:	4a77      	ldr	r2, [pc, #476]	; (1006c78 <udd_ep_interrupt+0x288>)
 1006a9c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 1006aa0:	330c      	adds	r3, #12
 1006aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 1006aa6:	62bb      	str	r3, [r7, #40]	; 0x28
 1006aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 1006aaa:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
 1006aae:	62bb      	str	r3, [r7, #40]	; 0x28
 1006ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 1006ab2:	f043 0310 	orr.w	r3, r3, #16
 1006ab6:	62bb      	str	r3, [r7, #40]	; 0x28
 1006ab8:	496f      	ldr	r1, [pc, #444]	; (1006c78 <udd_ep_interrupt+0x288>)
 1006aba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 1006abe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 1006ac0:	330c      	adds	r3, #12
 1006ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 1006ac6:	bf00      	nop
 1006ac8:	4a6b      	ldr	r2, [pc, #428]	; (1006c78 <udd_ep_interrupt+0x288>)
 1006aca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 1006ace:	330c      	adds	r3, #12
 1006ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 1006ad4:	f003 0310 	and.w	r3, r3, #16
 1006ad8:	2b10      	cmp	r3, #16
 1006ada:	d1f5      	bne.n	1006ac8 <udd_ep_interrupt+0xd8>
					udd_ack_in_sent(ep);
 1006adc:	4a66      	ldr	r2, [pc, #408]	; (1006c78 <udd_ep_interrupt+0x288>)
 1006ade:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 1006ae2:	330c      	adds	r3, #12
 1006ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 1006ae8:	627b      	str	r3, [r7, #36]	; 0x24
 1006aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 1006aec:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
 1006af0:	627b      	str	r3, [r7, #36]	; 0x24
 1006af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 1006af4:	f023 0301 	bic.w	r3, r3, #1
 1006af8:	627b      	str	r3, [r7, #36]	; 0x24
 1006afa:	495f      	ldr	r1, [pc, #380]	; (1006c78 <udd_ep_interrupt+0x288>)
 1006afc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 1006b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 1006b02:	330c      	adds	r3, #12
 1006b04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 1006b08:	bf00      	nop
 1006b0a:	4a5b      	ldr	r2, [pc, #364]	; (1006c78 <udd_ep_interrupt+0x288>)
 1006b0c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 1006b10:	330c      	adds	r3, #12
 1006b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 1006b16:	f003 0301 	and.w	r3, r3, #1
 1006b1a:	2b00      	cmp	r3, #0
 1006b1c:	d1f5      	bne.n	1006b0a <udd_ep_interrupt+0x11a>
 1006b1e:	e046      	b.n	1006bae <udd_ep_interrupt+0x1be>
				} else {
					// Ack last packet
					udd_ack_in_sent(ep);
 1006b20:	4a55      	ldr	r2, [pc, #340]	; (1006c78 <udd_ep_interrupt+0x288>)
 1006b22:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 1006b26:	330c      	adds	r3, #12
 1006b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 1006b2c:	623b      	str	r3, [r7, #32]
 1006b2e:	6a3b      	ldr	r3, [r7, #32]
 1006b30:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
 1006b34:	623b      	str	r3, [r7, #32]
 1006b36:	6a3b      	ldr	r3, [r7, #32]
 1006b38:	f023 0301 	bic.w	r3, r3, #1
 1006b3c:	623b      	str	r3, [r7, #32]
 1006b3e:	494e      	ldr	r1, [pc, #312]	; (1006c78 <udd_ep_interrupt+0x288>)
 1006b40:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 1006b44:	6a3a      	ldr	r2, [r7, #32]
 1006b46:	330c      	adds	r3, #12
 1006b48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 1006b4c:	bf00      	nop
 1006b4e:	4a4a      	ldr	r2, [pc, #296]	; (1006c78 <udd_ep_interrupt+0x288>)
 1006b50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 1006b54:	330c      	adds	r3, #12
 1006b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 1006b5a:	f003 0301 	and.w	r3, r3, #1
 1006b5e:	2b00      	cmp	r3, #0
 1006b60:	d1f5      	bne.n	1006b4e <udd_ep_interrupt+0x15e>
					// Enable stall
					udd_enable_stall_handshake(ep);
 1006b62:	4a45      	ldr	r2, [pc, #276]	; (1006c78 <udd_ep_interrupt+0x288>)
 1006b64:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 1006b68:	330c      	adds	r3, #12
 1006b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 1006b6e:	61fb      	str	r3, [r7, #28]
 1006b70:	69fb      	ldr	r3, [r7, #28]
 1006b72:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
 1006b76:	61fb      	str	r3, [r7, #28]
 1006b78:	69fb      	ldr	r3, [r7, #28]
 1006b7a:	f043 0320 	orr.w	r3, r3, #32
 1006b7e:	61fb      	str	r3, [r7, #28]
 1006b80:	493d      	ldr	r1, [pc, #244]	; (1006c78 <udd_ep_interrupt+0x288>)
 1006b82:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 1006b86:	69fa      	ldr	r2, [r7, #28]
 1006b88:	330c      	adds	r3, #12
 1006b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 1006b8e:	bf00      	nop
 1006b90:	4a39      	ldr	r2, [pc, #228]	; (1006c78 <udd_ep_interrupt+0x288>)
 1006b92:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 1006b96:	330c      	adds	r3, #12
 1006b98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 1006b9c:	f003 0320 	and.w	r3, r3, #32
 1006ba0:	2b20      	cmp	r3, #32
 1006ba2:	d1f5      	bne.n	1006b90 <udd_ep_interrupt+0x1a0>
					// Halt executed
					ptr_job->b_stall_requested = false;
 1006ba4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 1006ba6:	7c53      	ldrb	r3, [r2, #17]
 1006ba8:	f36f 1345 	bfc	r3, #5, #1
 1006bac:	7453      	strb	r3, [r2, #17]
				}
				return true;
 1006bae:	2301      	movs	r3, #1
 1006bb0:	e18c      	b.n	1006ecc <udd_ep_interrupt+0x4dc>
			}
			// Finish Job when buffer end
			if (ptr_job->b_buf_end) {
 1006bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 1006bb4:	7c5b      	ldrb	r3, [r3, #17]
 1006bb6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 1006bba:	b2db      	uxtb	r3, r3
 1006bbc:	2b00      	cmp	r3, #0
 1006bbe:	d016      	beq.n	1006bee <udd_ep_interrupt+0x1fe>
				ptr_job->b_buf_end = false;
 1006bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 1006bc2:	7c53      	ldrb	r3, [r2, #17]
 1006bc4:	f36f 13c7 	bfc	r3, #7, #1
 1006bc8:	7453      	strb	r3, [r2, #17]
				ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
 1006bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 1006bcc:	68da      	ldr	r2, [r3, #12]
 1006bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 1006bd0:	609a      	str	r2, [r3, #8]
                udd_disable_endpoint_interrupt(ep);
 1006bd2:	4a29      	ldr	r2, [pc, #164]	; (1006c78 <udd_ep_interrupt+0x288>)
 1006bd4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 1006bd8:	2101      	movs	r1, #1
 1006bda:	fa01 f303 	lsl.w	r3, r1, r3
 1006bde:	6153      	str	r3, [r2, #20]
                udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
 1006be0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 1006be4:	461a      	mov	r2, r3
 1006be6:	2100      	movs	r1, #0
 1006be8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 1006bea:	4b26      	ldr	r3, [pc, #152]	; (1006c84 <udd_ep_interrupt+0x294>)
 1006bec:	4798      	blx	r3
			}
			if (ptr_job->buf_cnt >= ptr_job->buf_size &&
 1006bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 1006bf0:	68da      	ldr	r2, [r3, #12]
 1006bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 1006bf4:	689b      	ldr	r3, [r3, #8]
 1006bf6:	429a      	cmp	r2, r3
 1006bf8:	d34a      	bcc.n	1006c90 <udd_ep_interrupt+0x2a0>
					!ptr_job->b_shortpacket &&
 1006bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 1006bfc:	7c5b      	ldrb	r3, [r3, #17]
 1006bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 1006c02:	b2db      	uxtb	r3, r3
			if (ptr_job->buf_cnt >= ptr_job->buf_size &&
 1006c04:	2b00      	cmp	r3, #0
 1006c06:	d143      	bne.n	1006c90 <udd_ep_interrupt+0x2a0>
					ptr_job->bank == 0) {
 1006c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 1006c0a:	7c5b      	ldrb	r3, [r3, #17]
 1006c0c:	f003 030c 	and.w	r3, r3, #12
 1006c10:	b2db      	uxtb	r3, r3
					!ptr_job->b_shortpacket &&
 1006c12:	2b00      	cmp	r3, #0
 1006c14:	d13c      	bne.n	1006c90 <udd_ep_interrupt+0x2a0>
				// All transfer done, including ZLP
				irqflags_t flags = cpu_irq_save();
 1006c16:	4b1c      	ldr	r3, [pc, #112]	; (1006c88 <udd_ep_interrupt+0x298>)
 1006c18:	4798      	blx	r3
 1006c1a:	62f8      	str	r0, [r7, #44]	; 0x2c
				udd_disable_endpoint_interrupt(ep);
 1006c1c:	4a16      	ldr	r2, [pc, #88]	; (1006c78 <udd_ep_interrupt+0x288>)
 1006c1e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 1006c22:	2101      	movs	r1, #1
 1006c24:	fa01 f303 	lsl.w	r3, r1, r3
 1006c28:	6153      	str	r3, [r2, #20]
				cpu_irq_restore(flags);
 1006c2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 1006c2c:	4b17      	ldr	r3, [pc, #92]	; (1006c8c <udd_ep_interrupt+0x29c>)
 1006c2e:	4798      	blx	r3
				// Ack last packet
				udd_ack_in_sent(ep);
 1006c30:	4a11      	ldr	r2, [pc, #68]	; (1006c78 <udd_ep_interrupt+0x288>)
 1006c32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 1006c36:	330c      	adds	r3, #12
 1006c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 1006c3c:	61bb      	str	r3, [r7, #24]
 1006c3e:	69bb      	ldr	r3, [r7, #24]
 1006c40:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
 1006c44:	61bb      	str	r3, [r7, #24]
 1006c46:	69bb      	ldr	r3, [r7, #24]
 1006c48:	f023 0301 	bic.w	r3, r3, #1
 1006c4c:	61bb      	str	r3, [r7, #24]
 1006c4e:	490a      	ldr	r1, [pc, #40]	; (1006c78 <udd_ep_interrupt+0x288>)
 1006c50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 1006c54:	69ba      	ldr	r2, [r7, #24]
 1006c56:	330c      	adds	r3, #12
 1006c58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 1006c5c:	bf00      	nop
 1006c5e:	4a06      	ldr	r2, [pc, #24]	; (1006c78 <udd_ep_interrupt+0x288>)
 1006c60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 1006c64:	330c      	adds	r3, #12
 1006c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 1006c6a:	f003 0301 	and.w	r3, r3, #1
 1006c6e:	2b00      	cmp	r3, #0
 1006c70:	d1f5      	bne.n	1006c5e <udd_ep_interrupt+0x26e>
				return true;
 1006c72:	2301      	movs	r3, #1
 1006c74:	e12a      	b.n	1006ecc <udd_ep_interrupt+0x4dc>
 1006c76:	bf00      	nop
 1006c78:	40044000 	.word	0x40044000
 1006c7c:	20001ed0 	.word	0x20001ed0
 1006c80:	010068e1 	.word	0x010068e1
 1006c84:	010064c1 	.word	0x010064c1
 1006c88:	01004f59 	.word	0x01004f59
 1006c8c:	01004fb1 	.word	0x01004fb1
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1
 1006c90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 1006c94:	2b00      	cmp	r3, #0
 1006c96:	d053      	beq.n	1006d40 <udd_ep_interrupt+0x350>
 1006c98:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 1006c9c:	2b03      	cmp	r3, #3
 1006c9e:	d04f      	beq.n	1006d40 <udd_ep_interrupt+0x350>
					&& ptr_job->bank > 0) {
 1006ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 1006ca2:	7c5b      	ldrb	r3, [r3, #17]
 1006ca4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 1006ca8:	b2db      	uxtb	r3, r3
 1006caa:	2b00      	cmp	r3, #0
 1006cac:	dd48      	ble.n	1006d40 <udd_ep_interrupt+0x350>
				// Already banks buffered, transmit while loading
				udd_set_transmit_ready(ep);
 1006cae:	4a89      	ldr	r2, [pc, #548]	; (1006ed4 <udd_ep_interrupt+0x4e4>)
 1006cb0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 1006cb4:	330c      	adds	r3, #12
 1006cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 1006cba:	617b      	str	r3, [r7, #20]
 1006cbc:	697b      	ldr	r3, [r7, #20]
 1006cbe:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
 1006cc2:	617b      	str	r3, [r7, #20]
 1006cc4:	697b      	ldr	r3, [r7, #20]
 1006cc6:	f043 0310 	orr.w	r3, r3, #16
 1006cca:	617b      	str	r3, [r7, #20]
 1006ccc:	4981      	ldr	r1, [pc, #516]	; (1006ed4 <udd_ep_interrupt+0x4e4>)
 1006cce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 1006cd2:	697a      	ldr	r2, [r7, #20]
 1006cd4:	330c      	adds	r3, #12
 1006cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 1006cda:	bf00      	nop
 1006cdc:	4a7d      	ldr	r2, [pc, #500]	; (1006ed4 <udd_ep_interrupt+0x4e4>)
 1006cde:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 1006ce2:	330c      	adds	r3, #12
 1006ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 1006ce8:	f003 0310 	and.w	r3, r3, #16
 1006cec:	2b10      	cmp	r3, #16
 1006cee:	d1f5      	bne.n	1006cdc <udd_ep_interrupt+0x2ec>
				udd_ack_in_sent(ep);
 1006cf0:	4a78      	ldr	r2, [pc, #480]	; (1006ed4 <udd_ep_interrupt+0x4e4>)
 1006cf2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 1006cf6:	330c      	adds	r3, #12
 1006cf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 1006cfc:	613b      	str	r3, [r7, #16]
 1006cfe:	693b      	ldr	r3, [r7, #16]
 1006d00:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
 1006d04:	613b      	str	r3, [r7, #16]
 1006d06:	693b      	ldr	r3, [r7, #16]
 1006d08:	f023 0301 	bic.w	r3, r3, #1
 1006d0c:	613b      	str	r3, [r7, #16]
 1006d0e:	4971      	ldr	r1, [pc, #452]	; (1006ed4 <udd_ep_interrupt+0x4e4>)
 1006d10:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 1006d14:	693a      	ldr	r2, [r7, #16]
 1006d16:	330c      	adds	r3, #12
 1006d18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 1006d1c:	bf00      	nop
 1006d1e:	4a6d      	ldr	r2, [pc, #436]	; (1006ed4 <udd_ep_interrupt+0x4e4>)
 1006d20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 1006d24:	330c      	adds	r3, #12
 1006d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 1006d2a:	f003 0301 	and.w	r3, r3, #1
 1006d2e:	2b00      	cmp	r3, #0
 1006d30:	d1f5      	bne.n	1006d1e <udd_ep_interrupt+0x32e>
				udd_ep_in_sent(ep, false);
 1006d32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 1006d36:	2100      	movs	r1, #0
 1006d38:	4618      	mov	r0, r3
 1006d3a:	4b67      	ldr	r3, [pc, #412]	; (1006ed8 <udd_ep_interrupt+0x4e8>)
 1006d3c:	4798      	blx	r3
 1006d3e:	e079      	b.n	1006e34 <udd_ep_interrupt+0x444>
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
 1006d40:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 1006d44:	2b00      	cmp	r3, #0
 1006d46:	d04e      	beq.n	1006de6 <udd_ep_interrupt+0x3f6>
 1006d48:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 1006d4c:	2b03      	cmp	r3, #3
 1006d4e:	d04a      	beq.n	1006de6 <udd_ep_interrupt+0x3f6>
				// Still bank free, load and transmit
				if (!udd_ep_in_sent(ep, true)) {
 1006d50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 1006d54:	2101      	movs	r1, #1
 1006d56:	4618      	mov	r0, r3
 1006d58:	4b5f      	ldr	r3, [pc, #380]	; (1006ed8 <udd_ep_interrupt+0x4e8>)
 1006d5a:	4798      	blx	r3
 1006d5c:	4603      	mov	r3, r0
 1006d5e:	f083 0301 	eor.w	r3, r3, #1
 1006d62:	b2db      	uxtb	r3, r3
 1006d64:	2b00      	cmp	r3, #0
 1006d66:	d016      	beq.n	1006d96 <udd_ep_interrupt+0x3a6>
					ptr_job->b_buf_end = false;
 1006d68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 1006d6a:	7c53      	ldrb	r3, [r2, #17]
 1006d6c:	f36f 13c7 	bfc	r3, #7, #1
 1006d70:	7453      	strb	r3, [r2, #17]
					ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
 1006d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 1006d74:	68da      	ldr	r2, [r3, #12]
 1006d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 1006d78:	609a      	str	r2, [r3, #8]
                    udd_disable_endpoint_interrupt(ep);
 1006d7a:	4a56      	ldr	r2, [pc, #344]	; (1006ed4 <udd_ep_interrupt+0x4e4>)
 1006d7c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 1006d80:	2101      	movs	r1, #1
 1006d82:	fa01 f303 	lsl.w	r3, r1, r3
 1006d86:	6153      	str	r3, [r2, #20]
                    udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
 1006d88:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 1006d8c:	461a      	mov	r2, r3
 1006d8e:	2100      	movs	r1, #0
 1006d90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 1006d92:	4b52      	ldr	r3, [pc, #328]	; (1006edc <udd_ep_interrupt+0x4ec>)
 1006d94:	4798      	blx	r3
				}
				udd_ack_in_sent(ep);
 1006d96:	4a4f      	ldr	r2, [pc, #316]	; (1006ed4 <udd_ep_interrupt+0x4e4>)
 1006d98:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 1006d9c:	330c      	adds	r3, #12
 1006d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 1006da2:	60fb      	str	r3, [r7, #12]
 1006da4:	68fb      	ldr	r3, [r7, #12]
 1006da6:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
 1006daa:	60fb      	str	r3, [r7, #12]
 1006dac:	68fb      	ldr	r3, [r7, #12]
 1006dae:	f023 0301 	bic.w	r3, r3, #1
 1006db2:	60fb      	str	r3, [r7, #12]
 1006db4:	4947      	ldr	r1, [pc, #284]	; (1006ed4 <udd_ep_interrupt+0x4e4>)
 1006db6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 1006dba:	68fa      	ldr	r2, [r7, #12]
 1006dbc:	330c      	adds	r3, #12
 1006dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 1006dc2:	bf00      	nop
 1006dc4:	4a43      	ldr	r2, [pc, #268]	; (1006ed4 <udd_ep_interrupt+0x4e4>)
 1006dc6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 1006dca:	330c      	adds	r3, #12
 1006dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 1006dd0:	f003 0301 	and.w	r3, r3, #1
 1006dd4:	2b00      	cmp	r3, #0
 1006dd6:	d1f5      	bne.n	1006dc4 <udd_ep_interrupt+0x3d4>
				udd_ep_in_sent(ep, false);
 1006dd8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 1006ddc:	2100      	movs	r1, #0
 1006dde:	4618      	mov	r0, r3
 1006de0:	4b3d      	ldr	r3, [pc, #244]	; (1006ed8 <udd_ep_interrupt+0x4e8>)
 1006de2:	4798      	blx	r3
 1006de4:	e026      	b.n	1006e34 <udd_ep_interrupt+0x444>
			} else {
				// Single bank transfer, ack when ready
				udd_ep_in_sent(ep, true);
 1006de6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 1006dea:	2101      	movs	r1, #1
 1006dec:	4618      	mov	r0, r3
 1006dee:	4b3a      	ldr	r3, [pc, #232]	; (1006ed8 <udd_ep_interrupt+0x4e8>)
 1006df0:	4798      	blx	r3
				udd_ack_in_sent(ep);
 1006df2:	4a38      	ldr	r2, [pc, #224]	; (1006ed4 <udd_ep_interrupt+0x4e4>)
 1006df4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 1006df8:	330c      	adds	r3, #12
 1006dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 1006dfe:	60bb      	str	r3, [r7, #8]
 1006e00:	68bb      	ldr	r3, [r7, #8]
 1006e02:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
 1006e06:	60bb      	str	r3, [r7, #8]
 1006e08:	68bb      	ldr	r3, [r7, #8]
 1006e0a:	f023 0301 	bic.w	r3, r3, #1
 1006e0e:	60bb      	str	r3, [r7, #8]
 1006e10:	4930      	ldr	r1, [pc, #192]	; (1006ed4 <udd_ep_interrupt+0x4e4>)
 1006e12:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 1006e16:	68ba      	ldr	r2, [r7, #8]
 1006e18:	330c      	adds	r3, #12
 1006e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 1006e1e:	bf00      	nop
 1006e20:	4a2c      	ldr	r2, [pc, #176]	; (1006ed4 <udd_ep_interrupt+0x4e4>)
 1006e22:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 1006e26:	330c      	adds	r3, #12
 1006e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 1006e2c:	f003 0301 	and.w	r3, r3, #1
 1006e30:	2b00      	cmp	r3, #0
 1006e32:	d1f5      	bne.n	1006e20 <udd_ep_interrupt+0x430>
			}
			return true;
 1006e34:	2301      	movs	r3, #1
 1006e36:	e049      	b.n	1006ecc <udd_ep_interrupt+0x4dc>
		}
		// Stall sent/CRC error
		if (Is_udd_stall(ep)) {
 1006e38:	4a26      	ldr	r2, [pc, #152]	; (1006ed4 <udd_ep_interrupt+0x4e4>)
 1006e3a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 1006e3e:	330c      	adds	r3, #12
 1006e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 1006e44:	f003 0308 	and.w	r3, r3, #8
 1006e48:	2b00      	cmp	r3, #0
 1006e4a:	d034      	beq.n	1006eb6 <udd_ep_interrupt+0x4c6>
			udd_ack_stall(ep);
 1006e4c:	4a21      	ldr	r2, [pc, #132]	; (1006ed4 <udd_ep_interrupt+0x4e4>)
 1006e4e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 1006e52:	330c      	adds	r3, #12
 1006e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 1006e58:	607b      	str	r3, [r7, #4]
 1006e5a:	687b      	ldr	r3, [r7, #4]
 1006e5c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
 1006e60:	607b      	str	r3, [r7, #4]
 1006e62:	687b      	ldr	r3, [r7, #4]
 1006e64:	f023 0308 	bic.w	r3, r3, #8
 1006e68:	607b      	str	r3, [r7, #4]
 1006e6a:	491a      	ldr	r1, [pc, #104]	; (1006ed4 <udd_ep_interrupt+0x4e4>)
 1006e6c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 1006e70:	687a      	ldr	r2, [r7, #4]
 1006e72:	330c      	adds	r3, #12
 1006e74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 1006e78:	bf00      	nop
 1006e7a:	4a16      	ldr	r2, [pc, #88]	; (1006ed4 <udd_ep_interrupt+0x4e4>)
 1006e7c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 1006e80:	330c      	adds	r3, #12
 1006e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 1006e86:	f003 0308 	and.w	r3, r3, #8
 1006e8a:	2b00      	cmp	r3, #0
 1006e8c:	d1f5      	bne.n	1006e7a <udd_ep_interrupt+0x48a>
			if (udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_OUT ||
 1006e8e:	4a11      	ldr	r2, [pc, #68]	; (1006ed4 <udd_ep_interrupt+0x4e4>)
 1006e90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 1006e94:	330c      	adds	r3, #12
 1006e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 1006e9a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 1006e9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 1006ea2:	d005      	beq.n	1006eb0 <udd_ep_interrupt+0x4c0>
				udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_IN) {
 1006ea4:	4a0b      	ldr	r2, [pc, #44]	; (1006ed4 <udd_ep_interrupt+0x4e4>)
 1006ea6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 1006eaa:	330c      	adds	r3, #12
 1006eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			}
			return true;
 1006eb0:	2301      	movs	r3, #1
 1006eb2:	e00b      	b.n	1006ecc <udd_ep_interrupt+0x4dc>
			continue;
 1006eb4:	bf00      	nop
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
 1006eb6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 1006eba:	3301      	adds	r3, #1
 1006ebc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 1006ec0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 1006ec4:	2b03      	cmp	r3, #3
 1006ec6:	f67f ad9a 	bls.w	10069fe <udd_ep_interrupt+0xe>
		}
	}
	return false;
 1006eca:	2300      	movs	r3, #0
}
 1006ecc:	4618      	mov	r0, r3
 1006ece:	3738      	adds	r7, #56	; 0x38
 1006ed0:	46bd      	mov	sp, r7
 1006ed2:	bd80      	pop	{r7, pc}
 1006ed4:	40044000 	.word	0x40044000
 1006ed8:	010067dd 	.word	0x010067dd
 1006edc:	010064c1 	.word	0x010064c1

01006ee0 <wdt_get_timeout_value>:
 *
 * \return If the desired period is beyond the watchdog period, this function
 * returns WDT_INVALID_ARGUMENT. Otherwise it returns valid value.
 */
uint32_t wdt_get_timeout_value(uint32_t ul_us, uint32_t ul_sclk)
{
 1006ee0:	b480      	push	{r7}
 1006ee2:	b085      	sub	sp, #20
 1006ee4:	af00      	add	r7, sp, #0
 1006ee6:	6078      	str	r0, [r7, #4]
 1006ee8:	6039      	str	r1, [r7, #0]
	uint32_t max, min;

	min = WDT_SLCK_DIV * 1000000 / ul_sclk;
 1006eea:	4a10      	ldr	r2, [pc, #64]	; (1006f2c <wdt_get_timeout_value+0x4c>)
 1006eec:	683b      	ldr	r3, [r7, #0]
 1006eee:	fbb2 f3f3 	udiv	r3, r2, r3
 1006ef2:	60fb      	str	r3, [r7, #12]
	max = min * WDT_MAX_VALUE;
 1006ef4:	68fa      	ldr	r2, [r7, #12]
 1006ef6:	4613      	mov	r3, r2
 1006ef8:	031b      	lsls	r3, r3, #12
 1006efa:	1a9b      	subs	r3, r3, r2
 1006efc:	60bb      	str	r3, [r7, #8]

	if ((ul_us < min) || (ul_us > max)) {
 1006efe:	687a      	ldr	r2, [r7, #4]
 1006f00:	68fb      	ldr	r3, [r7, #12]
 1006f02:	429a      	cmp	r2, r3
 1006f04:	d303      	bcc.n	1006f0e <wdt_get_timeout_value+0x2e>
 1006f06:	687a      	ldr	r2, [r7, #4]
 1006f08:	68bb      	ldr	r3, [r7, #8]
 1006f0a:	429a      	cmp	r2, r3
 1006f0c:	d902      	bls.n	1006f14 <wdt_get_timeout_value+0x34>
		return WDT_INVALID_ARGUMENT;
 1006f0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 1006f12:	e005      	b.n	1006f20 <wdt_get_timeout_value+0x40>
	}

	return WDT_MR_WDV(ul_us / min);
 1006f14:	687a      	ldr	r2, [r7, #4]
 1006f16:	68fb      	ldr	r3, [r7, #12]
 1006f18:	fbb2 f3f3 	udiv	r3, r2, r3
 1006f1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 1006f20:	4618      	mov	r0, r3
 1006f22:	3714      	adds	r7, #20
 1006f24:	46bd      	mov	sp, r7
 1006f26:	bc80      	pop	{r7}
 1006f28:	4770      	bx	lr
 1006f2a:	bf00      	nop
 1006f2c:	07a12000 	.word	0x07a12000

01006f30 <wdt_init>:
 * \param us_counter The value loaded in the 12-bit Watchdog Counter.
 * \param us_delta The permitted range for reloading the Watchdog Timer.
 */
void wdt_init(Wdt *p_wdt, uint32_t ul_mode, uint16_t us_counter,
		uint16_t us_delta)
{
 1006f30:	b480      	push	{r7}
 1006f32:	b085      	sub	sp, #20
 1006f34:	af00      	add	r7, sp, #0
 1006f36:	60f8      	str	r0, [r7, #12]
 1006f38:	60b9      	str	r1, [r7, #8]
 1006f3a:	4611      	mov	r1, r2
 1006f3c:	461a      	mov	r2, r3
 1006f3e:	460b      	mov	r3, r1
 1006f40:	80fb      	strh	r3, [r7, #6]
 1006f42:	4613      	mov	r3, r2
 1006f44:	80bb      	strh	r3, [r7, #4]
	p_wdt->WDT_MR = ul_mode |
			WDT_MR_WDV(us_counter) | WDT_MR_WDD(us_delta);
 1006f46:	88fb      	ldrh	r3, [r7, #6]
 1006f48:	f3c3 020b 	ubfx	r2, r3, #0, #12
	p_wdt->WDT_MR = ul_mode |
 1006f4c:	68bb      	ldr	r3, [r7, #8]
 1006f4e:	431a      	orrs	r2, r3
			WDT_MR_WDV(us_counter) | WDT_MR_WDD(us_delta);
 1006f50:	88bb      	ldrh	r3, [r7, #4]
 1006f52:	041b      	lsls	r3, r3, #16
 1006f54:	4619      	mov	r1, r3
 1006f56:	4b05      	ldr	r3, [pc, #20]	; (1006f6c <wdt_init+0x3c>)
 1006f58:	400b      	ands	r3, r1
 1006f5a:	431a      	orrs	r2, r3
	p_wdt->WDT_MR = ul_mode |
 1006f5c:	68fb      	ldr	r3, [r7, #12]
 1006f5e:	605a      	str	r2, [r3, #4]
}
 1006f60:	bf00      	nop
 1006f62:	3714      	adds	r7, #20
 1006f64:	46bd      	mov	sp, r7
 1006f66:	bc80      	pop	{r7}
 1006f68:	4770      	bx	lr
 1006f6a:	bf00      	nop
 1006f6c:	0fff0000 	.word	0x0fff0000

01006f70 <wdt_restart>:

/**
 * \brief Restart the watchdog timer.
 */
void wdt_restart(Wdt *p_wdt)
{
 1006f70:	b480      	push	{r7}
 1006f72:	b083      	sub	sp, #12
 1006f74:	af00      	add	r7, sp, #0
 1006f76:	6078      	str	r0, [r7, #4]
	if (p_wdt == WDT) {
 1006f78:	687b      	ldr	r3, [r7, #4]
 1006f7a:	4a05      	ldr	r2, [pc, #20]	; (1006f90 <wdt_restart+0x20>)
 1006f7c:	4293      	cmp	r3, r2
 1006f7e:	d102      	bne.n	1006f86 <wdt_restart+0x16>
		p_wdt->WDT_CR = WDT_KEY_PASSWORD | WDT_CR_WDRSTT;
 1006f80:	687b      	ldr	r3, [r7, #4]
 1006f82:	4a04      	ldr	r2, [pc, #16]	; (1006f94 <wdt_restart+0x24>)
 1006f84:	601a      	str	r2, [r3, #0]
#if (SAM4C || SAM4CM || SAM4CP)
	else {
		p_wdt->WDT_CR = RSWDT_CR_KEY(0xC4u) | RSWDT_CR_WDRSTT;
	}
#endif
}
 1006f86:	bf00      	nop
 1006f88:	370c      	adds	r7, #12
 1006f8a:	46bd      	mov	sp, r7
 1006f8c:	bc80      	pop	{r7}
 1006f8e:	4770      	bx	lr
 1006f90:	400e1450 	.word	0x400e1450
 1006f94:	a5000001 	.word	0xa5000001

01006f98 <flash_init>:
 * \param ul_fws The number of wait states in cycle (no shift).
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_init(uint32_t ul_mode, uint32_t ul_fws)
{
 1006f98:	b580      	push	{r7, lr}
 1006f9a:	b082      	sub	sp, #8
 1006f9c:	af00      	add	r7, sp, #0
 1006f9e:	6078      	str	r0, [r7, #4]
 1006fa0:	6039      	str	r1, [r7, #0]
	efc_init(EFC, ul_mode, ul_fws);
 1006fa2:	683a      	ldr	r2, [r7, #0]
 1006fa4:	6879      	ldr	r1, [r7, #4]
 1006fa6:	4804      	ldr	r0, [pc, #16]	; (1006fb8 <flash_init+0x20>)
 1006fa8:	4b04      	ldr	r3, [pc, #16]	; (1006fbc <flash_init+0x24>)
 1006faa:	4798      	blx	r3

#ifdef EFC1
	efc_init(EFC1, ul_mode, ul_fws);
#endif

	return FLASH_RC_OK;
 1006fac:	2300      	movs	r3, #0
}
 1006fae:	4618      	mov	r0, r3
 1006fb0:	3708      	adds	r7, #8
 1006fb2:	46bd      	mov	sp, r7
 1006fb4:	bd80      	pop	{r7, pc}
 1006fb6:	bf00      	nop
 1006fb8:	400e0a00 	.word	0x400e0a00
 1006fbc:	01004215 	.word	0x01004215

01006fc0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
 1006fc0:	b580      	push	{r7, lr}
 1006fc2:	b082      	sub	sp, #8
 1006fc4:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
 1006fc6:	4b1d      	ldr	r3, [pc, #116]	; (100703c <Reset_Handler+0x7c>)
 1006fc8:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
 1006fca:	4b1d      	ldr	r3, [pc, #116]	; (1007040 <Reset_Handler+0x80>)
 1006fcc:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
 1006fce:	687a      	ldr	r2, [r7, #4]
 1006fd0:	683b      	ldr	r3, [r7, #0]
 1006fd2:	429a      	cmp	r2, r3
 1006fd4:	d00c      	beq.n	1006ff0 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
 1006fd6:	e007      	b.n	1006fe8 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
 1006fd8:	683b      	ldr	r3, [r7, #0]
 1006fda:	1d1a      	adds	r2, r3, #4
 1006fdc:	603a      	str	r2, [r7, #0]
 1006fde:	687a      	ldr	r2, [r7, #4]
 1006fe0:	1d11      	adds	r1, r2, #4
 1006fe2:	6079      	str	r1, [r7, #4]
 1006fe4:	6812      	ldr	r2, [r2, #0]
 1006fe6:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
 1006fe8:	683b      	ldr	r3, [r7, #0]
 1006fea:	4a16      	ldr	r2, [pc, #88]	; (1007044 <Reset_Handler+0x84>)
 1006fec:	4293      	cmp	r3, r2
 1006fee:	d3f3      	bcc.n	1006fd8 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 1006ff0:	4b15      	ldr	r3, [pc, #84]	; (1007048 <Reset_Handler+0x88>)
 1006ff2:	603b      	str	r3, [r7, #0]
 1006ff4:	e004      	b.n	1007000 <Reset_Handler+0x40>
                *pDest++ = 0;
 1006ff6:	683b      	ldr	r3, [r7, #0]
 1006ff8:	1d1a      	adds	r2, r3, #4
 1006ffa:	603a      	str	r2, [r7, #0]
 1006ffc:	2200      	movs	r2, #0
 1006ffe:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
 1007000:	683b      	ldr	r3, [r7, #0]
 1007002:	4a12      	ldr	r2, [pc, #72]	; (100704c <Reset_Handler+0x8c>)
 1007004:	4293      	cmp	r3, r2
 1007006:	d3f6      	bcc.n	1006ff6 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
 1007008:	4b11      	ldr	r3, [pc, #68]	; (1007050 <Reset_Handler+0x90>)
 100700a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 100700c:	4a11      	ldr	r2, [pc, #68]	; (1007054 <Reset_Handler+0x94>)
 100700e:	687b      	ldr	r3, [r7, #4]
 1007010:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 1007014:	6093      	str	r3, [r2, #8]

#if __FPU_USED
	fpu_enable();
#endif

	if (((uint32_t) pSrc >= IRAM_ADDR) && ((uint32_t) pSrc < IRAM_ADDR + IRAM_SIZE)) {
 1007016:	687b      	ldr	r3, [r7, #4]
 1007018:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 100701c:	d309      	bcc.n	1007032 <Reset_Handler+0x72>
 100701e:	687b      	ldr	r3, [r7, #4]
 1007020:	4a0d      	ldr	r2, [pc, #52]	; (1007058 <Reset_Handler+0x98>)
 1007022:	4293      	cmp	r3, r2
 1007024:	d805      	bhi.n	1007032 <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
 1007026:	4a0b      	ldr	r2, [pc, #44]	; (1007054 <Reset_Handler+0x94>)
 1007028:	4b0a      	ldr	r3, [pc, #40]	; (1007054 <Reset_Handler+0x94>)
 100702a:	689b      	ldr	r3, [r3, #8]
 100702c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 1007030:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
 1007032:	4b0a      	ldr	r3, [pc, #40]	; (100705c <Reset_Handler+0x9c>)
 1007034:	4798      	blx	r3

        /* Branch to main function */
        main();
 1007036:	4b0a      	ldr	r3, [pc, #40]	; (1007060 <Reset_Handler+0xa0>)
 1007038:	4798      	blx	r3

        /* Infinite loop */
        while (1);
 100703a:	e7fe      	b.n	100703a <Reset_Handler+0x7a>
 100703c:	010225f8 	.word	0x010225f8
 1007040:	20000000 	.word	0x20000000
 1007044:	20000f98 	.word	0x20000f98
 1007048:	20000f98 	.word	0x20000f98
 100704c:	20008358 	.word	0x20008358
 1007050:	01000000 	.word	0x01000000
 1007054:	e000ed00 	.word	0xe000ed00
 1007058:	20027fff 	.word	0x20027fff
 100705c:	0100be65 	.word	0x0100be65
 1007060:	0100a5e1 	.word	0x0100a5e1

01007064 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 1007064:	b480      	push	{r7}
 1007066:	af00      	add	r7, sp, #0
        while (1) {
 1007068:	e7fe      	b.n	1007068 <Dummy_Handler+0x4>
	...

0100706c <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
 100706c:	b480      	push	{r7}
 100706e:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
 1007070:	4b41      	ldr	r3, [pc, #260]	; (1007178 <SystemCoreClockUpdate+0x10c>)
 1007072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 1007074:	f003 0303 	and.w	r3, r3, #3
 1007078:	2b01      	cmp	r3, #1
 100707a:	d014      	beq.n	10070a6 <SystemCoreClockUpdate+0x3a>
 100707c:	2b01      	cmp	r3, #1
 100707e:	d302      	bcc.n	1007086 <SystemCoreClockUpdate+0x1a>
 1007080:	2b02      	cmp	r3, #2
 1007082:	d038      	beq.n	10070f6 <SystemCoreClockUpdate+0x8a>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
					CKGR_PLLAR_MULA_Pos) + 1U);
		}
		break;
	default:
		break;
 1007084:	e059      	b.n	100713a <SystemCoreClockUpdate+0xce>
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
 1007086:	4b3d      	ldr	r3, [pc, #244]	; (100717c <SystemCoreClockUpdate+0x110>)
 1007088:	695b      	ldr	r3, [r3, #20]
 100708a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 100708e:	2b00      	cmp	r3, #0
 1007090:	d004      	beq.n	100709c <SystemCoreClockUpdate+0x30>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
 1007092:	4b3b      	ldr	r3, [pc, #236]	; (1007180 <SystemCoreClockUpdate+0x114>)
 1007094:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 1007098:	601a      	str	r2, [r3, #0]
		break;
 100709a:	e04e      	b.n	100713a <SystemCoreClockUpdate+0xce>
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
 100709c:	4b38      	ldr	r3, [pc, #224]	; (1007180 <SystemCoreClockUpdate+0x114>)
 100709e:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 10070a2:	601a      	str	r2, [r3, #0]
		break;
 10070a4:	e049      	b.n	100713a <SystemCoreClockUpdate+0xce>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
 10070a6:	4b34      	ldr	r3, [pc, #208]	; (1007178 <SystemCoreClockUpdate+0x10c>)
 10070a8:	6a1b      	ldr	r3, [r3, #32]
 10070aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 10070ae:	2b00      	cmp	r3, #0
 10070b0:	d003      	beq.n	10070ba <SystemCoreClockUpdate+0x4e>
			SystemCoreClock = CHIP_FREQ_XTAL;
 10070b2:	4b33      	ldr	r3, [pc, #204]	; (1007180 <SystemCoreClockUpdate+0x114>)
 10070b4:	4a33      	ldr	r2, [pc, #204]	; (1007184 <SystemCoreClockUpdate+0x118>)
 10070b6:	601a      	str	r2, [r3, #0]
		break;
 10070b8:	e03f      	b.n	100713a <SystemCoreClockUpdate+0xce>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
 10070ba:	4b31      	ldr	r3, [pc, #196]	; (1007180 <SystemCoreClockUpdate+0x114>)
 10070bc:	4a32      	ldr	r2, [pc, #200]	; (1007188 <SystemCoreClockUpdate+0x11c>)
 10070be:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
 10070c0:	4b2d      	ldr	r3, [pc, #180]	; (1007178 <SystemCoreClockUpdate+0x10c>)
 10070c2:	6a1b      	ldr	r3, [r3, #32]
 10070c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 10070c8:	2b10      	cmp	r3, #16
 10070ca:	d004      	beq.n	10070d6 <SystemCoreClockUpdate+0x6a>
 10070cc:	2b20      	cmp	r3, #32
 10070ce:	d008      	beq.n	10070e2 <SystemCoreClockUpdate+0x76>
 10070d0:	2b00      	cmp	r3, #0
 10070d2:	d00e      	beq.n	10070f2 <SystemCoreClockUpdate+0x86>
				break;
 10070d4:	e00e      	b.n	10070f4 <SystemCoreClockUpdate+0x88>
				SystemCoreClock *= 2U;
 10070d6:	4b2a      	ldr	r3, [pc, #168]	; (1007180 <SystemCoreClockUpdate+0x114>)
 10070d8:	681b      	ldr	r3, [r3, #0]
 10070da:	005b      	lsls	r3, r3, #1
 10070dc:	4a28      	ldr	r2, [pc, #160]	; (1007180 <SystemCoreClockUpdate+0x114>)
 10070de:	6013      	str	r3, [r2, #0]
				break;
 10070e0:	e008      	b.n	10070f4 <SystemCoreClockUpdate+0x88>
				SystemCoreClock *= 3U;
 10070e2:	4b27      	ldr	r3, [pc, #156]	; (1007180 <SystemCoreClockUpdate+0x114>)
 10070e4:	681a      	ldr	r2, [r3, #0]
 10070e6:	4613      	mov	r3, r2
 10070e8:	005b      	lsls	r3, r3, #1
 10070ea:	4413      	add	r3, r2
 10070ec:	4a24      	ldr	r2, [pc, #144]	; (1007180 <SystemCoreClockUpdate+0x114>)
 10070ee:	6013      	str	r3, [r2, #0]
				break;
 10070f0:	e000      	b.n	10070f4 <SystemCoreClockUpdate+0x88>
				break;
 10070f2:	bf00      	nop
		break;
 10070f4:	e021      	b.n	100713a <SystemCoreClockUpdate+0xce>
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
 10070f6:	4b21      	ldr	r3, [pc, #132]	; (100717c <SystemCoreClockUpdate+0x110>)
 10070f8:	695b      	ldr	r3, [r3, #20]
 10070fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 10070fe:	2b00      	cmp	r3, #0
 1007100:	d004      	beq.n	100710c <SystemCoreClockUpdate+0xa0>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
 1007102:	4b1f      	ldr	r3, [pc, #124]	; (1007180 <SystemCoreClockUpdate+0x114>)
 1007104:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 1007108:	601a      	str	r2, [r3, #0]
 100710a:	e003      	b.n	1007114 <SystemCoreClockUpdate+0xa8>
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
 100710c:	4b1c      	ldr	r3, [pc, #112]	; (1007180 <SystemCoreClockUpdate+0x114>)
 100710e:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 1007112:	601a      	str	r2, [r3, #0]
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
 1007114:	4b18      	ldr	r3, [pc, #96]	; (1007178 <SystemCoreClockUpdate+0x10c>)
 1007116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 1007118:	f003 0303 	and.w	r3, r3, #3
 100711c:	2b02      	cmp	r3, #2
 100711e:	d10b      	bne.n	1007138 <SystemCoreClockUpdate+0xcc>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
 1007120:	4b15      	ldr	r3, [pc, #84]	; (1007178 <SystemCoreClockUpdate+0x10c>)
 1007122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 1007124:	0c1b      	lsrs	r3, r3, #16
 1007126:	f3c3 030c 	ubfx	r3, r3, #0, #13
					CKGR_PLLAR_MULA_Pos) + 1U);
 100712a:	3301      	adds	r3, #1
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
 100712c:	4a14      	ldr	r2, [pc, #80]	; (1007180 <SystemCoreClockUpdate+0x114>)
 100712e:	6812      	ldr	r2, [r2, #0]
 1007130:	fb02 f303 	mul.w	r3, r2, r3
 1007134:	4a12      	ldr	r2, [pc, #72]	; (1007180 <SystemCoreClockUpdate+0x114>)
 1007136:	6013      	str	r3, [r2, #0]
		break;
 1007138:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
 100713a:	4b0f      	ldr	r3, [pc, #60]	; (1007178 <SystemCoreClockUpdate+0x10c>)
 100713c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 100713e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 1007142:	2b70      	cmp	r3, #112	; 0x70
 1007144:	d108      	bne.n	1007158 <SystemCoreClockUpdate+0xec>
		SystemCoreClock /= 3U;
 1007146:	4b0e      	ldr	r3, [pc, #56]	; (1007180 <SystemCoreClockUpdate+0x114>)
 1007148:	681b      	ldr	r3, [r3, #0]
 100714a:	4a10      	ldr	r2, [pc, #64]	; (100718c <SystemCoreClockUpdate+0x120>)
 100714c:	fba2 2303 	umull	r2, r3, r2, r3
 1007150:	085b      	lsrs	r3, r3, #1
 1007152:	4a0b      	ldr	r2, [pc, #44]	; (1007180 <SystemCoreClockUpdate+0x114>)
 1007154:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
 1007156:	e00a      	b.n	100716e <SystemCoreClockUpdate+0x102>
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
 1007158:	4b07      	ldr	r3, [pc, #28]	; (1007178 <SystemCoreClockUpdate+0x10c>)
 100715a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 100715c:	091b      	lsrs	r3, r3, #4
 100715e:	f003 0307 	and.w	r3, r3, #7
 1007162:	4a07      	ldr	r2, [pc, #28]	; (1007180 <SystemCoreClockUpdate+0x114>)
 1007164:	6812      	ldr	r2, [r2, #0]
 1007166:	fa22 f303 	lsr.w	r3, r2, r3
 100716a:	4a05      	ldr	r2, [pc, #20]	; (1007180 <SystemCoreClockUpdate+0x114>)
 100716c:	6013      	str	r3, [r2, #0]
}
 100716e:	bf00      	nop
 1007170:	46bd      	mov	sp, r7
 1007172:	bc80      	pop	{r7}
 1007174:	4770      	bx	lr
 1007176:	bf00      	nop
 1007178:	400e0400 	.word	0x400e0400
 100717c:	400e1410 	.word	0x400e1410
 1007180:	200001d8 	.word	0x200001d8
 1007184:	00b71b00 	.word	0x00b71b00
 1007188:	007a1200 	.word	0x007a1200
 100718c:	aaaaaaab 	.word	0xaaaaaaab

01007190 <system_init_flash>:

/** 
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
 1007190:	b480      	push	{r7}
 1007192:	b083      	sub	sp, #12
 1007194:	af00      	add	r7, sp, #0
 1007196:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
 1007198:	687b      	ldr	r3, [r7, #4]
 100719a:	4a18      	ldr	r2, [pc, #96]	; (10071fc <system_init_flash+0x6c>)
 100719c:	4293      	cmp	r3, r2
 100719e:	d804      	bhi.n	10071aa <system_init_flash+0x1a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
 10071a0:	4b17      	ldr	r3, [pc, #92]	; (1007200 <system_init_flash+0x70>)
 10071a2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 10071a6:	601a      	str	r2, [r3, #0]
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
		EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
	} else {
		EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
	}
}
 10071a8:	e023      	b.n	10071f2 <system_init_flash+0x62>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
 10071aa:	687b      	ldr	r3, [r7, #4]
 10071ac:	4a15      	ldr	r2, [pc, #84]	; (1007204 <system_init_flash+0x74>)
 10071ae:	4293      	cmp	r3, r2
 10071b0:	d803      	bhi.n	10071ba <system_init_flash+0x2a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
 10071b2:	4b13      	ldr	r3, [pc, #76]	; (1007200 <system_init_flash+0x70>)
 10071b4:	4a14      	ldr	r2, [pc, #80]	; (1007208 <system_init_flash+0x78>)
 10071b6:	601a      	str	r2, [r3, #0]
}
 10071b8:	e01b      	b.n	10071f2 <system_init_flash+0x62>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
 10071ba:	687b      	ldr	r3, [r7, #4]
 10071bc:	4a13      	ldr	r2, [pc, #76]	; (100720c <system_init_flash+0x7c>)
 10071be:	4293      	cmp	r3, r2
 10071c0:	d803      	bhi.n	10071ca <system_init_flash+0x3a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
 10071c2:	4b0f      	ldr	r3, [pc, #60]	; (1007200 <system_init_flash+0x70>)
 10071c4:	4a12      	ldr	r2, [pc, #72]	; (1007210 <system_init_flash+0x80>)
 10071c6:	601a      	str	r2, [r3, #0]
}
 10071c8:	e013      	b.n	10071f2 <system_init_flash+0x62>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
 10071ca:	687b      	ldr	r3, [r7, #4]
 10071cc:	4a11      	ldr	r2, [pc, #68]	; (1007214 <system_init_flash+0x84>)
 10071ce:	4293      	cmp	r3, r2
 10071d0:	d803      	bhi.n	10071da <system_init_flash+0x4a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
 10071d2:	4b0b      	ldr	r3, [pc, #44]	; (1007200 <system_init_flash+0x70>)
 10071d4:	4a10      	ldr	r2, [pc, #64]	; (1007218 <system_init_flash+0x88>)
 10071d6:	601a      	str	r2, [r3, #0]
}
 10071d8:	e00b      	b.n	10071f2 <system_init_flash+0x62>
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
 10071da:	687b      	ldr	r3, [r7, #4]
 10071dc:	4a0f      	ldr	r2, [pc, #60]	; (100721c <system_init_flash+0x8c>)
 10071de:	4293      	cmp	r3, r2
 10071e0:	d804      	bhi.n	10071ec <system_init_flash+0x5c>
		EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
 10071e2:	4b07      	ldr	r3, [pc, #28]	; (1007200 <system_init_flash+0x70>)
 10071e4:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
 10071e8:	601a      	str	r2, [r3, #0]
}
 10071ea:	e002      	b.n	10071f2 <system_init_flash+0x62>
		EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
 10071ec:	4b04      	ldr	r3, [pc, #16]	; (1007200 <system_init_flash+0x70>)
 10071ee:	4a0c      	ldr	r2, [pc, #48]	; (1007220 <system_init_flash+0x90>)
 10071f0:	601a      	str	r2, [r3, #0]
}
 10071f2:	bf00      	nop
 10071f4:	370c      	adds	r7, #12
 10071f6:	46bd      	mov	sp, r7
 10071f8:	bc80      	pop	{r7}
 10071fa:	4770      	bx	lr
 10071fc:	01312cff 	.word	0x01312cff
 1007200:	400e0a00 	.word	0x400e0a00
 1007204:	026259ff 	.word	0x026259ff
 1007208:	04000100 	.word	0x04000100
 100720c:	039386ff 	.word	0x039386ff
 1007210:	04000200 	.word	0x04000200
 1007214:	04c4b3ff 	.word	0x04c4b3ff
 1007218:	04000300 	.word	0x04000300
 100721c:	05f5e0ff 	.word	0x05f5e0ff
 1007220:	04000500 	.word	0x04000500

01007224 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
 1007224:	b480      	push	{r7}
 1007226:	b085      	sub	sp, #20
 1007228:	af00      	add	r7, sp, #0
 100722a:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
 100722c:	4b10      	ldr	r3, [pc, #64]	; (1007270 <_sbrk+0x4c>)
 100722e:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
 1007230:	4b10      	ldr	r3, [pc, #64]	; (1007274 <_sbrk+0x50>)
 1007232:	681b      	ldr	r3, [r3, #0]
 1007234:	2b00      	cmp	r3, #0
 1007236:	d102      	bne.n	100723e <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
 1007238:	4b0e      	ldr	r3, [pc, #56]	; (1007274 <_sbrk+0x50>)
 100723a:	4a0f      	ldr	r2, [pc, #60]	; (1007278 <_sbrk+0x54>)
 100723c:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
 100723e:	4b0d      	ldr	r3, [pc, #52]	; (1007274 <_sbrk+0x50>)
 1007240:	681b      	ldr	r3, [r3, #0]
 1007242:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
 1007244:	68ba      	ldr	r2, [r7, #8]
 1007246:	687b      	ldr	r3, [r7, #4]
 1007248:	441a      	add	r2, r3
 100724a:	68fb      	ldr	r3, [r7, #12]
 100724c:	429a      	cmp	r2, r3
 100724e:	dd02      	ble.n	1007256 <_sbrk+0x32>
		return (caddr_t) -1;	
 1007250:	f04f 33ff 	mov.w	r3, #4294967295
 1007254:	e006      	b.n	1007264 <_sbrk+0x40>
	}

	heap += incr;
 1007256:	4b07      	ldr	r3, [pc, #28]	; (1007274 <_sbrk+0x50>)
 1007258:	681a      	ldr	r2, [r3, #0]
 100725a:	687b      	ldr	r3, [r7, #4]
 100725c:	4413      	add	r3, r2
 100725e:	4a05      	ldr	r2, [pc, #20]	; (1007274 <_sbrk+0x50>)
 1007260:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
 1007262:	68bb      	ldr	r3, [r7, #8]
}
 1007264:	4618      	mov	r0, r3
 1007266:	3714      	adds	r7, #20
 1007268:	46bd      	mov	sp, r7
 100726a:	bc80      	pop	{r7}
 100726c:	4770      	bx	lr
 100726e:	bf00      	nop
 1007270:	2001fffc 	.word	0x2001fffc
 1007274:	20001f10 	.word	0x20001f10
 1007278:	2000b358 	.word	0x2000b358

0100727c <_close>:
{
	return -1;
}

extern int _close(int file)
{
 100727c:	b480      	push	{r7}
 100727e:	b083      	sub	sp, #12
 1007280:	af00      	add	r7, sp, #0
 1007282:	6078      	str	r0, [r7, #4]
	return -1;
 1007284:	f04f 33ff 	mov.w	r3, #4294967295
}
 1007288:	4618      	mov	r0, r3
 100728a:	370c      	adds	r7, #12
 100728c:	46bd      	mov	sp, r7
 100728e:	bc80      	pop	{r7}
 1007290:	4770      	bx	lr

01007292 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
 1007292:	b480      	push	{r7}
 1007294:	b083      	sub	sp, #12
 1007296:	af00      	add	r7, sp, #0
 1007298:	6078      	str	r0, [r7, #4]
 100729a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 100729c:	683b      	ldr	r3, [r7, #0]
 100729e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 10072a2:	605a      	str	r2, [r3, #4]

	return 0;
 10072a4:	2300      	movs	r3, #0
}
 10072a6:	4618      	mov	r0, r3
 10072a8:	370c      	adds	r7, #12
 10072aa:	46bd      	mov	sp, r7
 10072ac:	bc80      	pop	{r7}
 10072ae:	4770      	bx	lr

010072b0 <_isatty>:

extern int _isatty(int file)
{
 10072b0:	b480      	push	{r7}
 10072b2:	b083      	sub	sp, #12
 10072b4:	af00      	add	r7, sp, #0
 10072b6:	6078      	str	r0, [r7, #4]
	return 1;
 10072b8:	2301      	movs	r3, #1
}
 10072ba:	4618      	mov	r0, r3
 10072bc:	370c      	adds	r7, #12
 10072be:	46bd      	mov	sp, r7
 10072c0:	bc80      	pop	{r7}
 10072c2:	4770      	bx	lr

010072c4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
 10072c4:	b480      	push	{r7}
 10072c6:	b085      	sub	sp, #20
 10072c8:	af00      	add	r7, sp, #0
 10072ca:	60f8      	str	r0, [r7, #12]
 10072cc:	60b9      	str	r1, [r7, #8]
 10072ce:	607a      	str	r2, [r7, #4]
	return 0;
 10072d0:	2300      	movs	r3, #0
}
 10072d2:	4618      	mov	r0, r3
 10072d4:	3714      	adds	r7, #20
 10072d6:	46bd      	mov	sp, r7
 10072d8:	bc80      	pop	{r7}
 10072da:	4770      	bx	lr

010072dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
 10072dc:	b480      	push	{r7}
 10072de:	b083      	sub	sp, #12
 10072e0:	af00      	add	r7, sp, #0
 10072e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 10072e4:	687b      	ldr	r3, [r7, #4]
 10072e6:	f103 0208 	add.w	r2, r3, #8
 10072ea:	687b      	ldr	r3, [r7, #4]
 10072ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 10072ee:	687b      	ldr	r3, [r7, #4]
 10072f0:	f04f 32ff 	mov.w	r2, #4294967295
 10072f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
 10072f6:	687b      	ldr	r3, [r7, #4]
 10072f8:	f103 0208 	add.w	r2, r3, #8
 10072fc:	687b      	ldr	r3, [r7, #4]
 10072fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
 1007300:	687b      	ldr	r3, [r7, #4]
 1007302:	f103 0208 	add.w	r2, r3, #8
 1007306:	687b      	ldr	r3, [r7, #4]
 1007308:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 100730a:	687b      	ldr	r3, [r7, #4]
 100730c:	2200      	movs	r2, #0
 100730e:	601a      	str	r2, [r3, #0]
}
 1007310:	bf00      	nop
 1007312:	370c      	adds	r7, #12
 1007314:	46bd      	mov	sp, r7
 1007316:	bc80      	pop	{r7}
 1007318:	4770      	bx	lr

0100731a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
 100731a:	b480      	push	{r7}
 100731c:	b083      	sub	sp, #12
 100731e:	af00      	add	r7, sp, #0
 1007320:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 1007322:	687b      	ldr	r3, [r7, #4]
 1007324:	2200      	movs	r2, #0
 1007326:	611a      	str	r2, [r3, #16]
}
 1007328:	bf00      	nop
 100732a:	370c      	adds	r7, #12
 100732c:	46bd      	mov	sp, r7
 100732e:	bc80      	pop	{r7}
 1007330:	4770      	bx	lr

01007332 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
 1007332:	b480      	push	{r7}
 1007334:	b085      	sub	sp, #20
 1007336:	af00      	add	r7, sp, #0
 1007338:	6078      	str	r0, [r7, #4]
 100733a:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
 100733c:	687b      	ldr	r3, [r7, #4]
 100733e:	685b      	ldr	r3, [r3, #4]
 1007340:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
 1007342:	68fb      	ldr	r3, [r7, #12]
 1007344:	685a      	ldr	r2, [r3, #4]
 1007346:	683b      	ldr	r3, [r7, #0]
 1007348:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
 100734a:	687b      	ldr	r3, [r7, #4]
 100734c:	685a      	ldr	r2, [r3, #4]
 100734e:	683b      	ldr	r3, [r7, #0]
 1007350:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 1007352:	68fb      	ldr	r3, [r7, #12]
 1007354:	685b      	ldr	r3, [r3, #4]
 1007356:	683a      	ldr	r2, [r7, #0]
 1007358:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 100735a:	68fb      	ldr	r3, [r7, #12]
 100735c:	683a      	ldr	r2, [r7, #0]
 100735e:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 1007360:	687b      	ldr	r3, [r7, #4]
 1007362:	683a      	ldr	r2, [r7, #0]
 1007364:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 1007366:	683b      	ldr	r3, [r7, #0]
 1007368:	687a      	ldr	r2, [r7, #4]
 100736a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 100736c:	687b      	ldr	r3, [r7, #4]
 100736e:	681b      	ldr	r3, [r3, #0]
 1007370:	1c5a      	adds	r2, r3, #1
 1007372:	687b      	ldr	r3, [r7, #4]
 1007374:	601a      	str	r2, [r3, #0]
}
 1007376:	bf00      	nop
 1007378:	3714      	adds	r7, #20
 100737a:	46bd      	mov	sp, r7
 100737c:	bc80      	pop	{r7}
 100737e:	4770      	bx	lr

01007380 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
 1007380:	b480      	push	{r7}
 1007382:	b085      	sub	sp, #20
 1007384:	af00      	add	r7, sp, #0
 1007386:	6078      	str	r0, [r7, #4]
 1007388:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 100738a:	683b      	ldr	r3, [r7, #0]
 100738c:	681b      	ldr	r3, [r3, #0]
 100738e:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 1007390:	68bb      	ldr	r3, [r7, #8]
 1007392:	f1b3 3fff 	cmp.w	r3, #4294967295
 1007396:	d103      	bne.n	10073a0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 1007398:	687b      	ldr	r3, [r7, #4]
 100739a:	691b      	ldr	r3, [r3, #16]
 100739c:	60fb      	str	r3, [r7, #12]
 100739e:	e00c      	b.n	10073ba <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 10073a0:	687b      	ldr	r3, [r7, #4]
 10073a2:	3308      	adds	r3, #8
 10073a4:	60fb      	str	r3, [r7, #12]
 10073a6:	e002      	b.n	10073ae <vListInsert+0x2e>
 10073a8:	68fb      	ldr	r3, [r7, #12]
 10073aa:	685b      	ldr	r3, [r3, #4]
 10073ac:	60fb      	str	r3, [r7, #12]
 10073ae:	68fb      	ldr	r3, [r7, #12]
 10073b0:	685b      	ldr	r3, [r3, #4]
 10073b2:	681a      	ldr	r2, [r3, #0]
 10073b4:	68bb      	ldr	r3, [r7, #8]
 10073b6:	429a      	cmp	r2, r3
 10073b8:	d9f6      	bls.n	10073a8 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 10073ba:	68fb      	ldr	r3, [r7, #12]
 10073bc:	685a      	ldr	r2, [r3, #4]
 10073be:	683b      	ldr	r3, [r7, #0]
 10073c0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 10073c2:	683b      	ldr	r3, [r7, #0]
 10073c4:	685b      	ldr	r3, [r3, #4]
 10073c6:	683a      	ldr	r2, [r7, #0]
 10073c8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 10073ca:	683b      	ldr	r3, [r7, #0]
 10073cc:	68fa      	ldr	r2, [r7, #12]
 10073ce:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 10073d0:	68fb      	ldr	r3, [r7, #12]
 10073d2:	683a      	ldr	r2, [r7, #0]
 10073d4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 10073d6:	683b      	ldr	r3, [r7, #0]
 10073d8:	687a      	ldr	r2, [r7, #4]
 10073da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 10073dc:	687b      	ldr	r3, [r7, #4]
 10073de:	681b      	ldr	r3, [r3, #0]
 10073e0:	1c5a      	adds	r2, r3, #1
 10073e2:	687b      	ldr	r3, [r7, #4]
 10073e4:	601a      	str	r2, [r3, #0]
}
 10073e6:	bf00      	nop
 10073e8:	3714      	adds	r7, #20
 10073ea:	46bd      	mov	sp, r7
 10073ec:	bc80      	pop	{r7}
 10073ee:	4770      	bx	lr

010073f0 <uxListRemove>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
 10073f0:	b480      	push	{r7}
 10073f2:	b085      	sub	sp, #20
 10073f4:	af00      	add	r7, sp, #0
 10073f6:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 10073f8:	687b      	ldr	r3, [r7, #4]
 10073fa:	685b      	ldr	r3, [r3, #4]
 10073fc:	687a      	ldr	r2, [r7, #4]
 10073fe:	6892      	ldr	r2, [r2, #8]
 1007400:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 1007402:	687b      	ldr	r3, [r7, #4]
 1007404:	689b      	ldr	r3, [r3, #8]
 1007406:	687a      	ldr	r2, [r7, #4]
 1007408:	6852      	ldr	r2, [r2, #4]
 100740a:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 100740c:	687b      	ldr	r3, [r7, #4]
 100740e:	691b      	ldr	r3, [r3, #16]
 1007410:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 1007412:	68fb      	ldr	r3, [r7, #12]
 1007414:	685a      	ldr	r2, [r3, #4]
 1007416:	687b      	ldr	r3, [r7, #4]
 1007418:	429a      	cmp	r2, r3
 100741a:	d103      	bne.n	1007424 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 100741c:	687b      	ldr	r3, [r7, #4]
 100741e:	689a      	ldr	r2, [r3, #8]
 1007420:	68fb      	ldr	r3, [r7, #12]
 1007422:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
 1007424:	687b      	ldr	r3, [r7, #4]
 1007426:	2200      	movs	r2, #0
 1007428:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 100742a:	68fb      	ldr	r3, [r7, #12]
 100742c:	681b      	ldr	r3, [r3, #0]
 100742e:	1e5a      	subs	r2, r3, #1
 1007430:	68fb      	ldr	r3, [r7, #12]
 1007432:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 1007434:	68fb      	ldr	r3, [r7, #12]
 1007436:	681b      	ldr	r3, [r3, #0]
}
 1007438:	4618      	mov	r0, r3
 100743a:	3714      	adds	r7, #20
 100743c:	46bd      	mov	sp, r7
 100743e:	bc80      	pop	{r7}
 1007440:	4770      	bx	lr
	...

01007444 <osc_get_rate>:
{
 1007444:	b480      	push	{r7}
 1007446:	b083      	sub	sp, #12
 1007448:	af00      	add	r7, sp, #0
 100744a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
 100744c:	687b      	ldr	r3, [r7, #4]
 100744e:	2b07      	cmp	r3, #7
 1007450:	d825      	bhi.n	100749e <osc_get_rate+0x5a>
 1007452:	a201      	add	r2, pc, #4	; (adr r2, 1007458 <osc_get_rate+0x14>)
 1007454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 1007458:	01007479 	.word	0x01007479
 100745c:	0100747f 	.word	0x0100747f
 1007460:	01007485 	.word	0x01007485
 1007464:	0100748b 	.word	0x0100748b
 1007468:	0100748f 	.word	0x0100748f
 100746c:	01007493 	.word	0x01007493
 1007470:	01007497 	.word	0x01007497
 1007474:	0100749b 	.word	0x0100749b
		return OSC_SLCK_32K_RC_HZ;
 1007478:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 100747c:	e010      	b.n	10074a0 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
 100747e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 1007482:	e00d      	b.n	10074a0 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
 1007484:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 1007488:	e00a      	b.n	10074a0 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
 100748a:	4b08      	ldr	r3, [pc, #32]	; (10074ac <osc_get_rate+0x68>)
 100748c:	e008      	b.n	10074a0 <osc_get_rate+0x5c>
		return OSC_MAINCK_16M_RC_HZ;
 100748e:	4b08      	ldr	r3, [pc, #32]	; (10074b0 <osc_get_rate+0x6c>)
 1007490:	e006      	b.n	10074a0 <osc_get_rate+0x5c>
		return OSC_MAINCK_24M_RC_HZ;
 1007492:	4b08      	ldr	r3, [pc, #32]	; (10074b4 <osc_get_rate+0x70>)
 1007494:	e004      	b.n	10074a0 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
 1007496:	2300      	movs	r3, #0
 1007498:	e002      	b.n	10074a0 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
 100749a:	2300      	movs	r3, #0
 100749c:	e000      	b.n	10074a0 <osc_get_rate+0x5c>
	return 0;
 100749e:	2300      	movs	r3, #0
}
 10074a0:	4618      	mov	r0, r3
 10074a2:	370c      	adds	r7, #12
 10074a4:	46bd      	mov	sp, r7
 10074a6:	bc80      	pop	{r7}
 10074a8:	4770      	bx	lr
 10074aa:	bf00      	nop
 10074ac:	007a1200 	.word	0x007a1200
 10074b0:	00f42400 	.word	0x00f42400
 10074b4:	016e3600 	.word	0x016e3600

010074b8 <sysclk_get_main_hz>:
{
 10074b8:	b580      	push	{r7, lr}
 10074ba:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
 10074bc:	2001      	movs	r0, #1
 10074be:	4b04      	ldr	r3, [pc, #16]	; (10074d0 <sysclk_get_main_hz+0x18>)
 10074c0:	4798      	blx	r3
 10074c2:	4602      	mov	r2, r0
 10074c4:	f640 3372 	movw	r3, #2930	; 0xb72
 10074c8:	fb03 f302 	mul.w	r3, r3, r2
}
 10074cc:	4618      	mov	r0, r3
 10074ce:	bd80      	pop	{r7, pc}
 10074d0:	01007445 	.word	0x01007445

010074d4 <sysclk_get_cpu_hz>:
{
 10074d4:	b580      	push	{r7, lr}
 10074d6:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
 10074d8:	4b02      	ldr	r3, [pc, #8]	; (10074e4 <sysclk_get_cpu_hz+0x10>)
 10074da:	4798      	blx	r3
 10074dc:	4603      	mov	r3, r0
}
 10074de:	4618      	mov	r0, r3
 10074e0:	bd80      	pop	{r7, pc}
 10074e2:	bf00      	nop
 10074e4:	010074b9 	.word	0x010074b9

010074e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
 10074e8:	b480      	push	{r7}
 10074ea:	b085      	sub	sp, #20
 10074ec:	af00      	add	r7, sp, #0
 10074ee:	60f8      	str	r0, [r7, #12]
 10074f0:	60b9      	str	r1, [r7, #8]
 10074f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 10074f4:	68fb      	ldr	r3, [r7, #12]
 10074f6:	3b04      	subs	r3, #4
 10074f8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 10074fa:	68fb      	ldr	r3, [r7, #12]
 10074fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 1007500:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 1007502:	68fb      	ldr	r3, [r7, #12]
 1007504:	3b04      	subs	r3, #4
 1007506:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
 1007508:	68ba      	ldr	r2, [r7, #8]
 100750a:	68fb      	ldr	r3, [r7, #12]
 100750c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 100750e:	68fb      	ldr	r3, [r7, #12]
 1007510:	3b04      	subs	r3, #4
 1007512:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
 1007514:	68fb      	ldr	r3, [r7, #12]
 1007516:	2200      	movs	r2, #0
 1007518:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 100751a:	68fb      	ldr	r3, [r7, #12]
 100751c:	3b14      	subs	r3, #20
 100751e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
 1007520:	687a      	ldr	r2, [r7, #4]
 1007522:	68fb      	ldr	r3, [r7, #12]
 1007524:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 1007526:	68fb      	ldr	r3, [r7, #12]
 1007528:	3b20      	subs	r3, #32
 100752a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 100752c:	68fb      	ldr	r3, [r7, #12]
}
 100752e:	4618      	mov	r0, r3
 1007530:	3714      	adds	r7, #20
 1007532:	46bd      	mov	sp, r7
 1007534:	bc80      	pop	{r7}
 1007536:	4770      	bx	lr

01007538 <SVC_Handler>:
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
 1007538:	4b06      	ldr	r3, [pc, #24]	; (1007554 <pxCurrentTCBConst2>)
 100753a:	6819      	ldr	r1, [r3, #0]
 100753c:	6808      	ldr	r0, [r1, #0]
 100753e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 1007542:	f380 8809 	msr	PSP, r0
 1007546:	f04f 0000 	mov.w	r0, #0
 100754a:	f380 8811 	msr	BASEPRI, r0
 100754e:	f04e 0e0d 	orr.w	lr, lr, #13
 1007552:	4770      	bx	lr

01007554 <pxCurrentTCBConst2>:
 1007554:	20004e04 	.word	0x20004e04
					"	bx r14							\n"
					"									\n"
					"	.align 2						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 1007558:	bf00      	nop
 100755a:	bf00      	nop

0100755c <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 100755c:	4804      	ldr	r0, [pc, #16]	; (1007570 <prvPortStartFirstTask+0x14>)
 100755e:	6800      	ldr	r0, [r0, #0]
 1007560:	6800      	ldr	r0, [r0, #0]
 1007562:	f380 8808 	msr	MSP, r0
 1007566:	b662      	cpsie	i
 1007568:	df00      	svc	0
 100756a:	bf00      	nop
					" msr msp, r0			\n" /* Set the msp back to the start of the stack. */
					" cpsie i				\n" /* Globally enable interrupts. */
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 100756c:	bf00      	nop
 100756e:	0000      	.short	0x0000
 1007570:	e000ed08 	.word	0xe000ed08

01007574 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
 1007574:	b580      	push	{r7, lr}
 1007576:	af00      	add	r7, sp, #0
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 1007578:	4a0a      	ldr	r2, [pc, #40]	; (10075a4 <xPortStartScheduler+0x30>)
 100757a:	4b0a      	ldr	r3, [pc, #40]	; (10075a4 <xPortStartScheduler+0x30>)
 100757c:	681b      	ldr	r3, [r3, #0]
 100757e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 1007582:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 1007584:	4a07      	ldr	r2, [pc, #28]	; (10075a4 <xPortStartScheduler+0x30>)
 1007586:	4b07      	ldr	r3, [pc, #28]	; (10075a4 <xPortStartScheduler+0x30>)
 1007588:	681b      	ldr	r3, [r3, #0]
 100758a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 100758e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 1007590:	4b05      	ldr	r3, [pc, #20]	; (10075a8 <xPortStartScheduler+0x34>)
 1007592:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 1007594:	4b05      	ldr	r3, [pc, #20]	; (10075ac <xPortStartScheduler+0x38>)
 1007596:	2200      	movs	r2, #0
 1007598:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 100759a:	4b05      	ldr	r3, [pc, #20]	; (10075b0 <xPortStartScheduler+0x3c>)
 100759c:	4798      	blx	r3

	/* Should not get here! */
	return 0;
 100759e:	2300      	movs	r3, #0
}
 10075a0:	4618      	mov	r0, r3
 10075a2:	bd80      	pop	{r7, pc}
 10075a4:	e000ed20 	.word	0xe000ed20
 10075a8:	01007695 	.word	0x01007695
 10075ac:	200001dc 	.word	0x200001dc
 10075b0:	0100755d 	.word	0x0100755d

010075b4 <vPortYieldFromISR>:
	is nothing to return to.  */
}
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
 10075b4:	b480      	push	{r7}
 10075b6:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 10075b8:	4b03      	ldr	r3, [pc, #12]	; (10075c8 <vPortYieldFromISR+0x14>)
 10075ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 10075be:	601a      	str	r2, [r3, #0]
}
 10075c0:	bf00      	nop
 10075c2:	46bd      	mov	sp, r7
 10075c4:	bc80      	pop	{r7}
 10075c6:	4770      	bx	lr
 10075c8:	e000ed04 	.word	0xe000ed04

010075cc <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 10075cc:	b580      	push	{r7, lr}
 10075ce:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 10075d0:	4b04      	ldr	r3, [pc, #16]	; (10075e4 <vPortEnterCritical+0x18>)
 10075d2:	4798      	blx	r3
	uxCriticalNesting++;
 10075d4:	4b04      	ldr	r3, [pc, #16]	; (10075e8 <vPortEnterCritical+0x1c>)
 10075d6:	681b      	ldr	r3, [r3, #0]
 10075d8:	3301      	adds	r3, #1
 10075da:	4a03      	ldr	r2, [pc, #12]	; (10075e8 <vPortEnterCritical+0x1c>)
 10075dc:	6013      	str	r3, [r2, #0]
}
 10075de:	bf00      	nop
 10075e0:	bd80      	pop	{r7, pc}
 10075e2:	bf00      	nop
 10075e4:	01007615 	.word	0x01007615
 10075e8:	200001dc 	.word	0x200001dc

010075ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 10075ec:	b580      	push	{r7, lr}
 10075ee:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
 10075f0:	4b06      	ldr	r3, [pc, #24]	; (100760c <vPortExitCritical+0x20>)
 10075f2:	681b      	ldr	r3, [r3, #0]
 10075f4:	3b01      	subs	r3, #1
 10075f6:	4a05      	ldr	r2, [pc, #20]	; (100760c <vPortExitCritical+0x20>)
 10075f8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 10075fa:	4b04      	ldr	r3, [pc, #16]	; (100760c <vPortExitCritical+0x20>)
 10075fc:	681b      	ldr	r3, [r3, #0]
 10075fe:	2b00      	cmp	r3, #0
 1007600:	d102      	bne.n	1007608 <vPortExitCritical+0x1c>
	{
		portENABLE_INTERRUPTS();
 1007602:	2000      	movs	r0, #0
 1007604:	4b02      	ldr	r3, [pc, #8]	; (1007610 <vPortExitCritical+0x24>)
 1007606:	4798      	blx	r3
	}
}
 1007608:	bf00      	nop
 100760a:	bd80      	pop	{r7, pc}
 100760c:	200001dc 	.word	0x200001dc
 1007610:	01007627 	.word	0x01007627

01007614 <ulPortSetInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
 1007614:	f3ef 8011 	mrs	r0, BASEPRI
 1007618:	f04f 01a0 	mov.w	r1, #160	; 0xa0
 100761c:	f381 8811 	msr	BASEPRI, r1
 1007620:	4770      	bx	lr
		:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "r0", "r1"	\
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
 1007622:	2300      	movs	r3, #0
}
 1007624:	4618      	mov	r0, r3

01007626 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
 1007626:	f380 8811 	msr	BASEPRI, r0
 100762a:	4770      	bx	lr
		:::"r0"														\
	);
	
	/* Just to avoid compiler warnings. */
	( void ) ulNewMaskValue;
}
 100762c:	bf00      	nop
	...

01007630 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
 1007630:	f3ef 8009 	mrs	r0, PSP
 1007634:	4b0c      	ldr	r3, [pc, #48]	; (1007668 <pxCurrentTCBConst>)
 1007636:	681a      	ldr	r2, [r3, #0]
 1007638:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 100763c:	6010      	str	r0, [r2, #0]
 100763e:	e92d 4008 	stmdb	sp!, {r3, lr}
 1007642:	f04f 00a0 	mov.w	r0, #160	; 0xa0
 1007646:	f380 8811 	msr	BASEPRI, r0
 100764a:	f000 ffe1 	bl	1008610 <vTaskSwitchContext>
 100764e:	f04f 0000 	mov.w	r0, #0
 1007652:	f380 8811 	msr	BASEPRI, r0
 1007656:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 100765a:	6819      	ldr	r1, [r3, #0]
 100765c:	6808      	ldr	r0, [r1, #0]
 100765e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 1007662:	f380 8809 	msr	PSP, r0
 1007666:	4770      	bx	lr

01007668 <pxCurrentTCBConst>:
 1007668:	20004e04 	.word	0x20004e04
	"										\n"
	"	.align 2							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 100766c:	bf00      	nop
 100766e:	bf00      	nop

01007670 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
 1007670:	b580      	push	{r7, lr}
 1007672:	af00      	add	r7, sp, #0
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
 1007674:	4b04      	ldr	r3, [pc, #16]	; (1007688 <SysTick_Handler+0x18>)
 1007676:	4798      	blx	r3
	{
		vTaskIncrementTick();
 1007678:	4b04      	ldr	r3, [pc, #16]	; (100768c <SysTick_Handler+0x1c>)
 100767a:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
 100767c:	2000      	movs	r0, #0
 100767e:	4b04      	ldr	r3, [pc, #16]	; (1007690 <SysTick_Handler+0x20>)
 1007680:	4798      	blx	r3
}
 1007682:	bf00      	nop
 1007684:	bd80      	pop	{r7, pc}
 1007686:	bf00      	nop
 1007688:	01007615 	.word	0x01007615
 100768c:	010084dd 	.word	0x010084dd
 1007690:	01007627 	.word	0x01007627

01007694 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 1007694:	b598      	push	{r3, r4, r7, lr}
 1007696:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
 1007698:	4c07      	ldr	r4, [pc, #28]	; (10076b8 <vPortSetupTimerInterrupt+0x24>)
 100769a:	4b08      	ldr	r3, [pc, #32]	; (10076bc <vPortSetupTimerInterrupt+0x28>)
 100769c:	4798      	blx	r3
 100769e:	4602      	mov	r2, r0
 10076a0:	4b07      	ldr	r3, [pc, #28]	; (10076c0 <vPortSetupTimerInterrupt+0x2c>)
 10076a2:	fba3 2302 	umull	r2, r3, r3, r2
 10076a6:	099b      	lsrs	r3, r3, #6
 10076a8:	3b01      	subs	r3, #1
 10076aa:	6023      	str	r3, [r4, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 10076ac:	4b05      	ldr	r3, [pc, #20]	; (10076c4 <vPortSetupTimerInterrupt+0x30>)
 10076ae:	2207      	movs	r2, #7
 10076b0:	601a      	str	r2, [r3, #0]
}
 10076b2:	bf00      	nop
 10076b4:	bd98      	pop	{r3, r4, r7, pc}
 10076b6:	bf00      	nop
 10076b8:	e000e014 	.word	0xe000e014
 10076bc:	010074d5 	.word	0x010074d5
 10076c0:	10624dd3 	.word	0x10624dd3
 10076c4:	e000e010 	.word	0xe000e010

010076c8 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/
extern void vApplicationMallocFailedHook( void );
void *pvPortMalloc( size_t xWantedSize )
{
 10076c8:	b580      	push	{r7, lr}
 10076ca:	b086      	sub	sp, #24
 10076cc:	af00      	add	r7, sp, #0
 10076ce:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 10076d0:	2300      	movs	r3, #0
 10076d2:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 10076d4:	4b37      	ldr	r3, [pc, #220]	; (10077b4 <pvPortMalloc+0xec>)
 10076d6:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 10076d8:	4b37      	ldr	r3, [pc, #220]	; (10077b8 <pvPortMalloc+0xf0>)
 10076da:	681b      	ldr	r3, [r3, #0]
 10076dc:	2b00      	cmp	r3, #0
 10076de:	d101      	bne.n	10076e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 10076e0:	4b36      	ldr	r3, [pc, #216]	; (10077bc <pvPortMalloc+0xf4>)
 10076e2:	4798      	blx	r3
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
 10076e4:	687b      	ldr	r3, [r7, #4]
 10076e6:	2b00      	cmp	r3, #0
 10076e8:	d00e      	beq.n	1007708 <pvPortMalloc+0x40>
		{
			xWantedSize += heapSTRUCT_SIZE;
 10076ea:	2310      	movs	r3, #16
 10076ec:	461a      	mov	r2, r3
 10076ee:	687b      	ldr	r3, [r7, #4]
 10076f0:	4413      	add	r3, r2
 10076f2:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 10076f4:	687b      	ldr	r3, [r7, #4]
 10076f6:	f003 0307 	and.w	r3, r3, #7
 10076fa:	2b00      	cmp	r3, #0
 10076fc:	d004      	beq.n	1007708 <pvPortMalloc+0x40>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 10076fe:	687b      	ldr	r3, [r7, #4]
 1007700:	f023 0307 	bic.w	r3, r3, #7
 1007704:	3308      	adds	r3, #8
 1007706:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
 1007708:	687b      	ldr	r3, [r7, #4]
 100770a:	2b00      	cmp	r3, #0
 100770c:	d045      	beq.n	100779a <pvPortMalloc+0xd2>
 100770e:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 1007712:	687b      	ldr	r3, [r7, #4]
 1007714:	4293      	cmp	r3, r2
 1007716:	d240      	bcs.n	100779a <pvPortMalloc+0xd2>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
 1007718:	4b29      	ldr	r3, [pc, #164]	; (10077c0 <pvPortMalloc+0xf8>)
 100771a:	613b      	str	r3, [r7, #16]
			pxBlock = xStart.pxNextFreeBlock;
 100771c:	4b28      	ldr	r3, [pc, #160]	; (10077c0 <pvPortMalloc+0xf8>)
 100771e:	681b      	ldr	r3, [r3, #0]
 1007720:	617b      	str	r3, [r7, #20]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 1007722:	e004      	b.n	100772e <pvPortMalloc+0x66>
			{
				pxPreviousBlock = pxBlock;
 1007724:	697b      	ldr	r3, [r7, #20]
 1007726:	613b      	str	r3, [r7, #16]
				pxBlock = pxBlock->pxNextFreeBlock;
 1007728:	697b      	ldr	r3, [r7, #20]
 100772a:	681b      	ldr	r3, [r3, #0]
 100772c:	617b      	str	r3, [r7, #20]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 100772e:	697b      	ldr	r3, [r7, #20]
 1007730:	685a      	ldr	r2, [r3, #4]
 1007732:	687b      	ldr	r3, [r7, #4]
 1007734:	429a      	cmp	r2, r3
 1007736:	d203      	bcs.n	1007740 <pvPortMalloc+0x78>
 1007738:	697b      	ldr	r3, [r7, #20]
 100773a:	681b      	ldr	r3, [r3, #0]
 100773c:	2b00      	cmp	r3, #0
 100773e:	d1f1      	bne.n	1007724 <pvPortMalloc+0x5c>
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
 1007740:	4b1d      	ldr	r3, [pc, #116]	; (10077b8 <pvPortMalloc+0xf0>)
 1007742:	681b      	ldr	r3, [r3, #0]
 1007744:	697a      	ldr	r2, [r7, #20]
 1007746:	429a      	cmp	r2, r3
 1007748:	d027      	beq.n	100779a <pvPortMalloc+0xd2>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 100774a:	693b      	ldr	r3, [r7, #16]
 100774c:	681b      	ldr	r3, [r3, #0]
 100774e:	2210      	movs	r2, #16
 1007750:	4413      	add	r3, r2
 1007752:	60fb      	str	r3, [r7, #12]

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 1007754:	697b      	ldr	r3, [r7, #20]
 1007756:	681a      	ldr	r2, [r3, #0]
 1007758:	693b      	ldr	r3, [r7, #16]
 100775a:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 100775c:	697b      	ldr	r3, [r7, #20]
 100775e:	685a      	ldr	r2, [r3, #4]
 1007760:	687b      	ldr	r3, [r7, #4]
 1007762:	1ad3      	subs	r3, r2, r3
 1007764:	2210      	movs	r2, #16
 1007766:	0052      	lsls	r2, r2, #1
 1007768:	4293      	cmp	r3, r2
 100776a:	d90f      	bls.n	100778c <pvPortMalloc+0xc4>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
 100776c:	697a      	ldr	r2, [r7, #20]
 100776e:	687b      	ldr	r3, [r7, #4]
 1007770:	4413      	add	r3, r2
 1007772:	60bb      	str	r3, [r7, #8]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 1007774:	697b      	ldr	r3, [r7, #20]
 1007776:	685a      	ldr	r2, [r3, #4]
 1007778:	687b      	ldr	r3, [r7, #4]
 100777a:	1ad2      	subs	r2, r2, r3
 100777c:	68bb      	ldr	r3, [r7, #8]
 100777e:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
 1007780:	697b      	ldr	r3, [r7, #20]
 1007782:	687a      	ldr	r2, [r7, #4]
 1007784:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 1007786:	68b8      	ldr	r0, [r7, #8]
 1007788:	4b0e      	ldr	r3, [pc, #56]	; (10077c4 <pvPortMalloc+0xfc>)
 100778a:	4798      	blx	r3
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
 100778c:	4b0e      	ldr	r3, [pc, #56]	; (10077c8 <pvPortMalloc+0x100>)
 100778e:	681a      	ldr	r2, [r3, #0]
 1007790:	697b      	ldr	r3, [r7, #20]
 1007792:	685b      	ldr	r3, [r3, #4]
 1007794:	1ad3      	subs	r3, r2, r3
 1007796:	4a0c      	ldr	r2, [pc, #48]	; (10077c8 <pvPortMalloc+0x100>)
 1007798:	6013      	str	r3, [r2, #0]
			}
		}
	}
	xTaskResumeAll();
 100779a:	4b0c      	ldr	r3, [pc, #48]	; (10077cc <pvPortMalloc+0x104>)
 100779c:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 100779e:	68fb      	ldr	r3, [r7, #12]
 10077a0:	2b00      	cmp	r3, #0
 10077a2:	d101      	bne.n	10077a8 <pvPortMalloc+0xe0>
		{
			vApplicationMallocFailedHook();
 10077a4:	4b0a      	ldr	r3, [pc, #40]	; (10077d0 <pvPortMalloc+0x108>)
 10077a6:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
 10077a8:	68fb      	ldr	r3, [r7, #12]
}
 10077aa:	4618      	mov	r0, r3
 10077ac:	3718      	adds	r7, #24
 10077ae:	46bd      	mov	sp, r7
 10077b0:	bd80      	pop	{r7, pc}
 10077b2:	bf00      	nop
 10077b4:	0100838d 	.word	0x0100838d
 10077b8:	20004e00 	.word	0x20004e00
 10077bc:	01007829 	.word	0x01007829
 10077c0:	20004df8 	.word	0x20004df8
 10077c4:	010078a5 	.word	0x010078a5
 10077c8:	200001e0 	.word	0x200001e0
 10077cc:	010083a9 	.word	0x010083a9
 10077d0:	0100a6e9 	.word	0x0100a6e9

010077d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 10077d4:	b580      	push	{r7, lr}
 10077d6:	b084      	sub	sp, #16
 10077d8:	af00      	add	r7, sp, #0
 10077da:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
 10077dc:	687b      	ldr	r3, [r7, #4]
 10077de:	60fb      	str	r3, [r7, #12]
xBlockLink *pxLink;

	if( pv != NULL )
 10077e0:	687b      	ldr	r3, [r7, #4]
 10077e2:	2b00      	cmp	r3, #0
 10077e4:	d014      	beq.n	1007810 <vPortFree+0x3c>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
 10077e6:	2310      	movs	r3, #16
 10077e8:	425b      	negs	r3, r3
 10077ea:	68fa      	ldr	r2, [r7, #12]
 10077ec:	4413      	add	r3, r2
 10077ee:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 10077f0:	68fb      	ldr	r3, [r7, #12]
 10077f2:	60bb      	str	r3, [r7, #8]

		vTaskSuspendAll();
 10077f4:	4b08      	ldr	r3, [pc, #32]	; (1007818 <vPortFree+0x44>)
 10077f6:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
 10077f8:	68bb      	ldr	r3, [r7, #8]
 10077fa:	685a      	ldr	r2, [r3, #4]
 10077fc:	4b07      	ldr	r3, [pc, #28]	; (100781c <vPortFree+0x48>)
 10077fe:	681b      	ldr	r3, [r3, #0]
 1007800:	4413      	add	r3, r2
 1007802:	4a06      	ldr	r2, [pc, #24]	; (100781c <vPortFree+0x48>)
 1007804:	6013      	str	r3, [r2, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
 1007806:	68b8      	ldr	r0, [r7, #8]
 1007808:	4b05      	ldr	r3, [pc, #20]	; (1007820 <vPortFree+0x4c>)
 100780a:	4798      	blx	r3
		}
		xTaskResumeAll();
 100780c:	4b05      	ldr	r3, [pc, #20]	; (1007824 <vPortFree+0x50>)
 100780e:	4798      	blx	r3
	}
}
 1007810:	bf00      	nop
 1007812:	3710      	adds	r7, #16
 1007814:	46bd      	mov	sp, r7
 1007816:	bd80      	pop	{r7, pc}
 1007818:	0100838d 	.word	0x0100838d
 100781c:	200001e0 	.word	0x200001e0
 1007820:	010078a5 	.word	0x010078a5
 1007824:	010083a9 	.word	0x010083a9

01007828 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 1007828:	b480      	push	{r7}
 100782a:	b083      	sub	sp, #12
 100782c:	af00      	add	r7, sp, #0
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
 100782e:	4b19      	ldr	r3, [pc, #100]	; (1007894 <prvHeapInit+0x6c>)
 1007830:	4a19      	ldr	r2, [pc, #100]	; (1007898 <prvHeapInit+0x70>)
 1007832:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 1007834:	4b17      	ldr	r3, [pc, #92]	; (1007894 <prvHeapInit+0x6c>)
 1007836:	2200      	movs	r2, #0
 1007838:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
 100783a:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 100783e:	4b16      	ldr	r3, [pc, #88]	; (1007898 <prvHeapInit+0x70>)
 1007840:	4413      	add	r3, r2
 1007842:	607b      	str	r3, [r7, #4]
	pucHeapEnd -= heapSTRUCT_SIZE;
 1007844:	2310      	movs	r3, #16
 1007846:	425b      	negs	r3, r3
 1007848:	687a      	ldr	r2, [r7, #4]
 100784a:	4413      	add	r3, r2
 100784c:	607b      	str	r3, [r7, #4]
	pxEnd = ( void * ) pucHeapEnd;
 100784e:	4a13      	ldr	r2, [pc, #76]	; (100789c <prvHeapInit+0x74>)
 1007850:	687b      	ldr	r3, [r7, #4]
 1007852:	6013      	str	r3, [r2, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
 1007854:	4b11      	ldr	r3, [pc, #68]	; (100789c <prvHeapInit+0x74>)
 1007856:	681b      	ldr	r3, [r3, #0]
 1007858:	2200      	movs	r2, #0
 100785a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 100785c:	4b0f      	ldr	r3, [pc, #60]	; (100789c <prvHeapInit+0x74>)
 100785e:	681b      	ldr	r3, [r3, #0]
 1007860:	2200      	movs	r2, #0
 1007862:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
 1007864:	4b0c      	ldr	r3, [pc, #48]	; (1007898 <prvHeapInit+0x70>)
 1007866:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
 1007868:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 100786c:	2210      	movs	r2, #16
 100786e:	1a9a      	subs	r2, r3, r2
 1007870:	683b      	ldr	r3, [r7, #0]
 1007872:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 1007874:	4b09      	ldr	r3, [pc, #36]	; (100789c <prvHeapInit+0x74>)
 1007876:	681a      	ldr	r2, [r3, #0]
 1007878:	683b      	ldr	r3, [r7, #0]
 100787a:	601a      	str	r2, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
 100787c:	4b08      	ldr	r3, [pc, #32]	; (10078a0 <prvHeapInit+0x78>)
 100787e:	681b      	ldr	r3, [r3, #0]
 1007880:	2210      	movs	r2, #16
 1007882:	1a9b      	subs	r3, r3, r2
 1007884:	4a06      	ldr	r2, [pc, #24]	; (10078a0 <prvHeapInit+0x78>)
 1007886:	6013      	str	r3, [r2, #0]
}
 1007888:	bf00      	nop
 100788a:	370c      	adds	r7, #12
 100788c:	46bd      	mov	sp, r7
 100788e:	bc80      	pop	{r7}
 1007890:	4770      	bx	lr
 1007892:	bf00      	nop
 1007894:	20004df8 	.word	0x20004df8
 1007898:	20001f18 	.word	0x20001f18
 100789c:	20004e00 	.word	0x20004e00
 10078a0:	200001e0 	.word	0x200001e0

010078a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
 10078a4:	b480      	push	{r7}
 10078a6:	b085      	sub	sp, #20
 10078a8:	af00      	add	r7, sp, #0
 10078aa:	6078      	str	r0, [r7, #4]
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 10078ac:	4b27      	ldr	r3, [pc, #156]	; (100794c <prvInsertBlockIntoFreeList+0xa8>)
 10078ae:	60fb      	str	r3, [r7, #12]
 10078b0:	e002      	b.n	10078b8 <prvInsertBlockIntoFreeList+0x14>
 10078b2:	68fb      	ldr	r3, [r7, #12]
 10078b4:	681b      	ldr	r3, [r3, #0]
 10078b6:	60fb      	str	r3, [r7, #12]
 10078b8:	68fb      	ldr	r3, [r7, #12]
 10078ba:	681a      	ldr	r2, [r3, #0]
 10078bc:	687b      	ldr	r3, [r7, #4]
 10078be:	429a      	cmp	r2, r3
 10078c0:	d3f7      	bcc.n	10078b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
 10078c2:	68fb      	ldr	r3, [r7, #12]
 10078c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
 10078c6:	68fb      	ldr	r3, [r7, #12]
 10078c8:	685b      	ldr	r3, [r3, #4]
 10078ca:	68ba      	ldr	r2, [r7, #8]
 10078cc:	441a      	add	r2, r3
 10078ce:	687b      	ldr	r3, [r7, #4]
 10078d0:	429a      	cmp	r2, r3
 10078d2:	d108      	bne.n	10078e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 10078d4:	68fb      	ldr	r3, [r7, #12]
 10078d6:	685a      	ldr	r2, [r3, #4]
 10078d8:	687b      	ldr	r3, [r7, #4]
 10078da:	685b      	ldr	r3, [r3, #4]
 10078dc:	441a      	add	r2, r3
 10078de:	68fb      	ldr	r3, [r7, #12]
 10078e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 10078e2:	68fb      	ldr	r3, [r7, #12]
 10078e4:	607b      	str	r3, [r7, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
 10078e6:	687b      	ldr	r3, [r7, #4]
 10078e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
 10078ea:	687b      	ldr	r3, [r7, #4]
 10078ec:	685b      	ldr	r3, [r3, #4]
 10078ee:	68ba      	ldr	r2, [r7, #8]
 10078f0:	441a      	add	r2, r3
 10078f2:	68fb      	ldr	r3, [r7, #12]
 10078f4:	681b      	ldr	r3, [r3, #0]
 10078f6:	429a      	cmp	r2, r3
 10078f8:	d118      	bne.n	100792c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 10078fa:	68fb      	ldr	r3, [r7, #12]
 10078fc:	681a      	ldr	r2, [r3, #0]
 10078fe:	4b14      	ldr	r3, [pc, #80]	; (1007950 <prvInsertBlockIntoFreeList+0xac>)
 1007900:	681b      	ldr	r3, [r3, #0]
 1007902:	429a      	cmp	r2, r3
 1007904:	d00d      	beq.n	1007922 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 1007906:	687b      	ldr	r3, [r7, #4]
 1007908:	685a      	ldr	r2, [r3, #4]
 100790a:	68fb      	ldr	r3, [r7, #12]
 100790c:	681b      	ldr	r3, [r3, #0]
 100790e:	685b      	ldr	r3, [r3, #4]
 1007910:	441a      	add	r2, r3
 1007912:	687b      	ldr	r3, [r7, #4]
 1007914:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 1007916:	68fb      	ldr	r3, [r7, #12]
 1007918:	681b      	ldr	r3, [r3, #0]
 100791a:	681a      	ldr	r2, [r3, #0]
 100791c:	687b      	ldr	r3, [r7, #4]
 100791e:	601a      	str	r2, [r3, #0]
 1007920:	e008      	b.n	1007934 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 1007922:	4b0b      	ldr	r3, [pc, #44]	; (1007950 <prvInsertBlockIntoFreeList+0xac>)
 1007924:	681a      	ldr	r2, [r3, #0]
 1007926:	687b      	ldr	r3, [r7, #4]
 1007928:	601a      	str	r2, [r3, #0]
 100792a:	e003      	b.n	1007934 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
 100792c:	68fb      	ldr	r3, [r7, #12]
 100792e:	681a      	ldr	r2, [r3, #0]
 1007930:	687b      	ldr	r3, [r7, #4]
 1007932:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 1007934:	68fa      	ldr	r2, [r7, #12]
 1007936:	687b      	ldr	r3, [r7, #4]
 1007938:	429a      	cmp	r2, r3
 100793a:	d002      	beq.n	1007942 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 100793c:	68fb      	ldr	r3, [r7, #12]
 100793e:	687a      	ldr	r2, [r7, #4]
 1007940:	601a      	str	r2, [r3, #0]
	}
}
 1007942:	bf00      	nop
 1007944:	3714      	adds	r7, #20
 1007946:	46bd      	mov	sp, r7
 1007948:	bc80      	pop	{r7}
 100794a:	4770      	bx	lr
 100794c:	20004df8 	.word	0x20004df8
 1007950:	20004e00 	.word	0x20004e00

01007954 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
 1007954:	b580      	push	{r7, lr}
 1007956:	b082      	sub	sp, #8
 1007958:	af00      	add	r7, sp, #0
 100795a:	6078      	str	r0, [r7, #4]
 100795c:	6039      	str	r1, [r7, #0]
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 100795e:	4b25      	ldr	r3, [pc, #148]	; (10079f4 <xQueueGenericReset+0xa0>)
 1007960:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 1007962:	687b      	ldr	r3, [r7, #4]
 1007964:	681a      	ldr	r2, [r3, #0]
 1007966:	687b      	ldr	r3, [r7, #4]
 1007968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 100796a:	6879      	ldr	r1, [r7, #4]
 100796c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 100796e:	fb01 f303 	mul.w	r3, r1, r3
 1007972:	441a      	add	r2, r3
 1007974:	687b      	ldr	r3, [r7, #4]
 1007976:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 1007978:	687b      	ldr	r3, [r7, #4]
 100797a:	2200      	movs	r2, #0
 100797c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 100797e:	687b      	ldr	r3, [r7, #4]
 1007980:	681a      	ldr	r2, [r3, #0]
 1007982:	687b      	ldr	r3, [r7, #4]
 1007984:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
 1007986:	687b      	ldr	r3, [r7, #4]
 1007988:	681a      	ldr	r2, [r3, #0]
 100798a:	687b      	ldr	r3, [r7, #4]
 100798c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 100798e:	3b01      	subs	r3, #1
 1007990:	6879      	ldr	r1, [r7, #4]
 1007992:	6c09      	ldr	r1, [r1, #64]	; 0x40
 1007994:	fb01 f303 	mul.w	r3, r1, r3
 1007998:	441a      	add	r2, r3
 100799a:	687b      	ldr	r3, [r7, #4]
 100799c:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 100799e:	687b      	ldr	r3, [r7, #4]
 10079a0:	f04f 32ff 	mov.w	r2, #4294967295
 10079a4:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 10079a6:	687b      	ldr	r3, [r7, #4]
 10079a8:	f04f 32ff 	mov.w	r2, #4294967295
 10079ac:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
 10079ae:	683b      	ldr	r3, [r7, #0]
 10079b0:	2b00      	cmp	r3, #0
 10079b2:	d10e      	bne.n	10079d2 <xQueueGenericReset+0x7e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 10079b4:	687b      	ldr	r3, [r7, #4]
 10079b6:	691b      	ldr	r3, [r3, #16]
 10079b8:	2b00      	cmp	r3, #0
 10079ba:	d014      	beq.n	10079e6 <xQueueGenericReset+0x92>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 10079bc:	687b      	ldr	r3, [r7, #4]
 10079be:	3310      	adds	r3, #16
 10079c0:	4618      	mov	r0, r3
 10079c2:	4b0d      	ldr	r3, [pc, #52]	; (10079f8 <xQueueGenericReset+0xa4>)
 10079c4:	4798      	blx	r3
 10079c6:	4603      	mov	r3, r0
 10079c8:	2b01      	cmp	r3, #1
 10079ca:	d10c      	bne.n	10079e6 <xQueueGenericReset+0x92>
				{
					portYIELD_WITHIN_API();
 10079cc:	4b0b      	ldr	r3, [pc, #44]	; (10079fc <xQueueGenericReset+0xa8>)
 10079ce:	4798      	blx	r3
 10079d0:	e009      	b.n	10079e6 <xQueueGenericReset+0x92>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 10079d2:	687b      	ldr	r3, [r7, #4]
 10079d4:	3310      	adds	r3, #16
 10079d6:	4618      	mov	r0, r3
 10079d8:	4b09      	ldr	r3, [pc, #36]	; (1007a00 <xQueueGenericReset+0xac>)
 10079da:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 10079dc:	687b      	ldr	r3, [r7, #4]
 10079de:	3324      	adds	r3, #36	; 0x24
 10079e0:	4618      	mov	r0, r3
 10079e2:	4b07      	ldr	r3, [pc, #28]	; (1007a00 <xQueueGenericReset+0xac>)
 10079e4:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
 10079e6:	4b07      	ldr	r3, [pc, #28]	; (1007a04 <xQueueGenericReset+0xb0>)
 10079e8:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 10079ea:	2301      	movs	r3, #1
}
 10079ec:	4618      	mov	r0, r3
 10079ee:	3708      	adds	r7, #8
 10079f0:	46bd      	mov	sp, r7
 10079f2:	bd80      	pop	{r7, pc}
 10079f4:	010075cd 	.word	0x010075cd
 10079f8:	01008789 	.word	0x01008789
 10079fc:	010075b5 	.word	0x010075b5
 1007a00:	010072dd 	.word	0x010072dd
 1007a04:	010075ed 	.word	0x010075ed

01007a08 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
 1007a08:	b580      	push	{r7, lr}
 1007a0a:	b088      	sub	sp, #32
 1007a0c:	af00      	add	r7, sp, #0
 1007a0e:	60f8      	str	r0, [r7, #12]
 1007a10:	60b9      	str	r1, [r7, #8]
 1007a12:	4613      	mov	r3, r2
 1007a14:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
 1007a16:	2300      	movs	r3, #0
 1007a18:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
 1007a1a:	68fb      	ldr	r3, [r7, #12]
 1007a1c:	2b00      	cmp	r3, #0
 1007a1e:	d026      	beq.n	1007a6e <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 1007a20:	204c      	movs	r0, #76	; 0x4c
 1007a22:	4b15      	ldr	r3, [pc, #84]	; (1007a78 <xQueueGenericCreate+0x70>)
 1007a24:	4798      	blx	r3
 1007a26:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
 1007a28:	69bb      	ldr	r3, [r7, #24]
 1007a2a:	2b00      	cmp	r3, #0
 1007a2c:	d01f      	beq.n	1007a6e <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
 1007a2e:	68fb      	ldr	r3, [r7, #12]
 1007a30:	68ba      	ldr	r2, [r7, #8]
 1007a32:	fb02 f303 	mul.w	r3, r2, r3
 1007a36:	3301      	adds	r3, #1
 1007a38:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
 1007a3a:	6978      	ldr	r0, [r7, #20]
 1007a3c:	4b0e      	ldr	r3, [pc, #56]	; (1007a78 <xQueueGenericCreate+0x70>)
 1007a3e:	4798      	blx	r3
 1007a40:	4602      	mov	r2, r0
 1007a42:	69bb      	ldr	r3, [r7, #24]
 1007a44:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
 1007a46:	69bb      	ldr	r3, [r7, #24]
 1007a48:	681b      	ldr	r3, [r3, #0]
 1007a4a:	2b00      	cmp	r3, #0
 1007a4c:	d00c      	beq.n	1007a68 <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
 1007a4e:	69bb      	ldr	r3, [r7, #24]
 1007a50:	68fa      	ldr	r2, [r7, #12]
 1007a52:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
 1007a54:	69bb      	ldr	r3, [r7, #24]
 1007a56:	68ba      	ldr	r2, [r7, #8]
 1007a58:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
 1007a5a:	2101      	movs	r1, #1
 1007a5c:	69b8      	ldr	r0, [r7, #24]
 1007a5e:	4b07      	ldr	r3, [pc, #28]	; (1007a7c <xQueueGenericCreate+0x74>)
 1007a60:	4798      	blx	r3
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
 1007a62:	69bb      	ldr	r3, [r7, #24]
 1007a64:	61fb      	str	r3, [r7, #28]
 1007a66:	e002      	b.n	1007a6e <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
 1007a68:	69b8      	ldr	r0, [r7, #24]
 1007a6a:	4b05      	ldr	r3, [pc, #20]	; (1007a80 <xQueueGenericCreate+0x78>)
 1007a6c:	4798      	blx	r3
		}
	}

	configASSERT( xReturn );

	return xReturn;
 1007a6e:	69fb      	ldr	r3, [r7, #28]
}
 1007a70:	4618      	mov	r0, r3
 1007a72:	3720      	adds	r7, #32
 1007a74:	46bd      	mov	sp, r7
 1007a76:	bd80      	pop	{r7, pc}
 1007a78:	010076c9 	.word	0x010076c9
 1007a7c:	01007955 	.word	0x01007955
 1007a80:	010077d5 	.word	0x010077d5

01007a84 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
 1007a84:	b590      	push	{r4, r7, lr}
 1007a86:	b085      	sub	sp, #20
 1007a88:	af00      	add	r7, sp, #0
 1007a8a:	4603      	mov	r3, r0
 1007a8c:	71fb      	strb	r3, [r7, #7]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 1007a8e:	204c      	movs	r0, #76	; 0x4c
 1007a90:	4b1b      	ldr	r3, [pc, #108]	; (1007b00 <xQueueCreateMutex+0x7c>)
 1007a92:	4798      	blx	r3
 1007a94:	60f8      	str	r0, [r7, #12]
		if( pxNewQueue != NULL )
 1007a96:	68fb      	ldr	r3, [r7, #12]
 1007a98:	2b00      	cmp	r3, #0
 1007a9a:	d02c      	beq.n	1007af6 <xQueueCreateMutex+0x72>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 1007a9c:	68fb      	ldr	r3, [r7, #12]
 1007a9e:	2200      	movs	r2, #0
 1007aa0:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 1007aa2:	68fb      	ldr	r3, [r7, #12]
 1007aa4:	2200      	movs	r2, #0
 1007aa6:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
 1007aa8:	68fb      	ldr	r3, [r7, #12]
 1007aaa:	2200      	movs	r2, #0
 1007aac:	609a      	str	r2, [r3, #8]
			pxNewQueue->pcReadFrom = NULL;
 1007aae:	68fb      	ldr	r3, [r7, #12]
 1007ab0:	2200      	movs	r2, #0
 1007ab2:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 1007ab4:	68fb      	ldr	r3, [r7, #12]
 1007ab6:	2200      	movs	r2, #0
 1007ab8:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
 1007aba:	68fb      	ldr	r3, [r7, #12]
 1007abc:	2201      	movs	r2, #1
 1007abe:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
 1007ac0:	68fb      	ldr	r3, [r7, #12]
 1007ac2:	2200      	movs	r2, #0
 1007ac4:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
 1007ac6:	68fb      	ldr	r3, [r7, #12]
 1007ac8:	f04f 32ff 	mov.w	r2, #4294967295
 1007acc:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
 1007ace:	68fb      	ldr	r3, [r7, #12]
 1007ad0:	f04f 32ff 	mov.w	r2, #4294967295
 1007ad4:	649a      	str	r2, [r3, #72]	; 0x48
				pxNewQueue->ucQueueType = ucQueueType;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
 1007ad6:	68fb      	ldr	r3, [r7, #12]
 1007ad8:	3310      	adds	r3, #16
 1007ada:	4618      	mov	r0, r3
 1007adc:	4b09      	ldr	r3, [pc, #36]	; (1007b04 <xQueueCreateMutex+0x80>)
 1007ade:	4798      	blx	r3
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
 1007ae0:	68fb      	ldr	r3, [r7, #12]
 1007ae2:	3324      	adds	r3, #36	; 0x24
 1007ae4:	4618      	mov	r0, r3
 1007ae6:	4b07      	ldr	r3, [pc, #28]	; (1007b04 <xQueueCreateMutex+0x80>)
 1007ae8:	4798      	blx	r3

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
 1007aea:	2300      	movs	r3, #0
 1007aec:	2200      	movs	r2, #0
 1007aee:	2100      	movs	r1, #0
 1007af0:	68f8      	ldr	r0, [r7, #12]
 1007af2:	4c05      	ldr	r4, [pc, #20]	; (1007b08 <xQueueCreateMutex+0x84>)
 1007af4:	47a0      	blx	r4
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
 1007af6:	68fb      	ldr	r3, [r7, #12]
	}
 1007af8:	4618      	mov	r0, r3
 1007afa:	3714      	adds	r7, #20
 1007afc:	46bd      	mov	sp, r7
 1007afe:	bd90      	pop	{r4, r7, pc}
 1007b00:	010076c9 	.word	0x010076c9
 1007b04:	010072dd 	.word	0x010072dd
 1007b08:	01007b0d 	.word	0x01007b0d

01007b0c <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
 1007b0c:	b580      	push	{r7, lr}
 1007b0e:	b088      	sub	sp, #32
 1007b10:	af00      	add	r7, sp, #0
 1007b12:	60f8      	str	r0, [r7, #12]
 1007b14:	60b9      	str	r1, [r7, #8]
 1007b16:	607a      	str	r2, [r7, #4]
 1007b18:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 1007b1a:	2300      	movs	r3, #0
 1007b1c:	61fb      	str	r3, [r7, #28]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 1007b1e:	4b3d      	ldr	r3, [pc, #244]	; (1007c14 <xQueueGenericSend+0x108>)
 1007b20:	4798      	blx	r3
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 1007b22:	68fb      	ldr	r3, [r7, #12]
 1007b24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 1007b26:	68fb      	ldr	r3, [r7, #12]
 1007b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 1007b2a:	429a      	cmp	r2, r3
 1007b2c:	d216      	bcs.n	1007b5c <xQueueGenericSend+0x50>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 1007b2e:	683a      	ldr	r2, [r7, #0]
 1007b30:	68b9      	ldr	r1, [r7, #8]
 1007b32:	68f8      	ldr	r0, [r7, #12]
 1007b34:	4b38      	ldr	r3, [pc, #224]	; (1007c18 <xQueueGenericSend+0x10c>)
 1007b36:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 1007b38:	68fb      	ldr	r3, [r7, #12]
 1007b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 1007b3c:	2b00      	cmp	r3, #0
 1007b3e:	d009      	beq.n	1007b54 <xQueueGenericSend+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 1007b40:	68fb      	ldr	r3, [r7, #12]
 1007b42:	3324      	adds	r3, #36	; 0x24
 1007b44:	4618      	mov	r0, r3
 1007b46:	4b35      	ldr	r3, [pc, #212]	; (1007c1c <xQueueGenericSend+0x110>)
 1007b48:	4798      	blx	r3
 1007b4a:	4603      	mov	r3, r0
 1007b4c:	2b01      	cmp	r3, #1
 1007b4e:	d101      	bne.n	1007b54 <xQueueGenericSend+0x48>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
 1007b50:	4b33      	ldr	r3, [pc, #204]	; (1007c20 <xQueueGenericSend+0x114>)
 1007b52:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
 1007b54:	4b33      	ldr	r3, [pc, #204]	; (1007c24 <xQueueGenericSend+0x118>)
 1007b56:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
 1007b58:	2301      	movs	r3, #1
 1007b5a:	e056      	b.n	1007c0a <xQueueGenericSend+0xfe>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 1007b5c:	687b      	ldr	r3, [r7, #4]
 1007b5e:	2b00      	cmp	r3, #0
 1007b60:	d103      	bne.n	1007b6a <xQueueGenericSend+0x5e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 1007b62:	4b30      	ldr	r3, [pc, #192]	; (1007c24 <xQueueGenericSend+0x118>)
 1007b64:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 1007b66:	2300      	movs	r3, #0
 1007b68:	e04f      	b.n	1007c0a <xQueueGenericSend+0xfe>
				}
				else if( xEntryTimeSet == pdFALSE )
 1007b6a:	69fb      	ldr	r3, [r7, #28]
 1007b6c:	2b00      	cmp	r3, #0
 1007b6e:	d106      	bne.n	1007b7e <xQueueGenericSend+0x72>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 1007b70:	f107 0314 	add.w	r3, r7, #20
 1007b74:	4618      	mov	r0, r3
 1007b76:	4b2c      	ldr	r3, [pc, #176]	; (1007c28 <xQueueGenericSend+0x11c>)
 1007b78:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
 1007b7a:	2301      	movs	r3, #1
 1007b7c:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
 1007b7e:	4b29      	ldr	r3, [pc, #164]	; (1007c24 <xQueueGenericSend+0x118>)
 1007b80:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 1007b82:	4b2a      	ldr	r3, [pc, #168]	; (1007c2c <xQueueGenericSend+0x120>)
 1007b84:	4798      	blx	r3
		prvLockQueue( pxQueue );
 1007b86:	4b23      	ldr	r3, [pc, #140]	; (1007c14 <xQueueGenericSend+0x108>)
 1007b88:	4798      	blx	r3
 1007b8a:	68fb      	ldr	r3, [r7, #12]
 1007b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 1007b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 1007b92:	d102      	bne.n	1007b9a <xQueueGenericSend+0x8e>
 1007b94:	68fb      	ldr	r3, [r7, #12]
 1007b96:	2200      	movs	r2, #0
 1007b98:	645a      	str	r2, [r3, #68]	; 0x44
 1007b9a:	68fb      	ldr	r3, [r7, #12]
 1007b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 1007b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 1007ba2:	d102      	bne.n	1007baa <xQueueGenericSend+0x9e>
 1007ba4:	68fb      	ldr	r3, [r7, #12]
 1007ba6:	2200      	movs	r2, #0
 1007ba8:	649a      	str	r2, [r3, #72]	; 0x48
 1007baa:	4b1e      	ldr	r3, [pc, #120]	; (1007c24 <xQueueGenericSend+0x118>)
 1007bac:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 1007bae:	1d3a      	adds	r2, r7, #4
 1007bb0:	f107 0314 	add.w	r3, r7, #20
 1007bb4:	4611      	mov	r1, r2
 1007bb6:	4618      	mov	r0, r3
 1007bb8:	4b1d      	ldr	r3, [pc, #116]	; (1007c30 <xQueueGenericSend+0x124>)
 1007bba:	4798      	blx	r3
 1007bbc:	4603      	mov	r3, r0
 1007bbe:	2b00      	cmp	r3, #0
 1007bc0:	d11d      	bne.n	1007bfe <xQueueGenericSend+0xf2>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 1007bc2:	68f8      	ldr	r0, [r7, #12]
 1007bc4:	4b1b      	ldr	r3, [pc, #108]	; (1007c34 <xQueueGenericSend+0x128>)
 1007bc6:	4798      	blx	r3
 1007bc8:	4603      	mov	r3, r0
 1007bca:	2b00      	cmp	r3, #0
 1007bcc:	d011      	beq.n	1007bf2 <xQueueGenericSend+0xe6>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 1007bce:	68fb      	ldr	r3, [r7, #12]
 1007bd0:	3310      	adds	r3, #16
 1007bd2:	687a      	ldr	r2, [r7, #4]
 1007bd4:	4611      	mov	r1, r2
 1007bd6:	4618      	mov	r0, r3
 1007bd8:	4b17      	ldr	r3, [pc, #92]	; (1007c38 <xQueueGenericSend+0x12c>)
 1007bda:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 1007bdc:	68f8      	ldr	r0, [r7, #12]
 1007bde:	4b17      	ldr	r3, [pc, #92]	; (1007c3c <xQueueGenericSend+0x130>)
 1007be0:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 1007be2:	4b17      	ldr	r3, [pc, #92]	; (1007c40 <xQueueGenericSend+0x134>)
 1007be4:	4798      	blx	r3
 1007be6:	4603      	mov	r3, r0
 1007be8:	2b00      	cmp	r3, #0
 1007bea:	d198      	bne.n	1007b1e <xQueueGenericSend+0x12>
				{
					portYIELD_WITHIN_API();
 1007bec:	4b0c      	ldr	r3, [pc, #48]	; (1007c20 <xQueueGenericSend+0x114>)
 1007bee:	4798      	blx	r3
 1007bf0:	e795      	b.n	1007b1e <xQueueGenericSend+0x12>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 1007bf2:	68f8      	ldr	r0, [r7, #12]
 1007bf4:	4b11      	ldr	r3, [pc, #68]	; (1007c3c <xQueueGenericSend+0x130>)
 1007bf6:	4798      	blx	r3
				( void ) xTaskResumeAll();
 1007bf8:	4b11      	ldr	r3, [pc, #68]	; (1007c40 <xQueueGenericSend+0x134>)
 1007bfa:	4798      	blx	r3
 1007bfc:	e78f      	b.n	1007b1e <xQueueGenericSend+0x12>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 1007bfe:	68f8      	ldr	r0, [r7, #12]
 1007c00:	4b0e      	ldr	r3, [pc, #56]	; (1007c3c <xQueueGenericSend+0x130>)
 1007c02:	4798      	blx	r3
			( void ) xTaskResumeAll();
 1007c04:	4b0e      	ldr	r3, [pc, #56]	; (1007c40 <xQueueGenericSend+0x134>)
 1007c06:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 1007c08:	2300      	movs	r3, #0
		}
	}
}
 1007c0a:	4618      	mov	r0, r3
 1007c0c:	3720      	adds	r7, #32
 1007c0e:	46bd      	mov	sp, r7
 1007c10:	bd80      	pop	{r7, pc}
 1007c12:	bf00      	nop
 1007c14:	010075cd 	.word	0x010075cd
 1007c18:	01007e75 	.word	0x01007e75
 1007c1c:	01008789 	.word	0x01008789
 1007c20:	010075b5 	.word	0x010075b5
 1007c24:	010075ed 	.word	0x010075ed
 1007c28:	01008831 	.word	0x01008831
 1007c2c:	0100838d 	.word	0x0100838d
 1007c30:	0100885d 	.word	0x0100885d
 1007c34:	01008061 	.word	0x01008061
 1007c38:	010086c9 	.word	0x010086c9
 1007c3c:	01007f85 	.word	0x01007f85
 1007c40:	010083a9 	.word	0x010083a9

01007c44 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
 1007c44:	b580      	push	{r7, lr}
 1007c46:	b086      	sub	sp, #24
 1007c48:	af00      	add	r7, sp, #0
 1007c4a:	60f8      	str	r0, [r7, #12]
 1007c4c:	60b9      	str	r1, [r7, #8]
 1007c4e:	607a      	str	r2, [r7, #4]
 1007c50:	603b      	str	r3, [r7, #0]
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1007c52:	4b1c      	ldr	r3, [pc, #112]	; (1007cc4 <xQueueGenericSendFromISR+0x80>)
 1007c54:	4798      	blx	r3
 1007c56:	6138      	str	r0, [r7, #16]
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 1007c58:	68fb      	ldr	r3, [r7, #12]
 1007c5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 1007c5c:	68fb      	ldr	r3, [r7, #12]
 1007c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 1007c60:	429a      	cmp	r2, r3
 1007c62:	d224      	bcs.n	1007cae <xQueueGenericSendFromISR+0x6a>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 1007c64:	683a      	ldr	r2, [r7, #0]
 1007c66:	68b9      	ldr	r1, [r7, #8]
 1007c68:	68f8      	ldr	r0, [r7, #12]
 1007c6a:	4b17      	ldr	r3, [pc, #92]	; (1007cc8 <xQueueGenericSendFromISR+0x84>)
 1007c6c:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 1007c6e:	68fb      	ldr	r3, [r7, #12]
 1007c70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 1007c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 1007c76:	d112      	bne.n	1007c9e <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 1007c78:	68fb      	ldr	r3, [r7, #12]
 1007c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 1007c7c:	2b00      	cmp	r3, #0
 1007c7e:	d013      	beq.n	1007ca8 <xQueueGenericSendFromISR+0x64>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 1007c80:	68fb      	ldr	r3, [r7, #12]
 1007c82:	3324      	adds	r3, #36	; 0x24
 1007c84:	4618      	mov	r0, r3
 1007c86:	4b11      	ldr	r3, [pc, #68]	; (1007ccc <xQueueGenericSendFromISR+0x88>)
 1007c88:	4798      	blx	r3
 1007c8a:	4603      	mov	r3, r0
 1007c8c:	2b00      	cmp	r3, #0
 1007c8e:	d00b      	beq.n	1007ca8 <xQueueGenericSendFromISR+0x64>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
 1007c90:	687b      	ldr	r3, [r7, #4]
 1007c92:	2b00      	cmp	r3, #0
 1007c94:	d008      	beq.n	1007ca8 <xQueueGenericSendFromISR+0x64>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 1007c96:	687b      	ldr	r3, [r7, #4]
 1007c98:	2201      	movs	r2, #1
 1007c9a:	601a      	str	r2, [r3, #0]
 1007c9c:	e004      	b.n	1007ca8 <xQueueGenericSendFromISR+0x64>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 1007c9e:	68fb      	ldr	r3, [r7, #12]
 1007ca0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 1007ca2:	1c5a      	adds	r2, r3, #1
 1007ca4:	68fb      	ldr	r3, [r7, #12]
 1007ca6:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
 1007ca8:	2301      	movs	r3, #1
 1007caa:	617b      	str	r3, [r7, #20]
 1007cac:	e001      	b.n	1007cb2 <xQueueGenericSendFromISR+0x6e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 1007cae:	2300      	movs	r3, #0
 1007cb0:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 1007cb2:	6938      	ldr	r0, [r7, #16]
 1007cb4:	4b06      	ldr	r3, [pc, #24]	; (1007cd0 <xQueueGenericSendFromISR+0x8c>)
 1007cb6:	4798      	blx	r3

	return xReturn;
 1007cb8:	697b      	ldr	r3, [r7, #20]
}
 1007cba:	4618      	mov	r0, r3
 1007cbc:	3718      	adds	r7, #24
 1007cbe:	46bd      	mov	sp, r7
 1007cc0:	bd80      	pop	{r7, pc}
 1007cc2:	bf00      	nop
 1007cc4:	01007615 	.word	0x01007615
 1007cc8:	01007e75 	.word	0x01007e75
 1007ccc:	01008789 	.word	0x01008789
 1007cd0:	01007627 	.word	0x01007627

01007cd4 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
 1007cd4:	b580      	push	{r7, lr}
 1007cd6:	b088      	sub	sp, #32
 1007cd8:	af00      	add	r7, sp, #0
 1007cda:	60f8      	str	r0, [r7, #12]
 1007cdc:	60b9      	str	r1, [r7, #8]
 1007cde:	607a      	str	r2, [r7, #4]
 1007ce0:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 1007ce2:	2300      	movs	r3, #0
 1007ce4:	61fb      	str	r3, [r7, #28]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 1007ce6:	4b55      	ldr	r3, [pc, #340]	; (1007e3c <xQueueGenericReceive+0x168>)
 1007ce8:	4798      	blx	r3
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 1007cea:	68fb      	ldr	r3, [r7, #12]
 1007cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 1007cee:	2b00      	cmp	r3, #0
 1007cf0:	d03b      	beq.n	1007d6a <xQueueGenericReceive+0x96>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
 1007cf2:	68fb      	ldr	r3, [r7, #12]
 1007cf4:	68db      	ldr	r3, [r3, #12]
 1007cf6:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 1007cf8:	68b9      	ldr	r1, [r7, #8]
 1007cfa:	68f8      	ldr	r0, [r7, #12]
 1007cfc:	4b50      	ldr	r3, [pc, #320]	; (1007e40 <xQueueGenericReceive+0x16c>)
 1007cfe:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
 1007d00:	683b      	ldr	r3, [r7, #0]
 1007d02:	2b00      	cmp	r3, #0
 1007d04:	d11c      	bne.n	1007d40 <xQueueGenericReceive+0x6c>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
 1007d06:	68fb      	ldr	r3, [r7, #12]
 1007d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 1007d0a:	1e5a      	subs	r2, r3, #1
 1007d0c:	68fb      	ldr	r3, [r7, #12]
 1007d0e:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 1007d10:	68fb      	ldr	r3, [r7, #12]
 1007d12:	681b      	ldr	r3, [r3, #0]
 1007d14:	2b00      	cmp	r3, #0
 1007d16:	d104      	bne.n	1007d22 <xQueueGenericReceive+0x4e>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
 1007d18:	4b4a      	ldr	r3, [pc, #296]	; (1007e44 <xQueueGenericReceive+0x170>)
 1007d1a:	4798      	blx	r3
 1007d1c:	4602      	mov	r2, r0
 1007d1e:	68fb      	ldr	r3, [r7, #12]
 1007d20:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 1007d22:	68fb      	ldr	r3, [r7, #12]
 1007d24:	691b      	ldr	r3, [r3, #16]
 1007d26:	2b00      	cmp	r3, #0
 1007d28:	d01b      	beq.n	1007d62 <xQueueGenericReceive+0x8e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 1007d2a:	68fb      	ldr	r3, [r7, #12]
 1007d2c:	3310      	adds	r3, #16
 1007d2e:	4618      	mov	r0, r3
 1007d30:	4b45      	ldr	r3, [pc, #276]	; (1007e48 <xQueueGenericReceive+0x174>)
 1007d32:	4798      	blx	r3
 1007d34:	4603      	mov	r3, r0
 1007d36:	2b01      	cmp	r3, #1
 1007d38:	d113      	bne.n	1007d62 <xQueueGenericReceive+0x8e>
						{
							portYIELD_WITHIN_API();
 1007d3a:	4b44      	ldr	r3, [pc, #272]	; (1007e4c <xQueueGenericReceive+0x178>)
 1007d3c:	4798      	blx	r3
 1007d3e:	e010      	b.n	1007d62 <xQueueGenericReceive+0x8e>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
 1007d40:	68fb      	ldr	r3, [r7, #12]
 1007d42:	69ba      	ldr	r2, [r7, #24]
 1007d44:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 1007d46:	68fb      	ldr	r3, [r7, #12]
 1007d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 1007d4a:	2b00      	cmp	r3, #0
 1007d4c:	d009      	beq.n	1007d62 <xQueueGenericReceive+0x8e>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 1007d4e:	68fb      	ldr	r3, [r7, #12]
 1007d50:	3324      	adds	r3, #36	; 0x24
 1007d52:	4618      	mov	r0, r3
 1007d54:	4b3c      	ldr	r3, [pc, #240]	; (1007e48 <xQueueGenericReceive+0x174>)
 1007d56:	4798      	blx	r3
 1007d58:	4603      	mov	r3, r0
 1007d5a:	2b00      	cmp	r3, #0
 1007d5c:	d001      	beq.n	1007d62 <xQueueGenericReceive+0x8e>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
 1007d5e:	4b3b      	ldr	r3, [pc, #236]	; (1007e4c <xQueueGenericReceive+0x178>)
 1007d60:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
 1007d62:	4b3b      	ldr	r3, [pc, #236]	; (1007e50 <xQueueGenericReceive+0x17c>)
 1007d64:	4798      	blx	r3
				return pdPASS;
 1007d66:	2301      	movs	r3, #1
 1007d68:	e064      	b.n	1007e34 <xQueueGenericReceive+0x160>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 1007d6a:	687b      	ldr	r3, [r7, #4]
 1007d6c:	2b00      	cmp	r3, #0
 1007d6e:	d103      	bne.n	1007d78 <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 1007d70:	4b37      	ldr	r3, [pc, #220]	; (1007e50 <xQueueGenericReceive+0x17c>)
 1007d72:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 1007d74:	2300      	movs	r3, #0
 1007d76:	e05d      	b.n	1007e34 <xQueueGenericReceive+0x160>
				}
				else if( xEntryTimeSet == pdFALSE )
 1007d78:	69fb      	ldr	r3, [r7, #28]
 1007d7a:	2b00      	cmp	r3, #0
 1007d7c:	d106      	bne.n	1007d8c <xQueueGenericReceive+0xb8>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 1007d7e:	f107 0310 	add.w	r3, r7, #16
 1007d82:	4618      	mov	r0, r3
 1007d84:	4b33      	ldr	r3, [pc, #204]	; (1007e54 <xQueueGenericReceive+0x180>)
 1007d86:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
 1007d88:	2301      	movs	r3, #1
 1007d8a:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
 1007d8c:	4b30      	ldr	r3, [pc, #192]	; (1007e50 <xQueueGenericReceive+0x17c>)
 1007d8e:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 1007d90:	4b31      	ldr	r3, [pc, #196]	; (1007e58 <xQueueGenericReceive+0x184>)
 1007d92:	4798      	blx	r3
		prvLockQueue( pxQueue );
 1007d94:	4b29      	ldr	r3, [pc, #164]	; (1007e3c <xQueueGenericReceive+0x168>)
 1007d96:	4798      	blx	r3
 1007d98:	68fb      	ldr	r3, [r7, #12]
 1007d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 1007d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 1007da0:	d102      	bne.n	1007da8 <xQueueGenericReceive+0xd4>
 1007da2:	68fb      	ldr	r3, [r7, #12]
 1007da4:	2200      	movs	r2, #0
 1007da6:	645a      	str	r2, [r3, #68]	; 0x44
 1007da8:	68fb      	ldr	r3, [r7, #12]
 1007daa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 1007dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 1007db0:	d102      	bne.n	1007db8 <xQueueGenericReceive+0xe4>
 1007db2:	68fb      	ldr	r3, [r7, #12]
 1007db4:	2200      	movs	r2, #0
 1007db6:	649a      	str	r2, [r3, #72]	; 0x48
 1007db8:	4b25      	ldr	r3, [pc, #148]	; (1007e50 <xQueueGenericReceive+0x17c>)
 1007dba:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 1007dbc:	1d3a      	adds	r2, r7, #4
 1007dbe:	f107 0310 	add.w	r3, r7, #16
 1007dc2:	4611      	mov	r1, r2
 1007dc4:	4618      	mov	r0, r3
 1007dc6:	4b25      	ldr	r3, [pc, #148]	; (1007e5c <xQueueGenericReceive+0x188>)
 1007dc8:	4798      	blx	r3
 1007dca:	4603      	mov	r3, r0
 1007dcc:	2b00      	cmp	r3, #0
 1007dce:	d12b      	bne.n	1007e28 <xQueueGenericReceive+0x154>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 1007dd0:	68f8      	ldr	r0, [r7, #12]
 1007dd2:	4b23      	ldr	r3, [pc, #140]	; (1007e60 <xQueueGenericReceive+0x18c>)
 1007dd4:	4798      	blx	r3
 1007dd6:	4603      	mov	r3, r0
 1007dd8:	2b00      	cmp	r3, #0
 1007dda:	d01f      	beq.n	1007e1c <xQueueGenericReceive+0x148>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 1007ddc:	68fb      	ldr	r3, [r7, #12]
 1007dde:	681b      	ldr	r3, [r3, #0]
 1007de0:	2b00      	cmp	r3, #0
 1007de2:	d108      	bne.n	1007df6 <xQueueGenericReceive+0x122>
					{
						portENTER_CRITICAL();
 1007de4:	4b15      	ldr	r3, [pc, #84]	; (1007e3c <xQueueGenericReceive+0x168>)
 1007de6:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 1007de8:	68fb      	ldr	r3, [r7, #12]
 1007dea:	685b      	ldr	r3, [r3, #4]
 1007dec:	4618      	mov	r0, r3
 1007dee:	4b1d      	ldr	r3, [pc, #116]	; (1007e64 <xQueueGenericReceive+0x190>)
 1007df0:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
 1007df2:	4b17      	ldr	r3, [pc, #92]	; (1007e50 <xQueueGenericReceive+0x17c>)
 1007df4:	4798      	blx	r3
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 1007df6:	68fb      	ldr	r3, [r7, #12]
 1007df8:	3324      	adds	r3, #36	; 0x24
 1007dfa:	687a      	ldr	r2, [r7, #4]
 1007dfc:	4611      	mov	r1, r2
 1007dfe:	4618      	mov	r0, r3
 1007e00:	4b19      	ldr	r3, [pc, #100]	; (1007e68 <xQueueGenericReceive+0x194>)
 1007e02:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
 1007e04:	68f8      	ldr	r0, [r7, #12]
 1007e06:	4b19      	ldr	r3, [pc, #100]	; (1007e6c <xQueueGenericReceive+0x198>)
 1007e08:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
 1007e0a:	4b19      	ldr	r3, [pc, #100]	; (1007e70 <xQueueGenericReceive+0x19c>)
 1007e0c:	4798      	blx	r3
 1007e0e:	4603      	mov	r3, r0
 1007e10:	2b00      	cmp	r3, #0
 1007e12:	f47f af68 	bne.w	1007ce6 <xQueueGenericReceive+0x12>
				{
					portYIELD_WITHIN_API();
 1007e16:	4b0d      	ldr	r3, [pc, #52]	; (1007e4c <xQueueGenericReceive+0x178>)
 1007e18:	4798      	blx	r3
 1007e1a:	e764      	b.n	1007ce6 <xQueueGenericReceive+0x12>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 1007e1c:	68f8      	ldr	r0, [r7, #12]
 1007e1e:	4b13      	ldr	r3, [pc, #76]	; (1007e6c <xQueueGenericReceive+0x198>)
 1007e20:	4798      	blx	r3
				( void ) xTaskResumeAll();
 1007e22:	4b13      	ldr	r3, [pc, #76]	; (1007e70 <xQueueGenericReceive+0x19c>)
 1007e24:	4798      	blx	r3
 1007e26:	e75e      	b.n	1007ce6 <xQueueGenericReceive+0x12>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 1007e28:	68f8      	ldr	r0, [r7, #12]
 1007e2a:	4b10      	ldr	r3, [pc, #64]	; (1007e6c <xQueueGenericReceive+0x198>)
 1007e2c:	4798      	blx	r3
			( void ) xTaskResumeAll();
 1007e2e:	4b10      	ldr	r3, [pc, #64]	; (1007e70 <xQueueGenericReceive+0x19c>)
 1007e30:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 1007e32:	2300      	movs	r3, #0
		}
	}
}
 1007e34:	4618      	mov	r0, r3
 1007e36:	3720      	adds	r7, #32
 1007e38:	46bd      	mov	sp, r7
 1007e3a:	bd80      	pop	{r7, pc}
 1007e3c:	010075cd 	.word	0x010075cd
 1007e40:	01007f35 	.word	0x01007f35
 1007e44:	01008bb9 	.word	0x01008bb9
 1007e48:	01008789 	.word	0x01008789
 1007e4c:	010075b5 	.word	0x010075b5
 1007e50:	010075ed 	.word	0x010075ed
 1007e54:	01008831 	.word	0x01008831
 1007e58:	0100838d 	.word	0x0100838d
 1007e5c:	0100885d 	.word	0x0100885d
 1007e60:	0100802d 	.word	0x0100802d
 1007e64:	01008c11 	.word	0x01008c11
 1007e68:	010086c9 	.word	0x010086c9
 1007e6c:	01007f85 	.word	0x01007f85
 1007e70:	010083a9 	.word	0x010083a9

01007e74 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
 1007e74:	b580      	push	{r7, lr}
 1007e76:	b084      	sub	sp, #16
 1007e78:	af00      	add	r7, sp, #0
 1007e7a:	60f8      	str	r0, [r7, #12]
 1007e7c:	60b9      	str	r1, [r7, #8]
 1007e7e:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
 1007e80:	68fb      	ldr	r3, [r7, #12]
 1007e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 1007e84:	2b00      	cmp	r3, #0
 1007e86:	d10c      	bne.n	1007ea2 <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 1007e88:	68fb      	ldr	r3, [r7, #12]
 1007e8a:	681b      	ldr	r3, [r3, #0]
 1007e8c:	2b00      	cmp	r3, #0
 1007e8e:	d143      	bne.n	1007f18 <prvCopyDataToQueue+0xa4>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 1007e90:	68fb      	ldr	r3, [r7, #12]
 1007e92:	685b      	ldr	r3, [r3, #4]
 1007e94:	4618      	mov	r0, r3
 1007e96:	4b25      	ldr	r3, [pc, #148]	; (1007f2c <prvCopyDataToQueue+0xb8>)
 1007e98:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
 1007e9a:	68fb      	ldr	r3, [r7, #12]
 1007e9c:	2200      	movs	r2, #0
 1007e9e:	605a      	str	r2, [r3, #4]
 1007ea0:	e03a      	b.n	1007f18 <prvCopyDataToQueue+0xa4>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
 1007ea2:	687b      	ldr	r3, [r7, #4]
 1007ea4:	2b00      	cmp	r3, #0
 1007ea6:	d119      	bne.n	1007edc <prvCopyDataToQueue+0x68>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 1007ea8:	68fb      	ldr	r3, [r7, #12]
 1007eaa:	6898      	ldr	r0, [r3, #8]
 1007eac:	68fb      	ldr	r3, [r7, #12]
 1007eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 1007eb0:	461a      	mov	r2, r3
 1007eb2:	68b9      	ldr	r1, [r7, #8]
 1007eb4:	4b1e      	ldr	r3, [pc, #120]	; (1007f30 <prvCopyDataToQueue+0xbc>)
 1007eb6:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 1007eb8:	68fb      	ldr	r3, [r7, #12]
 1007eba:	689a      	ldr	r2, [r3, #8]
 1007ebc:	68fb      	ldr	r3, [r7, #12]
 1007ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 1007ec0:	441a      	add	r2, r3
 1007ec2:	68fb      	ldr	r3, [r7, #12]
 1007ec4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
 1007ec6:	68fb      	ldr	r3, [r7, #12]
 1007ec8:	689a      	ldr	r2, [r3, #8]
 1007eca:	68fb      	ldr	r3, [r7, #12]
 1007ecc:	685b      	ldr	r3, [r3, #4]
 1007ece:	429a      	cmp	r2, r3
 1007ed0:	d322      	bcc.n	1007f18 <prvCopyDataToQueue+0xa4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 1007ed2:	68fb      	ldr	r3, [r7, #12]
 1007ed4:	681a      	ldr	r2, [r3, #0]
 1007ed6:	68fb      	ldr	r3, [r7, #12]
 1007ed8:	609a      	str	r2, [r3, #8]
 1007eda:	e01d      	b.n	1007f18 <prvCopyDataToQueue+0xa4>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 1007edc:	68fb      	ldr	r3, [r7, #12]
 1007ede:	68d8      	ldr	r0, [r3, #12]
 1007ee0:	68fb      	ldr	r3, [r7, #12]
 1007ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 1007ee4:	461a      	mov	r2, r3
 1007ee6:	68b9      	ldr	r1, [r7, #8]
 1007ee8:	4b11      	ldr	r3, [pc, #68]	; (1007f30 <prvCopyDataToQueue+0xbc>)
 1007eea:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
 1007eec:	68fb      	ldr	r3, [r7, #12]
 1007eee:	68da      	ldr	r2, [r3, #12]
 1007ef0:	68fb      	ldr	r3, [r7, #12]
 1007ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 1007ef4:	425b      	negs	r3, r3
 1007ef6:	441a      	add	r2, r3
 1007ef8:	68fb      	ldr	r3, [r7, #12]
 1007efa:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
 1007efc:	68fb      	ldr	r3, [r7, #12]
 1007efe:	68da      	ldr	r2, [r3, #12]
 1007f00:	68fb      	ldr	r3, [r7, #12]
 1007f02:	681b      	ldr	r3, [r3, #0]
 1007f04:	429a      	cmp	r2, r3
 1007f06:	d207      	bcs.n	1007f18 <prvCopyDataToQueue+0xa4>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 1007f08:	68fb      	ldr	r3, [r7, #12]
 1007f0a:	685a      	ldr	r2, [r3, #4]
 1007f0c:	68fb      	ldr	r3, [r7, #12]
 1007f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 1007f10:	425b      	negs	r3, r3
 1007f12:	441a      	add	r2, r3
 1007f14:	68fb      	ldr	r3, [r7, #12]
 1007f16:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
 1007f18:	68fb      	ldr	r3, [r7, #12]
 1007f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 1007f1c:	1c5a      	adds	r2, r3, #1
 1007f1e:	68fb      	ldr	r3, [r7, #12]
 1007f20:	639a      	str	r2, [r3, #56]	; 0x38
}
 1007f22:	bf00      	nop
 1007f24:	3710      	adds	r7, #16
 1007f26:	46bd      	mov	sp, r7
 1007f28:	bd80      	pop	{r7, pc}
 1007f2a:	bf00      	nop
 1007f2c:	01008cc5 	.word	0x01008cc5
 1007f30:	0100c551 	.word	0x0100c551

01007f34 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
 1007f34:	b580      	push	{r7, lr}
 1007f36:	b082      	sub	sp, #8
 1007f38:	af00      	add	r7, sp, #0
 1007f3a:	6078      	str	r0, [r7, #4]
 1007f3c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
 1007f3e:	687b      	ldr	r3, [r7, #4]
 1007f40:	681b      	ldr	r3, [r3, #0]
 1007f42:	2b00      	cmp	r3, #0
 1007f44:	d018      	beq.n	1007f78 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
 1007f46:	687b      	ldr	r3, [r7, #4]
 1007f48:	68da      	ldr	r2, [r3, #12]
 1007f4a:	687b      	ldr	r3, [r7, #4]
 1007f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 1007f4e:	441a      	add	r2, r3
 1007f50:	687b      	ldr	r3, [r7, #4]
 1007f52:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
 1007f54:	687b      	ldr	r3, [r7, #4]
 1007f56:	68da      	ldr	r2, [r3, #12]
 1007f58:	687b      	ldr	r3, [r7, #4]
 1007f5a:	685b      	ldr	r3, [r3, #4]
 1007f5c:	429a      	cmp	r2, r3
 1007f5e:	d303      	bcc.n	1007f68 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
 1007f60:	687b      	ldr	r3, [r7, #4]
 1007f62:	681a      	ldr	r2, [r3, #0]
 1007f64:	687b      	ldr	r3, [r7, #4]
 1007f66:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
 1007f68:	687b      	ldr	r3, [r7, #4]
 1007f6a:	68d9      	ldr	r1, [r3, #12]
 1007f6c:	687b      	ldr	r3, [r7, #4]
 1007f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 1007f70:	461a      	mov	r2, r3
 1007f72:	6838      	ldr	r0, [r7, #0]
 1007f74:	4b02      	ldr	r3, [pc, #8]	; (1007f80 <prvCopyDataFromQueue+0x4c>)
 1007f76:	4798      	blx	r3
	}
}
 1007f78:	bf00      	nop
 1007f7a:	3708      	adds	r7, #8
 1007f7c:	46bd      	mov	sp, r7
 1007f7e:	bd80      	pop	{r7, pc}
 1007f80:	0100c551 	.word	0x0100c551

01007f84 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
 1007f84:	b580      	push	{r7, lr}
 1007f86:	b082      	sub	sp, #8
 1007f88:	af00      	add	r7, sp, #0
 1007f8a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 1007f8c:	4b23      	ldr	r3, [pc, #140]	; (100801c <prvUnlockQueue+0x98>)
 1007f8e:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 1007f90:	e012      	b.n	1007fb8 <prvUnlockQueue+0x34>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 1007f92:	687b      	ldr	r3, [r7, #4]
 1007f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 1007f96:	2b00      	cmp	r3, #0
 1007f98:	d013      	beq.n	1007fc2 <prvUnlockQueue+0x3e>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 1007f9a:	687b      	ldr	r3, [r7, #4]
 1007f9c:	3324      	adds	r3, #36	; 0x24
 1007f9e:	4618      	mov	r0, r3
 1007fa0:	4b1f      	ldr	r3, [pc, #124]	; (1008020 <prvUnlockQueue+0x9c>)
 1007fa2:	4798      	blx	r3
 1007fa4:	4603      	mov	r3, r0
 1007fa6:	2b00      	cmp	r3, #0
 1007fa8:	d001      	beq.n	1007fae <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
 1007faa:	4b1e      	ldr	r3, [pc, #120]	; (1008024 <prvUnlockQueue+0xa0>)
 1007fac:	4798      	blx	r3
				}

				--( pxQueue->xTxLock );
 1007fae:	687b      	ldr	r3, [r7, #4]
 1007fb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 1007fb2:	1e5a      	subs	r2, r3, #1
 1007fb4:	687b      	ldr	r3, [r7, #4]
 1007fb6:	649a      	str	r2, [r3, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 1007fb8:	687b      	ldr	r3, [r7, #4]
 1007fba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 1007fbc:	2b00      	cmp	r3, #0
 1007fbe:	dce8      	bgt.n	1007f92 <prvUnlockQueue+0xe>
 1007fc0:	e000      	b.n	1007fc4 <prvUnlockQueue+0x40>
			}
			else
			{
				break;
 1007fc2:	bf00      	nop
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
 1007fc4:	687b      	ldr	r3, [r7, #4]
 1007fc6:	f04f 32ff 	mov.w	r2, #4294967295
 1007fca:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 1007fcc:	4b16      	ldr	r3, [pc, #88]	; (1008028 <prvUnlockQueue+0xa4>)
 1007fce:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 1007fd0:	4b12      	ldr	r3, [pc, #72]	; (100801c <prvUnlockQueue+0x98>)
 1007fd2:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 1007fd4:	e012      	b.n	1007ffc <prvUnlockQueue+0x78>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 1007fd6:	687b      	ldr	r3, [r7, #4]
 1007fd8:	691b      	ldr	r3, [r3, #16]
 1007fda:	2b00      	cmp	r3, #0
 1007fdc:	d013      	beq.n	1008006 <prvUnlockQueue+0x82>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 1007fde:	687b      	ldr	r3, [r7, #4]
 1007fe0:	3310      	adds	r3, #16
 1007fe2:	4618      	mov	r0, r3
 1007fe4:	4b0e      	ldr	r3, [pc, #56]	; (1008020 <prvUnlockQueue+0x9c>)
 1007fe6:	4798      	blx	r3
 1007fe8:	4603      	mov	r3, r0
 1007fea:	2b00      	cmp	r3, #0
 1007fec:	d001      	beq.n	1007ff2 <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
 1007fee:	4b0d      	ldr	r3, [pc, #52]	; (1008024 <prvUnlockQueue+0xa0>)
 1007ff0:	4798      	blx	r3
				}

				--( pxQueue->xRxLock );
 1007ff2:	687b      	ldr	r3, [r7, #4]
 1007ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 1007ff6:	1e5a      	subs	r2, r3, #1
 1007ff8:	687b      	ldr	r3, [r7, #4]
 1007ffa:	645a      	str	r2, [r3, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 1007ffc:	687b      	ldr	r3, [r7, #4]
 1007ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 1008000:	2b00      	cmp	r3, #0
 1008002:	dce8      	bgt.n	1007fd6 <prvUnlockQueue+0x52>
 1008004:	e000      	b.n	1008008 <prvUnlockQueue+0x84>
			}
			else
			{
				break;
 1008006:	bf00      	nop
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 1008008:	687b      	ldr	r3, [r7, #4]
 100800a:	f04f 32ff 	mov.w	r2, #4294967295
 100800e:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 1008010:	4b05      	ldr	r3, [pc, #20]	; (1008028 <prvUnlockQueue+0xa4>)
 1008012:	4798      	blx	r3
}
 1008014:	bf00      	nop
 1008016:	3708      	adds	r7, #8
 1008018:	46bd      	mov	sp, r7
 100801a:	bd80      	pop	{r7, pc}
 100801c:	010075cd 	.word	0x010075cd
 1008020:	01008789 	.word	0x01008789
 1008024:	010088f1 	.word	0x010088f1
 1008028:	010075ed 	.word	0x010075ed

0100802c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
 100802c:	b580      	push	{r7, lr}
 100802e:	b084      	sub	sp, #16
 1008030:	af00      	add	r7, sp, #0
 1008032:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 1008034:	4b08      	ldr	r3, [pc, #32]	; (1008058 <prvIsQueueEmpty+0x2c>)
 1008036:	4798      	blx	r3
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
 1008038:	687b      	ldr	r3, [r7, #4]
 100803a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 100803c:	2b00      	cmp	r3, #0
 100803e:	bf0c      	ite	eq
 1008040:	2301      	moveq	r3, #1
 1008042:	2300      	movne	r3, #0
 1008044:	b2db      	uxtb	r3, r3
 1008046:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
 1008048:	4b04      	ldr	r3, [pc, #16]	; (100805c <prvIsQueueEmpty+0x30>)
 100804a:	4798      	blx	r3

	return xReturn;
 100804c:	68fb      	ldr	r3, [r7, #12]
}
 100804e:	4618      	mov	r0, r3
 1008050:	3710      	adds	r7, #16
 1008052:	46bd      	mov	sp, r7
 1008054:	bd80      	pop	{r7, pc}
 1008056:	bf00      	nop
 1008058:	010075cd 	.word	0x010075cd
 100805c:	010075ed 	.word	0x010075ed

01008060 <prvIsQueueFull>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
 1008060:	b580      	push	{r7, lr}
 1008062:	b084      	sub	sp, #16
 1008064:	af00      	add	r7, sp, #0
 1008066:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 1008068:	4b09      	ldr	r3, [pc, #36]	; (1008090 <prvIsQueueFull+0x30>)
 100806a:	4798      	blx	r3
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
 100806c:	687b      	ldr	r3, [r7, #4]
 100806e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 1008070:	687b      	ldr	r3, [r7, #4]
 1008072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 1008074:	429a      	cmp	r2, r3
 1008076:	bf0c      	ite	eq
 1008078:	2301      	moveq	r3, #1
 100807a:	2300      	movne	r3, #0
 100807c:	b2db      	uxtb	r3, r3
 100807e:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
 1008080:	4b04      	ldr	r3, [pc, #16]	; (1008094 <prvIsQueueFull+0x34>)
 1008082:	4798      	blx	r3

	return xReturn;
 1008084:	68fb      	ldr	r3, [r7, #12]
}
 1008086:	4618      	mov	r0, r3
 1008088:	3710      	adds	r7, #16
 100808a:	46bd      	mov	sp, r7
 100808c:	bd80      	pop	{r7, pc}
 100808e:	bf00      	nop
 1008090:	010075cd 	.word	0x010075cd
 1008094:	010075ed 	.word	0x010075ed

01008098 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
 1008098:	b580      	push	{r7, lr}
 100809a:	b082      	sub	sp, #8
 100809c:	af00      	add	r7, sp, #0
 100809e:	6078      	str	r0, [r7, #4]
 10080a0:	6039      	str	r1, [r7, #0]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 10080a2:	4b12      	ldr	r3, [pc, #72]	; (10080ec <vQueueWaitForMessageRestricted+0x54>)
 10080a4:	4798      	blx	r3
 10080a6:	687b      	ldr	r3, [r7, #4]
 10080a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 10080aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 10080ae:	d102      	bne.n	10080b6 <vQueueWaitForMessageRestricted+0x1e>
 10080b0:	687b      	ldr	r3, [r7, #4]
 10080b2:	2200      	movs	r2, #0
 10080b4:	645a      	str	r2, [r3, #68]	; 0x44
 10080b6:	687b      	ldr	r3, [r7, #4]
 10080b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 10080ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 10080be:	d102      	bne.n	10080c6 <vQueueWaitForMessageRestricted+0x2e>
 10080c0:	687b      	ldr	r3, [r7, #4]
 10080c2:	2200      	movs	r2, #0
 10080c4:	649a      	str	r2, [r3, #72]	; 0x48
 10080c6:	4b0a      	ldr	r3, [pc, #40]	; (10080f0 <vQueueWaitForMessageRestricted+0x58>)
 10080c8:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
 10080ca:	687b      	ldr	r3, [r7, #4]
 10080cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 10080ce:	2b00      	cmp	r3, #0
 10080d0:	d105      	bne.n	10080de <vQueueWaitForMessageRestricted+0x46>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 10080d2:	687b      	ldr	r3, [r7, #4]
 10080d4:	3324      	adds	r3, #36	; 0x24
 10080d6:	6839      	ldr	r1, [r7, #0]
 10080d8:	4618      	mov	r0, r3
 10080da:	4b06      	ldr	r3, [pc, #24]	; (10080f4 <vQueueWaitForMessageRestricted+0x5c>)
 10080dc:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
 10080de:	6878      	ldr	r0, [r7, #4]
 10080e0:	4b05      	ldr	r3, [pc, #20]	; (10080f8 <vQueueWaitForMessageRestricted+0x60>)
 10080e2:	4798      	blx	r3
	}
 10080e4:	bf00      	nop
 10080e6:	3708      	adds	r7, #8
 10080e8:	46bd      	mov	sp, r7
 10080ea:	bd80      	pop	{r7, pc}
 10080ec:	010075cd 	.word	0x010075cd
 10080f0:	010075ed 	.word	0x010075ed
 10080f4:	01008739 	.word	0x01008739
 10080f8:	01007f85 	.word	0x01007f85

010080fc <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
 10080fc:	b590      	push	{r4, r7, lr}
 10080fe:	b08b      	sub	sp, #44	; 0x2c
 1008100:	af02      	add	r7, sp, #8
 1008102:	60f8      	str	r0, [r7, #12]
 1008104:	60b9      	str	r1, [r7, #8]
 1008106:	603b      	str	r3, [r7, #0]
 1008108:	4613      	mov	r3, r2
 100810a:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 100810c:	88fb      	ldrh	r3, [r7, #6]
 100810e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 1008110:	4618      	mov	r0, r3
 1008112:	4b47      	ldr	r3, [pc, #284]	; (1008230 <xTaskGenericCreate+0x134>)
 1008114:	4798      	blx	r3
 1008116:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
 1008118:	69bb      	ldr	r3, [r7, #24]
 100811a:	2b00      	cmp	r3, #0
 100811c:	d070      	beq.n	1008200 <xTaskGenericCreate+0x104>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 100811e:	69bb      	ldr	r3, [r7, #24]
 1008120:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 1008122:	88fb      	ldrh	r3, [r7, #6]
 1008124:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 1008128:	3b01      	subs	r3, #1
 100812a:	009b      	lsls	r3, r3, #2
 100812c:	4413      	add	r3, r2
 100812e:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
 1008130:	697b      	ldr	r3, [r7, #20]
 1008132:	f023 0307 	bic.w	r3, r3, #7
 1008136:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 1008138:	88fb      	ldrh	r3, [r7, #6]
 100813a:	9300      	str	r3, [sp, #0]
 100813c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 100813e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 1008140:	68b9      	ldr	r1, [r7, #8]
 1008142:	69b8      	ldr	r0, [r7, #24]
 1008144:	4c3b      	ldr	r4, [pc, #236]	; (1008234 <xTaskGenericCreate+0x138>)
 1008146:	47a0      	blx	r4
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 1008148:	683a      	ldr	r2, [r7, #0]
 100814a:	68f9      	ldr	r1, [r7, #12]
 100814c:	6978      	ldr	r0, [r7, #20]
 100814e:	4b3a      	ldr	r3, [pc, #232]	; (1008238 <xTaskGenericCreate+0x13c>)
 1008150:	4798      	blx	r3
 1008152:	4602      	mov	r2, r0
 1008154:	69bb      	ldr	r3, [r7, #24]
 1008156:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
 1008158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 100815a:	2b00      	cmp	r3, #0
 100815c:	d002      	beq.n	1008164 <xTaskGenericCreate+0x68>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
 100815e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 1008160:	69ba      	ldr	r2, [r7, #24]
 1008162:	601a      	str	r2, [r3, #0]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
 1008164:	4b35      	ldr	r3, [pc, #212]	; (100823c <xTaskGenericCreate+0x140>)
 1008166:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
 1008168:	4b35      	ldr	r3, [pc, #212]	; (1008240 <xTaskGenericCreate+0x144>)
 100816a:	681b      	ldr	r3, [r3, #0]
 100816c:	3301      	adds	r3, #1
 100816e:	4a34      	ldr	r2, [pc, #208]	; (1008240 <xTaskGenericCreate+0x144>)
 1008170:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
 1008172:	4b34      	ldr	r3, [pc, #208]	; (1008244 <xTaskGenericCreate+0x148>)
 1008174:	681b      	ldr	r3, [r3, #0]
 1008176:	2b00      	cmp	r3, #0
 1008178:	d109      	bne.n	100818e <xTaskGenericCreate+0x92>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 100817a:	4a32      	ldr	r2, [pc, #200]	; (1008244 <xTaskGenericCreate+0x148>)
 100817c:	69bb      	ldr	r3, [r7, #24]
 100817e:	6013      	str	r3, [r2, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
 1008180:	4b2f      	ldr	r3, [pc, #188]	; (1008240 <xTaskGenericCreate+0x144>)
 1008182:	681b      	ldr	r3, [r3, #0]
 1008184:	2b01      	cmp	r3, #1
 1008186:	d10f      	bne.n	10081a8 <xTaskGenericCreate+0xac>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
 1008188:	4b2f      	ldr	r3, [pc, #188]	; (1008248 <xTaskGenericCreate+0x14c>)
 100818a:	4798      	blx	r3
 100818c:	e00c      	b.n	10081a8 <xTaskGenericCreate+0xac>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 100818e:	4b2f      	ldr	r3, [pc, #188]	; (100824c <xTaskGenericCreate+0x150>)
 1008190:	681b      	ldr	r3, [r3, #0]
 1008192:	2b00      	cmp	r3, #0
 1008194:	d108      	bne.n	10081a8 <xTaskGenericCreate+0xac>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 1008196:	4b2b      	ldr	r3, [pc, #172]	; (1008244 <xTaskGenericCreate+0x148>)
 1008198:	681b      	ldr	r3, [r3, #0]
 100819a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 100819c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 100819e:	429a      	cmp	r2, r3
 10081a0:	d802      	bhi.n	10081a8 <xTaskGenericCreate+0xac>
					{
						pxCurrentTCB = pxNewTCB;
 10081a2:	4a28      	ldr	r2, [pc, #160]	; (1008244 <xTaskGenericCreate+0x148>)
 10081a4:	69bb      	ldr	r3, [r7, #24]
 10081a6:	6013      	str	r3, [r2, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
 10081a8:	69bb      	ldr	r3, [r7, #24]
 10081aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 10081ac:	4b28      	ldr	r3, [pc, #160]	; (1008250 <xTaskGenericCreate+0x154>)
 10081ae:	681b      	ldr	r3, [r3, #0]
 10081b0:	429a      	cmp	r2, r3
 10081b2:	d903      	bls.n	10081bc <xTaskGenericCreate+0xc0>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
 10081b4:	69bb      	ldr	r3, [r7, #24]
 10081b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 10081b8:	4a25      	ldr	r2, [pc, #148]	; (1008250 <xTaskGenericCreate+0x154>)
 10081ba:	6013      	str	r3, [r2, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
 10081bc:	4b25      	ldr	r3, [pc, #148]	; (1008254 <xTaskGenericCreate+0x158>)
 10081be:	681b      	ldr	r3, [r3, #0]
 10081c0:	3301      	adds	r3, #1
 10081c2:	4a24      	ldr	r2, [pc, #144]	; (1008254 <xTaskGenericCreate+0x158>)
 10081c4:	6013      	str	r3, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
 10081c6:	69bb      	ldr	r3, [r7, #24]
 10081c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 10081ca:	4b23      	ldr	r3, [pc, #140]	; (1008258 <xTaskGenericCreate+0x15c>)
 10081cc:	681b      	ldr	r3, [r3, #0]
 10081ce:	429a      	cmp	r2, r3
 10081d0:	d903      	bls.n	10081da <xTaskGenericCreate+0xde>
 10081d2:	69bb      	ldr	r3, [r7, #24]
 10081d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 10081d6:	4a20      	ldr	r2, [pc, #128]	; (1008258 <xTaskGenericCreate+0x15c>)
 10081d8:	6013      	str	r3, [r2, #0]
 10081da:	69bb      	ldr	r3, [r7, #24]
 10081dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 10081de:	4613      	mov	r3, r2
 10081e0:	009b      	lsls	r3, r3, #2
 10081e2:	4413      	add	r3, r2
 10081e4:	009b      	lsls	r3, r3, #2
 10081e6:	4a1d      	ldr	r2, [pc, #116]	; (100825c <xTaskGenericCreate+0x160>)
 10081e8:	441a      	add	r2, r3
 10081ea:	69bb      	ldr	r3, [r7, #24]
 10081ec:	3304      	adds	r3, #4
 10081ee:	4619      	mov	r1, r3
 10081f0:	4610      	mov	r0, r2
 10081f2:	4b1b      	ldr	r3, [pc, #108]	; (1008260 <xTaskGenericCreate+0x164>)
 10081f4:	4798      	blx	r3

			xReturn = pdPASS;
 10081f6:	2301      	movs	r3, #1
 10081f8:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 10081fa:	4b1a      	ldr	r3, [pc, #104]	; (1008264 <xTaskGenericCreate+0x168>)
 10081fc:	4798      	blx	r3
 10081fe:	e002      	b.n	1008206 <xTaskGenericCreate+0x10a>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 1008200:	f04f 33ff 	mov.w	r3, #4294967295
 1008204:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
 1008206:	69fb      	ldr	r3, [r7, #28]
 1008208:	2b01      	cmp	r3, #1
 100820a:	d10b      	bne.n	1008224 <xTaskGenericCreate+0x128>
	{
		if( xSchedulerRunning != pdFALSE )
 100820c:	4b0f      	ldr	r3, [pc, #60]	; (100824c <xTaskGenericCreate+0x150>)
 100820e:	681b      	ldr	r3, [r3, #0]
 1008210:	2b00      	cmp	r3, #0
 1008212:	d007      	beq.n	1008224 <xTaskGenericCreate+0x128>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 1008214:	4b0b      	ldr	r3, [pc, #44]	; (1008244 <xTaskGenericCreate+0x148>)
 1008216:	681b      	ldr	r3, [r3, #0]
 1008218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 100821a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 100821c:	429a      	cmp	r2, r3
 100821e:	d201      	bcs.n	1008224 <xTaskGenericCreate+0x128>
			{
				portYIELD_WITHIN_API();
 1008220:	4b11      	ldr	r3, [pc, #68]	; (1008268 <xTaskGenericCreate+0x16c>)
 1008222:	4798      	blx	r3
			}
		}
	}

	return xReturn;
 1008224:	69fb      	ldr	r3, [r7, #28]
}
 1008226:	4618      	mov	r0, r3
 1008228:	3724      	adds	r7, #36	; 0x24
 100822a:	46bd      	mov	sp, r7
 100822c:	bd90      	pop	{r4, r7, pc}
 100822e:	bf00      	nop
 1008230:	01008b25 	.word	0x01008b25
 1008234:	01008925 	.word	0x01008925
 1008238:	010074e9 	.word	0x010074e9
 100823c:	010075cd 	.word	0x010075cd
 1008240:	20004edc 	.word	0x20004edc
 1008244:	20004e04 	.word	0x20004e04
 1008248:	010089a1 	.word	0x010089a1
 100824c:	20004eec 	.word	0x20004eec
 1008250:	20004ee4 	.word	0x20004ee4
 1008254:	20004f00 	.word	0x20004f00
 1008258:	20004ee8 	.word	0x20004ee8
 100825c:	20004e08 	.word	0x20004e08
 1008260:	01007333 	.word	0x01007333
 1008264:	010075ed 	.word	0x010075ed
 1008268:	010075b5 	.word	0x010075b5

0100826c <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
 100826c:	b580      	push	{r7, lr}
 100826e:	b086      	sub	sp, #24
 1008270:	af00      	add	r7, sp, #0
 1008272:	6078      	str	r0, [r7, #4]
 1008274:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
 1008276:	2300      	movs	r3, #0
 1008278:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
 100827a:	4b20      	ldr	r3, [pc, #128]	; (10082fc <vTaskDelayUntil+0x90>)
 100827c:	4798      	blx	r3
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 100827e:	687b      	ldr	r3, [r7, #4]
 1008280:	681a      	ldr	r2, [r3, #0]
 1008282:	683b      	ldr	r3, [r7, #0]
 1008284:	4413      	add	r3, r2
 1008286:	613b      	str	r3, [r7, #16]

			if( xTickCount < *pxPreviousWakeTime )
 1008288:	687b      	ldr	r3, [r7, #4]
 100828a:	681a      	ldr	r2, [r3, #0]
 100828c:	4b1c      	ldr	r3, [pc, #112]	; (1008300 <vTaskDelayUntil+0x94>)
 100828e:	681b      	ldr	r3, [r3, #0]
 1008290:	429a      	cmp	r2, r3
 1008292:	d90c      	bls.n	10082ae <vTaskDelayUntil+0x42>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
 1008294:	687b      	ldr	r3, [r7, #4]
 1008296:	681a      	ldr	r2, [r3, #0]
 1008298:	693b      	ldr	r3, [r7, #16]
 100829a:	429a      	cmp	r2, r3
 100829c:	d913      	bls.n	10082c6 <vTaskDelayUntil+0x5a>
 100829e:	4b18      	ldr	r3, [pc, #96]	; (1008300 <vTaskDelayUntil+0x94>)
 10082a0:	681b      	ldr	r3, [r3, #0]
 10082a2:	693a      	ldr	r2, [r7, #16]
 10082a4:	429a      	cmp	r2, r3
 10082a6:	d90e      	bls.n	10082c6 <vTaskDelayUntil+0x5a>
				{
					xShouldDelay = pdTRUE;
 10082a8:	2301      	movs	r3, #1
 10082aa:	617b      	str	r3, [r7, #20]
 10082ac:	e00b      	b.n	10082c6 <vTaskDelayUntil+0x5a>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
 10082ae:	687b      	ldr	r3, [r7, #4]
 10082b0:	681a      	ldr	r2, [r3, #0]
 10082b2:	693b      	ldr	r3, [r7, #16]
 10082b4:	429a      	cmp	r2, r3
 10082b6:	d804      	bhi.n	10082c2 <vTaskDelayUntil+0x56>
 10082b8:	4b11      	ldr	r3, [pc, #68]	; (1008300 <vTaskDelayUntil+0x94>)
 10082ba:	681b      	ldr	r3, [r3, #0]
 10082bc:	693a      	ldr	r2, [r7, #16]
 10082be:	429a      	cmp	r2, r3
 10082c0:	d901      	bls.n	10082c6 <vTaskDelayUntil+0x5a>
				{
					xShouldDelay = pdTRUE;
 10082c2:	2301      	movs	r3, #1
 10082c4:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 10082c6:	687b      	ldr	r3, [r7, #4]
 10082c8:	693a      	ldr	r2, [r7, #16]
 10082ca:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 10082cc:	697b      	ldr	r3, [r7, #20]
 10082ce:	2b00      	cmp	r3, #0
 10082d0:	d008      	beq.n	10082e4 <vTaskDelayUntil+0x78>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
 10082d2:	4b0c      	ldr	r3, [pc, #48]	; (1008304 <vTaskDelayUntil+0x98>)
 10082d4:	681b      	ldr	r3, [r3, #0]
 10082d6:	3304      	adds	r3, #4
 10082d8:	4618      	mov	r0, r3
 10082da:	4b0b      	ldr	r3, [pc, #44]	; (1008308 <vTaskDelayUntil+0x9c>)
 10082dc:	4798      	blx	r3
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
 10082de:	6938      	ldr	r0, [r7, #16]
 10082e0:	4b0a      	ldr	r3, [pc, #40]	; (100830c <vTaskDelayUntil+0xa0>)
 10082e2:	4798      	blx	r3
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 10082e4:	4b0a      	ldr	r3, [pc, #40]	; (1008310 <vTaskDelayUntil+0xa4>)
 10082e6:	4798      	blx	r3
 10082e8:	60f8      	str	r0, [r7, #12]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 10082ea:	68fb      	ldr	r3, [r7, #12]
 10082ec:	2b00      	cmp	r3, #0
 10082ee:	d101      	bne.n	10082f4 <vTaskDelayUntil+0x88>
		{
			portYIELD_WITHIN_API();
 10082f0:	4b08      	ldr	r3, [pc, #32]	; (1008314 <vTaskDelayUntil+0xa8>)
 10082f2:	4798      	blx	r3
		}
	}
 10082f4:	bf00      	nop
 10082f6:	3718      	adds	r7, #24
 10082f8:	46bd      	mov	sp, r7
 10082fa:	bd80      	pop	{r7, pc}
 10082fc:	0100838d 	.word	0x0100838d
 1008300:	20004ee0 	.word	0x20004ee0
 1008304:	20004e04 	.word	0x20004e04
 1008308:	010073f1 	.word	0x010073f1
 100830c:	01008ab5 	.word	0x01008ab5
 1008310:	010083a9 	.word	0x010083a9
 1008314:	010075b5 	.word	0x010075b5

01008318 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
 1008318:	b590      	push	{r4, r7, lr}
 100831a:	b087      	sub	sp, #28
 100831c:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
 100831e:	2300      	movs	r3, #0
 1008320:	9303      	str	r3, [sp, #12]
 1008322:	2300      	movs	r3, #0
 1008324:	9302      	str	r3, [sp, #8]
 1008326:	2300      	movs	r3, #0
 1008328:	9301      	str	r3, [sp, #4]
 100832a:	2300      	movs	r3, #0
 100832c:	9300      	str	r3, [sp, #0]
 100832e:	2300      	movs	r3, #0
 1008330:	2282      	movs	r2, #130	; 0x82
 1008332:	490e      	ldr	r1, [pc, #56]	; (100836c <vTaskStartScheduler+0x54>)
 1008334:	480e      	ldr	r0, [pc, #56]	; (1008370 <vTaskStartScheduler+0x58>)
 1008336:	4c0f      	ldr	r4, [pc, #60]	; (1008374 <vTaskStartScheduler+0x5c>)
 1008338:	47a0      	blx	r4
 100833a:	6078      	str	r0, [r7, #4]
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 100833c:	687b      	ldr	r3, [r7, #4]
 100833e:	2b01      	cmp	r3, #1
 1008340:	d102      	bne.n	1008348 <vTaskStartScheduler+0x30>
		{
			xReturn = xTimerCreateTimerTask();
 1008342:	4b0d      	ldr	r3, [pc, #52]	; (1008378 <vTaskStartScheduler+0x60>)
 1008344:	4798      	blx	r3
 1008346:	6078      	str	r0, [r7, #4]
		}
	}
	#endif

	if( xReturn == pdPASS )
 1008348:	687b      	ldr	r3, [r7, #4]
 100834a:	2b01      	cmp	r3, #1
 100834c:	d109      	bne.n	1008362 <vTaskStartScheduler+0x4a>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
 100834e:	4b0b      	ldr	r3, [pc, #44]	; (100837c <vTaskStartScheduler+0x64>)
 1008350:	4798      	blx	r3

		xSchedulerRunning = pdTRUE;
 1008352:	4b0b      	ldr	r3, [pc, #44]	; (1008380 <vTaskStartScheduler+0x68>)
 1008354:	2201      	movs	r2, #1
 1008356:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
 1008358:	4b0a      	ldr	r3, [pc, #40]	; (1008384 <vTaskStartScheduler+0x6c>)
 100835a:	2200      	movs	r2, #0
 100835c:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 100835e:	4b0a      	ldr	r3, [pc, #40]	; (1008388 <vTaskStartScheduler+0x70>)
 1008360:	4798      	blx	r3
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
 1008362:	bf00      	nop
 1008364:	370c      	adds	r7, #12
 1008366:	46bd      	mov	sp, r7
 1008368:	bd90      	pop	{r4, r7, pc}
 100836a:	bf00      	nop
 100836c:	010119d4 	.word	0x010119d4
 1008370:	01008909 	.word	0x01008909
 1008374:	010080fd 	.word	0x010080fd
 1008378:	01008d49 	.word	0x01008d49
 100837c:	01007615 	.word	0x01007615
 1008380:	20004eec 	.word	0x20004eec
 1008384:	20004ee0 	.word	0x20004ee0
 1008388:	01007575 	.word	0x01007575

0100838c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 100838c:	b480      	push	{r7}
 100838e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
 1008390:	4b04      	ldr	r3, [pc, #16]	; (10083a4 <vTaskSuspendAll+0x18>)
 1008392:	681b      	ldr	r3, [r3, #0]
 1008394:	3301      	adds	r3, #1
 1008396:	4a03      	ldr	r2, [pc, #12]	; (10083a4 <vTaskSuspendAll+0x18>)
 1008398:	6013      	str	r3, [r2, #0]
}
 100839a:	bf00      	nop
 100839c:	46bd      	mov	sp, r7
 100839e:	bc80      	pop	{r7}
 10083a0:	4770      	bx	lr
 10083a2:	bf00      	nop
 10083a4:	20004ef0 	.word	0x20004ef0

010083a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
 10083a8:	b590      	push	{r4, r7, lr}
 10083aa:	b083      	sub	sp, #12
 10083ac:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 10083ae:	2300      	movs	r3, #0
 10083b0:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 10083b2:	4b31      	ldr	r3, [pc, #196]	; (1008478 <xTaskResumeAll+0xd0>)
 10083b4:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
 10083b6:	4b31      	ldr	r3, [pc, #196]	; (100847c <xTaskResumeAll+0xd4>)
 10083b8:	681b      	ldr	r3, [r3, #0]
 10083ba:	3b01      	subs	r3, #1
 10083bc:	4a2f      	ldr	r2, [pc, #188]	; (100847c <xTaskResumeAll+0xd4>)
 10083be:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 10083c0:	4b2e      	ldr	r3, [pc, #184]	; (100847c <xTaskResumeAll+0xd4>)
 10083c2:	681b      	ldr	r3, [r3, #0]
 10083c4:	2b00      	cmp	r3, #0
 10083c6:	d150      	bne.n	100846a <xTaskResumeAll+0xc2>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
 10083c8:	4b2d      	ldr	r3, [pc, #180]	; (1008480 <xTaskResumeAll+0xd8>)
 10083ca:	681b      	ldr	r3, [r3, #0]
 10083cc:	2b00      	cmp	r3, #0
 10083ce:	d04c      	beq.n	100846a <xTaskResumeAll+0xc2>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
 10083d0:	2300      	movs	r3, #0
 10083d2:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 10083d4:	e027      	b.n	1008426 <xTaskResumeAll+0x7e>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
 10083d6:	4b2b      	ldr	r3, [pc, #172]	; (1008484 <xTaskResumeAll+0xdc>)
 10083d8:	68db      	ldr	r3, [r3, #12]
 10083da:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
 10083dc:	f104 0318 	add.w	r3, r4, #24
 10083e0:	4618      	mov	r0, r3
 10083e2:	4b29      	ldr	r3, [pc, #164]	; (1008488 <xTaskResumeAll+0xe0>)
 10083e4:	4798      	blx	r3
					uxListRemove( &( pxTCB->xGenericListItem ) );
 10083e6:	1d23      	adds	r3, r4, #4
 10083e8:	4618      	mov	r0, r3
 10083ea:	4b27      	ldr	r3, [pc, #156]	; (1008488 <xTaskResumeAll+0xe0>)
 10083ec:	4798      	blx	r3
					prvAddTaskToReadyQueue( pxTCB );
 10083ee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 10083f0:	4b26      	ldr	r3, [pc, #152]	; (100848c <xTaskResumeAll+0xe4>)
 10083f2:	681b      	ldr	r3, [r3, #0]
 10083f4:	429a      	cmp	r2, r3
 10083f6:	d902      	bls.n	10083fe <xTaskResumeAll+0x56>
 10083f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 10083fa:	4a24      	ldr	r2, [pc, #144]	; (100848c <xTaskResumeAll+0xe4>)
 10083fc:	6013      	str	r3, [r2, #0]
 10083fe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 1008400:	4613      	mov	r3, r2
 1008402:	009b      	lsls	r3, r3, #2
 1008404:	4413      	add	r3, r2
 1008406:	009b      	lsls	r3, r3, #2
 1008408:	4a21      	ldr	r2, [pc, #132]	; (1008490 <xTaskResumeAll+0xe8>)
 100840a:	4413      	add	r3, r2
 100840c:	1d22      	adds	r2, r4, #4
 100840e:	4611      	mov	r1, r2
 1008410:	4618      	mov	r0, r3
 1008412:	4b20      	ldr	r3, [pc, #128]	; (1008494 <xTaskResumeAll+0xec>)
 1008414:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1008416:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 1008418:	4b1f      	ldr	r3, [pc, #124]	; (1008498 <xTaskResumeAll+0xf0>)
 100841a:	681b      	ldr	r3, [r3, #0]
 100841c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 100841e:	429a      	cmp	r2, r3
 1008420:	d301      	bcc.n	1008426 <xTaskResumeAll+0x7e>
					{
						xYieldRequired = pdTRUE;
 1008422:	2301      	movs	r3, #1
 1008424:	603b      	str	r3, [r7, #0]
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 1008426:	4b17      	ldr	r3, [pc, #92]	; (1008484 <xTaskResumeAll+0xdc>)
 1008428:	681b      	ldr	r3, [r3, #0]
 100842a:	2b00      	cmp	r3, #0
 100842c:	d1d3      	bne.n	10083d6 <xTaskResumeAll+0x2e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 100842e:	4b1b      	ldr	r3, [pc, #108]	; (100849c <xTaskResumeAll+0xf4>)
 1008430:	681b      	ldr	r3, [r3, #0]
 1008432:	2b00      	cmp	r3, #0
 1008434:	d00b      	beq.n	100844e <xTaskResumeAll+0xa6>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 1008436:	e006      	b.n	1008446 <xTaskResumeAll+0x9e>
					{
						vTaskIncrementTick();
 1008438:	4b19      	ldr	r3, [pc, #100]	; (10084a0 <xTaskResumeAll+0xf8>)
 100843a:	4798      	blx	r3
						--uxMissedTicks;
 100843c:	4b17      	ldr	r3, [pc, #92]	; (100849c <xTaskResumeAll+0xf4>)
 100843e:	681b      	ldr	r3, [r3, #0]
 1008440:	3b01      	subs	r3, #1
 1008442:	4a16      	ldr	r2, [pc, #88]	; (100849c <xTaskResumeAll+0xf4>)
 1008444:	6013      	str	r3, [r2, #0]
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 1008446:	4b15      	ldr	r3, [pc, #84]	; (100849c <xTaskResumeAll+0xf4>)
 1008448:	681b      	ldr	r3, [r3, #0]
 100844a:	2b00      	cmp	r3, #0
 100844c:	d1f4      	bne.n	1008438 <xTaskResumeAll+0x90>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
 100844e:	683b      	ldr	r3, [r7, #0]
 1008450:	2b01      	cmp	r3, #1
 1008452:	d003      	beq.n	100845c <xTaskResumeAll+0xb4>
 1008454:	4b13      	ldr	r3, [pc, #76]	; (10084a4 <xTaskResumeAll+0xfc>)
 1008456:	681b      	ldr	r3, [r3, #0]
 1008458:	2b01      	cmp	r3, #1
 100845a:	d106      	bne.n	100846a <xTaskResumeAll+0xc2>
				{
					xAlreadyYielded = pdTRUE;
 100845c:	2301      	movs	r3, #1
 100845e:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
 1008460:	4b10      	ldr	r3, [pc, #64]	; (10084a4 <xTaskResumeAll+0xfc>)
 1008462:	2200      	movs	r2, #0
 1008464:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
 1008466:	4b10      	ldr	r3, [pc, #64]	; (10084a8 <xTaskResumeAll+0x100>)
 1008468:	4798      	blx	r3
				}
			}
		}
	}
	taskEXIT_CRITICAL();
 100846a:	4b10      	ldr	r3, [pc, #64]	; (10084ac <xTaskResumeAll+0x104>)
 100846c:	4798      	blx	r3

	return xAlreadyYielded;
 100846e:	687b      	ldr	r3, [r7, #4]
}
 1008470:	4618      	mov	r0, r3
 1008472:	370c      	adds	r7, #12
 1008474:	46bd      	mov	sp, r7
 1008476:	bd90      	pop	{r4, r7, pc}
 1008478:	010075cd 	.word	0x010075cd
 100847c:	20004ef0 	.word	0x20004ef0
 1008480:	20004edc 	.word	0x20004edc
 1008484:	20004e9c 	.word	0x20004e9c
 1008488:	010073f1 	.word	0x010073f1
 100848c:	20004ee8 	.word	0x20004ee8
 1008490:	20004e08 	.word	0x20004e08
 1008494:	01007333 	.word	0x01007333
 1008498:	20004e04 	.word	0x20004e04
 100849c:	20004ef4 	.word	0x20004ef4
 10084a0:	010084dd 	.word	0x010084dd
 10084a4:	20004ef8 	.word	0x20004ef8
 10084a8:	010075b5 	.word	0x010075b5
 10084ac:	010075ed 	.word	0x010075ed

010084b0 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
 10084b0:	b580      	push	{r7, lr}
 10084b2:	b082      	sub	sp, #8
 10084b4:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
 10084b6:	4b06      	ldr	r3, [pc, #24]	; (10084d0 <xTaskGetTickCount+0x20>)
 10084b8:	4798      	blx	r3
	{
		xTicks = xTickCount;
 10084ba:	4b06      	ldr	r3, [pc, #24]	; (10084d4 <xTaskGetTickCount+0x24>)
 10084bc:	681b      	ldr	r3, [r3, #0]
 10084be:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
 10084c0:	4b05      	ldr	r3, [pc, #20]	; (10084d8 <xTaskGetTickCount+0x28>)
 10084c2:	4798      	blx	r3

	return xTicks;
 10084c4:	687b      	ldr	r3, [r7, #4]
}
 10084c6:	4618      	mov	r0, r3
 10084c8:	3708      	adds	r7, #8
 10084ca:	46bd      	mov	sp, r7
 10084cc:	bd80      	pop	{r7, pc}
 10084ce:	bf00      	nop
 10084d0:	010075cd 	.word	0x010075cd
 10084d4:	20004ee0 	.word	0x20004ee0
 10084d8:	010075ed 	.word	0x010075ed

010084dc <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
 10084dc:	b580      	push	{r7, lr}
 10084de:	b084      	sub	sp, #16
 10084e0:	af00      	add	r7, sp, #0

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 10084e2:	4b40      	ldr	r3, [pc, #256]	; (10085e4 <vTaskIncrementTick+0x108>)
 10084e4:	681b      	ldr	r3, [r3, #0]
 10084e6:	2b00      	cmp	r3, #0
 10084e8:	d172      	bne.n	10085d0 <vTaskIncrementTick+0xf4>
	{
		++xTickCount;
 10084ea:	4b3f      	ldr	r3, [pc, #252]	; (10085e8 <vTaskIncrementTick+0x10c>)
 10084ec:	681b      	ldr	r3, [r3, #0]
 10084ee:	3301      	adds	r3, #1
 10084f0:	4a3d      	ldr	r2, [pc, #244]	; (10085e8 <vTaskIncrementTick+0x10c>)
 10084f2:	6013      	str	r3, [r2, #0]
		if( xTickCount == ( portTickType ) 0U )
 10084f4:	4b3c      	ldr	r3, [pc, #240]	; (10085e8 <vTaskIncrementTick+0x10c>)
 10084f6:	681b      	ldr	r3, [r3, #0]
 10084f8:	2b00      	cmp	r3, #0
 10084fa:	d121      	bne.n	1008540 <vTaskIncrementTick+0x64>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );

			pxTemp = pxDelayedTaskList;
 10084fc:	4b3b      	ldr	r3, [pc, #236]	; (10085ec <vTaskIncrementTick+0x110>)
 10084fe:	681b      	ldr	r3, [r3, #0]
 1008500:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
 1008502:	4b3b      	ldr	r3, [pc, #236]	; (10085f0 <vTaskIncrementTick+0x114>)
 1008504:	681b      	ldr	r3, [r3, #0]
 1008506:	4a39      	ldr	r2, [pc, #228]	; (10085ec <vTaskIncrementTick+0x110>)
 1008508:	6013      	str	r3, [r2, #0]
			pxOverflowDelayedTaskList = pxTemp;
 100850a:	4a39      	ldr	r2, [pc, #228]	; (10085f0 <vTaskIncrementTick+0x114>)
 100850c:	68fb      	ldr	r3, [r7, #12]
 100850e:	6013      	str	r3, [r2, #0]
			xNumOfOverflows++;
 1008510:	4b38      	ldr	r3, [pc, #224]	; (10085f4 <vTaskIncrementTick+0x118>)
 1008512:	681b      	ldr	r3, [r3, #0]
 1008514:	3301      	adds	r3, #1
 1008516:	4a37      	ldr	r2, [pc, #220]	; (10085f4 <vTaskIncrementTick+0x118>)
 1008518:	6013      	str	r3, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 100851a:	4b34      	ldr	r3, [pc, #208]	; (10085ec <vTaskIncrementTick+0x110>)
 100851c:	681b      	ldr	r3, [r3, #0]
 100851e:	681b      	ldr	r3, [r3, #0]
 1008520:	2b00      	cmp	r3, #0
 1008522:	d104      	bne.n	100852e <vTaskIncrementTick+0x52>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
 1008524:	4b34      	ldr	r3, [pc, #208]	; (10085f8 <vTaskIncrementTick+0x11c>)
 1008526:	f04f 32ff 	mov.w	r2, #4294967295
 100852a:	601a      	str	r2, [r3, #0]
 100852c:	e008      	b.n	1008540 <vTaskIncrementTick+0x64>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 100852e:	4b2f      	ldr	r3, [pc, #188]	; (10085ec <vTaskIncrementTick+0x110>)
 1008530:	681b      	ldr	r3, [r3, #0]
 1008532:	68db      	ldr	r3, [r3, #12]
 1008534:	68db      	ldr	r3, [r3, #12]
 1008536:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 1008538:	68bb      	ldr	r3, [r7, #8]
 100853a:	685b      	ldr	r3, [r3, #4]
 100853c:	4a2e      	ldr	r2, [pc, #184]	; (10085f8 <vTaskIncrementTick+0x11c>)
 100853e:	6013      	str	r3, [r2, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
 1008540:	4b29      	ldr	r3, [pc, #164]	; (10085e8 <vTaskIncrementTick+0x10c>)
 1008542:	681a      	ldr	r2, [r3, #0]
 1008544:	4b2c      	ldr	r3, [pc, #176]	; (10085f8 <vTaskIncrementTick+0x11c>)
 1008546:	681b      	ldr	r3, [r3, #0]
 1008548:	429a      	cmp	r2, r3
 100854a:	d347      	bcc.n	10085dc <vTaskIncrementTick+0x100>
 100854c:	4b27      	ldr	r3, [pc, #156]	; (10085ec <vTaskIncrementTick+0x110>)
 100854e:	681b      	ldr	r3, [r3, #0]
 1008550:	681b      	ldr	r3, [r3, #0]
 1008552:	2b00      	cmp	r3, #0
 1008554:	d104      	bne.n	1008560 <vTaskIncrementTick+0x84>
 1008556:	4b28      	ldr	r3, [pc, #160]	; (10085f8 <vTaskIncrementTick+0x11c>)
 1008558:	f04f 32ff 	mov.w	r2, #4294967295
 100855c:	601a      	str	r2, [r3, #0]
 100855e:	e03d      	b.n	10085dc <vTaskIncrementTick+0x100>
 1008560:	4b22      	ldr	r3, [pc, #136]	; (10085ec <vTaskIncrementTick+0x110>)
 1008562:	681b      	ldr	r3, [r3, #0]
 1008564:	68db      	ldr	r3, [r3, #12]
 1008566:	68db      	ldr	r3, [r3, #12]
 1008568:	60bb      	str	r3, [r7, #8]
 100856a:	68bb      	ldr	r3, [r7, #8]
 100856c:	685b      	ldr	r3, [r3, #4]
 100856e:	607b      	str	r3, [r7, #4]
 1008570:	4b1d      	ldr	r3, [pc, #116]	; (10085e8 <vTaskIncrementTick+0x10c>)
 1008572:	681a      	ldr	r2, [r3, #0]
 1008574:	687b      	ldr	r3, [r7, #4]
 1008576:	429a      	cmp	r2, r3
 1008578:	d203      	bcs.n	1008582 <vTaskIncrementTick+0xa6>
 100857a:	4a1f      	ldr	r2, [pc, #124]	; (10085f8 <vTaskIncrementTick+0x11c>)
 100857c:	687b      	ldr	r3, [r7, #4]
 100857e:	6013      	str	r3, [r2, #0]
 1008580:	e02c      	b.n	10085dc <vTaskIncrementTick+0x100>
 1008582:	68bb      	ldr	r3, [r7, #8]
 1008584:	3304      	adds	r3, #4
 1008586:	4618      	mov	r0, r3
 1008588:	4b1c      	ldr	r3, [pc, #112]	; (10085fc <vTaskIncrementTick+0x120>)
 100858a:	4798      	blx	r3
 100858c:	68bb      	ldr	r3, [r7, #8]
 100858e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 1008590:	2b00      	cmp	r3, #0
 1008592:	d004      	beq.n	100859e <vTaskIncrementTick+0xc2>
 1008594:	68bb      	ldr	r3, [r7, #8]
 1008596:	3318      	adds	r3, #24
 1008598:	4618      	mov	r0, r3
 100859a:	4b18      	ldr	r3, [pc, #96]	; (10085fc <vTaskIncrementTick+0x120>)
 100859c:	4798      	blx	r3
 100859e:	68bb      	ldr	r3, [r7, #8]
 10085a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 10085a2:	4b17      	ldr	r3, [pc, #92]	; (1008600 <vTaskIncrementTick+0x124>)
 10085a4:	681b      	ldr	r3, [r3, #0]
 10085a6:	429a      	cmp	r2, r3
 10085a8:	d903      	bls.n	10085b2 <vTaskIncrementTick+0xd6>
 10085aa:	68bb      	ldr	r3, [r7, #8]
 10085ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 10085ae:	4a14      	ldr	r2, [pc, #80]	; (1008600 <vTaskIncrementTick+0x124>)
 10085b0:	6013      	str	r3, [r2, #0]
 10085b2:	68bb      	ldr	r3, [r7, #8]
 10085b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 10085b6:	4613      	mov	r3, r2
 10085b8:	009b      	lsls	r3, r3, #2
 10085ba:	4413      	add	r3, r2
 10085bc:	009b      	lsls	r3, r3, #2
 10085be:	4a11      	ldr	r2, [pc, #68]	; (1008604 <vTaskIncrementTick+0x128>)
 10085c0:	441a      	add	r2, r3
 10085c2:	68bb      	ldr	r3, [r7, #8]
 10085c4:	3304      	adds	r3, #4
 10085c6:	4619      	mov	r1, r3
 10085c8:	4610      	mov	r0, r2
 10085ca:	4b0f      	ldr	r3, [pc, #60]	; (1008608 <vTaskIncrementTick+0x12c>)
 10085cc:	4798      	blx	r3
 10085ce:	e7bd      	b.n	100854c <vTaskIncrementTick+0x70>
	}
	else
	{
		++uxMissedTicks;
 10085d0:	4b0e      	ldr	r3, [pc, #56]	; (100860c <vTaskIncrementTick+0x130>)
 10085d2:	681b      	ldr	r3, [r3, #0]
 10085d4:	3301      	adds	r3, #1
 10085d6:	4a0d      	ldr	r2, [pc, #52]	; (100860c <vTaskIncrementTick+0x130>)
 10085d8:	6013      	str	r3, [r2, #0]
		{
			vApplicationTickHook();
		}
	}
	#endif
}
 10085da:	e7ff      	b.n	10085dc <vTaskIncrementTick+0x100>
 10085dc:	bf00      	nop
 10085de:	3710      	adds	r7, #16
 10085e0:	46bd      	mov	sp, r7
 10085e2:	bd80      	pop	{r7, pc}
 10085e4:	20004ef0 	.word	0x20004ef0
 10085e8:	20004ee0 	.word	0x20004ee0
 10085ec:	20004e94 	.word	0x20004e94
 10085f0:	20004e98 	.word	0x20004e98
 10085f4:	20004efc 	.word	0x20004efc
 10085f8:	200001e4 	.word	0x200001e4
 10085fc:	010073f1 	.word	0x010073f1
 1008600:	20004ee8 	.word	0x20004ee8
 1008604:	20004e08 	.word	0x20004e08
 1008608:	01007333 	.word	0x01007333
 100860c:	20004ef4 	.word	0x20004ef4

01008610 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 1008610:	b580      	push	{r7, lr}
 1008612:	b082      	sub	sp, #8
 1008614:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 1008616:	4b26      	ldr	r3, [pc, #152]	; (10086b0 <vTaskSwitchContext+0xa0>)
 1008618:	681b      	ldr	r3, [r3, #0]
 100861a:	2b00      	cmp	r3, #0
 100861c:	d003      	beq.n	1008626 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
 100861e:	4b25      	ldr	r3, [pc, #148]	; (10086b4 <vTaskSwitchContext+0xa4>)
 1008620:	2201      	movs	r2, #1
 1008622:	601a      	str	r2, [r3, #0]

		taskSELECT_HIGHEST_PRIORITY_TASK();

		traceTASK_SWITCHED_IN();
	}
}
 1008624:	e03f      	b.n	10086a6 <vTaskSwitchContext+0x96>
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 1008626:	4b24      	ldr	r3, [pc, #144]	; (10086b8 <vTaskSwitchContext+0xa8>)
 1008628:	681b      	ldr	r3, [r3, #0]
 100862a:	681a      	ldr	r2, [r3, #0]
 100862c:	4b22      	ldr	r3, [pc, #136]	; (10086b8 <vTaskSwitchContext+0xa8>)
 100862e:	681b      	ldr	r3, [r3, #0]
 1008630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 1008632:	429a      	cmp	r2, r3
 1008634:	d80e      	bhi.n	1008654 <vTaskSwitchContext+0x44>
 1008636:	4b20      	ldr	r3, [pc, #128]	; (10086b8 <vTaskSwitchContext+0xa8>)
 1008638:	681a      	ldr	r2, [r3, #0]
 100863a:	4b1f      	ldr	r3, [pc, #124]	; (10086b8 <vTaskSwitchContext+0xa8>)
 100863c:	681b      	ldr	r3, [r3, #0]
 100863e:	3334      	adds	r3, #52	; 0x34
 1008640:	4619      	mov	r1, r3
 1008642:	4610      	mov	r0, r2
 1008644:	4b1d      	ldr	r3, [pc, #116]	; (10086bc <vTaskSwitchContext+0xac>)
 1008646:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
 1008648:	e004      	b.n	1008654 <vTaskSwitchContext+0x44>
 100864a:	4b1d      	ldr	r3, [pc, #116]	; (10086c0 <vTaskSwitchContext+0xb0>)
 100864c:	681b      	ldr	r3, [r3, #0]
 100864e:	3b01      	subs	r3, #1
 1008650:	4a1b      	ldr	r2, [pc, #108]	; (10086c0 <vTaskSwitchContext+0xb0>)
 1008652:	6013      	str	r3, [r2, #0]
 1008654:	4b1a      	ldr	r3, [pc, #104]	; (10086c0 <vTaskSwitchContext+0xb0>)
 1008656:	681a      	ldr	r2, [r3, #0]
 1008658:	491a      	ldr	r1, [pc, #104]	; (10086c4 <vTaskSwitchContext+0xb4>)
 100865a:	4613      	mov	r3, r2
 100865c:	009b      	lsls	r3, r3, #2
 100865e:	4413      	add	r3, r2
 1008660:	009b      	lsls	r3, r3, #2
 1008662:	440b      	add	r3, r1
 1008664:	681b      	ldr	r3, [r3, #0]
 1008666:	2b00      	cmp	r3, #0
 1008668:	d0ef      	beq.n	100864a <vTaskSwitchContext+0x3a>
 100866a:	4b15      	ldr	r3, [pc, #84]	; (10086c0 <vTaskSwitchContext+0xb0>)
 100866c:	681a      	ldr	r2, [r3, #0]
 100866e:	4613      	mov	r3, r2
 1008670:	009b      	lsls	r3, r3, #2
 1008672:	4413      	add	r3, r2
 1008674:	009b      	lsls	r3, r3, #2
 1008676:	4a13      	ldr	r2, [pc, #76]	; (10086c4 <vTaskSwitchContext+0xb4>)
 1008678:	4413      	add	r3, r2
 100867a:	607b      	str	r3, [r7, #4]
 100867c:	687b      	ldr	r3, [r7, #4]
 100867e:	685b      	ldr	r3, [r3, #4]
 1008680:	685a      	ldr	r2, [r3, #4]
 1008682:	687b      	ldr	r3, [r7, #4]
 1008684:	605a      	str	r2, [r3, #4]
 1008686:	687b      	ldr	r3, [r7, #4]
 1008688:	685a      	ldr	r2, [r3, #4]
 100868a:	687b      	ldr	r3, [r7, #4]
 100868c:	3308      	adds	r3, #8
 100868e:	429a      	cmp	r2, r3
 1008690:	d104      	bne.n	100869c <vTaskSwitchContext+0x8c>
 1008692:	687b      	ldr	r3, [r7, #4]
 1008694:	685b      	ldr	r3, [r3, #4]
 1008696:	685a      	ldr	r2, [r3, #4]
 1008698:	687b      	ldr	r3, [r7, #4]
 100869a:	605a      	str	r2, [r3, #4]
 100869c:	687b      	ldr	r3, [r7, #4]
 100869e:	685b      	ldr	r3, [r3, #4]
 10086a0:	68db      	ldr	r3, [r3, #12]
 10086a2:	4a05      	ldr	r2, [pc, #20]	; (10086b8 <vTaskSwitchContext+0xa8>)
 10086a4:	6013      	str	r3, [r2, #0]
}
 10086a6:	bf00      	nop
 10086a8:	3708      	adds	r7, #8
 10086aa:	46bd      	mov	sp, r7
 10086ac:	bd80      	pop	{r7, pc}
 10086ae:	bf00      	nop
 10086b0:	20004ef0 	.word	0x20004ef0
 10086b4:	20004ef8 	.word	0x20004ef8
 10086b8:	20004e04 	.word	0x20004e04
 10086bc:	0100a6f9 	.word	0x0100a6f9
 10086c0:	20004ee8 	.word	0x20004ee8
 10086c4:	20004e08 	.word	0x20004e08

010086c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
 10086c8:	b580      	push	{r7, lr}
 10086ca:	b084      	sub	sp, #16
 10086cc:	af00      	add	r7, sp, #0
 10086ce:	6078      	str	r0, [r7, #4]
 10086d0:	6039      	str	r1, [r7, #0]
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
 10086d2:	4b12      	ldr	r3, [pc, #72]	; (100871c <vTaskPlaceOnEventList+0x54>)
 10086d4:	681b      	ldr	r3, [r3, #0]
 10086d6:	3318      	adds	r3, #24
 10086d8:	4619      	mov	r1, r3
 10086da:	6878      	ldr	r0, [r7, #4]
 10086dc:	4b10      	ldr	r3, [pc, #64]	; (1008720 <vTaskPlaceOnEventList+0x58>)
 10086de:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
 10086e0:	4b0e      	ldr	r3, [pc, #56]	; (100871c <vTaskPlaceOnEventList+0x54>)
 10086e2:	681b      	ldr	r3, [r3, #0]
 10086e4:	3304      	adds	r3, #4
 10086e6:	4618      	mov	r0, r3
 10086e8:	4b0e      	ldr	r3, [pc, #56]	; (1008724 <vTaskPlaceOnEventList+0x5c>)
 10086ea:	4798      	blx	r3
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 10086ec:	683b      	ldr	r3, [r7, #0]
 10086ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 10086f2:	d107      	bne.n	1008704 <vTaskPlaceOnEventList+0x3c>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 10086f4:	4b09      	ldr	r3, [pc, #36]	; (100871c <vTaskPlaceOnEventList+0x54>)
 10086f6:	681b      	ldr	r3, [r3, #0]
 10086f8:	3304      	adds	r3, #4
 10086fa:	4619      	mov	r1, r3
 10086fc:	480a      	ldr	r0, [pc, #40]	; (1008728 <vTaskPlaceOnEventList+0x60>)
 10086fe:	4b0b      	ldr	r3, [pc, #44]	; (100872c <vTaskPlaceOnEventList+0x64>)
 1008700:	4798      	blx	r3
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
 1008702:	e007      	b.n	1008714 <vTaskPlaceOnEventList+0x4c>
			xTimeToWake = xTickCount + xTicksToWait;
 1008704:	4b0a      	ldr	r3, [pc, #40]	; (1008730 <vTaskPlaceOnEventList+0x68>)
 1008706:	681a      	ldr	r2, [r3, #0]
 1008708:	683b      	ldr	r3, [r7, #0]
 100870a:	4413      	add	r3, r2
 100870c:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 100870e:	68f8      	ldr	r0, [r7, #12]
 1008710:	4b08      	ldr	r3, [pc, #32]	; (1008734 <vTaskPlaceOnEventList+0x6c>)
 1008712:	4798      	blx	r3
}
 1008714:	bf00      	nop
 1008716:	3710      	adds	r7, #16
 1008718:	46bd      	mov	sp, r7
 100871a:	bd80      	pop	{r7, pc}
 100871c:	20004e04 	.word	0x20004e04
 1008720:	01007381 	.word	0x01007381
 1008724:	010073f1 	.word	0x010073f1
 1008728:	20004ec8 	.word	0x20004ec8
 100872c:	01007333 	.word	0x01007333
 1008730:	20004ee0 	.word	0x20004ee0
 1008734:	01008ab5 	.word	0x01008ab5

01008738 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
 1008738:	b580      	push	{r7, lr}
 100873a:	b084      	sub	sp, #16
 100873c:	af00      	add	r7, sp, #0
 100873e:	6078      	str	r0, [r7, #4]
 1008740:	6039      	str	r1, [r7, #0]

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
 1008742:	4b0c      	ldr	r3, [pc, #48]	; (1008774 <vTaskPlaceOnEventListRestricted+0x3c>)
 1008744:	681b      	ldr	r3, [r3, #0]
 1008746:	3318      	adds	r3, #24
 1008748:	4619      	mov	r1, r3
 100874a:	6878      	ldr	r0, [r7, #4]
 100874c:	4b0a      	ldr	r3, [pc, #40]	; (1008778 <vTaskPlaceOnEventListRestricted+0x40>)
 100874e:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
 1008750:	4b08      	ldr	r3, [pc, #32]	; (1008774 <vTaskPlaceOnEventListRestricted+0x3c>)
 1008752:	681b      	ldr	r3, [r3, #0]
 1008754:	3304      	adds	r3, #4
 1008756:	4618      	mov	r0, r3
 1008758:	4b08      	ldr	r3, [pc, #32]	; (100877c <vTaskPlaceOnEventListRestricted+0x44>)
 100875a:	4798      	blx	r3
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
 100875c:	4b08      	ldr	r3, [pc, #32]	; (1008780 <vTaskPlaceOnEventListRestricted+0x48>)
 100875e:	681a      	ldr	r2, [r3, #0]
 1008760:	683b      	ldr	r3, [r7, #0]
 1008762:	4413      	add	r3, r2
 1008764:	60fb      	str	r3, [r7, #12]
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 1008766:	68f8      	ldr	r0, [r7, #12]
 1008768:	4b06      	ldr	r3, [pc, #24]	; (1008784 <vTaskPlaceOnEventListRestricted+0x4c>)
 100876a:	4798      	blx	r3
	}
 100876c:	bf00      	nop
 100876e:	3710      	adds	r7, #16
 1008770:	46bd      	mov	sp, r7
 1008772:	bd80      	pop	{r7, pc}
 1008774:	20004e04 	.word	0x20004e04
 1008778:	01007333 	.word	0x01007333
 100877c:	010073f1 	.word	0x010073f1
 1008780:	20004ee0 	.word	0x20004ee0
 1008784:	01008ab5 	.word	0x01008ab5

01008788 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
 1008788:	b580      	push	{r7, lr}
 100878a:	b084      	sub	sp, #16
 100878c:	af00      	add	r7, sp, #0
 100878e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 1008790:	687b      	ldr	r3, [r7, #4]
 1008792:	68db      	ldr	r3, [r3, #12]
 1008794:	68db      	ldr	r3, [r3, #12]
 1008796:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 1008798:	68bb      	ldr	r3, [r7, #8]
 100879a:	3318      	adds	r3, #24
 100879c:	4618      	mov	r0, r3
 100879e:	4b1d      	ldr	r3, [pc, #116]	; (1008814 <xTaskRemoveFromEventList+0x8c>)
 10087a0:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 10087a2:	4b1d      	ldr	r3, [pc, #116]	; (1008818 <xTaskRemoveFromEventList+0x90>)
 10087a4:	681b      	ldr	r3, [r3, #0]
 10087a6:	2b00      	cmp	r3, #0
 10087a8:	d11d      	bne.n	10087e6 <xTaskRemoveFromEventList+0x5e>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 10087aa:	68bb      	ldr	r3, [r7, #8]
 10087ac:	3304      	adds	r3, #4
 10087ae:	4618      	mov	r0, r3
 10087b0:	4b18      	ldr	r3, [pc, #96]	; (1008814 <xTaskRemoveFromEventList+0x8c>)
 10087b2:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
 10087b4:	68bb      	ldr	r3, [r7, #8]
 10087b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 10087b8:	4b18      	ldr	r3, [pc, #96]	; (100881c <xTaskRemoveFromEventList+0x94>)
 10087ba:	681b      	ldr	r3, [r3, #0]
 10087bc:	429a      	cmp	r2, r3
 10087be:	d903      	bls.n	10087c8 <xTaskRemoveFromEventList+0x40>
 10087c0:	68bb      	ldr	r3, [r7, #8]
 10087c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 10087c4:	4a15      	ldr	r2, [pc, #84]	; (100881c <xTaskRemoveFromEventList+0x94>)
 10087c6:	6013      	str	r3, [r2, #0]
 10087c8:	68bb      	ldr	r3, [r7, #8]
 10087ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 10087cc:	4613      	mov	r3, r2
 10087ce:	009b      	lsls	r3, r3, #2
 10087d0:	4413      	add	r3, r2
 10087d2:	009b      	lsls	r3, r3, #2
 10087d4:	4a12      	ldr	r2, [pc, #72]	; (1008820 <xTaskRemoveFromEventList+0x98>)
 10087d6:	441a      	add	r2, r3
 10087d8:	68bb      	ldr	r3, [r7, #8]
 10087da:	3304      	adds	r3, #4
 10087dc:	4619      	mov	r1, r3
 10087de:	4610      	mov	r0, r2
 10087e0:	4b10      	ldr	r3, [pc, #64]	; (1008824 <xTaskRemoveFromEventList+0x9c>)
 10087e2:	4798      	blx	r3
 10087e4:	e005      	b.n	10087f2 <xTaskRemoveFromEventList+0x6a>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 10087e6:	68bb      	ldr	r3, [r7, #8]
 10087e8:	3318      	adds	r3, #24
 10087ea:	4619      	mov	r1, r3
 10087ec:	480e      	ldr	r0, [pc, #56]	; (1008828 <xTaskRemoveFromEventList+0xa0>)
 10087ee:	4b0d      	ldr	r3, [pc, #52]	; (1008824 <xTaskRemoveFromEventList+0x9c>)
 10087f0:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
 10087f2:	68bb      	ldr	r3, [r7, #8]
 10087f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 10087f6:	4b0d      	ldr	r3, [pc, #52]	; (100882c <xTaskRemoveFromEventList+0xa4>)
 10087f8:	681b      	ldr	r3, [r3, #0]
 10087fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 10087fc:	429a      	cmp	r2, r3
 10087fe:	d302      	bcc.n	1008806 <xTaskRemoveFromEventList+0x7e>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
 1008800:	2301      	movs	r3, #1
 1008802:	60fb      	str	r3, [r7, #12]
 1008804:	e001      	b.n	100880a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		xReturn = pdFALSE;
 1008806:	2300      	movs	r3, #0
 1008808:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 100880a:	68fb      	ldr	r3, [r7, #12]
}
 100880c:	4618      	mov	r0, r3
 100880e:	3710      	adds	r7, #16
 1008810:	46bd      	mov	sp, r7
 1008812:	bd80      	pop	{r7, pc}
 1008814:	010073f1 	.word	0x010073f1
 1008818:	20004ef0 	.word	0x20004ef0
 100881c:	20004ee8 	.word	0x20004ee8
 1008820:	20004e08 	.word	0x20004e08
 1008824:	01007333 	.word	0x01007333
 1008828:	20004e9c 	.word	0x20004e9c
 100882c:	20004e04 	.word	0x20004e04

01008830 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
 1008830:	b480      	push	{r7}
 1008832:	b083      	sub	sp, #12
 1008834:	af00      	add	r7, sp, #0
 1008836:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 1008838:	4b06      	ldr	r3, [pc, #24]	; (1008854 <vTaskSetTimeOutState+0x24>)
 100883a:	681a      	ldr	r2, [r3, #0]
 100883c:	687b      	ldr	r3, [r7, #4]
 100883e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 1008840:	4b05      	ldr	r3, [pc, #20]	; (1008858 <vTaskSetTimeOutState+0x28>)
 1008842:	681a      	ldr	r2, [r3, #0]
 1008844:	687b      	ldr	r3, [r7, #4]
 1008846:	605a      	str	r2, [r3, #4]
}
 1008848:	bf00      	nop
 100884a:	370c      	adds	r7, #12
 100884c:	46bd      	mov	sp, r7
 100884e:	bc80      	pop	{r7}
 1008850:	4770      	bx	lr
 1008852:	bf00      	nop
 1008854:	20004efc 	.word	0x20004efc
 1008858:	20004ee0 	.word	0x20004ee0

0100885c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
 100885c:	b580      	push	{r7, lr}
 100885e:	b084      	sub	sp, #16
 1008860:	af00      	add	r7, sp, #0
 1008862:	6078      	str	r0, [r7, #4]
 1008864:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 1008866:	4b1d      	ldr	r3, [pc, #116]	; (10088dc <xTaskCheckForTimeOut+0x80>)
 1008868:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 100886a:	683b      	ldr	r3, [r7, #0]
 100886c:	681b      	ldr	r3, [r3, #0]
 100886e:	f1b3 3fff 	cmp.w	r3, #4294967295
 1008872:	d102      	bne.n	100887a <xTaskCheckForTimeOut+0x1e>
			{
				xReturn = pdFALSE;
 1008874:	2300      	movs	r3, #0
 1008876:	60fb      	str	r3, [r7, #12]
 1008878:	e029      	b.n	10088ce <xTaskCheckForTimeOut+0x72>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
 100887a:	687b      	ldr	r3, [r7, #4]
 100887c:	681a      	ldr	r2, [r3, #0]
 100887e:	4b18      	ldr	r3, [pc, #96]	; (10088e0 <xTaskCheckForTimeOut+0x84>)
 1008880:	681b      	ldr	r3, [r3, #0]
 1008882:	429a      	cmp	r2, r3
 1008884:	d008      	beq.n	1008898 <xTaskCheckForTimeOut+0x3c>
 1008886:	687b      	ldr	r3, [r7, #4]
 1008888:	685a      	ldr	r2, [r3, #4]
 100888a:	4b16      	ldr	r3, [pc, #88]	; (10088e4 <xTaskCheckForTimeOut+0x88>)
 100888c:	681b      	ldr	r3, [r3, #0]
 100888e:	429a      	cmp	r2, r3
 1008890:	d802      	bhi.n	1008898 <xTaskCheckForTimeOut+0x3c>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
 1008892:	2301      	movs	r3, #1
 1008894:	60fb      	str	r3, [r7, #12]
 1008896:	e01a      	b.n	10088ce <xTaskCheckForTimeOut+0x72>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
 1008898:	4b12      	ldr	r3, [pc, #72]	; (10088e4 <xTaskCheckForTimeOut+0x88>)
 100889a:	681a      	ldr	r2, [r3, #0]
 100889c:	687b      	ldr	r3, [r7, #4]
 100889e:	685b      	ldr	r3, [r3, #4]
 10088a0:	1ad2      	subs	r2, r2, r3
 10088a2:	683b      	ldr	r3, [r7, #0]
 10088a4:	681b      	ldr	r3, [r3, #0]
 10088a6:	429a      	cmp	r2, r3
 10088a8:	d20f      	bcs.n	10088ca <xTaskCheckForTimeOut+0x6e>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
 10088aa:	4b0e      	ldr	r3, [pc, #56]	; (10088e4 <xTaskCheckForTimeOut+0x88>)
 10088ac:	681a      	ldr	r2, [r3, #0]
 10088ae:	687b      	ldr	r3, [r7, #4]
 10088b0:	685b      	ldr	r3, [r3, #4]
 10088b2:	1ad3      	subs	r3, r2, r3
 10088b4:	683a      	ldr	r2, [r7, #0]
 10088b6:	6812      	ldr	r2, [r2, #0]
 10088b8:	1ad2      	subs	r2, r2, r3
 10088ba:	683b      	ldr	r3, [r7, #0]
 10088bc:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 10088be:	6878      	ldr	r0, [r7, #4]
 10088c0:	4b09      	ldr	r3, [pc, #36]	; (10088e8 <xTaskCheckForTimeOut+0x8c>)
 10088c2:	4798      	blx	r3
			xReturn = pdFALSE;
 10088c4:	2300      	movs	r3, #0
 10088c6:	60fb      	str	r3, [r7, #12]
 10088c8:	e001      	b.n	10088ce <xTaskCheckForTimeOut+0x72>
		}
		else
		{
			xReturn = pdTRUE;
 10088ca:	2301      	movs	r3, #1
 10088cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 10088ce:	4b07      	ldr	r3, [pc, #28]	; (10088ec <xTaskCheckForTimeOut+0x90>)
 10088d0:	4798      	blx	r3

	return xReturn;
 10088d2:	68fb      	ldr	r3, [r7, #12]
}
 10088d4:	4618      	mov	r0, r3
 10088d6:	3710      	adds	r7, #16
 10088d8:	46bd      	mov	sp, r7
 10088da:	bd80      	pop	{r7, pc}
 10088dc:	010075cd 	.word	0x010075cd
 10088e0:	20004efc 	.word	0x20004efc
 10088e4:	20004ee0 	.word	0x20004ee0
 10088e8:	01008831 	.word	0x01008831
 10088ec:	010075ed 	.word	0x010075ed

010088f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 10088f0:	b480      	push	{r7}
 10088f2:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
 10088f4:	4b03      	ldr	r3, [pc, #12]	; (1008904 <vTaskMissedYield+0x14>)
 10088f6:	2201      	movs	r2, #1
 10088f8:	601a      	str	r2, [r3, #0]
}
 10088fa:	bf00      	nop
 10088fc:	46bd      	mov	sp, r7
 10088fe:	bc80      	pop	{r7}
 1008900:	4770      	bx	lr
 1008902:	bf00      	nop
 1008904:	20004ef8 	.word	0x20004ef8

01008908 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 1008908:	b580      	push	{r7, lr}
 100890a:	b082      	sub	sp, #8
 100890c:	af00      	add	r7, sp, #0
 100890e:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
 1008910:	4b02      	ldr	r3, [pc, #8]	; (100891c <prvIdleTask+0x14>)
 1008912:	4798      	blx	r3
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 1008914:	4b02      	ldr	r3, [pc, #8]	; (1008920 <prvIdleTask+0x18>)
 1008916:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
 1008918:	e7fa      	b.n	1008910 <prvIdleTask+0x8>
 100891a:	bf00      	nop
 100891c:	01008a25 	.word	0x01008a25
 1008920:	010075b5 	.word	0x010075b5

01008924 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
 1008924:	b580      	push	{r7, lr}
 1008926:	b084      	sub	sp, #16
 1008928:	af00      	add	r7, sp, #0
 100892a:	60f8      	str	r0, [r7, #12]
 100892c:	60b9      	str	r1, [r7, #8]
 100892e:	607a      	str	r2, [r7, #4]
 1008930:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
 1008932:	68fb      	ldr	r3, [r7, #12]
 1008934:	3334      	adds	r3, #52	; 0x34
 1008936:	2210      	movs	r2, #16
 1008938:	68b9      	ldr	r1, [r7, #8]
 100893a:	4618      	mov	r0, r3
 100893c:	4b16      	ldr	r3, [pc, #88]	; (1008998 <prvInitialiseTCBVariables+0x74>)
 100893e:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
 1008940:	68fb      	ldr	r3, [r7, #12]
 1008942:	2200      	movs	r2, #0
 1008944:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
 1008948:	687b      	ldr	r3, [r7, #4]
 100894a:	2b04      	cmp	r3, #4
 100894c:	d901      	bls.n	1008952 <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
 100894e:	2304      	movs	r3, #4
 1008950:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
 1008952:	68fb      	ldr	r3, [r7, #12]
 1008954:	687a      	ldr	r2, [r7, #4]
 1008956:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 1008958:	68fb      	ldr	r3, [r7, #12]
 100895a:	687a      	ldr	r2, [r7, #4]
 100895c:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 100895e:	68fb      	ldr	r3, [r7, #12]
 1008960:	3304      	adds	r3, #4
 1008962:	4618      	mov	r0, r3
 1008964:	4b0d      	ldr	r3, [pc, #52]	; (100899c <prvInitialiseTCBVariables+0x78>)
 1008966:	4798      	blx	r3
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 1008968:	68fb      	ldr	r3, [r7, #12]
 100896a:	3318      	adds	r3, #24
 100896c:	4618      	mov	r0, r3
 100896e:	4b0b      	ldr	r3, [pc, #44]	; (100899c <prvInitialiseTCBVariables+0x78>)
 1008970:	4798      	blx	r3

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 1008972:	68fb      	ldr	r3, [r7, #12]
 1008974:	68fa      	ldr	r2, [r7, #12]
 1008976:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
 1008978:	687b      	ldr	r3, [r7, #4]
 100897a:	f1c3 0205 	rsb	r2, r3, #5
 100897e:	68fb      	ldr	r3, [r7, #12]
 1008980:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 1008982:	68fb      	ldr	r3, [r7, #12]
 1008984:	68fa      	ldr	r2, [r7, #12]
 1008986:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxTCB->pxTaskTag = NULL;
 1008988:	68fb      	ldr	r3, [r7, #12]
 100898a:	2200      	movs	r2, #0
 100898c:	649a      	str	r2, [r3, #72]	; 0x48
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
 100898e:	bf00      	nop
 1008990:	3710      	adds	r7, #16
 1008992:	46bd      	mov	sp, r7
 1008994:	bd80      	pop	{r7, pc}
 1008996:	bf00      	nop
 1008998:	0100cc1d 	.word	0x0100cc1d
 100899c:	0100731b 	.word	0x0100731b

010089a0 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
 10089a0:	b580      	push	{r7, lr}
 10089a2:	b082      	sub	sp, #8
 10089a4:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 10089a6:	2300      	movs	r3, #0
 10089a8:	607b      	str	r3, [r7, #4]
 10089aa:	e00c      	b.n	10089c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
 10089ac:	687a      	ldr	r2, [r7, #4]
 10089ae:	4613      	mov	r3, r2
 10089b0:	009b      	lsls	r3, r3, #2
 10089b2:	4413      	add	r3, r2
 10089b4:	009b      	lsls	r3, r3, #2
 10089b6:	4a12      	ldr	r2, [pc, #72]	; (1008a00 <prvInitialiseTaskLists+0x60>)
 10089b8:	4413      	add	r3, r2
 10089ba:	4618      	mov	r0, r3
 10089bc:	4b11      	ldr	r3, [pc, #68]	; (1008a04 <prvInitialiseTaskLists+0x64>)
 10089be:	4798      	blx	r3
	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 10089c0:	687b      	ldr	r3, [r7, #4]
 10089c2:	3301      	adds	r3, #1
 10089c4:	607b      	str	r3, [r7, #4]
 10089c6:	687b      	ldr	r3, [r7, #4]
 10089c8:	2b04      	cmp	r3, #4
 10089ca:	d9ef      	bls.n	10089ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
 10089cc:	480e      	ldr	r0, [pc, #56]	; (1008a08 <prvInitialiseTaskLists+0x68>)
 10089ce:	4b0d      	ldr	r3, [pc, #52]	; (1008a04 <prvInitialiseTaskLists+0x64>)
 10089d0:	4798      	blx	r3
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
 10089d2:	480e      	ldr	r0, [pc, #56]	; (1008a0c <prvInitialiseTaskLists+0x6c>)
 10089d4:	4b0b      	ldr	r3, [pc, #44]	; (1008a04 <prvInitialiseTaskLists+0x64>)
 10089d6:	4798      	blx	r3
	vListInitialise( ( xList * ) &xPendingReadyList );
 10089d8:	480d      	ldr	r0, [pc, #52]	; (1008a10 <prvInitialiseTaskLists+0x70>)
 10089da:	4b0a      	ldr	r3, [pc, #40]	; (1008a04 <prvInitialiseTaskLists+0x64>)
 10089dc:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
 10089de:	480d      	ldr	r0, [pc, #52]	; (1008a14 <prvInitialiseTaskLists+0x74>)
 10089e0:	4b08      	ldr	r3, [pc, #32]	; (1008a04 <prvInitialiseTaskLists+0x64>)
 10089e2:	4798      	blx	r3
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
 10089e4:	480c      	ldr	r0, [pc, #48]	; (1008a18 <prvInitialiseTaskLists+0x78>)
 10089e6:	4b07      	ldr	r3, [pc, #28]	; (1008a04 <prvInitialiseTaskLists+0x64>)
 10089e8:	4798      	blx	r3
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 10089ea:	4b0c      	ldr	r3, [pc, #48]	; (1008a1c <prvInitialiseTaskLists+0x7c>)
 10089ec:	4a06      	ldr	r2, [pc, #24]	; (1008a08 <prvInitialiseTaskLists+0x68>)
 10089ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 10089f0:	4b0b      	ldr	r3, [pc, #44]	; (1008a20 <prvInitialiseTaskLists+0x80>)
 10089f2:	4a06      	ldr	r2, [pc, #24]	; (1008a0c <prvInitialiseTaskLists+0x6c>)
 10089f4:	601a      	str	r2, [r3, #0]
}
 10089f6:	bf00      	nop
 10089f8:	3708      	adds	r7, #8
 10089fa:	46bd      	mov	sp, r7
 10089fc:	bd80      	pop	{r7, pc}
 10089fe:	bf00      	nop
 1008a00:	20004e08 	.word	0x20004e08
 1008a04:	010072dd 	.word	0x010072dd
 1008a08:	20004e6c 	.word	0x20004e6c
 1008a0c:	20004e80 	.word	0x20004e80
 1008a10:	20004e9c 	.word	0x20004e9c
 1008a14:	20004eb0 	.word	0x20004eb0
 1008a18:	20004ec8 	.word	0x20004ec8
 1008a1c:	20004e94 	.word	0x20004e94
 1008a20:	20004e98 	.word	0x20004e98

01008a24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 1008a24:	b580      	push	{r7, lr}
 1008a26:	b082      	sub	sp, #8
 1008a28:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 1008a2a:	e028      	b.n	1008a7e <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 1008a2c:	4b18      	ldr	r3, [pc, #96]	; (1008a90 <prvCheckTasksWaitingTermination+0x6c>)
 1008a2e:	4798      	blx	r3
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 1008a30:	4b18      	ldr	r3, [pc, #96]	; (1008a94 <prvCheckTasksWaitingTermination+0x70>)
 1008a32:	681b      	ldr	r3, [r3, #0]
 1008a34:	2b00      	cmp	r3, #0
 1008a36:	bf0c      	ite	eq
 1008a38:	2301      	moveq	r3, #1
 1008a3a:	2300      	movne	r3, #0
 1008a3c:	b2db      	uxtb	r3, r3
 1008a3e:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
 1008a40:	4b15      	ldr	r3, [pc, #84]	; (1008a98 <prvCheckTasksWaitingTermination+0x74>)
 1008a42:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
 1008a44:	687b      	ldr	r3, [r7, #4]
 1008a46:	2b00      	cmp	r3, #0
 1008a48:	d119      	bne.n	1008a7e <prvCheckTasksWaitingTermination+0x5a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 1008a4a:	4b14      	ldr	r3, [pc, #80]	; (1008a9c <prvCheckTasksWaitingTermination+0x78>)
 1008a4c:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 1008a4e:	4b11      	ldr	r3, [pc, #68]	; (1008a94 <prvCheckTasksWaitingTermination+0x70>)
 1008a50:	68db      	ldr	r3, [r3, #12]
 1008a52:	68db      	ldr	r3, [r3, #12]
 1008a54:	603b      	str	r3, [r7, #0]
					uxListRemove( &( pxTCB->xGenericListItem ) );
 1008a56:	683b      	ldr	r3, [r7, #0]
 1008a58:	3304      	adds	r3, #4
 1008a5a:	4618      	mov	r0, r3
 1008a5c:	4b10      	ldr	r3, [pc, #64]	; (1008aa0 <prvCheckTasksWaitingTermination+0x7c>)
 1008a5e:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
 1008a60:	4b10      	ldr	r3, [pc, #64]	; (1008aa4 <prvCheckTasksWaitingTermination+0x80>)
 1008a62:	681b      	ldr	r3, [r3, #0]
 1008a64:	3b01      	subs	r3, #1
 1008a66:	4a0f      	ldr	r2, [pc, #60]	; (1008aa4 <prvCheckTasksWaitingTermination+0x80>)
 1008a68:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
 1008a6a:	4b0f      	ldr	r3, [pc, #60]	; (1008aa8 <prvCheckTasksWaitingTermination+0x84>)
 1008a6c:	681b      	ldr	r3, [r3, #0]
 1008a6e:	3b01      	subs	r3, #1
 1008a70:	4a0d      	ldr	r2, [pc, #52]	; (1008aa8 <prvCheckTasksWaitingTermination+0x84>)
 1008a72:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 1008a74:	4b0d      	ldr	r3, [pc, #52]	; (1008aac <prvCheckTasksWaitingTermination+0x88>)
 1008a76:	4798      	blx	r3

				prvDeleteTCB( pxTCB );
 1008a78:	6838      	ldr	r0, [r7, #0]
 1008a7a:	4b0d      	ldr	r3, [pc, #52]	; (1008ab0 <prvCheckTasksWaitingTermination+0x8c>)
 1008a7c:	4798      	blx	r3
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 1008a7e:	4b0a      	ldr	r3, [pc, #40]	; (1008aa8 <prvCheckTasksWaitingTermination+0x84>)
 1008a80:	681b      	ldr	r3, [r3, #0]
 1008a82:	2b00      	cmp	r3, #0
 1008a84:	d1d2      	bne.n	1008a2c <prvCheckTasksWaitingTermination+0x8>
			}
		}
	}
	#endif
}
 1008a86:	bf00      	nop
 1008a88:	3708      	adds	r7, #8
 1008a8a:	46bd      	mov	sp, r7
 1008a8c:	bd80      	pop	{r7, pc}
 1008a8e:	bf00      	nop
 1008a90:	0100838d 	.word	0x0100838d
 1008a94:	20004eb0 	.word	0x20004eb0
 1008a98:	010083a9 	.word	0x010083a9
 1008a9c:	010075cd 	.word	0x010075cd
 1008aa0:	010073f1 	.word	0x010073f1
 1008aa4:	20004edc 	.word	0x20004edc
 1008aa8:	20004ec4 	.word	0x20004ec4
 1008aac:	010075ed 	.word	0x010075ed
 1008ab0:	01008b95 	.word	0x01008b95

01008ab4 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
 1008ab4:	b580      	push	{r7, lr}
 1008ab6:	b082      	sub	sp, #8
 1008ab8:	af00      	add	r7, sp, #0
 1008aba:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 1008abc:	4b13      	ldr	r3, [pc, #76]	; (1008b0c <prvAddCurrentTaskToDelayedList+0x58>)
 1008abe:	681b      	ldr	r3, [r3, #0]
 1008ac0:	687a      	ldr	r2, [r7, #4]
 1008ac2:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
 1008ac4:	4b12      	ldr	r3, [pc, #72]	; (1008b10 <prvAddCurrentTaskToDelayedList+0x5c>)
 1008ac6:	681b      	ldr	r3, [r3, #0]
 1008ac8:	687a      	ldr	r2, [r7, #4]
 1008aca:	429a      	cmp	r2, r3
 1008acc:	d209      	bcs.n	1008ae2 <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 1008ace:	4b11      	ldr	r3, [pc, #68]	; (1008b14 <prvAddCurrentTaskToDelayedList+0x60>)
 1008ad0:	681a      	ldr	r2, [r3, #0]
 1008ad2:	4b0e      	ldr	r3, [pc, #56]	; (1008b0c <prvAddCurrentTaskToDelayedList+0x58>)
 1008ad4:	681b      	ldr	r3, [r3, #0]
 1008ad6:	3304      	adds	r3, #4
 1008ad8:	4619      	mov	r1, r3
 1008ada:	4610      	mov	r0, r2
 1008adc:	4b0e      	ldr	r3, [pc, #56]	; (1008b18 <prvAddCurrentTaskToDelayedList+0x64>)
 1008ade:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
		{
			xNextTaskUnblockTime = xTimeToWake;
		}
	}
}
 1008ae0:	e010      	b.n	1008b04 <prvAddCurrentTaskToDelayedList+0x50>
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 1008ae2:	4b0e      	ldr	r3, [pc, #56]	; (1008b1c <prvAddCurrentTaskToDelayedList+0x68>)
 1008ae4:	681a      	ldr	r2, [r3, #0]
 1008ae6:	4b09      	ldr	r3, [pc, #36]	; (1008b0c <prvAddCurrentTaskToDelayedList+0x58>)
 1008ae8:	681b      	ldr	r3, [r3, #0]
 1008aea:	3304      	adds	r3, #4
 1008aec:	4619      	mov	r1, r3
 1008aee:	4610      	mov	r0, r2
 1008af0:	4b09      	ldr	r3, [pc, #36]	; (1008b18 <prvAddCurrentTaskToDelayedList+0x64>)
 1008af2:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
 1008af4:	4b0a      	ldr	r3, [pc, #40]	; (1008b20 <prvAddCurrentTaskToDelayedList+0x6c>)
 1008af6:	681b      	ldr	r3, [r3, #0]
 1008af8:	687a      	ldr	r2, [r7, #4]
 1008afa:	429a      	cmp	r2, r3
 1008afc:	d202      	bcs.n	1008b04 <prvAddCurrentTaskToDelayedList+0x50>
			xNextTaskUnblockTime = xTimeToWake;
 1008afe:	4a08      	ldr	r2, [pc, #32]	; (1008b20 <prvAddCurrentTaskToDelayedList+0x6c>)
 1008b00:	687b      	ldr	r3, [r7, #4]
 1008b02:	6013      	str	r3, [r2, #0]
}
 1008b04:	bf00      	nop
 1008b06:	3708      	adds	r7, #8
 1008b08:	46bd      	mov	sp, r7
 1008b0a:	bd80      	pop	{r7, pc}
 1008b0c:	20004e04 	.word	0x20004e04
 1008b10:	20004ee0 	.word	0x20004ee0
 1008b14:	20004e98 	.word	0x20004e98
 1008b18:	01007381 	.word	0x01007381
 1008b1c:	20004e94 	.word	0x20004e94
 1008b20:	200001e4 	.word	0x200001e4

01008b24 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
 1008b24:	b580      	push	{r7, lr}
 1008b26:	b084      	sub	sp, #16
 1008b28:	af00      	add	r7, sp, #0
 1008b2a:	4603      	mov	r3, r0
 1008b2c:	6039      	str	r1, [r7, #0]
 1008b2e:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
 1008b30:	204c      	movs	r0, #76	; 0x4c
 1008b32:	4b15      	ldr	r3, [pc, #84]	; (1008b88 <prvAllocateTCBAndStack+0x64>)
 1008b34:	4798      	blx	r3
 1008b36:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
 1008b38:	68fb      	ldr	r3, [r7, #12]
 1008b3a:	2b00      	cmp	r3, #0
 1008b3c:	d01e      	beq.n	1008b7c <prvAllocateTCBAndStack+0x58>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
 1008b3e:	683b      	ldr	r3, [r7, #0]
 1008b40:	2b00      	cmp	r3, #0
 1008b42:	d106      	bne.n	1008b52 <prvAllocateTCBAndStack+0x2e>
 1008b44:	88fb      	ldrh	r3, [r7, #6]
 1008b46:	009b      	lsls	r3, r3, #2
 1008b48:	4618      	mov	r0, r3
 1008b4a:	4b0f      	ldr	r3, [pc, #60]	; (1008b88 <prvAllocateTCBAndStack+0x64>)
 1008b4c:	4798      	blx	r3
 1008b4e:	4603      	mov	r3, r0
 1008b50:	e000      	b.n	1008b54 <prvAllocateTCBAndStack+0x30>
 1008b52:	683b      	ldr	r3, [r7, #0]
 1008b54:	68fa      	ldr	r2, [r7, #12]
 1008b56:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
 1008b58:	68fb      	ldr	r3, [r7, #12]
 1008b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 1008b5c:	2b00      	cmp	r3, #0
 1008b5e:	d105      	bne.n	1008b6c <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
 1008b60:	68f8      	ldr	r0, [r7, #12]
 1008b62:	4b0a      	ldr	r3, [pc, #40]	; (1008b8c <prvAllocateTCBAndStack+0x68>)
 1008b64:	4798      	blx	r3
			pxNewTCB = NULL;
 1008b66:	2300      	movs	r3, #0
 1008b68:	60fb      	str	r3, [r7, #12]
 1008b6a:	e007      	b.n	1008b7c <prvAllocateTCBAndStack+0x58>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
 1008b6c:	68fb      	ldr	r3, [r7, #12]
 1008b6e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 1008b70:	88fb      	ldrh	r3, [r7, #6]
 1008b72:	009b      	lsls	r3, r3, #2
 1008b74:	461a      	mov	r2, r3
 1008b76:	21a5      	movs	r1, #165	; 0xa5
 1008b78:	4b05      	ldr	r3, [pc, #20]	; (1008b90 <prvAllocateTCBAndStack+0x6c>)
 1008b7a:	4798      	blx	r3
		}
	}

	return pxNewTCB;
 1008b7c:	68fb      	ldr	r3, [r7, #12]
}
 1008b7e:	4618      	mov	r0, r3
 1008b80:	3710      	adds	r7, #16
 1008b82:	46bd      	mov	sp, r7
 1008b84:	bd80      	pop	{r7, pc}
 1008b86:	bf00      	nop
 1008b88:	010076c9 	.word	0x010076c9
 1008b8c:	010077d5 	.word	0x010077d5
 1008b90:	0100c685 	.word	0x0100c685

01008b94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
 1008b94:	b580      	push	{r7, lr}
 1008b96:	b082      	sub	sp, #8
 1008b98:	af00      	add	r7, sp, #0
 1008b9a:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 1008b9c:	687b      	ldr	r3, [r7, #4]
 1008b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 1008ba0:	4618      	mov	r0, r3
 1008ba2:	4b04      	ldr	r3, [pc, #16]	; (1008bb4 <prvDeleteTCB+0x20>)
 1008ba4:	4798      	blx	r3
		vPortFree( pxTCB );
 1008ba6:	6878      	ldr	r0, [r7, #4]
 1008ba8:	4b02      	ldr	r3, [pc, #8]	; (1008bb4 <prvDeleteTCB+0x20>)
 1008baa:	4798      	blx	r3
	}
 1008bac:	bf00      	nop
 1008bae:	3708      	adds	r7, #8
 1008bb0:	46bd      	mov	sp, r7
 1008bb2:	bd80      	pop	{r7, pc}
 1008bb4:	010077d5 	.word	0x010077d5

01008bb8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
 1008bb8:	b480      	push	{r7}
 1008bba:	b083      	sub	sp, #12
 1008bbc:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 1008bbe:	4b04      	ldr	r3, [pc, #16]	; (1008bd0 <xTaskGetCurrentTaskHandle+0x18>)
 1008bc0:	681b      	ldr	r3, [r3, #0]
 1008bc2:	607b      	str	r3, [r7, #4]

		return xReturn;
 1008bc4:	687b      	ldr	r3, [r7, #4]
	}
 1008bc6:	4618      	mov	r0, r3
 1008bc8:	370c      	adds	r7, #12
 1008bca:	46bd      	mov	sp, r7
 1008bcc:	bc80      	pop	{r7}
 1008bce:	4770      	bx	lr
 1008bd0:	20004e04 	.word	0x20004e04

01008bd4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
 1008bd4:	b480      	push	{r7}
 1008bd6:	b083      	sub	sp, #12
 1008bd8:	af00      	add	r7, sp, #0
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
 1008bda:	4b0b      	ldr	r3, [pc, #44]	; (1008c08 <xTaskGetSchedulerState+0x34>)
 1008bdc:	681b      	ldr	r3, [r3, #0]
 1008bde:	2b00      	cmp	r3, #0
 1008be0:	d102      	bne.n	1008be8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 1008be2:	2300      	movs	r3, #0
 1008be4:	607b      	str	r3, [r7, #4]
 1008be6:	e008      	b.n	1008bfa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 1008be8:	4b08      	ldr	r3, [pc, #32]	; (1008c0c <xTaskGetSchedulerState+0x38>)
 1008bea:	681b      	ldr	r3, [r3, #0]
 1008bec:	2b00      	cmp	r3, #0
 1008bee:	d102      	bne.n	1008bf6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 1008bf0:	2301      	movs	r3, #1
 1008bf2:	607b      	str	r3, [r7, #4]
 1008bf4:	e001      	b.n	1008bfa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 1008bf6:	2302      	movs	r3, #2
 1008bf8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 1008bfa:	687b      	ldr	r3, [r7, #4]
	}
 1008bfc:	4618      	mov	r0, r3
 1008bfe:	370c      	adds	r7, #12
 1008c00:	46bd      	mov	sp, r7
 1008c02:	bc80      	pop	{r7}
 1008c04:	4770      	bx	lr
 1008c06:	bf00      	nop
 1008c08:	20004eec 	.word	0x20004eec
 1008c0c:	20004ef0 	.word	0x20004ef0

01008c10 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
 1008c10:	b580      	push	{r7, lr}
 1008c12:	b084      	sub	sp, #16
 1008c14:	af00      	add	r7, sp, #0
 1008c16:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 1008c18:	687b      	ldr	r3, [r7, #4]
 1008c1a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 1008c1c:	687b      	ldr	r3, [r7, #4]
 1008c1e:	2b00      	cmp	r3, #0
 1008c20:	d041      	beq.n	1008ca6 <vTaskPriorityInherit+0x96>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 1008c22:	68fb      	ldr	r3, [r7, #12]
 1008c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 1008c26:	4b22      	ldr	r3, [pc, #136]	; (1008cb0 <vTaskPriorityInherit+0xa0>)
 1008c28:	681b      	ldr	r3, [r3, #0]
 1008c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 1008c2c:	429a      	cmp	r2, r3
 1008c2e:	d23a      	bcs.n	1008ca6 <vTaskPriorityInherit+0x96>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
 1008c30:	4b1f      	ldr	r3, [pc, #124]	; (1008cb0 <vTaskPriorityInherit+0xa0>)
 1008c32:	681b      	ldr	r3, [r3, #0]
 1008c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 1008c36:	f1c3 0205 	rsb	r2, r3, #5
 1008c3a:	68fb      	ldr	r3, [r7, #12]
 1008c3c:	619a      	str	r2, [r3, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 1008c3e:	68fb      	ldr	r3, [r7, #12]
 1008c40:	6959      	ldr	r1, [r3, #20]
 1008c42:	68fb      	ldr	r3, [r7, #12]
 1008c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 1008c46:	4613      	mov	r3, r2
 1008c48:	009b      	lsls	r3, r3, #2
 1008c4a:	4413      	add	r3, r2
 1008c4c:	009b      	lsls	r3, r3, #2
 1008c4e:	4a19      	ldr	r2, [pc, #100]	; (1008cb4 <vTaskPriorityInherit+0xa4>)
 1008c50:	4413      	add	r3, r2
 1008c52:	4299      	cmp	r1, r3
 1008c54:	d122      	bne.n	1008c9c <vTaskPriorityInherit+0x8c>
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
 1008c56:	68fb      	ldr	r3, [r7, #12]
 1008c58:	3304      	adds	r3, #4
 1008c5a:	4618      	mov	r0, r3
 1008c5c:	4b16      	ldr	r3, [pc, #88]	; (1008cb8 <vTaskPriorityInherit+0xa8>)
 1008c5e:	4798      	blx	r3
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 1008c60:	4b13      	ldr	r3, [pc, #76]	; (1008cb0 <vTaskPriorityInherit+0xa0>)
 1008c62:	681b      	ldr	r3, [r3, #0]
 1008c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 1008c66:	68fb      	ldr	r3, [r7, #12]
 1008c68:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
 1008c6a:	68fb      	ldr	r3, [r7, #12]
 1008c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 1008c6e:	4b13      	ldr	r3, [pc, #76]	; (1008cbc <vTaskPriorityInherit+0xac>)
 1008c70:	681b      	ldr	r3, [r3, #0]
 1008c72:	429a      	cmp	r2, r3
 1008c74:	d903      	bls.n	1008c7e <vTaskPriorityInherit+0x6e>
 1008c76:	68fb      	ldr	r3, [r7, #12]
 1008c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 1008c7a:	4a10      	ldr	r2, [pc, #64]	; (1008cbc <vTaskPriorityInherit+0xac>)
 1008c7c:	6013      	str	r3, [r2, #0]
 1008c7e:	68fb      	ldr	r3, [r7, #12]
 1008c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 1008c82:	4613      	mov	r3, r2
 1008c84:	009b      	lsls	r3, r3, #2
 1008c86:	4413      	add	r3, r2
 1008c88:	009b      	lsls	r3, r3, #2
 1008c8a:	4a0a      	ldr	r2, [pc, #40]	; (1008cb4 <vTaskPriorityInherit+0xa4>)
 1008c8c:	441a      	add	r2, r3
 1008c8e:	68fb      	ldr	r3, [r7, #12]
 1008c90:	3304      	adds	r3, #4
 1008c92:	4619      	mov	r1, r3
 1008c94:	4610      	mov	r0, r2
 1008c96:	4b0a      	ldr	r3, [pc, #40]	; (1008cc0 <vTaskPriorityInherit+0xb0>)
 1008c98:	4798      	blx	r3
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
			}
		}
	}
 1008c9a:	e004      	b.n	1008ca6 <vTaskPriorityInherit+0x96>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 1008c9c:	4b04      	ldr	r3, [pc, #16]	; (1008cb0 <vTaskPriorityInherit+0xa0>)
 1008c9e:	681b      	ldr	r3, [r3, #0]
 1008ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 1008ca2:	68fb      	ldr	r3, [r7, #12]
 1008ca4:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 1008ca6:	bf00      	nop
 1008ca8:	3710      	adds	r7, #16
 1008caa:	46bd      	mov	sp, r7
 1008cac:	bd80      	pop	{r7, pc}
 1008cae:	bf00      	nop
 1008cb0:	20004e04 	.word	0x20004e04
 1008cb4:	20004e08 	.word	0x20004e08
 1008cb8:	010073f1 	.word	0x010073f1
 1008cbc:	20004ee8 	.word	0x20004ee8
 1008cc0:	01007333 	.word	0x01007333

01008cc4 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
 1008cc4:	b580      	push	{r7, lr}
 1008cc6:	b084      	sub	sp, #16
 1008cc8:	af00      	add	r7, sp, #0
 1008cca:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 1008ccc:	687b      	ldr	r3, [r7, #4]
 1008cce:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 1008cd0:	687b      	ldr	r3, [r7, #4]
 1008cd2:	2b00      	cmp	r3, #0
 1008cd4:	d02c      	beq.n	1008d30 <vTaskPriorityDisinherit+0x6c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 1008cd6:	68fb      	ldr	r3, [r7, #12]
 1008cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 1008cda:	68fb      	ldr	r3, [r7, #12]
 1008cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 1008cde:	429a      	cmp	r2, r3
 1008ce0:	d026      	beq.n	1008d30 <vTaskPriorityDisinherit+0x6c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
 1008ce2:	68fb      	ldr	r3, [r7, #12]
 1008ce4:	3304      	adds	r3, #4
 1008ce6:	4618      	mov	r0, r3
 1008ce8:	4b13      	ldr	r3, [pc, #76]	; (1008d38 <vTaskPriorityDisinherit+0x74>)
 1008cea:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
 1008cec:	68fb      	ldr	r3, [r7, #12]
 1008cee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 1008cf0:	68fb      	ldr	r3, [r7, #12]
 1008cf2:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
 1008cf4:	68fb      	ldr	r3, [r7, #12]
 1008cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 1008cf8:	f1c3 0205 	rsb	r2, r3, #5
 1008cfc:	68fb      	ldr	r3, [r7, #12]
 1008cfe:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
 1008d00:	68fb      	ldr	r3, [r7, #12]
 1008d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 1008d04:	4b0d      	ldr	r3, [pc, #52]	; (1008d3c <vTaskPriorityDisinherit+0x78>)
 1008d06:	681b      	ldr	r3, [r3, #0]
 1008d08:	429a      	cmp	r2, r3
 1008d0a:	d903      	bls.n	1008d14 <vTaskPriorityDisinherit+0x50>
 1008d0c:	68fb      	ldr	r3, [r7, #12]
 1008d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 1008d10:	4a0a      	ldr	r2, [pc, #40]	; (1008d3c <vTaskPriorityDisinherit+0x78>)
 1008d12:	6013      	str	r3, [r2, #0]
 1008d14:	68fb      	ldr	r3, [r7, #12]
 1008d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 1008d18:	4613      	mov	r3, r2
 1008d1a:	009b      	lsls	r3, r3, #2
 1008d1c:	4413      	add	r3, r2
 1008d1e:	009b      	lsls	r3, r3, #2
 1008d20:	4a07      	ldr	r2, [pc, #28]	; (1008d40 <vTaskPriorityDisinherit+0x7c>)
 1008d22:	441a      	add	r2, r3
 1008d24:	68fb      	ldr	r3, [r7, #12]
 1008d26:	3304      	adds	r3, #4
 1008d28:	4619      	mov	r1, r3
 1008d2a:	4610      	mov	r0, r2
 1008d2c:	4b05      	ldr	r3, [pc, #20]	; (1008d44 <vTaskPriorityDisinherit+0x80>)
 1008d2e:	4798      	blx	r3
			}
		}
	}
 1008d30:	bf00      	nop
 1008d32:	3710      	adds	r7, #16
 1008d34:	46bd      	mov	sp, r7
 1008d36:	bd80      	pop	{r7, pc}
 1008d38:	010073f1 	.word	0x010073f1
 1008d3c:	20004ee8 	.word	0x20004ee8
 1008d40:	20004e08 	.word	0x20004e08
 1008d44:	01007333 	.word	0x01007333

01008d48 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
 1008d48:	b590      	push	{r4, r7, lr}
 1008d4a:	b087      	sub	sp, #28
 1008d4c:	af04      	add	r7, sp, #16
portBASE_TYPE xReturn = pdFAIL;
 1008d4e:	2300      	movs	r3, #0
 1008d50:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 1008d52:	4b0d      	ldr	r3, [pc, #52]	; (1008d88 <xTimerCreateTimerTask+0x40>)
 1008d54:	4798      	blx	r3

	if( xTimerQueue != NULL )
 1008d56:	4b0d      	ldr	r3, [pc, #52]	; (1008d8c <xTimerCreateTimerTask+0x44>)
 1008d58:	681b      	ldr	r3, [r3, #0]
 1008d5a:	2b00      	cmp	r3, #0
 1008d5c:	d00f      	beq.n	1008d7e <xTimerCreateTimerTask+0x36>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 1008d5e:	2300      	movs	r3, #0
 1008d60:	9303      	str	r3, [sp, #12]
 1008d62:	2300      	movs	r3, #0
 1008d64:	9302      	str	r3, [sp, #8]
 1008d66:	2300      	movs	r3, #0
 1008d68:	9301      	str	r3, [sp, #4]
 1008d6a:	2304      	movs	r3, #4
 1008d6c:	9300      	str	r3, [sp, #0]
 1008d6e:	2300      	movs	r3, #0
 1008d70:	f44f 7282 	mov.w	r2, #260	; 0x104
 1008d74:	4906      	ldr	r1, [pc, #24]	; (1008d90 <xTimerCreateTimerTask+0x48>)
 1008d76:	4807      	ldr	r0, [pc, #28]	; (1008d94 <xTimerCreateTimerTask+0x4c>)
 1008d78:	4c07      	ldr	r4, [pc, #28]	; (1008d98 <xTimerCreateTimerTask+0x50>)
 1008d7a:	47a0      	blx	r4
 1008d7c:	6078      	str	r0, [r7, #4]
		}
		#endif
	}

	configASSERT( xReturn );
	return xReturn;
 1008d7e:	687b      	ldr	r3, [r7, #4]
}
 1008d80:	4618      	mov	r0, r3
 1008d82:	370c      	adds	r7, #12
 1008d84:	46bd      	mov	sp, r7
 1008d86:	bd90      	pop	{r4, r7, pc}
 1008d88:	01009275 	.word	0x01009275
 1008d8c:	20004f34 	.word	0x20004f34
 1008d90:	010119dc 	.word	0x010119dc
 1008d94:	01008f05 	.word	0x01008f05
 1008d98:	010080fd 	.word	0x010080fd

01008d9c <xTimerCreate>:
/*-----------------------------------------------------------*/

xTimerHandle xTimerCreate( const signed char *pcTimerName, portTickType xTimerPeriodInTicks, unsigned portBASE_TYPE uxAutoReload, void *pvTimerID, tmrTIMER_CALLBACK pxCallbackFunction )
{
 1008d9c:	b580      	push	{r7, lr}
 1008d9e:	b086      	sub	sp, #24
 1008da0:	af00      	add	r7, sp, #0
 1008da2:	60f8      	str	r0, [r7, #12]
 1008da4:	60b9      	str	r1, [r7, #8]
 1008da6:	607a      	str	r2, [r7, #4]
 1008da8:	603b      	str	r3, [r7, #0]
xTIMER *pxNewTimer;

	/* Allocate the timer structure. */
	if( xTimerPeriodInTicks == ( portTickType ) 0U )
 1008daa:	68bb      	ldr	r3, [r7, #8]
 1008dac:	2b00      	cmp	r3, #0
 1008dae:	d102      	bne.n	1008db6 <xTimerCreate+0x1a>
	{
		pxNewTimer = NULL;
 1008db0:	2300      	movs	r3, #0
 1008db2:	617b      	str	r3, [r7, #20]
 1008db4:	e01c      	b.n	1008df0 <xTimerCreate+0x54>
		configASSERT( ( xTimerPeriodInTicks > 0 ) );
	}
	else
	{
		pxNewTimer = ( xTIMER * ) pvPortMalloc( sizeof( xTIMER ) );
 1008db6:	2028      	movs	r0, #40	; 0x28
 1008db8:	4b10      	ldr	r3, [pc, #64]	; (1008dfc <xTimerCreate+0x60>)
 1008dba:	4798      	blx	r3
 1008dbc:	6178      	str	r0, [r7, #20]
		if( pxNewTimer != NULL )
 1008dbe:	697b      	ldr	r3, [r7, #20]
 1008dc0:	2b00      	cmp	r3, #0
 1008dc2:	d015      	beq.n	1008df0 <xTimerCreate+0x54>
		{
			/* Ensure the infrastructure used by the timer service task has been
			created/initialised. */
			prvCheckForValidListAndQueue();
 1008dc4:	4b0e      	ldr	r3, [pc, #56]	; (1008e00 <xTimerCreate+0x64>)
 1008dc6:	4798      	blx	r3

			/* Initialise the timer structure members using the function parameters. */
			pxNewTimer->pcTimerName = pcTimerName;
 1008dc8:	697b      	ldr	r3, [r7, #20]
 1008dca:	68fa      	ldr	r2, [r7, #12]
 1008dcc:	601a      	str	r2, [r3, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 1008dce:	697b      	ldr	r3, [r7, #20]
 1008dd0:	68ba      	ldr	r2, [r7, #8]
 1008dd2:	619a      	str	r2, [r3, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 1008dd4:	697b      	ldr	r3, [r7, #20]
 1008dd6:	687a      	ldr	r2, [r7, #4]
 1008dd8:	61da      	str	r2, [r3, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 1008dda:	697b      	ldr	r3, [r7, #20]
 1008ddc:	683a      	ldr	r2, [r7, #0]
 1008dde:	621a      	str	r2, [r3, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 1008de0:	697b      	ldr	r3, [r7, #20]
 1008de2:	6a3a      	ldr	r2, [r7, #32]
 1008de4:	625a      	str	r2, [r3, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 1008de6:	697b      	ldr	r3, [r7, #20]
 1008de8:	3304      	adds	r3, #4
 1008dea:	4618      	mov	r0, r3
 1008dec:	4b05      	ldr	r3, [pc, #20]	; (1008e04 <xTimerCreate+0x68>)
 1008dee:	4798      	blx	r3
		{
			traceTIMER_CREATE_FAILED();
		}
	}

	return ( xTimerHandle ) pxNewTimer;
 1008df0:	697b      	ldr	r3, [r7, #20]
}
 1008df2:	4618      	mov	r0, r3
 1008df4:	3718      	adds	r7, #24
 1008df6:	46bd      	mov	sp, r7
 1008df8:	bd80      	pop	{r7, pc}
 1008dfa:	bf00      	nop
 1008dfc:	010076c9 	.word	0x010076c9
 1008e00:	01009275 	.word	0x01009275
 1008e04:	0100731b 	.word	0x0100731b

01008e08 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
 1008e08:	b590      	push	{r4, r7, lr}
 1008e0a:	b089      	sub	sp, #36	; 0x24
 1008e0c:	af00      	add	r7, sp, #0
 1008e0e:	60f8      	str	r0, [r7, #12]
 1008e10:	60b9      	str	r1, [r7, #8]
 1008e12:	607a      	str	r2, [r7, #4]
 1008e14:	603b      	str	r3, [r7, #0]
portBASE_TYPE xReturn = pdFAIL;
 1008e16:	2300      	movs	r3, #0
 1008e18:	61fb      	str	r3, [r7, #28]
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 1008e1a:	4b1a      	ldr	r3, [pc, #104]	; (1008e84 <xTimerGenericCommand+0x7c>)
 1008e1c:	681b      	ldr	r3, [r3, #0]
 1008e1e:	2b00      	cmp	r3, #0
 1008e20:	d02a      	beq.n	1008e78 <xTimerGenericCommand+0x70>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 1008e22:	68bb      	ldr	r3, [r7, #8]
 1008e24:	613b      	str	r3, [r7, #16]
		xMessage.xMessageValue = xOptionalValue;
 1008e26:	687b      	ldr	r3, [r7, #4]
 1008e28:	617b      	str	r3, [r7, #20]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
 1008e2a:	68fb      	ldr	r3, [r7, #12]
 1008e2c:	61bb      	str	r3, [r7, #24]

		if( pxHigherPriorityTaskWoken == NULL )
 1008e2e:	683b      	ldr	r3, [r7, #0]
 1008e30:	2b00      	cmp	r3, #0
 1008e32:	d118      	bne.n	1008e66 <xTimerGenericCommand+0x5e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 1008e34:	4b14      	ldr	r3, [pc, #80]	; (1008e88 <xTimerGenericCommand+0x80>)
 1008e36:	4798      	blx	r3
 1008e38:	4603      	mov	r3, r0
 1008e3a:	2b01      	cmp	r3, #1
 1008e3c:	d109      	bne.n	1008e52 <xTimerGenericCommand+0x4a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
 1008e3e:	4b11      	ldr	r3, [pc, #68]	; (1008e84 <xTimerGenericCommand+0x7c>)
 1008e40:	6818      	ldr	r0, [r3, #0]
 1008e42:	f107 0110 	add.w	r1, r7, #16
 1008e46:	2300      	movs	r3, #0
 1008e48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 1008e4a:	4c10      	ldr	r4, [pc, #64]	; (1008e8c <xTimerGenericCommand+0x84>)
 1008e4c:	47a0      	blx	r4
 1008e4e:	61f8      	str	r0, [r7, #28]
 1008e50:	e012      	b.n	1008e78 <xTimerGenericCommand+0x70>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 1008e52:	4b0c      	ldr	r3, [pc, #48]	; (1008e84 <xTimerGenericCommand+0x7c>)
 1008e54:	6818      	ldr	r0, [r3, #0]
 1008e56:	f107 0110 	add.w	r1, r7, #16
 1008e5a:	2300      	movs	r3, #0
 1008e5c:	2200      	movs	r2, #0
 1008e5e:	4c0b      	ldr	r4, [pc, #44]	; (1008e8c <xTimerGenericCommand+0x84>)
 1008e60:	47a0      	blx	r4
 1008e62:	61f8      	str	r0, [r7, #28]
 1008e64:	e008      	b.n	1008e78 <xTimerGenericCommand+0x70>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 1008e66:	4b07      	ldr	r3, [pc, #28]	; (1008e84 <xTimerGenericCommand+0x7c>)
 1008e68:	6818      	ldr	r0, [r3, #0]
 1008e6a:	f107 0110 	add.w	r1, r7, #16
 1008e6e:	2300      	movs	r3, #0
 1008e70:	683a      	ldr	r2, [r7, #0]
 1008e72:	4c07      	ldr	r4, [pc, #28]	; (1008e90 <xTimerGenericCommand+0x88>)
 1008e74:	47a0      	blx	r4
 1008e76:	61f8      	str	r0, [r7, #28]
		}

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
 1008e78:	69fb      	ldr	r3, [r7, #28]
}
 1008e7a:	4618      	mov	r0, r3
 1008e7c:	3724      	adds	r7, #36	; 0x24
 1008e7e:	46bd      	mov	sp, r7
 1008e80:	bd90      	pop	{r4, r7, pc}
 1008e82:	bf00      	nop
 1008e84:	20004f34 	.word	0x20004f34
 1008e88:	01008bd5 	.word	0x01008bd5
 1008e8c:	01007b0d 	.word	0x01007b0d
 1008e90:	01007c45 	.word	0x01007c45

01008e94 <prvProcessExpiredTimer>:

#endif
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( portTickType xNextExpireTime, portTickType xTimeNow )
{
 1008e94:	b590      	push	{r4, r7, lr}
 1008e96:	b087      	sub	sp, #28
 1008e98:	af02      	add	r7, sp, #8
 1008e9a:	6078      	str	r0, [r7, #4]
 1008e9c:	6039      	str	r1, [r7, #0]
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 1008e9e:	4b15      	ldr	r3, [pc, #84]	; (1008ef4 <prvProcessExpiredTimer+0x60>)
 1008ea0:	681b      	ldr	r3, [r3, #0]
 1008ea2:	68db      	ldr	r3, [r3, #12]
 1008ea4:	68db      	ldr	r3, [r3, #12]
 1008ea6:	60fb      	str	r3, [r7, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
 1008ea8:	68fb      	ldr	r3, [r7, #12]
 1008eaa:	3304      	adds	r3, #4
 1008eac:	4618      	mov	r0, r3
 1008eae:	4b12      	ldr	r3, [pc, #72]	; (1008ef8 <prvProcessExpiredTimer+0x64>)
 1008eb0:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 1008eb2:	68fb      	ldr	r3, [r7, #12]
 1008eb4:	69db      	ldr	r3, [r3, #28]
 1008eb6:	2b01      	cmp	r3, #1
 1008eb8:	d114      	bne.n	1008ee4 <prvProcessExpiredTimer+0x50>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 1008eba:	68fb      	ldr	r3, [r7, #12]
 1008ebc:	699a      	ldr	r2, [r3, #24]
 1008ebe:	687b      	ldr	r3, [r7, #4]
 1008ec0:	18d1      	adds	r1, r2, r3
 1008ec2:	687b      	ldr	r3, [r7, #4]
 1008ec4:	683a      	ldr	r2, [r7, #0]
 1008ec6:	68f8      	ldr	r0, [r7, #12]
 1008ec8:	4c0c      	ldr	r4, [pc, #48]	; (1008efc <prvProcessExpiredTimer+0x68>)
 1008eca:	47a0      	blx	r4
 1008ecc:	4603      	mov	r3, r0
 1008ece:	2b01      	cmp	r3, #1
 1008ed0:	d108      	bne.n	1008ee4 <prvProcessExpiredTimer+0x50>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 1008ed2:	2300      	movs	r3, #0
 1008ed4:	9300      	str	r3, [sp, #0]
 1008ed6:	2300      	movs	r3, #0
 1008ed8:	687a      	ldr	r2, [r7, #4]
 1008eda:	2100      	movs	r1, #0
 1008edc:	68f8      	ldr	r0, [r7, #12]
 1008ede:	4c08      	ldr	r4, [pc, #32]	; (1008f00 <prvProcessExpiredTimer+0x6c>)
 1008ee0:	47a0      	blx	r4
 1008ee2:	60b8      	str	r0, [r7, #8]
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 1008ee4:	68fb      	ldr	r3, [r7, #12]
 1008ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 1008ee8:	68f8      	ldr	r0, [r7, #12]
 1008eea:	4798      	blx	r3
}
 1008eec:	bf00      	nop
 1008eee:	3714      	adds	r7, #20
 1008ef0:	46bd      	mov	sp, r7
 1008ef2:	bd90      	pop	{r4, r7, pc}
 1008ef4:	20004f2c 	.word	0x20004f2c
 1008ef8:	010073f1 	.word	0x010073f1
 1008efc:	0100904d 	.word	0x0100904d
 1008f00:	01008e09 	.word	0x01008e09

01008f04 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 1008f04:	b580      	push	{r7, lr}
 1008f06:	b084      	sub	sp, #16
 1008f08:	af00      	add	r7, sp, #0
 1008f0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 1008f0c:	f107 0308 	add.w	r3, r7, #8
 1008f10:	4618      	mov	r0, r3
 1008f12:	4b05      	ldr	r3, [pc, #20]	; (1008f28 <prvTimerTask+0x24>)
 1008f14:	4798      	blx	r3
 1008f16:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 1008f18:	68bb      	ldr	r3, [r7, #8]
 1008f1a:	4619      	mov	r1, r3
 1008f1c:	68f8      	ldr	r0, [r7, #12]
 1008f1e:	4b03      	ldr	r3, [pc, #12]	; (1008f2c <prvTimerTask+0x28>)
 1008f20:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 1008f22:	4b03      	ldr	r3, [pc, #12]	; (1008f30 <prvTimerTask+0x2c>)
 1008f24:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 1008f26:	e7f1      	b.n	1008f0c <prvTimerTask+0x8>
 1008f28:	01008fb9 	.word	0x01008fb9
 1008f2c:	01008f35 	.word	0x01008f35
 1008f30:	010090d5 	.word	0x010090d5

01008f34 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
 1008f34:	b580      	push	{r7, lr}
 1008f36:	b084      	sub	sp, #16
 1008f38:	af00      	add	r7, sp, #0
 1008f3a:	6078      	str	r0, [r7, #4]
 1008f3c:	6039      	str	r1, [r7, #0]
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
 1008f3e:	4b17      	ldr	r3, [pc, #92]	; (1008f9c <prvProcessTimerOrBlockTask+0x68>)
 1008f40:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 1008f42:	f107 0308 	add.w	r3, r7, #8
 1008f46:	4618      	mov	r0, r3
 1008f48:	4b15      	ldr	r3, [pc, #84]	; (1008fa0 <prvProcessTimerOrBlockTask+0x6c>)
 1008f4a:	4798      	blx	r3
 1008f4c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 1008f4e:	68bb      	ldr	r3, [r7, #8]
 1008f50:	2b00      	cmp	r3, #0
 1008f52:	d11d      	bne.n	1008f90 <prvProcessTimerOrBlockTask+0x5c>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 1008f54:	683b      	ldr	r3, [r7, #0]
 1008f56:	2b00      	cmp	r3, #0
 1008f58:	d10a      	bne.n	1008f70 <prvProcessTimerOrBlockTask+0x3c>
 1008f5a:	687a      	ldr	r2, [r7, #4]
 1008f5c:	68fb      	ldr	r3, [r7, #12]
 1008f5e:	429a      	cmp	r2, r3
 1008f60:	d806      	bhi.n	1008f70 <prvProcessTimerOrBlockTask+0x3c>
			{
				xTaskResumeAll();
 1008f62:	4b10      	ldr	r3, [pc, #64]	; (1008fa4 <prvProcessTimerOrBlockTask+0x70>)
 1008f64:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 1008f66:	68f9      	ldr	r1, [r7, #12]
 1008f68:	6878      	ldr	r0, [r7, #4]
 1008f6a:	4b0f      	ldr	r3, [pc, #60]	; (1008fa8 <prvProcessTimerOrBlockTask+0x74>)
 1008f6c:	4798      	blx	r3
		else
		{
			xTaskResumeAll();
		}
	}
}
 1008f6e:	e011      	b.n	1008f94 <prvProcessTimerOrBlockTask+0x60>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 1008f70:	4b0e      	ldr	r3, [pc, #56]	; (1008fac <prvProcessTimerOrBlockTask+0x78>)
 1008f72:	6818      	ldr	r0, [r3, #0]
 1008f74:	687a      	ldr	r2, [r7, #4]
 1008f76:	68fb      	ldr	r3, [r7, #12]
 1008f78:	1ad3      	subs	r3, r2, r3
 1008f7a:	4619      	mov	r1, r3
 1008f7c:	4b0c      	ldr	r3, [pc, #48]	; (1008fb0 <prvProcessTimerOrBlockTask+0x7c>)
 1008f7e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
 1008f80:	4b08      	ldr	r3, [pc, #32]	; (1008fa4 <prvProcessTimerOrBlockTask+0x70>)
 1008f82:	4798      	blx	r3
 1008f84:	4603      	mov	r3, r0
 1008f86:	2b00      	cmp	r3, #0
 1008f88:	d104      	bne.n	1008f94 <prvProcessTimerOrBlockTask+0x60>
					portYIELD_WITHIN_API();
 1008f8a:	4b0a      	ldr	r3, [pc, #40]	; (1008fb4 <prvProcessTimerOrBlockTask+0x80>)
 1008f8c:	4798      	blx	r3
}
 1008f8e:	e001      	b.n	1008f94 <prvProcessTimerOrBlockTask+0x60>
			xTaskResumeAll();
 1008f90:	4b04      	ldr	r3, [pc, #16]	; (1008fa4 <prvProcessTimerOrBlockTask+0x70>)
 1008f92:	4798      	blx	r3
}
 1008f94:	bf00      	nop
 1008f96:	3710      	adds	r7, #16
 1008f98:	46bd      	mov	sp, r7
 1008f9a:	bd80      	pop	{r7, pc}
 1008f9c:	0100838d 	.word	0x0100838d
 1008fa0:	01009001 	.word	0x01009001
 1008fa4:	010083a9 	.word	0x010083a9
 1008fa8:	01008e95 	.word	0x01008e95
 1008fac:	20004f34 	.word	0x20004f34
 1008fb0:	01008099 	.word	0x01008099
 1008fb4:	010075b5 	.word	0x010075b5

01008fb8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static portTickType prvGetNextExpireTime( portBASE_TYPE *pxListWasEmpty )
{
 1008fb8:	b480      	push	{r7}
 1008fba:	b085      	sub	sp, #20
 1008fbc:	af00      	add	r7, sp, #0
 1008fbe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 1008fc0:	4b0e      	ldr	r3, [pc, #56]	; (1008ffc <prvGetNextExpireTime+0x44>)
 1008fc2:	681b      	ldr	r3, [r3, #0]
 1008fc4:	681b      	ldr	r3, [r3, #0]
 1008fc6:	2b00      	cmp	r3, #0
 1008fc8:	bf0c      	ite	eq
 1008fca:	2301      	moveq	r3, #1
 1008fcc:	2300      	movne	r3, #0
 1008fce:	b2db      	uxtb	r3, r3
 1008fd0:	461a      	mov	r2, r3
 1008fd2:	687b      	ldr	r3, [r7, #4]
 1008fd4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 1008fd6:	687b      	ldr	r3, [r7, #4]
 1008fd8:	681b      	ldr	r3, [r3, #0]
 1008fda:	2b00      	cmp	r3, #0
 1008fdc:	d105      	bne.n	1008fea <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 1008fde:	4b07      	ldr	r3, [pc, #28]	; (1008ffc <prvGetNextExpireTime+0x44>)
 1008fe0:	681b      	ldr	r3, [r3, #0]
 1008fe2:	68db      	ldr	r3, [r3, #12]
 1008fe4:	681b      	ldr	r3, [r3, #0]
 1008fe6:	60fb      	str	r3, [r7, #12]
 1008fe8:	e001      	b.n	1008fee <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
 1008fea:	2300      	movs	r3, #0
 1008fec:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 1008fee:	68fb      	ldr	r3, [r7, #12]
}
 1008ff0:	4618      	mov	r0, r3
 1008ff2:	3714      	adds	r7, #20
 1008ff4:	46bd      	mov	sp, r7
 1008ff6:	bc80      	pop	{r7}
 1008ff8:	4770      	bx	lr
 1008ffa:	bf00      	nop
 1008ffc:	20004f2c 	.word	0x20004f2c

01009000 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
 1009000:	b580      	push	{r7, lr}
 1009002:	b084      	sub	sp, #16
 1009004:	af00      	add	r7, sp, #0
 1009006:	6078      	str	r0, [r7, #4]
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
 1009008:	4b0d      	ldr	r3, [pc, #52]	; (1009040 <prvSampleTimeNow+0x40>)
 100900a:	4798      	blx	r3
 100900c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 100900e:	4b0d      	ldr	r3, [pc, #52]	; (1009044 <prvSampleTimeNow+0x44>)
 1009010:	681b      	ldr	r3, [r3, #0]
 1009012:	68fa      	ldr	r2, [r7, #12]
 1009014:	429a      	cmp	r2, r3
 1009016:	d208      	bcs.n	100902a <prvSampleTimeNow+0x2a>
	{
		prvSwitchTimerLists( xLastTime );
 1009018:	4b0a      	ldr	r3, [pc, #40]	; (1009044 <prvSampleTimeNow+0x44>)
 100901a:	681b      	ldr	r3, [r3, #0]
 100901c:	4618      	mov	r0, r3
 100901e:	4b0a      	ldr	r3, [pc, #40]	; (1009048 <prvSampleTimeNow+0x48>)
 1009020:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
 1009022:	687b      	ldr	r3, [r7, #4]
 1009024:	2201      	movs	r2, #1
 1009026:	601a      	str	r2, [r3, #0]
 1009028:	e002      	b.n	1009030 <prvSampleTimeNow+0x30>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 100902a:	687b      	ldr	r3, [r7, #4]
 100902c:	2200      	movs	r2, #0
 100902e:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 1009030:	4a04      	ldr	r2, [pc, #16]	; (1009044 <prvSampleTimeNow+0x44>)
 1009032:	68fb      	ldr	r3, [r7, #12]
 1009034:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 1009036:	68fb      	ldr	r3, [r7, #12]
}
 1009038:	4618      	mov	r0, r3
 100903a:	3710      	adds	r7, #16
 100903c:	46bd      	mov	sp, r7
 100903e:	bd80      	pop	{r7, pc}
 1009040:	010084b1 	.word	0x010084b1
 1009044:	20004f38 	.word	0x20004f38
 1009048:	010091c1 	.word	0x010091c1

0100904c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
 100904c:	b580      	push	{r7, lr}
 100904e:	b086      	sub	sp, #24
 1009050:	af00      	add	r7, sp, #0
 1009052:	60f8      	str	r0, [r7, #12]
 1009054:	60b9      	str	r1, [r7, #8]
 1009056:	607a      	str	r2, [r7, #4]
 1009058:	603b      	str	r3, [r7, #0]
portBASE_TYPE xProcessTimerNow = pdFALSE;
 100905a:	2300      	movs	r3, #0
 100905c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 100905e:	68fb      	ldr	r3, [r7, #12]
 1009060:	68ba      	ldr	r2, [r7, #8]
 1009062:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 1009064:	68fb      	ldr	r3, [r7, #12]
 1009066:	68fa      	ldr	r2, [r7, #12]
 1009068:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 100906a:	68ba      	ldr	r2, [r7, #8]
 100906c:	687b      	ldr	r3, [r7, #4]
 100906e:	429a      	cmp	r2, r3
 1009070:	d812      	bhi.n	1009098 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 1009072:	687a      	ldr	r2, [r7, #4]
 1009074:	683b      	ldr	r3, [r7, #0]
 1009076:	1ad2      	subs	r2, r2, r3
 1009078:	68fb      	ldr	r3, [r7, #12]
 100907a:	699b      	ldr	r3, [r3, #24]
 100907c:	429a      	cmp	r2, r3
 100907e:	d302      	bcc.n	1009086 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 1009080:	2301      	movs	r3, #1
 1009082:	617b      	str	r3, [r7, #20]
 1009084:	e01b      	b.n	10090be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 1009086:	4b10      	ldr	r3, [pc, #64]	; (10090c8 <prvInsertTimerInActiveList+0x7c>)
 1009088:	681a      	ldr	r2, [r3, #0]
 100908a:	68fb      	ldr	r3, [r7, #12]
 100908c:	3304      	adds	r3, #4
 100908e:	4619      	mov	r1, r3
 1009090:	4610      	mov	r0, r2
 1009092:	4b0e      	ldr	r3, [pc, #56]	; (10090cc <prvInsertTimerInActiveList+0x80>)
 1009094:	4798      	blx	r3
 1009096:	e012      	b.n	10090be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 1009098:	687a      	ldr	r2, [r7, #4]
 100909a:	683b      	ldr	r3, [r7, #0]
 100909c:	429a      	cmp	r2, r3
 100909e:	d206      	bcs.n	10090ae <prvInsertTimerInActiveList+0x62>
 10090a0:	68ba      	ldr	r2, [r7, #8]
 10090a2:	683b      	ldr	r3, [r7, #0]
 10090a4:	429a      	cmp	r2, r3
 10090a6:	d302      	bcc.n	10090ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 10090a8:	2301      	movs	r3, #1
 10090aa:	617b      	str	r3, [r7, #20]
 10090ac:	e007      	b.n	10090be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 10090ae:	4b08      	ldr	r3, [pc, #32]	; (10090d0 <prvInsertTimerInActiveList+0x84>)
 10090b0:	681a      	ldr	r2, [r3, #0]
 10090b2:	68fb      	ldr	r3, [r7, #12]
 10090b4:	3304      	adds	r3, #4
 10090b6:	4619      	mov	r1, r3
 10090b8:	4610      	mov	r0, r2
 10090ba:	4b04      	ldr	r3, [pc, #16]	; (10090cc <prvInsertTimerInActiveList+0x80>)
 10090bc:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
 10090be:	697b      	ldr	r3, [r7, #20]
}
 10090c0:	4618      	mov	r0, r3
 10090c2:	3718      	adds	r7, #24
 10090c4:	46bd      	mov	sp, r7
 10090c6:	bd80      	pop	{r7, pc}
 10090c8:	20004f30 	.word	0x20004f30
 10090cc:	01007381 	.word	0x01007381
 10090d0:	20004f2c 	.word	0x20004f2c

010090d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 10090d4:	b590      	push	{r4, r7, lr}
 10090d6:	b08b      	sub	sp, #44	; 0x2c
 10090d8:	af02      	add	r7, sp, #8
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 10090da:	1d3b      	adds	r3, r7, #4
 10090dc:	4618      	mov	r0, r3
 10090de:	4b31      	ldr	r3, [pc, #196]	; (10091a4 <prvProcessReceivedCommands+0xd0>)
 10090e0:	4798      	blx	r3
 10090e2:	61f8      	str	r0, [r7, #28]

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 10090e4:	e04f      	b.n	1009186 <prvProcessReceivedCommands+0xb2>
	{
		pxTimer = xMessage.pxTimer;
 10090e6:	693b      	ldr	r3, [r7, #16]
 10090e8:	61bb      	str	r3, [r7, #24]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
 10090ea:	69bb      	ldr	r3, [r7, #24]
 10090ec:	2b00      	cmp	r3, #0
 10090ee:	d008      	beq.n	1009102 <prvProcessReceivedCommands+0x2e>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 10090f0:	69bb      	ldr	r3, [r7, #24]
 10090f2:	695b      	ldr	r3, [r3, #20]
 10090f4:	2b00      	cmp	r3, #0
 10090f6:	d004      	beq.n	1009102 <prvProcessReceivedCommands+0x2e>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
 10090f8:	69bb      	ldr	r3, [r7, #24]
 10090fa:	3304      	adds	r3, #4
 10090fc:	4618      	mov	r0, r3
 10090fe:	4b2a      	ldr	r3, [pc, #168]	; (10091a8 <prvProcessReceivedCommands+0xd4>)
 1009100:	4798      	blx	r3
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
 1009102:	68bb      	ldr	r3, [r7, #8]
 1009104:	2b03      	cmp	r3, #3
 1009106:	d83d      	bhi.n	1009184 <prvProcessReceivedCommands+0xb0>
 1009108:	a201      	add	r2, pc, #4	; (adr r2, 1009110 <prvProcessReceivedCommands+0x3c>)
 100910a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 100910e:	bf00      	nop
 1009110:	01009121 	.word	0x01009121
 1009114:	01009187 	.word	0x01009187
 1009118:	01009163 	.word	0x01009163
 100911c:	0100917d 	.word	0x0100917d
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
 1009120:	68fa      	ldr	r2, [r7, #12]
 1009122:	69bb      	ldr	r3, [r7, #24]
 1009124:	699b      	ldr	r3, [r3, #24]
 1009126:	18d1      	adds	r1, r2, r3
 1009128:	68fb      	ldr	r3, [r7, #12]
 100912a:	69fa      	ldr	r2, [r7, #28]
 100912c:	69b8      	ldr	r0, [r7, #24]
 100912e:	4c1f      	ldr	r4, [pc, #124]	; (10091ac <prvProcessReceivedCommands+0xd8>)
 1009130:	47a0      	blx	r4
 1009132:	4603      	mov	r3, r0
 1009134:	2b01      	cmp	r3, #1
 1009136:	d126      	bne.n	1009186 <prvProcessReceivedCommands+0xb2>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 1009138:	69bb      	ldr	r3, [r7, #24]
 100913a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 100913c:	69b8      	ldr	r0, [r7, #24]
 100913e:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 1009140:	69bb      	ldr	r3, [r7, #24]
 1009142:	69db      	ldr	r3, [r3, #28]
 1009144:	2b01      	cmp	r3, #1
 1009146:	d11e      	bne.n	1009186 <prvProcessReceivedCommands+0xb2>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 1009148:	68fa      	ldr	r2, [r7, #12]
 100914a:	69bb      	ldr	r3, [r7, #24]
 100914c:	699b      	ldr	r3, [r3, #24]
 100914e:	441a      	add	r2, r3
 1009150:	2300      	movs	r3, #0
 1009152:	9300      	str	r3, [sp, #0]
 1009154:	2300      	movs	r3, #0
 1009156:	2100      	movs	r1, #0
 1009158:	69b8      	ldr	r0, [r7, #24]
 100915a:	4c15      	ldr	r4, [pc, #84]	; (10091b0 <prvProcessReceivedCommands+0xdc>)
 100915c:	47a0      	blx	r4
 100915e:	6178      	str	r0, [r7, #20]
						configASSERT( xResult );
						( void ) xResult;
					}
				}
				break;
 1009160:	e011      	b.n	1009186 <prvProcessReceivedCommands+0xb2>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
 1009162:	68fa      	ldr	r2, [r7, #12]
 1009164:	69bb      	ldr	r3, [r7, #24]
 1009166:	619a      	str	r2, [r3, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 1009168:	69bb      	ldr	r3, [r7, #24]
 100916a:	699a      	ldr	r2, [r3, #24]
 100916c:	69fb      	ldr	r3, [r7, #28]
 100916e:	18d1      	adds	r1, r2, r3
 1009170:	69fb      	ldr	r3, [r7, #28]
 1009172:	69fa      	ldr	r2, [r7, #28]
 1009174:	69b8      	ldr	r0, [r7, #24]
 1009176:	4c0d      	ldr	r4, [pc, #52]	; (10091ac <prvProcessReceivedCommands+0xd8>)
 1009178:	47a0      	blx	r4
				break;
 100917a:	e004      	b.n	1009186 <prvProcessReceivedCommands+0xb2>

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
 100917c:	69b8      	ldr	r0, [r7, #24]
 100917e:	4b0d      	ldr	r3, [pc, #52]	; (10091b4 <prvProcessReceivedCommands+0xe0>)
 1009180:	4798      	blx	r3
				break;
 1009182:	e000      	b.n	1009186 <prvProcessReceivedCommands+0xb2>

			default	:
				/* Don't expect to get here. */
				break;
 1009184:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 1009186:	4b0c      	ldr	r3, [pc, #48]	; (10091b8 <prvProcessReceivedCommands+0xe4>)
 1009188:	6818      	ldr	r0, [r3, #0]
 100918a:	f107 0108 	add.w	r1, r7, #8
 100918e:	2300      	movs	r3, #0
 1009190:	2200      	movs	r2, #0
 1009192:	4c0a      	ldr	r4, [pc, #40]	; (10091bc <prvProcessReceivedCommands+0xe8>)
 1009194:	47a0      	blx	r4
 1009196:	4603      	mov	r3, r0
 1009198:	2b00      	cmp	r3, #0
 100919a:	d1a4      	bne.n	10090e6 <prvProcessReceivedCommands+0x12>
		}
	}
}
 100919c:	bf00      	nop
 100919e:	3724      	adds	r7, #36	; 0x24
 10091a0:	46bd      	mov	sp, r7
 10091a2:	bd90      	pop	{r4, r7, pc}
 10091a4:	01009001 	.word	0x01009001
 10091a8:	010073f1 	.word	0x010073f1
 10091ac:	0100904d 	.word	0x0100904d
 10091b0:	01008e09 	.word	0x01008e09
 10091b4:	010077d5 	.word	0x010077d5
 10091b8:	20004f34 	.word	0x20004f34
 10091bc:	01007cd5 	.word	0x01007cd5

010091c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( portTickType xLastTime )
{
 10091c0:	b590      	push	{r4, r7, lr}
 10091c2:	b08b      	sub	sp, #44	; 0x2c
 10091c4:	af02      	add	r7, sp, #8
 10091c6:	6078      	str	r0, [r7, #4]

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 10091c8:	e037      	b.n	100923a <prvSwitchTimerLists+0x7a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 10091ca:	4b25      	ldr	r3, [pc, #148]	; (1009260 <prvSwitchTimerLists+0xa0>)
 10091cc:	681b      	ldr	r3, [r3, #0]
 10091ce:	68db      	ldr	r3, [r3, #12]
 10091d0:	681b      	ldr	r3, [r3, #0]
 10091d2:	61fb      	str	r3, [r7, #28]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 10091d4:	4b22      	ldr	r3, [pc, #136]	; (1009260 <prvSwitchTimerLists+0xa0>)
 10091d6:	681b      	ldr	r3, [r3, #0]
 10091d8:	68db      	ldr	r3, [r3, #12]
 10091da:	68db      	ldr	r3, [r3, #12]
 10091dc:	61bb      	str	r3, [r7, #24]
		uxListRemove( &( pxTimer->xTimerListItem ) );
 10091de:	69bb      	ldr	r3, [r7, #24]
 10091e0:	3304      	adds	r3, #4
 10091e2:	4618      	mov	r0, r3
 10091e4:	4b1f      	ldr	r3, [pc, #124]	; (1009264 <prvSwitchTimerLists+0xa4>)
 10091e6:	4798      	blx	r3

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 10091e8:	69bb      	ldr	r3, [r7, #24]
 10091ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 10091ec:	69b8      	ldr	r0, [r7, #24]
 10091ee:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 10091f0:	69bb      	ldr	r3, [r7, #24]
 10091f2:	69db      	ldr	r3, [r3, #28]
 10091f4:	2b01      	cmp	r3, #1
 10091f6:	d120      	bne.n	100923a <prvSwitchTimerLists+0x7a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 10091f8:	69bb      	ldr	r3, [r7, #24]
 10091fa:	699a      	ldr	r2, [r3, #24]
 10091fc:	69fb      	ldr	r3, [r7, #28]
 10091fe:	4413      	add	r3, r2
 1009200:	617b      	str	r3, [r7, #20]
			if( xReloadTime > xNextExpireTime )
 1009202:	697a      	ldr	r2, [r7, #20]
 1009204:	69fb      	ldr	r3, [r7, #28]
 1009206:	429a      	cmp	r2, r3
 1009208:	d90e      	bls.n	1009228 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 100920a:	69bb      	ldr	r3, [r7, #24]
 100920c:	697a      	ldr	r2, [r7, #20]
 100920e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 1009210:	69bb      	ldr	r3, [r7, #24]
 1009212:	69ba      	ldr	r2, [r7, #24]
 1009214:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 1009216:	4b12      	ldr	r3, [pc, #72]	; (1009260 <prvSwitchTimerLists+0xa0>)
 1009218:	681a      	ldr	r2, [r3, #0]
 100921a:	69bb      	ldr	r3, [r7, #24]
 100921c:	3304      	adds	r3, #4
 100921e:	4619      	mov	r1, r3
 1009220:	4610      	mov	r0, r2
 1009222:	4b11      	ldr	r3, [pc, #68]	; (1009268 <prvSwitchTimerLists+0xa8>)
 1009224:	4798      	blx	r3
 1009226:	e008      	b.n	100923a <prvSwitchTimerLists+0x7a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 1009228:	2300      	movs	r3, #0
 100922a:	9300      	str	r3, [sp, #0]
 100922c:	2300      	movs	r3, #0
 100922e:	69fa      	ldr	r2, [r7, #28]
 1009230:	2100      	movs	r1, #0
 1009232:	69b8      	ldr	r0, [r7, #24]
 1009234:	4c0d      	ldr	r4, [pc, #52]	; (100926c <prvSwitchTimerLists+0xac>)
 1009236:	47a0      	blx	r4
 1009238:	6138      	str	r0, [r7, #16]
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 100923a:	4b09      	ldr	r3, [pc, #36]	; (1009260 <prvSwitchTimerLists+0xa0>)
 100923c:	681b      	ldr	r3, [r3, #0]
 100923e:	681b      	ldr	r3, [r3, #0]
 1009240:	2b00      	cmp	r3, #0
 1009242:	d1c2      	bne.n	10091ca <prvSwitchTimerLists+0xa>
				( void ) xResult;
			}
		}
	}

	pxTemp = pxCurrentTimerList;
 1009244:	4b06      	ldr	r3, [pc, #24]	; (1009260 <prvSwitchTimerLists+0xa0>)
 1009246:	681b      	ldr	r3, [r3, #0]
 1009248:	60fb      	str	r3, [r7, #12]
	pxCurrentTimerList = pxOverflowTimerList;
 100924a:	4b09      	ldr	r3, [pc, #36]	; (1009270 <prvSwitchTimerLists+0xb0>)
 100924c:	681b      	ldr	r3, [r3, #0]
 100924e:	4a04      	ldr	r2, [pc, #16]	; (1009260 <prvSwitchTimerLists+0xa0>)
 1009250:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 1009252:	4a07      	ldr	r2, [pc, #28]	; (1009270 <prvSwitchTimerLists+0xb0>)
 1009254:	68fb      	ldr	r3, [r7, #12]
 1009256:	6013      	str	r3, [r2, #0]
}
 1009258:	bf00      	nop
 100925a:	3724      	adds	r7, #36	; 0x24
 100925c:	46bd      	mov	sp, r7
 100925e:	bd90      	pop	{r4, r7, pc}
 1009260:	20004f2c 	.word	0x20004f2c
 1009264:	010073f1 	.word	0x010073f1
 1009268:	01007381 	.word	0x01007381
 100926c:	01008e09 	.word	0x01008e09
 1009270:	20004f30 	.word	0x20004f30

01009274 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 1009274:	b580      	push	{r7, lr}
 1009276:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 1009278:	4b0e      	ldr	r3, [pc, #56]	; (10092b4 <prvCheckForValidListAndQueue+0x40>)
 100927a:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
 100927c:	4b0e      	ldr	r3, [pc, #56]	; (10092b8 <prvCheckForValidListAndQueue+0x44>)
 100927e:	681b      	ldr	r3, [r3, #0]
 1009280:	2b00      	cmp	r3, #0
 1009282:	d113      	bne.n	10092ac <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
 1009284:	480d      	ldr	r0, [pc, #52]	; (10092bc <prvCheckForValidListAndQueue+0x48>)
 1009286:	4b0e      	ldr	r3, [pc, #56]	; (10092c0 <prvCheckForValidListAndQueue+0x4c>)
 1009288:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
 100928a:	480e      	ldr	r0, [pc, #56]	; (10092c4 <prvCheckForValidListAndQueue+0x50>)
 100928c:	4b0c      	ldr	r3, [pc, #48]	; (10092c0 <prvCheckForValidListAndQueue+0x4c>)
 100928e:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
 1009290:	4b0d      	ldr	r3, [pc, #52]	; (10092c8 <prvCheckForValidListAndQueue+0x54>)
 1009292:	4a0a      	ldr	r2, [pc, #40]	; (10092bc <prvCheckForValidListAndQueue+0x48>)
 1009294:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 1009296:	4b0d      	ldr	r3, [pc, #52]	; (10092cc <prvCheckForValidListAndQueue+0x58>)
 1009298:	4a0a      	ldr	r2, [pc, #40]	; (10092c4 <prvCheckForValidListAndQueue+0x50>)
 100929a:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
 100929c:	2200      	movs	r2, #0
 100929e:	210c      	movs	r1, #12
 10092a0:	2005      	movs	r0, #5
 10092a2:	4b0b      	ldr	r3, [pc, #44]	; (10092d0 <prvCheckForValidListAndQueue+0x5c>)
 10092a4:	4798      	blx	r3
 10092a6:	4602      	mov	r2, r0
 10092a8:	4b03      	ldr	r3, [pc, #12]	; (10092b8 <prvCheckForValidListAndQueue+0x44>)
 10092aa:	601a      	str	r2, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
 10092ac:	4b09      	ldr	r3, [pc, #36]	; (10092d4 <prvCheckForValidListAndQueue+0x60>)
 10092ae:	4798      	blx	r3
}
 10092b0:	bf00      	nop
 10092b2:	bd80      	pop	{r7, pc}
 10092b4:	010075cd 	.word	0x010075cd
 10092b8:	20004f34 	.word	0x20004f34
 10092bc:	20004f04 	.word	0x20004f04
 10092c0:	010072dd 	.word	0x010072dd
 10092c4:	20004f18 	.word	0x20004f18
 10092c8:	20004f2c 	.word	0x20004f2c
 10092cc:	20004f30 	.word	0x20004f30
 10092d0:	01007a09 	.word	0x01007a09
 10092d4:	010075ed 	.word	0x010075ed

010092d8 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 10092d8:	b480      	push	{r7}
 10092da:	b083      	sub	sp, #12
 10092dc:	af00      	add	r7, sp, #0
 10092de:	4603      	mov	r3, r0
 10092e0:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 10092e2:	4908      	ldr	r1, [pc, #32]	; (1009304 <NVIC_EnableIRQ+0x2c>)
 10092e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 10092e8:	095b      	lsrs	r3, r3, #5
 10092ea:	79fa      	ldrb	r2, [r7, #7]
 10092ec:	f002 021f 	and.w	r2, r2, #31
 10092f0:	2001      	movs	r0, #1
 10092f2:	fa00 f202 	lsl.w	r2, r0, r2
 10092f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 10092fa:	bf00      	nop
 10092fc:	370c      	adds	r7, #12
 10092fe:	46bd      	mov	sp, r7
 1009300:	bc80      	pop	{r7}
 1009302:	4770      	bx	lr
 1009304:	e000e100 	.word	0xe000e100

01009308 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 1009308:	b480      	push	{r7}
 100930a:	b083      	sub	sp, #12
 100930c:	af00      	add	r7, sp, #0
 100930e:	4603      	mov	r3, r0
 1009310:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 1009312:	4909      	ldr	r1, [pc, #36]	; (1009338 <NVIC_DisableIRQ+0x30>)
 1009314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 1009318:	095b      	lsrs	r3, r3, #5
 100931a:	79fa      	ldrb	r2, [r7, #7]
 100931c:	f002 021f 	and.w	r2, r2, #31
 1009320:	2001      	movs	r0, #1
 1009322:	fa00 f202 	lsl.w	r2, r0, r2
 1009326:	3320      	adds	r3, #32
 1009328:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 100932c:	bf00      	nop
 100932e:	370c      	adds	r7, #12
 1009330:	46bd      	mov	sp, r7
 1009332:	bc80      	pop	{r7}
 1009334:	4770      	bx	lr
 1009336:	bf00      	nop
 1009338:	e000e100 	.word	0xe000e100

0100933c <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 100933c:	b480      	push	{r7}
 100933e:	b083      	sub	sp, #12
 1009340:	af00      	add	r7, sp, #0
 1009342:	4603      	mov	r3, r0
 1009344:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 1009346:	4909      	ldr	r1, [pc, #36]	; (100936c <NVIC_ClearPendingIRQ+0x30>)
 1009348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 100934c:	095b      	lsrs	r3, r3, #5
 100934e:	79fa      	ldrb	r2, [r7, #7]
 1009350:	f002 021f 	and.w	r2, r2, #31
 1009354:	2001      	movs	r0, #1
 1009356:	fa00 f202 	lsl.w	r2, r0, r2
 100935a:	3360      	adds	r3, #96	; 0x60
 100935c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 1009360:	bf00      	nop
 1009362:	370c      	adds	r7, #12
 1009364:	46bd      	mov	sp, r7
 1009366:	bc80      	pop	{r7}
 1009368:	4770      	bx	lr
 100936a:	bf00      	nop
 100936c:	e000e100 	.word	0xe000e100

01009370 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 1009370:	b480      	push	{r7}
 1009372:	b083      	sub	sp, #12
 1009374:	af00      	add	r7, sp, #0
 1009376:	4603      	mov	r3, r0
 1009378:	6039      	str	r1, [r7, #0]
 100937a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 100937c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 1009380:	2b00      	cmp	r3, #0
 1009382:	da0b      	bge.n	100939c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 1009384:	490d      	ldr	r1, [pc, #52]	; (10093bc <NVIC_SetPriority+0x4c>)
 1009386:	79fb      	ldrb	r3, [r7, #7]
 1009388:	f003 030f 	and.w	r3, r3, #15
 100938c:	3b04      	subs	r3, #4
 100938e:	683a      	ldr	r2, [r7, #0]
 1009390:	b2d2      	uxtb	r2, r2
 1009392:	0112      	lsls	r2, r2, #4
 1009394:	b2d2      	uxtb	r2, r2
 1009396:	440b      	add	r3, r1
 1009398:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 100939a:	e009      	b.n	10093b0 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 100939c:	4908      	ldr	r1, [pc, #32]	; (10093c0 <NVIC_SetPriority+0x50>)
 100939e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 10093a2:	683a      	ldr	r2, [r7, #0]
 10093a4:	b2d2      	uxtb	r2, r2
 10093a6:	0112      	lsls	r2, r2, #4
 10093a8:	b2d2      	uxtb	r2, r2
 10093aa:	440b      	add	r3, r1
 10093ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 10093b0:	bf00      	nop
 10093b2:	370c      	adds	r7, #12
 10093b4:	46bd      	mov	sp, r7
 10093b6:	bc80      	pop	{r7}
 10093b8:	4770      	bx	lr
 10093ba:	bf00      	nop
 10093bc:	e000ed00 	.word	0xe000ed00
 10093c0:	e000e100 	.word	0xe000e100

010093c4 <osc_get_rate>:
{
 10093c4:	b480      	push	{r7}
 10093c6:	b083      	sub	sp, #12
 10093c8:	af00      	add	r7, sp, #0
 10093ca:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
 10093cc:	687b      	ldr	r3, [r7, #4]
 10093ce:	2b07      	cmp	r3, #7
 10093d0:	d825      	bhi.n	100941e <osc_get_rate+0x5a>
 10093d2:	a201      	add	r2, pc, #4	; (adr r2, 10093d8 <osc_get_rate+0x14>)
 10093d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 10093d8:	010093f9 	.word	0x010093f9
 10093dc:	010093ff 	.word	0x010093ff
 10093e0:	01009405 	.word	0x01009405
 10093e4:	0100940b 	.word	0x0100940b
 10093e8:	0100940f 	.word	0x0100940f
 10093ec:	01009413 	.word	0x01009413
 10093f0:	01009417 	.word	0x01009417
 10093f4:	0100941b 	.word	0x0100941b
		return OSC_SLCK_32K_RC_HZ;
 10093f8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 10093fc:	e010      	b.n	1009420 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
 10093fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 1009402:	e00d      	b.n	1009420 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
 1009404:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 1009408:	e00a      	b.n	1009420 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
 100940a:	4b08      	ldr	r3, [pc, #32]	; (100942c <osc_get_rate+0x68>)
 100940c:	e008      	b.n	1009420 <osc_get_rate+0x5c>
		return OSC_MAINCK_16M_RC_HZ;
 100940e:	4b08      	ldr	r3, [pc, #32]	; (1009430 <osc_get_rate+0x6c>)
 1009410:	e006      	b.n	1009420 <osc_get_rate+0x5c>
		return OSC_MAINCK_24M_RC_HZ;
 1009412:	4b08      	ldr	r3, [pc, #32]	; (1009434 <osc_get_rate+0x70>)
 1009414:	e004      	b.n	1009420 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
 1009416:	2300      	movs	r3, #0
 1009418:	e002      	b.n	1009420 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
 100941a:	2300      	movs	r3, #0
 100941c:	e000      	b.n	1009420 <osc_get_rate+0x5c>
	return 0;
 100941e:	2300      	movs	r3, #0
}
 1009420:	4618      	mov	r0, r3
 1009422:	370c      	adds	r7, #12
 1009424:	46bd      	mov	sp, r7
 1009426:	bc80      	pop	{r7}
 1009428:	4770      	bx	lr
 100942a:	bf00      	nop
 100942c:	007a1200 	.word	0x007a1200
 1009430:	00f42400 	.word	0x00f42400
 1009434:	016e3600 	.word	0x016e3600

01009438 <sysclk_get_main_hz>:
{
 1009438:	b580      	push	{r7, lr}
 100943a:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
 100943c:	2001      	movs	r0, #1
 100943e:	4b04      	ldr	r3, [pc, #16]	; (1009450 <sysclk_get_main_hz+0x18>)
 1009440:	4798      	blx	r3
 1009442:	4602      	mov	r2, r0
 1009444:	f640 3372 	movw	r3, #2930	; 0xb72
 1009448:	fb03 f302 	mul.w	r3, r3, r2
}
 100944c:	4618      	mov	r0, r3
 100944e:	bd80      	pop	{r7, pc}
 1009450:	010093c5 	.word	0x010093c5

01009454 <sysclk_get_cpu_hz>:
{
 1009454:	b580      	push	{r7, lr}
 1009456:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
 1009458:	4b02      	ldr	r3, [pc, #8]	; (1009464 <sysclk_get_cpu_hz+0x10>)
 100945a:	4798      	blx	r3
 100945c:	4603      	mov	r3, r0
}
 100945e:	4618      	mov	r0, r3
 1009460:	bd80      	pop	{r7, pc}
 1009462:	bf00      	nop
 1009464:	01009439 	.word	0x01009439

01009468 <sysclk_get_peripheral_hz>:
{
 1009468:	b580      	push	{r7, lr}
 100946a:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
 100946c:	4b02      	ldr	r3, [pc, #8]	; (1009478 <sysclk_get_peripheral_hz+0x10>)
 100946e:	4798      	blx	r3
 1009470:	4603      	mov	r3, r0
}
 1009472:	4618      	mov	r0, r3
 1009474:	bd80      	pop	{r7, pc}
 1009476:	bf00      	nop
 1009478:	01009439 	.word	0x01009439

0100947c <ioport_set_pin_mode>:
{
 100947c:	b480      	push	{r7}
 100947e:	b08d      	sub	sp, #52	; 0x34
 1009480:	af00      	add	r7, sp, #0
 1009482:	6078      	str	r0, [r7, #4]
 1009484:	6039      	str	r1, [r7, #0]
 1009486:	687b      	ldr	r3, [r7, #4]
 1009488:	62fb      	str	r3, [r7, #44]	; 0x2c
 100948a:	683b      	ldr	r3, [r7, #0]
 100948c:	62bb      	str	r3, [r7, #40]	; 0x28
 100948e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 1009490:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
 1009492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 1009494:	095a      	lsrs	r2, r3, #5
 1009496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 1009498:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
 100949a:	6a3b      	ldr	r3, [r7, #32]
 100949c:	f003 031f 	and.w	r3, r3, #31
 10094a0:	2101      	movs	r1, #1
 10094a2:	fa01 f303 	lsl.w	r3, r1, r3
 10094a6:	61fa      	str	r2, [r7, #28]
 10094a8:	61bb      	str	r3, [r7, #24]
 10094aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 10094ac:	617b      	str	r3, [r7, #20]
 10094ae:	69fb      	ldr	r3, [r7, #28]
 10094b0:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
 10094b2:	693b      	ldr	r3, [r7, #16]
 10094b4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 10094b8:	f203 7307 	addw	r3, r3, #1799	; 0x707
 10094bc:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_port_to_base(port);
 10094be:	60fb      	str	r3, [r7, #12]
	if (mode & IOPORT_MODE_PULLUP) {
 10094c0:	697b      	ldr	r3, [r7, #20]
 10094c2:	f003 0308 	and.w	r3, r3, #8
 10094c6:	2b00      	cmp	r3, #0
 10094c8:	d003      	beq.n	10094d2 <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
 10094ca:	68fb      	ldr	r3, [r7, #12]
 10094cc:	69ba      	ldr	r2, [r7, #24]
 10094ce:	665a      	str	r2, [r3, #100]	; 0x64
 10094d0:	e002      	b.n	10094d8 <ioport_set_pin_mode+0x5c>
		base->PIO_PUDR = mask;
 10094d2:	68fb      	ldr	r3, [r7, #12]
 10094d4:	69ba      	ldr	r2, [r7, #24]
 10094d6:	661a      	str	r2, [r3, #96]	; 0x60
	if (mode & IOPORT_MODE_PULLDOWN) {
 10094d8:	697b      	ldr	r3, [r7, #20]
 10094da:	f003 0310 	and.w	r3, r3, #16
 10094de:	2b00      	cmp	r3, #0
 10094e0:	d004      	beq.n	10094ec <ioport_set_pin_mode+0x70>
		base->PIO_PPDER = mask;
 10094e2:	68fb      	ldr	r3, [r7, #12]
 10094e4:	69ba      	ldr	r2, [r7, #24]
 10094e6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 10094ea:	e003      	b.n	10094f4 <ioport_set_pin_mode+0x78>
		base->PIO_PPDDR = mask;
 10094ec:	68fb      	ldr	r3, [r7, #12]
 10094ee:	69ba      	ldr	r2, [r7, #24]
 10094f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	if (mode & IOPORT_MODE_OPEN_DRAIN) {
 10094f4:	697b      	ldr	r3, [r7, #20]
 10094f6:	f003 0320 	and.w	r3, r3, #32
 10094fa:	2b00      	cmp	r3, #0
 10094fc:	d003      	beq.n	1009506 <ioport_set_pin_mode+0x8a>
		base->PIO_MDER = mask;
 10094fe:	68fb      	ldr	r3, [r7, #12]
 1009500:	69ba      	ldr	r2, [r7, #24]
 1009502:	651a      	str	r2, [r3, #80]	; 0x50
 1009504:	e002      	b.n	100950c <ioport_set_pin_mode+0x90>
		base->PIO_MDDR = mask;
 1009506:	68fb      	ldr	r3, [r7, #12]
 1009508:	69ba      	ldr	r2, [r7, #24]
 100950a:	655a      	str	r2, [r3, #84]	; 0x54
	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
 100950c:	697b      	ldr	r3, [r7, #20]
 100950e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 1009512:	2b00      	cmp	r3, #0
 1009514:	d003      	beq.n	100951e <ioport_set_pin_mode+0xa2>
		base->PIO_IFER = mask;
 1009516:	68fb      	ldr	r3, [r7, #12]
 1009518:	69ba      	ldr	r2, [r7, #24]
 100951a:	621a      	str	r2, [r3, #32]
 100951c:	e002      	b.n	1009524 <ioport_set_pin_mode+0xa8>
		base->PIO_IFDR = mask;
 100951e:	68fb      	ldr	r3, [r7, #12]
 1009520:	69ba      	ldr	r2, [r7, #24]
 1009522:	625a      	str	r2, [r3, #36]	; 0x24
	if (mode & IOPORT_MODE_DEBOUNCE) {
 1009524:	697b      	ldr	r3, [r7, #20]
 1009526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 100952a:	2b00      	cmp	r3, #0
 100952c:	d004      	beq.n	1009538 <ioport_set_pin_mode+0xbc>
		base->PIO_IFSCER = mask;
 100952e:	68fb      	ldr	r3, [r7, #12]
 1009530:	69ba      	ldr	r2, [r7, #24]
 1009532:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 1009536:	e003      	b.n	1009540 <ioport_set_pin_mode+0xc4>
		base->PIO_IFSCDR = mask;
 1009538:	68fb      	ldr	r3, [r7, #12]
 100953a:	69ba      	ldr	r2, [r7, #24]
 100953c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if (mode & IOPORT_MODE_MUX_BIT0) {
 1009540:	697b      	ldr	r3, [r7, #20]
 1009542:	f003 0301 	and.w	r3, r3, #1
 1009546:	2b00      	cmp	r3, #0
 1009548:	d006      	beq.n	1009558 <ioport_set_pin_mode+0xdc>
		base->PIO_ABCDSR[0] |= mask;
 100954a:	68fb      	ldr	r3, [r7, #12]
 100954c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 100954e:	69bb      	ldr	r3, [r7, #24]
 1009550:	431a      	orrs	r2, r3
 1009552:	68fb      	ldr	r3, [r7, #12]
 1009554:	671a      	str	r2, [r3, #112]	; 0x70
 1009556:	e006      	b.n	1009566 <ioport_set_pin_mode+0xea>
		base->PIO_ABCDSR[0] &= ~mask;
 1009558:	68fb      	ldr	r3, [r7, #12]
 100955a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 100955c:	69bb      	ldr	r3, [r7, #24]
 100955e:	43db      	mvns	r3, r3
 1009560:	401a      	ands	r2, r3
 1009562:	68fb      	ldr	r3, [r7, #12]
 1009564:	671a      	str	r2, [r3, #112]	; 0x70
	if (mode & IOPORT_MODE_MUX_BIT1) {
 1009566:	697b      	ldr	r3, [r7, #20]
 1009568:	f003 0302 	and.w	r3, r3, #2
 100956c:	2b00      	cmp	r3, #0
 100956e:	d006      	beq.n	100957e <ioport_set_pin_mode+0x102>
		base->PIO_ABCDSR[1] |= mask;
 1009570:	68fb      	ldr	r3, [r7, #12]
 1009572:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 1009574:	69bb      	ldr	r3, [r7, #24]
 1009576:	431a      	orrs	r2, r3
 1009578:	68fb      	ldr	r3, [r7, #12]
 100957a:	675a      	str	r2, [r3, #116]	; 0x74
}
 100957c:	e006      	b.n	100958c <ioport_set_pin_mode+0x110>
		base->PIO_ABCDSR[1] &= ~mask;
 100957e:	68fb      	ldr	r3, [r7, #12]
 1009580:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 1009582:	69bb      	ldr	r3, [r7, #24]
 1009584:	43db      	mvns	r3, r3
 1009586:	401a      	ands	r2, r3
 1009588:	68fb      	ldr	r3, [r7, #12]
 100958a:	675a      	str	r2, [r3, #116]	; 0x74
 100958c:	bf00      	nop
 100958e:	3734      	adds	r7, #52	; 0x34
 1009590:	46bd      	mov	sp, r7
 1009592:	bc80      	pop	{r7}
 1009594:	4770      	bx	lr

01009596 <ioport_set_pin_dir>:
{
 1009596:	b480      	push	{r7}
 1009598:	b08d      	sub	sp, #52	; 0x34
 100959a:	af00      	add	r7, sp, #0
 100959c:	6078      	str	r0, [r7, #4]
 100959e:	460b      	mov	r3, r1
 10095a0:	70fb      	strb	r3, [r7, #3]
 10095a2:	687b      	ldr	r3, [r7, #4]
 10095a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 10095a6:	78fb      	ldrb	r3, [r7, #3]
 10095a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 10095ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 10095ae:	627b      	str	r3, [r7, #36]	; 0x24
 10095b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 10095b2:	623b      	str	r3, [r7, #32]
	return pin >> 5;
 10095b4:	6a3b      	ldr	r3, [r7, #32]
 10095b6:	095b      	lsrs	r3, r3, #5
 10095b8:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
 10095ba:	69fb      	ldr	r3, [r7, #28]
 10095bc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 10095c0:	f203 7307 	addw	r3, r3, #1799	; 0x707
 10095c4:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
 10095c6:	61bb      	str	r3, [r7, #24]
	if (dir == IOPORT_DIR_OUTPUT) {
 10095c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 10095cc:	2b01      	cmp	r3, #1
 10095ce:	d109      	bne.n	10095e4 <ioport_set_pin_dir+0x4e>
 10095d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 10095d2:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
 10095d4:	697b      	ldr	r3, [r7, #20]
 10095d6:	f003 031f 	and.w	r3, r3, #31
 10095da:	2201      	movs	r2, #1
 10095dc:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
 10095de:	69bb      	ldr	r3, [r7, #24]
 10095e0:	611a      	str	r2, [r3, #16]
 10095e2:	e00c      	b.n	10095fe <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
 10095e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 10095e8:	2b00      	cmp	r3, #0
 10095ea:	d108      	bne.n	10095fe <ioport_set_pin_dir+0x68>
 10095ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 10095ee:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
 10095f0:	693b      	ldr	r3, [r7, #16]
 10095f2:	f003 031f 	and.w	r3, r3, #31
 10095f6:	2201      	movs	r2, #1
 10095f8:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
 10095fa:	69bb      	ldr	r3, [r7, #24]
 10095fc:	615a      	str	r2, [r3, #20]
 10095fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 1009600:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
 1009602:	68fb      	ldr	r3, [r7, #12]
 1009604:	f003 031f 	and.w	r3, r3, #31
 1009608:	2201      	movs	r2, #1
 100960a:	409a      	lsls	r2, r3
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
 100960c:	69bb      	ldr	r3, [r7, #24]
 100960e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
 1009612:	bf00      	nop
 1009614:	3734      	adds	r7, #52	; 0x34
 1009616:	46bd      	mov	sp, r7
 1009618:	bc80      	pop	{r7}
 100961a:	4770      	bx	lr

0100961c <ioport_set_pin_level>:
{
 100961c:	b480      	push	{r7}
 100961e:	b08b      	sub	sp, #44	; 0x2c
 1009620:	af00      	add	r7, sp, #0
 1009622:	6078      	str	r0, [r7, #4]
 1009624:	460b      	mov	r3, r1
 1009626:	70fb      	strb	r3, [r7, #3]
 1009628:	687b      	ldr	r3, [r7, #4]
 100962a:	627b      	str	r3, [r7, #36]	; 0x24
 100962c:	78fb      	ldrb	r3, [r7, #3]
 100962e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 1009632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 1009634:	61fb      	str	r3, [r7, #28]
 1009636:	69fb      	ldr	r3, [r7, #28]
 1009638:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
 100963a:	69bb      	ldr	r3, [r7, #24]
 100963c:	095b      	lsrs	r3, r3, #5
 100963e:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
 1009640:	697b      	ldr	r3, [r7, #20]
 1009642:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 1009646:	f203 7307 	addw	r3, r3, #1799	; 0x707
 100964a:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
 100964c:	613b      	str	r3, [r7, #16]
	if (level) {
 100964e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 1009652:	2b00      	cmp	r3, #0
 1009654:	d009      	beq.n	100966a <ioport_set_pin_level+0x4e>
 1009656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 1009658:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
 100965a:	68fb      	ldr	r3, [r7, #12]
 100965c:	f003 031f 	and.w	r3, r3, #31
 1009660:	2201      	movs	r2, #1
 1009662:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
 1009664:	693b      	ldr	r3, [r7, #16]
 1009666:	631a      	str	r2, [r3, #48]	; 0x30
}
 1009668:	e008      	b.n	100967c <ioport_set_pin_level+0x60>
 100966a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 100966c:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
 100966e:	68bb      	ldr	r3, [r7, #8]
 1009670:	f003 031f 	and.w	r3, r3, #31
 1009674:	2201      	movs	r2, #1
 1009676:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
 1009678:	693b      	ldr	r3, [r7, #16]
 100967a:	635a      	str	r2, [r3, #52]	; 0x34
 100967c:	bf00      	nop
 100967e:	372c      	adds	r7, #44	; 0x2c
 1009680:	46bd      	mov	sp, r7
 1009682:	bc80      	pop	{r7}
 1009684:	4770      	bx	lr

01009686 <spi_reset>:
 * \brief Reset SPI and set it to Slave mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
 1009686:	b480      	push	{r7}
 1009688:	b083      	sub	sp, #12
 100968a:	af00      	add	r7, sp, #0
 100968c:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SWRST;
 100968e:	687b      	ldr	r3, [r7, #4]
 1009690:	2280      	movs	r2, #128	; 0x80
 1009692:	601a      	str	r2, [r3, #0]
}
 1009694:	bf00      	nop
 1009696:	370c      	adds	r7, #12
 1009698:	46bd      	mov	sp, r7
 100969a:	bc80      	pop	{r7}
 100969c:	4770      	bx	lr

0100969e <spi_enable>:
 * \brief Enable SPI.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
 100969e:	b480      	push	{r7}
 10096a0:	b083      	sub	sp, #12
 10096a2:	af00      	add	r7, sp, #0
 10096a4:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIEN;
 10096a6:	687b      	ldr	r3, [r7, #4]
 10096a8:	2201      	movs	r2, #1
 10096aa:	601a      	str	r2, [r3, #0]
}
 10096ac:	bf00      	nop
 10096ae:	370c      	adds	r7, #12
 10096b0:	46bd      	mov	sp, r7
 10096b2:	bc80      	pop	{r7}
 10096b4:	4770      	bx	lr

010096b6 <spi_disable>:
 * should check TX_EMPTY before disabling SPI.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
 10096b6:	b480      	push	{r7}
 10096b8:	b083      	sub	sp, #12
 10096ba:	af00      	add	r7, sp, #0
 10096bc:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIDIS;
 10096be:	687b      	ldr	r3, [r7, #4]
 10096c0:	2202      	movs	r2, #2
 10096c2:	601a      	str	r2, [r3, #0]
}
 10096c4:	bf00      	nop
 10096c6:	370c      	adds	r7, #12
 10096c8:	46bd      	mov	sp, r7
 10096ca:	bc80      	pop	{r7}
 10096cc:	4770      	bx	lr

010096ce <spi_set_master_mode>:
 * \brief Set SPI to Master mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
 10096ce:	b480      	push	{r7}
 10096d0:	b083      	sub	sp, #12
 10096d2:	af00      	add	r7, sp, #0
 10096d4:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
 10096d6:	687b      	ldr	r3, [r7, #4]
 10096d8:	685b      	ldr	r3, [r3, #4]
 10096da:	f043 0201 	orr.w	r2, r3, #1
 10096de:	687b      	ldr	r3, [r7, #4]
 10096e0:	605a      	str	r2, [r3, #4]
}
 10096e2:	bf00      	nop
 10096e4:	370c      	adds	r7, #12
 10096e6:	46bd      	mov	sp, r7
 10096e8:	bc80      	pop	{r7}
 10096ea:	4770      	bx	lr

010096ec <spi_set_fixed_peripheral_select>:
 *  Peripheral Chip Select is controlled by SPI_MR.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_fixed_peripheral_select(Spi *p_spi)
{
 10096ec:	b480      	push	{r7}
 10096ee:	b083      	sub	sp, #12
 10096f0:	af00      	add	r7, sp, #0
 10096f2:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_PS);
 10096f4:	687b      	ldr	r3, [r7, #4]
 10096f6:	685b      	ldr	r3, [r3, #4]
 10096f8:	f023 0202 	bic.w	r2, r3, #2
 10096fc:	687b      	ldr	r3, [r7, #4]
 10096fe:	605a      	str	r2, [r3, #4]
}
 1009700:	bf00      	nop
 1009702:	370c      	adds	r7, #12
 1009704:	46bd      	mov	sp, r7
 1009706:	bc80      	pop	{r7}
 1009708:	4770      	bx	lr

0100970a <spi_disable_mode_fault_detect>:
 * \brief Disable Mode Fault Detection.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
 100970a:	b480      	push	{r7}
 100970c:	b083      	sub	sp, #12
 100970e:	af00      	add	r7, sp, #0
 1009710:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
 1009712:	687b      	ldr	r3, [r7, #4]
 1009714:	685b      	ldr	r3, [r3, #4]
 1009716:	f043 0210 	orr.w	r2, r3, #16
 100971a:	687b      	ldr	r3, [r7, #4]
 100971c:	605a      	str	r2, [r3, #4]
}
 100971e:	bf00      	nop
 1009720:	370c      	adds	r7, #12
 1009722:	46bd      	mov	sp, r7
 1009724:	bc80      	pop	{r7}
 1009726:	4770      	bx	lr

01009728 <spi_read_status>:
 * \param p_spi Pointer to an SPI instance.
 *
 * \return SPI status register value.
 */
static inline uint32_t spi_read_status(Spi *p_spi)
{
 1009728:	b480      	push	{r7}
 100972a:	b083      	sub	sp, #12
 100972c:	af00      	add	r7, sp, #0
 100972e:	6078      	str	r0, [r7, #4]
	return p_spi->SPI_SR;
 1009730:	687b      	ldr	r3, [r7, #4]
 1009732:	691b      	ldr	r3, [r3, #16]
}
 1009734:	4618      	mov	r0, r3
 1009736:	370c      	adds	r7, #12
 1009738:	46bd      	mov	sp, r7
 100973a:	bc80      	pop	{r7}
 100973c:	4770      	bx	lr

0100973e <spi_get_pdc_base>:
 * \param p_spi Pointer to an SPI instance.
 *
 * \return PDC registers base for PDC driver to access.
 */
static inline Pdc *spi_get_pdc_base(Spi *p_spi)
{
 100973e:	b480      	push	{r7}
 1009740:	b083      	sub	sp, #12
 1009742:	af00      	add	r7, sp, #0
 1009744:	6078      	str	r0, [r7, #4]
	return (Pdc *)&(p_spi->SPI_RPR);
 1009746:	687b      	ldr	r3, [r7, #4]
 1009748:	f503 7380 	add.w	r3, r3, #256	; 0x100
}
 100974c:	4618      	mov	r0, r3
 100974e:	370c      	adds	r7, #12
 1009750:	46bd      	mov	sp, r7
 1009752:	bc80      	pop	{r7}
 1009754:	4770      	bx	lr
	...

01009758 <hal_plc_int_handler>:
 * \param ul_id     Identifier
 * \param ul_mask   Mask
 *
 */
static void hal_plc_int_handler(uint32_t ul_id, uint32_t ul_mask)
{
 1009758:	b580      	push	{r7, lr}
 100975a:	b082      	sub	sp, #8
 100975c:	af00      	add	r7, sp, #0
 100975e:	6078      	str	r0, [r7, #4]
 1009760:	6039      	str	r1, [r7, #0]
	UNUSED(ul_id);
	UNUSED(ul_mask);
	if (plc_handler != NULL) {
 1009762:	4b07      	ldr	r3, [pc, #28]	; (1009780 <hal_plc_int_handler+0x28>)
 1009764:	681b      	ldr	r3, [r3, #0]
 1009766:	2b00      	cmp	r3, #0
 1009768:	d002      	beq.n	1009770 <hal_plc_int_handler+0x18>
		plc_handler();
 100976a:	4b05      	ldr	r3, [pc, #20]	; (1009780 <hal_plc_int_handler+0x28>)
 100976c:	681b      	ldr	r3, [r3, #0]
 100976e:	4798      	blx	r3
	}

	/* Delete level interrupt */
	pio_get_interrupt_status(HAL_PLC_INT_PIO);
 1009770:	4804      	ldr	r0, [pc, #16]	; (1009784 <hal_plc_int_handler+0x2c>)
 1009772:	4b05      	ldr	r3, [pc, #20]	; (1009788 <hal_plc_int_handler+0x30>)
 1009774:	4798      	blx	r3
}
 1009776:	bf00      	nop
 1009778:	3708      	adds	r7, #8
 100977a:	46bd      	mov	sp, r7
 100977c:	bd80      	pop	{r7, pc}
 100977e:	bf00      	nop
 1009780:	20005434 	.word	0x20005434
 1009784:	400e0e00 	.word	0x400e0e00
 1009788:	01004617 	.word	0x01004617

0100978c <_plc_if_config>:
 *
 * \note The parameters to this function are device-specific.
 *
 */
static void _plc_if_config(void)
{
 100978c:	b590      	push	{r4, r7, lr}
 100978e:	b083      	sub	sp, #12
 1009790:	af00      	add	r7, sp, #0
	uint32_t ul_cpuhz;
	uint8_t uc_div;

	ul_cpuhz = sysclk_get_peripheral_hz();
 1009792:	4b2c      	ldr	r3, [pc, #176]	; (1009844 <_plc_if_config+0xb8>)
 1009794:	4798      	blx	r3
 1009796:	6038      	str	r0, [r7, #0]
	uc_div = ul_cpuhz / gs_ul_plc_clock;
 1009798:	4b2b      	ldr	r3, [pc, #172]	; (1009848 <_plc_if_config+0xbc>)
 100979a:	681b      	ldr	r3, [r3, #0]
 100979c:	683a      	ldr	r2, [r7, #0]
 100979e:	fbb2 f3f3 	udiv	r3, r2, r3
 10097a2:	71fb      	strb	r3, [r7, #7]

	if (ul_cpuhz % gs_ul_plc_clock) {
 10097a4:	4b28      	ldr	r3, [pc, #160]	; (1009848 <_plc_if_config+0xbc>)
 10097a6:	681a      	ldr	r2, [r3, #0]
 10097a8:	683b      	ldr	r3, [r7, #0]
 10097aa:	fbb3 f1f2 	udiv	r1, r3, r2
 10097ae:	fb02 f201 	mul.w	r2, r2, r1
 10097b2:	1a9b      	subs	r3, r3, r2
 10097b4:	2b00      	cmp	r3, #0
 10097b6:	d002      	beq.n	10097be <_plc_if_config+0x32>
		uc_div++;
 10097b8:	79fb      	ldrb	r3, [r7, #7]
 10097ba:	3301      	adds	r3, #1
 10097bc:	71fb      	strb	r3, [r7, #7]
	}

	/* Enable SPI peripheral. */
	spi_enable_clock(HAL_PLC_SPI_MODULE);
 10097be:	4823      	ldr	r0, [pc, #140]	; (100984c <_plc_if_config+0xc0>)
 10097c0:	4b23      	ldr	r3, [pc, #140]	; (1009850 <_plc_if_config+0xc4>)
 10097c2:	4798      	blx	r3

	/* Reset SPI */
	spi_disable(HAL_PLC_SPI_MODULE);
 10097c4:	4821      	ldr	r0, [pc, #132]	; (100984c <_plc_if_config+0xc0>)
 10097c6:	4b23      	ldr	r3, [pc, #140]	; (1009854 <_plc_if_config+0xc8>)
 10097c8:	4798      	blx	r3
	spi_reset(HAL_PLC_SPI_MODULE);
 10097ca:	4820      	ldr	r0, [pc, #128]	; (100984c <_plc_if_config+0xc0>)
 10097cc:	4b22      	ldr	r3, [pc, #136]	; (1009858 <_plc_if_config+0xcc>)
 10097ce:	4798      	blx	r3

	/* Configure SPI */
	spi_set_master_mode(HAL_PLC_SPI_MODULE);
 10097d0:	481e      	ldr	r0, [pc, #120]	; (100984c <_plc_if_config+0xc0>)
 10097d2:	4b22      	ldr	r3, [pc, #136]	; (100985c <_plc_if_config+0xd0>)
 10097d4:	4798      	blx	r3
	spi_disable_mode_fault_detect(HAL_PLC_SPI_MODULE);
 10097d6:	481d      	ldr	r0, [pc, #116]	; (100984c <_plc_if_config+0xc0>)
 10097d8:	4b21      	ldr	r3, [pc, #132]	; (1009860 <_plc_if_config+0xd4>)
 10097da:	4798      	blx	r3
	spi_set_peripheral_chip_select_value(HAL_PLC_SPI_MODULE, HAL_PLC_PCS);
 10097dc:	210e      	movs	r1, #14
 10097de:	481b      	ldr	r0, [pc, #108]	; (100984c <_plc_if_config+0xc0>)
 10097e0:	4b20      	ldr	r3, [pc, #128]	; (1009864 <_plc_if_config+0xd8>)
 10097e2:	4798      	blx	r3
	spi_set_clock_polarity(HAL_PLC_SPI_MODULE, HAL_PLC_CS, HAL_PLC_POL);
 10097e4:	2200      	movs	r2, #0
 10097e6:	2100      	movs	r1, #0
 10097e8:	4818      	ldr	r0, [pc, #96]	; (100984c <_plc_if_config+0xc0>)
 10097ea:	4b1f      	ldr	r3, [pc, #124]	; (1009868 <_plc_if_config+0xdc>)
 10097ec:	4798      	blx	r3
	spi_set_clock_phase(HAL_PLC_SPI_MODULE, HAL_PLC_CS, HAL_PLC_PHA);
 10097ee:	2201      	movs	r2, #1
 10097f0:	2100      	movs	r1, #0
 10097f2:	4816      	ldr	r0, [pc, #88]	; (100984c <_plc_if_config+0xc0>)
 10097f4:	4b1d      	ldr	r3, [pc, #116]	; (100986c <_plc_if_config+0xe0>)
 10097f6:	4798      	blx	r3
#ifdef HAL_ATPL360_INTERFACE
	spi_set_bits_per_transfer(HAL_PLC_SPI_MODULE, HAL_PLC_CS, SPI_CSR_BITS_16_BIT);
 10097f8:	2280      	movs	r2, #128	; 0x80
 10097fa:	2100      	movs	r1, #0
 10097fc:	4813      	ldr	r0, [pc, #76]	; (100984c <_plc_if_config+0xc0>)
 10097fe:	4b1c      	ldr	r3, [pc, #112]	; (1009870 <_plc_if_config+0xe4>)
 1009800:	4798      	blx	r3
#else
	spi_set_bits_per_transfer(HAL_PLC_SPI_MODULE, HAL_PLC_CS, SPI_CSR_BITS_8_BIT);
#endif
	spi_set_fixed_peripheral_select(HAL_PLC_SPI_MODULE);
 1009802:	4812      	ldr	r0, [pc, #72]	; (100984c <_plc_if_config+0xc0>)
 1009804:	4b1b      	ldr	r3, [pc, #108]	; (1009874 <_plc_if_config+0xe8>)
 1009806:	4798      	blx	r3
	spi_set_baudrate_div(HAL_PLC_SPI_MODULE, HAL_PLC_CS, uc_div);
 1009808:	79fb      	ldrb	r3, [r7, #7]
 100980a:	461a      	mov	r2, r3
 100980c:	2100      	movs	r1, #0
 100980e:	480f      	ldr	r0, [pc, #60]	; (100984c <_plc_if_config+0xc0>)
 1009810:	4b19      	ldr	r3, [pc, #100]	; (1009878 <_plc_if_config+0xec>)
 1009812:	4798      	blx	r3
	spi_set_transfer_delay(HAL_PLC_SPI_MODULE, HAL_PLC_CS, HAL_PLC_DLYBS, HAL_PLC_DLYBCT);
 1009814:	2300      	movs	r3, #0
 1009816:	2201      	movs	r2, #1
 1009818:	2100      	movs	r1, #0
 100981a:	480c      	ldr	r0, [pc, #48]	; (100984c <_plc_if_config+0xc0>)
 100981c:	4c17      	ldr	r4, [pc, #92]	; (100987c <_plc_if_config+0xf0>)
 100981e:	47a0      	blx	r4
	spi_configure_cs_behavior(HAL_PLC_SPI_MODULE, HAL_PLC_CS, SPI_CS_RISE_NO_TX);
 1009820:	2200      	movs	r2, #0
 1009822:	2100      	movs	r1, #0
 1009824:	4809      	ldr	r0, [pc, #36]	; (100984c <_plc_if_config+0xc0>)
 1009826:	4b16      	ldr	r3, [pc, #88]	; (1009880 <_plc_if_config+0xf4>)
 1009828:	4798      	blx	r3

	/* Get board PLC PDC base address and enable receiver and transmitter. */
	g_plc_pdc = spi_get_pdc_base(HAL_PLC_SPI_MODULE);
 100982a:	4808      	ldr	r0, [pc, #32]	; (100984c <_plc_if_config+0xc0>)
 100982c:	4b15      	ldr	r3, [pc, #84]	; (1009884 <_plc_if_config+0xf8>)
 100982e:	4798      	blx	r3
 1009830:	4602      	mov	r2, r0
 1009832:	4b15      	ldr	r3, [pc, #84]	; (1009888 <_plc_if_config+0xfc>)
 1009834:	601a      	str	r2, [r3, #0]
	spi_enable(HAL_PLC_SPI_MODULE);
 1009836:	4805      	ldr	r0, [pc, #20]	; (100984c <_plc_if_config+0xc0>)
 1009838:	4b14      	ldr	r3, [pc, #80]	; (100988c <_plc_if_config+0x100>)
 100983a:	4798      	blx	r3
}
 100983c:	bf00      	nop
 100983e:	370c      	adds	r7, #12
 1009840:	46bd      	mov	sp, r7
 1009842:	bd90      	pop	{r4, r7, pc}
 1009844:	01009469 	.word	0x01009469
 1009848:	200001e8 	.word	0x200001e8
 100984c:	4000c400 	.word	0x4000c400
 1009850:	01004bfd 	.word	0x01004bfd
 1009854:	010096b7 	.word	0x010096b7
 1009858:	01009687 	.word	0x01009687
 100985c:	010096cf 	.word	0x010096cf
 1009860:	0100970b 	.word	0x0100970b
 1009864:	01004cb1 	.word	0x01004cb1
 1009868:	01004ce3 	.word	0x01004ce3
 100986c:	01004d31 	.word	0x01004d31
 1009870:	01004e23 	.word	0x01004e23
 1009874:	010096ed 	.word	0x010096ed
 1009878:	01004e6b 	.word	0x01004e6b
 100987c:	01004ec7 	.word	0x01004ec7
 1009880:	01004d7f 	.word	0x01004d7f
 1009884:	0100973f 	.word	0x0100973f
 1009888:	2000831c 	.word	0x2000831c
 100988c:	0100969f 	.word	0x0100969f

01009890 <hal_plc_reset>:
/**
 * \brief Reset internal PLC Modem.
 *
 */
void hal_plc_reset(void)
{
 1009890:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 1009894:	af00      	add	r7, sp, #0
	delay_ms(1);
	/* Clear RST of modem PLC */
	ioport_set_pin_level(ATPL360_RESET_GPIO, ATPL360_RESET_INACTIVE_LEVEL);
#elif (BOARD == ATPL360AMB) || (BOARD == ATPL360MB) || (BOARD == PL360G55CF_EK)
	/* Enable LDO line */
	ioport_set_pin_level(ATPL360_LDO_EN_GPIO, ATPL360_LDO_EN_ACTIVE_LEVEL);
 1009896:	2101      	movs	r1, #1
 1009898:	201e      	movs	r0, #30
 100989a:	4b3a      	ldr	r3, [pc, #232]	; (1009984 <hal_plc_reset+0xf4>)
 100989c:	4798      	blx	r3
	ioport_set_pin_dir(ATPL360_LDO_EN_GPIO, IOPORT_DIR_OUTPUT);
 100989e:	2101      	movs	r1, #1
 10098a0:	201e      	movs	r0, #30
 10098a2:	4b39      	ldr	r3, [pc, #228]	; (1009988 <hal_plc_reset+0xf8>)
 10098a4:	4798      	blx	r3
	delay_ms(1);
 10098a6:	4b39      	ldr	r3, [pc, #228]	; (100998c <hal_plc_reset+0xfc>)
 10098a8:	4798      	blx	r3
 10098aa:	4603      	mov	r3, r0
 10098ac:	f04f 0400 	mov.w	r4, #0
 10098b0:	f243 61af 	movw	r1, #13999	; 0x36af
 10098b4:	f04f 0200 	mov.w	r2, #0
 10098b8:	eb13 0b01 	adds.w	fp, r3, r1
 10098bc:	eb44 0c02 	adc.w	ip, r4, r2
 10098c0:	4658      	mov	r0, fp
 10098c2:	4661      	mov	r1, ip
 10098c4:	4c32      	ldr	r4, [pc, #200]	; (1009990 <hal_plc_reset+0x100>)
 10098c6:	f243 62b0 	movw	r2, #14000	; 0x36b0
 10098ca:	f04f 0300 	mov.w	r3, #0
 10098ce:	47a0      	blx	r4
 10098d0:	4603      	mov	r3, r0
 10098d2:	460c      	mov	r4, r1
 10098d4:	4618      	mov	r0, r3
 10098d6:	4b2f      	ldr	r3, [pc, #188]	; (1009994 <hal_plc_reset+0x104>)
 10098d8:	4798      	blx	r3
	/* Reset on RST of modem PLC */
	ioport_set_pin_level(ATPL360_RESET_GPIO, ATPL360_RESET_ACTIVE_LEVEL);
 10098da:	2100      	movs	r1, #0
 10098dc:	201d      	movs	r0, #29
 10098de:	4b29      	ldr	r3, [pc, #164]	; (1009984 <hal_plc_reset+0xf4>)
 10098e0:	4798      	blx	r3
	delay_ms(1);
 10098e2:	4b2a      	ldr	r3, [pc, #168]	; (100998c <hal_plc_reset+0xfc>)
 10098e4:	4798      	blx	r3
 10098e6:	4603      	mov	r3, r0
 10098e8:	f04f 0400 	mov.w	r4, #0
 10098ec:	f243 61af 	movw	r1, #13999	; 0x36af
 10098f0:	f04f 0200 	mov.w	r2, #0
 10098f4:	eb13 0b01 	adds.w	fp, r3, r1
 10098f8:	eb44 0c02 	adc.w	ip, r4, r2
 10098fc:	4658      	mov	r0, fp
 10098fe:	4661      	mov	r1, ip
 1009900:	4c23      	ldr	r4, [pc, #140]	; (1009990 <hal_plc_reset+0x100>)
 1009902:	f243 62b0 	movw	r2, #14000	; 0x36b0
 1009906:	f04f 0300 	mov.w	r3, #0
 100990a:	47a0      	blx	r4
 100990c:	4603      	mov	r3, r0
 100990e:	460c      	mov	r4, r1
 1009910:	4618      	mov	r0, r3
 1009912:	4b20      	ldr	r3, [pc, #128]	; (1009994 <hal_plc_reset+0x104>)
 1009914:	4798      	blx	r3
	/* Clear RST of modem PLC */
	ioport_set_pin_level(ATPL360_RESET_GPIO, ATPL360_RESET_INACTIVE_LEVEL);
 1009916:	2101      	movs	r1, #1
 1009918:	201d      	movs	r0, #29
 100991a:	4b1a      	ldr	r3, [pc, #104]	; (1009984 <hal_plc_reset+0xf4>)
 100991c:	4798      	blx	r3
#else
	/* Modify for customer board */;
#endif

	delay_ms(50);
 100991e:	4b1b      	ldr	r3, [pc, #108]	; (100998c <hal_plc_reset+0xfc>)
 1009920:	4798      	blx	r3
 1009922:	4603      	mov	r3, r0
 1009924:	4619      	mov	r1, r3
 1009926:	f04f 0200 	mov.w	r2, #0
 100992a:	460b      	mov	r3, r1
 100992c:	4614      	mov	r4, r2
 100992e:	18db      	adds	r3, r3, r3
 1009930:	eb44 0404 	adc.w	r4, r4, r4
 1009934:	185b      	adds	r3, r3, r1
 1009936:	eb44 0402 	adc.w	r4, r4, r2
 100993a:	00e6      	lsls	r6, r4, #3
 100993c:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 1009940:	00dd      	lsls	r5, r3, #3
 1009942:	462b      	mov	r3, r5
 1009944:	4634      	mov	r4, r6
 1009946:	185b      	adds	r3, r3, r1
 1009948:	eb44 0402 	adc.w	r4, r4, r2
 100994c:	18db      	adds	r3, r3, r3
 100994e:	eb44 0404 	adc.w	r4, r4, r4
 1009952:	4619      	mov	r1, r3
 1009954:	4622      	mov	r2, r4
 1009956:	f243 63af 	movw	r3, #13999	; 0x36af
 100995a:	f04f 0400 	mov.w	r4, #0
 100995e:	18cd      	adds	r5, r1, r3
 1009960:	eb42 0604 	adc.w	r6, r2, r4
 1009964:	4628      	mov	r0, r5
 1009966:	4631      	mov	r1, r6
 1009968:	4c09      	ldr	r4, [pc, #36]	; (1009990 <hal_plc_reset+0x100>)
 100996a:	f243 62b0 	movw	r2, #14000	; 0x36b0
 100996e:	f04f 0300 	mov.w	r3, #0
 1009972:	47a0      	blx	r4
 1009974:	4603      	mov	r3, r0
 1009976:	460c      	mov	r4, r1
 1009978:	4618      	mov	r0, r3
 100997a:	4b06      	ldr	r3, [pc, #24]	; (1009994 <hal_plc_reset+0x104>)
 100997c:	4798      	blx	r3
}
 100997e:	bf00      	nop
 1009980:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 1009984:	0100961d 	.word	0x0100961d
 1009988:	01009597 	.word	0x01009597
 100998c:	01009455 	.word	0x01009455
 1009990:	0100b60d 	.word	0x0100b60d
 1009994:	20000001 	.word	0x20000001

01009998 <hal_plc_init>:
/**
 * \brief Initialize PLC interface
 *
 */
void hal_plc_init(void)
{
 1009998:	b580      	push	{r7, lr}
 100999a:	af00      	add	r7, sp, #0
	/* Init PLC handler */
	plc_handler = NULL;
 100999c:	4b0b      	ldr	r3, [pc, #44]	; (10099cc <hal_plc_init+0x34>)
 100999e:	2200      	movs	r2, #0
 10099a0:	601a      	str	r2, [r3, #0]
	/* signalling handler must be set in the application. */
	plc_tx_signalling_handler = NULL;
 10099a2:	4b0b      	ldr	r3, [pc, #44]	; (10099d0 <hal_plc_init+0x38>)
 10099a4:	2200      	movs	r2, #0
 10099a6:	601a      	str	r2, [r3, #0]
	plc_rx_signalling_handler = NULL;
 10099a8:	4b0a      	ldr	r3, [pc, #40]	; (10099d4 <hal_plc_init+0x3c>)
 10099aa:	2200      	movs	r2, #0
 10099ac:	601a      	str	r2, [r3, #0]

	/* Initialize PLC */
	_plc_if_config();
 10099ae:	4b0a      	ldr	r3, [pc, #40]	; (10099d8 <hal_plc_init+0x40>)
 10099b0:	4798      	blx	r3

	/* plc free */
	suc_plc_is_busy = false;
 10099b2:	4b0a      	ldr	r3, [pc, #40]	; (10099dc <hal_plc_init+0x44>)
 10099b4:	2200      	movs	r2, #0
 10099b6:	701a      	strb	r2, [r3, #0]
	ioport_set_pin_dir(HAL_PLC_RST_GPIO, IOPORT_DIR_OUTPUT);
#elif BOARD == ATPL360ASB
	ioport_set_pin_level(ATPL360_RESET_GPIO, ATPL360_RESET_ACTIVE_LEVEL);
	ioport_set_pin_dir(ATPL360_RESET_GPIO, IOPORT_DIR_OUTPUT);
#elif (BOARD == ATPL360AMB) || (BOARD == ATPL360MB) || (BOARD == PL360G55CF_EK)
	ioport_set_pin_level(ATPL360_RESET_GPIO, ATPL360_RESET_ACTIVE_LEVEL);
 10099b8:	2100      	movs	r1, #0
 10099ba:	201d      	movs	r0, #29
 10099bc:	4b08      	ldr	r3, [pc, #32]	; (10099e0 <hal_plc_init+0x48>)
 10099be:	4798      	blx	r3
	ioport_set_pin_dir(ATPL360_RESET_GPIO, IOPORT_DIR_OUTPUT);
 10099c0:	2101      	movs	r1, #1
 10099c2:	201d      	movs	r0, #29
 10099c4:	4b07      	ldr	r3, [pc, #28]	; (10099e4 <hal_plc_init+0x4c>)
 10099c6:	4798      	blx	r3
#else
	/* Modify for customer board */;
#endif
}
 10099c8:	bf00      	nop
 10099ca:	bd80      	pop	{r7, pc}
 10099cc:	20005434 	.word	0x20005434
 10099d0:	20005438 	.word	0x20005438
 10099d4:	2000543c 	.word	0x2000543c
 10099d8:	0100978d 	.word	0x0100978d
 10099dc:	20005432 	.word	0x20005432
 10099e0:	0100961d 	.word	0x0100961d
 10099e4:	01009597 	.word	0x01009597

010099e8 <hal_plc_set_handler>:

/**
 * \brief Set an interrupt handler for the specified interrput source.
 */
void hal_plc_set_handler(void (*p_handler)(void))
{
 10099e8:	b590      	push	{r4, r7, lr}
 10099ea:	b085      	sub	sp, #20
 10099ec:	af02      	add	r7, sp, #8
 10099ee:	6078      	str	r0, [r7, #4]
	plc_handler = p_handler;
 10099f0:	4a11      	ldr	r2, [pc, #68]	; (1009a38 <hal_plc_set_handler+0x50>)
 10099f2:	687b      	ldr	r3, [r7, #4]
 10099f4:	6013      	str	r3, [r2, #0]

	/* Configure PLC interruption pin */
	ioport_set_pin_mode(HAL_PLC_INT_GPIO, IOPORT_MODE_PULLDOWN);
 10099f6:	2110      	movs	r1, #16
 10099f8:	2000      	movs	r0, #0
 10099fa:	4b10      	ldr	r3, [pc, #64]	; (1009a3c <hal_plc_set_handler+0x54>)
 10099fc:	4798      	blx	r3
	ioport_set_pin_dir(HAL_PLC_INT_GPIO, IOPORT_DIR_INPUT);
 10099fe:	2100      	movs	r1, #0
 1009a00:	2000      	movs	r0, #0
 1009a02:	4b0f      	ldr	r3, [pc, #60]	; (1009a40 <hal_plc_set_handler+0x58>)
 1009a04:	4798      	blx	r3

	/* Configure PLC Interruption */
	pmc_enable_periph_clk(HAL_PLC_INT_ID);
 1009a06:	200b      	movs	r0, #11
 1009a08:	4b0e      	ldr	r3, [pc, #56]	; (1009a44 <hal_plc_set_handler+0x5c>)
 1009a0a:	4798      	blx	r3
	pio_handler_set(HAL_PLC_INT_PIO, HAL_PLC_INT_ID, HAL_PLC_INT_MASK, HAL_PLC_INT_ATTR, hal_plc_int_handler);
 1009a0c:	4b0e      	ldr	r3, [pc, #56]	; (1009a48 <hal_plc_set_handler+0x60>)
 1009a0e:	9300      	str	r3, [sp, #0]
 1009a10:	2312      	movs	r3, #18
 1009a12:	2201      	movs	r2, #1
 1009a14:	210b      	movs	r1, #11
 1009a16:	480d      	ldr	r0, [pc, #52]	; (1009a4c <hal_plc_set_handler+0x64>)
 1009a18:	4c0d      	ldr	r4, [pc, #52]	; (1009a50 <hal_plc_set_handler+0x68>)
 1009a1a:	47a0      	blx	r4

	NVIC_SetPriority(HAL_PLC_INT_IRQn, HAL_PLC_PRIO);
 1009a1c:	210b      	movs	r1, #11
 1009a1e:	200b      	movs	r0, #11
 1009a20:	4b0c      	ldr	r3, [pc, #48]	; (1009a54 <hal_plc_set_handler+0x6c>)
 1009a22:	4798      	blx	r3
	NVIC_ClearPendingIRQ(HAL_PLC_INT_IRQn);
 1009a24:	200b      	movs	r0, #11
 1009a26:	4b0c      	ldr	r3, [pc, #48]	; (1009a58 <hal_plc_set_handler+0x70>)
 1009a28:	4798      	blx	r3
	NVIC_EnableIRQ(HAL_PLC_INT_IRQn);
 1009a2a:	200b      	movs	r0, #11
 1009a2c:	4b0b      	ldr	r3, [pc, #44]	; (1009a5c <hal_plc_set_handler+0x74>)
 1009a2e:	4798      	blx	r3
#ifndef HAL_ATPL360_INTERFACE
	pio_enable_interrupt(HAL_PLC_INT_PIO, HAL_PLC_INT_MASK);
#endif
}
 1009a30:	bf00      	nop
 1009a32:	370c      	adds	r7, #12
 1009a34:	46bd      	mov	sp, r7
 1009a36:	bd90      	pop	{r4, r7, pc}
 1009a38:	20005434 	.word	0x20005434
 1009a3c:	0100947d 	.word	0x0100947d
 1009a40:	01009597 	.word	0x01009597
 1009a44:	01004a15 	.word	0x01004a15
 1009a48:	01009759 	.word	0x01009759
 1009a4c:	400e0e00 	.word	0x400e0e00
 1009a50:	010046f9 	.word	0x010046f9
 1009a54:	01009371 	.word	0x01009371
 1009a58:	0100933d 	.word	0x0100933d
 1009a5c:	010092d9 	.word	0x010092d9

01009a60 <hal_plc_send_boot_cmd>:
	}
}

#ifdef HAL_ATPL360_INTERFACE
bool hal_plc_send_boot_cmd(uint16_t us_cmd, uint32_t ul_addr, uint32_t ul_data_len, uint8_t *puc_data_buf, uint8_t *puc_data_read)
{
 1009a60:	b580      	push	{r7, lr}
 1009a62:	b088      	sub	sp, #32
 1009a64:	af00      	add	r7, sp, #0
 1009a66:	60b9      	str	r1, [r7, #8]
 1009a68:	607a      	str	r2, [r7, #4]
 1009a6a:	603b      	str	r3, [r7, #0]
 1009a6c:	4603      	mov	r3, r0
 1009a6e:	81fb      	strh	r3, [r7, #14]
	uint8_t *puc_tx_buf;
	uint32_t ul_spi_busy_cnt;
	uint16_t us_tx_size;

	/* Waiting transfer done*/
	ul_spi_busy_cnt = 0;
 1009a70:	2300      	movs	r3, #0
 1009a72:	61fb      	str	r3, [r7, #28]
	while ((spi_read_status(HAL_PLC_SPI_MODULE) & SPI_SR_RXBUFF) == 0) {
 1009a74:	e008      	b.n	1009a88 <hal_plc_send_boot_cmd+0x28>
		ul_spi_busy_cnt++;
 1009a76:	69fb      	ldr	r3, [r7, #28]
 1009a78:	3301      	adds	r3, #1
 1009a7a:	61fb      	str	r3, [r7, #28]
		if (ul_spi_busy_cnt > 5000000) {
 1009a7c:	69fb      	ldr	r3, [r7, #28]
 1009a7e:	4a3f      	ldr	r2, [pc, #252]	; (1009b7c <hal_plc_send_boot_cmd+0x11c>)
 1009a80:	4293      	cmp	r3, r2
 1009a82:	d901      	bls.n	1009a88 <hal_plc_send_boot_cmd+0x28>
			return false;
 1009a84:	2300      	movs	r3, #0
 1009a86:	e075      	b.n	1009b74 <hal_plc_send_boot_cmd+0x114>
	while ((spi_read_status(HAL_PLC_SPI_MODULE) & SPI_SR_RXBUFF) == 0) {
 1009a88:	483d      	ldr	r0, [pc, #244]	; (1009b80 <hal_plc_send_boot_cmd+0x120>)
 1009a8a:	4b3e      	ldr	r3, [pc, #248]	; (1009b84 <hal_plc_send_boot_cmd+0x124>)
 1009a8c:	4798      	blx	r3
 1009a8e:	4603      	mov	r3, r0
 1009a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 1009a94:	2b00      	cmp	r3, #0
 1009a96:	d0ee      	beq.n	1009a76 <hal_plc_send_boot_cmd+0x16>
		}
	}

	NVIC_DisableIRQ(HAL_PLC_INT_IRQn);
 1009a98:	200b      	movs	r0, #11
 1009a9a:	4b3b      	ldr	r3, [pc, #236]	; (1009b88 <hal_plc_send_boot_cmd+0x128>)
 1009a9c:	4798      	blx	r3

	/* Disable the RX and TX PDC transfer requests */
	pdc_disable_transfer(g_plc_pdc, PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
 1009a9e:	4b3b      	ldr	r3, [pc, #236]	; (1009b8c <hal_plc_send_boot_cmd+0x12c>)
 1009aa0:	681b      	ldr	r3, [r3, #0]
 1009aa2:	f240 2102 	movw	r1, #514	; 0x202
 1009aa6:	4618      	mov	r0, r3
 1009aa8:	4b39      	ldr	r3, [pc, #228]	; (1009b90 <hal_plc_send_boot_cmd+0x130>)
 1009aaa:	4798      	blx	r3

	/* Set 8 bits per transfer */
	spi_set_bits_per_transfer(HAL_PLC_SPI_MODULE, HAL_PLC_CS, SPI_CSR_BITS_8_BIT);
 1009aac:	2200      	movs	r2, #0
 1009aae:	2100      	movs	r1, #0
 1009ab0:	4833      	ldr	r0, [pc, #204]	; (1009b80 <hal_plc_send_boot_cmd+0x120>)
 1009ab2:	4b38      	ldr	r3, [pc, #224]	; (1009b94 <hal_plc_send_boot_cmd+0x134>)
 1009ab4:	4798      	blx	r3

	/* Configure Tx buffer */
	puc_tx_buf = gs_plc_tx_buffer;
 1009ab6:	4b38      	ldr	r3, [pc, #224]	; (1009b98 <hal_plc_send_boot_cmd+0x138>)
 1009ab8:	61bb      	str	r3, [r7, #24]

	memcpy(puc_tx_buf, &ul_addr, sizeof(uint32_t));
 1009aba:	68ba      	ldr	r2, [r7, #8]
 1009abc:	69bb      	ldr	r3, [r7, #24]
 1009abe:	601a      	str	r2, [r3, #0]
	puc_tx_buf +=  sizeof(uint32_t);
 1009ac0:	69bb      	ldr	r3, [r7, #24]
 1009ac2:	3304      	adds	r3, #4
 1009ac4:	61bb      	str	r3, [r7, #24]
	memcpy(puc_tx_buf, &us_cmd, sizeof(uint16_t));
 1009ac6:	89fa      	ldrh	r2, [r7, #14]
 1009ac8:	69bb      	ldr	r3, [r7, #24]
 1009aca:	801a      	strh	r2, [r3, #0]
	puc_tx_buf +=  sizeof(uint16_t);
 1009acc:	69bb      	ldr	r3, [r7, #24]
 1009ace:	3302      	adds	r3, #2
 1009ad0:	61bb      	str	r3, [r7, #24]

	memcpy(puc_tx_buf, puc_data_buf, ul_data_len);
 1009ad2:	687a      	ldr	r2, [r7, #4]
 1009ad4:	6839      	ldr	r1, [r7, #0]
 1009ad6:	69b8      	ldr	r0, [r7, #24]
 1009ad8:	4b30      	ldr	r3, [pc, #192]	; (1009b9c <hal_plc_send_boot_cmd+0x13c>)
 1009ada:	4798      	blx	r3

	puc_tx_buf += ul_data_len;
 1009adc:	69ba      	ldr	r2, [r7, #24]
 1009ade:	687b      	ldr	r3, [r7, #4]
 1009ae0:	4413      	add	r3, r2
 1009ae2:	61bb      	str	r3, [r7, #24]

	us_tx_size = puc_tx_buf - gs_plc_tx_buffer;
 1009ae4:	69bb      	ldr	r3, [r7, #24]
 1009ae6:	4a2c      	ldr	r2, [pc, #176]	; (1009b98 <hal_plc_send_boot_cmd+0x138>)
 1009ae8:	1a9b      	subs	r3, r3, r2
 1009aea:	82fb      	strh	r3, [r7, #22]

	/* Configure DMA channels */
	g_plc_rx_packet.ul_addr = (uint32_t)gs_plc_rx_buffer;
 1009aec:	4a2c      	ldr	r2, [pc, #176]	; (1009ba0 <hal_plc_send_boot_cmd+0x140>)
 1009aee:	4b2d      	ldr	r3, [pc, #180]	; (1009ba4 <hal_plc_send_boot_cmd+0x144>)
 1009af0:	601a      	str	r2, [r3, #0]
	g_plc_rx_packet.ul_size = us_tx_size;
 1009af2:	8afb      	ldrh	r3, [r7, #22]
 1009af4:	4a2b      	ldr	r2, [pc, #172]	; (1009ba4 <hal_plc_send_boot_cmd+0x144>)
 1009af6:	6053      	str	r3, [r2, #4]
	pdc_rx_init(g_plc_pdc, &g_plc_rx_packet, NULL);
 1009af8:	4b24      	ldr	r3, [pc, #144]	; (1009b8c <hal_plc_send_boot_cmd+0x12c>)
 1009afa:	681b      	ldr	r3, [r3, #0]
 1009afc:	2200      	movs	r2, #0
 1009afe:	4929      	ldr	r1, [pc, #164]	; (1009ba4 <hal_plc_send_boot_cmd+0x144>)
 1009b00:	4618      	mov	r0, r3
 1009b02:	4b29      	ldr	r3, [pc, #164]	; (1009ba8 <hal_plc_send_boot_cmd+0x148>)
 1009b04:	4798      	blx	r3

	g_plc_tx_packet.ul_addr = (uint32_t)gs_plc_tx_buffer;
 1009b06:	4a24      	ldr	r2, [pc, #144]	; (1009b98 <hal_plc_send_boot_cmd+0x138>)
 1009b08:	4b28      	ldr	r3, [pc, #160]	; (1009bac <hal_plc_send_boot_cmd+0x14c>)
 1009b0a:	601a      	str	r2, [r3, #0]
	g_plc_tx_packet.ul_size = us_tx_size;
 1009b0c:	8afb      	ldrh	r3, [r7, #22]
 1009b0e:	4a27      	ldr	r2, [pc, #156]	; (1009bac <hal_plc_send_boot_cmd+0x14c>)
 1009b10:	6053      	str	r3, [r2, #4]
	pdc_tx_init(g_plc_pdc, &g_plc_tx_packet, NULL);
 1009b12:	4b1e      	ldr	r3, [pc, #120]	; (1009b8c <hal_plc_send_boot_cmd+0x12c>)
 1009b14:	681b      	ldr	r3, [r3, #0]
 1009b16:	2200      	movs	r2, #0
 1009b18:	4924      	ldr	r1, [pc, #144]	; (1009bac <hal_plc_send_boot_cmd+0x14c>)
 1009b1a:	4618      	mov	r0, r3
 1009b1c:	4b24      	ldr	r3, [pc, #144]	; (1009bb0 <hal_plc_send_boot_cmd+0x150>)
 1009b1e:	4798      	blx	r3

	/* Enable the RX and TX PDC transfer requests */
	pdc_enable_transfer(g_plc_pdc, PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
 1009b20:	4b1a      	ldr	r3, [pc, #104]	; (1009b8c <hal_plc_send_boot_cmd+0x12c>)
 1009b22:	681b      	ldr	r3, [r3, #0]
 1009b24:	f240 1101 	movw	r1, #257	; 0x101
 1009b28:	4618      	mov	r0, r3
 1009b2a:	4b22      	ldr	r3, [pc, #136]	; (1009bb4 <hal_plc_send_boot_cmd+0x154>)
 1009b2c:	4798      	blx	r3

	/* Waiting transfer done and read */
	if (puc_data_read) {
 1009b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 1009b30:	2b00      	cmp	r3, #0
 1009b32:	d01b      	beq.n	1009b6c <hal_plc_send_boot_cmd+0x10c>
		/* while(pdc_read_tx_counter(g_pdc) > 0); */
		ul_spi_busy_cnt = 0;
 1009b34:	2300      	movs	r3, #0
 1009b36:	61fb      	str	r3, [r7, #28]
		while ((spi_read_status(HAL_PLC_SPI_MODULE) & SPI_SR_RXBUFF) == 0) {
 1009b38:	e00b      	b.n	1009b52 <hal_plc_send_boot_cmd+0xf2>
			ul_spi_busy_cnt++;
 1009b3a:	69fb      	ldr	r3, [r7, #28]
 1009b3c:	3301      	adds	r3, #1
 1009b3e:	61fb      	str	r3, [r7, #28]
			if (ul_spi_busy_cnt > 5000000) {
 1009b40:	69fb      	ldr	r3, [r7, #28]
 1009b42:	4a0e      	ldr	r2, [pc, #56]	; (1009b7c <hal_plc_send_boot_cmd+0x11c>)
 1009b44:	4293      	cmp	r3, r2
 1009b46:	d904      	bls.n	1009b52 <hal_plc_send_boot_cmd+0xf2>
				/* Enable PLC interrupt(); */
				NVIC_EnableIRQ(HAL_PLC_INT_IRQn);
 1009b48:	200b      	movs	r0, #11
 1009b4a:	4b1b      	ldr	r3, [pc, #108]	; (1009bb8 <hal_plc_send_boot_cmd+0x158>)
 1009b4c:	4798      	blx	r3
				return false;
 1009b4e:	2300      	movs	r3, #0
 1009b50:	e010      	b.n	1009b74 <hal_plc_send_boot_cmd+0x114>
		while ((spi_read_status(HAL_PLC_SPI_MODULE) & SPI_SR_RXBUFF) == 0) {
 1009b52:	480b      	ldr	r0, [pc, #44]	; (1009b80 <hal_plc_send_boot_cmd+0x120>)
 1009b54:	4b0b      	ldr	r3, [pc, #44]	; (1009b84 <hal_plc_send_boot_cmd+0x124>)
 1009b56:	4798      	blx	r3
 1009b58:	4603      	mov	r3, r0
 1009b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 1009b5e:	2b00      	cmp	r3, #0
 1009b60:	d0eb      	beq.n	1009b3a <hal_plc_send_boot_cmd+0xda>
			}
		}

		memcpy(puc_data_read, &gs_plc_rx_buffer[6], ul_data_len);
 1009b62:	687a      	ldr	r2, [r7, #4]
 1009b64:	4915      	ldr	r1, [pc, #84]	; (1009bbc <hal_plc_send_boot_cmd+0x15c>)
 1009b66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 1009b68:	4b0c      	ldr	r3, [pc, #48]	; (1009b9c <hal_plc_send_boot_cmd+0x13c>)
 1009b6a:	4798      	blx	r3
	}

	/* Enable PLC interrupt(); */
	NVIC_EnableIRQ(HAL_PLC_INT_IRQn);
 1009b6c:	200b      	movs	r0, #11
 1009b6e:	4b12      	ldr	r3, [pc, #72]	; (1009bb8 <hal_plc_send_boot_cmd+0x158>)
 1009b70:	4798      	blx	r3

	return true;
 1009b72:	2301      	movs	r3, #1
}
 1009b74:	4618      	mov	r0, r3
 1009b76:	3720      	adds	r7, #32
 1009b78:	46bd      	mov	sp, r7
 1009b7a:	bd80      	pop	{r7, pc}
 1009b7c:	004c4b40 	.word	0x004c4b40
 1009b80:	4000c400 	.word	0x4000c400
 1009b84:	01009729 	.word	0x01009729
 1009b88:	01009309 	.word	0x01009309
 1009b8c:	2000831c 	.word	0x2000831c
 1009b90:	01004559 	.word	0x01004559
 1009b94:	01004e23 	.word	0x01004e23
 1009b98:	200051b8 	.word	0x200051b8
 1009b9c:	0100c551 	.word	0x0100c551
 1009ba0:	20004f3c 	.word	0x20004f3c
 1009ba4:	20008320 	.word	0x20008320
 1009ba8:	010044f7 	.word	0x010044f7
 1009bac:	20008328 	.word	0x20008328
 1009bb0:	010044b5 	.word	0x010044b5
 1009bb4:	01004539 	.word	0x01004539
 1009bb8:	010092d9 	.word	0x010092d9
 1009bbc:	20004f42 	.word	0x20004f42

01009bc0 <hal_plc_send_wrrd_cmd>:

bool hal_plc_send_wrrd_cmd(uint8_t uc_cmd, void *px_spi_data, void *px_spi_status_info)
{
 1009bc0:	b580      	push	{r7, lr}
 1009bc2:	b08c      	sub	sp, #48	; 0x30
 1009bc4:	af00      	add	r7, sp, #0
 1009bc6:	4603      	mov	r3, r0
 1009bc8:	60b9      	str	r1, [r7, #8]
 1009bca:	607a      	str	r2, [r7, #4]
 1009bcc:	73fb      	strb	r3, [r7, #15]
	uint16_t us_tx_size, us_tx_hdr_size;
	uint16_t us_len_wr_rd;
	spi_data_t *px_data;
	spi_status_info_t *px_status_info;

	px_data = (spi_data_t *)px_spi_data;
 1009bce:	68bb      	ldr	r3, [r7, #8]
 1009bd0:	627b      	str	r3, [r7, #36]	; 0x24
	px_status_info = (spi_status_info_t *)px_spi_status_info;
 1009bd2:	687b      	ldr	r3, [r7, #4]
 1009bd4:	623b      	str	r3, [r7, #32]

	us_len_wr_rd = (((px_data->us_len + 1) / 2) & HAL_PLC_LEN_MASK) | (uc_cmd << HAL_PLC_WR_RD_POS);
 1009bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 1009bd8:	881b      	ldrh	r3, [r3, #0]
 1009bda:	3301      	adds	r3, #1
 1009bdc:	0fda      	lsrs	r2, r3, #31
 1009bde:	4413      	add	r3, r2
 1009be0:	105b      	asrs	r3, r3, #1
 1009be2:	b21b      	sxth	r3, r3
 1009be4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 1009be8:	b21a      	sxth	r2, r3
 1009bea:	7bfb      	ldrb	r3, [r7, #15]
 1009bec:	03db      	lsls	r3, r3, #15
 1009bee:	b21b      	sxth	r3, r3
 1009bf0:	4313      	orrs	r3, r2
 1009bf2:	b21b      	sxth	r3, r3
 1009bf4:	83fb      	strh	r3, [r7, #30]

	/* Check length */
	if (!us_len_wr_rd) {
 1009bf6:	8bfb      	ldrh	r3, [r7, #30]
 1009bf8:	2b00      	cmp	r3, #0
 1009bfa:	d101      	bne.n	1009c00 <hal_plc_send_wrrd_cmd+0x40>
		return false;
 1009bfc:	2300      	movs	r3, #0
 1009bfe:	e0fa      	b.n	1009df6 <hal_plc_send_wrrd_cmd+0x236>
	}

	/* Waiting transfer done while(pdc_read_tx_counter(g_pdc) > 0); */
	ul_spi_busy_cnt = 0;
 1009c00:	2300      	movs	r3, #0
 1009c02:	62fb      	str	r3, [r7, #44]	; 0x2c
	while ((spi_read_status(HAL_PLC_SPI_MODULE) & SPI_SR_RXBUFF) == 0) {
 1009c04:	e008      	b.n	1009c18 <hal_plc_send_wrrd_cmd+0x58>
		ul_spi_busy_cnt++;
 1009c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 1009c08:	3301      	adds	r3, #1
 1009c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (ul_spi_busy_cnt > 5000000) {
 1009c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 1009c0e:	4a7c      	ldr	r2, [pc, #496]	; (1009e00 <hal_plc_send_wrrd_cmd+0x240>)
 1009c10:	4293      	cmp	r3, r2
 1009c12:	d901      	bls.n	1009c18 <hal_plc_send_wrrd_cmd+0x58>
			return false;
 1009c14:	2300      	movs	r3, #0
 1009c16:	e0ee      	b.n	1009df6 <hal_plc_send_wrrd_cmd+0x236>
	while ((spi_read_status(HAL_PLC_SPI_MODULE) & SPI_SR_RXBUFF) == 0) {
 1009c18:	487a      	ldr	r0, [pc, #488]	; (1009e04 <hal_plc_send_wrrd_cmd+0x244>)
 1009c1a:	4b7b      	ldr	r3, [pc, #492]	; (1009e08 <hal_plc_send_wrrd_cmd+0x248>)
 1009c1c:	4798      	blx	r3
 1009c1e:	4603      	mov	r3, r0
 1009c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 1009c24:	2b00      	cmp	r3, #0
 1009c26:	d0ee      	beq.n	1009c06 <hal_plc_send_wrrd_cmd+0x46>
		}
	}

	NVIC_DisableIRQ(HAL_PLC_INT_IRQn);
 1009c28:	200b      	movs	r0, #11
 1009c2a:	4b78      	ldr	r3, [pc, #480]	; (1009e0c <hal_plc_send_wrrd_cmd+0x24c>)
 1009c2c:	4798      	blx	r3

	/* Disable the RX and TX PDC transfer requests */
	pdc_disable_transfer(g_plc_pdc, PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
 1009c2e:	4b78      	ldr	r3, [pc, #480]	; (1009e10 <hal_plc_send_wrrd_cmd+0x250>)
 1009c30:	681b      	ldr	r3, [r3, #0]
 1009c32:	f240 2102 	movw	r1, #514	; 0x202
 1009c36:	4618      	mov	r0, r3
 1009c38:	4b76      	ldr	r3, [pc, #472]	; (1009e14 <hal_plc_send_wrrd_cmd+0x254>)
 1009c3a:	4798      	blx	r3

	/* Set 16 bits per transfer */
	spi_set_bits_per_transfer(HAL_PLC_SPI_MODULE, HAL_PLC_CS, SPI_CSR_BITS_16_BIT);
 1009c3c:	2280      	movs	r2, #128	; 0x80
 1009c3e:	2100      	movs	r1, #0
 1009c40:	4870      	ldr	r0, [pc, #448]	; (1009e04 <hal_plc_send_wrrd_cmd+0x244>)
 1009c42:	4b75      	ldr	r3, [pc, #468]	; (1009e18 <hal_plc_send_wrrd_cmd+0x258>)
 1009c44:	4798      	blx	r3

	/** Configure PPLC Tx buffer **/
	puc_tx_buf = gs_plc_tx_buffer;
 1009c46:	4b75      	ldr	r3, [pc, #468]	; (1009e1c <hal_plc_send_wrrd_cmd+0x25c>)
 1009c48:	61bb      	str	r3, [r7, #24]
	/* Address */
	*puc_tx_buf++ = (uint8_t)(px_data->us_address);
 1009c4a:	69bb      	ldr	r3, [r7, #24]
 1009c4c:	1c5a      	adds	r2, r3, #1
 1009c4e:	61ba      	str	r2, [r7, #24]
 1009c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 1009c52:	8852      	ldrh	r2, [r2, #2]
 1009c54:	b2d2      	uxtb	r2, r2
 1009c56:	701a      	strb	r2, [r3, #0]
	*puc_tx_buf++ = (uint8_t)(px_data->us_address >> 8);
 1009c58:	69bb      	ldr	r3, [r7, #24]
 1009c5a:	1c5a      	adds	r2, r3, #1
 1009c5c:	61ba      	str	r2, [r7, #24]
 1009c5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 1009c60:	8852      	ldrh	r2, [r2, #2]
 1009c62:	0a12      	lsrs	r2, r2, #8
 1009c64:	b292      	uxth	r2, r2
 1009c66:	b2d2      	uxtb	r2, r2
 1009c68:	701a      	strb	r2, [r3, #0]
	/* Length & read/write */
	*puc_tx_buf++ = (uint8_t)(us_len_wr_rd);
 1009c6a:	69bb      	ldr	r3, [r7, #24]
 1009c6c:	1c5a      	adds	r2, r3, #1
 1009c6e:	61ba      	str	r2, [r7, #24]
 1009c70:	8bfa      	ldrh	r2, [r7, #30]
 1009c72:	b2d2      	uxtb	r2, r2
 1009c74:	701a      	strb	r2, [r3, #0]
	*puc_tx_buf++ = (uint8_t)(us_len_wr_rd >> 8);
 1009c76:	69bb      	ldr	r3, [r7, #24]
 1009c78:	1c5a      	adds	r2, r3, #1
 1009c7a:	61ba      	str	r2, [r7, #24]
 1009c7c:	8bfa      	ldrh	r2, [r7, #30]
 1009c7e:	0a12      	lsrs	r2, r2, #8
 1009c80:	b292      	uxth	r2, r2
 1009c82:	b2d2      	uxtb	r2, r2
 1009c84:	701a      	strb	r2, [r3, #0]

	us_tx_hdr_size = puc_tx_buf - gs_plc_tx_buffer;
 1009c86:	69bb      	ldr	r3, [r7, #24]
 1009c88:	4a64      	ldr	r2, [pc, #400]	; (1009e1c <hal_plc_send_wrrd_cmd+0x25c>)
 1009c8a:	1a9b      	subs	r3, r3, r2
 1009c8c:	82fb      	strh	r3, [r7, #22]

	if (uc_cmd == HAL_PLC_CMD_WRITE) {
 1009c8e:	7bfb      	ldrb	r3, [r7, #15]
 1009c90:	2b01      	cmp	r3, #1
 1009c92:	d108      	bne.n	1009ca6 <hal_plc_send_wrrd_cmd+0xe6>
		memcpy(puc_tx_buf, px_data->puc_data_buf, px_data->us_len);
 1009c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 1009c96:	6859      	ldr	r1, [r3, #4]
 1009c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 1009c9a:	881b      	ldrh	r3, [r3, #0]
 1009c9c:	461a      	mov	r2, r3
 1009c9e:	69b8      	ldr	r0, [r7, #24]
 1009ca0:	4b5f      	ldr	r3, [pc, #380]	; (1009e20 <hal_plc_send_wrrd_cmd+0x260>)
 1009ca2:	4798      	blx	r3
 1009ca4:	e006      	b.n	1009cb4 <hal_plc_send_wrrd_cmd+0xf4>
	} else {
		memset(puc_tx_buf, 0, px_data->us_len);
 1009ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 1009ca8:	881b      	ldrh	r3, [r3, #0]
 1009caa:	461a      	mov	r2, r3
 1009cac:	2100      	movs	r1, #0
 1009cae:	69b8      	ldr	r0, [r7, #24]
 1009cb0:	4b5c      	ldr	r3, [pc, #368]	; (1009e24 <hal_plc_send_wrrd_cmd+0x264>)
 1009cb2:	4798      	blx	r3
	}

	puc_tx_buf += px_data->us_len;
 1009cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 1009cb6:	881b      	ldrh	r3, [r3, #0]
 1009cb8:	461a      	mov	r2, r3
 1009cba:	69bb      	ldr	r3, [r7, #24]
 1009cbc:	4413      	add	r3, r2
 1009cbe:	61bb      	str	r3, [r7, #24]

	us_tx_size = puc_tx_buf - gs_plc_tx_buffer;
 1009cc0:	69bb      	ldr	r3, [r7, #24]
 1009cc2:	4a56      	ldr	r2, [pc, #344]	; (1009e1c <hal_plc_send_wrrd_cmd+0x25c>)
 1009cc4:	1a9b      	subs	r3, r3, r2
 1009cc6:	857b      	strh	r3, [r7, #42]	; 0x2a
	if (us_tx_size % 2) {
 1009cc8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 1009cca:	f003 0301 	and.w	r3, r3, #1
 1009cce:	b29b      	uxth	r3, r3
 1009cd0:	2b00      	cmp	r3, #0
 1009cd2:	d007      	beq.n	1009ce4 <hal_plc_send_wrrd_cmd+0x124>
		*puc_tx_buf++ = 0;
 1009cd4:	69bb      	ldr	r3, [r7, #24]
 1009cd6:	1c5a      	adds	r2, r3, #1
 1009cd8:	61ba      	str	r2, [r7, #24]
 1009cda:	2200      	movs	r2, #0
 1009cdc:	701a      	strb	r2, [r3, #0]
		us_tx_size++;
 1009cde:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 1009ce0:	3301      	adds	r3, #1
 1009ce2:	857b      	strh	r3, [r7, #42]	; 0x2a
	}

	/* Configure DMA channels */
	g_plc_rx_packet.ul_addr = (uint32_t)gs_plc_rx_buffer;
 1009ce4:	4a50      	ldr	r2, [pc, #320]	; (1009e28 <hal_plc_send_wrrd_cmd+0x268>)
 1009ce6:	4b51      	ldr	r3, [pc, #324]	; (1009e2c <hal_plc_send_wrrd_cmd+0x26c>)
 1009ce8:	601a      	str	r2, [r3, #0]
	g_plc_rx_packet.ul_size = us_tx_size / 2;
 1009cea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 1009cec:	085b      	lsrs	r3, r3, #1
 1009cee:	b29b      	uxth	r3, r3
 1009cf0:	461a      	mov	r2, r3
 1009cf2:	4b4e      	ldr	r3, [pc, #312]	; (1009e2c <hal_plc_send_wrrd_cmd+0x26c>)
 1009cf4:	605a      	str	r2, [r3, #4]
	pdc_rx_init(g_plc_pdc, &g_plc_rx_packet, NULL);
 1009cf6:	4b46      	ldr	r3, [pc, #280]	; (1009e10 <hal_plc_send_wrrd_cmd+0x250>)
 1009cf8:	681b      	ldr	r3, [r3, #0]
 1009cfa:	2200      	movs	r2, #0
 1009cfc:	494b      	ldr	r1, [pc, #300]	; (1009e2c <hal_plc_send_wrrd_cmd+0x26c>)
 1009cfe:	4618      	mov	r0, r3
 1009d00:	4b4b      	ldr	r3, [pc, #300]	; (1009e30 <hal_plc_send_wrrd_cmd+0x270>)
 1009d02:	4798      	blx	r3

	g_plc_tx_packet.ul_addr = (uint32_t)gs_plc_tx_buffer;
 1009d04:	4a45      	ldr	r2, [pc, #276]	; (1009e1c <hal_plc_send_wrrd_cmd+0x25c>)
 1009d06:	4b4b      	ldr	r3, [pc, #300]	; (1009e34 <hal_plc_send_wrrd_cmd+0x274>)
 1009d08:	601a      	str	r2, [r3, #0]
	g_plc_tx_packet.ul_size = us_tx_size / 2;
 1009d0a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 1009d0c:	085b      	lsrs	r3, r3, #1
 1009d0e:	b29b      	uxth	r3, r3
 1009d10:	461a      	mov	r2, r3
 1009d12:	4b48      	ldr	r3, [pc, #288]	; (1009e34 <hal_plc_send_wrrd_cmd+0x274>)
 1009d14:	605a      	str	r2, [r3, #4]
	pdc_tx_init(g_plc_pdc, &g_plc_tx_packet, NULL);
 1009d16:	4b3e      	ldr	r3, [pc, #248]	; (1009e10 <hal_plc_send_wrrd_cmd+0x250>)
 1009d18:	681b      	ldr	r3, [r3, #0]
 1009d1a:	2200      	movs	r2, #0
 1009d1c:	4945      	ldr	r1, [pc, #276]	; (1009e34 <hal_plc_send_wrrd_cmd+0x274>)
 1009d1e:	4618      	mov	r0, r3
 1009d20:	4b45      	ldr	r3, [pc, #276]	; (1009e38 <hal_plc_send_wrrd_cmd+0x278>)
 1009d22:	4798      	blx	r3

	/* Enable the RX and TX PDC transfer requests */
	pdc_enable_transfer(g_plc_pdc, PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
 1009d24:	4b3a      	ldr	r3, [pc, #232]	; (1009e10 <hal_plc_send_wrrd_cmd+0x250>)
 1009d26:	681b      	ldr	r3, [r3, #0]
 1009d28:	f240 1101 	movw	r1, #257	; 0x101
 1009d2c:	4618      	mov	r0, r3
 1009d2e:	4b43      	ldr	r3, [pc, #268]	; (1009e3c <hal_plc_send_wrrd_cmd+0x27c>)
 1009d30:	4798      	blx	r3

	/* Waiting transfer done*/
	/* while(pdc_read_tx_counter(g_pdc) > 0); */
	ul_spi_busy_cnt = 0;
 1009d32:	2300      	movs	r3, #0
 1009d34:	62fb      	str	r3, [r7, #44]	; 0x2c
	while ((spi_read_status(HAL_PLC_SPI_MODULE) & SPI_SR_RXBUFF) == 0) {
 1009d36:	e00b      	b.n	1009d50 <hal_plc_send_wrrd_cmd+0x190>
		ul_spi_busy_cnt++;
 1009d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 1009d3a:	3301      	adds	r3, #1
 1009d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (ul_spi_busy_cnt > 5000000) {
 1009d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 1009d40:	4a2f      	ldr	r2, [pc, #188]	; (1009e00 <hal_plc_send_wrrd_cmd+0x240>)
 1009d42:	4293      	cmp	r3, r2
 1009d44:	d904      	bls.n	1009d50 <hal_plc_send_wrrd_cmd+0x190>
			/* Enable PLC interrupt(); */
			NVIC_EnableIRQ(HAL_PLC_INT_IRQn);
 1009d46:	200b      	movs	r0, #11
 1009d48:	4b3d      	ldr	r3, [pc, #244]	; (1009e40 <hal_plc_send_wrrd_cmd+0x280>)
 1009d4a:	4798      	blx	r3
			return false;
 1009d4c:	2300      	movs	r3, #0
 1009d4e:	e052      	b.n	1009df6 <hal_plc_send_wrrd_cmd+0x236>
	while ((spi_read_status(HAL_PLC_SPI_MODULE) & SPI_SR_RXBUFF) == 0) {
 1009d50:	482c      	ldr	r0, [pc, #176]	; (1009e04 <hal_plc_send_wrrd_cmd+0x244>)
 1009d52:	4b2d      	ldr	r3, [pc, #180]	; (1009e08 <hal_plc_send_wrrd_cmd+0x248>)
 1009d54:	4798      	blx	r3
 1009d56:	4603      	mov	r3, r0
 1009d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 1009d5c:	2b00      	cmp	r3, #0
 1009d5e:	d0eb      	beq.n	1009d38 <hal_plc_send_wrrd_cmd+0x178>
		}
	}

	if (uc_cmd == HAL_PLC_CMD_READ) {
 1009d60:	7bfb      	ldrb	r3, [r7, #15]
 1009d62:	2b00      	cmp	r3, #0
 1009d64:	d109      	bne.n	1009d7a <hal_plc_send_wrrd_cmd+0x1ba>
		memcpy(px_data->puc_data_buf, &gs_plc_rx_buffer[us_tx_hdr_size], px_data->us_len);
 1009d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 1009d68:	6858      	ldr	r0, [r3, #4]
 1009d6a:	8afb      	ldrh	r3, [r7, #22]
 1009d6c:	4a2e      	ldr	r2, [pc, #184]	; (1009e28 <hal_plc_send_wrrd_cmd+0x268>)
 1009d6e:	1899      	adds	r1, r3, r2
 1009d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 1009d72:	881b      	ldrh	r3, [r3, #0]
 1009d74:	461a      	mov	r2, r3
 1009d76:	4b2a      	ldr	r3, [pc, #168]	; (1009e20 <hal_plc_send_wrrd_cmd+0x260>)
 1009d78:	4798      	blx	r3
	}

	px_status_info->us_header_id = HAL_PLC_GET_ID_HEADER(gs_plc_rx_buffer[0], gs_plc_rx_buffer[1]);
 1009d7a:	4b2b      	ldr	r3, [pc, #172]	; (1009e28 <hal_plc_send_wrrd_cmd+0x268>)
 1009d7c:	785b      	ldrb	r3, [r3, #1]
 1009d7e:	b29b      	uxth	r3, r3
 1009d80:	021b      	lsls	r3, r3, #8
 1009d82:	b29a      	uxth	r2, r3
 1009d84:	4b28      	ldr	r3, [pc, #160]	; (1009e28 <hal_plc_send_wrrd_cmd+0x268>)
 1009d86:	781b      	ldrb	r3, [r3, #0]
 1009d88:	b29b      	uxth	r3, r3
 1009d8a:	4413      	add	r3, r2
 1009d8c:	b29b      	uxth	r3, r3
 1009d8e:	f023 0301 	bic.w	r3, r3, #1
 1009d92:	b29a      	uxth	r2, r3
 1009d94:	6a3b      	ldr	r3, [r7, #32]
 1009d96:	809a      	strh	r2, [r3, #4]
	if (HAL_PLC_CHECK_ID_BOOT_HEADER(px_status_info->us_header_id)) {
 1009d98:	6a3b      	ldr	r3, [r7, #32]
 1009d9a:	889b      	ldrh	r3, [r3, #4]
 1009d9c:	461a      	mov	r2, r3
 1009d9e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 1009da2:	4013      	ands	r3, r2
 1009da4:	f245 6234 	movw	r2, #22068	; 0x5634
 1009da8:	4293      	cmp	r3, r2
 1009daa:	d10e      	bne.n	1009dca <hal_plc_send_wrrd_cmd+0x20a>
		px_status_info->ul_flags = HAL_PLC_GET_FLAGS_FROM_BOOT(gs_plc_rx_buffer[0], gs_plc_rx_buffer[2], gs_plc_rx_buffer[3]);
 1009dac:	4b1e      	ldr	r3, [pc, #120]	; (1009e28 <hal_plc_send_wrrd_cmd+0x268>)
 1009dae:	78db      	ldrb	r3, [r3, #3]
 1009db0:	021b      	lsls	r3, r3, #8
 1009db2:	4a1d      	ldr	r2, [pc, #116]	; (1009e28 <hal_plc_send_wrrd_cmd+0x268>)
 1009db4:	7892      	ldrb	r2, [r2, #2]
 1009db6:	441a      	add	r2, r3
 1009db8:	4b1b      	ldr	r3, [pc, #108]	; (1009e28 <hal_plc_send_wrrd_cmd+0x268>)
 1009dba:	781b      	ldrb	r3, [r3, #0]
 1009dbc:	041b      	lsls	r3, r3, #16
 1009dbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 1009dc2:	441a      	add	r2, r3
 1009dc4:	6a3b      	ldr	r3, [r7, #32]
 1009dc6:	601a      	str	r2, [r3, #0]
 1009dc8:	e011      	b.n	1009dee <hal_plc_send_wrrd_cmd+0x22e>
	} else if (HAL_PLC_CHECK_ID_CORTEX_HEADER(px_status_info->us_header_id)) {
 1009dca:	6a3b      	ldr	r3, [r7, #32]
 1009dcc:	889b      	ldrh	r3, [r3, #4]
 1009dce:	f241 1222 	movw	r2, #4386	; 0x1122
 1009dd2:	4293      	cmp	r3, r2
 1009dd4:	d108      	bne.n	1009de8 <hal_plc_send_wrrd_cmd+0x228>
		px_status_info->ul_flags = HAL_PLC_GET_FLAGS_FROM_CORTEX(gs_plc_rx_buffer[2], gs_plc_rx_buffer[3]);
 1009dd6:	4b14      	ldr	r3, [pc, #80]	; (1009e28 <hal_plc_send_wrrd_cmd+0x268>)
 1009dd8:	78db      	ldrb	r3, [r3, #3]
 1009dda:	021b      	lsls	r3, r3, #8
 1009ddc:	4a12      	ldr	r2, [pc, #72]	; (1009e28 <hal_plc_send_wrrd_cmd+0x268>)
 1009dde:	7892      	ldrb	r2, [r2, #2]
 1009de0:	441a      	add	r2, r3
 1009de2:	6a3b      	ldr	r3, [r7, #32]
 1009de4:	601a      	str	r2, [r3, #0]
 1009de6:	e002      	b.n	1009dee <hal_plc_send_wrrd_cmd+0x22e>
	} else {
		px_status_info->ul_flags = 0;
 1009de8:	6a3b      	ldr	r3, [r7, #32]
 1009dea:	2200      	movs	r2, #0
 1009dec:	601a      	str	r2, [r3, #0]
	}

	/* Enable PLC interrupt(); */
	NVIC_EnableIRQ(HAL_PLC_INT_IRQn);
 1009dee:	200b      	movs	r0, #11
 1009df0:	4b13      	ldr	r3, [pc, #76]	; (1009e40 <hal_plc_send_wrrd_cmd+0x280>)
 1009df2:	4798      	blx	r3

	return true;
 1009df4:	2301      	movs	r3, #1
}
 1009df6:	4618      	mov	r0, r3
 1009df8:	3730      	adds	r7, #48	; 0x30
 1009dfa:	46bd      	mov	sp, r7
 1009dfc:	bd80      	pop	{r7, pc}
 1009dfe:	bf00      	nop
 1009e00:	004c4b40 	.word	0x004c4b40
 1009e04:	4000c400 	.word	0x4000c400
 1009e08:	01009729 	.word	0x01009729
 1009e0c:	01009309 	.word	0x01009309
 1009e10:	2000831c 	.word	0x2000831c
 1009e14:	01004559 	.word	0x01004559
 1009e18:	01004e23 	.word	0x01004e23
 1009e1c:	200051b8 	.word	0x200051b8
 1009e20:	0100c551 	.word	0x0100c551
 1009e24:	0100c685 	.word	0x0100c685
 1009e28:	20004f3c 	.word	0x20004f3c
 1009e2c:	20008320 	.word	0x20008320
 1009e30:	010044f7 	.word	0x010044f7
 1009e34:	20008328 	.word	0x20008328
 1009e38:	010044b5 	.word	0x010044b5
 1009e3c:	01004539 	.word	0x01004539
 1009e40:	010092d9 	.word	0x010092d9

01009e44 <hal_plc_enable_interrupt>:

void hal_plc_enable_interrupt(bool enable)
{
 1009e44:	b580      	push	{r7, lr}
 1009e46:	b082      	sub	sp, #8
 1009e48:	af00      	add	r7, sp, #0
 1009e4a:	4603      	mov	r3, r0
 1009e4c:	71fb      	strb	r3, [r7, #7]
	if (enable) {
 1009e4e:	79fb      	ldrb	r3, [r7, #7]
 1009e50:	2b00      	cmp	r3, #0
 1009e52:	d004      	beq.n	1009e5e <hal_plc_enable_interrupt+0x1a>
		pio_enable_interrupt(HAL_PLC_INT_PIO, HAL_PLC_INT_MASK);
 1009e54:	2101      	movs	r1, #1
 1009e56:	4806      	ldr	r0, [pc, #24]	; (1009e70 <hal_plc_enable_interrupt+0x2c>)
 1009e58:	4b06      	ldr	r3, [pc, #24]	; (1009e74 <hal_plc_enable_interrupt+0x30>)
 1009e5a:	4798      	blx	r3
	} else {
		pio_disable_interrupt(HAL_PLC_INT_PIO, HAL_PLC_INT_MASK);
	}
}
 1009e5c:	e003      	b.n	1009e66 <hal_plc_enable_interrupt+0x22>
		pio_disable_interrupt(HAL_PLC_INT_PIO, HAL_PLC_INT_MASK);
 1009e5e:	2101      	movs	r1, #1
 1009e60:	4803      	ldr	r0, [pc, #12]	; (1009e70 <hal_plc_enable_interrupt+0x2c>)
 1009e62:	4b05      	ldr	r3, [pc, #20]	; (1009e78 <hal_plc_enable_interrupt+0x34>)
 1009e64:	4798      	blx	r3
}
 1009e66:	bf00      	nop
 1009e68:	3708      	adds	r7, #8
 1009e6a:	46bd      	mov	sp, r7
 1009e6c:	bd80      	pop	{r7, pc}
 1009e6e:	bf00      	nop
 1009e70:	400e0e00 	.word	0x400e0e00
 1009e74:	010045e3 	.word	0x010045e3
 1009e78:	010045fd 	.word	0x010045fd
 1009e7c:	00000000 	.word	0x00000000

01009e80 <hal_plc_delay>:

void hal_plc_delay(uint8_t uc_tref, uint32_t ul_delay)
{
 1009e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 1009e82:	b083      	sub	sp, #12
 1009e84:	af00      	add	r7, sp, #0
 1009e86:	4603      	mov	r3, r0
 1009e88:	6039      	str	r1, [r7, #0]
 1009e8a:	71fb      	strb	r3, [r7, #7]
	if (uc_tref == HAL_TREF_SEC) {
 1009e8c:	79fb      	ldrb	r3, [r7, #7]
 1009e8e:	2b00      	cmp	r3, #0
 1009e90:	d145      	bne.n	1009f1e <hal_plc_delay+0x9e>
		delay_s(ul_delay);
 1009e92:	683b      	ldr	r3, [r7, #0]
 1009e94:	2b00      	cmp	r3, #0
 1009e96:	d02a      	beq.n	1009eee <hal_plc_delay+0x6e>
 1009e98:	683b      	ldr	r3, [r7, #0]
 1009e9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 1009e9e:	fb02 f303 	mul.w	r3, r2, r3
 1009ea2:	461d      	mov	r5, r3
 1009ea4:	f04f 0600 	mov.w	r6, #0
 1009ea8:	4b65      	ldr	r3, [pc, #404]	; (100a040 <hal_plc_delay+0x1c0>)
 1009eaa:	4798      	blx	r3
 1009eac:	4603      	mov	r3, r0
 1009eae:	f04f 0400 	mov.w	r4, #0
 1009eb2:	fb03 f106 	mul.w	r1, r3, r6
 1009eb6:	fb05 f204 	mul.w	r2, r5, r4
 1009eba:	440a      	add	r2, r1
 1009ebc:	fba5 3403 	umull	r3, r4, r5, r3
 1009ec0:	4422      	add	r2, r4
 1009ec2:	4614      	mov	r4, r2
 1009ec4:	f243 61af 	movw	r1, #13999	; 0x36af
 1009ec8:	f04f 0200 	mov.w	r2, #0
 1009ecc:	185d      	adds	r5, r3, r1
 1009ece:	eb44 0602 	adc.w	r6, r4, r2
 1009ed2:	4628      	mov	r0, r5
 1009ed4:	4631      	mov	r1, r6
 1009ed6:	4c5b      	ldr	r4, [pc, #364]	; (100a044 <hal_plc_delay+0x1c4>)
 1009ed8:	f243 62b0 	movw	r2, #14000	; 0x36b0
 1009edc:	f04f 0300 	mov.w	r3, #0
 1009ee0:	47a0      	blx	r4
 1009ee2:	4603      	mov	r3, r0
 1009ee4:	460c      	mov	r4, r1
 1009ee6:	4618      	mov	r0, r3
 1009ee8:	4b57      	ldr	r3, [pc, #348]	; (100a048 <hal_plc_delay+0x1c8>)
 1009eea:	4798      	blx	r3
	} else if (uc_tref == HAL_TREF_MS) {
		delay_ms(ul_delay);
	} else if (uc_tref == HAL_TREF_US) {
		delay_us(ul_delay);
	}
}
 1009eec:	e09e      	b.n	100a02c <hal_plc_delay+0x1ac>
		delay_s(ul_delay);
 1009eee:	4b54      	ldr	r3, [pc, #336]	; (100a040 <hal_plc_delay+0x1c0>)
 1009ef0:	4798      	blx	r3
 1009ef2:	4603      	mov	r3, r0
 1009ef4:	f04f 0400 	mov.w	r4, #0
 1009ef8:	a24f      	add	r2, pc, #316	; (adr r2, 100a038 <hal_plc_delay+0x1b8>)
 1009efa:	e9d2 1200 	ldrd	r1, r2, [r2]
 1009efe:	185d      	adds	r5, r3, r1
 1009f00:	eb44 0602 	adc.w	r6, r4, r2
 1009f04:	4628      	mov	r0, r5
 1009f06:	4631      	mov	r1, r6
 1009f08:	4c4e      	ldr	r4, [pc, #312]	; (100a044 <hal_plc_delay+0x1c4>)
 1009f0a:	4a50      	ldr	r2, [pc, #320]	; (100a04c <hal_plc_delay+0x1cc>)
 1009f0c:	f04f 0300 	mov.w	r3, #0
 1009f10:	47a0      	blx	r4
 1009f12:	4603      	mov	r3, r0
 1009f14:	460c      	mov	r4, r1
 1009f16:	4618      	mov	r0, r3
 1009f18:	4b4b      	ldr	r3, [pc, #300]	; (100a048 <hal_plc_delay+0x1c8>)
 1009f1a:	4798      	blx	r3
}
 1009f1c:	e086      	b.n	100a02c <hal_plc_delay+0x1ac>
	} else if (uc_tref == HAL_TREF_MS) {
 1009f1e:	79fb      	ldrb	r3, [r7, #7]
 1009f20:	2b01      	cmp	r3, #1
 1009f22:	d141      	bne.n	1009fa8 <hal_plc_delay+0x128>
		delay_ms(ul_delay);
 1009f24:	683b      	ldr	r3, [r7, #0]
 1009f26:	2b00      	cmp	r3, #0
 1009f28:	d026      	beq.n	1009f78 <hal_plc_delay+0xf8>
 1009f2a:	683b      	ldr	r3, [r7, #0]
 1009f2c:	461d      	mov	r5, r3
 1009f2e:	f04f 0600 	mov.w	r6, #0
 1009f32:	4b43      	ldr	r3, [pc, #268]	; (100a040 <hal_plc_delay+0x1c0>)
 1009f34:	4798      	blx	r3
 1009f36:	4603      	mov	r3, r0
 1009f38:	f04f 0400 	mov.w	r4, #0
 1009f3c:	fb03 f106 	mul.w	r1, r3, r6
 1009f40:	fb05 f204 	mul.w	r2, r5, r4
 1009f44:	440a      	add	r2, r1
 1009f46:	fba5 3403 	umull	r3, r4, r5, r3
 1009f4a:	4422      	add	r2, r4
 1009f4c:	4614      	mov	r4, r2
 1009f4e:	f243 61af 	movw	r1, #13999	; 0x36af
 1009f52:	f04f 0200 	mov.w	r2, #0
 1009f56:	185d      	adds	r5, r3, r1
 1009f58:	eb44 0602 	adc.w	r6, r4, r2
 1009f5c:	4628      	mov	r0, r5
 1009f5e:	4631      	mov	r1, r6
 1009f60:	4c38      	ldr	r4, [pc, #224]	; (100a044 <hal_plc_delay+0x1c4>)
 1009f62:	f243 62b0 	movw	r2, #14000	; 0x36b0
 1009f66:	f04f 0300 	mov.w	r3, #0
 1009f6a:	47a0      	blx	r4
 1009f6c:	4603      	mov	r3, r0
 1009f6e:	460c      	mov	r4, r1
 1009f70:	4618      	mov	r0, r3
 1009f72:	4b35      	ldr	r3, [pc, #212]	; (100a048 <hal_plc_delay+0x1c8>)
 1009f74:	4798      	blx	r3
}
 1009f76:	e059      	b.n	100a02c <hal_plc_delay+0x1ac>
		delay_ms(ul_delay);
 1009f78:	4b31      	ldr	r3, [pc, #196]	; (100a040 <hal_plc_delay+0x1c0>)
 1009f7a:	4798      	blx	r3
 1009f7c:	4603      	mov	r3, r0
 1009f7e:	f04f 0400 	mov.w	r4, #0
 1009f82:	a22d      	add	r2, pc, #180	; (adr r2, 100a038 <hal_plc_delay+0x1b8>)
 1009f84:	e9d2 1200 	ldrd	r1, r2, [r2]
 1009f88:	185d      	adds	r5, r3, r1
 1009f8a:	eb44 0602 	adc.w	r6, r4, r2
 1009f8e:	4628      	mov	r0, r5
 1009f90:	4631      	mov	r1, r6
 1009f92:	4c2c      	ldr	r4, [pc, #176]	; (100a044 <hal_plc_delay+0x1c4>)
 1009f94:	4a2d      	ldr	r2, [pc, #180]	; (100a04c <hal_plc_delay+0x1cc>)
 1009f96:	f04f 0300 	mov.w	r3, #0
 1009f9a:	47a0      	blx	r4
 1009f9c:	4603      	mov	r3, r0
 1009f9e:	460c      	mov	r4, r1
 1009fa0:	4618      	mov	r0, r3
 1009fa2:	4b29      	ldr	r3, [pc, #164]	; (100a048 <hal_plc_delay+0x1c8>)
 1009fa4:	4798      	blx	r3
}
 1009fa6:	e041      	b.n	100a02c <hal_plc_delay+0x1ac>
	} else if (uc_tref == HAL_TREF_US) {
 1009fa8:	79fb      	ldrb	r3, [r7, #7]
 1009faa:	2b02      	cmp	r3, #2
 1009fac:	d13e      	bne.n	100a02c <hal_plc_delay+0x1ac>
		delay_us(ul_delay);
 1009fae:	683b      	ldr	r3, [r7, #0]
 1009fb0:	2b00      	cmp	r3, #0
 1009fb2:	d024      	beq.n	1009ffe <hal_plc_delay+0x17e>
 1009fb4:	683b      	ldr	r3, [r7, #0]
 1009fb6:	461d      	mov	r5, r3
 1009fb8:	f04f 0600 	mov.w	r6, #0
 1009fbc:	4b20      	ldr	r3, [pc, #128]	; (100a040 <hal_plc_delay+0x1c0>)
 1009fbe:	4798      	blx	r3
 1009fc0:	4603      	mov	r3, r0
 1009fc2:	f04f 0400 	mov.w	r4, #0
 1009fc6:	fb03 f106 	mul.w	r1, r3, r6
 1009fca:	fb05 f204 	mul.w	r2, r5, r4
 1009fce:	440a      	add	r2, r1
 1009fd0:	fba5 3403 	umull	r3, r4, r5, r3
 1009fd4:	4422      	add	r2, r4
 1009fd6:	4614      	mov	r4, r2
 1009fd8:	a217      	add	r2, pc, #92	; (adr r2, 100a038 <hal_plc_delay+0x1b8>)
 1009fda:	e9d2 1200 	ldrd	r1, r2, [r2]
 1009fde:	185d      	adds	r5, r3, r1
 1009fe0:	eb44 0602 	adc.w	r6, r4, r2
 1009fe4:	4628      	mov	r0, r5
 1009fe6:	4631      	mov	r1, r6
 1009fe8:	4c16      	ldr	r4, [pc, #88]	; (100a044 <hal_plc_delay+0x1c4>)
 1009fea:	4a18      	ldr	r2, [pc, #96]	; (100a04c <hal_plc_delay+0x1cc>)
 1009fec:	f04f 0300 	mov.w	r3, #0
 1009ff0:	47a0      	blx	r4
 1009ff2:	4603      	mov	r3, r0
 1009ff4:	460c      	mov	r4, r1
 1009ff6:	4618      	mov	r0, r3
 1009ff8:	4b13      	ldr	r3, [pc, #76]	; (100a048 <hal_plc_delay+0x1c8>)
 1009ffa:	4798      	blx	r3
}
 1009ffc:	e016      	b.n	100a02c <hal_plc_delay+0x1ac>
		delay_us(ul_delay);
 1009ffe:	4b10      	ldr	r3, [pc, #64]	; (100a040 <hal_plc_delay+0x1c0>)
 100a000:	4798      	blx	r3
 100a002:	4603      	mov	r3, r0
 100a004:	f04f 0400 	mov.w	r4, #0
 100a008:	a20b      	add	r2, pc, #44	; (adr r2, 100a038 <hal_plc_delay+0x1b8>)
 100a00a:	e9d2 1200 	ldrd	r1, r2, [r2]
 100a00e:	185d      	adds	r5, r3, r1
 100a010:	eb44 0602 	adc.w	r6, r4, r2
 100a014:	4628      	mov	r0, r5
 100a016:	4631      	mov	r1, r6
 100a018:	4c0a      	ldr	r4, [pc, #40]	; (100a044 <hal_plc_delay+0x1c4>)
 100a01a:	4a0c      	ldr	r2, [pc, #48]	; (100a04c <hal_plc_delay+0x1cc>)
 100a01c:	f04f 0300 	mov.w	r3, #0
 100a020:	47a0      	blx	r4
 100a022:	4603      	mov	r3, r0
 100a024:	460c      	mov	r4, r1
 100a026:	4618      	mov	r0, r3
 100a028:	4b07      	ldr	r3, [pc, #28]	; (100a048 <hal_plc_delay+0x1c8>)
 100a02a:	4798      	blx	r3
}
 100a02c:	bf00      	nop
 100a02e:	370c      	adds	r7, #12
 100a030:	46bd      	mov	sp, r7
 100a032:	bdf0      	pop	{r4, r5, r6, r7, pc}
 100a034:	f3af 8000 	nop.w
 100a038:	00d59f7f 	.word	0x00d59f7f
 100a03c:	00000000 	.word	0x00000000
 100a040:	01009455 	.word	0x01009455
 100a044:	0100b60d 	.word	0x0100b60d
 100a048:	20000001 	.word	0x20000001
 100a04c:	00d59f80 	.word	0x00d59f80

0100a050 <hal_uart_open>:
 *
 * \retval true on success.
 * \retval false on failure.
 */
uint8_t hal_uart_open(uint8_t chn, uint32_t bauds)
{
 100a050:	b480      	push	{r7}
 100a052:	b083      	sub	sp, #12
 100a054:	af00      	add	r7, sp, #0
 100a056:	4603      	mov	r3, r0
 100a058:	6039      	str	r1, [r7, #0]
 100a05a:	71fb      	strb	r3, [r7, #7]
#else
	UNUSED(bauds);
#endif

	/* check uart and it is close */
	if (chn >= 2) {
 100a05c:	79fb      	ldrb	r3, [r7, #7]
 100a05e:	2b01      	cmp	r3, #1
 100a060:	d901      	bls.n	100a066 <hal_uart_open+0x16>
		return false;
 100a062:	2300      	movs	r3, #0
 100a064:	e007      	b.n	100a076 <hal_uart_open+0x26>
	}

	if (buart_chn_open[chn]) {
 100a066:	79fb      	ldrb	r3, [r7, #7]
 100a068:	4a05      	ldr	r2, [pc, #20]	; (100a080 <hal_uart_open+0x30>)
 100a06a:	5cd3      	ldrb	r3, [r2, r3]
 100a06c:	2b00      	cmp	r3, #0
 100a06e:	d001      	beq.n	100a074 <hal_uart_open+0x24>
		return false;
 100a070:	2300      	movs	r3, #0
 100a072:	e000      	b.n	100a076 <hal_uart_open+0x26>
	}
	break;
#endif
	
	default:
		return false;
 100a074:	2300      	movs	r3, #0
	}
}
 100a076:	4618      	mov	r0, r3
 100a078:	370c      	adds	r7, #12
 100a07a:	46bd      	mov	sp, r7
 100a07c:	bc80      	pop	{r7}
 100a07e:	4770      	bx	lr
 100a080:	20005440 	.word	0x20005440

0100a084 <hal_uart_read>:
 * \param  len     Number of characters to receive
 *
 * \retval Number of received characters
 */
uint16_t hal_uart_read(uint8_t chn, void *buffer, uint16_t len)
{
 100a084:	b480      	push	{r7}
 100a086:	b083      	sub	sp, #12
 100a088:	af00      	add	r7, sp, #0
 100a08a:	4603      	mov	r3, r0
 100a08c:	6039      	str	r1, [r7, #0]
 100a08e:	71fb      	strb	r3, [r7, #7]
 100a090:	4613      	mov	r3, r2
 100a092:	80bb      	strh	r3, [r7, #4]
	UNUSED(buffer);
	UNUSED(len);
#endif

	/* check uart is open */
	if (!buart_chn_open[chn]) {
 100a094:	79fb      	ldrb	r3, [r7, #7]
 100a096:	4a06      	ldr	r2, [pc, #24]	; (100a0b0 <hal_uart_read+0x2c>)
 100a098:	5cd3      	ldrb	r3, [r2, r3]
 100a09a:	2b00      	cmp	r3, #0
 100a09c:	d101      	bne.n	100a0a2 <hal_uart_read+0x1e>
		return 0;
 100a09e:	2300      	movs	r3, #0
 100a0a0:	e000      	b.n	100a0a4 <hal_uart_read+0x20>

		break;
#endif

	default:
		return 0;
 100a0a2:	2300      	movs	r3, #0
	}
}
 100a0a4:	4618      	mov	r0, r3
 100a0a6:	370c      	adds	r7, #12
 100a0a8:	46bd      	mov	sp, r7
 100a0aa:	bc80      	pop	{r7}
 100a0ac:	4770      	bx	lr
 100a0ae:	bf00      	nop
 100a0b0:	20005440 	.word	0x20005440

0100a0b4 <hal_uart_write>:
 * \param  len     Number of characters to transmit
 *
 * \retval Number of characters sent
 */
uint16_t hal_uart_write(uint8_t chn, const void *buffer, uint16_t len)
{
 100a0b4:	b480      	push	{r7}
 100a0b6:	b083      	sub	sp, #12
 100a0b8:	af00      	add	r7, sp, #0
 100a0ba:	4603      	mov	r3, r0
 100a0bc:	6039      	str	r1, [r7, #0]
 100a0be:	71fb      	strb	r3, [r7, #7]
 100a0c0:	4613      	mov	r3, r2
 100a0c2:	80bb      	strh	r3, [r7, #4]
	UNUSED(buffer);
	UNUSED(len);
#endif

	/* check uart is open */
	if (!buart_chn_open[chn]) {
 100a0c4:	79fb      	ldrb	r3, [r7, #7]
 100a0c6:	4a06      	ldr	r2, [pc, #24]	; (100a0e0 <hal_uart_write+0x2c>)
 100a0c8:	5cd3      	ldrb	r3, [r2, r3]
 100a0ca:	2b00      	cmp	r3, #0
 100a0cc:	d101      	bne.n	100a0d2 <hal_uart_write+0x1e>
		return 0;
 100a0ce:	2300      	movs	r3, #0
 100a0d0:	e000      	b.n	100a0d4 <hal_uart_write+0x20>
		pdc_tx_init(g_p_uart_pdc0, &g_st_uart_tx_packet0, NULL);
		return len;
#endif

	default:
		return 0;
 100a0d2:	2300      	movs	r3, #0
	}
}
 100a0d4:	4618      	mov	r0, r3
 100a0d6:	370c      	adds	r7, #12
 100a0d8:	46bd      	mov	sp, r7
 100a0da:	bc80      	pop	{r7}
 100a0dc:	4770      	bx	lr
 100a0de:	bf00      	nop
 100a0e0:	20005440 	.word	0x20005440

0100a0e4 <hal_uart_is_free>:
 * \param  chn   Communication channel [0, 1]
 *
 * \retval true is UART is free to tx, false in otherwise
 */
bool hal_uart_is_free(uint8_t chn)
{
 100a0e4:	b480      	push	{r7}
 100a0e6:	b083      	sub	sp, #12
 100a0e8:	af00      	add	r7, sp, #0
 100a0ea:	4603      	mov	r3, r0
 100a0ec:	71fb      	strb	r3, [r7, #7]
	/* check uart is open */
	if (!buart_chn_open[chn]) {
 100a0ee:	79fb      	ldrb	r3, [r7, #7]
 100a0f0:	4a05      	ldr	r2, [pc, #20]	; (100a108 <hal_uart_is_free+0x24>)
 100a0f2:	5cd3      	ldrb	r3, [r2, r3]
 100a0f4:	2b00      	cmp	r3, #0
 100a0f6:	d101      	bne.n	100a0fc <hal_uart_is_free+0x18>
		return false;
 100a0f8:	2300      	movs	r3, #0
 100a0fa:	e000      	b.n	100a0fe <hal_uart_is_free+0x1a>
			return true;
		}
#endif

	default:
		return false;
 100a0fc:	2300      	movs	r3, #0
	}
}
 100a0fe:	4618      	mov	r0, r3
 100a100:	370c      	adds	r7, #12
 100a102:	46bd      	mov	sp, r7
 100a104:	bc80      	pop	{r7}
 100a106:	4770      	bx	lr
 100a108:	20005440 	.word	0x20005440

0100a10c <_upd_wr_info>:
		x_buf->us_size = i_len_chk;
	}
}

static void _upd_wr_info(x_usb_buffer *x_buf, uint16_t us_len)
{
 100a10c:	b480      	push	{r7}
 100a10e:	b083      	sub	sp, #12
 100a110:	af00      	add	r7, sp, #0
 100a112:	6078      	str	r0, [r7, #4]
 100a114:	460b      	mov	r3, r1
 100a116:	807b      	strh	r3, [r7, #2]
	if ((x_buf->puc_wr_data + us_len) >= x_buf->puc_end) {
 100a118:	687b      	ldr	r3, [r7, #4]
 100a11a:	681a      	ldr	r2, [r3, #0]
 100a11c:	887b      	ldrh	r3, [r7, #2]
 100a11e:	441a      	add	r2, r3
 100a120:	687b      	ldr	r3, [r7, #4]
 100a122:	689b      	ldr	r3, [r3, #8]
 100a124:	429a      	cmp	r2, r3
 100a126:	d30d      	bcc.n	100a144 <_upd_wr_info+0x38>
		/* buffer overflow */
		x_buf->puc_wr_data = x_buf->puc_data + (us_len - (x_buf->puc_end - x_buf->puc_wr_data));
 100a128:	687b      	ldr	r3, [r7, #4]
 100a12a:	330e      	adds	r3, #14
 100a12c:	8879      	ldrh	r1, [r7, #2]
 100a12e:	687a      	ldr	r2, [r7, #4]
 100a130:	6892      	ldr	r2, [r2, #8]
 100a132:	4610      	mov	r0, r2
 100a134:	687a      	ldr	r2, [r7, #4]
 100a136:	6812      	ldr	r2, [r2, #0]
 100a138:	1a82      	subs	r2, r0, r2
 100a13a:	1a8a      	subs	r2, r1, r2
 100a13c:	441a      	add	r2, r3
 100a13e:	687b      	ldr	r3, [r7, #4]
 100a140:	601a      	str	r2, [r3, #0]
 100a142:	e005      	b.n	100a150 <_upd_wr_info+0x44>
	} else {
		x_buf->puc_wr_data += us_len;
 100a144:	687b      	ldr	r3, [r7, #4]
 100a146:	681a      	ldr	r2, [r3, #0]
 100a148:	887b      	ldrh	r3, [r7, #2]
 100a14a:	441a      	add	r2, r3
 100a14c:	687b      	ldr	r3, [r7, #4]
 100a14e:	601a      	str	r2, [r3, #0]
	}

	x_buf->us_size += us_len;
 100a150:	687b      	ldr	r3, [r7, #4]
 100a152:	899a      	ldrh	r2, [r3, #12]
 100a154:	887b      	ldrh	r3, [r7, #2]
 100a156:	4413      	add	r3, r2
 100a158:	b29a      	uxth	r2, r3
 100a15a:	687b      	ldr	r3, [r7, #4]
 100a15c:	819a      	strh	r2, [r3, #12]

	if (x_buf->us_size > HAL_USB_BUF_RX_SIZE) {
 100a15e:	687b      	ldr	r3, [r7, #4]
 100a160:	899b      	ldrh	r3, [r3, #12]
 100a162:	f240 52dc 	movw	r2, #1500	; 0x5dc
 100a166:	4293      	cmp	r3, r2
 100a168:	d904      	bls.n	100a174 <_upd_wr_info+0x68>
		x_buf->us_size = HAL_USB_BUF_RX_SIZE;
 100a16a:	687b      	ldr	r3, [r7, #4]
 100a16c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 100a170:	819a      	strh	r2, [r3, #12]

		/* catch error */
		while (1) {
 100a172:	e7fe      	b.n	100a172 <_upd_wr_info+0x66>
		}
	}
}
 100a174:	bf00      	nop
 100a176:	370c      	adds	r7, #12
 100a178:	46bd      	mov	sp, r7
 100a17a:	bc80      	pop	{r7}
 100a17c:	4770      	bx	lr

0100a17e <hal_usb_cdc_suspend_action>:

void hal_usb_cdc_suspend_action(void)
{
 100a17e:	b480      	push	{r7}
 100a180:	af00      	add	r7, sp, #0
	HAL_USB_DBG(("hal_usb_cdc_suspend_action\r\n"));
}
 100a182:	bf00      	nop
 100a184:	46bd      	mov	sp, r7
 100a186:	bc80      	pop	{r7}
 100a188:	4770      	bx	lr

0100a18a <hal_usb_cdc_resume_action>:

void hal_usb_cdc_resume_action(void)
{
 100a18a:	b480      	push	{r7}
 100a18c:	af00      	add	r7, sp, #0
	HAL_USB_DBG(("hal_usb_cdc_resume_action\r\n"));
}
 100a18e:	bf00      	nop
 100a190:	46bd      	mov	sp, r7
 100a192:	bc80      	pop	{r7}
 100a194:	4770      	bx	lr

0100a196 <hal_usb_cdc_sof_action>:

void hal_usb_cdc_sof_action(void)
{
 100a196:	b480      	push	{r7}
 100a198:	af00      	add	r7, sp, #0
	if (0 == framenumber) {
		LED_On(LED1);
	} else if (1000 == framenumber) {
		LED_Off(LED1);
	}*/
}
 100a19a:	bf00      	nop
 100a19c:	46bd      	mov	sp, r7
 100a19e:	bc80      	pop	{r7}
 100a1a0:	4770      	bx	lr

0100a1a2 <hal_usb_cdc_enable>:

bool hal_usb_cdc_enable(uint8_t port)
{
 100a1a2:	b480      	push	{r7}
 100a1a4:	b083      	sub	sp, #12
 100a1a6:	af00      	add	r7, sp, #0
 100a1a8:	4603      	mov	r3, r0
 100a1aa:	71fb      	strb	r3, [r7, #7]
	/* Open communication */
	UNUSED(port);
	HAL_USB_DBG(("hal_usb_cdc_enable\r\n"));
	return true;
 100a1ac:	2301      	movs	r3, #1
}
 100a1ae:	4618      	mov	r0, r3
 100a1b0:	370c      	adds	r7, #12
 100a1b2:	46bd      	mov	sp, r7
 100a1b4:	bc80      	pop	{r7}
 100a1b6:	4770      	bx	lr

0100a1b8 <hal_usb_cdc_disable>:

void hal_usb_cdc_disable(uint8_t port)
{
 100a1b8:	b480      	push	{r7}
 100a1ba:	b083      	sub	sp, #12
 100a1bc:	af00      	add	r7, sp, #0
 100a1be:	4603      	mov	r3, r0
 100a1c0:	71fb      	strb	r3, [r7, #7]
	/* Close communication */
	UNUSED(port);
	HAL_USB_DBG(("hal_usb_cdc_disable\r\n"));
}
 100a1c2:	bf00      	nop
 100a1c4:	370c      	adds	r7, #12
 100a1c6:	46bd      	mov	sp, r7
 100a1c8:	bc80      	pop	{r7}
 100a1ca:	4770      	bx	lr

0100a1cc <hal_usb_cdc_set_dtr>:

void hal_usb_cdc_set_dtr(uint8_t port, bool b_enable)
{
 100a1cc:	b480      	push	{r7}
 100a1ce:	b083      	sub	sp, #12
 100a1d0:	af00      	add	r7, sp, #0
 100a1d2:	4603      	mov	r3, r0
 100a1d4:	460a      	mov	r2, r1
 100a1d6:	71fb      	strb	r3, [r7, #7]
 100a1d8:	4613      	mov	r3, r2
 100a1da:	71bb      	strb	r3, [r7, #6]
		HAL_USB_DBG(("hal_usb_cdc_set_dtr 1\r\n"));
	} else {
		/* Host terminal has close COM */
		HAL_USB_DBG(("hal_usb_cdc_set_dtr 0\r\n"));
	}
}
 100a1dc:	bf00      	nop
 100a1de:	370c      	adds	r7, #12
 100a1e0:	46bd      	mov	sp, r7
 100a1e2:	bc80      	pop	{r7}
 100a1e4:	4770      	bx	lr
	...

0100a1e8 <hal_usb_cdc_rx_notify>:

void hal_usb_cdc_rx_notify(uint8_t port)
{
 100a1e8:	b580      	push	{r7, lr}
 100a1ea:	b084      	sub	sp, #16
 100a1ec:	af00      	add	r7, sp, #0
 100a1ee:	4603      	mov	r3, r0
 100a1f0:	71fb      	strb	r3, [r7, #7]
	UNUSED(port);

	uint32_t us_len = udi_cdc_get_nb_received_data();
 100a1f2:	4b22      	ldr	r3, [pc, #136]	; (100a27c <hal_usb_cdc_rx_notify+0x94>)
 100a1f4:	4798      	blx	r3
 100a1f6:	60f8      	str	r0, [r7, #12]

	if (us_len == 0) {
 100a1f8:	68fb      	ldr	r3, [r7, #12]
 100a1fa:	2b00      	cmp	r3, #0
 100a1fc:	d038      	beq.n	100a270 <hal_usb_cdc_rx_notify+0x88>
		/* No Data to read */
		return;
	}

	if (us_len > (uint32_t)(HAL_USB_BUF_RX_SIZE - sx_rx_data_buf.us_size)) {
 100a1fe:	4b20      	ldr	r3, [pc, #128]	; (100a280 <hal_usb_cdc_rx_notify+0x98>)
 100a200:	899b      	ldrh	r3, [r3, #12]
 100a202:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 100a206:	3304      	adds	r3, #4
 100a208:	461a      	mov	r2, r3
 100a20a:	68fb      	ldr	r3, [r7, #12]
 100a20c:	429a      	cmp	r2, r3
 100a20e:	d331      	bcc.n	100a274 <hal_usb_cdc_rx_notify+0x8c>
		/* There is no free space */
		return;
	}

	if (us_len > (uint32_t)(sx_rx_data_buf.puc_end - sx_rx_data_buf.puc_wr_data)) {
 100a210:	4b1b      	ldr	r3, [pc, #108]	; (100a280 <hal_usb_cdc_rx_notify+0x98>)
 100a212:	689b      	ldr	r3, [r3, #8]
 100a214:	461a      	mov	r2, r3
 100a216:	4b1a      	ldr	r3, [pc, #104]	; (100a280 <hal_usb_cdc_rx_notify+0x98>)
 100a218:	681b      	ldr	r3, [r3, #0]
 100a21a:	1ad3      	subs	r3, r2, r3
 100a21c:	461a      	mov	r2, r3
 100a21e:	68fb      	ldr	r3, [r7, #12]
 100a220:	429a      	cmp	r2, r3
 100a222:	d218      	bcs.n	100a256 <hal_usb_cdc_rx_notify+0x6e>
		uint16_t us_size1, us_size2;

		/* copy to circular buffer in two fragments */
		us_size1 = sx_rx_data_buf.puc_end - sx_rx_data_buf.puc_wr_data;
 100a224:	4b16      	ldr	r3, [pc, #88]	; (100a280 <hal_usb_cdc_rx_notify+0x98>)
 100a226:	689b      	ldr	r3, [r3, #8]
 100a228:	461a      	mov	r2, r3
 100a22a:	4b15      	ldr	r3, [pc, #84]	; (100a280 <hal_usb_cdc_rx_notify+0x98>)
 100a22c:	681b      	ldr	r3, [r3, #0]
 100a22e:	1ad3      	subs	r3, r2, r3
 100a230:	817b      	strh	r3, [r7, #10]
		us_size2 = us_len - us_size1;
 100a232:	68fb      	ldr	r3, [r7, #12]
 100a234:	b29a      	uxth	r2, r3
 100a236:	897b      	ldrh	r3, [r7, #10]
 100a238:	1ad3      	subs	r3, r2, r3
 100a23a:	813b      	strh	r3, [r7, #8]
		udi_cdc_read_buf(sx_rx_data_buf.puc_wr_data, us_size1);
 100a23c:	4b10      	ldr	r3, [pc, #64]	; (100a280 <hal_usb_cdc_rx_notify+0x98>)
 100a23e:	681b      	ldr	r3, [r3, #0]
 100a240:	897a      	ldrh	r2, [r7, #10]
 100a242:	4611      	mov	r1, r2
 100a244:	4618      	mov	r0, r3
 100a246:	4b0f      	ldr	r3, [pc, #60]	; (100a284 <hal_usb_cdc_rx_notify+0x9c>)
 100a248:	4798      	blx	r3
		udi_cdc_read_buf(sx_rx_data_buf.puc_data, us_size2);
 100a24a:	893b      	ldrh	r3, [r7, #8]
 100a24c:	4619      	mov	r1, r3
 100a24e:	480e      	ldr	r0, [pc, #56]	; (100a288 <hal_usb_cdc_rx_notify+0xa0>)
 100a250:	4b0c      	ldr	r3, [pc, #48]	; (100a284 <hal_usb_cdc_rx_notify+0x9c>)
 100a252:	4798      	blx	r3
 100a254:	e005      	b.n	100a262 <hal_usb_cdc_rx_notify+0x7a>
	} else {
		/* copy to circular buffer in only one fragment */
		udi_cdc_read_buf(sx_rx_data_buf.puc_wr_data, us_len);
 100a256:	4b0a      	ldr	r3, [pc, #40]	; (100a280 <hal_usb_cdc_rx_notify+0x98>)
 100a258:	681b      	ldr	r3, [r3, #0]
 100a25a:	68f9      	ldr	r1, [r7, #12]
 100a25c:	4618      	mov	r0, r3
 100a25e:	4b09      	ldr	r3, [pc, #36]	; (100a284 <hal_usb_cdc_rx_notify+0x9c>)
 100a260:	4798      	blx	r3
	}

	HAL_USB_DBG(("hal_usb_cdc_rx_notify %u\r\n", us_len));

	/* update WR pointer */
	_upd_wr_info(&sx_rx_data_buf, us_len);
 100a262:	68fb      	ldr	r3, [r7, #12]
 100a264:	b29b      	uxth	r3, r3
 100a266:	4619      	mov	r1, r3
 100a268:	4805      	ldr	r0, [pc, #20]	; (100a280 <hal_usb_cdc_rx_notify+0x98>)
 100a26a:	4b08      	ldr	r3, [pc, #32]	; (100a28c <hal_usb_cdc_rx_notify+0xa4>)
 100a26c:	4798      	blx	r3
 100a26e:	e002      	b.n	100a276 <hal_usb_cdc_rx_notify+0x8e>
		return;
 100a270:	bf00      	nop
 100a272:	e000      	b.n	100a276 <hal_usb_cdc_rx_notify+0x8e>
		return;
 100a274:	bf00      	nop
}
 100a276:	3710      	adds	r7, #16
 100a278:	46bd      	mov	sp, r7
 100a27a:	bd80      	pop	{r7, pc}
 100a27c:	01002f81 	.word	0x01002f81
 100a280:	20005444 	.word	0x20005444
 100a284:	010030d5 	.word	0x010030d5
 100a288:	20005452 	.word	0x20005452
 100a28c:	0100a10d 	.word	0x0100a10d

0100a290 <hal_usb_cdc_set_coding_ext>:

void hal_usb_cdc_set_coding_ext(uint8_t port, void *cfg)
{
 100a290:	b480      	push	{r7}
 100a292:	b083      	sub	sp, #12
 100a294:	af00      	add	r7, sp, #0
 100a296:	4603      	mov	r3, r0
 100a298:	6039      	str	r1, [r7, #0]
 100a29a:	71fb      	strb	r3, [r7, #7]
	UNUSED(port);
	UNUSED(cfg);

	/*HAL_USB_DBG(("hal_usb_cdc_set_coding_ext\r\n")); */
}
 100a29c:	bf00      	nop
 100a29e:	370c      	adds	r7, #12
 100a2a0:	46bd      	mov	sp, r7
 100a2a2:	bc80      	pop	{r7}
 100a2a4:	4770      	bx	lr
	...

0100a2a8 <NVIC_SetPriorityGrouping>:
{
 100a2a8:	b480      	push	{r7}
 100a2aa:	b085      	sub	sp, #20
 100a2ac:	af00      	add	r7, sp, #0
 100a2ae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
 100a2b0:	687b      	ldr	r3, [r7, #4]
 100a2b2:	f003 0307 	and.w	r3, r3, #7
 100a2b6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 100a2b8:	4b0c      	ldr	r3, [pc, #48]	; (100a2ec <NVIC_SetPriorityGrouping+0x44>)
 100a2ba:	68db      	ldr	r3, [r3, #12]
 100a2bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 100a2be:	68ba      	ldr	r2, [r7, #8]
 100a2c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 100a2c4:	4013      	ands	r3, r2
 100a2c6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
 100a2c8:	68fb      	ldr	r3, [r7, #12]
 100a2ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 100a2cc:	68bb      	ldr	r3, [r7, #8]
 100a2ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                 |
 100a2d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 100a2d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 100a2d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 100a2da:	4a04      	ldr	r2, [pc, #16]	; (100a2ec <NVIC_SetPriorityGrouping+0x44>)
 100a2dc:	68bb      	ldr	r3, [r7, #8]
 100a2de:	60d3      	str	r3, [r2, #12]
}
 100a2e0:	bf00      	nop
 100a2e2:	3714      	adds	r7, #20
 100a2e4:	46bd      	mov	sp, r7
 100a2e6:	bc80      	pop	{r7}
 100a2e8:	4770      	bx	lr
 100a2ea:	bf00      	nop
 100a2ec:	e000ed00 	.word	0xe000ed00

0100a2f0 <ioport_set_pin_level>:
{
 100a2f0:	b480      	push	{r7}
 100a2f2:	b08b      	sub	sp, #44	; 0x2c
 100a2f4:	af00      	add	r7, sp, #0
 100a2f6:	6078      	str	r0, [r7, #4]
 100a2f8:	460b      	mov	r3, r1
 100a2fa:	70fb      	strb	r3, [r7, #3]
 100a2fc:	687b      	ldr	r3, [r7, #4]
 100a2fe:	627b      	str	r3, [r7, #36]	; 0x24
 100a300:	78fb      	ldrb	r3, [r7, #3]
 100a302:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 100a306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 100a308:	61fb      	str	r3, [r7, #28]
 100a30a:	69fb      	ldr	r3, [r7, #28]
 100a30c:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
 100a30e:	69bb      	ldr	r3, [r7, #24]
 100a310:	095b      	lsrs	r3, r3, #5
 100a312:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
 100a314:	697b      	ldr	r3, [r7, #20]
 100a316:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 100a31a:	f203 7307 	addw	r3, r3, #1799	; 0x707
 100a31e:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
 100a320:	613b      	str	r3, [r7, #16]
	if (level) {
 100a322:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 100a326:	2b00      	cmp	r3, #0
 100a328:	d009      	beq.n	100a33e <ioport_set_pin_level+0x4e>
 100a32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 100a32c:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
 100a32e:	68fb      	ldr	r3, [r7, #12]
 100a330:	f003 031f 	and.w	r3, r3, #31
 100a334:	2201      	movs	r2, #1
 100a336:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
 100a338:	693b      	ldr	r3, [r7, #16]
 100a33a:	631a      	str	r2, [r3, #48]	; 0x30
}
 100a33c:	e008      	b.n	100a350 <ioport_set_pin_level+0x60>
 100a33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 100a340:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
 100a342:	68bb      	ldr	r3, [r7, #8]
 100a344:	f003 031f 	and.w	r3, r3, #31
 100a348:	2201      	movs	r2, #1
 100a34a:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
 100a34c:	693b      	ldr	r3, [r7, #16]
 100a34e:	635a      	str	r2, [r3, #52]	; 0x34
 100a350:	bf00      	nop
 100a352:	372c      	adds	r7, #44	; 0x2c
 100a354:	46bd      	mov	sp, r7
 100a356:	bc80      	pop	{r7}
 100a358:	4770      	bx	lr

0100a35a <ioport_toggle_pin_level>:
 * an output.
 *
 * \param pin IOPORT pin to toggle
 */
static inline void ioport_toggle_pin_level(ioport_pin_t pin)
{
 100a35a:	b480      	push	{r7}
 100a35c:	b08b      	sub	sp, #44	; 0x2c
 100a35e:	af00      	add	r7, sp, #0
 100a360:	6078      	str	r0, [r7, #4]
 100a362:	687b      	ldr	r3, [r7, #4]
 100a364:	627b      	str	r3, [r7, #36]	; 0x24
 100a366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 100a368:	623b      	str	r3, [r7, #32]
 100a36a:	6a3b      	ldr	r3, [r7, #32]
 100a36c:	61fb      	str	r3, [r7, #28]
	return pin >> 5;
 100a36e:	69fb      	ldr	r3, [r7, #28]
 100a370:	095b      	lsrs	r3, r3, #5
 100a372:	61bb      	str	r3, [r7, #24]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
 100a374:	69bb      	ldr	r3, [r7, #24]
 100a376:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 100a37a:	f203 7307 	addw	r3, r3, #1799	; 0x707
 100a37e:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(port)->PIO_PDSR & mask;
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
 100a380:	617b      	str	r3, [r7, #20]
 100a382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 100a384:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
 100a386:	693b      	ldr	r3, [r7, #16]
 100a388:	f003 031f 	and.w	r3, r3, #31
 100a38c:	2201      	movs	r2, #1
 100a38e:	fa02 f303 	lsl.w	r3, r2, r3
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);
 100a392:	60fb      	str	r3, [r7, #12]

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
 100a394:	697b      	ldr	r3, [r7, #20]
 100a396:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 100a398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 100a39a:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
 100a39c:	68bb      	ldr	r3, [r7, #8]
 100a39e:	f003 031f 	and.w	r3, r3, #31
 100a3a2:	2101      	movs	r1, #1
 100a3a4:	fa01 f303 	lsl.w	r3, r1, r3
	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
 100a3a8:	4013      	ands	r3, r2
 100a3aa:	2b00      	cmp	r3, #0
 100a3ac:	d003      	beq.n	100a3b6 <ioport_toggle_pin_level+0x5c>
		port->PIO_CODR = mask;
 100a3ae:	697b      	ldr	r3, [r7, #20]
 100a3b0:	68fa      	ldr	r2, [r7, #12]
 100a3b2:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_toggle_pin_level(pin);
}
 100a3b4:	e002      	b.n	100a3bc <ioport_toggle_pin_level+0x62>
	} else {
		port->PIO_SODR = mask;
 100a3b6:	697b      	ldr	r3, [r7, #20]
 100a3b8:	68fa      	ldr	r2, [r7, #12]
 100a3ba:	631a      	str	r2, [r3, #48]	; 0x30
 100a3bc:	bf00      	nop
 100a3be:	372c      	adds	r7, #44	; 0x2c
 100a3c0:	46bd      	mov	sp, r7
 100a3c2:	bc80      	pop	{r7}
 100a3c4:	4770      	bx	lr
	...

0100a3c8 <hang>:
static xTaskHandle app_task_handle;

/*************************** Startup code **********************************/
void
hang(void)
{
 100a3c8:	b580      	push	{r7, lr}
 100a3ca:	b082      	sub	sp, #8
 100a3cc:	af00      	add	r7, sp, #0
  unsigned int cntr = 0xffffff;
 100a3ce:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 100a3d2:	607b      	str	r3, [r7, #4]
  volatile unsigned int i;
  
//  lcd_puts(0, "panic: hang");
  
  LED_Off(LED0);
 100a3d4:	2101      	movs	r1, #1
 100a3d6:	200c      	movs	r0, #12
 100a3d8:	4b08      	ldr	r3, [pc, #32]	; (100a3fc <hang+0x34>)
 100a3da:	4798      	blx	r3
  
  for(;;) {
    LED_Toggle(LED1);
 100a3dc:	200f      	movs	r0, #15
 100a3de:	4b08      	ldr	r3, [pc, #32]	; (100a400 <hang+0x38>)
 100a3e0:	4798      	blx	r3
    i = cntr;
 100a3e2:	687b      	ldr	r3, [r7, #4]
 100a3e4:	603b      	str	r3, [r7, #0]
    while (--i);
 100a3e6:	bf00      	nop
 100a3e8:	683b      	ldr	r3, [r7, #0]
 100a3ea:	3b01      	subs	r3, #1
 100a3ec:	603b      	str	r3, [r7, #0]
 100a3ee:	2b00      	cmp	r3, #0
 100a3f0:	d1fa      	bne.n	100a3e8 <hang+0x20>
    wdt_restart(WDT);
 100a3f2:	4804      	ldr	r0, [pc, #16]	; (100a404 <hang+0x3c>)
 100a3f4:	4b04      	ldr	r3, [pc, #16]	; (100a408 <hang+0x40>)
 100a3f6:	4798      	blx	r3
    LED_Toggle(LED1);
 100a3f8:	e7f0      	b.n	100a3dc <hang+0x14>
 100a3fa:	bf00      	nop
 100a3fc:	0100a2f1 	.word	0x0100a2f1
 100a400:	0100a35b 	.word	0x0100a35b
 100a404:	400e1450 	.word	0x400e1450
 100a408:	01006f71 	.word	0x01006f71

0100a40c <monitor_timer_cb>:
  return 0;
}

static void
monitor_timer_cb(xTimerHandle timer)
{
 100a40c:	b580      	push	{r7, lr}
 100a40e:	b082      	sub	sp, #8
 100a410:	af00      	add	r7, sp, #0
 100a412:	6078      	str	r0, [r7, #4]
  wdt_restart(WDT); /* I'm that terrible */
 100a414:	4803      	ldr	r0, [pc, #12]	; (100a424 <monitor_timer_cb+0x18>)
 100a416:	4b04      	ldr	r3, [pc, #16]	; (100a428 <monitor_timer_cb+0x1c>)
 100a418:	4798      	blx	r3
}
 100a41a:	bf00      	nop
 100a41c:	3708      	adds	r7, #8
 100a41e:	46bd      	mov	sp, r7
 100a420:	bd80      	pop	{r7, pc}
 100a422:	bf00      	nop
 100a424:	400e1450 	.word	0x400e1450
 100a428:	01006f71 	.word	0x01006f71

0100a42c <led_blink>:

static void
led_blink(unsigned int times)
{
 100a42c:	b580      	push	{r7, lr}
 100a42e:	b084      	sub	sp, #16
 100a430:	af00      	add	r7, sp, #0
 100a432:	6078      	str	r0, [r7, #4]
  uint32_t waitcnt;
  unsigned int i;
  
  LED_Toggle(LED1);
 100a434:	200f      	movs	r0, #15
 100a436:	4b10      	ldr	r3, [pc, #64]	; (100a478 <led_blink+0x4c>)
 100a438:	4798      	blx	r3
  for (i = 0; i < times; ++i) {
 100a43a:	2300      	movs	r3, #0
 100a43c:	60bb      	str	r3, [r7, #8]
 100a43e:	e010      	b.n	100a462 <led_blink+0x36>
    waitcnt = 0xfffff;
 100a440:	4b0e      	ldr	r3, [pc, #56]	; (100a47c <led_blink+0x50>)
 100a442:	60fb      	str	r3, [r7, #12]
    while (waitcnt--);
 100a444:	bf00      	nop
 100a446:	68fb      	ldr	r3, [r7, #12]
 100a448:	1e5a      	subs	r2, r3, #1
 100a44a:	60fa      	str	r2, [r7, #12]
 100a44c:	2b00      	cmp	r3, #0
 100a44e:	d1fa      	bne.n	100a446 <led_blink+0x1a>
    
    LED_Toggle(LED0);
 100a450:	200c      	movs	r0, #12
 100a452:	4b09      	ldr	r3, [pc, #36]	; (100a478 <led_blink+0x4c>)
 100a454:	4798      	blx	r3
    LED_Toggle(LED1);
 100a456:	200f      	movs	r0, #15
 100a458:	4b07      	ldr	r3, [pc, #28]	; (100a478 <led_blink+0x4c>)
 100a45a:	4798      	blx	r3
  for (i = 0; i < times; ++i) {
 100a45c:	68bb      	ldr	r3, [r7, #8]
 100a45e:	3301      	adds	r3, #1
 100a460:	60bb      	str	r3, [r7, #8]
 100a462:	68ba      	ldr	r2, [r7, #8]
 100a464:	687b      	ldr	r3, [r7, #4]
 100a466:	429a      	cmp	r2, r3
 100a468:	d3ea      	bcc.n	100a440 <led_blink+0x14>
  }    
  LED_Toggle(LED1);
 100a46a:	200f      	movs	r0, #15
 100a46c:	4b02      	ldr	r3, [pc, #8]	; (100a478 <led_blink+0x4c>)
 100a46e:	4798      	blx	r3
}
 100a470:	bf00      	nop
 100a472:	3710      	adds	r7, #16
 100a474:	46bd      	mov	sp, r7
 100a476:	bd80      	pop	{r7, pc}
 100a478:	0100a35b 	.word	0x0100a35b
 100a47c:	000fffff 	.word	0x000fffff

0100a480 <watchdog_init>:
  
static void
watchdog_init(void)
{
 100a480:	b590      	push	{r4, r7, lr}
 100a482:	b083      	sub	sp, #12
 100a484:	af00      	add	r7, sp, #0
  uint32_t timeout_value;
  uint32_t wdt_mode;
  
  timeout_value = wdt_get_timeout_value(WATCHDOG_TIMEOUT_US, BOARD_FREQ_SLCK_XTAL);
 100a486:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 100a48a:	4809      	ldr	r0, [pc, #36]	; (100a4b0 <watchdog_init+0x30>)
 100a48c:	4b09      	ldr	r3, [pc, #36]	; (100a4b4 <watchdog_init+0x34>)
 100a48e:	4798      	blx	r3
 100a490:	6078      	str	r0, [r7, #4]
  
  wdt_mode = WDT_MR_WDRSTEN | WDT_MR_WDRPROC | WDT_MR_WDDBGHLT | WDT_MR_WDIDLEHLT;
 100a492:	4b09      	ldr	r3, [pc, #36]	; (100a4b8 <watchdog_init+0x38>)
 100a494:	603b      	str	r3, [r7, #0]
  
  /* Initialize watchdog */
  wdt_init(WDT, wdt_mode, timeout_value, timeout_value);
 100a496:	687b      	ldr	r3, [r7, #4]
 100a498:	b29a      	uxth	r2, r3
 100a49a:	687b      	ldr	r3, [r7, #4]
 100a49c:	b29b      	uxth	r3, r3
 100a49e:	6839      	ldr	r1, [r7, #0]
 100a4a0:	4806      	ldr	r0, [pc, #24]	; (100a4bc <watchdog_init+0x3c>)
 100a4a2:	4c07      	ldr	r4, [pc, #28]	; (100a4c0 <watchdog_init+0x40>)
 100a4a4:	47a0      	blx	r4
}
 100a4a6:	bf00      	nop
 100a4a8:	370c      	adds	r7, #12
 100a4aa:	46bd      	mov	sp, r7
 100a4ac:	bd90      	pop	{r4, r7, pc}
 100a4ae:	bf00      	nop
 100a4b0:	004c4b40 	.word	0x004c4b40
 100a4b4:	01006ee1 	.word	0x01006ee1
 100a4b8:	30006000 	.word	0x30006000
 100a4bc:	400e1450 	.word	0x400e1450
 100a4c0:	01006f31 	.word	0x01006f31

0100a4c4 <monitor_init>:

static void
monitor_init(void)
{
 100a4c4:	b590      	push	{r4, r7, lr}
 100a4c6:	b085      	sub	sp, #20
 100a4c8:	af02      	add	r7, sp, #8
  xTimerHandle xMonitorTimer;
  
  xMonitorTimer = xTimerCreate((const signed char *const)"Monitor timer",
 100a4ca:	4b0c      	ldr	r3, [pc, #48]	; (100a4fc <monitor_init+0x38>)
 100a4cc:	9300      	str	r3, [sp, #0]
 100a4ce:	2300      	movs	r3, #0
 100a4d0:	2201      	movs	r2, #1
 100a4d2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 100a4d6:	480a      	ldr	r0, [pc, #40]	; (100a500 <monitor_init+0x3c>)
 100a4d8:	4c0a      	ldr	r4, [pc, #40]	; (100a504 <monitor_init+0x40>)
 100a4da:	47a0      	blx	r4
 100a4dc:	6078      	str	r0, [r7, #4]
  NULL,
  monitor_timer_cb);
  
  configASSERT(xMonitorTimer);
  
  xTimerStart(xMonitorTimer, mainMONITOR_BLOCK_TIME);
 100a4de:	4b0a      	ldr	r3, [pc, #40]	; (100a508 <monitor_init+0x44>)
 100a4e0:	4798      	blx	r3
 100a4e2:	4602      	mov	r2, r0
 100a4e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 100a4e8:	9300      	str	r3, [sp, #0]
 100a4ea:	2300      	movs	r3, #0
 100a4ec:	2100      	movs	r1, #0
 100a4ee:	6878      	ldr	r0, [r7, #4]
 100a4f0:	4c06      	ldr	r4, [pc, #24]	; (100a50c <monitor_init+0x48>)
 100a4f2:	47a0      	blx	r4
}
 100a4f4:	bf00      	nop
 100a4f6:	370c      	adds	r7, #12
 100a4f8:	46bd      	mov	sp, r7
 100a4fa:	bd90      	pop	{r4, r7, pc}
 100a4fc:	0100a40d 	.word	0x0100a40d
 100a500:	01021600 	.word	0x01021600
 100a504:	01008d9d 	.word	0x01008d9d
 100a508:	010084b1 	.word	0x010084b1
 100a50c:	01008e09 	.word	0x01008e09

0100a510 <sched_init>:

static void
sched_init(void)
{
 100a510:	b580      	push	{r7, lr}
 100a512:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 100a514:	4b01      	ldr	r3, [pc, #4]	; (100a51c <sched_init+0xc>)
 100a516:	4798      	blx	r3
}
 100a518:	bf00      	nop
 100a51a:	bd80      	pop	{r7, pc}
 100a51c:	01008319 	.word	0x01008319

0100a520 <app_init>:

static void
app_init(void)
{
 100a520:	b590      	push	{r4, r7, lr}
 100a522:	b085      	sub	sp, #20
 100a524:	af04      	add	r7, sp, #16
  static tx_task_t tt;
  
  if (tx_task_init(&tt)) {
 100a526:	4812      	ldr	r0, [pc, #72]	; (100a570 <app_init+0x50>)
 100a528:	4b12      	ldr	r3, [pc, #72]	; (100a574 <app_init+0x54>)
 100a52a:	4798      	blx	r3
 100a52c:	4603      	mov	r3, r0
 100a52e:	2b00      	cmp	r3, #0
 100a530:	d00f      	beq.n	100a552 <app_init+0x32>
    xTaskCreate(
 100a532:	2300      	movs	r3, #0
 100a534:	9303      	str	r3, [sp, #12]
 100a536:	2300      	movs	r3, #0
 100a538:	9302      	str	r3, [sp, #8]
 100a53a:	4b0f      	ldr	r3, [pc, #60]	; (100a578 <app_init+0x58>)
 100a53c:	9301      	str	r3, [sp, #4]
 100a53e:	2301      	movs	r3, #1
 100a540:	9300      	str	r3, [sp, #0]
 100a542:	4b0b      	ldr	r3, [pc, #44]	; (100a570 <app_init+0x50>)
 100a544:	f240 228a 	movw	r2, #650	; 0x28a
 100a548:	490c      	ldr	r1, [pc, #48]	; (100a57c <app_init+0x5c>)
 100a54a:	480d      	ldr	r0, [pc, #52]	; (100a580 <app_init+0x60>)
 100a54c:	4c0d      	ldr	r4, [pc, #52]	; (100a584 <app_init+0x64>)
 100a54e:	47a0      	blx	r4
	LED_Off(LED0);
	LED_Off(LED1);

    hang();
  }   
}
 100a550:	e009      	b.n	100a566 <app_init+0x46>
	LED_Off(LED0);
 100a552:	2101      	movs	r1, #1
 100a554:	200c      	movs	r0, #12
 100a556:	4b0c      	ldr	r3, [pc, #48]	; (100a588 <app_init+0x68>)
 100a558:	4798      	blx	r3
	LED_Off(LED1);
 100a55a:	2101      	movs	r1, #1
 100a55c:	200f      	movs	r0, #15
 100a55e:	4b0a      	ldr	r3, [pc, #40]	; (100a588 <app_init+0x68>)
 100a560:	4798      	blx	r3
    hang();
 100a562:	4b0a      	ldr	r3, [pc, #40]	; (100a58c <app_init+0x6c>)
 100a564:	4798      	blx	r3
}
 100a566:	bf00      	nop
 100a568:	3704      	adds	r7, #4
 100a56a:	46bd      	mov	sp, r7
 100a56c:	bd90      	pop	{r4, r7, pc}
 100a56e:	bf00      	nop
 100a570:	20005a34 	.word	0x20005a34
 100a574:	0100b535 	.word	0x0100b535
 100a578:	20005a30 	.word	0x20005a30
 100a57c:	01021610 	.word	0x01021610
 100a580:	01000249 	.word	0x01000249
 100a584:	010080fd 	.word	0x010080fd
 100a588:	0100a2f1 	.word	0x0100a2f1
 100a58c:	0100a3c9 	.word	0x0100a3c9

0100a590 <hardware_init>:
  
static void
hardware_init(void)
{
 100a590:	b580      	push	{r7, lr}
 100a592:	af00      	add	r7, sp, #0
  /* Setup system clock */
  sysclk_init();
 100a594:	4b0a      	ldr	r3, [pc, #40]	; (100a5c0 <hardware_init+0x30>)
 100a596:	4798      	blx	r3
  
  /* Set interrupt priority */
  NVIC_SetPriorityGrouping(__NVIC_PRIO_BITS);
 100a598:	2004      	movs	r0, #4
 100a59a:	4b0a      	ldr	r3, [pc, #40]	; (100a5c4 <hardware_init+0x34>)
 100a59c:	4798      	blx	r3
  
  /* Initialize board */
  board_init();
 100a59e:	4b0a      	ldr	r3, [pc, #40]	; (100a5c8 <hardware_init+0x38>)
 100a5a0:	4798      	blx	r3
  
  /* Initialize flash */
  flash_init(FLASH_ACCESS_MODE_128, CHIP_FLASH_WRITE_WAIT_STATE);
 100a5a2:	2105      	movs	r1, #5
 100a5a4:	2000      	movs	r0, #0
 100a5a6:	4b09      	ldr	r3, [pc, #36]	; (100a5cc <hardware_init+0x3c>)
 100a5a8:	4798      	blx	r3
  
  /* Initialize console */
  console_init();
 100a5aa:	4b09      	ldr	r3, [pc, #36]	; (100a5d0 <hardware_init+0x40>)
 100a5ac:	4798      	blx	r3
  
  /* Notify user with some blinking */
  led_blink(10);
 100a5ae:	200a      	movs	r0, #10
 100a5b0:	4b08      	ldr	r3, [pc, #32]	; (100a5d4 <hardware_init+0x44>)
 100a5b2:	4798      	blx	r3
  
  /* Initialize LCD */
  //lcd_init();
  
  /* Initialize watchdog */
  watchdog_init();
 100a5b4:	4b08      	ldr	r3, [pc, #32]	; (100a5d8 <hardware_init+0x48>)
 100a5b6:	4798      	blx	r3
  
  /* Initialize PHY layer */
  phy_init();
 100a5b8:	4b08      	ldr	r3, [pc, #32]	; (100a5dc <hardware_init+0x4c>)
 100a5ba:	4798      	blx	r3
}
 100a5bc:	bf00      	nop
 100a5be:	bd80      	pop	{r7, pc}
 100a5c0:	010025a5 	.word	0x010025a5
 100a5c4:	0100a2a9 	.word	0x0100a2a9
 100a5c8:	01004151 	.word	0x01004151
 100a5cc:	01006f99 	.word	0x01006f99
 100a5d0:	0100a641 	.word	0x0100a641
 100a5d4:	0100a42d 	.word	0x0100a42d
 100a5d8:	0100a481 	.word	0x0100a481
 100a5dc:	0100ad19 	.word	0x0100ad19

0100a5e0 <main>:

int
main(void)
{
 100a5e0:	b580      	push	{r7, lr}
 100a5e2:	af00      	add	r7, sp, #0
  /* Hardware stuff */
  hardware_init();
 100a5e4:	4b05      	ldr	r3, [pc, #20]	; (100a5fc <main+0x1c>)
 100a5e6:	4798      	blx	r3
  
  /* Task monitor */
  monitor_init();
 100a5e8:	4b05      	ldr	r3, [pc, #20]	; (100a600 <main+0x20>)
 100a5ea:	4798      	blx	r3
  
  /* Create app task */
  app_init();
 100a5ec:	4b05      	ldr	r3, [pc, #20]	; (100a604 <main+0x24>)
 100a5ee:	4798      	blx	r3
  
  /* Init multitasking */
  sched_init();
 100a5f0:	4b05      	ldr	r3, [pc, #20]	; (100a608 <main+0x28>)
 100a5f2:	4798      	blx	r3
 100a5f4:	2300      	movs	r3, #0
}
 100a5f6:	4618      	mov	r0, r3
 100a5f8:	bd80      	pop	{r7, pc}
 100a5fa:	bf00      	nop
 100a5fc:	0100a591 	.word	0x0100a591
 100a600:	0100a4c5 	.word	0x0100a4c5
 100a604:	0100a521 	.word	0x0100a521
 100a608:	0100a511 	.word	0x0100a511

0100a60c <dummy_putchar>:
#define IO_READ_DELAY_MS 10
#define IO_WRITE_DELAY_MS 1

static int
dummy_putchar(volatile void *unused, char c)
{
 100a60c:	b480      	push	{r7}
 100a60e:	b083      	sub	sp, #12
 100a610:	af00      	add	r7, sp, #0
 100a612:	6078      	str	r0, [r7, #4]
 100a614:	460b      	mov	r3, r1
 100a616:	70fb      	strb	r3, [r7, #3]
  return 1;  
 100a618:	2301      	movs	r3, #1
}
 100a61a:	4618      	mov	r0, r3
 100a61c:	370c      	adds	r7, #12
 100a61e:	46bd      	mov	sp, r7
 100a620:	bc80      	pop	{r7}
 100a622:	4770      	bx	lr

0100a624 <dummy_getchar>:

static void
dummy_getchar(volatile void *unused, char *c)
{
 100a624:	b480      	push	{r7}
 100a626:	b083      	sub	sp, #12
 100a628:	af00      	add	r7, sp, #0
 100a62a:	6078      	str	r0, [r7, #4]
 100a62c:	6039      	str	r1, [r7, #0]
  *c = '\0';
 100a62e:	683b      	ldr	r3, [r7, #0]
 100a630:	2200      	movs	r2, #0
 100a632:	701a      	strb	r2, [r3, #0]
}
 100a634:	bf00      	nop
 100a636:	370c      	adds	r7, #12
 100a638:	46bd      	mov	sp, r7
 100a63a:	bc80      	pop	{r7}
 100a63c:	4770      	bx	lr
	...

0100a640 <console_init>:

BOOL
console_init(void)
{
 100a640:	b580      	push	{r7, lr}
 100a642:	af00      	add	r7, sp, #0
  /* Configure console UART. */
  sysclk_enable_peripheral_clock(CONF_UART_ID); 
  stdio_serial_init(CONF_UART, &uart_serial_options);  
  #endif
  
  ptr_put = dummy_putchar;
 100a644:	4b06      	ldr	r3, [pc, #24]	; (100a660 <console_init+0x20>)
 100a646:	4a07      	ldr	r2, [pc, #28]	; (100a664 <console_init+0x24>)
 100a648:	601a      	str	r2, [r3, #0]
  ptr_get = dummy_getchar;
 100a64a:	4b07      	ldr	r3, [pc, #28]	; (100a668 <console_init+0x28>)
 100a64c:	4a07      	ldr	r2, [pc, #28]	; (100a66c <console_init+0x2c>)
 100a64e:	601a      	str	r2, [r3, #0]
  
  hal_uart_open(0, CONSOLE_BAUDRATE);
 100a650:	f44f 2161 	mov.w	r1, #921600	; 0xe1000
 100a654:	2000      	movs	r0, #0
 100a656:	4b06      	ldr	r3, [pc, #24]	; (100a670 <console_init+0x30>)
 100a658:	4798      	blx	r3
  
  return TRUE;
 100a65a:	2301      	movs	r3, #1
}
 100a65c:	4618      	mov	r0, r3
 100a65e:	bd80      	pop	{r7, pc}
 100a660:	200082fc 	.word	0x200082fc
 100a664:	0100a60d 	.word	0x0100a60d
 100a668:	200082f8 	.word	0x200082f8
 100a66c:	0100a625 	.word	0x0100a625
 100a670:	0100a051 	.word	0x0100a051

0100a674 <console_getchar>:

int
console_getchar(void)
{
 100a674:	b580      	push	{r7, lr}
 100a676:	b082      	sub	sp, #8
 100a678:	af00      	add	r7, sp, #0
  uint8_t c;
  
  while (hal_uart_read(0, &c, 1) == 0)
 100a67a:	e001      	b.n	100a680 <console_getchar+0xc>
    taskYIELD();
 100a67c:	4b07      	ldr	r3, [pc, #28]	; (100a69c <console_getchar+0x28>)
 100a67e:	4798      	blx	r3
  while (hal_uart_read(0, &c, 1) == 0)
 100a680:	1dfb      	adds	r3, r7, #7
 100a682:	2201      	movs	r2, #1
 100a684:	4619      	mov	r1, r3
 100a686:	2000      	movs	r0, #0
 100a688:	4b05      	ldr	r3, [pc, #20]	; (100a6a0 <console_getchar+0x2c>)
 100a68a:	4798      	blx	r3
 100a68c:	4603      	mov	r3, r0
 100a68e:	2b00      	cmp	r3, #0
 100a690:	d0f4      	beq.n	100a67c <console_getchar+0x8>
  
  return c;
 100a692:	79fb      	ldrb	r3, [r7, #7]
}
 100a694:	4618      	mov	r0, r3
 100a696:	3708      	adds	r7, #8
 100a698:	46bd      	mov	sp, r7
 100a69a:	bd80      	pop	{r7, pc}
 100a69c:	010075b5 	.word	0x010075b5
 100a6a0:	0100a085 	.word	0x0100a085

0100a6a4 <console_putchar>:

void
console_putchar(uint8_t c)
{
 100a6a4:	b580      	push	{r7, lr}
 100a6a6:	b082      	sub	sp, #8
 100a6a8:	af00      	add	r7, sp, #0
 100a6aa:	4603      	mov	r3, r0
 100a6ac:	71fb      	strb	r3, [r7, #7]
  while (!hal_uart_is_free(0))
 100a6ae:	e001      	b.n	100a6b4 <console_putchar+0x10>
    taskYIELD();
 100a6b0:	4b0a      	ldr	r3, [pc, #40]	; (100a6dc <console_putchar+0x38>)
 100a6b2:	4798      	blx	r3
  while (!hal_uart_is_free(0))
 100a6b4:	2000      	movs	r0, #0
 100a6b6:	4b0a      	ldr	r3, [pc, #40]	; (100a6e0 <console_putchar+0x3c>)
 100a6b8:	4798      	blx	r3
 100a6ba:	4603      	mov	r3, r0
 100a6bc:	f083 0301 	eor.w	r3, r3, #1
 100a6c0:	b2db      	uxtb	r3, r3
 100a6c2:	2b00      	cmp	r3, #0
 100a6c4:	d1f4      	bne.n	100a6b0 <console_putchar+0xc>
  
  hal_uart_write(0, &c, 1);
 100a6c6:	1dfb      	adds	r3, r7, #7
 100a6c8:	2201      	movs	r2, #1
 100a6ca:	4619      	mov	r1, r3
 100a6cc:	2000      	movs	r0, #0
 100a6ce:	4b05      	ldr	r3, [pc, #20]	; (100a6e4 <console_putchar+0x40>)
 100a6d0:	4798      	blx	r3
}
 100a6d2:	bf00      	nop
 100a6d4:	3708      	adds	r7, #8
 100a6d6:	46bd      	mov	sp, r7
 100a6d8:	bd80      	pop	{r7, pc}
 100a6da:	bf00      	nop
 100a6dc:	010075b5 	.word	0x010075b5
 100a6e0:	0100a0e5 	.word	0x0100a0e5
 100a6e4:	0100a0b5 	.word	0x0100a0b5

0100a6e8 <vApplicationMallocFailedHook>:
void vApplicationStackOverflowHook(xTaskHandle pxTask, signed char *pcTaskName);
void vApplicationTickHook(void);

/*-----------------------------------------------------------*/
void vApplicationMallocFailedHook( void )
{
 100a6e8:	b580      	push	{r7, lr}
 100a6ea:	af00      	add	r7, sp, #0
	 * demo application.  If heap_1.c or heap_2.c are used, then the size of the
	 * heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	 * FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	 * to query the size of free heap space that remains (although it does not
	 * provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
 100a6ec:	4b01      	ldr	r3, [pc, #4]	; (100a6f4 <vApplicationMallocFailedHook+0xc>)
 100a6ee:	4798      	blx	r3
	for (;;) {
		while (1) {
 100a6f0:	e7fe      	b.n	100a6f0 <vApplicationMallocFailedHook+0x8>
 100a6f2:	bf00      	nop
 100a6f4:	01007615 	.word	0x01007615

0100a6f8 <vApplicationStackOverflowHook>:
	 * memory allocated by the kernel to any task that has since been deleted. */
}

/*-----------------------------------------------------------*/
void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName )
{
 100a6f8:	b580      	push	{r7, lr}
 100a6fa:	b082      	sub	sp, #8
 100a6fc:	af00      	add	r7, sp, #0
 100a6fe:	6078      	str	r0, [r7, #4]
 100a700:	6039      	str	r1, [r7, #0]
	(void)pxTask;

	/* Run time stack overflow checking is performed if
	 * configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	 * function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
 100a702:	4b01      	ldr	r3, [pc, #4]	; (100a708 <vApplicationStackOverflowHook+0x10>)
 100a704:	4798      	blx	r3
	for (;;) {
		while (1) {
 100a706:	e7fe      	b.n	100a706 <vApplicationStackOverflowHook+0xe>
 100a708:	01007615 	.word	0x01007615

0100a70c <ioport_set_pin_level>:
{
 100a70c:	b480      	push	{r7}
 100a70e:	b08b      	sub	sp, #44	; 0x2c
 100a710:	af00      	add	r7, sp, #0
 100a712:	6078      	str	r0, [r7, #4]
 100a714:	460b      	mov	r3, r1
 100a716:	70fb      	strb	r3, [r7, #3]
 100a718:	687b      	ldr	r3, [r7, #4]
 100a71a:	627b      	str	r3, [r7, #36]	; 0x24
 100a71c:	78fb      	ldrb	r3, [r7, #3]
 100a71e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 100a722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 100a724:	61fb      	str	r3, [r7, #28]
 100a726:	69fb      	ldr	r3, [r7, #28]
 100a728:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
 100a72a:	69bb      	ldr	r3, [r7, #24]
 100a72c:	095b      	lsrs	r3, r3, #5
 100a72e:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
 100a730:	697b      	ldr	r3, [r7, #20]
 100a732:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 100a736:	f203 7307 	addw	r3, r3, #1799	; 0x707
 100a73a:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
 100a73c:	613b      	str	r3, [r7, #16]
	if (level) {
 100a73e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 100a742:	2b00      	cmp	r3, #0
 100a744:	d009      	beq.n	100a75a <ioport_set_pin_level+0x4e>
 100a746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 100a748:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
 100a74a:	68fb      	ldr	r3, [r7, #12]
 100a74c:	f003 031f 	and.w	r3, r3, #31
 100a750:	2201      	movs	r2, #1
 100a752:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
 100a754:	693b      	ldr	r3, [r7, #16]
 100a756:	631a      	str	r2, [r3, #48]	; 0x30
}
 100a758:	e008      	b.n	100a76c <ioport_set_pin_level+0x60>
 100a75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 100a75c:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
 100a75e:	68bb      	ldr	r3, [r7, #8]
 100a760:	f003 031f 	and.w	r3, r3, #31
 100a764:	2201      	movs	r2, #1
 100a766:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
 100a768:	693b      	ldr	r3, [r7, #16]
 100a76a:	635a      	str	r2, [r3, #52]	; 0x34
 100a76c:	bf00      	nop
 100a76e:	372c      	adds	r7, #44	; 0x2c
 100a770:	46bd      	mov	sp, r7
 100a772:	bc80      	pop	{r7}
 100a774:	4770      	bx	lr

0100a776 <ioport_toggle_pin_level>:
{
 100a776:	b480      	push	{r7}
 100a778:	b08b      	sub	sp, #44	; 0x2c
 100a77a:	af00      	add	r7, sp, #0
 100a77c:	6078      	str	r0, [r7, #4]
 100a77e:	687b      	ldr	r3, [r7, #4]
 100a780:	627b      	str	r3, [r7, #36]	; 0x24
 100a782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 100a784:	623b      	str	r3, [r7, #32]
 100a786:	6a3b      	ldr	r3, [r7, #32]
 100a788:	61fb      	str	r3, [r7, #28]
	return pin >> 5;
 100a78a:	69fb      	ldr	r3, [r7, #28]
 100a78c:	095b      	lsrs	r3, r3, #5
 100a78e:	61bb      	str	r3, [r7, #24]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
 100a790:	69bb      	ldr	r3, [r7, #24]
 100a792:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 100a796:	f203 7307 	addw	r3, r3, #1799	; 0x707
 100a79a:	025b      	lsls	r3, r3, #9
	Pio *port = arch_ioport_pin_to_base(pin);
 100a79c:	617b      	str	r3, [r7, #20]
 100a79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 100a7a0:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
 100a7a2:	693b      	ldr	r3, [r7, #16]
 100a7a4:	f003 031f 	and.w	r3, r3, #31
 100a7a8:	2201      	movs	r2, #1
 100a7aa:	fa02 f303 	lsl.w	r3, r2, r3
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);
 100a7ae:	60fb      	str	r3, [r7, #12]
	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
 100a7b0:	697b      	ldr	r3, [r7, #20]
 100a7b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 100a7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 100a7b6:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
 100a7b8:	68bb      	ldr	r3, [r7, #8]
 100a7ba:	f003 031f 	and.w	r3, r3, #31
 100a7be:	2101      	movs	r1, #1
 100a7c0:	fa01 f303 	lsl.w	r3, r1, r3
	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
 100a7c4:	4013      	ands	r3, r2
 100a7c6:	2b00      	cmp	r3, #0
 100a7c8:	d003      	beq.n	100a7d2 <ioport_toggle_pin_level+0x5c>
		port->PIO_CODR = mask;
 100a7ca:	697b      	ldr	r3, [r7, #20]
 100a7cc:	68fa      	ldr	r2, [r7, #12]
 100a7ce:	635a      	str	r2, [r3, #52]	; 0x34
}
 100a7d0:	e002      	b.n	100a7d8 <ioport_toggle_pin_level+0x62>
		port->PIO_SODR = mask;
 100a7d2:	697b      	ldr	r3, [r7, #20]
 100a7d4:	68fa      	ldr	r2, [r7, #12]
 100a7d6:	631a      	str	r2, [r3, #48]	; 0x30
 100a7d8:	bf00      	nop
 100a7da:	372c      	adds	r7, #44	; 0x2c
 100a7dc:	46bd      	mov	sp, r7
 100a7de:	bc80      	pop	{r7}
 100a7e0:	4770      	bx	lr
	...

0100a7e4 <on_pdu>:
#include <lcd.h>
#include <tx-task.h>

static BOOL 
on_pdu(spip_iface_t *iface, struct spip_pdu *pdu, void *userdata)
{
 100a7e4:	b580      	push	{r7, lr}
 100a7e6:	b086      	sub	sp, #24
 100a7e8:	af00      	add	r7, sp, #0
 100a7ea:	60f8      	str	r0, [r7, #12]
 100a7ec:	60b9      	str	r1, [r7, #8]
 100a7ee:	607a      	str	r2, [r7, #4]
  tx_task_t *tt = (tx_task_t *) userdata;
 100a7f0:	687b      	ldr	r3, [r7, #4]
 100a7f2:	617b      	str	r3, [r7, #20]
  
  switch (pdu->command) {
 100a7f4:	68bb      	ldr	r3, [r7, #8]
 100a7f6:	7a1b      	ldrb	r3, [r3, #8]
 100a7f8:	2b02      	cmp	r3, #2
 100a7fa:	d030      	beq.n	100a85e <on_pdu+0x7a>
 100a7fc:	2b03      	cmp	r3, #3
 100a7fe:	d002      	beq.n	100a806 <on_pdu+0x22>
 100a800:	2b01      	cmp	r3, #1
 100a802:	d009      	beq.n	100a818 <on_pdu+0x34>
 100a804:	e047      	b.n	100a896 <on_pdu+0xb2>
      tx_task_push_frame(tt, pdu->data, pdu->size);
      break;
#endif /* SPIP_ATTACK_MODE */
      
    case SPIP_COMMAND_LCD:
      if (pdu->size == 18) {
 100a806:	68bb      	ldr	r3, [r7, #8]
 100a808:	895b      	ldrh	r3, [r3, #10]
 100a80a:	2b12      	cmp	r3, #18
 100a80c:	d13e      	bne.n	100a88c <on_pdu+0xa8>
        pdu->data[17] = 0;
 100a80e:	68bb      	ldr	r3, [r7, #8]
 100a810:	2200      	movs	r2, #0
 100a812:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
        //lcd_puts(pdu->data[0], (const char *) pdu->data + 1);
      }
      break;
 100a816:	e039      	b.n	100a88c <on_pdu+0xa8>
      
    case SPIP_COMMAND_LED_SET_MASK:
      if (pdu->size == 1) {
 100a818:	68bb      	ldr	r3, [r7, #8]
 100a81a:	895b      	ldrh	r3, [r3, #10]
 100a81c:	2b01      	cmp	r3, #1
 100a81e:	d137      	bne.n	100a890 <on_pdu+0xac>
        if (pdu->data[0] & 1)
 100a820:	68bb      	ldr	r3, [r7, #8]
 100a822:	7d1b      	ldrb	r3, [r3, #20]
 100a824:	f003 0301 	and.w	r3, r3, #1
 100a828:	2b00      	cmp	r3, #0
 100a82a:	d004      	beq.n	100a836 <on_pdu+0x52>
          LED_On(LED0);
 100a82c:	2100      	movs	r1, #0
 100a82e:	200c      	movs	r0, #12
 100a830:	4b1b      	ldr	r3, [pc, #108]	; (100a8a0 <on_pdu+0xbc>)
 100a832:	4798      	blx	r3
 100a834:	e003      	b.n	100a83e <on_pdu+0x5a>
        else
          LED_Off(LED0);
 100a836:	2101      	movs	r1, #1
 100a838:	200c      	movs	r0, #12
 100a83a:	4b19      	ldr	r3, [pc, #100]	; (100a8a0 <on_pdu+0xbc>)
 100a83c:	4798      	blx	r3
          
        if (pdu->data[0] & 2)
 100a83e:	68bb      	ldr	r3, [r7, #8]
 100a840:	7d1b      	ldrb	r3, [r3, #20]
 100a842:	f003 0302 	and.w	r3, r3, #2
 100a846:	2b00      	cmp	r3, #0
 100a848:	d004      	beq.n	100a854 <on_pdu+0x70>
          LED_On(LED1);
 100a84a:	2100      	movs	r1, #0
 100a84c:	200f      	movs	r0, #15
 100a84e:	4b14      	ldr	r3, [pc, #80]	; (100a8a0 <on_pdu+0xbc>)
 100a850:	4798      	blx	r3
        else
          LED_Off(LED1);
      }
      break;
 100a852:	e01d      	b.n	100a890 <on_pdu+0xac>
          LED_Off(LED1);
 100a854:	2101      	movs	r1, #1
 100a856:	200f      	movs	r0, #15
 100a858:	4b11      	ldr	r3, [pc, #68]	; (100a8a0 <on_pdu+0xbc>)
 100a85a:	4798      	blx	r3
      break;
 100a85c:	e018      	b.n	100a890 <on_pdu+0xac>
      
    case SPIP_COMMAND_LED_TOGGLE_MASK:
      if (pdu->size == 1) {
 100a85e:	68bb      	ldr	r3, [r7, #8]
 100a860:	895b      	ldrh	r3, [r3, #10]
 100a862:	2b01      	cmp	r3, #1
 100a864:	d116      	bne.n	100a894 <on_pdu+0xb0>
        if (pdu->data[0] & 1)
 100a866:	68bb      	ldr	r3, [r7, #8]
 100a868:	7d1b      	ldrb	r3, [r3, #20]
 100a86a:	f003 0301 	and.w	r3, r3, #1
 100a86e:	2b00      	cmp	r3, #0
 100a870:	d002      	beq.n	100a878 <on_pdu+0x94>
          LED_Toggle(LED0);
 100a872:	200c      	movs	r0, #12
 100a874:	4b0b      	ldr	r3, [pc, #44]	; (100a8a4 <on_pdu+0xc0>)
 100a876:	4798      	blx	r3
                
        if (pdu->data[0] & 2)
 100a878:	68bb      	ldr	r3, [r7, #8]
 100a87a:	7d1b      	ldrb	r3, [r3, #20]
 100a87c:	f003 0302 	and.w	r3, r3, #2
 100a880:	2b00      	cmp	r3, #0
 100a882:	d007      	beq.n	100a894 <on_pdu+0xb0>
          LED_Toggle(LED1);
 100a884:	200f      	movs	r0, #15
 100a886:	4b07      	ldr	r3, [pc, #28]	; (100a8a4 <on_pdu+0xc0>)
 100a888:	4798      	blx	r3
      }
      break;
 100a88a:	e003      	b.n	100a894 <on_pdu+0xb0>
      break;
 100a88c:	bf00      	nop
 100a88e:	e002      	b.n	100a896 <on_pdu+0xb2>
      break;
 100a890:	bf00      	nop
 100a892:	e000      	b.n	100a896 <on_pdu+0xb2>
      break;
 100a894:	bf00      	nop
  }
  
  return TRUE;
 100a896:	2301      	movs	r3, #1
}
 100a898:	4618      	mov	r0, r3
 100a89a:	3718      	adds	r7, #24
 100a89c:	46bd      	mov	sp, r7
 100a89e:	bd80      	pop	{r7, pc}
 100a8a0:	0100a70d 	.word	0x0100a70d
 100a8a4:	0100a777 	.word	0x0100a777

0100a8a8 <spip_iface_board_loop>:

BOOL
spip_iface_board_loop(spip_iface_t *iface, tx_task_t *tt)
{
 100a8a8:	b580      	push	{r7, lr}
 100a8aa:	b082      	sub	sp, #8
 100a8ac:	af00      	add	r7, sp, #0
 100a8ae:	6078      	str	r0, [r7, #4]
 100a8b0:	6039      	str	r1, [r7, #0]
  return spip_iface_loop(iface, on_pdu, tt);
 100a8b2:	683a      	ldr	r2, [r7, #0]
 100a8b4:	4904      	ldr	r1, [pc, #16]	; (100a8c8 <spip_iface_board_loop+0x20>)
 100a8b6:	6878      	ldr	r0, [r7, #4]
 100a8b8:	4b04      	ldr	r3, [pc, #16]	; (100a8cc <spip_iface_board_loop+0x24>)
 100a8ba:	4798      	blx	r3
 100a8bc:	4603      	mov	r3, r0
}
 100a8be:	4618      	mov	r0, r3
 100a8c0:	3708      	adds	r7, #8
 100a8c2:	46bd      	mov	sp, r7
 100a8c4:	bd80      	pop	{r7, pc}
 100a8c6:	bf00      	nop
 100a8c8:	0100a7e5 	.word	0x0100a7e5
 100a8cc:	0100aded 	.word	0x0100aded

0100a8d0 <phy_set_rx_handler>:
phy_rx_handler_t rx_handler = NULL;
void *rx_handler_userdata = NULL;

void 
phy_set_rx_handler(phy_rx_handler_t handler, void *userdata)
{
 100a8d0:	b480      	push	{r7}
 100a8d2:	b083      	sub	sp, #12
 100a8d4:	af00      	add	r7, sp, #0
 100a8d6:	6078      	str	r0, [r7, #4]
 100a8d8:	6039      	str	r1, [r7, #0]
  rx_handler = handler;
 100a8da:	4a05      	ldr	r2, [pc, #20]	; (100a8f0 <phy_set_rx_handler+0x20>)
 100a8dc:	687b      	ldr	r3, [r7, #4]
 100a8de:	6013      	str	r3, [r2, #0]
  rx_handler_userdata = userdata;
 100a8e0:	4a04      	ldr	r2, [pc, #16]	; (100a8f4 <phy_set_rx_handler+0x24>)
 100a8e2:	683b      	ldr	r3, [r7, #0]
 100a8e4:	6013      	str	r3, [r2, #0]
}
 100a8e6:	bf00      	nop
 100a8e8:	370c      	adds	r7, #12
 100a8ea:	46bd      	mov	sp, r7
 100a8ec:	bc80      	pop	{r7}
 100a8ee:	4770      	bx	lr
 100a8f0:	20005a50 	.word	0x20005a50
 100a8f4:	20005a54 	.word	0x20005a54

0100a8f8 <ioport_set_pin_level>:
{
 100a8f8:	b480      	push	{r7}
 100a8fa:	b08b      	sub	sp, #44	; 0x2c
 100a8fc:	af00      	add	r7, sp, #0
 100a8fe:	6078      	str	r0, [r7, #4]
 100a900:	460b      	mov	r3, r1
 100a902:	70fb      	strb	r3, [r7, #3]
 100a904:	687b      	ldr	r3, [r7, #4]
 100a906:	627b      	str	r3, [r7, #36]	; 0x24
 100a908:	78fb      	ldrb	r3, [r7, #3]
 100a90a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 100a90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 100a910:	61fb      	str	r3, [r7, #28]
 100a912:	69fb      	ldr	r3, [r7, #28]
 100a914:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
 100a916:	69bb      	ldr	r3, [r7, #24]
 100a918:	095b      	lsrs	r3, r3, #5
 100a91a:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
 100a91c:	697b      	ldr	r3, [r7, #20]
 100a91e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 100a922:	f203 7307 	addw	r3, r3, #1799	; 0x707
 100a926:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
 100a928:	613b      	str	r3, [r7, #16]
	if (level) {
 100a92a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 100a92e:	2b00      	cmp	r3, #0
 100a930:	d009      	beq.n	100a946 <ioport_set_pin_level+0x4e>
 100a932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 100a934:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
 100a936:	68fb      	ldr	r3, [r7, #12]
 100a938:	f003 031f 	and.w	r3, r3, #31
 100a93c:	2201      	movs	r2, #1
 100a93e:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
 100a940:	693b      	ldr	r3, [r7, #16]
 100a942:	631a      	str	r2, [r3, #48]	; 0x30
}
 100a944:	e008      	b.n	100a958 <ioport_set_pin_level+0x60>
 100a946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 100a948:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
 100a94a:	68bb      	ldr	r3, [r7, #8]
 100a94c:	f003 031f 	and.w	r3, r3, #31
 100a950:	2201      	movs	r2, #1
 100a952:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
 100a954:	693b      	ldr	r3, [r7, #16]
 100a956:	635a      	str	r2, [r3, #52]	; 0x34
 100a958:	bf00      	nop
 100a95a:	372c      	adds	r7, #44	; 0x2c
 100a95c:	46bd      	mov	sp, r7
 100a95e:	bc80      	pop	{r7}
 100a960:	4770      	bx	lr
	...

0100a964 <phy_tx_take_exception>:
extern void *rx_handler_userdata;
static BOOL sb_pending_except;

BOOL
phy_tx_take_exception(void)
{
 100a964:	b480      	push	{r7}
 100a966:	b083      	sub	sp, #12
 100a968:	af00      	add	r7, sp, #0
  BOOL ret = sb_pending_except;
 100a96a:	4b06      	ldr	r3, [pc, #24]	; (100a984 <phy_tx_take_exception+0x20>)
 100a96c:	781b      	ldrb	r3, [r3, #0]
 100a96e:	71fb      	strb	r3, [r7, #7]
  
  sb_pending_except = FALSE;
 100a970:	4b04      	ldr	r3, [pc, #16]	; (100a984 <phy_tx_take_exception+0x20>)
 100a972:	2200      	movs	r2, #0
 100a974:	701a      	strb	r2, [r3, #0]
  
  return ret;
 100a976:	79fb      	ldrb	r3, [r7, #7]
}
 100a978:	4618      	mov	r0, r3
 100a97a:	370c      	adds	r7, #12
 100a97c:	46bd      	mov	sp, r7
 100a97e:	bc80      	pop	{r7}
 100a980:	4770      	bx	lr
 100a982:	bf00      	nop
 100a984:	20005a70 	.word	0x20005a70

0100a988 <_tx_result_handler>:

static void 
_tx_result_handler(tx_cfm_t *px_tx_result)
{
 100a988:	b480      	push	{r7}
 100a98a:	b083      	sub	sp, #12
 100a98c:	af00      	add	r7, sp, #0
 100a98e:	6078      	str	r0, [r7, #4]
  if (px_tx_result->uc_tx_result != TX_RESULT_SUCCESS)
    {}//lcd_printf(1, "TX ERROR: %d", px_tx_result->uc_tx_result);
}
 100a990:	bf00      	nop
 100a992:	370c      	adds	r7, #12
 100a994:	46bd      	mov	sp, r7
 100a996:	bc80      	pop	{r7}
 100a998:	4770      	bx	lr
	...

0100a99c <_rx_handler>:

static void 
_rx_handler(rx_msg_t *x_read_msg)
{
 100a99c:	b580      	push	{r7, lr}
 100a99e:	b082      	sub	sp, #8
 100a9a0:	af00      	add	r7, sp, #0
 100a9a2:	6078      	str	r0, [r7, #4]
  if (rx_handler != NULL && x_read_msg->us_data_len)
 100a9a4:	4b0b      	ldr	r3, [pc, #44]	; (100a9d4 <_rx_handler+0x38>)
 100a9a6:	681b      	ldr	r3, [r3, #0]
 100a9a8:	2b00      	cmp	r3, #0
 100a9aa:	d00e      	beq.n	100a9ca <_rx_handler+0x2e>
 100a9ac:	687b      	ldr	r3, [r7, #4]
 100a9ae:	8a1b      	ldrh	r3, [r3, #16]
 100a9b0:	b29b      	uxth	r3, r3
 100a9b2:	2b00      	cmp	r3, #0
 100a9b4:	d009      	beq.n	100a9ca <_rx_handler+0x2e>
    rx_handler(rx_handler_userdata, x_read_msg->puc_data_buf, x_read_msg->us_data_len);
 100a9b6:	4b07      	ldr	r3, [pc, #28]	; (100a9d4 <_rx_handler+0x38>)
 100a9b8:	681b      	ldr	r3, [r3, #0]
 100a9ba:	4a07      	ldr	r2, [pc, #28]	; (100a9d8 <_rx_handler+0x3c>)
 100a9bc:	6810      	ldr	r0, [r2, #0]
 100a9be:	687a      	ldr	r2, [r7, #4]
 100a9c0:	69d1      	ldr	r1, [r2, #28]
 100a9c2:	687a      	ldr	r2, [r7, #4]
 100a9c4:	8a12      	ldrh	r2, [r2, #16]
 100a9c6:	b292      	uxth	r2, r2
 100a9c8:	4798      	blx	r3
}
 100a9ca:	bf00      	nop
 100a9cc:	3708      	adds	r7, #8
 100a9ce:	46bd      	mov	sp, r7
 100a9d0:	bd80      	pop	{r7, pc}
 100a9d2:	bf00      	nop
 100a9d4:	20005a50 	.word	0x20005a50
 100a9d8:	20005a54 	.word	0x20005a54

0100a9dc <_error_handler>:

static void 
_error_handler(atpl360_exception_t exception)
{
 100a9dc:	b580      	push	{r7, lr}
 100a9de:	b082      	sub	sp, #8
 100a9e0:	af00      	add	r7, sp, #0
 100a9e2:	4603      	mov	r3, r0
 100a9e4:	71fb      	strb	r3, [r7, #7]
  if (exception == ATPL360_EXCEPTION_RESET) {
 100a9e6:	79fb      	ldrb	r3, [r7, #7]
 100a9e8:	2b02      	cmp	r3, #2
 100a9ea:	d103      	bne.n	100a9f4 <_error_handler+0x18>
    printf("PL360 Enabled...\n");
 100a9ec:	4809      	ldr	r0, [pc, #36]	; (100aa14 <_error_handler+0x38>)
 100a9ee:	4b0a      	ldr	r3, [pc, #40]	; (100aa18 <_error_handler+0x3c>)
 100a9f0:	4798      	blx	r3
 100a9f2:	e004      	b.n	100a9fe <_error_handler+0x22>
    } else {
    printf("ATPL360 Exception code error: %u\n", (unsigned int)exception);
 100a9f4:	79fb      	ldrb	r3, [r7, #7]
 100a9f6:	4619      	mov	r1, r3
 100a9f8:	4808      	ldr	r0, [pc, #32]	; (100aa1c <_error_handler+0x40>)
 100a9fa:	4b07      	ldr	r3, [pc, #28]	; (100aa18 <_error_handler+0x3c>)
 100a9fc:	4798      	blx	r3
  }

  LED_On(LED1);
 100a9fe:	2100      	movs	r1, #0
 100aa00:	200f      	movs	r0, #15
 100aa02:	4b07      	ldr	r3, [pc, #28]	; (100aa20 <_error_handler+0x44>)
 100aa04:	4798      	blx	r3
  sb_pending_except = TRUE;
 100aa06:	4b07      	ldr	r3, [pc, #28]	; (100aa24 <_error_handler+0x48>)
 100aa08:	2201      	movs	r2, #1
 100aa0a:	701a      	strb	r2, [r3, #0]
}
 100aa0c:	bf00      	nop
 100aa0e:	3708      	adds	r7, #8
 100aa10:	46bd      	mov	sp, r7
 100aa12:	bd80      	pop	{r7, pc}
 100aa14:	01021fcc 	.word	0x01021fcc
 100aa18:	0100beb5 	.word	0x0100beb5
 100aa1c:	01021fe0 	.word	0x01021fe0
 100aa20:	0100a8f9 	.word	0x0100a8f9
 100aa24:	20005a70 	.word	0x20005a70

0100aa28 <_get_pl360_bin_addressing>:
#  error This compiler is not supported for now.
#endif

static uint32_t 
_get_pl360_bin_addressing(uint32_t *pul_address)
{
 100aa28:	b480      	push	{r7}
 100aa2a:	b087      	sub	sp, #28
 100aa2c:	af00      	add	r7, sp, #0
 100aa2e:	6078      	str	r0, [r7, #4]
#if defined (__CC_ARM)
  ul_bin_addr = (int)(atpl_bin_start - 1);
  puc_bin_start = atpl_bin_start - 1;
  puc_bin_end = atpl_bin_end;
#elif defined (__GNUC__)
  ul_bin_addr = (uint32_t) &atpl_bin_start;
 100aa30:	4b08      	ldr	r3, [pc, #32]	; (100aa54 <_get_pl360_bin_addressing+0x2c>)
 100aa32:	617b      	str	r3, [r7, #20]
  puc_bin_start = (uint8_t *) &atpl_bin_start;
 100aa34:	4b07      	ldr	r3, [pc, #28]	; (100aa54 <_get_pl360_bin_addressing+0x2c>)
 100aa36:	613b      	str	r3, [r7, #16]
  puc_bin_end = (uint8_t *) &atpl_bin_end;
 100aa38:	4b07      	ldr	r3, [pc, #28]	; (100aa58 <_get_pl360_bin_addressing+0x30>)
 100aa3a:	60fb      	str	r3, [r7, #12]
  puc_bin_end = __section_end("P_atpl_bin");
#else
  #error This compiler is not supported for now.
#endif

  *pul_address = ul_bin_addr;
 100aa3c:	687b      	ldr	r3, [r7, #4]
 100aa3e:	697a      	ldr	r2, [r7, #20]
 100aa40:	601a      	str	r2, [r3, #0]
  return ((uint32_t)puc_bin_end - (uint32_t)puc_bin_start);
 100aa42:	68fa      	ldr	r2, [r7, #12]
 100aa44:	693b      	ldr	r3, [r7, #16]
 100aa46:	1ad3      	subs	r3, r2, r3
}
 100aa48:	4618      	mov	r0, r3
 100aa4a:	371c      	adds	r7, #28
 100aa4c:	46bd      	mov	sp, r7
 100aa4e:	bc80      	pop	{r7}
 100aa50:	4770      	bx	lr
 100aa52:	bf00      	nop
 100aa54:	01011a00 	.word	0x01011a00
 100aa58:	01021600 	.word	0x01021600

0100aa5c <_configure_tx_coup_params>:

static void 
_configure_tx_coup_params(uint8_t uc_chn)
{
 100aa5c:	b580      	push	{r7, lr}
 100aa5e:	b088      	sub	sp, #32
 100aa60:	af00      	add	r7, sp, #0
 100aa62:	4603      	mov	r3, r0
 100aa64:	71fb      	strb	r3, [r7, #7]
  uint16_t *pus_equ_hi, *pus_equ_vlo, *pus_gain_hi, *pus_gain_vlo;
  uint32_t *pul_dacc_table;

  sx_atpl360_desc.set_config(ATPL360_REG_MAX_RMS_TABLE_HI, (uint32_t *)spul_max_rms_hi[uc_chn - 1], NUM_TX_LEVELS << 2);
 100aa66:	4b35      	ldr	r3, [pc, #212]	; (100ab3c <_configure_tx_coup_params+0xe0>)
 100aa68:	68db      	ldr	r3, [r3, #12]
 100aa6a:	79fa      	ldrb	r2, [r7, #7]
 100aa6c:	3a01      	subs	r2, #1
 100aa6e:	0152      	lsls	r2, r2, #5
 100aa70:	4933      	ldr	r1, [pc, #204]	; (100ab40 <_configure_tx_coup_params+0xe4>)
 100aa72:	4411      	add	r1, r2
 100aa74:	2220      	movs	r2, #32
 100aa76:	f244 000a 	movw	r0, #16394	; 0x400a
 100aa7a:	4798      	blx	r3
  sx_atpl360_desc.set_config(ATPL360_REG_MAX_RMS_TABLE_VLO, (uint32_t *)spul_max_rms_vlo[uc_chn - 1], NUM_TX_LEVELS << 2);
 100aa7c:	4b2f      	ldr	r3, [pc, #188]	; (100ab3c <_configure_tx_coup_params+0xe0>)
 100aa7e:	68db      	ldr	r3, [r3, #12]
 100aa80:	79fa      	ldrb	r2, [r7, #7]
 100aa82:	3a01      	subs	r2, #1
 100aa84:	0152      	lsls	r2, r2, #5
 100aa86:	492f      	ldr	r1, [pc, #188]	; (100ab44 <_configure_tx_coup_params+0xe8>)
 100aa88:	4411      	add	r1, r2
 100aa8a:	2220      	movs	r2, #32
 100aa8c:	f244 000b 	movw	r0, #16395	; 0x400b
 100aa90:	4798      	blx	r3
  sx_atpl360_desc.set_config(ATPL360_REG_THRESHOLDS_TABLE_HI, (uint32_t *)spul_th_hi[uc_chn - 1], NUM_TX_LEVELS << 3);
 100aa92:	4b2a      	ldr	r3, [pc, #168]	; (100ab3c <_configure_tx_coup_params+0xe0>)
 100aa94:	68db      	ldr	r3, [r3, #12]
 100aa96:	79fa      	ldrb	r2, [r7, #7]
 100aa98:	3a01      	subs	r2, #1
 100aa9a:	0192      	lsls	r2, r2, #6
 100aa9c:	492a      	ldr	r1, [pc, #168]	; (100ab48 <_configure_tx_coup_params+0xec>)
 100aa9e:	4411      	add	r1, r2
 100aaa0:	2240      	movs	r2, #64	; 0x40
 100aaa2:	f244 000c 	movw	r0, #16396	; 0x400c
 100aaa6:	4798      	blx	r3
  sx_atpl360_desc.set_config(ATPL360_REG_THRESHOLDS_TABLE_VLO, (uint32_t *)spul_th_vlo[uc_chn - 1], NUM_TX_LEVELS << 3);
 100aaa8:	4b24      	ldr	r3, [pc, #144]	; (100ab3c <_configure_tx_coup_params+0xe0>)
 100aaaa:	68db      	ldr	r3, [r3, #12]
 100aaac:	79fa      	ldrb	r2, [r7, #7]
 100aaae:	3a01      	subs	r2, #1
 100aab0:	0192      	lsls	r2, r2, #6
 100aab2:	4926      	ldr	r1, [pc, #152]	; (100ab4c <_configure_tx_coup_params+0xf0>)
 100aab4:	4411      	add	r1, r2
 100aab6:	2240      	movs	r2, #64	; 0x40
 100aab8:	f244 000e 	movw	r0, #16398	; 0x400e
 100aabc:	4798      	blx	r3

  if (uc_chn >= 2) {
 100aabe:	79fb      	ldrb	r3, [r7, #7]
 100aac0:	2b01      	cmp	r3, #1
 100aac2:	d90a      	bls.n	100aada <_configure_tx_coup_params+0x7e>
    /* Channel 2 - 8 */
    pus_equ_hi = (uint16_t *)spus_equ_hi_chn_2_8;
 100aac4:	4b22      	ldr	r3, [pc, #136]	; (100ab50 <_configure_tx_coup_params+0xf4>)
 100aac6:	61fb      	str	r3, [r7, #28]
    pus_equ_vlo = (uint16_t *)spus_equ_vlo_chn_2_8;
 100aac8:	4b22      	ldr	r3, [pc, #136]	; (100ab54 <_configure_tx_coup_params+0xf8>)
 100aaca:	61bb      	str	r3, [r7, #24]
    pus_gain_hi = (uint16_t *)spus_gain_hi_chn_2_8;
 100aacc:	4b22      	ldr	r3, [pc, #136]	; (100ab58 <_configure_tx_coup_params+0xfc>)
 100aace:	617b      	str	r3, [r7, #20]
    pus_gain_vlo = (uint16_t *)spus_gain_vlo_chn_2_8;
 100aad0:	4b22      	ldr	r3, [pc, #136]	; (100ab5c <_configure_tx_coup_params+0x100>)
 100aad2:	613b      	str	r3, [r7, #16]
    pul_dacc_table = (uint32_t *)spul_dacc_cfg_chn_2_8;
 100aad4:	4b22      	ldr	r3, [pc, #136]	; (100ab60 <_configure_tx_coup_params+0x104>)
 100aad6:	60fb      	str	r3, [r7, #12]
 100aad8:	e009      	b.n	100aaee <_configure_tx_coup_params+0x92>
    } else {
    /* Channel 1 */
    pus_equ_hi = (uint16_t *)spus_equ_hi_chn_1;
 100aada:	4b22      	ldr	r3, [pc, #136]	; (100ab64 <_configure_tx_coup_params+0x108>)
 100aadc:	61fb      	str	r3, [r7, #28]
    pus_equ_vlo = (uint16_t *)spus_equ_vlo_chn_1;
 100aade:	4b22      	ldr	r3, [pc, #136]	; (100ab68 <_configure_tx_coup_params+0x10c>)
 100aae0:	61bb      	str	r3, [r7, #24]
    pus_gain_hi = (uint16_t *)spus_gain_hi_chn_1;
 100aae2:	4b22      	ldr	r3, [pc, #136]	; (100ab6c <_configure_tx_coup_params+0x110>)
 100aae4:	617b      	str	r3, [r7, #20]
    pus_gain_vlo = (uint16_t *)spus_gain_vlo_chn_1;
 100aae6:	4b22      	ldr	r3, [pc, #136]	; (100ab70 <_configure_tx_coup_params+0x114>)
 100aae8:	613b      	str	r3, [r7, #16]
    pul_dacc_table = (uint32_t *)spul_dacc_cfg_chn_1;
 100aaea:	4b22      	ldr	r3, [pc, #136]	; (100ab74 <_configure_tx_coup_params+0x118>)
 100aaec:	60fb      	str	r3, [r7, #12]
  }

  sx_atpl360_desc.set_config(ATPL360_REG_GAIN_TABLE_HI, pus_gain_hi, 6);
 100aaee:	4b13      	ldr	r3, [pc, #76]	; (100ab3c <_configure_tx_coup_params+0xe0>)
 100aaf0:	68db      	ldr	r3, [r3, #12]
 100aaf2:	2206      	movs	r2, #6
 100aaf4:	6979      	ldr	r1, [r7, #20]
 100aaf6:	f244 0012 	movw	r0, #16402	; 0x4012
 100aafa:	4798      	blx	r3
  sx_atpl360_desc.set_config(ATPL360_REG_GAIN_TABLE_VLO, pus_gain_vlo, 6);
 100aafc:	4b0f      	ldr	r3, [pc, #60]	; (100ab3c <_configure_tx_coup_params+0xe0>)
 100aafe:	68db      	ldr	r3, [r3, #12]
 100ab00:	2206      	movs	r2, #6
 100ab02:	6939      	ldr	r1, [r7, #16]
 100ab04:	f244 0014 	movw	r0, #16404	; 0x4014
 100ab08:	4798      	blx	r3
  sx_atpl360_desc.set_config(ATPL360_REG_DACC_TABLE_CFG, pul_dacc_table, 17 << 2);
 100ab0a:	4b0c      	ldr	r3, [pc, #48]	; (100ab3c <_configure_tx_coup_params+0xe0>)
 100ab0c:	68db      	ldr	r3, [r3, #12]
 100ab0e:	2244      	movs	r2, #68	; 0x44
 100ab10:	68f9      	ldr	r1, [r7, #12]
 100ab12:	f244 0015 	movw	r0, #16405	; 0x4015
 100ab16:	4798      	blx	r3
  sx_atpl360_desc.set_config(ATPL360_REG_PREDIST_COEF_TABLE_HI, pus_equ_hi, 97 << 1);
 100ab18:	4b08      	ldr	r3, [pc, #32]	; (100ab3c <_configure_tx_coup_params+0xe0>)
 100ab1a:	68db      	ldr	r3, [r3, #12]
 100ab1c:	22c2      	movs	r2, #194	; 0xc2
 100ab1e:	69f9      	ldr	r1, [r7, #28]
 100ab20:	f244 000f 	movw	r0, #16399	; 0x400f
 100ab24:	4798      	blx	r3
  sx_atpl360_desc.set_config(ATPL360_REG_PREDIST_COEF_TABLE_VLO, pus_equ_vlo, 97 << 1);
 100ab26:	4b05      	ldr	r3, [pc, #20]	; (100ab3c <_configure_tx_coup_params+0xe0>)
 100ab28:	68db      	ldr	r3, [r3, #12]
 100ab2a:	22c2      	movs	r2, #194	; 0xc2
 100ab2c:	69b9      	ldr	r1, [r7, #24]
 100ab2e:	f244 0011 	movw	r0, #16401	; 0x4011
 100ab32:	4798      	blx	r3
}
 100ab34:	bf00      	nop
 100ab36:	3720      	adds	r7, #32
 100ab38:	46bd      	mov	sp, r7
 100ab3a:	bd80      	pop	{r7, pc}
 100ab3c:	20005a58 	.word	0x20005a58
 100ab40:	01021614 	.word	0x01021614
 100ab44:	01021714 	.word	0x01021714
 100ab48:	01021814 	.word	0x01021814
 100ab4c:	01021a14 	.word	0x01021a14
 100ab50:	01021dbc 	.word	0x01021dbc
 100ab54:	01021e80 	.word	0x01021e80
 100ab58:	01021c24 	.word	0x01021c24
 100ab5c:	01021c2c 	.word	0x01021c2c
 100ab60:	01021f88 	.word	0x01021f88
 100ab64:	01021c34 	.word	0x01021c34
 100ab68:	01021cf8 	.word	0x01021cf8
 100ab6c:	01021c14 	.word	0x01021c14
 100ab70:	01021c1c 	.word	0x01021c1c
 100ab74:	01021f44 	.word	0x01021f44

0100ab78 <phy_reset_params>:

void
phy_reset_params(void)
{
 100ab78:	b580      	push	{r7, lr}
 100ab7a:	b082      	sub	sp, #8
 100ab7c:	af00      	add	r7, sp, #0
  uint8_t autodetect = 0;
 100ab7e:	2300      	movs	r3, #0
 100ab80:	71fb      	strb	r3, [r7, #7]
  uint8_t impedance = 2;
 100ab82:	2302      	movs	r3, #2
 100ab84:	71bb      	strb	r3, [r7, #6]
  uint8_t channel = 1;
 100ab86:	2301      	movs	r3, #1
 100ab88:	717b      	strb	r3, [r7, #5]
  
  /* Update channel */
  sx_atpl360_desc.set_config(ATPL360_REG_CHANNEL_CFG, &channel, 1);
 100ab8a:	4b0e      	ldr	r3, [pc, #56]	; (100abc4 <phy_reset_params+0x4c>)
 100ab8c:	68db      	ldr	r3, [r3, #12]
 100ab8e:	1d79      	adds	r1, r7, #5
 100ab90:	2201      	movs	r2, #1
 100ab92:	f244 0016 	movw	r0, #16406	; 0x4016
 100ab96:	4798      	blx	r3
  _configure_tx_coup_params(channel); /* TODO: Configure */
 100ab98:	797b      	ldrb	r3, [r7, #5]
 100ab9a:	4618      	mov	r0, r3
 100ab9c:	4b0a      	ldr	r3, [pc, #40]	; (100abc8 <phy_reset_params+0x50>)
 100ab9e:	4798      	blx	r3

  /* Update impedance */
  sx_atpl360_desc.set_config(
 100aba0:	4b08      	ldr	r3, [pc, #32]	; (100abc4 <phy_reset_params+0x4c>)
 100aba2:	68db      	ldr	r3, [r3, #12]
 100aba4:	1df9      	adds	r1, r7, #7
 100aba6:	2201      	movs	r2, #1
 100aba8:	f244 0004 	movw	r0, #16388	; 0x4004
 100abac:	4798      	blx	r3
    ATPL360_REG_CFG_AUTODETECT_IMPEDANCE, 
    &autodetect, 
    1);
    
  sx_atpl360_desc.set_config(
 100abae:	4b05      	ldr	r3, [pc, #20]	; (100abc4 <phy_reset_params+0x4c>)
 100abb0:	68db      	ldr	r3, [r3, #12]
 100abb2:	1db9      	adds	r1, r7, #6
 100abb4:	2201      	movs	r2, #1
 100abb6:	f244 0005 	movw	r0, #16389	; 0x4005
 100abba:	4798      	blx	r3
    ATPL360_REG_CFG_IMPEDANCE, 
    &impedance, 
    1); 
}
 100abbc:	bf00      	nop
 100abbe:	3708      	adds	r7, #8
 100abc0:	46bd      	mov	sp, r7
 100abc2:	bd80      	pop	{r7, pc}
 100abc4:	20005a58 	.word	0x20005a58
 100abc8:	0100aa5d 	.word	0x0100aa5d

0100abcc <atpl360_low_level_init>:

static void
atpl360_low_level_init(void)
{
 100abcc:	b580      	push	{r7, lr}
 100abce:	b08e      	sub	sp, #56	; 0x38
 100abd0:	af00      	add	r7, sp, #0
  atpl360_hal_wrapper_t x_atpl360_hal_wrp;
  uint8_t uc_ret;

  
  /* Init ATPL360 */
  x_atpl360_hal_wrp.plc_init = hal_plc_init;
 100abd2:	4b20      	ldr	r3, [pc, #128]	; (100ac54 <atpl360_low_level_init+0x88>)
 100abd4:	603b      	str	r3, [r7, #0]
  x_atpl360_hal_wrp.plc_reset = hal_plc_reset;
 100abd6:	4b20      	ldr	r3, [pc, #128]	; (100ac58 <atpl360_low_level_init+0x8c>)
 100abd8:	607b      	str	r3, [r7, #4]
  x_atpl360_hal_wrp.plc_set_handler = hal_plc_set_handler;
 100abda:	4b20      	ldr	r3, [pc, #128]	; (100ac5c <atpl360_low_level_init+0x90>)
 100abdc:	60bb      	str	r3, [r7, #8]
  x_atpl360_hal_wrp.plc_send_boot_cmd = hal_plc_send_boot_cmd;
 100abde:	4b20      	ldr	r3, [pc, #128]	; (100ac60 <atpl360_low_level_init+0x94>)
 100abe0:	60fb      	str	r3, [r7, #12]
  x_atpl360_hal_wrp.plc_write_read_cmd = hal_plc_send_wrrd_cmd;
 100abe2:	4b20      	ldr	r3, [pc, #128]	; (100ac64 <atpl360_low_level_init+0x98>)
 100abe4:	613b      	str	r3, [r7, #16]
  x_atpl360_hal_wrp.plc_enable_int = hal_plc_enable_interrupt;
 100abe6:	4b20      	ldr	r3, [pc, #128]	; (100ac68 <atpl360_low_level_init+0x9c>)
 100abe8:	617b      	str	r3, [r7, #20]
  x_atpl360_hal_wrp.plc_delay = hal_plc_delay;
 100abea:	4b20      	ldr	r3, [pc, #128]	; (100ac6c <atpl360_low_level_init+0xa0>)
 100abec:	61bb      	str	r3, [r7, #24]
  atpl360_init(&sx_atpl360_desc, &x_atpl360_hal_wrp);
 100abee:	463b      	mov	r3, r7
 100abf0:	4619      	mov	r1, r3
 100abf2:	481f      	ldr	r0, [pc, #124]	; (100ac70 <atpl360_low_level_init+0xa4>)
 100abf4:	4b1f      	ldr	r3, [pc, #124]	; (100ac74 <atpl360_low_level_init+0xa8>)
 100abf6:	4798      	blx	r3

  /* Callback configuration. Set NULL as Not used */
  x_atpl360_cbs.data_confirm = _tx_result_handler;
 100abf8:	4b1f      	ldr	r3, [pc, #124]	; (100ac78 <atpl360_low_level_init+0xac>)
 100abfa:	61fb      	str	r3, [r7, #28]
  x_atpl360_cbs.data_indication = _rx_handler;
 100abfc:	4b1f      	ldr	r3, [pc, #124]	; (100ac7c <atpl360_low_level_init+0xb0>)
 100abfe:	623b      	str	r3, [r7, #32]
  x_atpl360_cbs.exception_event = _error_handler;
 100ac00:	4b1f      	ldr	r3, [pc, #124]	; (100ac80 <atpl360_low_level_init+0xb4>)
 100ac02:	62bb      	str	r3, [r7, #40]	; 0x28
  x_atpl360_cbs.addons_event = NULL;
 100ac04:	2300      	movs	r3, #0
 100ac06:	627b      	str	r3, [r7, #36]	; 0x24
  sx_atpl360_desc.set_callbacks(&x_atpl360_cbs);
 100ac08:	4b19      	ldr	r3, [pc, #100]	; (100ac70 <atpl360_low_level_init+0xa4>)
 100ac0a:	681b      	ldr	r3, [r3, #0]
 100ac0c:	f107 021c 	add.w	r2, r7, #28
 100ac10:	4610      	mov	r0, r2
 100ac12:	4798      	blx	r3

  /* Enable ATPL360 */
  ul_bin_size = _get_pl360_bin_addressing(&ul_bin_addr);
 100ac14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 100ac18:	4618      	mov	r0, r3
 100ac1a:	4b1a      	ldr	r3, [pc, #104]	; (100ac84 <atpl360_low_level_init+0xb8>)
 100ac1c:	4798      	blx	r3
 100ac1e:	6378      	str	r0, [r7, #52]	; 0x34
  uc_ret = atpl360_enable(ul_bin_addr, ul_bin_size);
 100ac20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 100ac22:	6b79      	ldr	r1, [r7, #52]	; 0x34
 100ac24:	4618      	mov	r0, r3
 100ac26:	4b18      	ldr	r3, [pc, #96]	; (100ac88 <atpl360_low_level_init+0xbc>)
 100ac28:	4798      	blx	r3
 100ac2a:	4603      	mov	r3, r0
 100ac2c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (uc_ret == ATPL360_ERROR) {
 100ac30:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 100ac34:	2b01      	cmp	r3, #1
 100ac36:	d107      	bne.n	100ac48 <atpl360_low_level_init+0x7c>
    printf("main: atpl360_enable call error! (%d)\n", uc_ret);
 100ac38:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 100ac3c:	4619      	mov	r1, r3
 100ac3e:	4813      	ldr	r0, [pc, #76]	; (100ac8c <atpl360_low_level_init+0xc0>)
 100ac40:	4b13      	ldr	r3, [pc, #76]	; (100ac90 <atpl360_low_level_init+0xc4>)
 100ac42:	4798      	blx	r3
    hang();
 100ac44:	4b13      	ldr	r3, [pc, #76]	; (100ac94 <atpl360_low_level_init+0xc8>)
 100ac46:	4798      	blx	r3
  }

  phy_reset_params();
 100ac48:	4b13      	ldr	r3, [pc, #76]	; (100ac98 <atpl360_low_level_init+0xcc>)
 100ac4a:	4798      	blx	r3
}
 100ac4c:	bf00      	nop
 100ac4e:	3738      	adds	r7, #56	; 0x38
 100ac50:	46bd      	mov	sp, r7
 100ac52:	bd80      	pop	{r7, pc}
 100ac54:	01009999 	.word	0x01009999
 100ac58:	01009891 	.word	0x01009891
 100ac5c:	010099e9 	.word	0x010099e9
 100ac60:	01009a61 	.word	0x01009a61
 100ac64:	01009bc1 	.word	0x01009bc1
 100ac68:	01009e45 	.word	0x01009e45
 100ac6c:	01009e81 	.word	0x01009e81
 100ac70:	20005a58 	.word	0x20005a58
 100ac74:	010019e9 	.word	0x010019e9
 100ac78:	0100a989 	.word	0x0100a989
 100ac7c:	0100a99d 	.word	0x0100a99d
 100ac80:	0100a9dd 	.word	0x0100a9dd
 100ac84:	0100aa29 	.word	0x0100aa29
 100ac88:	01001ac9 	.word	0x01001ac9
 100ac8c:	01022004 	.word	0x01022004
 100ac90:	0100beb5 	.word	0x0100beb5
 100ac94:	0100a3c9 	.word	0x0100a3c9
 100ac98:	0100ab79 	.word	0x0100ab79

0100ac9c <phy_task>:

static void
phy_task(void *params)
{
 100ac9c:	b580      	push	{r7, lr}
 100ac9e:	b082      	sub	sp, #8
 100aca0:	af00      	add	r7, sp, #0
 100aca2:	6078      	str	r0, [r7, #4]
  static portTickType xLastWakeTime;
  static portTickType xPeriod;
  
  xPeriod = PRIME_APP_PHY_TIMER_RATE;
 100aca4:	4b08      	ldr	r3, [pc, #32]	; (100acc8 <phy_task+0x2c>)
 100aca6:	2205      	movs	r2, #5
 100aca8:	601a      	str	r2, [r3, #0]
  xLastWakeTime = xTaskGetTickCount();
 100acaa:	4b08      	ldr	r3, [pc, #32]	; (100accc <phy_task+0x30>)
 100acac:	4798      	blx	r3
 100acae:	4602      	mov	r2, r0
 100acb0:	4b07      	ldr	r3, [pc, #28]	; (100acd0 <phy_task+0x34>)
 100acb2:	601a      	str	r2, [r3, #0]
  
  UNUSED(params);
  
  for (;;) {
    vTaskDelayUntil(&xLastWakeTime, xPeriod);
 100acb4:	4b04      	ldr	r3, [pc, #16]	; (100acc8 <phy_task+0x2c>)
 100acb6:	681b      	ldr	r3, [r3, #0]
 100acb8:	4619      	mov	r1, r3
 100acba:	4805      	ldr	r0, [pc, #20]	; (100acd0 <phy_task+0x34>)
 100acbc:	4b05      	ldr	r3, [pc, #20]	; (100acd4 <phy_task+0x38>)
 100acbe:	4798      	blx	r3
    atpl360_handle_events();
 100acc0:	4b05      	ldr	r3, [pc, #20]	; (100acd8 <phy_task+0x3c>)
 100acc2:	4798      	blx	r3
    vTaskDelayUntil(&xLastWakeTime, xPeriod);
 100acc4:	e7f6      	b.n	100acb4 <phy_task+0x18>
 100acc6:	bf00      	nop
 100acc8:	20005a74 	.word	0x20005a74
 100accc:	010084b1 	.word	0x010084b1
 100acd0:	20005a78 	.word	0x20005a78
 100acd4:	0100826d 	.word	0x0100826d
 100acd8:	01001b55 	.word	0x01001b55

0100acdc <phy_send_data>:
  }
}

BOOL
phy_send_data(tx_msg_t *template, const void *data, size_t size)
{
 100acdc:	b580      	push	{r7, lr}
 100acde:	b084      	sub	sp, #16
 100ace0:	af00      	add	r7, sp, #0
 100ace2:	60f8      	str	r0, [r7, #12]
 100ace4:	60b9      	str	r1, [r7, #8]
 100ace6:	607a      	str	r2, [r7, #4]
  template->puc_data_buf = (uint8_t *) data;
 100ace8:	68fb      	ldr	r3, [r7, #12]
 100acea:	68ba      	ldr	r2, [r7, #8]
 100acec:	f8c3 200d 	str.w	r2, [r3, #13]
  template->us_data_len = (uint16_t) size;
 100acf0:	687b      	ldr	r3, [r7, #4]
 100acf2:	b29a      	uxth	r2, r3
 100acf4:	68fb      	ldr	r3, [r7, #12]
 100acf6:	809a      	strh	r2, [r3, #4]
  
  return sx_atpl360_desc.send_data(template) == TX_RESULT_PROCESS;
 100acf8:	4b06      	ldr	r3, [pc, #24]	; (100ad14 <phy_send_data+0x38>)
 100acfa:	685b      	ldr	r3, [r3, #4]
 100acfc:	68f8      	ldr	r0, [r7, #12]
 100acfe:	4798      	blx	r3
 100ad00:	4603      	mov	r3, r0
 100ad02:	2b00      	cmp	r3, #0
 100ad04:	bf0c      	ite	eq
 100ad06:	2301      	moveq	r3, #1
 100ad08:	2300      	movne	r3, #0
 100ad0a:	b2db      	uxtb	r3, r3
}
 100ad0c:	4618      	mov	r0, r3
 100ad0e:	3710      	adds	r7, #16
 100ad10:	46bd      	mov	sp, r7
 100ad12:	bd80      	pop	{r7, pc}
 100ad14:	20005a58 	.word	0x20005a58

0100ad18 <phy_init>:

void
phy_init(void)
{
 100ad18:	b590      	push	{r4, r7, lr}
 100ad1a:	b085      	sub	sp, #20
 100ad1c:	af04      	add	r7, sp, #16
  /* Initialize hardware */
  atpl360_low_level_init();
 100ad1e:	4b0a      	ldr	r3, [pc, #40]	; (100ad48 <phy_init+0x30>)
 100ad20:	4798      	blx	r3
  
  /* Create task to dispatch events */
  xTaskCreate(
 100ad22:	2300      	movs	r3, #0
 100ad24:	9303      	str	r3, [sp, #12]
 100ad26:	2300      	movs	r3, #0
 100ad28:	9302      	str	r3, [sp, #8]
 100ad2a:	4b08      	ldr	r3, [pc, #32]	; (100ad4c <phy_init+0x34>)
 100ad2c:	9301      	str	r3, [sp, #4]
 100ad2e:	2301      	movs	r3, #1
 100ad30:	9300      	str	r3, [sp, #0]
 100ad32:	2300      	movs	r3, #0
 100ad34:	f240 228a 	movw	r2, #650	; 0x28a
 100ad38:	4905      	ldr	r1, [pc, #20]	; (100ad50 <phy_init+0x38>)
 100ad3a:	4806      	ldr	r0, [pc, #24]	; (100ad54 <phy_init+0x3c>)
 100ad3c:	4c06      	ldr	r4, [pc, #24]	; (100ad58 <phy_init+0x40>)
 100ad3e:	47a0      	blx	r4
    (const signed char *const) "PHY", 
    TASK_APP_PHY_STACK, 
    NULL, 
    TASK_APP_PHY_PRIO, 
    &phy_task_handle);
}
 100ad40:	bf00      	nop
 100ad42:	3704      	adds	r7, #4
 100ad44:	46bd      	mov	sp, r7
 100ad46:	bd90      	pop	{r4, r7, pc}
 100ad48:	0100abcd 	.word	0x0100abcd
 100ad4c:	20005a6c 	.word	0x20005a6c
 100ad50:	0102202c 	.word	0x0102202c
 100ad54:	0100ac9d 	.word	0x0100ac9d
 100ad58:	010080fd 	.word	0x010080fd

0100ad5c <spip_crc32_step>:
  0xbcb4666d, 0xb8757bda, 0xb5365d03, 0xb1f740b4,
};

static inline uint32_t
spip_crc32_step(uint32_t ul_crc_init, const uint8_t *puc_buf_ptr, uint32_t ul_len)
{
 100ad5c:	b480      	push	{r7}
 100ad5e:	b087      	sub	sp, #28
 100ad60:	af00      	add	r7, sp, #0
 100ad62:	60f8      	str	r0, [r7, #12]
 100ad64:	60b9      	str	r1, [r7, #8]
 100ad66:	607a      	str	r2, [r7, #4]
  uint8_t uc_idx;
  uint32_t ul_crc;

  ul_crc = ul_crc_init;
 100ad68:	68fb      	ldr	r3, [r7, #12]
 100ad6a:	617b      	str	r3, [r7, #20]
  if (ul_len != 0) {
 100ad6c:	687b      	ldr	r3, [r7, #4]
 100ad6e:	2b00      	cmp	r3, #0
 100ad70:	d016      	beq.n	100ada0 <spip_crc32_step+0x44>
    while (ul_len--) {
 100ad72:	e010      	b.n	100ad96 <spip_crc32_step+0x3a>
      uc_idx = (uint8_t)(ul_crc >> 24) ^ *puc_buf_ptr++;
 100ad74:	697b      	ldr	r3, [r7, #20]
 100ad76:	0e1b      	lsrs	r3, r3, #24
 100ad78:	b2da      	uxtb	r2, r3
 100ad7a:	68bb      	ldr	r3, [r7, #8]
 100ad7c:	1c59      	adds	r1, r3, #1
 100ad7e:	60b9      	str	r1, [r7, #8]
 100ad80:	781b      	ldrb	r3, [r3, #0]
 100ad82:	4053      	eors	r3, r2
 100ad84:	74fb      	strb	r3, [r7, #19]
      ul_crc = (ul_crc << 8) ^ crc_table[uc_idx];
 100ad86:	697b      	ldr	r3, [r7, #20]
 100ad88:	021a      	lsls	r2, r3, #8
 100ad8a:	7cfb      	ldrb	r3, [r7, #19]
 100ad8c:	4907      	ldr	r1, [pc, #28]	; (100adac <spip_crc32_step+0x50>)
 100ad8e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 100ad92:	4053      	eors	r3, r2
 100ad94:	617b      	str	r3, [r7, #20]
    while (ul_len--) {
 100ad96:	687b      	ldr	r3, [r7, #4]
 100ad98:	1e5a      	subs	r2, r3, #1
 100ad9a:	607a      	str	r2, [r7, #4]
 100ad9c:	2b00      	cmp	r3, #0
 100ad9e:	d1e9      	bne.n	100ad74 <spip_crc32_step+0x18>
    }
  }

  return ul_crc;
 100ada0:	697b      	ldr	r3, [r7, #20]
}
 100ada2:	4618      	mov	r0, r3
 100ada4:	371c      	adds	r7, #28
 100ada6:	46bd      	mov	sp, r7
 100ada8:	bc80      	pop	{r7}
 100adaa:	4770      	bx	lr
 100adac:	200001ec 	.word	0x200001ec

0100adb0 <spip_crc32b>:

uint32_t
spip_crc32b(const uint8_t *sna, const uint8_t *message, size_t len)
{
 100adb0:	b580      	push	{r7, lr}
 100adb2:	b086      	sub	sp, #24
 100adb4:	af00      	add	r7, sp, #0
 100adb6:	60f8      	str	r0, [r7, #12]
 100adb8:	60b9      	str	r1, [r7, #8]
 100adba:	607a      	str	r2, [r7, #4]
  uint32_t crc = 0;
 100adbc:	2300      	movs	r3, #0
 100adbe:	617b      	str	r3, [r7, #20]

  if (sna)
 100adc0:	68fb      	ldr	r3, [r7, #12]
 100adc2:	2b00      	cmp	r3, #0
 100adc4:	d005      	beq.n	100add2 <spip_crc32b+0x22>
    crc = spip_crc32_step(crc, sna, 6);
 100adc6:	2206      	movs	r2, #6
 100adc8:	68f9      	ldr	r1, [r7, #12]
 100adca:	6978      	ldr	r0, [r7, #20]
 100adcc:	4b06      	ldr	r3, [pc, #24]	; (100ade8 <spip_crc32b+0x38>)
 100adce:	4798      	blx	r3
 100add0:	6178      	str	r0, [r7, #20]

  crc = spip_crc32_step(crc, message, len);
 100add2:	687a      	ldr	r2, [r7, #4]
 100add4:	68b9      	ldr	r1, [r7, #8]
 100add6:	6978      	ldr	r0, [r7, #20]
 100add8:	4b03      	ldr	r3, [pc, #12]	; (100ade8 <spip_crc32b+0x38>)
 100adda:	4798      	blx	r3
 100addc:	6178      	str	r0, [r7, #20]
  return crc;
 100adde:	697b      	ldr	r3, [r7, #20]
}
 100ade0:	4618      	mov	r0, r3
 100ade2:	3718      	adds	r7, #24
 100ade4:	46bd      	mov	sp, r7
 100ade6:	bd80      	pop	{r7, pc}
 100ade8:	0100ad5d 	.word	0x0100ad5d

0100adec <spip_iface_loop>:
BOOL
spip_iface_loop(
  spip_iface_t *iface,
  BOOL (*on_pdu) (spip_iface_t *iface, struct spip_pdu *pdu, void *userdata),
  void *userdata)
{
 100adec:	b580      	push	{r7, lr}
 100adee:	b086      	sub	sp, #24
 100adf0:	af00      	add	r7, sp, #0
 100adf2:	60f8      	str	r0, [r7, #12]
 100adf4:	60b9      	str	r1, [r7, #8]
 100adf6:	607a      	str	r2, [r7, #4]
  struct spip_pdu *pdu = NULL;
 100adf8:	2300      	movs	r3, #0
 100adfa:	613b      	str	r3, [r7, #16]
  BOOL ok;
  
  while (spip_iface_read(iface, &pdu)) {
 100adfc:	e010      	b.n	100ae20 <spip_iface_loop+0x34>
    ok = (on_pdu)(iface, pdu, userdata);
 100adfe:	6939      	ldr	r1, [r7, #16]
 100ae00:	68bb      	ldr	r3, [r7, #8]
 100ae02:	687a      	ldr	r2, [r7, #4]
 100ae04:	68f8      	ldr	r0, [r7, #12]
 100ae06:	4798      	blx	r3
 100ae08:	4603      	mov	r3, r0
 100ae0a:	75fb      	strb	r3, [r7, #23]
    spip_iface_dispose(iface, pdu);
 100ae0c:	693b      	ldr	r3, [r7, #16]
 100ae0e:	4619      	mov	r1, r3
 100ae10:	68f8      	ldr	r0, [r7, #12]
 100ae12:	4b0a      	ldr	r3, [pc, #40]	; (100ae3c <spip_iface_loop+0x50>)
 100ae14:	4798      	blx	r3
    if (!ok)
 100ae16:	7dfb      	ldrb	r3, [r7, #23]
 100ae18:	2b00      	cmp	r3, #0
 100ae1a:	d101      	bne.n	100ae20 <spip_iface_loop+0x34>
      return TRUE;
 100ae1c:	2301      	movs	r3, #1
 100ae1e:	e009      	b.n	100ae34 <spip_iface_loop+0x48>
  while (spip_iface_read(iface, &pdu)) {
 100ae20:	f107 0310 	add.w	r3, r7, #16
 100ae24:	4619      	mov	r1, r3
 100ae26:	68f8      	ldr	r0, [r7, #12]
 100ae28:	4b05      	ldr	r3, [pc, #20]	; (100ae40 <spip_iface_loop+0x54>)
 100ae2a:	4798      	blx	r3
 100ae2c:	4603      	mov	r3, r0
 100ae2e:	2b00      	cmp	r3, #0
 100ae30:	d1e5      	bne.n	100adfe <spip_iface_loop+0x12>
  }
    
  return FALSE;
 100ae32:	2300      	movs	r3, #0
}
 100ae34:	4618      	mov	r0, r3
 100ae36:	3718      	adds	r7, #24
 100ae38:	46bd      	mov	sp, r7
 100ae3a:	bd80      	pop	{r7, pc}
 100ae3c:	0100b161 	.word	0x0100b161
 100ae40:	0100afe9 	.word	0x0100afe9

0100ae44 <spip_ctx_assert_alloc>:

#define SPIP_HEADER_SIZE 20

static void *
spip_ctx_assert_alloc(spip_ctx_t *self, size_t size)
{
 100ae44:	b590      	push	{r4, r7, lr}
 100ae46:	b085      	sub	sp, #20
 100ae48:	af00      	add	r7, sp, #0
 100ae4a:	6078      	str	r0, [r7, #4]
 100ae4c:	6039      	str	r1, [r7, #0]
  void *newbuf;
  void *ret = NULL;
 100ae4e:	2300      	movs	r3, #0
 100ae50:	60fb      	str	r3, [r7, #12]

  if (self->alloc_size < size) {
 100ae52:	687b      	ldr	r3, [r7, #4]
 100ae54:	685a      	ldr	r2, [r3, #4]
 100ae56:	683b      	ldr	r3, [r7, #0]
 100ae58:	429a      	cmp	r2, r3
 100ae5a:	d218      	bcs.n	100ae8e <spip_ctx_assert_alloc+0x4a>
    TRY(newbuf = realloc(self->alloc_buf, size));
 100ae5c:	687b      	ldr	r3, [r7, #4]
 100ae5e:	681b      	ldr	r3, [r3, #0]
 100ae60:	6839      	ldr	r1, [r7, #0]
 100ae62:	4618      	mov	r0, r3
 100ae64:	4b0e      	ldr	r3, [pc, #56]	; (100aea0 <spip_ctx_assert_alloc+0x5c>)
 100ae66:	4798      	blx	r3
 100ae68:	60b8      	str	r0, [r7, #8]
 100ae6a:	68bb      	ldr	r3, [r7, #8]
 100ae6c:	2b00      	cmp	r3, #0
 100ae6e:	d108      	bne.n	100ae82 <spip_ctx_assert_alloc+0x3e>
 100ae70:	4b0c      	ldr	r3, [pc, #48]	; (100aea4 <spip_ctx_assert_alloc+0x60>)
 100ae72:	681b      	ldr	r3, [r3, #0]
 100ae74:	68d8      	ldr	r0, [r3, #12]
 100ae76:	4b0c      	ldr	r3, [pc, #48]	; (100aea8 <spip_ctx_assert_alloc+0x64>)
 100ae78:	4a0c      	ldr	r2, [pc, #48]	; (100aeac <spip_ctx_assert_alloc+0x68>)
 100ae7a:	490d      	ldr	r1, [pc, #52]	; (100aeb0 <spip_ctx_assert_alloc+0x6c>)
 100ae7c:	4c0d      	ldr	r4, [pc, #52]	; (100aeb4 <spip_ctx_assert_alloc+0x70>)
 100ae7e:	47a0      	blx	r4
 100ae80:	e008      	b.n	100ae94 <spip_ctx_assert_alloc+0x50>
    self->alloc_buf = newbuf;
 100ae82:	687b      	ldr	r3, [r7, #4]
 100ae84:	68ba      	ldr	r2, [r7, #8]
 100ae86:	601a      	str	r2, [r3, #0]
    self->alloc_size = size;
 100ae88:	687b      	ldr	r3, [r7, #4]
 100ae8a:	683a      	ldr	r2, [r7, #0]
 100ae8c:	605a      	str	r2, [r3, #4]
  }

  ret = self->alloc_buf;
 100ae8e:	687b      	ldr	r3, [r7, #4]
 100ae90:	681b      	ldr	r3, [r3, #0]
 100ae92:	60fb      	str	r3, [r7, #12]

fail:
  return ret;
 100ae94:	68fb      	ldr	r3, [r7, #12]
}
 100ae96:	4618      	mov	r0, r3
 100ae98:	3714      	adds	r7, #20
 100ae9a:	46bd      	mov	sp, r7
 100ae9c:	bd90      	pop	{r4, r7, pc}
 100ae9e:	bf00      	nop
 100aea0:	0100c739 	.word	0x0100c739
 100aea4:	200005ec 	.word	0x200005ec
 100aea8:	01022030 	.word	0x01022030
 100aeac:	01022058 	.word	0x01022058
 100aeb0:	01022060 	.word	0x01022060
 100aeb4:	0100bb7d 	.word	0x0100bb7d

0100aeb8 <spip_ctx_resync>:

static void
spip_ctx_resync(spip_ctx_t *self)
{
 100aeb8:	b580      	push	{r7, lr}
 100aeba:	b082      	sub	sp, #8
 100aebc:	af00      	add	r7, sp, #0
 100aebe:	6078      	str	r0, [r7, #4]
  memset(self->sync, 0, 8);
 100aec0:	687b      	ldr	r3, [r7, #4]
 100aec2:	3308      	adds	r3, #8
 100aec4:	2208      	movs	r2, #8
 100aec6:	2100      	movs	r1, #0
 100aec8:	4618      	mov	r0, r3
 100aeca:	4b03      	ldr	r3, [pc, #12]	; (100aed8 <spip_ctx_resync+0x20>)
 100aecc:	4798      	blx	r3
}
 100aece:	bf00      	nop
 100aed0:	3708      	adds	r7, #8
 100aed2:	46bd      	mov	sp, r7
 100aed4:	bd80      	pop	{r7, pc}
 100aed6:	bf00      	nop
 100aed8:	0100c685 	.word	0x0100c685
 100aedc:	00000000 	.word	0x00000000

0100aee0 <spip_ctx_sync>:

static BOOL
spip_ctx_sync(spip_ctx_t *self, uint8_t c)
{
 100aee0:	b490      	push	{r4, r7}
 100aee2:	b086      	sub	sp, #24
 100aee4:	af00      	add	r7, sp, #0
 100aee6:	6078      	str	r0, [r7, #4]
 100aee8:	460b      	mov	r3, r1
 100aeea:	70fb      	strb	r3, [r7, #3]
    uint8_t sorted[8];
    uint64_t sync;
  } syncbuf;


  self->sync[self->p++] = c;
 100aeec:	687b      	ldr	r3, [r7, #4]
 100aeee:	f893 3020 	ldrb.w	r3, [r3, #32]
 100aef2:	1c5a      	adds	r2, r3, #1
 100aef4:	b2d1      	uxtb	r1, r2
 100aef6:	687a      	ldr	r2, [r7, #4]
 100aef8:	f882 1020 	strb.w	r1, [r2, #32]
 100aefc:	461a      	mov	r2, r3
 100aefe:	687b      	ldr	r3, [r7, #4]
 100af00:	4413      	add	r3, r2
 100af02:	78fa      	ldrb	r2, [r7, #3]
 100af04:	721a      	strb	r2, [r3, #8]
  if (self->p == 8)
 100af06:	687b      	ldr	r3, [r7, #4]
 100af08:	f893 3020 	ldrb.w	r3, [r3, #32]
 100af0c:	2b08      	cmp	r3, #8
 100af0e:	d103      	bne.n	100af18 <spip_ctx_sync+0x38>
    self->p = 0;
 100af10:	687b      	ldr	r3, [r7, #4]
 100af12:	2200      	movs	r2, #0
 100af14:	f883 2020 	strb.w	r2, [r3, #32]

  p = self->p;
 100af18:	687b      	ldr	r3, [r7, #4]
 100af1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 100af1e:	75fb      	strb	r3, [r7, #23]

  for (q = 0; q < 8; ++q) {
 100af20:	2300      	movs	r3, #0
 100af22:	75bb      	strb	r3, [r7, #22]
 100af24:	e015      	b.n	100af52 <spip_ctx_sync+0x72>
    syncbuf.sorted[q] = self->sync[p++];
 100af26:	7dba      	ldrb	r2, [r7, #22]
 100af28:	7dfb      	ldrb	r3, [r7, #23]
 100af2a:	1c59      	adds	r1, r3, #1
 100af2c:	75f9      	strb	r1, [r7, #23]
 100af2e:	4619      	mov	r1, r3
 100af30:	687b      	ldr	r3, [r7, #4]
 100af32:	440b      	add	r3, r1
 100af34:	7a19      	ldrb	r1, [r3, #8]
 100af36:	f107 0318 	add.w	r3, r7, #24
 100af3a:	4413      	add	r3, r2
 100af3c:	460a      	mov	r2, r1
 100af3e:	f803 2c10 	strb.w	r2, [r3, #-16]
    if (p == 8)
 100af42:	7dfb      	ldrb	r3, [r7, #23]
 100af44:	2b08      	cmp	r3, #8
 100af46:	d101      	bne.n	100af4c <spip_ctx_sync+0x6c>
      p = 0;
 100af48:	2300      	movs	r3, #0
 100af4a:	75fb      	strb	r3, [r7, #23]
  for (q = 0; q < 8; ++q) {
 100af4c:	7dbb      	ldrb	r3, [r7, #22]
 100af4e:	3301      	adds	r3, #1
 100af50:	75bb      	strb	r3, [r7, #22]
 100af52:	7dbb      	ldrb	r3, [r7, #22]
 100af54:	2b07      	cmp	r3, #7
 100af56:	d9e6      	bls.n	100af26 <spip_ctx_sync+0x46>
  }

  if (syncbuf.sync == SPIP_FRAME_SYNC)
 100af58:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 100af5c:	a208      	add	r2, pc, #32	; (adr r2, 100af80 <spip_ctx_sync+0xa0>)
 100af5e:	e9d2 1200 	ldrd	r1, r2, [r2]
 100af62:	4294      	cmp	r4, r2
 100af64:	bf08      	it	eq
 100af66:	428b      	cmpeq	r3, r1
 100af68:	d101      	bne.n	100af6e <spip_ctx_sync+0x8e>
    return TRUE;
 100af6a:	2301      	movs	r3, #1
 100af6c:	e000      	b.n	100af70 <spip_ctx_sync+0x90>

  return FALSE;
 100af6e:	2300      	movs	r3, #0
}
 100af70:	4618      	mov	r0, r3
 100af72:	3718      	adds	r7, #24
 100af74:	46bd      	mov	sp, r7
 100af76:	bc90      	pop	{r4, r7}
 100af78:	4770      	bx	lr
 100af7a:	bf00      	nop
 100af7c:	f3af 8000 	nop.w
 100af80:	deadcefe 	.word	0xdeadcefe
 100af84:	a5a5a5a5 	.word	0xa5a5a5a5

0100af88 <spip_iface_write>:

BOOL 
spip_iface_write(spip_iface_t *iface, const struct spip_pdu *pdu)
{
 100af88:	b580      	push	{r7, lr}
 100af8a:	b086      	sub	sp, #24
 100af8c:	af00      	add	r7, sp, #0
 100af8e:	6078      	str	r0, [r7, #4]
 100af90:	6039      	str	r1, [r7, #0]
  const uint8_t *as_bytes = (const uint8_t *) pdu;
 100af92:	683b      	ldr	r3, [r7, #0]
 100af94:	613b      	str	r3, [r7, #16]
  unsigned int size = pdu->size + SPIP_HEADER_SIZE;
 100af96:	683b      	ldr	r3, [r7, #0]
 100af98:	895b      	ldrh	r3, [r3, #10]
 100af9a:	3314      	adds	r3, #20
 100af9c:	60fb      	str	r3, [r7, #12]
  unsigned int i;

  if (iface->write_byte == NULL)
 100af9e:	687b      	ldr	r3, [r7, #4]
 100afa0:	685b      	ldr	r3, [r3, #4]
 100afa2:	2b00      	cmp	r3, #0
 100afa4:	d101      	bne.n	100afaa <spip_iface_write+0x22>
    return FALSE;
 100afa6:	2300      	movs	r3, #0
 100afa8:	e019      	b.n	100afde <spip_iface_write+0x56>

  for (i = 0; i < size; ++i)
 100afaa:	2300      	movs	r3, #0
 100afac:	617b      	str	r3, [r7, #20]
 100afae:	e011      	b.n	100afd4 <spip_iface_write+0x4c>
    if (!(iface->write_byte)(iface->userdata, as_bytes[i]))
 100afb0:	687b      	ldr	r3, [r7, #4]
 100afb2:	685b      	ldr	r3, [r3, #4]
 100afb4:	687a      	ldr	r2, [r7, #4]
 100afb6:	6810      	ldr	r0, [r2, #0]
 100afb8:	6939      	ldr	r1, [r7, #16]
 100afba:	697a      	ldr	r2, [r7, #20]
 100afbc:	440a      	add	r2, r1
 100afbe:	7812      	ldrb	r2, [r2, #0]
 100afc0:	4611      	mov	r1, r2
 100afc2:	4798      	blx	r3
 100afc4:	4603      	mov	r3, r0
 100afc6:	2b00      	cmp	r3, #0
 100afc8:	d101      	bne.n	100afce <spip_iface_write+0x46>
      return FALSE;
 100afca:	2300      	movs	r3, #0
 100afcc:	e007      	b.n	100afde <spip_iface_write+0x56>
  for (i = 0; i < size; ++i)
 100afce:	697b      	ldr	r3, [r7, #20]
 100afd0:	3301      	adds	r3, #1
 100afd2:	617b      	str	r3, [r7, #20]
 100afd4:	697a      	ldr	r2, [r7, #20]
 100afd6:	68fb      	ldr	r3, [r7, #12]
 100afd8:	429a      	cmp	r2, r3
 100afda:	d3e9      	bcc.n	100afb0 <spip_iface_write+0x28>

  return TRUE;
 100afdc:	2301      	movs	r3, #1
}
 100afde:	4618      	mov	r0, r3
 100afe0:	3718      	adds	r7, #24
 100afe2:	46bd      	mov	sp, r7
 100afe4:	bd80      	pop	{r7, pc}
	...

0100afe8 <spip_iface_read>:

BOOL 
spip_iface_read(spip_iface_t *iface, struct spip_pdu **pdu)
{
 100afe8:	b580      	push	{r7, lr}
 100afea:	b08a      	sub	sp, #40	; 0x28
 100afec:	af00      	add	r7, sp, #0
 100afee:	6078      	str	r0, [r7, #4]
 100aff0:	6039      	str	r1, [r7, #0]
  uint8_t c;
  uint32_t crc, computed_crc;
  spip_ctx_t *self = &iface->spip_ctx;
 100aff2:	687b      	ldr	r3, [r7, #4]
 100aff4:	3310      	adds	r3, #16
 100aff6:	61fb      	str	r3, [r7, #28]
  union {
   uint8_t *pdu_data;
   struct spip_pdu *pdu_s;
  } updu;
  unsigned int i = 0;
 100aff8:	2300      	movs	r3, #0
 100affa:	627b      	str	r3, [r7, #36]	; 0x24
  enum spip_loop_state state = SPIP_LOOP_STATE_SYNCING;
 100affc:	2300      	movs	r3, #0
 100affe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if (iface->read_byte == NULL)
 100b002:	687b      	ldr	r3, [r7, #4]
 100b004:	689b      	ldr	r3, [r3, #8]
 100b006:	2b00      	cmp	r3, #0
 100b008:	d101      	bne.n	100b00e <spip_iface_read+0x26>
   return FALSE;
 100b00a:	2300      	movs	r3, #0
 100b00c:	e099      	b.n	100b142 <spip_iface_read+0x15a>

  updu.pdu_data = NULL;
 100b00e:	2300      	movs	r3, #0
 100b010:	60fb      	str	r3, [r7, #12]

  spip_ctx_resync(self);
 100b012:	69f8      	ldr	r0, [r7, #28]
 100b014:	4b4d      	ldr	r3, [pc, #308]	; (100b14c <spip_iface_read+0x164>)
 100b016:	4798      	blx	r3

  while ((iface->read_byte) (iface->userdata, &c)) {
 100b018:	e086      	b.n	100b128 <spip_iface_read+0x140>
    switch (state) {
 100b01a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 100b01e:	2b01      	cmp	r3, #1
 100b020:	d012      	beq.n	100b048 <spip_iface_read+0x60>
 100b022:	2b02      	cmp	r3, #2
 100b024:	d04f      	beq.n	100b0c6 <spip_iface_read+0xde>
 100b026:	2b00      	cmp	r3, #0
 100b028:	d000      	beq.n	100b02c <spip_iface_read+0x44>
 100b02a:	e07d      	b.n	100b128 <spip_iface_read+0x140>
      case SPIP_LOOP_STATE_SYNCING:
        if (spip_ctx_sync(self, c)) {
 100b02c:	7cfb      	ldrb	r3, [r7, #19]
 100b02e:	4619      	mov	r1, r3
 100b030:	69f8      	ldr	r0, [r7, #28]
 100b032:	4b47      	ldr	r3, [pc, #284]	; (100b150 <spip_iface_read+0x168>)
 100b034:	4798      	blx	r3
 100b036:	4603      	mov	r3, r0
 100b038:	2b00      	cmp	r3, #0
 100b03a:	d075      	beq.n	100b128 <spip_iface_read+0x140>
          state = SPIP_LOOP_READING_HEADER;
 100b03c:	2301      	movs	r3, #1
 100b03e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
          i = 8;
 100b042:	2308      	movs	r3, #8
 100b044:	627b      	str	r3, [r7, #36]	; 0x24
        }
      
        break;
 100b046:	e06f      	b.n	100b128 <spip_iface_read+0x140>

      case SPIP_LOOP_READING_HEADER:
        self->header[i++] = c;
 100b048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 100b04a:	1c5a      	adds	r2, r3, #1
 100b04c:	627a      	str	r2, [r7, #36]	; 0x24
 100b04e:	7cf9      	ldrb	r1, [r7, #19]
 100b050:	69fa      	ldr	r2, [r7, #28]
 100b052:	4413      	add	r3, r2
 100b054:	460a      	mov	r2, r1
 100b056:	721a      	strb	r2, [r3, #8]
        if (i == SPIP_HEADER_SIZE) {
 100b058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 100b05a:	2b14      	cmp	r3, #20
 100b05c:	d164      	bne.n	100b128 <spip_iface_read+0x140>
          /* Got header. Validate CRC */
          crc = self->pdu.header_crc;
 100b05e:	69fb      	ldr	r3, [r7, #28]
 100b060:	695b      	ldr	r3, [r3, #20]
 100b062:	61bb      	str	r3, [r7, #24]
          self->pdu.header_crc = 0;
 100b064:	69fb      	ldr	r3, [r7, #28]
 100b066:	2200      	movs	r2, #0
 100b068:	615a      	str	r2, [r3, #20]

          computed_crc = spip_crc32b(
              NULL,
              self->header,
 100b06a:	69fb      	ldr	r3, [r7, #28]
 100b06c:	3308      	adds	r3, #8
          computed_crc = spip_crc32b(
 100b06e:	2214      	movs	r2, #20
 100b070:	4619      	mov	r1, r3
 100b072:	2000      	movs	r0, #0
 100b074:	4b37      	ldr	r3, [pc, #220]	; (100b154 <spip_iface_read+0x16c>)
 100b076:	4798      	blx	r3
 100b078:	6178      	str	r0, [r7, #20]
              SPIP_HEADER_SIZE);

          if (computed_crc != crc) {
 100b07a:	697a      	ldr	r2, [r7, #20]
 100b07c:	69bb      	ldr	r3, [r7, #24]
 100b07e:	429a      	cmp	r2, r3
 100b080:	d006      	beq.n	100b090 <spip_iface_read+0xa8>
            /* Bad CRC. Sync again */
            spip_ctx_resync(self);
 100b082:	69f8      	ldr	r0, [r7, #28]
 100b084:	4b31      	ldr	r3, [pc, #196]	; (100b14c <spip_iface_read+0x164>)
 100b086:	4798      	blx	r3
              "\033[0;31mBroken SPIP (UART) message (header CRC: %08x != %08x)\033[0m\r",
              crc,
              computed_crc);
#  endif /* __SAM4CMS16C_0__ */
#endif /* ERROR_REPORTING */
            state = SPIP_LOOP_STATE_SYNCING;
 100b088:	2300      	movs	r3, #0
 100b08a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 100b08e:	e04b      	b.n	100b128 <spip_iface_read+0x140>
          } else {
            i = SPIP_HEADER_SIZE;
 100b090:	2314      	movs	r3, #20
 100b092:	627b      	str	r3, [r7, #36]	; 0x24
            /* Error checking not necessary here */
            updu.pdu_data = spip_ctx_assert_alloc(
                self,
                i + self->pdu.size);
 100b094:	69fb      	ldr	r3, [r7, #28]
 100b096:	8a5b      	ldrh	r3, [r3, #18]
 100b098:	461a      	mov	r2, r3
            updu.pdu_data = spip_ctx_assert_alloc(
 100b09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 100b09c:	4413      	add	r3, r2
 100b09e:	4619      	mov	r1, r3
 100b0a0:	69f8      	ldr	r0, [r7, #28]
 100b0a2:	4b2d      	ldr	r3, [pc, #180]	; (100b158 <spip_iface_read+0x170>)
 100b0a4:	4798      	blx	r3
 100b0a6:	4603      	mov	r3, r0
 100b0a8:	60fb      	str	r3, [r7, #12]
            if (updu.pdu_data != NULL)
 100b0aa:	68fb      	ldr	r3, [r7, #12]
 100b0ac:	2b00      	cmp	r3, #0
 100b0ae:	d006      	beq.n	100b0be <spip_iface_read+0xd6>
              memcpy(updu.pdu_data, self->header, SPIP_HEADER_SIZE);
 100b0b0:	68f8      	ldr	r0, [r7, #12]
 100b0b2:	69fb      	ldr	r3, [r7, #28]
 100b0b4:	3308      	adds	r3, #8
 100b0b6:	2214      	movs	r2, #20
 100b0b8:	4619      	mov	r1, r3
 100b0ba:	4b28      	ldr	r3, [pc, #160]	; (100b15c <spip_iface_read+0x174>)
 100b0bc:	4798      	blx	r3
            state = SPIP_LOOP_READING_BODY;
 100b0be:	2302      	movs	r3, #2
 100b0c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
          }
        }
        break;
 100b0c4:	e030      	b.n	100b128 <spip_iface_read+0x140>

      case SPIP_LOOP_READING_BODY:
        if (updu.pdu_data != NULL)
 100b0c6:	68fb      	ldr	r3, [r7, #12]
 100b0c8:	2b00      	cmp	r3, #0
 100b0ca:	d006      	beq.n	100b0da <spip_iface_read+0xf2>
          updu.pdu_data[i++] = c;
 100b0cc:	68fa      	ldr	r2, [r7, #12]
 100b0ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 100b0d0:	1c59      	adds	r1, r3, #1
 100b0d2:	6279      	str	r1, [r7, #36]	; 0x24
 100b0d4:	4413      	add	r3, r2
 100b0d6:	7cfa      	ldrb	r2, [r7, #19]
 100b0d8:	701a      	strb	r2, [r3, #0]

        if (i == (unsigned) self->pdu.size + SPIP_HEADER_SIZE) {
 100b0da:	69fb      	ldr	r3, [r7, #28]
 100b0dc:	8a5b      	ldrh	r3, [r3, #18]
 100b0de:	f103 0214 	add.w	r2, r3, #20
 100b0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 100b0e4:	429a      	cmp	r2, r3
 100b0e6:	d11e      	bne.n	100b126 <spip_iface_read+0x13e>
          if (updu.pdu_data != NULL) {
 100b0e8:	68fb      	ldr	r3, [r7, #12]
 100b0ea:	2b00      	cmp	r3, #0
 100b0ec:	d015      	beq.n	100b11a <spip_iface_read+0x132>
            crc = updu.pdu_s->crc;
 100b0ee:	68fb      	ldr	r3, [r7, #12]
 100b0f0:	691b      	ldr	r3, [r3, #16]
 100b0f2:	61bb      	str	r3, [r7, #24]
            updu.pdu_s->crc = 0;
 100b0f4:	68fb      	ldr	r3, [r7, #12]
 100b0f6:	2200      	movs	r2, #0
 100b0f8:	611a      	str	r2, [r3, #16]

            computed_crc = spip_crc32b(NULL, updu.pdu_data, i);
 100b0fa:	68fb      	ldr	r3, [r7, #12]
 100b0fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 100b0fe:	4619      	mov	r1, r3
 100b100:	2000      	movs	r0, #0
 100b102:	4b14      	ldr	r3, [pc, #80]	; (100b154 <spip_iface_read+0x16c>)
 100b104:	4798      	blx	r3
 100b106:	6178      	str	r0, [r7, #20]
            if (computed_crc == crc) {
 100b108:	697a      	ldr	r2, [r7, #20]
 100b10a:	69bb      	ldr	r3, [r7, #24]
 100b10c:	429a      	cmp	r2, r3
 100b10e:	d104      	bne.n	100b11a <spip_iface_read+0x132>
              *pdu = updu.pdu_s;
 100b110:	68fa      	ldr	r2, [r7, #12]
 100b112:	683b      	ldr	r3, [r7, #0]
 100b114:	601a      	str	r2, [r3, #0]
              return TRUE;
 100b116:	2301      	movs	r3, #1
 100b118:	e013      	b.n	100b142 <spip_iface_read+0x15a>
            lcd_printf(1, "BDY!%08x", computed_crc);
#  endif /* __SAM4CMS16C_0__ */
#endif /* ERROR_REPORTING */
          }

          spip_ctx_resync(self);
 100b11a:	69f8      	ldr	r0, [r7, #28]
 100b11c:	4b0b      	ldr	r3, [pc, #44]	; (100b14c <spip_iface_read+0x164>)
 100b11e:	4798      	blx	r3
          state = SPIP_LOOP_STATE_SYNCING;
 100b120:	2300      	movs	r3, #0
 100b122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        }
        break;
 100b126:	bf00      	nop
  while ((iface->read_byte) (iface->userdata, &c)) {
 100b128:	687b      	ldr	r3, [r7, #4]
 100b12a:	689b      	ldr	r3, [r3, #8]
 100b12c:	687a      	ldr	r2, [r7, #4]
 100b12e:	6812      	ldr	r2, [r2, #0]
 100b130:	f107 0113 	add.w	r1, r7, #19
 100b134:	4610      	mov	r0, r2
 100b136:	4798      	blx	r3
 100b138:	4603      	mov	r3, r0
 100b13a:	2b00      	cmp	r3, #0
 100b13c:	f47f af6d 	bne.w	100b01a <spip_iface_read+0x32>
    }
  }

  return FALSE;
 100b140:	2300      	movs	r3, #0
}
 100b142:	4618      	mov	r0, r3
 100b144:	3728      	adds	r7, #40	; 0x28
 100b146:	46bd      	mov	sp, r7
 100b148:	bd80      	pop	{r7, pc}
 100b14a:	bf00      	nop
 100b14c:	0100aeb9 	.word	0x0100aeb9
 100b150:	0100aee1 	.word	0x0100aee1
 100b154:	0100adb1 	.word	0x0100adb1
 100b158:	0100ae45 	.word	0x0100ae45
 100b15c:	0100c551 	.word	0x0100c551

0100b160 <spip_iface_dispose>:

void 
spip_iface_dispose(spip_iface_t *iface, struct spip_pdu *pdu)
{
 100b160:	b480      	push	{r7}
 100b162:	b083      	sub	sp, #12
 100b164:	af00      	add	r7, sp, #0
 100b166:	6078      	str	r0, [r7, #4]
 100b168:	6039      	str	r1, [r7, #0]
  /* NO-OP */
}
 100b16a:	bf00      	nop
 100b16c:	370c      	adds	r7, #12
 100b16e:	46bd      	mov	sp, r7
 100b170:	bc80      	pop	{r7}
 100b172:	4770      	bx	lr
 100b174:	0000      	movs	r0, r0
	...

0100b178 <spip_iface_write_ex>:
spip_iface_write_ex(
  spip_iface_t *iface, 
  enum spip_command command,
  const void *data, 
  size_t size) 
{
 100b178:	b590      	push	{r4, r7, lr}
 100b17a:	b087      	sub	sp, #28
 100b17c:	af00      	add	r7, sp, #0
 100b17e:	60f8      	str	r0, [r7, #12]
 100b180:	607a      	str	r2, [r7, #4]
 100b182:	603b      	str	r3, [r7, #0]
 100b184:	460b      	mov	r3, r1
 100b186:	72fb      	strb	r3, [r7, #11]
  static struct spip_pdu *alloc = NULL;
  static size_t last_size = 0;
  void *tmp = NULL;
 100b188:	2300      	movs	r3, #0
 100b18a:	613b      	str	r3, [r7, #16]
  BOOL ok = FALSE;
 100b18c:	2300      	movs	r3, #0
 100b18e:	75fb      	strb	r3, [r7, #23]
  
  TRY(size < 65536);
 100b190:	683b      	ldr	r3, [r7, #0]
 100b192:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 100b196:	d308      	bcc.n	100b1aa <spip_iface_write_ex+0x32>
 100b198:	4b45      	ldr	r3, [pc, #276]	; (100b2b0 <spip_iface_write_ex+0x138>)
 100b19a:	681b      	ldr	r3, [r3, #0]
 100b19c:	68d8      	ldr	r0, [r3, #12]
 100b19e:	4b45      	ldr	r3, [pc, #276]	; (100b2b4 <spip_iface_write_ex+0x13c>)
 100b1a0:	4a45      	ldr	r2, [pc, #276]	; (100b2b8 <spip_iface_write_ex+0x140>)
 100b1a2:	4946      	ldr	r1, [pc, #280]	; (100b2bc <spip_iface_write_ex+0x144>)
 100b1a4:	4c46      	ldr	r4, [pc, #280]	; (100b2c0 <spip_iface_write_ex+0x148>)
 100b1a6:	47a0      	blx	r4
 100b1a8:	e076      	b.n	100b298 <spip_iface_write_ex+0x120>
  
  if (alloc == NULL || size > last_size) {
 100b1aa:	4b46      	ldr	r3, [pc, #280]	; (100b2c4 <spip_iface_write_ex+0x14c>)
 100b1ac:	681b      	ldr	r3, [r3, #0]
 100b1ae:	2b00      	cmp	r3, #0
 100b1b0:	d004      	beq.n	100b1bc <spip_iface_write_ex+0x44>
 100b1b2:	4b45      	ldr	r3, [pc, #276]	; (100b2c8 <spip_iface_write_ex+0x150>)
 100b1b4:	681b      	ldr	r3, [r3, #0]
 100b1b6:	683a      	ldr	r2, [r7, #0]
 100b1b8:	429a      	cmp	r2, r3
 100b1ba:	d929      	bls.n	100b210 <spip_iface_write_ex+0x98>
    TRY(tmp = realloc(alloc, size + SPIP_HEADER_SIZE));
 100b1bc:	4b41      	ldr	r3, [pc, #260]	; (100b2c4 <spip_iface_write_ex+0x14c>)
 100b1be:	681a      	ldr	r2, [r3, #0]
 100b1c0:	683b      	ldr	r3, [r7, #0]
 100b1c2:	3314      	adds	r3, #20
 100b1c4:	4619      	mov	r1, r3
 100b1c6:	4610      	mov	r0, r2
 100b1c8:	4b40      	ldr	r3, [pc, #256]	; (100b2cc <spip_iface_write_ex+0x154>)
 100b1ca:	4798      	blx	r3
 100b1cc:	6138      	str	r0, [r7, #16]
 100b1ce:	693b      	ldr	r3, [r7, #16]
 100b1d0:	2b00      	cmp	r3, #0
 100b1d2:	d108      	bne.n	100b1e6 <spip_iface_write_ex+0x6e>
 100b1d4:	4b36      	ldr	r3, [pc, #216]	; (100b2b0 <spip_iface_write_ex+0x138>)
 100b1d6:	681b      	ldr	r3, [r3, #0]
 100b1d8:	68d8      	ldr	r0, [r3, #12]
 100b1da:	4b3d      	ldr	r3, [pc, #244]	; (100b2d0 <spip_iface_write_ex+0x158>)
 100b1dc:	4a36      	ldr	r2, [pc, #216]	; (100b2b8 <spip_iface_write_ex+0x140>)
 100b1de:	4937      	ldr	r1, [pc, #220]	; (100b2bc <spip_iface_write_ex+0x144>)
 100b1e0:	4c37      	ldr	r4, [pc, #220]	; (100b2c0 <spip_iface_write_ex+0x148>)
 100b1e2:	47a0      	blx	r4
 100b1e4:	e058      	b.n	100b298 <spip_iface_write_ex+0x120>
    alloc = tmp;
 100b1e6:	4a37      	ldr	r2, [pc, #220]	; (100b2c4 <spip_iface_write_ex+0x14c>)
 100b1e8:	693b      	ldr	r3, [r7, #16]
 100b1ea:	6013      	str	r3, [r2, #0]
    
    if (last_size == 0) {
 100b1ec:	4b36      	ldr	r3, [pc, #216]	; (100b2c8 <spip_iface_write_ex+0x150>)
 100b1ee:	681b      	ldr	r3, [r3, #0]
 100b1f0:	2b00      	cmp	r3, #0
 100b1f2:	d10a      	bne.n	100b20a <spip_iface_write_ex+0x92>
      alloc->sync = SPIP_FRAME_SYNC;
 100b1f4:	4b33      	ldr	r3, [pc, #204]	; (100b2c4 <spip_iface_write_ex+0x14c>)
 100b1f6:	681a      	ldr	r2, [r3, #0]
 100b1f8:	a42b      	add	r4, pc, #172	; (adr r4, 100b2a8 <spip_iface_write_ex+0x130>)
 100b1fa:	e9d4 3400 	ldrd	r3, r4, [r4]
 100b1fe:	e9c2 3400 	strd	r3, r4, [r2]
      alloc->pad = 0;
 100b202:	4b30      	ldr	r3, [pc, #192]	; (100b2c4 <spip_iface_write_ex+0x14c>)
 100b204:	681b      	ldr	r3, [r3, #0]
 100b206:	2200      	movs	r2, #0
 100b208:	725a      	strb	r2, [r3, #9]
    }
    
    last_size = size;
 100b20a:	4a2f      	ldr	r2, [pc, #188]	; (100b2c8 <spip_iface_write_ex+0x150>)
 100b20c:	683b      	ldr	r3, [r7, #0]
 100b20e:	6013      	str	r3, [r2, #0]
  }
  
  alloc->command = command;
 100b210:	4b2c      	ldr	r3, [pc, #176]	; (100b2c4 <spip_iface_write_ex+0x14c>)
 100b212:	681b      	ldr	r3, [r3, #0]
 100b214:	7afa      	ldrb	r2, [r7, #11]
 100b216:	721a      	strb	r2, [r3, #8]
  alloc->size = size;
 100b218:	4b2a      	ldr	r3, [pc, #168]	; (100b2c4 <spip_iface_write_ex+0x14c>)
 100b21a:	681b      	ldr	r3, [r3, #0]
 100b21c:	683a      	ldr	r2, [r7, #0]
 100b21e:	b292      	uxth	r2, r2
 100b220:	815a      	strh	r2, [r3, #10]
  alloc->crc = 0;
 100b222:	4b28      	ldr	r3, [pc, #160]	; (100b2c4 <spip_iface_write_ex+0x14c>)
 100b224:	681b      	ldr	r3, [r3, #0]
 100b226:	2200      	movs	r2, #0
 100b228:	611a      	str	r2, [r3, #16]
  alloc->header_crc = 0;
 100b22a:	4b26      	ldr	r3, [pc, #152]	; (100b2c4 <spip_iface_write_ex+0x14c>)
 100b22c:	681b      	ldr	r3, [r3, #0]
 100b22e:	2200      	movs	r2, #0
 100b230:	60da      	str	r2, [r3, #12]
  
  memcpy(alloc->data, data, size);
 100b232:	4b24      	ldr	r3, [pc, #144]	; (100b2c4 <spip_iface_write_ex+0x14c>)
 100b234:	681b      	ldr	r3, [r3, #0]
 100b236:	3314      	adds	r3, #20
 100b238:	683a      	ldr	r2, [r7, #0]
 100b23a:	6879      	ldr	r1, [r7, #4]
 100b23c:	4618      	mov	r0, r3
 100b23e:	4b25      	ldr	r3, [pc, #148]	; (100b2d4 <spip_iface_write_ex+0x15c>)
 100b240:	4798      	blx	r3
  
  alloc->crc = spip_crc32b(
 100b242:	4b20      	ldr	r3, [pc, #128]	; (100b2c4 <spip_iface_write_ex+0x14c>)
 100b244:	681c      	ldr	r4, [r3, #0]
 100b246:	4b1f      	ldr	r3, [pc, #124]	; (100b2c4 <spip_iface_write_ex+0x14c>)
 100b248:	6819      	ldr	r1, [r3, #0]
 100b24a:	683b      	ldr	r3, [r7, #0]
 100b24c:	3314      	adds	r3, #20
 100b24e:	461a      	mov	r2, r3
 100b250:	2000      	movs	r0, #0
 100b252:	4b21      	ldr	r3, [pc, #132]	; (100b2d8 <spip_iface_write_ex+0x160>)
 100b254:	4798      	blx	r3
 100b256:	4603      	mov	r3, r0
 100b258:	6123      	str	r3, [r4, #16]
      NULL,
      (const uint8_t *) alloc,
      size + SPIP_HEADER_SIZE);

  alloc->header_crc = spip_crc32b(
 100b25a:	4b1a      	ldr	r3, [pc, #104]	; (100b2c4 <spip_iface_write_ex+0x14c>)
 100b25c:	681c      	ldr	r4, [r3, #0]
 100b25e:	4b19      	ldr	r3, [pc, #100]	; (100b2c4 <spip_iface_write_ex+0x14c>)
 100b260:	681b      	ldr	r3, [r3, #0]
 100b262:	2214      	movs	r2, #20
 100b264:	4619      	mov	r1, r3
 100b266:	2000      	movs	r0, #0
 100b268:	4b1b      	ldr	r3, [pc, #108]	; (100b2d8 <spip_iface_write_ex+0x160>)
 100b26a:	4798      	blx	r3
 100b26c:	4603      	mov	r3, r0
 100b26e:	60e3      	str	r3, [r4, #12]
      NULL,
      (const uint8_t *) alloc,
      SPIP_HEADER_SIZE);
  
  TRY(spip_iface_write(iface, alloc));
 100b270:	4b14      	ldr	r3, [pc, #80]	; (100b2c4 <spip_iface_write_ex+0x14c>)
 100b272:	681b      	ldr	r3, [r3, #0]
 100b274:	4619      	mov	r1, r3
 100b276:	68f8      	ldr	r0, [r7, #12]
 100b278:	4b18      	ldr	r3, [pc, #96]	; (100b2dc <spip_iface_write_ex+0x164>)
 100b27a:	4798      	blx	r3
 100b27c:	4603      	mov	r3, r0
 100b27e:	2b00      	cmp	r3, #0
 100b280:	d108      	bne.n	100b294 <spip_iface_write_ex+0x11c>
 100b282:	4b0b      	ldr	r3, [pc, #44]	; (100b2b0 <spip_iface_write_ex+0x138>)
 100b284:	681b      	ldr	r3, [r3, #0]
 100b286:	68d8      	ldr	r0, [r3, #12]
 100b288:	4b15      	ldr	r3, [pc, #84]	; (100b2e0 <spip_iface_write_ex+0x168>)
 100b28a:	4a0b      	ldr	r2, [pc, #44]	; (100b2b8 <spip_iface_write_ex+0x140>)
 100b28c:	490b      	ldr	r1, [pc, #44]	; (100b2bc <spip_iface_write_ex+0x144>)
 100b28e:	4c0c      	ldr	r4, [pc, #48]	; (100b2c0 <spip_iface_write_ex+0x148>)
 100b290:	47a0      	blx	r4
 100b292:	e001      	b.n	100b298 <spip_iface_write_ex+0x120>
  
  ok = TRUE;
 100b294:	2301      	movs	r3, #1
 100b296:	75fb      	strb	r3, [r7, #23]
  
fail:
  return ok;    
 100b298:	7dfb      	ldrb	r3, [r7, #23]
}
 100b29a:	4618      	mov	r0, r3
 100b29c:	371c      	adds	r7, #28
 100b29e:	46bd      	mov	sp, r7
 100b2a0:	bd90      	pop	{r4, r7, pc}
 100b2a2:	bf00      	nop
 100b2a4:	f3af 8000 	nop.w
 100b2a8:	deadcefe 	.word	0xdeadcefe
 100b2ac:	a5a5a5a5 	.word	0xa5a5a5a5
 100b2b0:	200005ec 	.word	0x200005ec
 100b2b4:	01022088 	.word	0x01022088
 100b2b8:	01022058 	.word	0x01022058
 100b2bc:	01022060 	.word	0x01022060
 100b2c0:	0100bb7d 	.word	0x0100bb7d
 100b2c4:	20005a7c 	.word	0x20005a7c
 100b2c8:	20005a80 	.word	0x20005a80
 100b2cc:	0100c739 	.word	0x0100c739
 100b2d0:	01022098 	.word	0x01022098
 100b2d4:	0100c551 	.word	0x0100c551
 100b2d8:	0100adb1 	.word	0x0100adb1
 100b2dc:	0100af89 	.word	0x0100af89
 100b2e0:	010220b8 	.word	0x010220b8

0100b2e4 <spip_iface_write_frame>:

BOOL 
spip_iface_write_frame(spip_iface_t *iface, const void *data, size_t size)
{
 100b2e4:	b590      	push	{r4, r7, lr}
 100b2e6:	b085      	sub	sp, #20
 100b2e8:	af00      	add	r7, sp, #0
 100b2ea:	60f8      	str	r0, [r7, #12]
 100b2ec:	60b9      	str	r1, [r7, #8]
 100b2ee:	607a      	str	r2, [r7, #4]
  return spip_iface_write_ex(iface, SPIP_COMMAND_FRAME, data, size);
 100b2f0:	687b      	ldr	r3, [r7, #4]
 100b2f2:	68ba      	ldr	r2, [r7, #8]
 100b2f4:	2100      	movs	r1, #0
 100b2f6:	68f8      	ldr	r0, [r7, #12]
 100b2f8:	4c03      	ldr	r4, [pc, #12]	; (100b308 <spip_iface_write_frame+0x24>)
 100b2fa:	47a0      	blx	r4
 100b2fc:	4603      	mov	r3, r0
}
 100b2fe:	4618      	mov	r0, r3
 100b300:	3714      	adds	r7, #20
 100b302:	46bd      	mov	sp, r7
 100b304:	bd90      	pop	{r4, r7, pc}
 100b306:	bf00      	nop
 100b308:	0100b179 	.word	0x0100b179

0100b30c <spip_uart_write_byte>:

#include <string.h>

static BOOL
spip_uart_write_byte(void *unused, uint8_t c)
{
 100b30c:	b580      	push	{r7, lr}
 100b30e:	b082      	sub	sp, #8
 100b310:	af00      	add	r7, sp, #0
 100b312:	6078      	str	r0, [r7, #4]
 100b314:	460b      	mov	r3, r1
 100b316:	70fb      	strb	r3, [r7, #3]
  console_putchar((char) c);
 100b318:	78fb      	ldrb	r3, [r7, #3]
 100b31a:	4618      	mov	r0, r3
 100b31c:	4b03      	ldr	r3, [pc, #12]	; (100b32c <spip_uart_write_byte+0x20>)
 100b31e:	4798      	blx	r3

  return TRUE;
 100b320:	2301      	movs	r3, #1
}
 100b322:	4618      	mov	r0, r3
 100b324:	3708      	adds	r7, #8
 100b326:	46bd      	mov	sp, r7
 100b328:	bd80      	pop	{r7, pc}
 100b32a:	bf00      	nop
 100b32c:	0100a6a5 	.word	0x0100a6a5

0100b330 <spip_uart_read_byte>:

static BOOL
spip_uart_read_byte(void *unused, uint8_t *c)
{
 100b330:	b580      	push	{r7, lr}
 100b332:	b082      	sub	sp, #8
 100b334:	af00      	add	r7, sp, #0
 100b336:	6078      	str	r0, [r7, #4]
 100b338:	6039      	str	r1, [r7, #0]
  *c = console_getchar();
 100b33a:	4b05      	ldr	r3, [pc, #20]	; (100b350 <spip_uart_read_byte+0x20>)
 100b33c:	4798      	blx	r3
 100b33e:	4603      	mov	r3, r0
 100b340:	b2da      	uxtb	r2, r3
 100b342:	683b      	ldr	r3, [r7, #0]
 100b344:	701a      	strb	r2, [r3, #0]
  return TRUE;
 100b346:	2301      	movs	r3, #1
}
 100b348:	4618      	mov	r0, r3
 100b34a:	3708      	adds	r7, #8
 100b34c:	46bd      	mov	sp, r7
 100b34e:	bd80      	pop	{r7, pc}
 100b350:	0100a675 	.word	0x0100a675

0100b354 <spip_uart_interface_init>:

BOOL
spip_uart_interface_init(spip_iface_t *iface)
{
 100b354:	b480      	push	{r7}
 100b356:	b083      	sub	sp, #12
 100b358:	af00      	add	r7, sp, #0
 100b35a:	6078      	str	r0, [r7, #4]
  iface->write_byte = spip_uart_write_byte;
 100b35c:	687b      	ldr	r3, [r7, #4]
 100b35e:	4a05      	ldr	r2, [pc, #20]	; (100b374 <spip_uart_interface_init+0x20>)
 100b360:	605a      	str	r2, [r3, #4]
  iface->read_byte  = spip_uart_read_byte;
 100b362:	687b      	ldr	r3, [r7, #4]
 100b364:	4a04      	ldr	r2, [pc, #16]	; (100b378 <spip_uart_interface_init+0x24>)
 100b366:	609a      	str	r2, [r3, #8]
  
  return TRUE;  
 100b368:	2301      	movs	r3, #1
}
 100b36a:	4618      	mov	r0, r3
 100b36c:	370c      	adds	r7, #12
 100b36e:	46bd      	mov	sp, r7
 100b370:	bc80      	pop	{r7}
 100b372:	4770      	bx	lr
 100b374:	0100b30d 	.word	0x0100b30d
 100b378:	0100b331 	.word	0x0100b331

0100b37c <tx_frame_return>:
  return ret;
}

static BOOL
tx_frame_return(struct tx_frame *msg)
{
 100b37c:	b590      	push	{r4, r7, lr}
 100b37e:	b085      	sub	sp, #20
 100b380:	af00      	add	r7, sp, #0
 100b382:	6078      	str	r0, [r7, #4]
  int ndx = msg - g_tx_frame_alloc;
 100b384:	687b      	ldr	r3, [r7, #4]
 100b386:	4a24      	ldr	r2, [pc, #144]	; (100b418 <tx_frame_return+0x9c>)
 100b388:	1a9b      	subs	r3, r3, r2
 100b38a:	129b      	asrs	r3, r3, #10
 100b38c:	60bb      	str	r3, [r7, #8]
  BOOL ok = FALSE;
 100b38e:	2300      	movs	r3, #0
 100b390:	73fb      	strb	r3, [r7, #15]
  
  TRY(ndx >= 0 && ndx < BOARD_TX_MESSAGE_COUNT);
 100b392:	68bb      	ldr	r3, [r7, #8]
 100b394:	2b00      	cmp	r3, #0
 100b396:	db02      	blt.n	100b39e <tx_frame_return+0x22>
 100b398:	68bb      	ldr	r3, [r7, #8]
 100b39a:	2b09      	cmp	r3, #9
 100b39c:	dd08      	ble.n	100b3b0 <tx_frame_return+0x34>
 100b39e:	4b1f      	ldr	r3, [pc, #124]	; (100b41c <tx_frame_return+0xa0>)
 100b3a0:	681b      	ldr	r3, [r3, #0]
 100b3a2:	68d8      	ldr	r0, [r3, #12]
 100b3a4:	4b1e      	ldr	r3, [pc, #120]	; (100b420 <tx_frame_return+0xa4>)
 100b3a6:	4a1f      	ldr	r2, [pc, #124]	; (100b424 <tx_frame_return+0xa8>)
 100b3a8:	491f      	ldr	r1, [pc, #124]	; (100b428 <tx_frame_return+0xac>)
 100b3aa:	4c20      	ldr	r4, [pc, #128]	; (100b42c <tx_frame_return+0xb0>)
 100b3ac:	47a0      	blx	r4
 100b3ae:	e026      	b.n	100b3fe <tx_frame_return+0x82>
  
  xSemaphoreTake(g_tx_frame_sem, portMAX_DELAY);
 100b3b0:	4b1f      	ldr	r3, [pc, #124]	; (100b430 <tx_frame_return+0xb4>)
 100b3b2:	6818      	ldr	r0, [r3, #0]
 100b3b4:	2300      	movs	r3, #0
 100b3b6:	f04f 32ff 	mov.w	r2, #4294967295
 100b3ba:	2100      	movs	r1, #0
 100b3bc:	4c1d      	ldr	r4, [pc, #116]	; (100b434 <tx_frame_return+0xb8>)
 100b3be:	47a0      	blx	r4
  
  /* Check if it was reserved */
  TRY((1 << ndx) & g_tx_frame_mask);
 100b3c0:	2201      	movs	r2, #1
 100b3c2:	68bb      	ldr	r3, [r7, #8]
 100b3c4:	fa02 f303 	lsl.w	r3, r2, r3
 100b3c8:	461a      	mov	r2, r3
 100b3ca:	4b1b      	ldr	r3, [pc, #108]	; (100b438 <tx_frame_return+0xbc>)
 100b3cc:	681b      	ldr	r3, [r3, #0]
 100b3ce:	4013      	ands	r3, r2
 100b3d0:	2b00      	cmp	r3, #0
 100b3d2:	d108      	bne.n	100b3e6 <tx_frame_return+0x6a>
 100b3d4:	4b11      	ldr	r3, [pc, #68]	; (100b41c <tx_frame_return+0xa0>)
 100b3d6:	681b      	ldr	r3, [r3, #0]
 100b3d8:	68d8      	ldr	r0, [r3, #12]
 100b3da:	4b18      	ldr	r3, [pc, #96]	; (100b43c <tx_frame_return+0xc0>)
 100b3dc:	4a11      	ldr	r2, [pc, #68]	; (100b424 <tx_frame_return+0xa8>)
 100b3de:	4912      	ldr	r1, [pc, #72]	; (100b428 <tx_frame_return+0xac>)
 100b3e0:	4c12      	ldr	r4, [pc, #72]	; (100b42c <tx_frame_return+0xb0>)
 100b3e2:	47a0      	blx	r4
 100b3e4:	e00b      	b.n	100b3fe <tx_frame_return+0x82>
    
  g_tx_frame_mask ^= 1 << ndx;
 100b3e6:	2201      	movs	r2, #1
 100b3e8:	68bb      	ldr	r3, [r7, #8]
 100b3ea:	fa02 f303 	lsl.w	r3, r2, r3
 100b3ee:	461a      	mov	r2, r3
 100b3f0:	4b11      	ldr	r3, [pc, #68]	; (100b438 <tx_frame_return+0xbc>)
 100b3f2:	681b      	ldr	r3, [r3, #0]
 100b3f4:	4053      	eors	r3, r2
 100b3f6:	4a10      	ldr	r2, [pc, #64]	; (100b438 <tx_frame_return+0xbc>)
 100b3f8:	6013      	str	r3, [r2, #0]
  
  ok = TRUE;
 100b3fa:	2301      	movs	r3, #1
 100b3fc:	73fb      	strb	r3, [r7, #15]
  
fail:
  xSemaphoreGive(g_tx_frame_sem);
 100b3fe:	4b0c      	ldr	r3, [pc, #48]	; (100b430 <tx_frame_return+0xb4>)
 100b400:	6818      	ldr	r0, [r3, #0]
 100b402:	2300      	movs	r3, #0
 100b404:	2200      	movs	r2, #0
 100b406:	2100      	movs	r1, #0
 100b408:	4c0d      	ldr	r4, [pc, #52]	; (100b440 <tx_frame_return+0xc4>)
 100b40a:	47a0      	blx	r4
  
  return ok;
 100b40c:	7bfb      	ldrb	r3, [r7, #15]
}
 100b40e:	4618      	mov	r0, r3
 100b410:	3714      	adds	r7, #20
 100b412:	46bd      	mov	sp, r7
 100b414:	bd90      	pop	{r4, r7, pc}
 100b416:	bf00      	nop
 100b418:	20005a88 	.word	0x20005a88
 100b41c:	200005ec 	.word	0x200005ec
 100b420:	010220d8 	.word	0x010220d8
 100b424:	010220f0 	.word	0x010220f0
 100b428:	010220f8 	.word	0x010220f8
 100b42c:	0100bb7d 	.word	0x0100bb7d
 100b430:	2000828c 	.word	0x2000828c
 100b434:	01007cd5 	.word	0x01007cd5
 100b438:	20008288 	.word	0x20008288
 100b43c:	01022120 	.word	0x01022120
 100b440:	01007b0d 	.word	0x01007b0d

0100b444 <tx_task_prepare>:

static void
tx_task_prepare(void)
{
 100b444:	b590      	push	{r4, r7, lr}
 100b446:	b083      	sub	sp, #12
 100b448:	af00      	add	r7, sp, #0
  BOOL ok = FALSE;
 100b44a:	2300      	movs	r3, #0
 100b44c:	71fb      	strb	r3, [r7, #7]
  
  if (!g_tx_task_prepared) {
 100b44e:	4b16      	ldr	r3, [pc, #88]	; (100b4a8 <tx_task_prepare+0x64>)
 100b450:	781b      	ldrb	r3, [r3, #0]
 100b452:	2b00      	cmp	r3, #0
 100b454:	d11c      	bne.n	100b490 <tx_task_prepare+0x4c>
    TRY(g_tx_frame_sem = xSemaphoreCreateMutex());
 100b456:	2001      	movs	r0, #1
 100b458:	4b14      	ldr	r3, [pc, #80]	; (100b4ac <tx_task_prepare+0x68>)
 100b45a:	4798      	blx	r3
 100b45c:	4602      	mov	r2, r0
 100b45e:	4b14      	ldr	r3, [pc, #80]	; (100b4b0 <tx_task_prepare+0x6c>)
 100b460:	601a      	str	r2, [r3, #0]
 100b462:	4b13      	ldr	r3, [pc, #76]	; (100b4b0 <tx_task_prepare+0x6c>)
 100b464:	681b      	ldr	r3, [r3, #0]
 100b466:	2b00      	cmp	r3, #0
 100b468:	d108      	bne.n	100b47c <tx_task_prepare+0x38>
 100b46a:	4b12      	ldr	r3, [pc, #72]	; (100b4b4 <tx_task_prepare+0x70>)
 100b46c:	681b      	ldr	r3, [r3, #0]
 100b46e:	68d8      	ldr	r0, [r3, #12]
 100b470:	4b11      	ldr	r3, [pc, #68]	; (100b4b8 <tx_task_prepare+0x74>)
 100b472:	4a12      	ldr	r2, [pc, #72]	; (100b4bc <tx_task_prepare+0x78>)
 100b474:	4912      	ldr	r1, [pc, #72]	; (100b4c0 <tx_task_prepare+0x7c>)
 100b476:	4c13      	ldr	r4, [pc, #76]	; (100b4c4 <tx_task_prepare+0x80>)
 100b478:	47a0      	blx	r4
 100b47a:	e00b      	b.n	100b494 <tx_task_prepare+0x50>
    xSemaphoreGive(g_tx_frame_sem);
 100b47c:	4b0c      	ldr	r3, [pc, #48]	; (100b4b0 <tx_task_prepare+0x6c>)
 100b47e:	6818      	ldr	r0, [r3, #0]
 100b480:	2300      	movs	r3, #0
 100b482:	2200      	movs	r2, #0
 100b484:	2100      	movs	r1, #0
 100b486:	4c10      	ldr	r4, [pc, #64]	; (100b4c8 <tx_task_prepare+0x84>)
 100b488:	47a0      	blx	r4
    g_tx_task_prepared = TRUE;
 100b48a:	4b07      	ldr	r3, [pc, #28]	; (100b4a8 <tx_task_prepare+0x64>)
 100b48c:	2201      	movs	r2, #1
 100b48e:	701a      	strb	r2, [r3, #0]
    
  }  
  ok = TRUE;
 100b490:	2301      	movs	r3, #1
 100b492:	71fb      	strb	r3, [r7, #7]
  
fail:
  if (!ok)
 100b494:	79fb      	ldrb	r3, [r7, #7]
 100b496:	2b00      	cmp	r3, #0
 100b498:	d101      	bne.n	100b49e <tx_task_prepare+0x5a>
    hang();
 100b49a:	4b0c      	ldr	r3, [pc, #48]	; (100b4cc <tx_task_prepare+0x88>)
 100b49c:	4798      	blx	r3
}
 100b49e:	bf00      	nop
 100b4a0:	370c      	adds	r7, #12
 100b4a2:	46bd      	mov	sp, r7
 100b4a4:	bd90      	pop	{r4, r7, pc}
 100b4a6:	bf00      	nop
 100b4a8:	20005a84 	.word	0x20005a84
 100b4ac:	01007a85 	.word	0x01007a85
 100b4b0:	2000828c 	.word	0x2000828c
 100b4b4:	200005ec 	.word	0x200005ec
 100b4b8:	01022140 	.word	0x01022140
 100b4bc:	010220f0 	.word	0x010220f0
 100b4c0:	010220f8 	.word	0x010220f8
 100b4c4:	0100bb7d 	.word	0x0100bb7d
 100b4c8:	01007b0d 	.word	0x01007b0d
 100b4cc:	0100a3c9 	.word	0x0100a3c9

0100b4d0 <tx_task_func>:

static void
tx_task_func(void *userdata)
{
 100b4d0:	b590      	push	{r4, r7, lr}
 100b4d2:	b085      	sub	sp, #20
 100b4d4:	af00      	add	r7, sp, #0
 100b4d6:	6078      	str	r0, [r7, #4]
  struct tx_frame *msg = NULL;
 100b4d8:	2300      	movs	r3, #0
 100b4da:	60bb      	str	r3, [r7, #8]
  tx_task_t *task = (tx_task_t *) userdata;
 100b4dc:	687b      	ldr	r3, [r7, #4]
 100b4de:	60fb      	str	r3, [r7, #12]
  
  for (;;) {
    xQueueReceive(task->h_tx_queue, &msg, portMAX_DELAY);
 100b4e0:	68fb      	ldr	r3, [r7, #12]
 100b4e2:	6818      	ldr	r0, [r3, #0]
 100b4e4:	f107 0108 	add.w	r1, r7, #8
 100b4e8:	2300      	movs	r3, #0
 100b4ea:	f04f 32ff 	mov.w	r2, #4294967295
 100b4ee:	4c0c      	ldr	r4, [pc, #48]	; (100b520 <tx_task_func+0x50>)
 100b4f0:	47a0      	blx	r4
    
    if (phy_tx_take_exception())
 100b4f2:	4b0c      	ldr	r3, [pc, #48]	; (100b524 <tx_task_func+0x54>)
 100b4f4:	4798      	blx	r3
 100b4f6:	4603      	mov	r3, r0
 100b4f8:	2b00      	cmp	r3, #0
 100b4fa:	d001      	beq.n	100b500 <tx_task_func+0x30>
      phy_reset_params();
 100b4fc:	4b0a      	ldr	r3, [pc, #40]	; (100b528 <tx_task_func+0x58>)
 100b4fe:	4798      	blx	r3
      
    if (!phy_send_data(&task->template, msg->data, msg->size))
 100b500:	68fb      	ldr	r3, [r7, #12]
 100b502:	f103 0008 	add.w	r0, r3, #8
 100b506:	68bb      	ldr	r3, [r7, #8]
 100b508:	1d19      	adds	r1, r3, #4
 100b50a:	68bb      	ldr	r3, [r7, #8]
 100b50c:	681b      	ldr	r3, [r3, #0]
 100b50e:	461a      	mov	r2, r3
 100b510:	4b06      	ldr	r3, [pc, #24]	; (100b52c <tx_task_func+0x5c>)
 100b512:	4798      	blx	r3
      {}//lcd_puts(1, "PHY TX ERROR");
      
    if (!tx_frame_return(msg))
 100b514:	68bb      	ldr	r3, [r7, #8]
 100b516:	4618      	mov	r0, r3
 100b518:	4b05      	ldr	r3, [pc, #20]	; (100b530 <tx_task_func+0x60>)
 100b51a:	4798      	blx	r3
    xQueueReceive(task->h_tx_queue, &msg, portMAX_DELAY);
 100b51c:	e7e0      	b.n	100b4e0 <tx_task_func+0x10>
 100b51e:	bf00      	nop
 100b520:	01007cd5 	.word	0x01007cd5
 100b524:	0100a965 	.word	0x0100a965
 100b528:	0100ab79 	.word	0x0100ab79
 100b52c:	0100acdd 	.word	0x0100acdd
 100b530:	0100b37d 	.word	0x0100b37d

0100b534 <tx_task_init>:
  return ok;
}
  
BOOL
tx_task_init(tx_task_t *task)
{
 100b534:	b590      	push	{r4, r7, lr}
 100b536:	b089      	sub	sp, #36	; 0x24
 100b538:	af04      	add	r7, sp, #16
 100b53a:	6078      	str	r0, [r7, #4]
  BOOL ok = FALSE;
 100b53c:	2300      	movs	r3, #0
 100b53e:	73fb      	strb	r3, [r7, #15]
  
  memset(task, 0, sizeof(tx_task_t));
 100b540:	221c      	movs	r2, #28
 100b542:	2100      	movs	r1, #0
 100b544:	6878      	ldr	r0, [r7, #4]
 100b546:	4b25      	ldr	r3, [pc, #148]	; (100b5dc <tx_task_init+0xa8>)
 100b548:	4798      	blx	r3
  
  tx_task_prepare();
 100b54a:	4b25      	ldr	r3, [pc, #148]	; (100b5e0 <tx_task_init+0xac>)
 100b54c:	4798      	blx	r3
  
  TRY(task->h_tx_queue = 
 100b54e:	2200      	movs	r2, #0
 100b550:	2104      	movs	r1, #4
 100b552:	200a      	movs	r0, #10
 100b554:	4b23      	ldr	r3, [pc, #140]	; (100b5e4 <tx_task_init+0xb0>)
 100b556:	4798      	blx	r3
 100b558:	4602      	mov	r2, r0
 100b55a:	687b      	ldr	r3, [r7, #4]
 100b55c:	601a      	str	r2, [r3, #0]
 100b55e:	687b      	ldr	r3, [r7, #4]
 100b560:	681b      	ldr	r3, [r3, #0]
 100b562:	2b00      	cmp	r3, #0
 100b564:	d108      	bne.n	100b578 <tx_task_init+0x44>
 100b566:	4b20      	ldr	r3, [pc, #128]	; (100b5e8 <tx_task_init+0xb4>)
 100b568:	681b      	ldr	r3, [r3, #0]
 100b56a:	68d8      	ldr	r0, [r3, #12]
 100b56c:	4b1f      	ldr	r3, [pc, #124]	; (100b5ec <tx_task_init+0xb8>)
 100b56e:	4a20      	ldr	r2, [pc, #128]	; (100b5f0 <tx_task_init+0xbc>)
 100b570:	4920      	ldr	r1, [pc, #128]	; (100b5f4 <tx_task_init+0xc0>)
 100b572:	4c21      	ldr	r4, [pc, #132]	; (100b5f8 <tx_task_init+0xc4>)
 100b574:	47a0      	blx	r4
 100b576:	e02c      	b.n	100b5d2 <tx_task_init+0x9e>
    xQueueCreate(BOARD_TX_MESSAGE_COUNT, sizeof (struct tx_frame *)));
  
  /* Initialize template */
  task->template.uc_disable_rx = true;
 100b578:	687b      	ldr	r3, [r7, #4]
 100b57a:	2201      	movs	r2, #1
 100b57c:	741a      	strb	r2, [r3, #16]
  task->template.uc_mod_type   = MODE_TYPE_A;
 100b57e:	687b      	ldr	r3, [r7, #4]
 100b580:	2200      	movs	r2, #0
 100b582:	745a      	strb	r2, [r3, #17]
  task->template.uc_scheme     = MOD_SCHEME_DBPSK_C;
 100b584:	687b      	ldr	r3, [r7, #4]
 100b586:	2204      	movs	r2, #4
 100b588:	73da      	strb	r2, [r3, #15]
  task->template.uc_buffer_id  = TX_BUFFER_0;
 100b58a:	687b      	ldr	r3, [r7, #4]
 100b58c:	2200      	movs	r2, #0
 100b58e:	74da      	strb	r2, [r3, #19]
  task->template.uc_tx_mode    = TX_MODE_RELATIVE;
 100b590:	687b      	ldr	r3, [r7, #4]
 100b592:	2201      	movs	r2, #1
 100b594:	749a      	strb	r2, [r3, #18]
  
  /* Create App Phy Transmission task */
  TRY(
 100b596:	687b      	ldr	r3, [r7, #4]
 100b598:	3304      	adds	r3, #4
 100b59a:	2200      	movs	r2, #0
 100b59c:	9203      	str	r2, [sp, #12]
 100b59e:	2200      	movs	r2, #0
 100b5a0:	9202      	str	r2, [sp, #8]
 100b5a2:	9301      	str	r3, [sp, #4]
 100b5a4:	2301      	movs	r3, #1
 100b5a6:	9300      	str	r3, [sp, #0]
 100b5a8:	687b      	ldr	r3, [r7, #4]
 100b5aa:	f240 228a 	movw	r2, #650	; 0x28a
 100b5ae:	4913      	ldr	r1, [pc, #76]	; (100b5fc <tx_task_init+0xc8>)
 100b5b0:	4813      	ldr	r0, [pc, #76]	; (100b600 <tx_task_init+0xcc>)
 100b5b2:	4c14      	ldr	r4, [pc, #80]	; (100b604 <tx_task_init+0xd0>)
 100b5b4:	47a0      	blx	r4
 100b5b6:	4603      	mov	r3, r0
 100b5b8:	2b01      	cmp	r3, #1
 100b5ba:	d008      	beq.n	100b5ce <tx_task_init+0x9a>
 100b5bc:	4b0a      	ldr	r3, [pc, #40]	; (100b5e8 <tx_task_init+0xb4>)
 100b5be:	681b      	ldr	r3, [r3, #0]
 100b5c0:	68d8      	ldr	r0, [r3, #12]
 100b5c2:	4b11      	ldr	r3, [pc, #68]	; (100b608 <tx_task_init+0xd4>)
 100b5c4:	4a0a      	ldr	r2, [pc, #40]	; (100b5f0 <tx_task_init+0xbc>)
 100b5c6:	490b      	ldr	r1, [pc, #44]	; (100b5f4 <tx_task_init+0xc0>)
 100b5c8:	4c0b      	ldr	r4, [pc, #44]	; (100b5f8 <tx_task_init+0xc4>)
 100b5ca:	47a0      	blx	r4
 100b5cc:	e001      	b.n	100b5d2 <tx_task_init+0x9e>
      TASK_APP_PHY_STACK, 
      task, 
      TASK_APP_PHY_PRIO, 
      &task->h_tx_task) == pdPASS);

  ok = TRUE;
 100b5ce:	2301      	movs	r3, #1
 100b5d0:	73fb      	strb	r3, [r7, #15]
  
fail:
  return ok;
 100b5d2:	7bfb      	ldrb	r3, [r7, #15]
}
 100b5d4:	4618      	mov	r0, r3
 100b5d6:	3714      	adds	r7, #20
 100b5d8:	46bd      	mov	sp, r7
 100b5da:	bd90      	pop	{r4, r7, pc}
 100b5dc:	0100c685 	.word	0x0100c685
 100b5e0:	0100b445 	.word	0x0100b445
 100b5e4:	01007a09 	.word	0x01007a09
 100b5e8:	200005ec 	.word	0x200005ec
 100b5ec:	010221e4 	.word	0x010221e4
 100b5f0:	010220f0 	.word	0x010220f0
 100b5f4:	010220f8 	.word	0x010220f8
 100b5f8:	0100bb7d 	.word	0x0100bb7d
 100b5fc:	01022238 	.word	0x01022238
 100b600:	0100b4d1 	.word	0x0100b4d1
 100b604:	010080fd 	.word	0x010080fd
 100b608:	01022240 	.word	0x01022240

0100b60c <__aeabi_uldivmod>:
 100b60c:	b953      	cbnz	r3, 100b624 <__aeabi_uldivmod+0x18>
 100b60e:	b94a      	cbnz	r2, 100b624 <__aeabi_uldivmod+0x18>
 100b610:	2900      	cmp	r1, #0
 100b612:	bf08      	it	eq
 100b614:	2800      	cmpeq	r0, #0
 100b616:	bf1c      	itt	ne
 100b618:	f04f 31ff 	movne.w	r1, #4294967295
 100b61c:	f04f 30ff 	movne.w	r0, #4294967295
 100b620:	f000 b97a 	b.w	100b918 <__aeabi_idiv0>
 100b624:	f1ad 0c08 	sub.w	ip, sp, #8
 100b628:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 100b62c:	f000 f806 	bl	100b63c <__udivmoddi4>
 100b630:	f8dd e004 	ldr.w	lr, [sp, #4]
 100b634:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 100b638:	b004      	add	sp, #16
 100b63a:	4770      	bx	lr

0100b63c <__udivmoddi4>:
 100b63c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 100b640:	468c      	mov	ip, r1
 100b642:	460d      	mov	r5, r1
 100b644:	4604      	mov	r4, r0
 100b646:	9e08      	ldr	r6, [sp, #32]
 100b648:	2b00      	cmp	r3, #0
 100b64a:	d151      	bne.n	100b6f0 <__udivmoddi4+0xb4>
 100b64c:	428a      	cmp	r2, r1
 100b64e:	4617      	mov	r7, r2
 100b650:	d96d      	bls.n	100b72e <__udivmoddi4+0xf2>
 100b652:	fab2 fe82 	clz	lr, r2
 100b656:	f1be 0f00 	cmp.w	lr, #0
 100b65a:	d00b      	beq.n	100b674 <__udivmoddi4+0x38>
 100b65c:	f1ce 0c20 	rsb	ip, lr, #32
 100b660:	fa01 f50e 	lsl.w	r5, r1, lr
 100b664:	fa20 fc0c 	lsr.w	ip, r0, ip
 100b668:	fa02 f70e 	lsl.w	r7, r2, lr
 100b66c:	ea4c 0c05 	orr.w	ip, ip, r5
 100b670:	fa00 f40e 	lsl.w	r4, r0, lr
 100b674:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 100b678:	0c25      	lsrs	r5, r4, #16
 100b67a:	fbbc f8fa 	udiv	r8, ip, sl
 100b67e:	fa1f f987 	uxth.w	r9, r7
 100b682:	fb0a cc18 	mls	ip, sl, r8, ip
 100b686:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 100b68a:	fb08 f309 	mul.w	r3, r8, r9
 100b68e:	42ab      	cmp	r3, r5
 100b690:	d90a      	bls.n	100b6a8 <__udivmoddi4+0x6c>
 100b692:	19ed      	adds	r5, r5, r7
 100b694:	f108 32ff 	add.w	r2, r8, #4294967295
 100b698:	f080 8123 	bcs.w	100b8e2 <__udivmoddi4+0x2a6>
 100b69c:	42ab      	cmp	r3, r5
 100b69e:	f240 8120 	bls.w	100b8e2 <__udivmoddi4+0x2a6>
 100b6a2:	f1a8 0802 	sub.w	r8, r8, #2
 100b6a6:	443d      	add	r5, r7
 100b6a8:	1aed      	subs	r5, r5, r3
 100b6aa:	b2a4      	uxth	r4, r4
 100b6ac:	fbb5 f0fa 	udiv	r0, r5, sl
 100b6b0:	fb0a 5510 	mls	r5, sl, r0, r5
 100b6b4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 100b6b8:	fb00 f909 	mul.w	r9, r0, r9
 100b6bc:	45a1      	cmp	r9, r4
 100b6be:	d909      	bls.n	100b6d4 <__udivmoddi4+0x98>
 100b6c0:	19e4      	adds	r4, r4, r7
 100b6c2:	f100 33ff 	add.w	r3, r0, #4294967295
 100b6c6:	f080 810a 	bcs.w	100b8de <__udivmoddi4+0x2a2>
 100b6ca:	45a1      	cmp	r9, r4
 100b6cc:	f240 8107 	bls.w	100b8de <__udivmoddi4+0x2a2>
 100b6d0:	3802      	subs	r0, #2
 100b6d2:	443c      	add	r4, r7
 100b6d4:	eba4 0409 	sub.w	r4, r4, r9
 100b6d8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 100b6dc:	2100      	movs	r1, #0
 100b6de:	2e00      	cmp	r6, #0
 100b6e0:	d061      	beq.n	100b7a6 <__udivmoddi4+0x16a>
 100b6e2:	fa24 f40e 	lsr.w	r4, r4, lr
 100b6e6:	2300      	movs	r3, #0
 100b6e8:	6034      	str	r4, [r6, #0]
 100b6ea:	6073      	str	r3, [r6, #4]
 100b6ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 100b6f0:	428b      	cmp	r3, r1
 100b6f2:	d907      	bls.n	100b704 <__udivmoddi4+0xc8>
 100b6f4:	2e00      	cmp	r6, #0
 100b6f6:	d054      	beq.n	100b7a2 <__udivmoddi4+0x166>
 100b6f8:	2100      	movs	r1, #0
 100b6fa:	e886 0021 	stmia.w	r6, {r0, r5}
 100b6fe:	4608      	mov	r0, r1
 100b700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 100b704:	fab3 f183 	clz	r1, r3
 100b708:	2900      	cmp	r1, #0
 100b70a:	f040 808e 	bne.w	100b82a <__udivmoddi4+0x1ee>
 100b70e:	42ab      	cmp	r3, r5
 100b710:	d302      	bcc.n	100b718 <__udivmoddi4+0xdc>
 100b712:	4282      	cmp	r2, r0
 100b714:	f200 80fa 	bhi.w	100b90c <__udivmoddi4+0x2d0>
 100b718:	1a84      	subs	r4, r0, r2
 100b71a:	eb65 0503 	sbc.w	r5, r5, r3
 100b71e:	2001      	movs	r0, #1
 100b720:	46ac      	mov	ip, r5
 100b722:	2e00      	cmp	r6, #0
 100b724:	d03f      	beq.n	100b7a6 <__udivmoddi4+0x16a>
 100b726:	e886 1010 	stmia.w	r6, {r4, ip}
 100b72a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 100b72e:	b912      	cbnz	r2, 100b736 <__udivmoddi4+0xfa>
 100b730:	2701      	movs	r7, #1
 100b732:	fbb7 f7f2 	udiv	r7, r7, r2
 100b736:	fab7 fe87 	clz	lr, r7
 100b73a:	f1be 0f00 	cmp.w	lr, #0
 100b73e:	d134      	bne.n	100b7aa <__udivmoddi4+0x16e>
 100b740:	1beb      	subs	r3, r5, r7
 100b742:	0c3a      	lsrs	r2, r7, #16
 100b744:	fa1f fc87 	uxth.w	ip, r7
 100b748:	2101      	movs	r1, #1
 100b74a:	fbb3 f8f2 	udiv	r8, r3, r2
 100b74e:	0c25      	lsrs	r5, r4, #16
 100b750:	fb02 3318 	mls	r3, r2, r8, r3
 100b754:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 100b758:	fb0c f308 	mul.w	r3, ip, r8
 100b75c:	42ab      	cmp	r3, r5
 100b75e:	d907      	bls.n	100b770 <__udivmoddi4+0x134>
 100b760:	19ed      	adds	r5, r5, r7
 100b762:	f108 30ff 	add.w	r0, r8, #4294967295
 100b766:	d202      	bcs.n	100b76e <__udivmoddi4+0x132>
 100b768:	42ab      	cmp	r3, r5
 100b76a:	f200 80d1 	bhi.w	100b910 <__udivmoddi4+0x2d4>
 100b76e:	4680      	mov	r8, r0
 100b770:	1aed      	subs	r5, r5, r3
 100b772:	b2a3      	uxth	r3, r4
 100b774:	fbb5 f0f2 	udiv	r0, r5, r2
 100b778:	fb02 5510 	mls	r5, r2, r0, r5
 100b77c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 100b780:	fb0c fc00 	mul.w	ip, ip, r0
 100b784:	45a4      	cmp	ip, r4
 100b786:	d907      	bls.n	100b798 <__udivmoddi4+0x15c>
 100b788:	19e4      	adds	r4, r4, r7
 100b78a:	f100 33ff 	add.w	r3, r0, #4294967295
 100b78e:	d202      	bcs.n	100b796 <__udivmoddi4+0x15a>
 100b790:	45a4      	cmp	ip, r4
 100b792:	f200 80b8 	bhi.w	100b906 <__udivmoddi4+0x2ca>
 100b796:	4618      	mov	r0, r3
 100b798:	eba4 040c 	sub.w	r4, r4, ip
 100b79c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 100b7a0:	e79d      	b.n	100b6de <__udivmoddi4+0xa2>
 100b7a2:	4631      	mov	r1, r6
 100b7a4:	4630      	mov	r0, r6
 100b7a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 100b7aa:	f1ce 0420 	rsb	r4, lr, #32
 100b7ae:	fa05 f30e 	lsl.w	r3, r5, lr
 100b7b2:	fa07 f70e 	lsl.w	r7, r7, lr
 100b7b6:	fa20 f804 	lsr.w	r8, r0, r4
 100b7ba:	0c3a      	lsrs	r2, r7, #16
 100b7bc:	fa25 f404 	lsr.w	r4, r5, r4
 100b7c0:	ea48 0803 	orr.w	r8, r8, r3
 100b7c4:	fbb4 f1f2 	udiv	r1, r4, r2
 100b7c8:	ea4f 4518 	mov.w	r5, r8, lsr #16
 100b7cc:	fb02 4411 	mls	r4, r2, r1, r4
 100b7d0:	fa1f fc87 	uxth.w	ip, r7
 100b7d4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 100b7d8:	fb01 f30c 	mul.w	r3, r1, ip
 100b7dc:	42ab      	cmp	r3, r5
 100b7de:	fa00 f40e 	lsl.w	r4, r0, lr
 100b7e2:	d909      	bls.n	100b7f8 <__udivmoddi4+0x1bc>
 100b7e4:	19ed      	adds	r5, r5, r7
 100b7e6:	f101 30ff 	add.w	r0, r1, #4294967295
 100b7ea:	f080 808a 	bcs.w	100b902 <__udivmoddi4+0x2c6>
 100b7ee:	42ab      	cmp	r3, r5
 100b7f0:	f240 8087 	bls.w	100b902 <__udivmoddi4+0x2c6>
 100b7f4:	3902      	subs	r1, #2
 100b7f6:	443d      	add	r5, r7
 100b7f8:	1aeb      	subs	r3, r5, r3
 100b7fa:	fa1f f588 	uxth.w	r5, r8
 100b7fe:	fbb3 f0f2 	udiv	r0, r3, r2
 100b802:	fb02 3310 	mls	r3, r2, r0, r3
 100b806:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 100b80a:	fb00 f30c 	mul.w	r3, r0, ip
 100b80e:	42ab      	cmp	r3, r5
 100b810:	d907      	bls.n	100b822 <__udivmoddi4+0x1e6>
 100b812:	19ed      	adds	r5, r5, r7
 100b814:	f100 38ff 	add.w	r8, r0, #4294967295
 100b818:	d26f      	bcs.n	100b8fa <__udivmoddi4+0x2be>
 100b81a:	42ab      	cmp	r3, r5
 100b81c:	d96d      	bls.n	100b8fa <__udivmoddi4+0x2be>
 100b81e:	3802      	subs	r0, #2
 100b820:	443d      	add	r5, r7
 100b822:	1aeb      	subs	r3, r5, r3
 100b824:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 100b828:	e78f      	b.n	100b74a <__udivmoddi4+0x10e>
 100b82a:	f1c1 0720 	rsb	r7, r1, #32
 100b82e:	fa22 f807 	lsr.w	r8, r2, r7
 100b832:	408b      	lsls	r3, r1
 100b834:	fa05 f401 	lsl.w	r4, r5, r1
 100b838:	ea48 0303 	orr.w	r3, r8, r3
 100b83c:	fa20 fe07 	lsr.w	lr, r0, r7
 100b840:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 100b844:	40fd      	lsrs	r5, r7
 100b846:	ea4e 0e04 	orr.w	lr, lr, r4
 100b84a:	fbb5 f9fc 	udiv	r9, r5, ip
 100b84e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 100b852:	fb0c 5519 	mls	r5, ip, r9, r5
 100b856:	fa1f f883 	uxth.w	r8, r3
 100b85a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 100b85e:	fb09 f408 	mul.w	r4, r9, r8
 100b862:	42ac      	cmp	r4, r5
 100b864:	fa02 f201 	lsl.w	r2, r2, r1
 100b868:	fa00 fa01 	lsl.w	sl, r0, r1
 100b86c:	d908      	bls.n	100b880 <__udivmoddi4+0x244>
 100b86e:	18ed      	adds	r5, r5, r3
 100b870:	f109 30ff 	add.w	r0, r9, #4294967295
 100b874:	d243      	bcs.n	100b8fe <__udivmoddi4+0x2c2>
 100b876:	42ac      	cmp	r4, r5
 100b878:	d941      	bls.n	100b8fe <__udivmoddi4+0x2c2>
 100b87a:	f1a9 0902 	sub.w	r9, r9, #2
 100b87e:	441d      	add	r5, r3
 100b880:	1b2d      	subs	r5, r5, r4
 100b882:	fa1f fe8e 	uxth.w	lr, lr
 100b886:	fbb5 f0fc 	udiv	r0, r5, ip
 100b88a:	fb0c 5510 	mls	r5, ip, r0, r5
 100b88e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 100b892:	fb00 f808 	mul.w	r8, r0, r8
 100b896:	45a0      	cmp	r8, r4
 100b898:	d907      	bls.n	100b8aa <__udivmoddi4+0x26e>
 100b89a:	18e4      	adds	r4, r4, r3
 100b89c:	f100 35ff 	add.w	r5, r0, #4294967295
 100b8a0:	d229      	bcs.n	100b8f6 <__udivmoddi4+0x2ba>
 100b8a2:	45a0      	cmp	r8, r4
 100b8a4:	d927      	bls.n	100b8f6 <__udivmoddi4+0x2ba>
 100b8a6:	3802      	subs	r0, #2
 100b8a8:	441c      	add	r4, r3
 100b8aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 100b8ae:	eba4 0408 	sub.w	r4, r4, r8
 100b8b2:	fba0 8902 	umull	r8, r9, r0, r2
 100b8b6:	454c      	cmp	r4, r9
 100b8b8:	46c6      	mov	lr, r8
 100b8ba:	464d      	mov	r5, r9
 100b8bc:	d315      	bcc.n	100b8ea <__udivmoddi4+0x2ae>
 100b8be:	d012      	beq.n	100b8e6 <__udivmoddi4+0x2aa>
 100b8c0:	b156      	cbz	r6, 100b8d8 <__udivmoddi4+0x29c>
 100b8c2:	ebba 030e 	subs.w	r3, sl, lr
 100b8c6:	eb64 0405 	sbc.w	r4, r4, r5
 100b8ca:	fa04 f707 	lsl.w	r7, r4, r7
 100b8ce:	40cb      	lsrs	r3, r1
 100b8d0:	431f      	orrs	r7, r3
 100b8d2:	40cc      	lsrs	r4, r1
 100b8d4:	6037      	str	r7, [r6, #0]
 100b8d6:	6074      	str	r4, [r6, #4]
 100b8d8:	2100      	movs	r1, #0
 100b8da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 100b8de:	4618      	mov	r0, r3
 100b8e0:	e6f8      	b.n	100b6d4 <__udivmoddi4+0x98>
 100b8e2:	4690      	mov	r8, r2
 100b8e4:	e6e0      	b.n	100b6a8 <__udivmoddi4+0x6c>
 100b8e6:	45c2      	cmp	sl, r8
 100b8e8:	d2ea      	bcs.n	100b8c0 <__udivmoddi4+0x284>
 100b8ea:	ebb8 0e02 	subs.w	lr, r8, r2
 100b8ee:	eb69 0503 	sbc.w	r5, r9, r3
 100b8f2:	3801      	subs	r0, #1
 100b8f4:	e7e4      	b.n	100b8c0 <__udivmoddi4+0x284>
 100b8f6:	4628      	mov	r0, r5
 100b8f8:	e7d7      	b.n	100b8aa <__udivmoddi4+0x26e>
 100b8fa:	4640      	mov	r0, r8
 100b8fc:	e791      	b.n	100b822 <__udivmoddi4+0x1e6>
 100b8fe:	4681      	mov	r9, r0
 100b900:	e7be      	b.n	100b880 <__udivmoddi4+0x244>
 100b902:	4601      	mov	r1, r0
 100b904:	e778      	b.n	100b7f8 <__udivmoddi4+0x1bc>
 100b906:	3802      	subs	r0, #2
 100b908:	443c      	add	r4, r7
 100b90a:	e745      	b.n	100b798 <__udivmoddi4+0x15c>
 100b90c:	4608      	mov	r0, r1
 100b90e:	e708      	b.n	100b722 <__udivmoddi4+0xe6>
 100b910:	f1a8 0802 	sub.w	r8, r8, #2
 100b914:	443d      	add	r5, r7
 100b916:	e72b      	b.n	100b770 <__udivmoddi4+0x134>

0100b918 <__aeabi_idiv0>:
 100b918:	4770      	bx	lr
 100b91a:	bf00      	nop

0100b91c <__sflush_r>:
 100b91c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 100b920:	b29a      	uxth	r2, r3
 100b922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 100b926:	460d      	mov	r5, r1
 100b928:	0711      	lsls	r1, r2, #28
 100b92a:	4680      	mov	r8, r0
 100b92c:	d43a      	bmi.n	100b9a4 <__sflush_r+0x88>
 100b92e:	686a      	ldr	r2, [r5, #4]
 100b930:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 100b934:	2a00      	cmp	r2, #0
 100b936:	81ab      	strh	r3, [r5, #12]
 100b938:	dd6f      	ble.n	100ba1a <__sflush_r+0xfe>
 100b93a:	6aac      	ldr	r4, [r5, #40]	; 0x28
 100b93c:	2c00      	cmp	r4, #0
 100b93e:	d049      	beq.n	100b9d4 <__sflush_r+0xb8>
 100b940:	2200      	movs	r2, #0
 100b942:	b29b      	uxth	r3, r3
 100b944:	f8d8 6000 	ldr.w	r6, [r8]
 100b948:	f8c8 2000 	str.w	r2, [r8]
 100b94c:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
 100b950:	d067      	beq.n	100ba22 <__sflush_r+0x106>
 100b952:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 100b954:	075f      	lsls	r7, r3, #29
 100b956:	d505      	bpl.n	100b964 <__sflush_r+0x48>
 100b958:	6869      	ldr	r1, [r5, #4]
 100b95a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 100b95c:	1a52      	subs	r2, r2, r1
 100b95e:	b10b      	cbz	r3, 100b964 <__sflush_r+0x48>
 100b960:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 100b962:	1ad2      	subs	r2, r2, r3
 100b964:	2300      	movs	r3, #0
 100b966:	69e9      	ldr	r1, [r5, #28]
 100b968:	4640      	mov	r0, r8
 100b96a:	47a0      	blx	r4
 100b96c:	1c44      	adds	r4, r0, #1
 100b96e:	d03c      	beq.n	100b9ea <__sflush_r+0xce>
 100b970:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 100b974:	692a      	ldr	r2, [r5, #16]
 100b976:	602a      	str	r2, [r5, #0]
 100b978:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 100b97c:	2200      	movs	r2, #0
 100b97e:	81ab      	strh	r3, [r5, #12]
 100b980:	04db      	lsls	r3, r3, #19
 100b982:	606a      	str	r2, [r5, #4]
 100b984:	d447      	bmi.n	100ba16 <__sflush_r+0xfa>
 100b986:	6b29      	ldr	r1, [r5, #48]	; 0x30
 100b988:	f8c8 6000 	str.w	r6, [r8]
 100b98c:	b311      	cbz	r1, 100b9d4 <__sflush_r+0xb8>
 100b98e:	f105 0340 	add.w	r3, r5, #64	; 0x40
 100b992:	4299      	cmp	r1, r3
 100b994:	d002      	beq.n	100b99c <__sflush_r+0x80>
 100b996:	4640      	mov	r0, r8
 100b998:	f000 f954 	bl	100bc44 <_free_r>
 100b99c:	2000      	movs	r0, #0
 100b99e:	6328      	str	r0, [r5, #48]	; 0x30
 100b9a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 100b9a4:	692e      	ldr	r6, [r5, #16]
 100b9a6:	b1ae      	cbz	r6, 100b9d4 <__sflush_r+0xb8>
 100b9a8:	682c      	ldr	r4, [r5, #0]
 100b9aa:	602e      	str	r6, [r5, #0]
 100b9ac:	0791      	lsls	r1, r2, #30
 100b9ae:	bf0c      	ite	eq
 100b9b0:	696b      	ldreq	r3, [r5, #20]
 100b9b2:	2300      	movne	r3, #0
 100b9b4:	1ba4      	subs	r4, r4, r6
 100b9b6:	60ab      	str	r3, [r5, #8]
 100b9b8:	e00a      	b.n	100b9d0 <__sflush_r+0xb4>
 100b9ba:	4623      	mov	r3, r4
 100b9bc:	4632      	mov	r2, r6
 100b9be:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 100b9c0:	69e9      	ldr	r1, [r5, #28]
 100b9c2:	4640      	mov	r0, r8
 100b9c4:	47b8      	blx	r7
 100b9c6:	2800      	cmp	r0, #0
 100b9c8:	eba4 0400 	sub.w	r4, r4, r0
 100b9cc:	4406      	add	r6, r0
 100b9ce:	dd04      	ble.n	100b9da <__sflush_r+0xbe>
 100b9d0:	2c00      	cmp	r4, #0
 100b9d2:	dcf2      	bgt.n	100b9ba <__sflush_r+0x9e>
 100b9d4:	2000      	movs	r0, #0
 100b9d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 100b9da:	89ab      	ldrh	r3, [r5, #12]
 100b9dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 100b9e0:	81ab      	strh	r3, [r5, #12]
 100b9e2:	f04f 30ff 	mov.w	r0, #4294967295
 100b9e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 100b9ea:	f8d8 4000 	ldr.w	r4, [r8]
 100b9ee:	2c1d      	cmp	r4, #29
 100b9f0:	d8f3      	bhi.n	100b9da <__sflush_r+0xbe>
 100b9f2:	4b19      	ldr	r3, [pc, #100]	; (100ba58 <__sflush_r+0x13c>)
 100b9f4:	40e3      	lsrs	r3, r4
 100b9f6:	43db      	mvns	r3, r3
 100b9f8:	f013 0301 	ands.w	r3, r3, #1
 100b9fc:	d1ed      	bne.n	100b9da <__sflush_r+0xbe>
 100b9fe:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
 100ba02:	606b      	str	r3, [r5, #4]
 100ba04:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
 100ba08:	6929      	ldr	r1, [r5, #16]
 100ba0a:	81ab      	strh	r3, [r5, #12]
 100ba0c:	04da      	lsls	r2, r3, #19
 100ba0e:	6029      	str	r1, [r5, #0]
 100ba10:	d5b9      	bpl.n	100b986 <__sflush_r+0x6a>
 100ba12:	2c00      	cmp	r4, #0
 100ba14:	d1b7      	bne.n	100b986 <__sflush_r+0x6a>
 100ba16:	6528      	str	r0, [r5, #80]	; 0x50
 100ba18:	e7b5      	b.n	100b986 <__sflush_r+0x6a>
 100ba1a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 100ba1c:	2a00      	cmp	r2, #0
 100ba1e:	dc8c      	bgt.n	100b93a <__sflush_r+0x1e>
 100ba20:	e7d8      	b.n	100b9d4 <__sflush_r+0xb8>
 100ba22:	2301      	movs	r3, #1
 100ba24:	69e9      	ldr	r1, [r5, #28]
 100ba26:	4640      	mov	r0, r8
 100ba28:	47a0      	blx	r4
 100ba2a:	1c43      	adds	r3, r0, #1
 100ba2c:	4602      	mov	r2, r0
 100ba2e:	d002      	beq.n	100ba36 <__sflush_r+0x11a>
 100ba30:	89ab      	ldrh	r3, [r5, #12]
 100ba32:	6aac      	ldr	r4, [r5, #40]	; 0x28
 100ba34:	e78e      	b.n	100b954 <__sflush_r+0x38>
 100ba36:	f8d8 3000 	ldr.w	r3, [r8]
 100ba3a:	2b00      	cmp	r3, #0
 100ba3c:	d0f8      	beq.n	100ba30 <__sflush_r+0x114>
 100ba3e:	2b1d      	cmp	r3, #29
 100ba40:	d001      	beq.n	100ba46 <__sflush_r+0x12a>
 100ba42:	2b16      	cmp	r3, #22
 100ba44:	d102      	bne.n	100ba4c <__sflush_r+0x130>
 100ba46:	f8c8 6000 	str.w	r6, [r8]
 100ba4a:	e7c3      	b.n	100b9d4 <__sflush_r+0xb8>
 100ba4c:	89ab      	ldrh	r3, [r5, #12]
 100ba4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 100ba52:	81ab      	strh	r3, [r5, #12]
 100ba54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 100ba58:	20400001 	.word	0x20400001

0100ba5c <_fflush_r>:
 100ba5c:	b538      	push	{r3, r4, r5, lr}
 100ba5e:	460d      	mov	r5, r1
 100ba60:	4604      	mov	r4, r0
 100ba62:	b108      	cbz	r0, 100ba68 <_fflush_r+0xc>
 100ba64:	6b83      	ldr	r3, [r0, #56]	; 0x38
 100ba66:	b1bb      	cbz	r3, 100ba98 <_fflush_r+0x3c>
 100ba68:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
 100ba6c:	b188      	cbz	r0, 100ba92 <_fflush_r+0x36>
 100ba6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 100ba70:	07db      	lsls	r3, r3, #31
 100ba72:	d401      	bmi.n	100ba78 <_fflush_r+0x1c>
 100ba74:	0581      	lsls	r1, r0, #22
 100ba76:	d517      	bpl.n	100baa8 <_fflush_r+0x4c>
 100ba78:	4620      	mov	r0, r4
 100ba7a:	4629      	mov	r1, r5
 100ba7c:	f7ff ff4e 	bl	100b91c <__sflush_r>
 100ba80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 100ba82:	07da      	lsls	r2, r3, #31
 100ba84:	4604      	mov	r4, r0
 100ba86:	d402      	bmi.n	100ba8e <_fflush_r+0x32>
 100ba88:	89ab      	ldrh	r3, [r5, #12]
 100ba8a:	059b      	lsls	r3, r3, #22
 100ba8c:	d507      	bpl.n	100ba9e <_fflush_r+0x42>
 100ba8e:	4620      	mov	r0, r4
 100ba90:	bd38      	pop	{r3, r4, r5, pc}
 100ba92:	4604      	mov	r4, r0
 100ba94:	4620      	mov	r0, r4
 100ba96:	bd38      	pop	{r3, r4, r5, pc}
 100ba98:	f000 f838 	bl	100bb0c <__sinit>
 100ba9c:	e7e4      	b.n	100ba68 <_fflush_r+0xc>
 100ba9e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 100baa0:	f000 fa30 	bl	100bf04 <__retarget_lock_release_recursive>
 100baa4:	4620      	mov	r0, r4
 100baa6:	bd38      	pop	{r3, r4, r5, pc}
 100baa8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 100baaa:	f000 fa29 	bl	100bf00 <__retarget_lock_acquire_recursive>
 100baae:	e7e3      	b.n	100ba78 <_fflush_r+0x1c>

0100bab0 <_cleanup_r>:
 100bab0:	4901      	ldr	r1, [pc, #4]	; (100bab8 <_cleanup_r+0x8>)
 100bab2:	f000 b9ad 	b.w	100be10 <_fwalk_reent>
 100bab6:	bf00      	nop
 100bab8:	010100d5 	.word	0x010100d5

0100babc <std.isra.0>:
 100babc:	b510      	push	{r4, lr}
 100babe:	2300      	movs	r3, #0
 100bac0:	4604      	mov	r4, r0
 100bac2:	8181      	strh	r1, [r0, #12]
 100bac4:	81c2      	strh	r2, [r0, #14]
 100bac6:	6003      	str	r3, [r0, #0]
 100bac8:	6043      	str	r3, [r0, #4]
 100baca:	6083      	str	r3, [r0, #8]
 100bacc:	6643      	str	r3, [r0, #100]	; 0x64
 100bace:	6103      	str	r3, [r0, #16]
 100bad0:	6143      	str	r3, [r0, #20]
 100bad2:	6183      	str	r3, [r0, #24]
 100bad4:	4619      	mov	r1, r3
 100bad6:	2208      	movs	r2, #8
 100bad8:	305c      	adds	r0, #92	; 0x5c
 100bada:	f000 fdd3 	bl	100c684 <memset>
 100bade:	4807      	ldr	r0, [pc, #28]	; (100bafc <std.isra.0+0x40>)
 100bae0:	4907      	ldr	r1, [pc, #28]	; (100bb00 <std.isra.0+0x44>)
 100bae2:	4a08      	ldr	r2, [pc, #32]	; (100bb04 <std.isra.0+0x48>)
 100bae4:	4b08      	ldr	r3, [pc, #32]	; (100bb08 <std.isra.0+0x4c>)
 100bae6:	6220      	str	r0, [r4, #32]
 100bae8:	61e4      	str	r4, [r4, #28]
 100baea:	6261      	str	r1, [r4, #36]	; 0x24
 100baec:	62a2      	str	r2, [r4, #40]	; 0x28
 100baee:	62e3      	str	r3, [r4, #44]	; 0x2c
 100baf0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 100baf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 100baf8:	f000 b9fe 	b.w	100bef8 <__retarget_lock_init_recursive>
 100bafc:	0100cab9 	.word	0x0100cab9
 100bb00:	0100cadd 	.word	0x0100cadd
 100bb04:	0100cb19 	.word	0x0100cb19
 100bb08:	0100cb39 	.word	0x0100cb39

0100bb0c <__sinit>:
 100bb0c:	b510      	push	{r4, lr}
 100bb0e:	4604      	mov	r4, r0
 100bb10:	4812      	ldr	r0, [pc, #72]	; (100bb5c <__sinit+0x50>)
 100bb12:	f000 f9f5 	bl	100bf00 <__retarget_lock_acquire_recursive>
 100bb16:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 100bb18:	b9d2      	cbnz	r2, 100bb50 <__sinit+0x44>
 100bb1a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 100bb1e:	4810      	ldr	r0, [pc, #64]	; (100bb60 <__sinit+0x54>)
 100bb20:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 100bb24:	2103      	movs	r1, #3
 100bb26:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 100bb2a:	63e0      	str	r0, [r4, #60]	; 0x3c
 100bb2c:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
 100bb30:	6860      	ldr	r0, [r4, #4]
 100bb32:	2104      	movs	r1, #4
 100bb34:	f7ff ffc2 	bl	100babc <std.isra.0>
 100bb38:	2201      	movs	r2, #1
 100bb3a:	2109      	movs	r1, #9
 100bb3c:	68a0      	ldr	r0, [r4, #8]
 100bb3e:	f7ff ffbd 	bl	100babc <std.isra.0>
 100bb42:	2202      	movs	r2, #2
 100bb44:	2112      	movs	r1, #18
 100bb46:	68e0      	ldr	r0, [r4, #12]
 100bb48:	f7ff ffb8 	bl	100babc <std.isra.0>
 100bb4c:	2301      	movs	r3, #1
 100bb4e:	63a3      	str	r3, [r4, #56]	; 0x38
 100bb50:	4802      	ldr	r0, [pc, #8]	; (100bb5c <__sinit+0x50>)
 100bb52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 100bb56:	f000 b9d5 	b.w	100bf04 <__retarget_lock_release_recursive>
 100bb5a:	bf00      	nop
 100bb5c:	2000833c 	.word	0x2000833c
 100bb60:	0100bab1 	.word	0x0100bab1

0100bb64 <__sfp_lock_acquire>:
 100bb64:	4801      	ldr	r0, [pc, #4]	; (100bb6c <__sfp_lock_acquire+0x8>)
 100bb66:	f000 b9cb 	b.w	100bf00 <__retarget_lock_acquire_recursive>
 100bb6a:	bf00      	nop
 100bb6c:	20008350 	.word	0x20008350

0100bb70 <__sfp_lock_release>:
 100bb70:	4801      	ldr	r0, [pc, #4]	; (100bb78 <__sfp_lock_release+0x8>)
 100bb72:	f000 b9c7 	b.w	100bf04 <__retarget_lock_release_recursive>
 100bb76:	bf00      	nop
 100bb78:	20008350 	.word	0x20008350

0100bb7c <fprintf>:
 100bb7c:	b40e      	push	{r1, r2, r3}
 100bb7e:	b510      	push	{r4, lr}
 100bb80:	b083      	sub	sp, #12
 100bb82:	ab05      	add	r3, sp, #20
 100bb84:	4c06      	ldr	r4, [pc, #24]	; (100bba0 <fprintf+0x24>)
 100bb86:	f853 2b04 	ldr.w	r2, [r3], #4
 100bb8a:	9301      	str	r3, [sp, #4]
 100bb8c:	4601      	mov	r1, r0
 100bb8e:	6820      	ldr	r0, [r4, #0]
 100bb90:	f001 ff4a 	bl	100da28 <_vfprintf_r>
 100bb94:	b003      	add	sp, #12
 100bb96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 100bb9a:	b003      	add	sp, #12
 100bb9c:	4770      	bx	lr
 100bb9e:	bf00      	nop
 100bba0:	200005ec 	.word	0x200005ec

0100bba4 <_malloc_trim_r>:
 100bba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 100bba6:	4f24      	ldr	r7, [pc, #144]	; (100bc38 <_malloc_trim_r+0x94>)
 100bba8:	460c      	mov	r4, r1
 100bbaa:	4606      	mov	r6, r0
 100bbac:	f000 fdb8 	bl	100c720 <__malloc_lock>
 100bbb0:	68bb      	ldr	r3, [r7, #8]
 100bbb2:	685d      	ldr	r5, [r3, #4]
 100bbb4:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
 100bbb8:	310f      	adds	r1, #15
 100bbba:	f025 0503 	bic.w	r5, r5, #3
 100bbbe:	4429      	add	r1, r5
 100bbc0:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 100bbc4:	f021 010f 	bic.w	r1, r1, #15
 100bbc8:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 100bbcc:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 100bbd0:	db07      	blt.n	100bbe2 <_malloc_trim_r+0x3e>
 100bbd2:	2100      	movs	r1, #0
 100bbd4:	4630      	mov	r0, r6
 100bbd6:	f000 ff5d 	bl	100ca94 <_sbrk_r>
 100bbda:	68bb      	ldr	r3, [r7, #8]
 100bbdc:	442b      	add	r3, r5
 100bbde:	4298      	cmp	r0, r3
 100bbe0:	d004      	beq.n	100bbec <_malloc_trim_r+0x48>
 100bbe2:	4630      	mov	r0, r6
 100bbe4:	f000 fda2 	bl	100c72c <__malloc_unlock>
 100bbe8:	2000      	movs	r0, #0
 100bbea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 100bbec:	4261      	negs	r1, r4
 100bbee:	4630      	mov	r0, r6
 100bbf0:	f000 ff50 	bl	100ca94 <_sbrk_r>
 100bbf4:	3001      	adds	r0, #1
 100bbf6:	d00d      	beq.n	100bc14 <_malloc_trim_r+0x70>
 100bbf8:	4b10      	ldr	r3, [pc, #64]	; (100bc3c <_malloc_trim_r+0x98>)
 100bbfa:	68ba      	ldr	r2, [r7, #8]
 100bbfc:	6819      	ldr	r1, [r3, #0]
 100bbfe:	1b2d      	subs	r5, r5, r4
 100bc00:	f045 0501 	orr.w	r5, r5, #1
 100bc04:	4630      	mov	r0, r6
 100bc06:	1b09      	subs	r1, r1, r4
 100bc08:	6055      	str	r5, [r2, #4]
 100bc0a:	6019      	str	r1, [r3, #0]
 100bc0c:	f000 fd8e 	bl	100c72c <__malloc_unlock>
 100bc10:	2001      	movs	r0, #1
 100bc12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 100bc14:	2100      	movs	r1, #0
 100bc16:	4630      	mov	r0, r6
 100bc18:	f000 ff3c 	bl	100ca94 <_sbrk_r>
 100bc1c:	68ba      	ldr	r2, [r7, #8]
 100bc1e:	1a83      	subs	r3, r0, r2
 100bc20:	2b0f      	cmp	r3, #15
 100bc22:	ddde      	ble.n	100bbe2 <_malloc_trim_r+0x3e>
 100bc24:	4c06      	ldr	r4, [pc, #24]	; (100bc40 <_malloc_trim_r+0x9c>)
 100bc26:	4905      	ldr	r1, [pc, #20]	; (100bc3c <_malloc_trim_r+0x98>)
 100bc28:	6824      	ldr	r4, [r4, #0]
 100bc2a:	f043 0301 	orr.w	r3, r3, #1
 100bc2e:	1b00      	subs	r0, r0, r4
 100bc30:	6053      	str	r3, [r2, #4]
 100bc32:	6008      	str	r0, [r1, #0]
 100bc34:	e7d5      	b.n	100bbe2 <_malloc_trim_r+0x3e>
 100bc36:	bf00      	nop
 100bc38:	20000b84 	.word	0x20000b84
 100bc3c:	20008290 	.word	0x20008290
 100bc40:	20000f8c 	.word	0x20000f8c

0100bc44 <_free_r>:
 100bc44:	2900      	cmp	r1, #0
 100bc46:	d044      	beq.n	100bcd2 <_free_r+0x8e>
 100bc48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 100bc4c:	460d      	mov	r5, r1
 100bc4e:	4680      	mov	r8, r0
 100bc50:	f000 fd66 	bl	100c720 <__malloc_lock>
 100bc54:	f855 7c04 	ldr.w	r7, [r5, #-4]
 100bc58:	4969      	ldr	r1, [pc, #420]	; (100be00 <_free_r+0x1bc>)
 100bc5a:	f027 0301 	bic.w	r3, r7, #1
 100bc5e:	f1a5 0408 	sub.w	r4, r5, #8
 100bc62:	18e2      	adds	r2, r4, r3
 100bc64:	688e      	ldr	r6, [r1, #8]
 100bc66:	6850      	ldr	r0, [r2, #4]
 100bc68:	42b2      	cmp	r2, r6
 100bc6a:	f020 0003 	bic.w	r0, r0, #3
 100bc6e:	d05e      	beq.n	100bd2e <_free_r+0xea>
 100bc70:	07fe      	lsls	r6, r7, #31
 100bc72:	6050      	str	r0, [r2, #4]
 100bc74:	d40b      	bmi.n	100bc8e <_free_r+0x4a>
 100bc76:	f855 7c08 	ldr.w	r7, [r5, #-8]
 100bc7a:	1be4      	subs	r4, r4, r7
 100bc7c:	f101 0e08 	add.w	lr, r1, #8
 100bc80:	68a5      	ldr	r5, [r4, #8]
 100bc82:	4575      	cmp	r5, lr
 100bc84:	443b      	add	r3, r7
 100bc86:	d06d      	beq.n	100bd64 <_free_r+0x120>
 100bc88:	68e7      	ldr	r7, [r4, #12]
 100bc8a:	60ef      	str	r7, [r5, #12]
 100bc8c:	60bd      	str	r5, [r7, #8]
 100bc8e:	1815      	adds	r5, r2, r0
 100bc90:	686d      	ldr	r5, [r5, #4]
 100bc92:	07ed      	lsls	r5, r5, #31
 100bc94:	d53e      	bpl.n	100bd14 <_free_r+0xd0>
 100bc96:	f043 0201 	orr.w	r2, r3, #1
 100bc9a:	6062      	str	r2, [r4, #4]
 100bc9c:	50e3      	str	r3, [r4, r3]
 100bc9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 100bca2:	d217      	bcs.n	100bcd4 <_free_r+0x90>
 100bca4:	08db      	lsrs	r3, r3, #3
 100bca6:	1c58      	adds	r0, r3, #1
 100bca8:	109a      	asrs	r2, r3, #2
 100bcaa:	684d      	ldr	r5, [r1, #4]
 100bcac:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
 100bcb0:	60a7      	str	r7, [r4, #8]
 100bcb2:	2301      	movs	r3, #1
 100bcb4:	4093      	lsls	r3, r2
 100bcb6:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
 100bcba:	432b      	orrs	r3, r5
 100bcbc:	3a08      	subs	r2, #8
 100bcbe:	60e2      	str	r2, [r4, #12]
 100bcc0:	604b      	str	r3, [r1, #4]
 100bcc2:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
 100bcc6:	60fc      	str	r4, [r7, #12]
 100bcc8:	4640      	mov	r0, r8
 100bcca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 100bcce:	f000 bd2d 	b.w	100c72c <__malloc_unlock>
 100bcd2:	4770      	bx	lr
 100bcd4:	0a5a      	lsrs	r2, r3, #9
 100bcd6:	2a04      	cmp	r2, #4
 100bcd8:	d852      	bhi.n	100bd80 <_free_r+0x13c>
 100bcda:	099a      	lsrs	r2, r3, #6
 100bcdc:	f102 0739 	add.w	r7, r2, #57	; 0x39
 100bce0:	00ff      	lsls	r7, r7, #3
 100bce2:	f102 0538 	add.w	r5, r2, #56	; 0x38
 100bce6:	19c8      	adds	r0, r1, r7
 100bce8:	59ca      	ldr	r2, [r1, r7]
 100bcea:	3808      	subs	r0, #8
 100bcec:	4290      	cmp	r0, r2
 100bcee:	d04f      	beq.n	100bd90 <_free_r+0x14c>
 100bcf0:	6851      	ldr	r1, [r2, #4]
 100bcf2:	f021 0103 	bic.w	r1, r1, #3
 100bcf6:	428b      	cmp	r3, r1
 100bcf8:	d232      	bcs.n	100bd60 <_free_r+0x11c>
 100bcfa:	6892      	ldr	r2, [r2, #8]
 100bcfc:	4290      	cmp	r0, r2
 100bcfe:	d1f7      	bne.n	100bcf0 <_free_r+0xac>
 100bd00:	68c3      	ldr	r3, [r0, #12]
 100bd02:	60a0      	str	r0, [r4, #8]
 100bd04:	60e3      	str	r3, [r4, #12]
 100bd06:	609c      	str	r4, [r3, #8]
 100bd08:	60c4      	str	r4, [r0, #12]
 100bd0a:	4640      	mov	r0, r8
 100bd0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 100bd10:	f000 bd0c 	b.w	100c72c <__malloc_unlock>
 100bd14:	6895      	ldr	r5, [r2, #8]
 100bd16:	4f3b      	ldr	r7, [pc, #236]	; (100be04 <_free_r+0x1c0>)
 100bd18:	42bd      	cmp	r5, r7
 100bd1a:	4403      	add	r3, r0
 100bd1c:	d040      	beq.n	100bda0 <_free_r+0x15c>
 100bd1e:	68d0      	ldr	r0, [r2, #12]
 100bd20:	60e8      	str	r0, [r5, #12]
 100bd22:	f043 0201 	orr.w	r2, r3, #1
 100bd26:	6085      	str	r5, [r0, #8]
 100bd28:	6062      	str	r2, [r4, #4]
 100bd2a:	50e3      	str	r3, [r4, r3]
 100bd2c:	e7b7      	b.n	100bc9e <_free_r+0x5a>
 100bd2e:	07ff      	lsls	r7, r7, #31
 100bd30:	4403      	add	r3, r0
 100bd32:	d407      	bmi.n	100bd44 <_free_r+0x100>
 100bd34:	f855 2c08 	ldr.w	r2, [r5, #-8]
 100bd38:	1aa4      	subs	r4, r4, r2
 100bd3a:	4413      	add	r3, r2
 100bd3c:	68a0      	ldr	r0, [r4, #8]
 100bd3e:	68e2      	ldr	r2, [r4, #12]
 100bd40:	60c2      	str	r2, [r0, #12]
 100bd42:	6090      	str	r0, [r2, #8]
 100bd44:	4a30      	ldr	r2, [pc, #192]	; (100be08 <_free_r+0x1c4>)
 100bd46:	6812      	ldr	r2, [r2, #0]
 100bd48:	f043 0001 	orr.w	r0, r3, #1
 100bd4c:	4293      	cmp	r3, r2
 100bd4e:	6060      	str	r0, [r4, #4]
 100bd50:	608c      	str	r4, [r1, #8]
 100bd52:	d3b9      	bcc.n	100bcc8 <_free_r+0x84>
 100bd54:	4b2d      	ldr	r3, [pc, #180]	; (100be0c <_free_r+0x1c8>)
 100bd56:	4640      	mov	r0, r8
 100bd58:	6819      	ldr	r1, [r3, #0]
 100bd5a:	f7ff ff23 	bl	100bba4 <_malloc_trim_r>
 100bd5e:	e7b3      	b.n	100bcc8 <_free_r+0x84>
 100bd60:	4610      	mov	r0, r2
 100bd62:	e7cd      	b.n	100bd00 <_free_r+0xbc>
 100bd64:	1811      	adds	r1, r2, r0
 100bd66:	6849      	ldr	r1, [r1, #4]
 100bd68:	07c9      	lsls	r1, r1, #31
 100bd6a:	d444      	bmi.n	100bdf6 <_free_r+0x1b2>
 100bd6c:	6891      	ldr	r1, [r2, #8]
 100bd6e:	68d2      	ldr	r2, [r2, #12]
 100bd70:	60ca      	str	r2, [r1, #12]
 100bd72:	4403      	add	r3, r0
 100bd74:	f043 0001 	orr.w	r0, r3, #1
 100bd78:	6091      	str	r1, [r2, #8]
 100bd7a:	6060      	str	r0, [r4, #4]
 100bd7c:	50e3      	str	r3, [r4, r3]
 100bd7e:	e7a3      	b.n	100bcc8 <_free_r+0x84>
 100bd80:	2a14      	cmp	r2, #20
 100bd82:	d816      	bhi.n	100bdb2 <_free_r+0x16e>
 100bd84:	f102 075c 	add.w	r7, r2, #92	; 0x5c
 100bd88:	00ff      	lsls	r7, r7, #3
 100bd8a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 100bd8e:	e7aa      	b.n	100bce6 <_free_r+0xa2>
 100bd90:	10aa      	asrs	r2, r5, #2
 100bd92:	2301      	movs	r3, #1
 100bd94:	684d      	ldr	r5, [r1, #4]
 100bd96:	4093      	lsls	r3, r2
 100bd98:	432b      	orrs	r3, r5
 100bd9a:	604b      	str	r3, [r1, #4]
 100bd9c:	4603      	mov	r3, r0
 100bd9e:	e7b0      	b.n	100bd02 <_free_r+0xbe>
 100bda0:	f043 0201 	orr.w	r2, r3, #1
 100bda4:	614c      	str	r4, [r1, #20]
 100bda6:	610c      	str	r4, [r1, #16]
 100bda8:	60e5      	str	r5, [r4, #12]
 100bdaa:	60a5      	str	r5, [r4, #8]
 100bdac:	6062      	str	r2, [r4, #4]
 100bdae:	50e3      	str	r3, [r4, r3]
 100bdb0:	e78a      	b.n	100bcc8 <_free_r+0x84>
 100bdb2:	2a54      	cmp	r2, #84	; 0x54
 100bdb4:	d806      	bhi.n	100bdc4 <_free_r+0x180>
 100bdb6:	0b1a      	lsrs	r2, r3, #12
 100bdb8:	f102 076f 	add.w	r7, r2, #111	; 0x6f
 100bdbc:	00ff      	lsls	r7, r7, #3
 100bdbe:	f102 056e 	add.w	r5, r2, #110	; 0x6e
 100bdc2:	e790      	b.n	100bce6 <_free_r+0xa2>
 100bdc4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 100bdc8:	d806      	bhi.n	100bdd8 <_free_r+0x194>
 100bdca:	0bda      	lsrs	r2, r3, #15
 100bdcc:	f102 0778 	add.w	r7, r2, #120	; 0x78
 100bdd0:	00ff      	lsls	r7, r7, #3
 100bdd2:	f102 0577 	add.w	r5, r2, #119	; 0x77
 100bdd6:	e786      	b.n	100bce6 <_free_r+0xa2>
 100bdd8:	f240 5054 	movw	r0, #1364	; 0x554
 100bddc:	4282      	cmp	r2, r0
 100bdde:	d806      	bhi.n	100bdee <_free_r+0x1aa>
 100bde0:	0c9a      	lsrs	r2, r3, #18
 100bde2:	f102 077d 	add.w	r7, r2, #125	; 0x7d
 100bde6:	00ff      	lsls	r7, r7, #3
 100bde8:	f102 057c 	add.w	r5, r2, #124	; 0x7c
 100bdec:	e77b      	b.n	100bce6 <_free_r+0xa2>
 100bdee:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
 100bdf2:	257e      	movs	r5, #126	; 0x7e
 100bdf4:	e777      	b.n	100bce6 <_free_r+0xa2>
 100bdf6:	f043 0101 	orr.w	r1, r3, #1
 100bdfa:	6061      	str	r1, [r4, #4]
 100bdfc:	6013      	str	r3, [r2, #0]
 100bdfe:	e763      	b.n	100bcc8 <_free_r+0x84>
 100be00:	20000b84 	.word	0x20000b84
 100be04:	20000b8c 	.word	0x20000b8c
 100be08:	20000f90 	.word	0x20000f90
 100be0c:	200082c0 	.word	0x200082c0

0100be10 <_fwalk_reent>:
 100be10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 100be14:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 100be18:	d01f      	beq.n	100be5a <_fwalk_reent+0x4a>
 100be1a:	4688      	mov	r8, r1
 100be1c:	4606      	mov	r6, r0
 100be1e:	f04f 0900 	mov.w	r9, #0
 100be22:	687d      	ldr	r5, [r7, #4]
 100be24:	68bc      	ldr	r4, [r7, #8]
 100be26:	3d01      	subs	r5, #1
 100be28:	d411      	bmi.n	100be4e <_fwalk_reent+0x3e>
 100be2a:	89a3      	ldrh	r3, [r4, #12]
 100be2c:	2b01      	cmp	r3, #1
 100be2e:	f105 35ff 	add.w	r5, r5, #4294967295
 100be32:	d908      	bls.n	100be46 <_fwalk_reent+0x36>
 100be34:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 100be38:	3301      	adds	r3, #1
 100be3a:	4621      	mov	r1, r4
 100be3c:	4630      	mov	r0, r6
 100be3e:	d002      	beq.n	100be46 <_fwalk_reent+0x36>
 100be40:	47c0      	blx	r8
 100be42:	ea49 0900 	orr.w	r9, r9, r0
 100be46:	1c6b      	adds	r3, r5, #1
 100be48:	f104 0468 	add.w	r4, r4, #104	; 0x68
 100be4c:	d1ed      	bne.n	100be2a <_fwalk_reent+0x1a>
 100be4e:	683f      	ldr	r7, [r7, #0]
 100be50:	2f00      	cmp	r7, #0
 100be52:	d1e6      	bne.n	100be22 <_fwalk_reent+0x12>
 100be54:	4648      	mov	r0, r9
 100be56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 100be5a:	46b9      	mov	r9, r7
 100be5c:	4648      	mov	r0, r9
 100be5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 100be62:	bf00      	nop

0100be64 <__libc_init_array>:
 100be64:	b570      	push	{r4, r5, r6, lr}
 100be66:	4e0f      	ldr	r6, [pc, #60]	; (100bea4 <__libc_init_array+0x40>)
 100be68:	4d0f      	ldr	r5, [pc, #60]	; (100bea8 <__libc_init_array+0x44>)
 100be6a:	1b76      	subs	r6, r6, r5
 100be6c:	10b6      	asrs	r6, r6, #2
 100be6e:	bf18      	it	ne
 100be70:	2400      	movne	r4, #0
 100be72:	d005      	beq.n	100be80 <__libc_init_array+0x1c>
 100be74:	3401      	adds	r4, #1
 100be76:	f855 3b04 	ldr.w	r3, [r5], #4
 100be7a:	4798      	blx	r3
 100be7c:	42a6      	cmp	r6, r4
 100be7e:	d1f9      	bne.n	100be74 <__libc_init_array+0x10>
 100be80:	4e0a      	ldr	r6, [pc, #40]	; (100beac <__libc_init_array+0x48>)
 100be82:	4d0b      	ldr	r5, [pc, #44]	; (100beb0 <__libc_init_array+0x4c>)
 100be84:	1b76      	subs	r6, r6, r5
 100be86:	f016 fba1 	bl	10225cc <_init>
 100be8a:	10b6      	asrs	r6, r6, #2
 100be8c:	bf18      	it	ne
 100be8e:	2400      	movne	r4, #0
 100be90:	d006      	beq.n	100bea0 <__libc_init_array+0x3c>
 100be92:	3401      	adds	r4, #1
 100be94:	f855 3b04 	ldr.w	r3, [r5], #4
 100be98:	4798      	blx	r3
 100be9a:	42a6      	cmp	r6, r4
 100be9c:	d1f9      	bne.n	100be92 <__libc_init_array+0x2e>
 100be9e:	bd70      	pop	{r4, r5, r6, pc}
 100bea0:	bd70      	pop	{r4, r5, r6, pc}
 100bea2:	bf00      	nop
 100bea4:	010225d8 	.word	0x010225d8
 100bea8:	010225d8 	.word	0x010225d8
 100beac:	010225e0 	.word	0x010225e0
 100beb0:	010225d8 	.word	0x010225d8

0100beb4 <iprintf>:
 100beb4:	b40f      	push	{r0, r1, r2, r3}
 100beb6:	b500      	push	{lr}
 100beb8:	4907      	ldr	r1, [pc, #28]	; (100bed8 <iprintf+0x24>)
 100beba:	b083      	sub	sp, #12
 100bebc:	ab04      	add	r3, sp, #16
 100bebe:	6808      	ldr	r0, [r1, #0]
 100bec0:	f853 2b04 	ldr.w	r2, [r3], #4
 100bec4:	6881      	ldr	r1, [r0, #8]
 100bec6:	9301      	str	r3, [sp, #4]
 100bec8:	f000 ff24 	bl	100cd14 <_vfiprintf_r>
 100becc:	b003      	add	sp, #12
 100bece:	f85d eb04 	ldr.w	lr, [sp], #4
 100bed2:	b004      	add	sp, #16
 100bed4:	4770      	bx	lr
 100bed6:	bf00      	nop
 100bed8:	200005ec 	.word	0x200005ec

0100bedc <__locale_mb_cur_max>:
 100bedc:	4b04      	ldr	r3, [pc, #16]	; (100bef0 <__locale_mb_cur_max+0x14>)
 100bede:	4a05      	ldr	r2, [pc, #20]	; (100bef4 <__locale_mb_cur_max+0x18>)
 100bee0:	681b      	ldr	r3, [r3, #0]
 100bee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 100bee4:	2b00      	cmp	r3, #0
 100bee6:	bf08      	it	eq
 100bee8:	4613      	moveq	r3, r2
 100beea:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 100beee:	4770      	bx	lr
 100bef0:	200005ec 	.word	0x200005ec
 100bef4:	20000a18 	.word	0x20000a18

0100bef8 <__retarget_lock_init_recursive>:
 100bef8:	4770      	bx	lr
 100befa:	bf00      	nop

0100befc <__retarget_lock_close_recursive>:
 100befc:	4770      	bx	lr
 100befe:	bf00      	nop

0100bf00 <__retarget_lock_acquire_recursive>:
 100bf00:	4770      	bx	lr
 100bf02:	bf00      	nop

0100bf04 <__retarget_lock_release_recursive>:
 100bf04:	4770      	bx	lr
 100bf06:	bf00      	nop

0100bf08 <malloc>:
 100bf08:	4b02      	ldr	r3, [pc, #8]	; (100bf14 <malloc+0xc>)
 100bf0a:	4601      	mov	r1, r0
 100bf0c:	6818      	ldr	r0, [r3, #0]
 100bf0e:	f000 b803 	b.w	100bf18 <_malloc_r>
 100bf12:	bf00      	nop
 100bf14:	200005ec 	.word	0x200005ec

0100bf18 <_malloc_r>:
 100bf18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 100bf1c:	f101 060b 	add.w	r6, r1, #11
 100bf20:	2e16      	cmp	r6, #22
 100bf22:	b083      	sub	sp, #12
 100bf24:	4605      	mov	r5, r0
 100bf26:	f240 809e 	bls.w	100c066 <_malloc_r+0x14e>
 100bf2a:	f036 0607 	bics.w	r6, r6, #7
 100bf2e:	f100 80bd 	bmi.w	100c0ac <_malloc_r+0x194>
 100bf32:	42b1      	cmp	r1, r6
 100bf34:	f200 80ba 	bhi.w	100c0ac <_malloc_r+0x194>
 100bf38:	f000 fbf2 	bl	100c720 <__malloc_lock>
 100bf3c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
 100bf40:	f0c0 8293 	bcc.w	100c46a <_malloc_r+0x552>
 100bf44:	0a73      	lsrs	r3, r6, #9
 100bf46:	f000 80b8 	beq.w	100c0ba <_malloc_r+0x1a2>
 100bf4a:	2b04      	cmp	r3, #4
 100bf4c:	f200 8179 	bhi.w	100c242 <_malloc_r+0x32a>
 100bf50:	09b3      	lsrs	r3, r6, #6
 100bf52:	f103 0039 	add.w	r0, r3, #57	; 0x39
 100bf56:	f103 0e38 	add.w	lr, r3, #56	; 0x38
 100bf5a:	00c3      	lsls	r3, r0, #3
 100bf5c:	4fbf      	ldr	r7, [pc, #764]	; (100c25c <_malloc_r+0x344>)
 100bf5e:	443b      	add	r3, r7
 100bf60:	f1a3 0108 	sub.w	r1, r3, #8
 100bf64:	685c      	ldr	r4, [r3, #4]
 100bf66:	42a1      	cmp	r1, r4
 100bf68:	d106      	bne.n	100bf78 <_malloc_r+0x60>
 100bf6a:	e00c      	b.n	100bf86 <_malloc_r+0x6e>
 100bf6c:	2a00      	cmp	r2, #0
 100bf6e:	f280 80aa 	bge.w	100c0c6 <_malloc_r+0x1ae>
 100bf72:	68e4      	ldr	r4, [r4, #12]
 100bf74:	42a1      	cmp	r1, r4
 100bf76:	d006      	beq.n	100bf86 <_malloc_r+0x6e>
 100bf78:	6863      	ldr	r3, [r4, #4]
 100bf7a:	f023 0303 	bic.w	r3, r3, #3
 100bf7e:	1b9a      	subs	r2, r3, r6
 100bf80:	2a0f      	cmp	r2, #15
 100bf82:	ddf3      	ble.n	100bf6c <_malloc_r+0x54>
 100bf84:	4670      	mov	r0, lr
 100bf86:	693c      	ldr	r4, [r7, #16]
 100bf88:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 100c270 <_malloc_r+0x358>
 100bf8c:	4574      	cmp	r4, lr
 100bf8e:	f000 81ab 	beq.w	100c2e8 <_malloc_r+0x3d0>
 100bf92:	6863      	ldr	r3, [r4, #4]
 100bf94:	f023 0303 	bic.w	r3, r3, #3
 100bf98:	1b9a      	subs	r2, r3, r6
 100bf9a:	2a0f      	cmp	r2, #15
 100bf9c:	f300 8190 	bgt.w	100c2c0 <_malloc_r+0x3a8>
 100bfa0:	2a00      	cmp	r2, #0
 100bfa2:	f8c7 e014 	str.w	lr, [r7, #20]
 100bfa6:	f8c7 e010 	str.w	lr, [r7, #16]
 100bfaa:	f280 809d 	bge.w	100c0e8 <_malloc_r+0x1d0>
 100bfae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 100bfb2:	f080 8161 	bcs.w	100c278 <_malloc_r+0x360>
 100bfb6:	08db      	lsrs	r3, r3, #3
 100bfb8:	f103 0c01 	add.w	ip, r3, #1
 100bfbc:	1099      	asrs	r1, r3, #2
 100bfbe:	687a      	ldr	r2, [r7, #4]
 100bfc0:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
 100bfc4:	f8c4 8008 	str.w	r8, [r4, #8]
 100bfc8:	2301      	movs	r3, #1
 100bfca:	408b      	lsls	r3, r1
 100bfcc:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
 100bfd0:	4313      	orrs	r3, r2
 100bfd2:	3908      	subs	r1, #8
 100bfd4:	60e1      	str	r1, [r4, #12]
 100bfd6:	607b      	str	r3, [r7, #4]
 100bfd8:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
 100bfdc:	f8c8 400c 	str.w	r4, [r8, #12]
 100bfe0:	1082      	asrs	r2, r0, #2
 100bfe2:	2401      	movs	r4, #1
 100bfe4:	4094      	lsls	r4, r2
 100bfe6:	429c      	cmp	r4, r3
 100bfe8:	f200 808b 	bhi.w	100c102 <_malloc_r+0x1ea>
 100bfec:	421c      	tst	r4, r3
 100bfee:	d106      	bne.n	100bffe <_malloc_r+0xe6>
 100bff0:	f020 0003 	bic.w	r0, r0, #3
 100bff4:	0064      	lsls	r4, r4, #1
 100bff6:	421c      	tst	r4, r3
 100bff8:	f100 0004 	add.w	r0, r0, #4
 100bffc:	d0fa      	beq.n	100bff4 <_malloc_r+0xdc>
 100bffe:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 100c002:	46cc      	mov	ip, r9
 100c004:	4680      	mov	r8, r0
 100c006:	f8dc 300c 	ldr.w	r3, [ip, #12]
 100c00a:	459c      	cmp	ip, r3
 100c00c:	d107      	bne.n	100c01e <_malloc_r+0x106>
 100c00e:	e16d      	b.n	100c2ec <_malloc_r+0x3d4>
 100c010:	2a00      	cmp	r2, #0
 100c012:	f280 817b 	bge.w	100c30c <_malloc_r+0x3f4>
 100c016:	68db      	ldr	r3, [r3, #12]
 100c018:	459c      	cmp	ip, r3
 100c01a:	f000 8167 	beq.w	100c2ec <_malloc_r+0x3d4>
 100c01e:	6859      	ldr	r1, [r3, #4]
 100c020:	f021 0103 	bic.w	r1, r1, #3
 100c024:	1b8a      	subs	r2, r1, r6
 100c026:	2a0f      	cmp	r2, #15
 100c028:	ddf2      	ble.n	100c010 <_malloc_r+0xf8>
 100c02a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 100c02e:	f8d3 8008 	ldr.w	r8, [r3, #8]
 100c032:	9300      	str	r3, [sp, #0]
 100c034:	199c      	adds	r4, r3, r6
 100c036:	4628      	mov	r0, r5
 100c038:	f046 0601 	orr.w	r6, r6, #1
 100c03c:	f042 0501 	orr.w	r5, r2, #1
 100c040:	605e      	str	r6, [r3, #4]
 100c042:	f8c8 c00c 	str.w	ip, [r8, #12]
 100c046:	f8cc 8008 	str.w	r8, [ip, #8]
 100c04a:	617c      	str	r4, [r7, #20]
 100c04c:	613c      	str	r4, [r7, #16]
 100c04e:	f8c4 e00c 	str.w	lr, [r4, #12]
 100c052:	f8c4 e008 	str.w	lr, [r4, #8]
 100c056:	6065      	str	r5, [r4, #4]
 100c058:	505a      	str	r2, [r3, r1]
 100c05a:	f000 fb67 	bl	100c72c <__malloc_unlock>
 100c05e:	9b00      	ldr	r3, [sp, #0]
 100c060:	f103 0408 	add.w	r4, r3, #8
 100c064:	e01e      	b.n	100c0a4 <_malloc_r+0x18c>
 100c066:	2910      	cmp	r1, #16
 100c068:	d820      	bhi.n	100c0ac <_malloc_r+0x194>
 100c06a:	f000 fb59 	bl	100c720 <__malloc_lock>
 100c06e:	2610      	movs	r6, #16
 100c070:	2318      	movs	r3, #24
 100c072:	2002      	movs	r0, #2
 100c074:	4f79      	ldr	r7, [pc, #484]	; (100c25c <_malloc_r+0x344>)
 100c076:	443b      	add	r3, r7
 100c078:	f1a3 0208 	sub.w	r2, r3, #8
 100c07c:	685c      	ldr	r4, [r3, #4]
 100c07e:	4294      	cmp	r4, r2
 100c080:	f000 813d 	beq.w	100c2fe <_malloc_r+0x3e6>
 100c084:	6863      	ldr	r3, [r4, #4]
 100c086:	68e1      	ldr	r1, [r4, #12]
 100c088:	68a6      	ldr	r6, [r4, #8]
 100c08a:	f023 0303 	bic.w	r3, r3, #3
 100c08e:	4423      	add	r3, r4
 100c090:	4628      	mov	r0, r5
 100c092:	685a      	ldr	r2, [r3, #4]
 100c094:	60f1      	str	r1, [r6, #12]
 100c096:	f042 0201 	orr.w	r2, r2, #1
 100c09a:	608e      	str	r6, [r1, #8]
 100c09c:	605a      	str	r2, [r3, #4]
 100c09e:	f000 fb45 	bl	100c72c <__malloc_unlock>
 100c0a2:	3408      	adds	r4, #8
 100c0a4:	4620      	mov	r0, r4
 100c0a6:	b003      	add	sp, #12
 100c0a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100c0ac:	2400      	movs	r4, #0
 100c0ae:	230c      	movs	r3, #12
 100c0b0:	4620      	mov	r0, r4
 100c0b2:	602b      	str	r3, [r5, #0]
 100c0b4:	b003      	add	sp, #12
 100c0b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100c0ba:	2040      	movs	r0, #64	; 0x40
 100c0bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 100c0c0:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
 100c0c4:	e74a      	b.n	100bf5c <_malloc_r+0x44>
 100c0c6:	4423      	add	r3, r4
 100c0c8:	68e1      	ldr	r1, [r4, #12]
 100c0ca:	685a      	ldr	r2, [r3, #4]
 100c0cc:	68a6      	ldr	r6, [r4, #8]
 100c0ce:	f042 0201 	orr.w	r2, r2, #1
 100c0d2:	60f1      	str	r1, [r6, #12]
 100c0d4:	4628      	mov	r0, r5
 100c0d6:	608e      	str	r6, [r1, #8]
 100c0d8:	605a      	str	r2, [r3, #4]
 100c0da:	f000 fb27 	bl	100c72c <__malloc_unlock>
 100c0de:	3408      	adds	r4, #8
 100c0e0:	4620      	mov	r0, r4
 100c0e2:	b003      	add	sp, #12
 100c0e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100c0e8:	4423      	add	r3, r4
 100c0ea:	4628      	mov	r0, r5
 100c0ec:	685a      	ldr	r2, [r3, #4]
 100c0ee:	f042 0201 	orr.w	r2, r2, #1
 100c0f2:	605a      	str	r2, [r3, #4]
 100c0f4:	f000 fb1a 	bl	100c72c <__malloc_unlock>
 100c0f8:	3408      	adds	r4, #8
 100c0fa:	4620      	mov	r0, r4
 100c0fc:	b003      	add	sp, #12
 100c0fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100c102:	68bc      	ldr	r4, [r7, #8]
 100c104:	6863      	ldr	r3, [r4, #4]
 100c106:	f023 0803 	bic.w	r8, r3, #3
 100c10a:	45b0      	cmp	r8, r6
 100c10c:	d304      	bcc.n	100c118 <_malloc_r+0x200>
 100c10e:	eba8 0306 	sub.w	r3, r8, r6
 100c112:	2b0f      	cmp	r3, #15
 100c114:	f300 8085 	bgt.w	100c222 <_malloc_r+0x30a>
 100c118:	f8df 9158 	ldr.w	r9, [pc, #344]	; 100c274 <_malloc_r+0x35c>
 100c11c:	4b50      	ldr	r3, [pc, #320]	; (100c260 <_malloc_r+0x348>)
 100c11e:	f8d9 2000 	ldr.w	r2, [r9]
 100c122:	681b      	ldr	r3, [r3, #0]
 100c124:	3201      	adds	r2, #1
 100c126:	4433      	add	r3, r6
 100c128:	eb04 0a08 	add.w	sl, r4, r8
 100c12c:	f000 8155 	beq.w	100c3da <_malloc_r+0x4c2>
 100c130:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 100c134:	330f      	adds	r3, #15
 100c136:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
 100c13a:	f02b 0b0f 	bic.w	fp, fp, #15
 100c13e:	4659      	mov	r1, fp
 100c140:	4628      	mov	r0, r5
 100c142:	f000 fca7 	bl	100ca94 <_sbrk_r>
 100c146:	1c41      	adds	r1, r0, #1
 100c148:	4602      	mov	r2, r0
 100c14a:	f000 80fc 	beq.w	100c346 <_malloc_r+0x42e>
 100c14e:	4582      	cmp	sl, r0
 100c150:	f200 80f7 	bhi.w	100c342 <_malloc_r+0x42a>
 100c154:	4b43      	ldr	r3, [pc, #268]	; (100c264 <_malloc_r+0x34c>)
 100c156:	6819      	ldr	r1, [r3, #0]
 100c158:	4459      	add	r1, fp
 100c15a:	6019      	str	r1, [r3, #0]
 100c15c:	f000 814d 	beq.w	100c3fa <_malloc_r+0x4e2>
 100c160:	f8d9 0000 	ldr.w	r0, [r9]
 100c164:	3001      	adds	r0, #1
 100c166:	bf1b      	ittet	ne
 100c168:	eba2 0a0a 	subne.w	sl, r2, sl
 100c16c:	4451      	addne	r1, sl
 100c16e:	f8c9 2000 	streq.w	r2, [r9]
 100c172:	6019      	strne	r1, [r3, #0]
 100c174:	f012 0107 	ands.w	r1, r2, #7
 100c178:	f000 8115 	beq.w	100c3a6 <_malloc_r+0x48e>
 100c17c:	f1c1 0008 	rsb	r0, r1, #8
 100c180:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 100c184:	4402      	add	r2, r0
 100c186:	3108      	adds	r1, #8
 100c188:	eb02 090b 	add.w	r9, r2, fp
 100c18c:	f3c9 090b 	ubfx	r9, r9, #0, #12
 100c190:	eba1 0909 	sub.w	r9, r1, r9
 100c194:	4649      	mov	r1, r9
 100c196:	4628      	mov	r0, r5
 100c198:	9301      	str	r3, [sp, #4]
 100c19a:	9200      	str	r2, [sp, #0]
 100c19c:	f000 fc7a 	bl	100ca94 <_sbrk_r>
 100c1a0:	1c43      	adds	r3, r0, #1
 100c1a2:	e89d 000c 	ldmia.w	sp, {r2, r3}
 100c1a6:	f000 8143 	beq.w	100c430 <_malloc_r+0x518>
 100c1aa:	1a80      	subs	r0, r0, r2
 100c1ac:	4448      	add	r0, r9
 100c1ae:	f040 0001 	orr.w	r0, r0, #1
 100c1b2:	6819      	ldr	r1, [r3, #0]
 100c1b4:	60ba      	str	r2, [r7, #8]
 100c1b6:	4449      	add	r1, r9
 100c1b8:	42bc      	cmp	r4, r7
 100c1ba:	6050      	str	r0, [r2, #4]
 100c1bc:	6019      	str	r1, [r3, #0]
 100c1be:	d017      	beq.n	100c1f0 <_malloc_r+0x2d8>
 100c1c0:	f1b8 0f0f 	cmp.w	r8, #15
 100c1c4:	f240 80fb 	bls.w	100c3be <_malloc_r+0x4a6>
 100c1c8:	6860      	ldr	r0, [r4, #4]
 100c1ca:	f1a8 020c 	sub.w	r2, r8, #12
 100c1ce:	f022 0207 	bic.w	r2, r2, #7
 100c1d2:	eb04 0e02 	add.w	lr, r4, r2
 100c1d6:	f000 0001 	and.w	r0, r0, #1
 100c1da:	f04f 0c05 	mov.w	ip, #5
 100c1de:	4310      	orrs	r0, r2
 100c1e0:	2a0f      	cmp	r2, #15
 100c1e2:	6060      	str	r0, [r4, #4]
 100c1e4:	f8ce c004 	str.w	ip, [lr, #4]
 100c1e8:	f8ce c008 	str.w	ip, [lr, #8]
 100c1ec:	f200 8117 	bhi.w	100c41e <_malloc_r+0x506>
 100c1f0:	4b1d      	ldr	r3, [pc, #116]	; (100c268 <_malloc_r+0x350>)
 100c1f2:	68bc      	ldr	r4, [r7, #8]
 100c1f4:	681a      	ldr	r2, [r3, #0]
 100c1f6:	4291      	cmp	r1, r2
 100c1f8:	bf88      	it	hi
 100c1fa:	6019      	strhi	r1, [r3, #0]
 100c1fc:	4b1b      	ldr	r3, [pc, #108]	; (100c26c <_malloc_r+0x354>)
 100c1fe:	681a      	ldr	r2, [r3, #0]
 100c200:	4291      	cmp	r1, r2
 100c202:	6862      	ldr	r2, [r4, #4]
 100c204:	bf88      	it	hi
 100c206:	6019      	strhi	r1, [r3, #0]
 100c208:	f022 0203 	bic.w	r2, r2, #3
 100c20c:	4296      	cmp	r6, r2
 100c20e:	eba2 0306 	sub.w	r3, r2, r6
 100c212:	d801      	bhi.n	100c218 <_malloc_r+0x300>
 100c214:	2b0f      	cmp	r3, #15
 100c216:	dc04      	bgt.n	100c222 <_malloc_r+0x30a>
 100c218:	4628      	mov	r0, r5
 100c21a:	f000 fa87 	bl	100c72c <__malloc_unlock>
 100c21e:	2400      	movs	r4, #0
 100c220:	e740      	b.n	100c0a4 <_malloc_r+0x18c>
 100c222:	19a2      	adds	r2, r4, r6
 100c224:	f043 0301 	orr.w	r3, r3, #1
 100c228:	f046 0601 	orr.w	r6, r6, #1
 100c22c:	6066      	str	r6, [r4, #4]
 100c22e:	4628      	mov	r0, r5
 100c230:	60ba      	str	r2, [r7, #8]
 100c232:	6053      	str	r3, [r2, #4]
 100c234:	f000 fa7a 	bl	100c72c <__malloc_unlock>
 100c238:	3408      	adds	r4, #8
 100c23a:	4620      	mov	r0, r4
 100c23c:	b003      	add	sp, #12
 100c23e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100c242:	2b14      	cmp	r3, #20
 100c244:	d971      	bls.n	100c32a <_malloc_r+0x412>
 100c246:	2b54      	cmp	r3, #84	; 0x54
 100c248:	f200 80a3 	bhi.w	100c392 <_malloc_r+0x47a>
 100c24c:	0b33      	lsrs	r3, r6, #12
 100c24e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 100c252:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
 100c256:	00c3      	lsls	r3, r0, #3
 100c258:	e680      	b.n	100bf5c <_malloc_r+0x44>
 100c25a:	bf00      	nop
 100c25c:	20000b84 	.word	0x20000b84
 100c260:	200082c0 	.word	0x200082c0
 100c264:	20008290 	.word	0x20008290
 100c268:	200082b8 	.word	0x200082b8
 100c26c:	200082bc 	.word	0x200082bc
 100c270:	20000b8c 	.word	0x20000b8c
 100c274:	20000f8c 	.word	0x20000f8c
 100c278:	0a5a      	lsrs	r2, r3, #9
 100c27a:	2a04      	cmp	r2, #4
 100c27c:	d95b      	bls.n	100c336 <_malloc_r+0x41e>
 100c27e:	2a14      	cmp	r2, #20
 100c280:	f200 80ae 	bhi.w	100c3e0 <_malloc_r+0x4c8>
 100c284:	f102 015c 	add.w	r1, r2, #92	; 0x5c
 100c288:	00c9      	lsls	r1, r1, #3
 100c28a:	325b      	adds	r2, #91	; 0x5b
 100c28c:	eb07 0c01 	add.w	ip, r7, r1
 100c290:	5879      	ldr	r1, [r7, r1]
 100c292:	f1ac 0c08 	sub.w	ip, ip, #8
 100c296:	458c      	cmp	ip, r1
 100c298:	f000 8088 	beq.w	100c3ac <_malloc_r+0x494>
 100c29c:	684a      	ldr	r2, [r1, #4]
 100c29e:	f022 0203 	bic.w	r2, r2, #3
 100c2a2:	4293      	cmp	r3, r2
 100c2a4:	d273      	bcs.n	100c38e <_malloc_r+0x476>
 100c2a6:	6889      	ldr	r1, [r1, #8]
 100c2a8:	458c      	cmp	ip, r1
 100c2aa:	d1f7      	bne.n	100c29c <_malloc_r+0x384>
 100c2ac:	f8dc 200c 	ldr.w	r2, [ip, #12]
 100c2b0:	687b      	ldr	r3, [r7, #4]
 100c2b2:	60e2      	str	r2, [r4, #12]
 100c2b4:	f8c4 c008 	str.w	ip, [r4, #8]
 100c2b8:	6094      	str	r4, [r2, #8]
 100c2ba:	f8cc 400c 	str.w	r4, [ip, #12]
 100c2be:	e68f      	b.n	100bfe0 <_malloc_r+0xc8>
 100c2c0:	19a1      	adds	r1, r4, r6
 100c2c2:	f046 0c01 	orr.w	ip, r6, #1
 100c2c6:	f042 0601 	orr.w	r6, r2, #1
 100c2ca:	f8c4 c004 	str.w	ip, [r4, #4]
 100c2ce:	4628      	mov	r0, r5
 100c2d0:	6179      	str	r1, [r7, #20]
 100c2d2:	6139      	str	r1, [r7, #16]
 100c2d4:	f8c1 e00c 	str.w	lr, [r1, #12]
 100c2d8:	f8c1 e008 	str.w	lr, [r1, #8]
 100c2dc:	604e      	str	r6, [r1, #4]
 100c2de:	50e2      	str	r2, [r4, r3]
 100c2e0:	f000 fa24 	bl	100c72c <__malloc_unlock>
 100c2e4:	3408      	adds	r4, #8
 100c2e6:	e6dd      	b.n	100c0a4 <_malloc_r+0x18c>
 100c2e8:	687b      	ldr	r3, [r7, #4]
 100c2ea:	e679      	b.n	100bfe0 <_malloc_r+0xc8>
 100c2ec:	f108 0801 	add.w	r8, r8, #1
 100c2f0:	f018 0f03 	tst.w	r8, #3
 100c2f4:	f10c 0c08 	add.w	ip, ip, #8
 100c2f8:	f47f ae85 	bne.w	100c006 <_malloc_r+0xee>
 100c2fc:	e02d      	b.n	100c35a <_malloc_r+0x442>
 100c2fe:	68dc      	ldr	r4, [r3, #12]
 100c300:	42a3      	cmp	r3, r4
 100c302:	bf08      	it	eq
 100c304:	3002      	addeq	r0, #2
 100c306:	f43f ae3e 	beq.w	100bf86 <_malloc_r+0x6e>
 100c30a:	e6bb      	b.n	100c084 <_malloc_r+0x16c>
 100c30c:	4419      	add	r1, r3
 100c30e:	461c      	mov	r4, r3
 100c310:	684a      	ldr	r2, [r1, #4]
 100c312:	68db      	ldr	r3, [r3, #12]
 100c314:	f854 6f08 	ldr.w	r6, [r4, #8]!
 100c318:	f042 0201 	orr.w	r2, r2, #1
 100c31c:	604a      	str	r2, [r1, #4]
 100c31e:	4628      	mov	r0, r5
 100c320:	60f3      	str	r3, [r6, #12]
 100c322:	609e      	str	r6, [r3, #8]
 100c324:	f000 fa02 	bl	100c72c <__malloc_unlock>
 100c328:	e6bc      	b.n	100c0a4 <_malloc_r+0x18c>
 100c32a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 100c32e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
 100c332:	00c3      	lsls	r3, r0, #3
 100c334:	e612      	b.n	100bf5c <_malloc_r+0x44>
 100c336:	099a      	lsrs	r2, r3, #6
 100c338:	f102 0139 	add.w	r1, r2, #57	; 0x39
 100c33c:	00c9      	lsls	r1, r1, #3
 100c33e:	3238      	adds	r2, #56	; 0x38
 100c340:	e7a4      	b.n	100c28c <_malloc_r+0x374>
 100c342:	42bc      	cmp	r4, r7
 100c344:	d054      	beq.n	100c3f0 <_malloc_r+0x4d8>
 100c346:	68bc      	ldr	r4, [r7, #8]
 100c348:	6862      	ldr	r2, [r4, #4]
 100c34a:	f022 0203 	bic.w	r2, r2, #3
 100c34e:	e75d      	b.n	100c20c <_malloc_r+0x2f4>
 100c350:	f859 3908 	ldr.w	r3, [r9], #-8
 100c354:	4599      	cmp	r9, r3
 100c356:	f040 8086 	bne.w	100c466 <_malloc_r+0x54e>
 100c35a:	f010 0f03 	tst.w	r0, #3
 100c35e:	f100 30ff 	add.w	r0, r0, #4294967295
 100c362:	d1f5      	bne.n	100c350 <_malloc_r+0x438>
 100c364:	687b      	ldr	r3, [r7, #4]
 100c366:	ea23 0304 	bic.w	r3, r3, r4
 100c36a:	607b      	str	r3, [r7, #4]
 100c36c:	0064      	lsls	r4, r4, #1
 100c36e:	429c      	cmp	r4, r3
 100c370:	f63f aec7 	bhi.w	100c102 <_malloc_r+0x1ea>
 100c374:	2c00      	cmp	r4, #0
 100c376:	f43f aec4 	beq.w	100c102 <_malloc_r+0x1ea>
 100c37a:	421c      	tst	r4, r3
 100c37c:	4640      	mov	r0, r8
 100c37e:	f47f ae3e 	bne.w	100bffe <_malloc_r+0xe6>
 100c382:	0064      	lsls	r4, r4, #1
 100c384:	421c      	tst	r4, r3
 100c386:	f100 0004 	add.w	r0, r0, #4
 100c38a:	d0fa      	beq.n	100c382 <_malloc_r+0x46a>
 100c38c:	e637      	b.n	100bffe <_malloc_r+0xe6>
 100c38e:	468c      	mov	ip, r1
 100c390:	e78c      	b.n	100c2ac <_malloc_r+0x394>
 100c392:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 100c396:	d815      	bhi.n	100c3c4 <_malloc_r+0x4ac>
 100c398:	0bf3      	lsrs	r3, r6, #15
 100c39a:	f103 0078 	add.w	r0, r3, #120	; 0x78
 100c39e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
 100c3a2:	00c3      	lsls	r3, r0, #3
 100c3a4:	e5da      	b.n	100bf5c <_malloc_r+0x44>
 100c3a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 100c3aa:	e6ed      	b.n	100c188 <_malloc_r+0x270>
 100c3ac:	687b      	ldr	r3, [r7, #4]
 100c3ae:	1092      	asrs	r2, r2, #2
 100c3b0:	2101      	movs	r1, #1
 100c3b2:	fa01 f202 	lsl.w	r2, r1, r2
 100c3b6:	4313      	orrs	r3, r2
 100c3b8:	607b      	str	r3, [r7, #4]
 100c3ba:	4662      	mov	r2, ip
 100c3bc:	e779      	b.n	100c2b2 <_malloc_r+0x39a>
 100c3be:	2301      	movs	r3, #1
 100c3c0:	6053      	str	r3, [r2, #4]
 100c3c2:	e729      	b.n	100c218 <_malloc_r+0x300>
 100c3c4:	f240 5254 	movw	r2, #1364	; 0x554
 100c3c8:	4293      	cmp	r3, r2
 100c3ca:	d822      	bhi.n	100c412 <_malloc_r+0x4fa>
 100c3cc:	0cb3      	lsrs	r3, r6, #18
 100c3ce:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 100c3d2:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
 100c3d6:	00c3      	lsls	r3, r0, #3
 100c3d8:	e5c0      	b.n	100bf5c <_malloc_r+0x44>
 100c3da:	f103 0b10 	add.w	fp, r3, #16
 100c3de:	e6ae      	b.n	100c13e <_malloc_r+0x226>
 100c3e0:	2a54      	cmp	r2, #84	; 0x54
 100c3e2:	d829      	bhi.n	100c438 <_malloc_r+0x520>
 100c3e4:	0b1a      	lsrs	r2, r3, #12
 100c3e6:	f102 016f 	add.w	r1, r2, #111	; 0x6f
 100c3ea:	00c9      	lsls	r1, r1, #3
 100c3ec:	326e      	adds	r2, #110	; 0x6e
 100c3ee:	e74d      	b.n	100c28c <_malloc_r+0x374>
 100c3f0:	4b20      	ldr	r3, [pc, #128]	; (100c474 <_malloc_r+0x55c>)
 100c3f2:	6819      	ldr	r1, [r3, #0]
 100c3f4:	4459      	add	r1, fp
 100c3f6:	6019      	str	r1, [r3, #0]
 100c3f8:	e6b2      	b.n	100c160 <_malloc_r+0x248>
 100c3fa:	f3ca 000b 	ubfx	r0, sl, #0, #12
 100c3fe:	2800      	cmp	r0, #0
 100c400:	f47f aeae 	bne.w	100c160 <_malloc_r+0x248>
 100c404:	eb08 030b 	add.w	r3, r8, fp
 100c408:	68ba      	ldr	r2, [r7, #8]
 100c40a:	f043 0301 	orr.w	r3, r3, #1
 100c40e:	6053      	str	r3, [r2, #4]
 100c410:	e6ee      	b.n	100c1f0 <_malloc_r+0x2d8>
 100c412:	207f      	movs	r0, #127	; 0x7f
 100c414:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 100c418:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
 100c41c:	e59e      	b.n	100bf5c <_malloc_r+0x44>
 100c41e:	f104 0108 	add.w	r1, r4, #8
 100c422:	4628      	mov	r0, r5
 100c424:	9300      	str	r3, [sp, #0]
 100c426:	f7ff fc0d 	bl	100bc44 <_free_r>
 100c42a:	9b00      	ldr	r3, [sp, #0]
 100c42c:	6819      	ldr	r1, [r3, #0]
 100c42e:	e6df      	b.n	100c1f0 <_malloc_r+0x2d8>
 100c430:	2001      	movs	r0, #1
 100c432:	f04f 0900 	mov.w	r9, #0
 100c436:	e6bc      	b.n	100c1b2 <_malloc_r+0x29a>
 100c438:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 100c43c:	d805      	bhi.n	100c44a <_malloc_r+0x532>
 100c43e:	0bda      	lsrs	r2, r3, #15
 100c440:	f102 0178 	add.w	r1, r2, #120	; 0x78
 100c444:	00c9      	lsls	r1, r1, #3
 100c446:	3277      	adds	r2, #119	; 0x77
 100c448:	e720      	b.n	100c28c <_malloc_r+0x374>
 100c44a:	f240 5154 	movw	r1, #1364	; 0x554
 100c44e:	428a      	cmp	r2, r1
 100c450:	d805      	bhi.n	100c45e <_malloc_r+0x546>
 100c452:	0c9a      	lsrs	r2, r3, #18
 100c454:	f102 017d 	add.w	r1, r2, #125	; 0x7d
 100c458:	00c9      	lsls	r1, r1, #3
 100c45a:	327c      	adds	r2, #124	; 0x7c
 100c45c:	e716      	b.n	100c28c <_malloc_r+0x374>
 100c45e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 100c462:	227e      	movs	r2, #126	; 0x7e
 100c464:	e712      	b.n	100c28c <_malloc_r+0x374>
 100c466:	687b      	ldr	r3, [r7, #4]
 100c468:	e780      	b.n	100c36c <_malloc_r+0x454>
 100c46a:	08f0      	lsrs	r0, r6, #3
 100c46c:	f106 0308 	add.w	r3, r6, #8
 100c470:	e600      	b.n	100c074 <_malloc_r+0x15c>
 100c472:	bf00      	nop
 100c474:	20008290 	.word	0x20008290

0100c478 <__ascii_mbtowc>:
 100c478:	b082      	sub	sp, #8
 100c47a:	b149      	cbz	r1, 100c490 <__ascii_mbtowc+0x18>
 100c47c:	b15a      	cbz	r2, 100c496 <__ascii_mbtowc+0x1e>
 100c47e:	b16b      	cbz	r3, 100c49c <__ascii_mbtowc+0x24>
 100c480:	7813      	ldrb	r3, [r2, #0]
 100c482:	600b      	str	r3, [r1, #0]
 100c484:	7812      	ldrb	r2, [r2, #0]
 100c486:	1c10      	adds	r0, r2, #0
 100c488:	bf18      	it	ne
 100c48a:	2001      	movne	r0, #1
 100c48c:	b002      	add	sp, #8
 100c48e:	4770      	bx	lr
 100c490:	a901      	add	r1, sp, #4
 100c492:	2a00      	cmp	r2, #0
 100c494:	d1f3      	bne.n	100c47e <__ascii_mbtowc+0x6>
 100c496:	4610      	mov	r0, r2
 100c498:	b002      	add	sp, #8
 100c49a:	4770      	bx	lr
 100c49c:	f06f 0001 	mvn.w	r0, #1
 100c4a0:	e7f4      	b.n	100c48c <__ascii_mbtowc+0x14>
 100c4a2:	bf00      	nop
	...

0100c4b0 <memchr>:
 100c4b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 100c4b4:	2a10      	cmp	r2, #16
 100c4b6:	db2b      	blt.n	100c510 <memchr+0x60>
 100c4b8:	f010 0f07 	tst.w	r0, #7
 100c4bc:	d008      	beq.n	100c4d0 <memchr+0x20>
 100c4be:	f810 3b01 	ldrb.w	r3, [r0], #1
 100c4c2:	3a01      	subs	r2, #1
 100c4c4:	428b      	cmp	r3, r1
 100c4c6:	d02d      	beq.n	100c524 <memchr+0x74>
 100c4c8:	f010 0f07 	tst.w	r0, #7
 100c4cc:	b342      	cbz	r2, 100c520 <memchr+0x70>
 100c4ce:	d1f6      	bne.n	100c4be <memchr+0xe>
 100c4d0:	b4f0      	push	{r4, r5, r6, r7}
 100c4d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 100c4d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 100c4da:	f022 0407 	bic.w	r4, r2, #7
 100c4de:	f07f 0700 	mvns.w	r7, #0
 100c4e2:	2300      	movs	r3, #0
 100c4e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 100c4e8:	3c08      	subs	r4, #8
 100c4ea:	ea85 0501 	eor.w	r5, r5, r1
 100c4ee:	ea86 0601 	eor.w	r6, r6, r1
 100c4f2:	fa85 f547 	uadd8	r5, r5, r7
 100c4f6:	faa3 f587 	sel	r5, r3, r7
 100c4fa:	fa86 f647 	uadd8	r6, r6, r7
 100c4fe:	faa5 f687 	sel	r6, r5, r7
 100c502:	b98e      	cbnz	r6, 100c528 <memchr+0x78>
 100c504:	d1ee      	bne.n	100c4e4 <memchr+0x34>
 100c506:	bcf0      	pop	{r4, r5, r6, r7}
 100c508:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 100c50c:	f002 0207 	and.w	r2, r2, #7
 100c510:	b132      	cbz	r2, 100c520 <memchr+0x70>
 100c512:	f810 3b01 	ldrb.w	r3, [r0], #1
 100c516:	3a01      	subs	r2, #1
 100c518:	ea83 0301 	eor.w	r3, r3, r1
 100c51c:	b113      	cbz	r3, 100c524 <memchr+0x74>
 100c51e:	d1f8      	bne.n	100c512 <memchr+0x62>
 100c520:	2000      	movs	r0, #0
 100c522:	4770      	bx	lr
 100c524:	3801      	subs	r0, #1
 100c526:	4770      	bx	lr
 100c528:	2d00      	cmp	r5, #0
 100c52a:	bf06      	itte	eq
 100c52c:	4635      	moveq	r5, r6
 100c52e:	3803      	subeq	r0, #3
 100c530:	3807      	subne	r0, #7
 100c532:	f015 0f01 	tst.w	r5, #1
 100c536:	d107      	bne.n	100c548 <memchr+0x98>
 100c538:	3001      	adds	r0, #1
 100c53a:	f415 7f80 	tst.w	r5, #256	; 0x100
 100c53e:	bf02      	ittt	eq
 100c540:	3001      	addeq	r0, #1
 100c542:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 100c546:	3001      	addeq	r0, #1
 100c548:	bcf0      	pop	{r4, r5, r6, r7}
 100c54a:	3801      	subs	r0, #1
 100c54c:	4770      	bx	lr
 100c54e:	bf00      	nop

0100c550 <memcpy>:
 100c550:	4684      	mov	ip, r0
 100c552:	ea41 0300 	orr.w	r3, r1, r0
 100c556:	f013 0303 	ands.w	r3, r3, #3
 100c55a:	d16d      	bne.n	100c638 <memcpy+0xe8>
 100c55c:	3a40      	subs	r2, #64	; 0x40
 100c55e:	d341      	bcc.n	100c5e4 <memcpy+0x94>
 100c560:	f851 3b04 	ldr.w	r3, [r1], #4
 100c564:	f840 3b04 	str.w	r3, [r0], #4
 100c568:	f851 3b04 	ldr.w	r3, [r1], #4
 100c56c:	f840 3b04 	str.w	r3, [r0], #4
 100c570:	f851 3b04 	ldr.w	r3, [r1], #4
 100c574:	f840 3b04 	str.w	r3, [r0], #4
 100c578:	f851 3b04 	ldr.w	r3, [r1], #4
 100c57c:	f840 3b04 	str.w	r3, [r0], #4
 100c580:	f851 3b04 	ldr.w	r3, [r1], #4
 100c584:	f840 3b04 	str.w	r3, [r0], #4
 100c588:	f851 3b04 	ldr.w	r3, [r1], #4
 100c58c:	f840 3b04 	str.w	r3, [r0], #4
 100c590:	f851 3b04 	ldr.w	r3, [r1], #4
 100c594:	f840 3b04 	str.w	r3, [r0], #4
 100c598:	f851 3b04 	ldr.w	r3, [r1], #4
 100c59c:	f840 3b04 	str.w	r3, [r0], #4
 100c5a0:	f851 3b04 	ldr.w	r3, [r1], #4
 100c5a4:	f840 3b04 	str.w	r3, [r0], #4
 100c5a8:	f851 3b04 	ldr.w	r3, [r1], #4
 100c5ac:	f840 3b04 	str.w	r3, [r0], #4
 100c5b0:	f851 3b04 	ldr.w	r3, [r1], #4
 100c5b4:	f840 3b04 	str.w	r3, [r0], #4
 100c5b8:	f851 3b04 	ldr.w	r3, [r1], #4
 100c5bc:	f840 3b04 	str.w	r3, [r0], #4
 100c5c0:	f851 3b04 	ldr.w	r3, [r1], #4
 100c5c4:	f840 3b04 	str.w	r3, [r0], #4
 100c5c8:	f851 3b04 	ldr.w	r3, [r1], #4
 100c5cc:	f840 3b04 	str.w	r3, [r0], #4
 100c5d0:	f851 3b04 	ldr.w	r3, [r1], #4
 100c5d4:	f840 3b04 	str.w	r3, [r0], #4
 100c5d8:	f851 3b04 	ldr.w	r3, [r1], #4
 100c5dc:	f840 3b04 	str.w	r3, [r0], #4
 100c5e0:	3a40      	subs	r2, #64	; 0x40
 100c5e2:	d2bd      	bcs.n	100c560 <memcpy+0x10>
 100c5e4:	3230      	adds	r2, #48	; 0x30
 100c5e6:	d311      	bcc.n	100c60c <memcpy+0xbc>
 100c5e8:	f851 3b04 	ldr.w	r3, [r1], #4
 100c5ec:	f840 3b04 	str.w	r3, [r0], #4
 100c5f0:	f851 3b04 	ldr.w	r3, [r1], #4
 100c5f4:	f840 3b04 	str.w	r3, [r0], #4
 100c5f8:	f851 3b04 	ldr.w	r3, [r1], #4
 100c5fc:	f840 3b04 	str.w	r3, [r0], #4
 100c600:	f851 3b04 	ldr.w	r3, [r1], #4
 100c604:	f840 3b04 	str.w	r3, [r0], #4
 100c608:	3a10      	subs	r2, #16
 100c60a:	d2ed      	bcs.n	100c5e8 <memcpy+0x98>
 100c60c:	320c      	adds	r2, #12
 100c60e:	d305      	bcc.n	100c61c <memcpy+0xcc>
 100c610:	f851 3b04 	ldr.w	r3, [r1], #4
 100c614:	f840 3b04 	str.w	r3, [r0], #4
 100c618:	3a04      	subs	r2, #4
 100c61a:	d2f9      	bcs.n	100c610 <memcpy+0xc0>
 100c61c:	3204      	adds	r2, #4
 100c61e:	d008      	beq.n	100c632 <memcpy+0xe2>
 100c620:	07d2      	lsls	r2, r2, #31
 100c622:	bf1c      	itt	ne
 100c624:	f811 3b01 	ldrbne.w	r3, [r1], #1
 100c628:	f800 3b01 	strbne.w	r3, [r0], #1
 100c62c:	d301      	bcc.n	100c632 <memcpy+0xe2>
 100c62e:	880b      	ldrh	r3, [r1, #0]
 100c630:	8003      	strh	r3, [r0, #0]
 100c632:	4660      	mov	r0, ip
 100c634:	4770      	bx	lr
 100c636:	bf00      	nop
 100c638:	2a08      	cmp	r2, #8
 100c63a:	d313      	bcc.n	100c664 <memcpy+0x114>
 100c63c:	078b      	lsls	r3, r1, #30
 100c63e:	d08d      	beq.n	100c55c <memcpy+0xc>
 100c640:	f010 0303 	ands.w	r3, r0, #3
 100c644:	d08a      	beq.n	100c55c <memcpy+0xc>
 100c646:	f1c3 0304 	rsb	r3, r3, #4
 100c64a:	1ad2      	subs	r2, r2, r3
 100c64c:	07db      	lsls	r3, r3, #31
 100c64e:	bf1c      	itt	ne
 100c650:	f811 3b01 	ldrbne.w	r3, [r1], #1
 100c654:	f800 3b01 	strbne.w	r3, [r0], #1
 100c658:	d380      	bcc.n	100c55c <memcpy+0xc>
 100c65a:	f831 3b02 	ldrh.w	r3, [r1], #2
 100c65e:	f820 3b02 	strh.w	r3, [r0], #2
 100c662:	e77b      	b.n	100c55c <memcpy+0xc>
 100c664:	3a04      	subs	r2, #4
 100c666:	d3d9      	bcc.n	100c61c <memcpy+0xcc>
 100c668:	3a01      	subs	r2, #1
 100c66a:	f811 3b01 	ldrb.w	r3, [r1], #1
 100c66e:	f800 3b01 	strb.w	r3, [r0], #1
 100c672:	d2f9      	bcs.n	100c668 <memcpy+0x118>
 100c674:	780b      	ldrb	r3, [r1, #0]
 100c676:	7003      	strb	r3, [r0, #0]
 100c678:	784b      	ldrb	r3, [r1, #1]
 100c67a:	7043      	strb	r3, [r0, #1]
 100c67c:	788b      	ldrb	r3, [r1, #2]
 100c67e:	7083      	strb	r3, [r0, #2]
 100c680:	4660      	mov	r0, ip
 100c682:	4770      	bx	lr

0100c684 <memset>:
 100c684:	b470      	push	{r4, r5, r6}
 100c686:	0786      	lsls	r6, r0, #30
 100c688:	d046      	beq.n	100c718 <memset+0x94>
 100c68a:	1e54      	subs	r4, r2, #1
 100c68c:	2a00      	cmp	r2, #0
 100c68e:	d041      	beq.n	100c714 <memset+0x90>
 100c690:	b2ca      	uxtb	r2, r1
 100c692:	4603      	mov	r3, r0
 100c694:	e002      	b.n	100c69c <memset+0x18>
 100c696:	f114 34ff 	adds.w	r4, r4, #4294967295
 100c69a:	d33b      	bcc.n	100c714 <memset+0x90>
 100c69c:	f803 2b01 	strb.w	r2, [r3], #1
 100c6a0:	079d      	lsls	r5, r3, #30
 100c6a2:	d1f8      	bne.n	100c696 <memset+0x12>
 100c6a4:	2c03      	cmp	r4, #3
 100c6a6:	d92e      	bls.n	100c706 <memset+0x82>
 100c6a8:	b2cd      	uxtb	r5, r1
 100c6aa:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 100c6ae:	2c0f      	cmp	r4, #15
 100c6b0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 100c6b4:	d919      	bls.n	100c6ea <memset+0x66>
 100c6b6:	f103 0210 	add.w	r2, r3, #16
 100c6ba:	4626      	mov	r6, r4
 100c6bc:	3e10      	subs	r6, #16
 100c6be:	2e0f      	cmp	r6, #15
 100c6c0:	f842 5c10 	str.w	r5, [r2, #-16]
 100c6c4:	f842 5c0c 	str.w	r5, [r2, #-12]
 100c6c8:	f842 5c08 	str.w	r5, [r2, #-8]
 100c6cc:	f842 5c04 	str.w	r5, [r2, #-4]
 100c6d0:	f102 0210 	add.w	r2, r2, #16
 100c6d4:	d8f2      	bhi.n	100c6bc <memset+0x38>
 100c6d6:	f1a4 0210 	sub.w	r2, r4, #16
 100c6da:	f022 020f 	bic.w	r2, r2, #15
 100c6de:	f004 040f 	and.w	r4, r4, #15
 100c6e2:	3210      	adds	r2, #16
 100c6e4:	2c03      	cmp	r4, #3
 100c6e6:	4413      	add	r3, r2
 100c6e8:	d90d      	bls.n	100c706 <memset+0x82>
 100c6ea:	461e      	mov	r6, r3
 100c6ec:	4622      	mov	r2, r4
 100c6ee:	3a04      	subs	r2, #4
 100c6f0:	2a03      	cmp	r2, #3
 100c6f2:	f846 5b04 	str.w	r5, [r6], #4
 100c6f6:	d8fa      	bhi.n	100c6ee <memset+0x6a>
 100c6f8:	1f22      	subs	r2, r4, #4
 100c6fa:	f022 0203 	bic.w	r2, r2, #3
 100c6fe:	3204      	adds	r2, #4
 100c700:	4413      	add	r3, r2
 100c702:	f004 0403 	and.w	r4, r4, #3
 100c706:	b12c      	cbz	r4, 100c714 <memset+0x90>
 100c708:	b2c9      	uxtb	r1, r1
 100c70a:	441c      	add	r4, r3
 100c70c:	f803 1b01 	strb.w	r1, [r3], #1
 100c710:	429c      	cmp	r4, r3
 100c712:	d1fb      	bne.n	100c70c <memset+0x88>
 100c714:	bc70      	pop	{r4, r5, r6}
 100c716:	4770      	bx	lr
 100c718:	4614      	mov	r4, r2
 100c71a:	4603      	mov	r3, r0
 100c71c:	e7c2      	b.n	100c6a4 <memset+0x20>
 100c71e:	bf00      	nop

0100c720 <__malloc_lock>:
 100c720:	4801      	ldr	r0, [pc, #4]	; (100c728 <__malloc_lock+0x8>)
 100c722:	f7ff bbed 	b.w	100bf00 <__retarget_lock_acquire_recursive>
 100c726:	bf00      	nop
 100c728:	20008340 	.word	0x20008340

0100c72c <__malloc_unlock>:
 100c72c:	4801      	ldr	r0, [pc, #4]	; (100c734 <__malloc_unlock+0x8>)
 100c72e:	f7ff bbe9 	b.w	100bf04 <__retarget_lock_release_recursive>
 100c732:	bf00      	nop
 100c734:	20008340 	.word	0x20008340

0100c738 <realloc>:
 100c738:	4b02      	ldr	r3, [pc, #8]	; (100c744 <realloc+0xc>)
 100c73a:	460a      	mov	r2, r1
 100c73c:	4601      	mov	r1, r0
 100c73e:	6818      	ldr	r0, [r3, #0]
 100c740:	f000 b802 	b.w	100c748 <_realloc_r>
 100c744:	200005ec 	.word	0x200005ec

0100c748 <_realloc_r>:
 100c748:	2900      	cmp	r1, #0
 100c74a:	f000 8095 	beq.w	100c878 <_realloc_r+0x130>
 100c74e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 100c752:	460d      	mov	r5, r1
 100c754:	4616      	mov	r6, r2
 100c756:	b083      	sub	sp, #12
 100c758:	4680      	mov	r8, r0
 100c75a:	f106 070b 	add.w	r7, r6, #11
 100c75e:	f7ff ffdf 	bl	100c720 <__malloc_lock>
 100c762:	f855 ec04 	ldr.w	lr, [r5, #-4]
 100c766:	2f16      	cmp	r7, #22
 100c768:	f02e 0403 	bic.w	r4, lr, #3
 100c76c:	f1a5 0908 	sub.w	r9, r5, #8
 100c770:	d83c      	bhi.n	100c7ec <_realloc_r+0xa4>
 100c772:	2210      	movs	r2, #16
 100c774:	4617      	mov	r7, r2
 100c776:	42be      	cmp	r6, r7
 100c778:	d83d      	bhi.n	100c7f6 <_realloc_r+0xae>
 100c77a:	4294      	cmp	r4, r2
 100c77c:	da43      	bge.n	100c806 <_realloc_r+0xbe>
 100c77e:	4bc4      	ldr	r3, [pc, #784]	; (100ca90 <_realloc_r+0x348>)
 100c780:	6899      	ldr	r1, [r3, #8]
 100c782:	eb09 0004 	add.w	r0, r9, r4
 100c786:	4288      	cmp	r0, r1
 100c788:	f000 80b4 	beq.w	100c8f4 <_realloc_r+0x1ac>
 100c78c:	6843      	ldr	r3, [r0, #4]
 100c78e:	f023 0101 	bic.w	r1, r3, #1
 100c792:	4401      	add	r1, r0
 100c794:	6849      	ldr	r1, [r1, #4]
 100c796:	07c9      	lsls	r1, r1, #31
 100c798:	d54c      	bpl.n	100c834 <_realloc_r+0xec>
 100c79a:	f01e 0f01 	tst.w	lr, #1
 100c79e:	f000 809b 	beq.w	100c8d8 <_realloc_r+0x190>
 100c7a2:	4631      	mov	r1, r6
 100c7a4:	4640      	mov	r0, r8
 100c7a6:	f7ff fbb7 	bl	100bf18 <_malloc_r>
 100c7aa:	4606      	mov	r6, r0
 100c7ac:	2800      	cmp	r0, #0
 100c7ae:	d03a      	beq.n	100c826 <_realloc_r+0xde>
 100c7b0:	f855 3c04 	ldr.w	r3, [r5, #-4]
 100c7b4:	f023 0301 	bic.w	r3, r3, #1
 100c7b8:	444b      	add	r3, r9
 100c7ba:	f1a0 0208 	sub.w	r2, r0, #8
 100c7be:	429a      	cmp	r2, r3
 100c7c0:	f000 8121 	beq.w	100ca06 <_realloc_r+0x2be>
 100c7c4:	1f22      	subs	r2, r4, #4
 100c7c6:	2a24      	cmp	r2, #36	; 0x24
 100c7c8:	f200 8107 	bhi.w	100c9da <_realloc_r+0x292>
 100c7cc:	2a13      	cmp	r2, #19
 100c7ce:	f200 80db 	bhi.w	100c988 <_realloc_r+0x240>
 100c7d2:	4603      	mov	r3, r0
 100c7d4:	462a      	mov	r2, r5
 100c7d6:	6811      	ldr	r1, [r2, #0]
 100c7d8:	6019      	str	r1, [r3, #0]
 100c7da:	6851      	ldr	r1, [r2, #4]
 100c7dc:	6059      	str	r1, [r3, #4]
 100c7de:	6892      	ldr	r2, [r2, #8]
 100c7e0:	609a      	str	r2, [r3, #8]
 100c7e2:	4629      	mov	r1, r5
 100c7e4:	4640      	mov	r0, r8
 100c7e6:	f7ff fa2d 	bl	100bc44 <_free_r>
 100c7ea:	e01c      	b.n	100c826 <_realloc_r+0xde>
 100c7ec:	f027 0707 	bic.w	r7, r7, #7
 100c7f0:	2f00      	cmp	r7, #0
 100c7f2:	463a      	mov	r2, r7
 100c7f4:	dabf      	bge.n	100c776 <_realloc_r+0x2e>
 100c7f6:	2600      	movs	r6, #0
 100c7f8:	230c      	movs	r3, #12
 100c7fa:	4630      	mov	r0, r6
 100c7fc:	f8c8 3000 	str.w	r3, [r8]
 100c800:	b003      	add	sp, #12
 100c802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100c806:	462e      	mov	r6, r5
 100c808:	1be3      	subs	r3, r4, r7
 100c80a:	2b0f      	cmp	r3, #15
 100c80c:	d81e      	bhi.n	100c84c <_realloc_r+0x104>
 100c80e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 100c812:	f003 0301 	and.w	r3, r3, #1
 100c816:	4323      	orrs	r3, r4
 100c818:	444c      	add	r4, r9
 100c81a:	f8c9 3004 	str.w	r3, [r9, #4]
 100c81e:	6863      	ldr	r3, [r4, #4]
 100c820:	f043 0301 	orr.w	r3, r3, #1
 100c824:	6063      	str	r3, [r4, #4]
 100c826:	4640      	mov	r0, r8
 100c828:	f7ff ff80 	bl	100c72c <__malloc_unlock>
 100c82c:	4630      	mov	r0, r6
 100c82e:	b003      	add	sp, #12
 100c830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100c834:	f023 0303 	bic.w	r3, r3, #3
 100c838:	18e1      	adds	r1, r4, r3
 100c83a:	4291      	cmp	r1, r2
 100c83c:	db1f      	blt.n	100c87e <_realloc_r+0x136>
 100c83e:	68c3      	ldr	r3, [r0, #12]
 100c840:	6882      	ldr	r2, [r0, #8]
 100c842:	462e      	mov	r6, r5
 100c844:	60d3      	str	r3, [r2, #12]
 100c846:	460c      	mov	r4, r1
 100c848:	609a      	str	r2, [r3, #8]
 100c84a:	e7dd      	b.n	100c808 <_realloc_r+0xc0>
 100c84c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 100c850:	eb09 0107 	add.w	r1, r9, r7
 100c854:	f002 0201 	and.w	r2, r2, #1
 100c858:	444c      	add	r4, r9
 100c85a:	f043 0301 	orr.w	r3, r3, #1
 100c85e:	4317      	orrs	r7, r2
 100c860:	f8c9 7004 	str.w	r7, [r9, #4]
 100c864:	604b      	str	r3, [r1, #4]
 100c866:	6863      	ldr	r3, [r4, #4]
 100c868:	f043 0301 	orr.w	r3, r3, #1
 100c86c:	3108      	adds	r1, #8
 100c86e:	6063      	str	r3, [r4, #4]
 100c870:	4640      	mov	r0, r8
 100c872:	f7ff f9e7 	bl	100bc44 <_free_r>
 100c876:	e7d6      	b.n	100c826 <_realloc_r+0xde>
 100c878:	4611      	mov	r1, r2
 100c87a:	f7ff bb4d 	b.w	100bf18 <_malloc_r>
 100c87e:	f01e 0f01 	tst.w	lr, #1
 100c882:	d18e      	bne.n	100c7a2 <_realloc_r+0x5a>
 100c884:	f855 1c08 	ldr.w	r1, [r5, #-8]
 100c888:	eba9 0a01 	sub.w	sl, r9, r1
 100c88c:	f8da 1004 	ldr.w	r1, [sl, #4]
 100c890:	f021 0103 	bic.w	r1, r1, #3
 100c894:	440b      	add	r3, r1
 100c896:	4423      	add	r3, r4
 100c898:	4293      	cmp	r3, r2
 100c89a:	db25      	blt.n	100c8e8 <_realloc_r+0x1a0>
 100c89c:	68c2      	ldr	r2, [r0, #12]
 100c89e:	6881      	ldr	r1, [r0, #8]
 100c8a0:	4656      	mov	r6, sl
 100c8a2:	60ca      	str	r2, [r1, #12]
 100c8a4:	6091      	str	r1, [r2, #8]
 100c8a6:	f8da 100c 	ldr.w	r1, [sl, #12]
 100c8aa:	f856 0f08 	ldr.w	r0, [r6, #8]!
 100c8ae:	1f22      	subs	r2, r4, #4
 100c8b0:	2a24      	cmp	r2, #36	; 0x24
 100c8b2:	60c1      	str	r1, [r0, #12]
 100c8b4:	6088      	str	r0, [r1, #8]
 100c8b6:	f200 8094 	bhi.w	100c9e2 <_realloc_r+0x29a>
 100c8ba:	2a13      	cmp	r2, #19
 100c8bc:	d96f      	bls.n	100c99e <_realloc_r+0x256>
 100c8be:	6829      	ldr	r1, [r5, #0]
 100c8c0:	f8ca 1008 	str.w	r1, [sl, #8]
 100c8c4:	6869      	ldr	r1, [r5, #4]
 100c8c6:	f8ca 100c 	str.w	r1, [sl, #12]
 100c8ca:	2a1b      	cmp	r2, #27
 100c8cc:	f200 80a2 	bhi.w	100ca14 <_realloc_r+0x2cc>
 100c8d0:	3508      	adds	r5, #8
 100c8d2:	f10a 0210 	add.w	r2, sl, #16
 100c8d6:	e063      	b.n	100c9a0 <_realloc_r+0x258>
 100c8d8:	f855 3c08 	ldr.w	r3, [r5, #-8]
 100c8dc:	eba9 0a03 	sub.w	sl, r9, r3
 100c8e0:	f8da 1004 	ldr.w	r1, [sl, #4]
 100c8e4:	f021 0103 	bic.w	r1, r1, #3
 100c8e8:	1863      	adds	r3, r4, r1
 100c8ea:	4293      	cmp	r3, r2
 100c8ec:	f6ff af59 	blt.w	100c7a2 <_realloc_r+0x5a>
 100c8f0:	4656      	mov	r6, sl
 100c8f2:	e7d8      	b.n	100c8a6 <_realloc_r+0x15e>
 100c8f4:	6841      	ldr	r1, [r0, #4]
 100c8f6:	f021 0b03 	bic.w	fp, r1, #3
 100c8fa:	44a3      	add	fp, r4
 100c8fc:	f107 0010 	add.w	r0, r7, #16
 100c900:	4583      	cmp	fp, r0
 100c902:	da56      	bge.n	100c9b2 <_realloc_r+0x26a>
 100c904:	f01e 0f01 	tst.w	lr, #1
 100c908:	f47f af4b 	bne.w	100c7a2 <_realloc_r+0x5a>
 100c90c:	f855 1c08 	ldr.w	r1, [r5, #-8]
 100c910:	eba9 0a01 	sub.w	sl, r9, r1
 100c914:	f8da 1004 	ldr.w	r1, [sl, #4]
 100c918:	f021 0103 	bic.w	r1, r1, #3
 100c91c:	448b      	add	fp, r1
 100c91e:	4558      	cmp	r0, fp
 100c920:	dce2      	bgt.n	100c8e8 <_realloc_r+0x1a0>
 100c922:	4656      	mov	r6, sl
 100c924:	f8da 100c 	ldr.w	r1, [sl, #12]
 100c928:	f856 0f08 	ldr.w	r0, [r6, #8]!
 100c92c:	1f22      	subs	r2, r4, #4
 100c92e:	2a24      	cmp	r2, #36	; 0x24
 100c930:	60c1      	str	r1, [r0, #12]
 100c932:	6088      	str	r0, [r1, #8]
 100c934:	f200 808f 	bhi.w	100ca56 <_realloc_r+0x30e>
 100c938:	2a13      	cmp	r2, #19
 100c93a:	f240 808a 	bls.w	100ca52 <_realloc_r+0x30a>
 100c93e:	6829      	ldr	r1, [r5, #0]
 100c940:	f8ca 1008 	str.w	r1, [sl, #8]
 100c944:	6869      	ldr	r1, [r5, #4]
 100c946:	f8ca 100c 	str.w	r1, [sl, #12]
 100c94a:	2a1b      	cmp	r2, #27
 100c94c:	f200 808a 	bhi.w	100ca64 <_realloc_r+0x31c>
 100c950:	3508      	adds	r5, #8
 100c952:	f10a 0210 	add.w	r2, sl, #16
 100c956:	6829      	ldr	r1, [r5, #0]
 100c958:	6011      	str	r1, [r2, #0]
 100c95a:	6869      	ldr	r1, [r5, #4]
 100c95c:	6051      	str	r1, [r2, #4]
 100c95e:	68a9      	ldr	r1, [r5, #8]
 100c960:	6091      	str	r1, [r2, #8]
 100c962:	eb0a 0107 	add.w	r1, sl, r7
 100c966:	ebab 0207 	sub.w	r2, fp, r7
 100c96a:	f042 0201 	orr.w	r2, r2, #1
 100c96e:	6099      	str	r1, [r3, #8]
 100c970:	604a      	str	r2, [r1, #4]
 100c972:	f8da 3004 	ldr.w	r3, [sl, #4]
 100c976:	f003 0301 	and.w	r3, r3, #1
 100c97a:	431f      	orrs	r7, r3
 100c97c:	4640      	mov	r0, r8
 100c97e:	f8ca 7004 	str.w	r7, [sl, #4]
 100c982:	f7ff fed3 	bl	100c72c <__malloc_unlock>
 100c986:	e751      	b.n	100c82c <_realloc_r+0xe4>
 100c988:	682b      	ldr	r3, [r5, #0]
 100c98a:	6003      	str	r3, [r0, #0]
 100c98c:	686b      	ldr	r3, [r5, #4]
 100c98e:	6043      	str	r3, [r0, #4]
 100c990:	2a1b      	cmp	r2, #27
 100c992:	d82d      	bhi.n	100c9f0 <_realloc_r+0x2a8>
 100c994:	f100 0308 	add.w	r3, r0, #8
 100c998:	f105 0208 	add.w	r2, r5, #8
 100c99c:	e71b      	b.n	100c7d6 <_realloc_r+0x8e>
 100c99e:	4632      	mov	r2, r6
 100c9a0:	6829      	ldr	r1, [r5, #0]
 100c9a2:	6011      	str	r1, [r2, #0]
 100c9a4:	6869      	ldr	r1, [r5, #4]
 100c9a6:	6051      	str	r1, [r2, #4]
 100c9a8:	68a9      	ldr	r1, [r5, #8]
 100c9aa:	6091      	str	r1, [r2, #8]
 100c9ac:	461c      	mov	r4, r3
 100c9ae:	46d1      	mov	r9, sl
 100c9b0:	e72a      	b.n	100c808 <_realloc_r+0xc0>
 100c9b2:	eb09 0107 	add.w	r1, r9, r7
 100c9b6:	ebab 0b07 	sub.w	fp, fp, r7
 100c9ba:	f04b 0201 	orr.w	r2, fp, #1
 100c9be:	6099      	str	r1, [r3, #8]
 100c9c0:	604a      	str	r2, [r1, #4]
 100c9c2:	f855 3c04 	ldr.w	r3, [r5, #-4]
 100c9c6:	f003 0301 	and.w	r3, r3, #1
 100c9ca:	431f      	orrs	r7, r3
 100c9cc:	4640      	mov	r0, r8
 100c9ce:	f845 7c04 	str.w	r7, [r5, #-4]
 100c9d2:	f7ff feab 	bl	100c72c <__malloc_unlock>
 100c9d6:	462e      	mov	r6, r5
 100c9d8:	e728      	b.n	100c82c <_realloc_r+0xe4>
 100c9da:	4629      	mov	r1, r5
 100c9dc:	f003 fe8e 	bl	10106fc <memmove>
 100c9e0:	e6ff      	b.n	100c7e2 <_realloc_r+0x9a>
 100c9e2:	4629      	mov	r1, r5
 100c9e4:	4630      	mov	r0, r6
 100c9e6:	461c      	mov	r4, r3
 100c9e8:	46d1      	mov	r9, sl
 100c9ea:	f003 fe87 	bl	10106fc <memmove>
 100c9ee:	e70b      	b.n	100c808 <_realloc_r+0xc0>
 100c9f0:	68ab      	ldr	r3, [r5, #8]
 100c9f2:	6083      	str	r3, [r0, #8]
 100c9f4:	68eb      	ldr	r3, [r5, #12]
 100c9f6:	60c3      	str	r3, [r0, #12]
 100c9f8:	2a24      	cmp	r2, #36	; 0x24
 100c9fa:	d017      	beq.n	100ca2c <_realloc_r+0x2e4>
 100c9fc:	f100 0310 	add.w	r3, r0, #16
 100ca00:	f105 0210 	add.w	r2, r5, #16
 100ca04:	e6e7      	b.n	100c7d6 <_realloc_r+0x8e>
 100ca06:	f850 3c04 	ldr.w	r3, [r0, #-4]
 100ca0a:	f023 0303 	bic.w	r3, r3, #3
 100ca0e:	441c      	add	r4, r3
 100ca10:	462e      	mov	r6, r5
 100ca12:	e6f9      	b.n	100c808 <_realloc_r+0xc0>
 100ca14:	68a9      	ldr	r1, [r5, #8]
 100ca16:	f8ca 1010 	str.w	r1, [sl, #16]
 100ca1a:	68e9      	ldr	r1, [r5, #12]
 100ca1c:	f8ca 1014 	str.w	r1, [sl, #20]
 100ca20:	2a24      	cmp	r2, #36	; 0x24
 100ca22:	d00c      	beq.n	100ca3e <_realloc_r+0x2f6>
 100ca24:	3510      	adds	r5, #16
 100ca26:	f10a 0218 	add.w	r2, sl, #24
 100ca2a:	e7b9      	b.n	100c9a0 <_realloc_r+0x258>
 100ca2c:	692b      	ldr	r3, [r5, #16]
 100ca2e:	6103      	str	r3, [r0, #16]
 100ca30:	696b      	ldr	r3, [r5, #20]
 100ca32:	6143      	str	r3, [r0, #20]
 100ca34:	f105 0218 	add.w	r2, r5, #24
 100ca38:	f100 0318 	add.w	r3, r0, #24
 100ca3c:	e6cb      	b.n	100c7d6 <_realloc_r+0x8e>
 100ca3e:	692a      	ldr	r2, [r5, #16]
 100ca40:	f8ca 2018 	str.w	r2, [sl, #24]
 100ca44:	696a      	ldr	r2, [r5, #20]
 100ca46:	f8ca 201c 	str.w	r2, [sl, #28]
 100ca4a:	3518      	adds	r5, #24
 100ca4c:	f10a 0220 	add.w	r2, sl, #32
 100ca50:	e7a6      	b.n	100c9a0 <_realloc_r+0x258>
 100ca52:	4632      	mov	r2, r6
 100ca54:	e77f      	b.n	100c956 <_realloc_r+0x20e>
 100ca56:	4629      	mov	r1, r5
 100ca58:	4630      	mov	r0, r6
 100ca5a:	9301      	str	r3, [sp, #4]
 100ca5c:	f003 fe4e 	bl	10106fc <memmove>
 100ca60:	9b01      	ldr	r3, [sp, #4]
 100ca62:	e77e      	b.n	100c962 <_realloc_r+0x21a>
 100ca64:	68a9      	ldr	r1, [r5, #8]
 100ca66:	f8ca 1010 	str.w	r1, [sl, #16]
 100ca6a:	68e9      	ldr	r1, [r5, #12]
 100ca6c:	f8ca 1014 	str.w	r1, [sl, #20]
 100ca70:	2a24      	cmp	r2, #36	; 0x24
 100ca72:	d003      	beq.n	100ca7c <_realloc_r+0x334>
 100ca74:	3510      	adds	r5, #16
 100ca76:	f10a 0218 	add.w	r2, sl, #24
 100ca7a:	e76c      	b.n	100c956 <_realloc_r+0x20e>
 100ca7c:	692a      	ldr	r2, [r5, #16]
 100ca7e:	f8ca 2018 	str.w	r2, [sl, #24]
 100ca82:	696a      	ldr	r2, [r5, #20]
 100ca84:	f8ca 201c 	str.w	r2, [sl, #28]
 100ca88:	3518      	adds	r5, #24
 100ca8a:	f10a 0220 	add.w	r2, sl, #32
 100ca8e:	e762      	b.n	100c956 <_realloc_r+0x20e>
 100ca90:	20000b84 	.word	0x20000b84

0100ca94 <_sbrk_r>:
 100ca94:	b538      	push	{r3, r4, r5, lr}
 100ca96:	4c07      	ldr	r4, [pc, #28]	; (100cab4 <_sbrk_r+0x20>)
 100ca98:	2300      	movs	r3, #0
 100ca9a:	4605      	mov	r5, r0
 100ca9c:	4608      	mov	r0, r1
 100ca9e:	6023      	str	r3, [r4, #0]
 100caa0:	f7fa fbc0 	bl	1007224 <_sbrk>
 100caa4:	1c43      	adds	r3, r0, #1
 100caa6:	d000      	beq.n	100caaa <_sbrk_r+0x16>
 100caa8:	bd38      	pop	{r3, r4, r5, pc}
 100caaa:	6823      	ldr	r3, [r4, #0]
 100caac:	2b00      	cmp	r3, #0
 100caae:	d0fb      	beq.n	100caa8 <_sbrk_r+0x14>
 100cab0:	602b      	str	r3, [r5, #0]
 100cab2:	bd38      	pop	{r3, r4, r5, pc}
 100cab4:	20008354 	.word	0x20008354

0100cab8 <__sread>:
 100cab8:	b510      	push	{r4, lr}
 100caba:	460c      	mov	r4, r1
 100cabc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 100cac0:	f004 f97a 	bl	1010db8 <_read_r>
 100cac4:	2800      	cmp	r0, #0
 100cac6:	db03      	blt.n	100cad0 <__sread+0x18>
 100cac8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 100caca:	4403      	add	r3, r0
 100cacc:	6523      	str	r3, [r4, #80]	; 0x50
 100cace:	bd10      	pop	{r4, pc}
 100cad0:	89a3      	ldrh	r3, [r4, #12]
 100cad2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 100cad6:	81a3      	strh	r3, [r4, #12]
 100cad8:	bd10      	pop	{r4, pc}
 100cada:	bf00      	nop

0100cadc <__swrite>:
 100cadc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 100cae0:	4616      	mov	r6, r2
 100cae2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 100cae6:	461f      	mov	r7, r3
 100cae8:	05d3      	lsls	r3, r2, #23
 100caea:	460c      	mov	r4, r1
 100caec:	4605      	mov	r5, r0
 100caee:	d507      	bpl.n	100cb00 <__swrite+0x24>
 100caf0:	2200      	movs	r2, #0
 100caf2:	2302      	movs	r3, #2
 100caf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 100caf8:	f003 fd72 	bl	10105e0 <_lseek_r>
 100cafc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 100cb00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 100cb04:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 100cb08:	81a2      	strh	r2, [r4, #12]
 100cb0a:	463b      	mov	r3, r7
 100cb0c:	4632      	mov	r2, r6
 100cb0e:	4628      	mov	r0, r5
 100cb10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 100cb14:	f002 ba84 	b.w	100f020 <_write_r>

0100cb18 <__sseek>:
 100cb18:	b510      	push	{r4, lr}
 100cb1a:	460c      	mov	r4, r1
 100cb1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 100cb20:	f003 fd5e 	bl	10105e0 <_lseek_r>
 100cb24:	89a3      	ldrh	r3, [r4, #12]
 100cb26:	1c42      	adds	r2, r0, #1
 100cb28:	bf0e      	itee	eq
 100cb2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 100cb2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 100cb32:	6520      	strne	r0, [r4, #80]	; 0x50
 100cb34:	81a3      	strh	r3, [r4, #12]
 100cb36:	bd10      	pop	{r4, pc}

0100cb38 <__sclose>:
 100cb38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 100cb3c:	f002 bafa 	b.w	100f134 <_close_r>

0100cb40 <strlen>:
 100cb40:	f890 f000 	pld	[r0]
 100cb44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 100cb48:	f020 0107 	bic.w	r1, r0, #7
 100cb4c:	f06f 0c00 	mvn.w	ip, #0
 100cb50:	f010 0407 	ands.w	r4, r0, #7
 100cb54:	f891 f020 	pld	[r1, #32]
 100cb58:	f040 8049 	bne.w	100cbee <strlen+0xae>
 100cb5c:	f04f 0400 	mov.w	r4, #0
 100cb60:	f06f 0007 	mvn.w	r0, #7
 100cb64:	e9d1 2300 	ldrd	r2, r3, [r1]
 100cb68:	f891 f040 	pld	[r1, #64]	; 0x40
 100cb6c:	f100 0008 	add.w	r0, r0, #8
 100cb70:	fa82 f24c 	uadd8	r2, r2, ip
 100cb74:	faa4 f28c 	sel	r2, r4, ip
 100cb78:	fa83 f34c 	uadd8	r3, r3, ip
 100cb7c:	faa2 f38c 	sel	r3, r2, ip
 100cb80:	bb4b      	cbnz	r3, 100cbd6 <strlen+0x96>
 100cb82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 100cb86:	fa82 f24c 	uadd8	r2, r2, ip
 100cb8a:	f100 0008 	add.w	r0, r0, #8
 100cb8e:	faa4 f28c 	sel	r2, r4, ip
 100cb92:	fa83 f34c 	uadd8	r3, r3, ip
 100cb96:	faa2 f38c 	sel	r3, r2, ip
 100cb9a:	b9e3      	cbnz	r3, 100cbd6 <strlen+0x96>
 100cb9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 100cba0:	fa82 f24c 	uadd8	r2, r2, ip
 100cba4:	f100 0008 	add.w	r0, r0, #8
 100cba8:	faa4 f28c 	sel	r2, r4, ip
 100cbac:	fa83 f34c 	uadd8	r3, r3, ip
 100cbb0:	faa2 f38c 	sel	r3, r2, ip
 100cbb4:	b97b      	cbnz	r3, 100cbd6 <strlen+0x96>
 100cbb6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 100cbba:	f101 0120 	add.w	r1, r1, #32
 100cbbe:	fa82 f24c 	uadd8	r2, r2, ip
 100cbc2:	f100 0008 	add.w	r0, r0, #8
 100cbc6:	faa4 f28c 	sel	r2, r4, ip
 100cbca:	fa83 f34c 	uadd8	r3, r3, ip
 100cbce:	faa2 f38c 	sel	r3, r2, ip
 100cbd2:	2b00      	cmp	r3, #0
 100cbd4:	d0c6      	beq.n	100cb64 <strlen+0x24>
 100cbd6:	2a00      	cmp	r2, #0
 100cbd8:	bf04      	itt	eq
 100cbda:	3004      	addeq	r0, #4
 100cbdc:	461a      	moveq	r2, r3
 100cbde:	ba12      	rev	r2, r2
 100cbe0:	fab2 f282 	clz	r2, r2
 100cbe4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 100cbe8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 100cbec:	4770      	bx	lr
 100cbee:	e9d1 2300 	ldrd	r2, r3, [r1]
 100cbf2:	f004 0503 	and.w	r5, r4, #3
 100cbf6:	f1c4 0000 	rsb	r0, r4, #0
 100cbfa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 100cbfe:	f014 0f04 	tst.w	r4, #4
 100cc02:	f891 f040 	pld	[r1, #64]	; 0x40
 100cc06:	fa0c f505 	lsl.w	r5, ip, r5
 100cc0a:	ea62 0205 	orn	r2, r2, r5
 100cc0e:	bf1c      	itt	ne
 100cc10:	ea63 0305 	ornne	r3, r3, r5
 100cc14:	4662      	movne	r2, ip
 100cc16:	f04f 0400 	mov.w	r4, #0
 100cc1a:	e7a9      	b.n	100cb70 <strlen+0x30>

0100cc1c <strncpy>:
 100cc1c:	ea40 0301 	orr.w	r3, r0, r1
 100cc20:	f013 0f03 	tst.w	r3, #3
 100cc24:	b470      	push	{r4, r5, r6}
 100cc26:	4603      	mov	r3, r0
 100cc28:	d024      	beq.n	100cc74 <strncpy+0x58>
 100cc2a:	b1a2      	cbz	r2, 100cc56 <strncpy+0x3a>
 100cc2c:	780c      	ldrb	r4, [r1, #0]
 100cc2e:	701c      	strb	r4, [r3, #0]
 100cc30:	3a01      	subs	r2, #1
 100cc32:	3301      	adds	r3, #1
 100cc34:	3101      	adds	r1, #1
 100cc36:	b13c      	cbz	r4, 100cc48 <strncpy+0x2c>
 100cc38:	b16a      	cbz	r2, 100cc56 <strncpy+0x3a>
 100cc3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 100cc3e:	f803 4b01 	strb.w	r4, [r3], #1
 100cc42:	3a01      	subs	r2, #1
 100cc44:	2c00      	cmp	r4, #0
 100cc46:	d1f7      	bne.n	100cc38 <strncpy+0x1c>
 100cc48:	b12a      	cbz	r2, 100cc56 <strncpy+0x3a>
 100cc4a:	441a      	add	r2, r3
 100cc4c:	2100      	movs	r1, #0
 100cc4e:	f803 1b01 	strb.w	r1, [r3], #1
 100cc52:	429a      	cmp	r2, r3
 100cc54:	d1fb      	bne.n	100cc4e <strncpy+0x32>
 100cc56:	bc70      	pop	{r4, r5, r6}
 100cc58:	4770      	bx	lr
 100cc5a:	460e      	mov	r6, r1
 100cc5c:	f851 5b04 	ldr.w	r5, [r1], #4
 100cc60:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
 100cc64:	ea24 0405 	bic.w	r4, r4, r5
 100cc68:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 100cc6c:	d105      	bne.n	100cc7a <strncpy+0x5e>
 100cc6e:	f843 5b04 	str.w	r5, [r3], #4
 100cc72:	3a04      	subs	r2, #4
 100cc74:	2a03      	cmp	r2, #3
 100cc76:	d8f0      	bhi.n	100cc5a <strncpy+0x3e>
 100cc78:	e7d7      	b.n	100cc2a <strncpy+0xe>
 100cc7a:	4631      	mov	r1, r6
 100cc7c:	e7d6      	b.n	100cc2c <strncpy+0x10>
 100cc7e:	bf00      	nop

0100cc80 <__sprint_r.part.0>:
 100cc80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 100cc84:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 100cc86:	049c      	lsls	r4, r3, #18
 100cc88:	4693      	mov	fp, r2
 100cc8a:	d52f      	bpl.n	100ccec <__sprint_r.part.0+0x6c>
 100cc8c:	6893      	ldr	r3, [r2, #8]
 100cc8e:	6812      	ldr	r2, [r2, #0]
 100cc90:	b353      	cbz	r3, 100cce8 <__sprint_r.part.0+0x68>
 100cc92:	460e      	mov	r6, r1
 100cc94:	4607      	mov	r7, r0
 100cc96:	f102 0908 	add.w	r9, r2, #8
 100cc9a:	e919 0420 	ldmdb	r9, {r5, sl}
 100cc9e:	ea5f 089a 	movs.w	r8, sl, lsr #2
 100cca2:	d017      	beq.n	100ccd4 <__sprint_r.part.0+0x54>
 100cca4:	3d04      	subs	r5, #4
 100cca6:	2400      	movs	r4, #0
 100cca8:	e001      	b.n	100ccae <__sprint_r.part.0+0x2e>
 100ccaa:	45a0      	cmp	r8, r4
 100ccac:	d010      	beq.n	100ccd0 <__sprint_r.part.0+0x50>
 100ccae:	4632      	mov	r2, r6
 100ccb0:	f855 1f04 	ldr.w	r1, [r5, #4]!
 100ccb4:	4638      	mov	r0, r7
 100ccb6:	f003 fad9 	bl	101026c <_fputwc_r>
 100ccba:	1c43      	adds	r3, r0, #1
 100ccbc:	f104 0401 	add.w	r4, r4, #1
 100ccc0:	d1f3      	bne.n	100ccaa <__sprint_r.part.0+0x2a>
 100ccc2:	2300      	movs	r3, #0
 100ccc4:	f8cb 3008 	str.w	r3, [fp, #8]
 100ccc8:	f8cb 3004 	str.w	r3, [fp, #4]
 100cccc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100ccd0:	f8db 3008 	ldr.w	r3, [fp, #8]
 100ccd4:	f02a 0a03 	bic.w	sl, sl, #3
 100ccd8:	eba3 030a 	sub.w	r3, r3, sl
 100ccdc:	f8cb 3008 	str.w	r3, [fp, #8]
 100cce0:	f109 0908 	add.w	r9, r9, #8
 100cce4:	2b00      	cmp	r3, #0
 100cce6:	d1d8      	bne.n	100cc9a <__sprint_r.part.0+0x1a>
 100cce8:	2000      	movs	r0, #0
 100ccea:	e7ea      	b.n	100ccc2 <__sprint_r.part.0+0x42>
 100ccec:	f003 faf2 	bl	10102d4 <__sfvwrite_r>
 100ccf0:	2300      	movs	r3, #0
 100ccf2:	f8cb 3008 	str.w	r3, [fp, #8]
 100ccf6:	f8cb 3004 	str.w	r3, [fp, #4]
 100ccfa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100ccfe:	bf00      	nop

0100cd00 <__sprint_r>:
 100cd00:	6893      	ldr	r3, [r2, #8]
 100cd02:	b10b      	cbz	r3, 100cd08 <__sprint_r+0x8>
 100cd04:	f7ff bfbc 	b.w	100cc80 <__sprint_r.part.0>
 100cd08:	b410      	push	{r4}
 100cd0a:	4618      	mov	r0, r3
 100cd0c:	6053      	str	r3, [r2, #4]
 100cd0e:	bc10      	pop	{r4}
 100cd10:	4770      	bx	lr
 100cd12:	bf00      	nop

0100cd14 <_vfiprintf_r>:
 100cd14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 100cd18:	b0ad      	sub	sp, #180	; 0xb4
 100cd1a:	461d      	mov	r5, r3
 100cd1c:	468b      	mov	fp, r1
 100cd1e:	4690      	mov	r8, r2
 100cd20:	9307      	str	r3, [sp, #28]
 100cd22:	9006      	str	r0, [sp, #24]
 100cd24:	b118      	cbz	r0, 100cd2e <_vfiprintf_r+0x1a>
 100cd26:	6b83      	ldr	r3, [r0, #56]	; 0x38
 100cd28:	2b00      	cmp	r3, #0
 100cd2a:	f000 80f3 	beq.w	100cf14 <_vfiprintf_r+0x200>
 100cd2e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
 100cd32:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
 100cd36:	07df      	lsls	r7, r3, #31
 100cd38:	b281      	uxth	r1, r0
 100cd3a:	d402      	bmi.n	100cd42 <_vfiprintf_r+0x2e>
 100cd3c:	058e      	lsls	r6, r1, #22
 100cd3e:	f140 80fc 	bpl.w	100cf3a <_vfiprintf_r+0x226>
 100cd42:	048c      	lsls	r4, r1, #18
 100cd44:	d40a      	bmi.n	100cd5c <_vfiprintf_r+0x48>
 100cd46:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
 100cd4a:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
 100cd4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 100cd52:	f8ab 100c 	strh.w	r1, [fp, #12]
 100cd56:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
 100cd5a:	b289      	uxth	r1, r1
 100cd5c:	0708      	lsls	r0, r1, #28
 100cd5e:	f140 80b3 	bpl.w	100cec8 <_vfiprintf_r+0x1b4>
 100cd62:	f8db 3010 	ldr.w	r3, [fp, #16]
 100cd66:	2b00      	cmp	r3, #0
 100cd68:	f000 80ae 	beq.w	100cec8 <_vfiprintf_r+0x1b4>
 100cd6c:	f001 031a 	and.w	r3, r1, #26
 100cd70:	2b0a      	cmp	r3, #10
 100cd72:	f000 80b5 	beq.w	100cee0 <_vfiprintf_r+0x1cc>
 100cd76:	2300      	movs	r3, #0
 100cd78:	f10d 0970 	add.w	r9, sp, #112	; 0x70
 100cd7c:	930b      	str	r3, [sp, #44]	; 0x2c
 100cd7e:	9311      	str	r3, [sp, #68]	; 0x44
 100cd80:	9310      	str	r3, [sp, #64]	; 0x40
 100cd82:	9303      	str	r3, [sp, #12]
 100cd84:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 100cd88:	46ca      	mov	sl, r9
 100cd8a:	f8cd b010 	str.w	fp, [sp, #16]
 100cd8e:	f898 3000 	ldrb.w	r3, [r8]
 100cd92:	4644      	mov	r4, r8
 100cd94:	b1fb      	cbz	r3, 100cdd6 <_vfiprintf_r+0xc2>
 100cd96:	2b25      	cmp	r3, #37	; 0x25
 100cd98:	d102      	bne.n	100cda0 <_vfiprintf_r+0x8c>
 100cd9a:	e01c      	b.n	100cdd6 <_vfiprintf_r+0xc2>
 100cd9c:	2b25      	cmp	r3, #37	; 0x25
 100cd9e:	d003      	beq.n	100cda8 <_vfiprintf_r+0x94>
 100cda0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 100cda4:	2b00      	cmp	r3, #0
 100cda6:	d1f9      	bne.n	100cd9c <_vfiprintf_r+0x88>
 100cda8:	eba4 0508 	sub.w	r5, r4, r8
 100cdac:	b19d      	cbz	r5, 100cdd6 <_vfiprintf_r+0xc2>
 100cdae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 100cdb0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 100cdb2:	f8ca 8000 	str.w	r8, [sl]
 100cdb6:	3301      	adds	r3, #1
 100cdb8:	442a      	add	r2, r5
 100cdba:	2b07      	cmp	r3, #7
 100cdbc:	f8ca 5004 	str.w	r5, [sl, #4]
 100cdc0:	9211      	str	r2, [sp, #68]	; 0x44
 100cdc2:	9310      	str	r3, [sp, #64]	; 0x40
 100cdc4:	dd7a      	ble.n	100cebc <_vfiprintf_r+0x1a8>
 100cdc6:	2a00      	cmp	r2, #0
 100cdc8:	f040 84b0 	bne.w	100d72c <_vfiprintf_r+0xa18>
 100cdcc:	9b03      	ldr	r3, [sp, #12]
 100cdce:	9210      	str	r2, [sp, #64]	; 0x40
 100cdd0:	442b      	add	r3, r5
 100cdd2:	46ca      	mov	sl, r9
 100cdd4:	9303      	str	r3, [sp, #12]
 100cdd6:	7823      	ldrb	r3, [r4, #0]
 100cdd8:	2b00      	cmp	r3, #0
 100cdda:	f000 83e0 	beq.w	100d59e <_vfiprintf_r+0x88a>
 100cdde:	2000      	movs	r0, #0
 100cde0:	f04f 0300 	mov.w	r3, #0
 100cde4:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 100cde8:	f104 0801 	add.w	r8, r4, #1
 100cdec:	7862      	ldrb	r2, [r4, #1]
 100cdee:	4605      	mov	r5, r0
 100cdf0:	4606      	mov	r6, r0
 100cdf2:	4603      	mov	r3, r0
 100cdf4:	f04f 34ff 	mov.w	r4, #4294967295
 100cdf8:	f108 0801 	add.w	r8, r8, #1
 100cdfc:	f1a2 0120 	sub.w	r1, r2, #32
 100ce00:	2958      	cmp	r1, #88	; 0x58
 100ce02:	f200 82de 	bhi.w	100d3c2 <_vfiprintf_r+0x6ae>
 100ce06:	e8df f011 	tbh	[pc, r1, lsl #1]
 100ce0a:	0221      	.short	0x0221
 100ce0c:	02dc02dc 	.word	0x02dc02dc
 100ce10:	02dc0229 	.word	0x02dc0229
 100ce14:	02dc02dc 	.word	0x02dc02dc
 100ce18:	02dc02dc 	.word	0x02dc02dc
 100ce1c:	028902dc 	.word	0x028902dc
 100ce20:	02dc0295 	.word	0x02dc0295
 100ce24:	02bd00a2 	.word	0x02bd00a2
 100ce28:	019f02dc 	.word	0x019f02dc
 100ce2c:	01a401a4 	.word	0x01a401a4
 100ce30:	01a401a4 	.word	0x01a401a4
 100ce34:	01a401a4 	.word	0x01a401a4
 100ce38:	01a401a4 	.word	0x01a401a4
 100ce3c:	02dc01a4 	.word	0x02dc01a4
 100ce40:	02dc02dc 	.word	0x02dc02dc
 100ce44:	02dc02dc 	.word	0x02dc02dc
 100ce48:	02dc02dc 	.word	0x02dc02dc
 100ce4c:	02dc02dc 	.word	0x02dc02dc
 100ce50:	01b202dc 	.word	0x01b202dc
 100ce54:	02dc02dc 	.word	0x02dc02dc
 100ce58:	02dc02dc 	.word	0x02dc02dc
 100ce5c:	02dc02dc 	.word	0x02dc02dc
 100ce60:	02dc02dc 	.word	0x02dc02dc
 100ce64:	02dc02dc 	.word	0x02dc02dc
 100ce68:	02dc0197 	.word	0x02dc0197
 100ce6c:	02dc02dc 	.word	0x02dc02dc
 100ce70:	02dc02dc 	.word	0x02dc02dc
 100ce74:	02dc019b 	.word	0x02dc019b
 100ce78:	025302dc 	.word	0x025302dc
 100ce7c:	02dc02dc 	.word	0x02dc02dc
 100ce80:	02dc02dc 	.word	0x02dc02dc
 100ce84:	02dc02dc 	.word	0x02dc02dc
 100ce88:	02dc02dc 	.word	0x02dc02dc
 100ce8c:	02dc02dc 	.word	0x02dc02dc
 100ce90:	021b025a 	.word	0x021b025a
 100ce94:	02dc02dc 	.word	0x02dc02dc
 100ce98:	026e02dc 	.word	0x026e02dc
 100ce9c:	02dc021b 	.word	0x02dc021b
 100cea0:	027302dc 	.word	0x027302dc
 100cea4:	01f502dc 	.word	0x01f502dc
 100cea8:	02090182 	.word	0x02090182
 100ceac:	02dc02d7 	.word	0x02dc02d7
 100ceb0:	02dc029a 	.word	0x02dc029a
 100ceb4:	02dc00a7 	.word	0x02dc00a7
 100ceb8:	022e02dc 	.word	0x022e02dc
 100cebc:	f10a 0a08 	add.w	sl, sl, #8
 100cec0:	9b03      	ldr	r3, [sp, #12]
 100cec2:	442b      	add	r3, r5
 100cec4:	9303      	str	r3, [sp, #12]
 100cec6:	e786      	b.n	100cdd6 <_vfiprintf_r+0xc2>
 100cec8:	4659      	mov	r1, fp
 100ceca:	9806      	ldr	r0, [sp, #24]
 100cecc:	f002 f8be 	bl	100f04c <__swsetup_r>
 100ced0:	bb18      	cbnz	r0, 100cf1a <_vfiprintf_r+0x206>
 100ced2:	f8bb 100c 	ldrh.w	r1, [fp, #12]
 100ced6:	f001 031a 	and.w	r3, r1, #26
 100ceda:	2b0a      	cmp	r3, #10
 100cedc:	f47f af4b 	bne.w	100cd76 <_vfiprintf_r+0x62>
 100cee0:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
 100cee4:	2b00      	cmp	r3, #0
 100cee6:	f6ff af46 	blt.w	100cd76 <_vfiprintf_r+0x62>
 100ceea:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
 100ceee:	07db      	lsls	r3, r3, #31
 100cef0:	d405      	bmi.n	100cefe <_vfiprintf_r+0x1ea>
 100cef2:	058f      	lsls	r7, r1, #22
 100cef4:	d403      	bmi.n	100cefe <_vfiprintf_r+0x1ea>
 100cef6:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
 100cefa:	f7ff f803 	bl	100bf04 <__retarget_lock_release_recursive>
 100cefe:	462b      	mov	r3, r5
 100cf00:	4642      	mov	r2, r8
 100cf02:	4659      	mov	r1, fp
 100cf04:	9806      	ldr	r0, [sp, #24]
 100cf06:	f000 fd4d 	bl	100d9a4 <__sbprintf>
 100cf0a:	9003      	str	r0, [sp, #12]
 100cf0c:	9803      	ldr	r0, [sp, #12]
 100cf0e:	b02d      	add	sp, #180	; 0xb4
 100cf10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100cf14:	f7fe fdfa 	bl	100bb0c <__sinit>
 100cf18:	e709      	b.n	100cd2e <_vfiprintf_r+0x1a>
 100cf1a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
 100cf1e:	07d9      	lsls	r1, r3, #31
 100cf20:	d404      	bmi.n	100cf2c <_vfiprintf_r+0x218>
 100cf22:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 100cf26:	059a      	lsls	r2, r3, #22
 100cf28:	f140 84aa 	bpl.w	100d880 <_vfiprintf_r+0xb6c>
 100cf2c:	f04f 33ff 	mov.w	r3, #4294967295
 100cf30:	9303      	str	r3, [sp, #12]
 100cf32:	9803      	ldr	r0, [sp, #12]
 100cf34:	b02d      	add	sp, #180	; 0xb4
 100cf36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100cf3a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
 100cf3e:	f7fe ffdf 	bl	100bf00 <__retarget_lock_acquire_recursive>
 100cf42:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
 100cf46:	b281      	uxth	r1, r0
 100cf48:	e6fb      	b.n	100cd42 <_vfiprintf_r+0x2e>
 100cf4a:	4276      	negs	r6, r6
 100cf4c:	9207      	str	r2, [sp, #28]
 100cf4e:	f043 0304 	orr.w	r3, r3, #4
 100cf52:	f898 2000 	ldrb.w	r2, [r8]
 100cf56:	e74f      	b.n	100cdf8 <_vfiprintf_r+0xe4>
 100cf58:	9608      	str	r6, [sp, #32]
 100cf5a:	069e      	lsls	r6, r3, #26
 100cf5c:	f100 8450 	bmi.w	100d800 <_vfiprintf_r+0xaec>
 100cf60:	9907      	ldr	r1, [sp, #28]
 100cf62:	06dd      	lsls	r5, r3, #27
 100cf64:	460a      	mov	r2, r1
 100cf66:	f100 83ef 	bmi.w	100d748 <_vfiprintf_r+0xa34>
 100cf6a:	0658      	lsls	r0, r3, #25
 100cf6c:	f140 83ec 	bpl.w	100d748 <_vfiprintf_r+0xa34>
 100cf70:	880e      	ldrh	r6, [r1, #0]
 100cf72:	3104      	adds	r1, #4
 100cf74:	2700      	movs	r7, #0
 100cf76:	2201      	movs	r2, #1
 100cf78:	9107      	str	r1, [sp, #28]
 100cf7a:	f04f 0100 	mov.w	r1, #0
 100cf7e:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
 100cf82:	2500      	movs	r5, #0
 100cf84:	1c61      	adds	r1, r4, #1
 100cf86:	f000 8116 	beq.w	100d1b6 <_vfiprintf_r+0x4a2>
 100cf8a:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 100cf8e:	9102      	str	r1, [sp, #8]
 100cf90:	ea56 0107 	orrs.w	r1, r6, r7
 100cf94:	f040 8114 	bne.w	100d1c0 <_vfiprintf_r+0x4ac>
 100cf98:	2c00      	cmp	r4, #0
 100cf9a:	f040 835c 	bne.w	100d656 <_vfiprintf_r+0x942>
 100cf9e:	2a00      	cmp	r2, #0
 100cfa0:	f040 83b7 	bne.w	100d712 <_vfiprintf_r+0x9fe>
 100cfa4:	f013 0301 	ands.w	r3, r3, #1
 100cfa8:	9305      	str	r3, [sp, #20]
 100cfaa:	f000 8457 	beq.w	100d85c <_vfiprintf_r+0xb48>
 100cfae:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
 100cfb2:	2330      	movs	r3, #48	; 0x30
 100cfb4:	f80b 3d41 	strb.w	r3, [fp, #-65]!
 100cfb8:	9b05      	ldr	r3, [sp, #20]
 100cfba:	42a3      	cmp	r3, r4
 100cfbc:	bfb8      	it	lt
 100cfbe:	4623      	movlt	r3, r4
 100cfc0:	9301      	str	r3, [sp, #4]
 100cfc2:	b10d      	cbz	r5, 100cfc8 <_vfiprintf_r+0x2b4>
 100cfc4:	3301      	adds	r3, #1
 100cfc6:	9301      	str	r3, [sp, #4]
 100cfc8:	9b02      	ldr	r3, [sp, #8]
 100cfca:	f013 0302 	ands.w	r3, r3, #2
 100cfce:	9309      	str	r3, [sp, #36]	; 0x24
 100cfd0:	d002      	beq.n	100cfd8 <_vfiprintf_r+0x2c4>
 100cfd2:	9b01      	ldr	r3, [sp, #4]
 100cfd4:	3302      	adds	r3, #2
 100cfd6:	9301      	str	r3, [sp, #4]
 100cfd8:	9b02      	ldr	r3, [sp, #8]
 100cfda:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 100cfde:	930a      	str	r3, [sp, #40]	; 0x28
 100cfe0:	f040 8217 	bne.w	100d412 <_vfiprintf_r+0x6fe>
 100cfe4:	9b08      	ldr	r3, [sp, #32]
 100cfe6:	9a01      	ldr	r2, [sp, #4]
 100cfe8:	1a9d      	subs	r5, r3, r2
 100cfea:	2d00      	cmp	r5, #0
 100cfec:	f340 8211 	ble.w	100d412 <_vfiprintf_r+0x6fe>
 100cff0:	2d10      	cmp	r5, #16
 100cff2:	f340 8490 	ble.w	100d916 <_vfiprintf_r+0xc02>
 100cff6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 100cff8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 100cffa:	4ec4      	ldr	r6, [pc, #784]	; (100d30c <_vfiprintf_r+0x5f8>)
 100cffc:	46d6      	mov	lr, sl
 100cffe:	2710      	movs	r7, #16
 100d000:	46a2      	mov	sl, r4
 100d002:	4619      	mov	r1, r3
 100d004:	9c06      	ldr	r4, [sp, #24]
 100d006:	e007      	b.n	100d018 <_vfiprintf_r+0x304>
 100d008:	f101 0c02 	add.w	ip, r1, #2
 100d00c:	f10e 0e08 	add.w	lr, lr, #8
 100d010:	4601      	mov	r1, r0
 100d012:	3d10      	subs	r5, #16
 100d014:	2d10      	cmp	r5, #16
 100d016:	dd11      	ble.n	100d03c <_vfiprintf_r+0x328>
 100d018:	1c48      	adds	r0, r1, #1
 100d01a:	3210      	adds	r2, #16
 100d01c:	2807      	cmp	r0, #7
 100d01e:	9211      	str	r2, [sp, #68]	; 0x44
 100d020:	e88e 00c0 	stmia.w	lr, {r6, r7}
 100d024:	9010      	str	r0, [sp, #64]	; 0x40
 100d026:	ddef      	ble.n	100d008 <_vfiprintf_r+0x2f4>
 100d028:	2a00      	cmp	r2, #0
 100d02a:	f040 81e4 	bne.w	100d3f6 <_vfiprintf_r+0x6e2>
 100d02e:	3d10      	subs	r5, #16
 100d030:	2d10      	cmp	r5, #16
 100d032:	4611      	mov	r1, r2
 100d034:	f04f 0c01 	mov.w	ip, #1
 100d038:	46ce      	mov	lr, r9
 100d03a:	dced      	bgt.n	100d018 <_vfiprintf_r+0x304>
 100d03c:	4654      	mov	r4, sl
 100d03e:	4661      	mov	r1, ip
 100d040:	46f2      	mov	sl, lr
 100d042:	442a      	add	r2, r5
 100d044:	2907      	cmp	r1, #7
 100d046:	9211      	str	r2, [sp, #68]	; 0x44
 100d048:	f8ca 6000 	str.w	r6, [sl]
 100d04c:	f8ca 5004 	str.w	r5, [sl, #4]
 100d050:	9110      	str	r1, [sp, #64]	; 0x40
 100d052:	f300 82ec 	bgt.w	100d62e <_vfiprintf_r+0x91a>
 100d056:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
 100d05a:	f10a 0a08 	add.w	sl, sl, #8
 100d05e:	1c48      	adds	r0, r1, #1
 100d060:	2d00      	cmp	r5, #0
 100d062:	f040 81de 	bne.w	100d422 <_vfiprintf_r+0x70e>
 100d066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 100d068:	2b00      	cmp	r3, #0
 100d06a:	f000 81f8 	beq.w	100d45e <_vfiprintf_r+0x74a>
 100d06e:	3202      	adds	r2, #2
 100d070:	a90e      	add	r1, sp, #56	; 0x38
 100d072:	2302      	movs	r3, #2
 100d074:	2807      	cmp	r0, #7
 100d076:	9211      	str	r2, [sp, #68]	; 0x44
 100d078:	9010      	str	r0, [sp, #64]	; 0x40
 100d07a:	e88a 000a 	stmia.w	sl, {r1, r3}
 100d07e:	f340 81ea 	ble.w	100d456 <_vfiprintf_r+0x742>
 100d082:	2a00      	cmp	r2, #0
 100d084:	f040 838c 	bne.w	100d7a0 <_vfiprintf_r+0xa8c>
 100d088:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 100d08a:	2b80      	cmp	r3, #128	; 0x80
 100d08c:	f04f 0001 	mov.w	r0, #1
 100d090:	4611      	mov	r1, r2
 100d092:	46ca      	mov	sl, r9
 100d094:	f040 81e7 	bne.w	100d466 <_vfiprintf_r+0x752>
 100d098:	9b08      	ldr	r3, [sp, #32]
 100d09a:	9d01      	ldr	r5, [sp, #4]
 100d09c:	1b5e      	subs	r6, r3, r5
 100d09e:	2e00      	cmp	r6, #0
 100d0a0:	f340 81e1 	ble.w	100d466 <_vfiprintf_r+0x752>
 100d0a4:	2e10      	cmp	r6, #16
 100d0a6:	4d9a      	ldr	r5, [pc, #616]	; (100d310 <_vfiprintf_r+0x5fc>)
 100d0a8:	f340 8450 	ble.w	100d94c <_vfiprintf_r+0xc38>
 100d0ac:	46d4      	mov	ip, sl
 100d0ae:	2710      	movs	r7, #16
 100d0b0:	46a2      	mov	sl, r4
 100d0b2:	9c06      	ldr	r4, [sp, #24]
 100d0b4:	e007      	b.n	100d0c6 <_vfiprintf_r+0x3b2>
 100d0b6:	f101 0e02 	add.w	lr, r1, #2
 100d0ba:	f10c 0c08 	add.w	ip, ip, #8
 100d0be:	4601      	mov	r1, r0
 100d0c0:	3e10      	subs	r6, #16
 100d0c2:	2e10      	cmp	r6, #16
 100d0c4:	dd11      	ble.n	100d0ea <_vfiprintf_r+0x3d6>
 100d0c6:	1c48      	adds	r0, r1, #1
 100d0c8:	3210      	adds	r2, #16
 100d0ca:	2807      	cmp	r0, #7
 100d0cc:	9211      	str	r2, [sp, #68]	; 0x44
 100d0ce:	e88c 00a0 	stmia.w	ip, {r5, r7}
 100d0d2:	9010      	str	r0, [sp, #64]	; 0x40
 100d0d4:	ddef      	ble.n	100d0b6 <_vfiprintf_r+0x3a2>
 100d0d6:	2a00      	cmp	r2, #0
 100d0d8:	f040 829d 	bne.w	100d616 <_vfiprintf_r+0x902>
 100d0dc:	3e10      	subs	r6, #16
 100d0de:	2e10      	cmp	r6, #16
 100d0e0:	f04f 0e01 	mov.w	lr, #1
 100d0e4:	4611      	mov	r1, r2
 100d0e6:	46cc      	mov	ip, r9
 100d0e8:	dced      	bgt.n	100d0c6 <_vfiprintf_r+0x3b2>
 100d0ea:	4654      	mov	r4, sl
 100d0ec:	46e2      	mov	sl, ip
 100d0ee:	4432      	add	r2, r6
 100d0f0:	f1be 0f07 	cmp.w	lr, #7
 100d0f4:	9211      	str	r2, [sp, #68]	; 0x44
 100d0f6:	e88a 0060 	stmia.w	sl, {r5, r6}
 100d0fa:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
 100d0fe:	f300 8369 	bgt.w	100d7d4 <_vfiprintf_r+0xac0>
 100d102:	f10a 0a08 	add.w	sl, sl, #8
 100d106:	f10e 0001 	add.w	r0, lr, #1
 100d10a:	4671      	mov	r1, lr
 100d10c:	e1ab      	b.n	100d466 <_vfiprintf_r+0x752>
 100d10e:	9608      	str	r6, [sp, #32]
 100d110:	f013 0220 	ands.w	r2, r3, #32
 100d114:	f040 838c 	bne.w	100d830 <_vfiprintf_r+0xb1c>
 100d118:	f013 0110 	ands.w	r1, r3, #16
 100d11c:	f040 831a 	bne.w	100d754 <_vfiprintf_r+0xa40>
 100d120:	f013 0240 	ands.w	r2, r3, #64	; 0x40
 100d124:	f000 8316 	beq.w	100d754 <_vfiprintf_r+0xa40>
 100d128:	9807      	ldr	r0, [sp, #28]
 100d12a:	460a      	mov	r2, r1
 100d12c:	4601      	mov	r1, r0
 100d12e:	3104      	adds	r1, #4
 100d130:	8806      	ldrh	r6, [r0, #0]
 100d132:	9107      	str	r1, [sp, #28]
 100d134:	2700      	movs	r7, #0
 100d136:	e720      	b.n	100cf7a <_vfiprintf_r+0x266>
 100d138:	9608      	str	r6, [sp, #32]
 100d13a:	f043 0310 	orr.w	r3, r3, #16
 100d13e:	e7e7      	b.n	100d110 <_vfiprintf_r+0x3fc>
 100d140:	9608      	str	r6, [sp, #32]
 100d142:	f043 0310 	orr.w	r3, r3, #16
 100d146:	e708      	b.n	100cf5a <_vfiprintf_r+0x246>
 100d148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 100d14c:	f898 2000 	ldrb.w	r2, [r8]
 100d150:	e652      	b.n	100cdf8 <_vfiprintf_r+0xe4>
 100d152:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 100d156:	2600      	movs	r6, #0
 100d158:	f818 2b01 	ldrb.w	r2, [r8], #1
 100d15c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 100d160:	eb01 0646 	add.w	r6, r1, r6, lsl #1
 100d164:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 100d168:	2909      	cmp	r1, #9
 100d16a:	d9f5      	bls.n	100d158 <_vfiprintf_r+0x444>
 100d16c:	e646      	b.n	100cdfc <_vfiprintf_r+0xe8>
 100d16e:	9608      	str	r6, [sp, #32]
 100d170:	2800      	cmp	r0, #0
 100d172:	f040 8408 	bne.w	100d986 <_vfiprintf_r+0xc72>
 100d176:	f043 0310 	orr.w	r3, r3, #16
 100d17a:	069e      	lsls	r6, r3, #26
 100d17c:	f100 834c 	bmi.w	100d818 <_vfiprintf_r+0xb04>
 100d180:	06dd      	lsls	r5, r3, #27
 100d182:	f100 82f3 	bmi.w	100d76c <_vfiprintf_r+0xa58>
 100d186:	0658      	lsls	r0, r3, #25
 100d188:	f140 82f0 	bpl.w	100d76c <_vfiprintf_r+0xa58>
 100d18c:	9d07      	ldr	r5, [sp, #28]
 100d18e:	f9b5 6000 	ldrsh.w	r6, [r5]
 100d192:	462a      	mov	r2, r5
 100d194:	17f7      	asrs	r7, r6, #31
 100d196:	3204      	adds	r2, #4
 100d198:	4630      	mov	r0, r6
 100d19a:	4639      	mov	r1, r7
 100d19c:	9207      	str	r2, [sp, #28]
 100d19e:	2800      	cmp	r0, #0
 100d1a0:	f171 0200 	sbcs.w	r2, r1, #0
 100d1a4:	f2c0 835d 	blt.w	100d862 <_vfiprintf_r+0xb4e>
 100d1a8:	1c61      	adds	r1, r4, #1
 100d1aa:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
 100d1ae:	f04f 0201 	mov.w	r2, #1
 100d1b2:	f47f aeea 	bne.w	100cf8a <_vfiprintf_r+0x276>
 100d1b6:	ea56 0107 	orrs.w	r1, r6, r7
 100d1ba:	f000 824d 	beq.w	100d658 <_vfiprintf_r+0x944>
 100d1be:	9302      	str	r3, [sp, #8]
 100d1c0:	2a01      	cmp	r2, #1
 100d1c2:	f000 828c 	beq.w	100d6de <_vfiprintf_r+0x9ca>
 100d1c6:	2a02      	cmp	r2, #2
 100d1c8:	f040 825c 	bne.w	100d684 <_vfiprintf_r+0x970>
 100d1cc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 100d1ce:	46cb      	mov	fp, r9
 100d1d0:	0933      	lsrs	r3, r6, #4
 100d1d2:	f006 010f 	and.w	r1, r6, #15
 100d1d6:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 100d1da:	093a      	lsrs	r2, r7, #4
 100d1dc:	461e      	mov	r6, r3
 100d1de:	4617      	mov	r7, r2
 100d1e0:	5c43      	ldrb	r3, [r0, r1]
 100d1e2:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 100d1e6:	ea56 0307 	orrs.w	r3, r6, r7
 100d1ea:	d1f1      	bne.n	100d1d0 <_vfiprintf_r+0x4bc>
 100d1ec:	eba9 030b 	sub.w	r3, r9, fp
 100d1f0:	9305      	str	r3, [sp, #20]
 100d1f2:	e6e1      	b.n	100cfb8 <_vfiprintf_r+0x2a4>
 100d1f4:	2800      	cmp	r0, #0
 100d1f6:	f040 83c0 	bne.w	100d97a <_vfiprintf_r+0xc66>
 100d1fa:	0699      	lsls	r1, r3, #26
 100d1fc:	f100 8367 	bmi.w	100d8ce <_vfiprintf_r+0xbba>
 100d200:	06da      	lsls	r2, r3, #27
 100d202:	f100 80f1 	bmi.w	100d3e8 <_vfiprintf_r+0x6d4>
 100d206:	065b      	lsls	r3, r3, #25
 100d208:	f140 80ee 	bpl.w	100d3e8 <_vfiprintf_r+0x6d4>
 100d20c:	9a07      	ldr	r2, [sp, #28]
 100d20e:	6813      	ldr	r3, [r2, #0]
 100d210:	3204      	adds	r2, #4
 100d212:	9207      	str	r2, [sp, #28]
 100d214:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 100d218:	801a      	strh	r2, [r3, #0]
 100d21a:	e5b8      	b.n	100cd8e <_vfiprintf_r+0x7a>
 100d21c:	9807      	ldr	r0, [sp, #28]
 100d21e:	4a3d      	ldr	r2, [pc, #244]	; (100d314 <_vfiprintf_r+0x600>)
 100d220:	9608      	str	r6, [sp, #32]
 100d222:	920b      	str	r2, [sp, #44]	; 0x2c
 100d224:	6806      	ldr	r6, [r0, #0]
 100d226:	2278      	movs	r2, #120	; 0x78
 100d228:	2130      	movs	r1, #48	; 0x30
 100d22a:	3004      	adds	r0, #4
 100d22c:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
 100d230:	f043 0302 	orr.w	r3, r3, #2
 100d234:	9007      	str	r0, [sp, #28]
 100d236:	2700      	movs	r7, #0
 100d238:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
 100d23c:	2202      	movs	r2, #2
 100d23e:	e69c      	b.n	100cf7a <_vfiprintf_r+0x266>
 100d240:	9608      	str	r6, [sp, #32]
 100d242:	2800      	cmp	r0, #0
 100d244:	d099      	beq.n	100d17a <_vfiprintf_r+0x466>
 100d246:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
 100d24a:	e796      	b.n	100d17a <_vfiprintf_r+0x466>
 100d24c:	f898 2000 	ldrb.w	r2, [r8]
 100d250:	2d00      	cmp	r5, #0
 100d252:	f47f add1 	bne.w	100cdf8 <_vfiprintf_r+0xe4>
 100d256:	2001      	movs	r0, #1
 100d258:	2520      	movs	r5, #32
 100d25a:	e5cd      	b.n	100cdf8 <_vfiprintf_r+0xe4>
 100d25c:	f043 0301 	orr.w	r3, r3, #1
 100d260:	f898 2000 	ldrb.w	r2, [r8]
 100d264:	e5c8      	b.n	100cdf8 <_vfiprintf_r+0xe4>
 100d266:	9608      	str	r6, [sp, #32]
 100d268:	2800      	cmp	r0, #0
 100d26a:	f040 8393 	bne.w	100d994 <_vfiprintf_r+0xc80>
 100d26e:	4929      	ldr	r1, [pc, #164]	; (100d314 <_vfiprintf_r+0x600>)
 100d270:	910b      	str	r1, [sp, #44]	; 0x2c
 100d272:	069f      	lsls	r7, r3, #26
 100d274:	f100 82e8 	bmi.w	100d848 <_vfiprintf_r+0xb34>
 100d278:	9807      	ldr	r0, [sp, #28]
 100d27a:	06de      	lsls	r6, r3, #27
 100d27c:	4601      	mov	r1, r0
 100d27e:	f100 8270 	bmi.w	100d762 <_vfiprintf_r+0xa4e>
 100d282:	065d      	lsls	r5, r3, #25
 100d284:	f140 826d 	bpl.w	100d762 <_vfiprintf_r+0xa4e>
 100d288:	3104      	adds	r1, #4
 100d28a:	8806      	ldrh	r6, [r0, #0]
 100d28c:	9107      	str	r1, [sp, #28]
 100d28e:	2700      	movs	r7, #0
 100d290:	07d8      	lsls	r0, r3, #31
 100d292:	f140 8222 	bpl.w	100d6da <_vfiprintf_r+0x9c6>
 100d296:	ea56 0107 	orrs.w	r1, r6, r7
 100d29a:	f000 821e 	beq.w	100d6da <_vfiprintf_r+0x9c6>
 100d29e:	2130      	movs	r1, #48	; 0x30
 100d2a0:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
 100d2a4:	f043 0302 	orr.w	r3, r3, #2
 100d2a8:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
 100d2ac:	2202      	movs	r2, #2
 100d2ae:	e664      	b.n	100cf7a <_vfiprintf_r+0x266>
 100d2b0:	9608      	str	r6, [sp, #32]
 100d2b2:	2800      	cmp	r0, #0
 100d2b4:	f040 836b 	bne.w	100d98e <_vfiprintf_r+0xc7a>
 100d2b8:	4917      	ldr	r1, [pc, #92]	; (100d318 <_vfiprintf_r+0x604>)
 100d2ba:	910b      	str	r1, [sp, #44]	; 0x2c
 100d2bc:	e7d9      	b.n	100d272 <_vfiprintf_r+0x55e>
 100d2be:	9907      	ldr	r1, [sp, #28]
 100d2c0:	9608      	str	r6, [sp, #32]
 100d2c2:	680a      	ldr	r2, [r1, #0]
 100d2c4:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
 100d2c8:	f04f 0000 	mov.w	r0, #0
 100d2cc:	460a      	mov	r2, r1
 100d2ce:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
 100d2d2:	3204      	adds	r2, #4
 100d2d4:	2001      	movs	r0, #1
 100d2d6:	9001      	str	r0, [sp, #4]
 100d2d8:	9207      	str	r2, [sp, #28]
 100d2da:	9005      	str	r0, [sp, #20]
 100d2dc:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
 100d2e0:	9302      	str	r3, [sp, #8]
 100d2e2:	2400      	movs	r4, #0
 100d2e4:	e670      	b.n	100cfc8 <_vfiprintf_r+0x2b4>
 100d2e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 100d2ea:	f898 2000 	ldrb.w	r2, [r8]
 100d2ee:	e583      	b.n	100cdf8 <_vfiprintf_r+0xe4>
 100d2f0:	f898 2000 	ldrb.w	r2, [r8]
 100d2f4:	2a6c      	cmp	r2, #108	; 0x6c
 100d2f6:	bf03      	ittte	eq
 100d2f8:	f898 2001 	ldrbeq.w	r2, [r8, #1]
 100d2fc:	f043 0320 	orreq.w	r3, r3, #32
 100d300:	f108 0801 	addeq.w	r8, r8, #1
 100d304:	f043 0310 	orrne.w	r3, r3, #16
 100d308:	e576      	b.n	100cdf8 <_vfiprintf_r+0xe4>
 100d30a:	bf00      	nop
 100d30c:	01022364 	.word	0x01022364
 100d310:	01022374 	.word	0x01022374
 100d314:	01022348 	.word	0x01022348
 100d318:	01022334 	.word	0x01022334
 100d31c:	9907      	ldr	r1, [sp, #28]
 100d31e:	680e      	ldr	r6, [r1, #0]
 100d320:	460a      	mov	r2, r1
 100d322:	2e00      	cmp	r6, #0
 100d324:	f102 0204 	add.w	r2, r2, #4
 100d328:	f6ff ae0f 	blt.w	100cf4a <_vfiprintf_r+0x236>
 100d32c:	9207      	str	r2, [sp, #28]
 100d32e:	f898 2000 	ldrb.w	r2, [r8]
 100d332:	e561      	b.n	100cdf8 <_vfiprintf_r+0xe4>
 100d334:	f898 2000 	ldrb.w	r2, [r8]
 100d338:	2001      	movs	r0, #1
 100d33a:	252b      	movs	r5, #43	; 0x2b
 100d33c:	e55c      	b.n	100cdf8 <_vfiprintf_r+0xe4>
 100d33e:	9907      	ldr	r1, [sp, #28]
 100d340:	9608      	str	r6, [sp, #32]
 100d342:	f8d1 b000 	ldr.w	fp, [r1]
 100d346:	f04f 0200 	mov.w	r2, #0
 100d34a:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
 100d34e:	1d0e      	adds	r6, r1, #4
 100d350:	f1bb 0f00 	cmp.w	fp, #0
 100d354:	f000 82e5 	beq.w	100d922 <_vfiprintf_r+0xc0e>
 100d358:	1c67      	adds	r7, r4, #1
 100d35a:	f000 82c4 	beq.w	100d8e6 <_vfiprintf_r+0xbd2>
 100d35e:	4622      	mov	r2, r4
 100d360:	2100      	movs	r1, #0
 100d362:	4658      	mov	r0, fp
 100d364:	9301      	str	r3, [sp, #4]
 100d366:	f7ff f8a3 	bl	100c4b0 <memchr>
 100d36a:	9b01      	ldr	r3, [sp, #4]
 100d36c:	2800      	cmp	r0, #0
 100d36e:	f000 82e5 	beq.w	100d93c <_vfiprintf_r+0xc28>
 100d372:	eba0 020b 	sub.w	r2, r0, fp
 100d376:	9205      	str	r2, [sp, #20]
 100d378:	9607      	str	r6, [sp, #28]
 100d37a:	9302      	str	r3, [sp, #8]
 100d37c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
 100d380:	2400      	movs	r4, #0
 100d382:	e619      	b.n	100cfb8 <_vfiprintf_r+0x2a4>
 100d384:	f898 2000 	ldrb.w	r2, [r8]
 100d388:	2a2a      	cmp	r2, #42	; 0x2a
 100d38a:	f108 0701 	add.w	r7, r8, #1
 100d38e:	f000 82e9 	beq.w	100d964 <_vfiprintf_r+0xc50>
 100d392:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 100d396:	2909      	cmp	r1, #9
 100d398:	46b8      	mov	r8, r7
 100d39a:	f04f 0400 	mov.w	r4, #0
 100d39e:	f63f ad2d 	bhi.w	100cdfc <_vfiprintf_r+0xe8>
 100d3a2:	f818 2b01 	ldrb.w	r2, [r8], #1
 100d3a6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 100d3aa:	eb01 0444 	add.w	r4, r1, r4, lsl #1
 100d3ae:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 100d3b2:	2909      	cmp	r1, #9
 100d3b4:	d9f5      	bls.n	100d3a2 <_vfiprintf_r+0x68e>
 100d3b6:	e521      	b.n	100cdfc <_vfiprintf_r+0xe8>
 100d3b8:	f043 0320 	orr.w	r3, r3, #32
 100d3bc:	f898 2000 	ldrb.w	r2, [r8]
 100d3c0:	e51a      	b.n	100cdf8 <_vfiprintf_r+0xe4>
 100d3c2:	9608      	str	r6, [sp, #32]
 100d3c4:	2800      	cmp	r0, #0
 100d3c6:	f040 82db 	bne.w	100d980 <_vfiprintf_r+0xc6c>
 100d3ca:	2a00      	cmp	r2, #0
 100d3cc:	f000 80e7 	beq.w	100d59e <_vfiprintf_r+0x88a>
 100d3d0:	2101      	movs	r1, #1
 100d3d2:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
 100d3d6:	f04f 0200 	mov.w	r2, #0
 100d3da:	9101      	str	r1, [sp, #4]
 100d3dc:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
 100d3e0:	9105      	str	r1, [sp, #20]
 100d3e2:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
 100d3e6:	e77b      	b.n	100d2e0 <_vfiprintf_r+0x5cc>
 100d3e8:	9a07      	ldr	r2, [sp, #28]
 100d3ea:	6813      	ldr	r3, [r2, #0]
 100d3ec:	3204      	adds	r2, #4
 100d3ee:	9207      	str	r2, [sp, #28]
 100d3f0:	9a03      	ldr	r2, [sp, #12]
 100d3f2:	601a      	str	r2, [r3, #0]
 100d3f4:	e4cb      	b.n	100cd8e <_vfiprintf_r+0x7a>
 100d3f6:	aa0f      	add	r2, sp, #60	; 0x3c
 100d3f8:	9904      	ldr	r1, [sp, #16]
 100d3fa:	4620      	mov	r0, r4
 100d3fc:	f7ff fc40 	bl	100cc80 <__sprint_r.part.0>
 100d400:	2800      	cmp	r0, #0
 100d402:	f040 8139 	bne.w	100d678 <_vfiprintf_r+0x964>
 100d406:	9910      	ldr	r1, [sp, #64]	; 0x40
 100d408:	9a11      	ldr	r2, [sp, #68]	; 0x44
 100d40a:	f101 0c01 	add.w	ip, r1, #1
 100d40e:	46ce      	mov	lr, r9
 100d410:	e5ff      	b.n	100d012 <_vfiprintf_r+0x2fe>
 100d412:	9910      	ldr	r1, [sp, #64]	; 0x40
 100d414:	9a11      	ldr	r2, [sp, #68]	; 0x44
 100d416:	1c48      	adds	r0, r1, #1
 100d418:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
 100d41c:	2d00      	cmp	r5, #0
 100d41e:	f43f ae22 	beq.w	100d066 <_vfiprintf_r+0x352>
 100d422:	3201      	adds	r2, #1
 100d424:	f10d 0537 	add.w	r5, sp, #55	; 0x37
 100d428:	2101      	movs	r1, #1
 100d42a:	2807      	cmp	r0, #7
 100d42c:	9211      	str	r2, [sp, #68]	; 0x44
 100d42e:	9010      	str	r0, [sp, #64]	; 0x40
 100d430:	f8ca 5000 	str.w	r5, [sl]
 100d434:	f8ca 1004 	str.w	r1, [sl, #4]
 100d438:	f340 8108 	ble.w	100d64c <_vfiprintf_r+0x938>
 100d43c:	2a00      	cmp	r2, #0
 100d43e:	f040 81bc 	bne.w	100d7ba <_vfiprintf_r+0xaa6>
 100d442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 100d444:	2b00      	cmp	r3, #0
 100d446:	f43f ae1f 	beq.w	100d088 <_vfiprintf_r+0x374>
 100d44a:	ab0e      	add	r3, sp, #56	; 0x38
 100d44c:	2202      	movs	r2, #2
 100d44e:	4608      	mov	r0, r1
 100d450:	931c      	str	r3, [sp, #112]	; 0x70
 100d452:	921d      	str	r2, [sp, #116]	; 0x74
 100d454:	46ca      	mov	sl, r9
 100d456:	4601      	mov	r1, r0
 100d458:	f10a 0a08 	add.w	sl, sl, #8
 100d45c:	3001      	adds	r0, #1
 100d45e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 100d460:	2b80      	cmp	r3, #128	; 0x80
 100d462:	f43f ae19 	beq.w	100d098 <_vfiprintf_r+0x384>
 100d466:	9b05      	ldr	r3, [sp, #20]
 100d468:	1ae4      	subs	r4, r4, r3
 100d46a:	2c00      	cmp	r4, #0
 100d46c:	dd2e      	ble.n	100d4cc <_vfiprintf_r+0x7b8>
 100d46e:	2c10      	cmp	r4, #16
 100d470:	4db3      	ldr	r5, [pc, #716]	; (100d740 <_vfiprintf_r+0xa2c>)
 100d472:	dd1e      	ble.n	100d4b2 <_vfiprintf_r+0x79e>
 100d474:	46d6      	mov	lr, sl
 100d476:	2610      	movs	r6, #16
 100d478:	9f06      	ldr	r7, [sp, #24]
 100d47a:	f8dd a010 	ldr.w	sl, [sp, #16]
 100d47e:	e006      	b.n	100d48e <_vfiprintf_r+0x77a>
 100d480:	1c88      	adds	r0, r1, #2
 100d482:	f10e 0e08 	add.w	lr, lr, #8
 100d486:	4619      	mov	r1, r3
 100d488:	3c10      	subs	r4, #16
 100d48a:	2c10      	cmp	r4, #16
 100d48c:	dd10      	ble.n	100d4b0 <_vfiprintf_r+0x79c>
 100d48e:	1c4b      	adds	r3, r1, #1
 100d490:	3210      	adds	r2, #16
 100d492:	2b07      	cmp	r3, #7
 100d494:	9211      	str	r2, [sp, #68]	; 0x44
 100d496:	e88e 0060 	stmia.w	lr, {r5, r6}
 100d49a:	9310      	str	r3, [sp, #64]	; 0x40
 100d49c:	ddf0      	ble.n	100d480 <_vfiprintf_r+0x76c>
 100d49e:	2a00      	cmp	r2, #0
 100d4a0:	d165      	bne.n	100d56e <_vfiprintf_r+0x85a>
 100d4a2:	3c10      	subs	r4, #16
 100d4a4:	2c10      	cmp	r4, #16
 100d4a6:	f04f 0001 	mov.w	r0, #1
 100d4aa:	4611      	mov	r1, r2
 100d4ac:	46ce      	mov	lr, r9
 100d4ae:	dcee      	bgt.n	100d48e <_vfiprintf_r+0x77a>
 100d4b0:	46f2      	mov	sl, lr
 100d4b2:	4422      	add	r2, r4
 100d4b4:	2807      	cmp	r0, #7
 100d4b6:	9211      	str	r2, [sp, #68]	; 0x44
 100d4b8:	f8ca 5000 	str.w	r5, [sl]
 100d4bc:	f8ca 4004 	str.w	r4, [sl, #4]
 100d4c0:	9010      	str	r0, [sp, #64]	; 0x40
 100d4c2:	f300 8085 	bgt.w	100d5d0 <_vfiprintf_r+0x8bc>
 100d4c6:	f10a 0a08 	add.w	sl, sl, #8
 100d4ca:	3001      	adds	r0, #1
 100d4cc:	9905      	ldr	r1, [sp, #20]
 100d4ce:	f8ca b000 	str.w	fp, [sl]
 100d4d2:	440a      	add	r2, r1
 100d4d4:	2807      	cmp	r0, #7
 100d4d6:	9211      	str	r2, [sp, #68]	; 0x44
 100d4d8:	f8ca 1004 	str.w	r1, [sl, #4]
 100d4dc:	9010      	str	r0, [sp, #64]	; 0x40
 100d4de:	f340 8082 	ble.w	100d5e6 <_vfiprintf_r+0x8d2>
 100d4e2:	2a00      	cmp	r2, #0
 100d4e4:	f040 8118 	bne.w	100d718 <_vfiprintf_r+0xa04>
 100d4e8:	9b02      	ldr	r3, [sp, #8]
 100d4ea:	9210      	str	r2, [sp, #64]	; 0x40
 100d4ec:	0758      	lsls	r0, r3, #29
 100d4ee:	d535      	bpl.n	100d55c <_vfiprintf_r+0x848>
 100d4f0:	9b08      	ldr	r3, [sp, #32]
 100d4f2:	9901      	ldr	r1, [sp, #4]
 100d4f4:	1a5c      	subs	r4, r3, r1
 100d4f6:	2c00      	cmp	r4, #0
 100d4f8:	f340 80e7 	ble.w	100d6ca <_vfiprintf_r+0x9b6>
 100d4fc:	46ca      	mov	sl, r9
 100d4fe:	2c10      	cmp	r4, #16
 100d500:	f340 8218 	ble.w	100d934 <_vfiprintf_r+0xc20>
 100d504:	9910      	ldr	r1, [sp, #64]	; 0x40
 100d506:	4e8f      	ldr	r6, [pc, #572]	; (100d744 <_vfiprintf_r+0xa30>)
 100d508:	9f06      	ldr	r7, [sp, #24]
 100d50a:	f8dd b010 	ldr.w	fp, [sp, #16]
 100d50e:	2510      	movs	r5, #16
 100d510:	e006      	b.n	100d520 <_vfiprintf_r+0x80c>
 100d512:	1c88      	adds	r0, r1, #2
 100d514:	f10a 0a08 	add.w	sl, sl, #8
 100d518:	4619      	mov	r1, r3
 100d51a:	3c10      	subs	r4, #16
 100d51c:	2c10      	cmp	r4, #16
 100d51e:	dd11      	ble.n	100d544 <_vfiprintf_r+0x830>
 100d520:	1c4b      	adds	r3, r1, #1
 100d522:	3210      	adds	r2, #16
 100d524:	2b07      	cmp	r3, #7
 100d526:	9211      	str	r2, [sp, #68]	; 0x44
 100d528:	f8ca 6000 	str.w	r6, [sl]
 100d52c:	f8ca 5004 	str.w	r5, [sl, #4]
 100d530:	9310      	str	r3, [sp, #64]	; 0x40
 100d532:	ddee      	ble.n	100d512 <_vfiprintf_r+0x7fe>
 100d534:	bb42      	cbnz	r2, 100d588 <_vfiprintf_r+0x874>
 100d536:	3c10      	subs	r4, #16
 100d538:	2c10      	cmp	r4, #16
 100d53a:	f04f 0001 	mov.w	r0, #1
 100d53e:	4611      	mov	r1, r2
 100d540:	46ca      	mov	sl, r9
 100d542:	dced      	bgt.n	100d520 <_vfiprintf_r+0x80c>
 100d544:	4422      	add	r2, r4
 100d546:	2807      	cmp	r0, #7
 100d548:	9211      	str	r2, [sp, #68]	; 0x44
 100d54a:	f8ca 6000 	str.w	r6, [sl]
 100d54e:	f8ca 4004 	str.w	r4, [sl, #4]
 100d552:	9010      	str	r0, [sp, #64]	; 0x40
 100d554:	dd51      	ble.n	100d5fa <_vfiprintf_r+0x8e6>
 100d556:	2a00      	cmp	r2, #0
 100d558:	f040 819b 	bne.w	100d892 <_vfiprintf_r+0xb7e>
 100d55c:	9b03      	ldr	r3, [sp, #12]
 100d55e:	9a08      	ldr	r2, [sp, #32]
 100d560:	9901      	ldr	r1, [sp, #4]
 100d562:	428a      	cmp	r2, r1
 100d564:	bfac      	ite	ge
 100d566:	189b      	addge	r3, r3, r2
 100d568:	185b      	addlt	r3, r3, r1
 100d56a:	9303      	str	r3, [sp, #12]
 100d56c:	e04e      	b.n	100d60c <_vfiprintf_r+0x8f8>
 100d56e:	aa0f      	add	r2, sp, #60	; 0x3c
 100d570:	4651      	mov	r1, sl
 100d572:	4638      	mov	r0, r7
 100d574:	f7ff fb84 	bl	100cc80 <__sprint_r.part.0>
 100d578:	2800      	cmp	r0, #0
 100d57a:	f040 813f 	bne.w	100d7fc <_vfiprintf_r+0xae8>
 100d57e:	9910      	ldr	r1, [sp, #64]	; 0x40
 100d580:	9a11      	ldr	r2, [sp, #68]	; 0x44
 100d582:	1c48      	adds	r0, r1, #1
 100d584:	46ce      	mov	lr, r9
 100d586:	e77f      	b.n	100d488 <_vfiprintf_r+0x774>
 100d588:	aa0f      	add	r2, sp, #60	; 0x3c
 100d58a:	4659      	mov	r1, fp
 100d58c:	4638      	mov	r0, r7
 100d58e:	f7ff fb77 	bl	100cc80 <__sprint_r.part.0>
 100d592:	b960      	cbnz	r0, 100d5ae <_vfiprintf_r+0x89a>
 100d594:	9910      	ldr	r1, [sp, #64]	; 0x40
 100d596:	9a11      	ldr	r2, [sp, #68]	; 0x44
 100d598:	1c48      	adds	r0, r1, #1
 100d59a:	46ca      	mov	sl, r9
 100d59c:	e7bd      	b.n	100d51a <_vfiprintf_r+0x806>
 100d59e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 100d5a0:	f8dd b010 	ldr.w	fp, [sp, #16]
 100d5a4:	2b00      	cmp	r3, #0
 100d5a6:	f040 81d4 	bne.w	100d952 <_vfiprintf_r+0xc3e>
 100d5aa:	2300      	movs	r3, #0
 100d5ac:	9310      	str	r3, [sp, #64]	; 0x40
 100d5ae:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
 100d5b2:	f013 0f01 	tst.w	r3, #1
 100d5b6:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 100d5ba:	d102      	bne.n	100d5c2 <_vfiprintf_r+0x8ae>
 100d5bc:	059a      	lsls	r2, r3, #22
 100d5be:	f140 80de 	bpl.w	100d77e <_vfiprintf_r+0xa6a>
 100d5c2:	065b      	lsls	r3, r3, #25
 100d5c4:	f53f acb2 	bmi.w	100cf2c <_vfiprintf_r+0x218>
 100d5c8:	9803      	ldr	r0, [sp, #12]
 100d5ca:	b02d      	add	sp, #180	; 0xb4
 100d5cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100d5d0:	2a00      	cmp	r2, #0
 100d5d2:	f040 8106 	bne.w	100d7e2 <_vfiprintf_r+0xace>
 100d5d6:	9a05      	ldr	r2, [sp, #20]
 100d5d8:	921d      	str	r2, [sp, #116]	; 0x74
 100d5da:	2301      	movs	r3, #1
 100d5dc:	9211      	str	r2, [sp, #68]	; 0x44
 100d5de:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
 100d5e2:	9310      	str	r3, [sp, #64]	; 0x40
 100d5e4:	46ca      	mov	sl, r9
 100d5e6:	f10a 0a08 	add.w	sl, sl, #8
 100d5ea:	9b02      	ldr	r3, [sp, #8]
 100d5ec:	0759      	lsls	r1, r3, #29
 100d5ee:	d504      	bpl.n	100d5fa <_vfiprintf_r+0x8e6>
 100d5f0:	9b08      	ldr	r3, [sp, #32]
 100d5f2:	9901      	ldr	r1, [sp, #4]
 100d5f4:	1a5c      	subs	r4, r3, r1
 100d5f6:	2c00      	cmp	r4, #0
 100d5f8:	dc81      	bgt.n	100d4fe <_vfiprintf_r+0x7ea>
 100d5fa:	9b03      	ldr	r3, [sp, #12]
 100d5fc:	9908      	ldr	r1, [sp, #32]
 100d5fe:	9801      	ldr	r0, [sp, #4]
 100d600:	4281      	cmp	r1, r0
 100d602:	bfac      	ite	ge
 100d604:	185b      	addge	r3, r3, r1
 100d606:	181b      	addlt	r3, r3, r0
 100d608:	9303      	str	r3, [sp, #12]
 100d60a:	bb72      	cbnz	r2, 100d66a <_vfiprintf_r+0x956>
 100d60c:	2300      	movs	r3, #0
 100d60e:	9310      	str	r3, [sp, #64]	; 0x40
 100d610:	46ca      	mov	sl, r9
 100d612:	f7ff bbbc 	b.w	100cd8e <_vfiprintf_r+0x7a>
 100d616:	aa0f      	add	r2, sp, #60	; 0x3c
 100d618:	9904      	ldr	r1, [sp, #16]
 100d61a:	4620      	mov	r0, r4
 100d61c:	f7ff fb30 	bl	100cc80 <__sprint_r.part.0>
 100d620:	bb50      	cbnz	r0, 100d678 <_vfiprintf_r+0x964>
 100d622:	9910      	ldr	r1, [sp, #64]	; 0x40
 100d624:	9a11      	ldr	r2, [sp, #68]	; 0x44
 100d626:	f101 0e01 	add.w	lr, r1, #1
 100d62a:	46cc      	mov	ip, r9
 100d62c:	e548      	b.n	100d0c0 <_vfiprintf_r+0x3ac>
 100d62e:	2a00      	cmp	r2, #0
 100d630:	f040 8140 	bne.w	100d8b4 <_vfiprintf_r+0xba0>
 100d634:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
 100d638:	2900      	cmp	r1, #0
 100d63a:	f000 811b 	beq.w	100d874 <_vfiprintf_r+0xb60>
 100d63e:	2201      	movs	r2, #1
 100d640:	f10d 0137 	add.w	r1, sp, #55	; 0x37
 100d644:	4610      	mov	r0, r2
 100d646:	921d      	str	r2, [sp, #116]	; 0x74
 100d648:	911c      	str	r1, [sp, #112]	; 0x70
 100d64a:	46ca      	mov	sl, r9
 100d64c:	4601      	mov	r1, r0
 100d64e:	f10a 0a08 	add.w	sl, sl, #8
 100d652:	3001      	adds	r0, #1
 100d654:	e507      	b.n	100d066 <_vfiprintf_r+0x352>
 100d656:	9b02      	ldr	r3, [sp, #8]
 100d658:	2a01      	cmp	r2, #1
 100d65a:	f000 8098 	beq.w	100d78e <_vfiprintf_r+0xa7a>
 100d65e:	2a02      	cmp	r2, #2
 100d660:	d10d      	bne.n	100d67e <_vfiprintf_r+0x96a>
 100d662:	9302      	str	r3, [sp, #8]
 100d664:	2600      	movs	r6, #0
 100d666:	2700      	movs	r7, #0
 100d668:	e5b0      	b.n	100d1cc <_vfiprintf_r+0x4b8>
 100d66a:	aa0f      	add	r2, sp, #60	; 0x3c
 100d66c:	9904      	ldr	r1, [sp, #16]
 100d66e:	9806      	ldr	r0, [sp, #24]
 100d670:	f7ff fb06 	bl	100cc80 <__sprint_r.part.0>
 100d674:	2800      	cmp	r0, #0
 100d676:	d0c9      	beq.n	100d60c <_vfiprintf_r+0x8f8>
 100d678:	f8dd b010 	ldr.w	fp, [sp, #16]
 100d67c:	e797      	b.n	100d5ae <_vfiprintf_r+0x89a>
 100d67e:	9302      	str	r3, [sp, #8]
 100d680:	2600      	movs	r6, #0
 100d682:	2700      	movs	r7, #0
 100d684:	4649      	mov	r1, r9
 100d686:	e000      	b.n	100d68a <_vfiprintf_r+0x976>
 100d688:	4659      	mov	r1, fp
 100d68a:	08f2      	lsrs	r2, r6, #3
 100d68c:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 100d690:	08f8      	lsrs	r0, r7, #3
 100d692:	f006 0307 	and.w	r3, r6, #7
 100d696:	4607      	mov	r7, r0
 100d698:	4616      	mov	r6, r2
 100d69a:	3330      	adds	r3, #48	; 0x30
 100d69c:	ea56 0207 	orrs.w	r2, r6, r7
 100d6a0:	f801 3c01 	strb.w	r3, [r1, #-1]
 100d6a4:	f101 3bff 	add.w	fp, r1, #4294967295
 100d6a8:	d1ee      	bne.n	100d688 <_vfiprintf_r+0x974>
 100d6aa:	9a02      	ldr	r2, [sp, #8]
 100d6ac:	07d6      	lsls	r6, r2, #31
 100d6ae:	f57f ad9d 	bpl.w	100d1ec <_vfiprintf_r+0x4d8>
 100d6b2:	2b30      	cmp	r3, #48	; 0x30
 100d6b4:	f43f ad9a 	beq.w	100d1ec <_vfiprintf_r+0x4d8>
 100d6b8:	3902      	subs	r1, #2
 100d6ba:	2330      	movs	r3, #48	; 0x30
 100d6bc:	f80b 3c01 	strb.w	r3, [fp, #-1]
 100d6c0:	eba9 0301 	sub.w	r3, r9, r1
 100d6c4:	9305      	str	r3, [sp, #20]
 100d6c6:	468b      	mov	fp, r1
 100d6c8:	e476      	b.n	100cfb8 <_vfiprintf_r+0x2a4>
 100d6ca:	9b03      	ldr	r3, [sp, #12]
 100d6cc:	9a08      	ldr	r2, [sp, #32]
 100d6ce:	428a      	cmp	r2, r1
 100d6d0:	bfac      	ite	ge
 100d6d2:	189b      	addge	r3, r3, r2
 100d6d4:	185b      	addlt	r3, r3, r1
 100d6d6:	9303      	str	r3, [sp, #12]
 100d6d8:	e798      	b.n	100d60c <_vfiprintf_r+0x8f8>
 100d6da:	2202      	movs	r2, #2
 100d6dc:	e44d      	b.n	100cf7a <_vfiprintf_r+0x266>
 100d6de:	2f00      	cmp	r7, #0
 100d6e0:	bf08      	it	eq
 100d6e2:	2e0a      	cmpeq	r6, #10
 100d6e4:	d352      	bcc.n	100d78c <_vfiprintf_r+0xa78>
 100d6e6:	46cb      	mov	fp, r9
 100d6e8:	4630      	mov	r0, r6
 100d6ea:	4639      	mov	r1, r7
 100d6ec:	220a      	movs	r2, #10
 100d6ee:	2300      	movs	r3, #0
 100d6f0:	f7fd ff8c 	bl	100b60c <__aeabi_uldivmod>
 100d6f4:	3230      	adds	r2, #48	; 0x30
 100d6f6:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 100d6fa:	4630      	mov	r0, r6
 100d6fc:	4639      	mov	r1, r7
 100d6fe:	2300      	movs	r3, #0
 100d700:	220a      	movs	r2, #10
 100d702:	f7fd ff83 	bl	100b60c <__aeabi_uldivmod>
 100d706:	4606      	mov	r6, r0
 100d708:	460f      	mov	r7, r1
 100d70a:	ea56 0307 	orrs.w	r3, r6, r7
 100d70e:	d1eb      	bne.n	100d6e8 <_vfiprintf_r+0x9d4>
 100d710:	e56c      	b.n	100d1ec <_vfiprintf_r+0x4d8>
 100d712:	9405      	str	r4, [sp, #20]
 100d714:	46cb      	mov	fp, r9
 100d716:	e44f      	b.n	100cfb8 <_vfiprintf_r+0x2a4>
 100d718:	aa0f      	add	r2, sp, #60	; 0x3c
 100d71a:	9904      	ldr	r1, [sp, #16]
 100d71c:	9806      	ldr	r0, [sp, #24]
 100d71e:	f7ff faaf 	bl	100cc80 <__sprint_r.part.0>
 100d722:	2800      	cmp	r0, #0
 100d724:	d1a8      	bne.n	100d678 <_vfiprintf_r+0x964>
 100d726:	9a11      	ldr	r2, [sp, #68]	; 0x44
 100d728:	46ca      	mov	sl, r9
 100d72a:	e75e      	b.n	100d5ea <_vfiprintf_r+0x8d6>
 100d72c:	aa0f      	add	r2, sp, #60	; 0x3c
 100d72e:	9904      	ldr	r1, [sp, #16]
 100d730:	9806      	ldr	r0, [sp, #24]
 100d732:	f7ff faa5 	bl	100cc80 <__sprint_r.part.0>
 100d736:	2800      	cmp	r0, #0
 100d738:	d19e      	bne.n	100d678 <_vfiprintf_r+0x964>
 100d73a:	46ca      	mov	sl, r9
 100d73c:	f7ff bbc0 	b.w	100cec0 <_vfiprintf_r+0x1ac>
 100d740:	01022374 	.word	0x01022374
 100d744:	01022364 	.word	0x01022364
 100d748:	3104      	adds	r1, #4
 100d74a:	6816      	ldr	r6, [r2, #0]
 100d74c:	9107      	str	r1, [sp, #28]
 100d74e:	2201      	movs	r2, #1
 100d750:	2700      	movs	r7, #0
 100d752:	e412      	b.n	100cf7a <_vfiprintf_r+0x266>
 100d754:	9807      	ldr	r0, [sp, #28]
 100d756:	4601      	mov	r1, r0
 100d758:	3104      	adds	r1, #4
 100d75a:	6806      	ldr	r6, [r0, #0]
 100d75c:	9107      	str	r1, [sp, #28]
 100d75e:	2700      	movs	r7, #0
 100d760:	e40b      	b.n	100cf7a <_vfiprintf_r+0x266>
 100d762:	680e      	ldr	r6, [r1, #0]
 100d764:	3104      	adds	r1, #4
 100d766:	9107      	str	r1, [sp, #28]
 100d768:	2700      	movs	r7, #0
 100d76a:	e591      	b.n	100d290 <_vfiprintf_r+0x57c>
 100d76c:	9907      	ldr	r1, [sp, #28]
 100d76e:	680e      	ldr	r6, [r1, #0]
 100d770:	460a      	mov	r2, r1
 100d772:	17f7      	asrs	r7, r6, #31
 100d774:	3204      	adds	r2, #4
 100d776:	9207      	str	r2, [sp, #28]
 100d778:	4630      	mov	r0, r6
 100d77a:	4639      	mov	r1, r7
 100d77c:	e50f      	b.n	100d19e <_vfiprintf_r+0x48a>
 100d77e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
 100d782:	f7fe fbbf 	bl	100bf04 <__retarget_lock_release_recursive>
 100d786:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 100d78a:	e71a      	b.n	100d5c2 <_vfiprintf_r+0x8ae>
 100d78c:	9b02      	ldr	r3, [sp, #8]
 100d78e:	9302      	str	r3, [sp, #8]
 100d790:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
 100d794:	3630      	adds	r6, #48	; 0x30
 100d796:	2301      	movs	r3, #1
 100d798:	f80b 6d41 	strb.w	r6, [fp, #-65]!
 100d79c:	9305      	str	r3, [sp, #20]
 100d79e:	e40b      	b.n	100cfb8 <_vfiprintf_r+0x2a4>
 100d7a0:	aa0f      	add	r2, sp, #60	; 0x3c
 100d7a2:	9904      	ldr	r1, [sp, #16]
 100d7a4:	9806      	ldr	r0, [sp, #24]
 100d7a6:	f7ff fa6b 	bl	100cc80 <__sprint_r.part.0>
 100d7aa:	2800      	cmp	r0, #0
 100d7ac:	f47f af64 	bne.w	100d678 <_vfiprintf_r+0x964>
 100d7b0:	9910      	ldr	r1, [sp, #64]	; 0x40
 100d7b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 100d7b4:	1c48      	adds	r0, r1, #1
 100d7b6:	46ca      	mov	sl, r9
 100d7b8:	e651      	b.n	100d45e <_vfiprintf_r+0x74a>
 100d7ba:	aa0f      	add	r2, sp, #60	; 0x3c
 100d7bc:	9904      	ldr	r1, [sp, #16]
 100d7be:	9806      	ldr	r0, [sp, #24]
 100d7c0:	f7ff fa5e 	bl	100cc80 <__sprint_r.part.0>
 100d7c4:	2800      	cmp	r0, #0
 100d7c6:	f47f af57 	bne.w	100d678 <_vfiprintf_r+0x964>
 100d7ca:	9910      	ldr	r1, [sp, #64]	; 0x40
 100d7cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 100d7ce:	1c48      	adds	r0, r1, #1
 100d7d0:	46ca      	mov	sl, r9
 100d7d2:	e448      	b.n	100d066 <_vfiprintf_r+0x352>
 100d7d4:	2a00      	cmp	r2, #0
 100d7d6:	f040 8091 	bne.w	100d8fc <_vfiprintf_r+0xbe8>
 100d7da:	2001      	movs	r0, #1
 100d7dc:	4611      	mov	r1, r2
 100d7de:	46ca      	mov	sl, r9
 100d7e0:	e641      	b.n	100d466 <_vfiprintf_r+0x752>
 100d7e2:	aa0f      	add	r2, sp, #60	; 0x3c
 100d7e4:	9904      	ldr	r1, [sp, #16]
 100d7e6:	9806      	ldr	r0, [sp, #24]
 100d7e8:	f7ff fa4a 	bl	100cc80 <__sprint_r.part.0>
 100d7ec:	2800      	cmp	r0, #0
 100d7ee:	f47f af43 	bne.w	100d678 <_vfiprintf_r+0x964>
 100d7f2:	9810      	ldr	r0, [sp, #64]	; 0x40
 100d7f4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 100d7f6:	3001      	adds	r0, #1
 100d7f8:	46ca      	mov	sl, r9
 100d7fa:	e667      	b.n	100d4cc <_vfiprintf_r+0x7b8>
 100d7fc:	46d3      	mov	fp, sl
 100d7fe:	e6d6      	b.n	100d5ae <_vfiprintf_r+0x89a>
 100d800:	9e07      	ldr	r6, [sp, #28]
 100d802:	3607      	adds	r6, #7
 100d804:	f026 0207 	bic.w	r2, r6, #7
 100d808:	f102 0108 	add.w	r1, r2, #8
 100d80c:	e9d2 6700 	ldrd	r6, r7, [r2]
 100d810:	9107      	str	r1, [sp, #28]
 100d812:	2201      	movs	r2, #1
 100d814:	f7ff bbb1 	b.w	100cf7a <_vfiprintf_r+0x266>
 100d818:	9e07      	ldr	r6, [sp, #28]
 100d81a:	3607      	adds	r6, #7
 100d81c:	f026 0607 	bic.w	r6, r6, #7
 100d820:	e9d6 0100 	ldrd	r0, r1, [r6]
 100d824:	f106 0208 	add.w	r2, r6, #8
 100d828:	9207      	str	r2, [sp, #28]
 100d82a:	4606      	mov	r6, r0
 100d82c:	460f      	mov	r7, r1
 100d82e:	e4b6      	b.n	100d19e <_vfiprintf_r+0x48a>
 100d830:	9e07      	ldr	r6, [sp, #28]
 100d832:	3607      	adds	r6, #7
 100d834:	f026 0207 	bic.w	r2, r6, #7
 100d838:	f102 0108 	add.w	r1, r2, #8
 100d83c:	e9d2 6700 	ldrd	r6, r7, [r2]
 100d840:	9107      	str	r1, [sp, #28]
 100d842:	2200      	movs	r2, #0
 100d844:	f7ff bb99 	b.w	100cf7a <_vfiprintf_r+0x266>
 100d848:	9e07      	ldr	r6, [sp, #28]
 100d84a:	3607      	adds	r6, #7
 100d84c:	f026 0107 	bic.w	r1, r6, #7
 100d850:	f101 0008 	add.w	r0, r1, #8
 100d854:	9007      	str	r0, [sp, #28]
 100d856:	e9d1 6700 	ldrd	r6, r7, [r1]
 100d85a:	e519      	b.n	100d290 <_vfiprintf_r+0x57c>
 100d85c:	46cb      	mov	fp, r9
 100d85e:	f7ff bbab 	b.w	100cfb8 <_vfiprintf_r+0x2a4>
 100d862:	252d      	movs	r5, #45	; 0x2d
 100d864:	4276      	negs	r6, r6
 100d866:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 100d86a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
 100d86e:	2201      	movs	r2, #1
 100d870:	f7ff bb88 	b.w	100cf84 <_vfiprintf_r+0x270>
 100d874:	9b09      	ldr	r3, [sp, #36]	; 0x24
 100d876:	b9b3      	cbnz	r3, 100d8a6 <_vfiprintf_r+0xb92>
 100d878:	4611      	mov	r1, r2
 100d87a:	2001      	movs	r0, #1
 100d87c:	46ca      	mov	sl, r9
 100d87e:	e5f2      	b.n	100d466 <_vfiprintf_r+0x752>
 100d880:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
 100d884:	f7fe fb3e 	bl	100bf04 <__retarget_lock_release_recursive>
 100d888:	f04f 33ff 	mov.w	r3, #4294967295
 100d88c:	9303      	str	r3, [sp, #12]
 100d88e:	f7ff bb50 	b.w	100cf32 <_vfiprintf_r+0x21e>
 100d892:	aa0f      	add	r2, sp, #60	; 0x3c
 100d894:	9904      	ldr	r1, [sp, #16]
 100d896:	9806      	ldr	r0, [sp, #24]
 100d898:	f7ff f9f2 	bl	100cc80 <__sprint_r.part.0>
 100d89c:	2800      	cmp	r0, #0
 100d89e:	f47f aeeb 	bne.w	100d678 <_vfiprintf_r+0x964>
 100d8a2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 100d8a4:	e6a9      	b.n	100d5fa <_vfiprintf_r+0x8e6>
 100d8a6:	ab0e      	add	r3, sp, #56	; 0x38
 100d8a8:	2202      	movs	r2, #2
 100d8aa:	931c      	str	r3, [sp, #112]	; 0x70
 100d8ac:	921d      	str	r2, [sp, #116]	; 0x74
 100d8ae:	2001      	movs	r0, #1
 100d8b0:	46ca      	mov	sl, r9
 100d8b2:	e5d0      	b.n	100d456 <_vfiprintf_r+0x742>
 100d8b4:	aa0f      	add	r2, sp, #60	; 0x3c
 100d8b6:	9904      	ldr	r1, [sp, #16]
 100d8b8:	9806      	ldr	r0, [sp, #24]
 100d8ba:	f7ff f9e1 	bl	100cc80 <__sprint_r.part.0>
 100d8be:	2800      	cmp	r0, #0
 100d8c0:	f47f aeda 	bne.w	100d678 <_vfiprintf_r+0x964>
 100d8c4:	9910      	ldr	r1, [sp, #64]	; 0x40
 100d8c6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 100d8c8:	1c48      	adds	r0, r1, #1
 100d8ca:	46ca      	mov	sl, r9
 100d8cc:	e5a4      	b.n	100d418 <_vfiprintf_r+0x704>
 100d8ce:	9a07      	ldr	r2, [sp, #28]
 100d8d0:	9903      	ldr	r1, [sp, #12]
 100d8d2:	6813      	ldr	r3, [r2, #0]
 100d8d4:	17cd      	asrs	r5, r1, #31
 100d8d6:	4608      	mov	r0, r1
 100d8d8:	3204      	adds	r2, #4
 100d8da:	4629      	mov	r1, r5
 100d8dc:	9207      	str	r2, [sp, #28]
 100d8de:	e9c3 0100 	strd	r0, r1, [r3]
 100d8e2:	f7ff ba54 	b.w	100cd8e <_vfiprintf_r+0x7a>
 100d8e6:	4658      	mov	r0, fp
 100d8e8:	9607      	str	r6, [sp, #28]
 100d8ea:	9302      	str	r3, [sp, #8]
 100d8ec:	f7ff f928 	bl	100cb40 <strlen>
 100d8f0:	2400      	movs	r4, #0
 100d8f2:	9005      	str	r0, [sp, #20]
 100d8f4:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
 100d8f8:	f7ff bb5e 	b.w	100cfb8 <_vfiprintf_r+0x2a4>
 100d8fc:	aa0f      	add	r2, sp, #60	; 0x3c
 100d8fe:	9904      	ldr	r1, [sp, #16]
 100d900:	9806      	ldr	r0, [sp, #24]
 100d902:	f7ff f9bd 	bl	100cc80 <__sprint_r.part.0>
 100d906:	2800      	cmp	r0, #0
 100d908:	f47f aeb6 	bne.w	100d678 <_vfiprintf_r+0x964>
 100d90c:	9910      	ldr	r1, [sp, #64]	; 0x40
 100d90e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 100d910:	1c48      	adds	r0, r1, #1
 100d912:	46ca      	mov	sl, r9
 100d914:	e5a7      	b.n	100d466 <_vfiprintf_r+0x752>
 100d916:	9910      	ldr	r1, [sp, #64]	; 0x40
 100d918:	9a11      	ldr	r2, [sp, #68]	; 0x44
 100d91a:	4e20      	ldr	r6, [pc, #128]	; (100d99c <_vfiprintf_r+0xc88>)
 100d91c:	3101      	adds	r1, #1
 100d91e:	f7ff bb90 	b.w	100d042 <_vfiprintf_r+0x32e>
 100d922:	2c06      	cmp	r4, #6
 100d924:	bf28      	it	cs
 100d926:	2406      	movcs	r4, #6
 100d928:	9405      	str	r4, [sp, #20]
 100d92a:	9607      	str	r6, [sp, #28]
 100d92c:	9401      	str	r4, [sp, #4]
 100d92e:	f8df b070 	ldr.w	fp, [pc, #112]	; 100d9a0 <_vfiprintf_r+0xc8c>
 100d932:	e4d5      	b.n	100d2e0 <_vfiprintf_r+0x5cc>
 100d934:	9810      	ldr	r0, [sp, #64]	; 0x40
 100d936:	4e19      	ldr	r6, [pc, #100]	; (100d99c <_vfiprintf_r+0xc88>)
 100d938:	3001      	adds	r0, #1
 100d93a:	e603      	b.n	100d544 <_vfiprintf_r+0x830>
 100d93c:	9405      	str	r4, [sp, #20]
 100d93e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
 100d942:	9607      	str	r6, [sp, #28]
 100d944:	9302      	str	r3, [sp, #8]
 100d946:	4604      	mov	r4, r0
 100d948:	f7ff bb36 	b.w	100cfb8 <_vfiprintf_r+0x2a4>
 100d94c:	4686      	mov	lr, r0
 100d94e:	f7ff bbce 	b.w	100d0ee <_vfiprintf_r+0x3da>
 100d952:	9806      	ldr	r0, [sp, #24]
 100d954:	aa0f      	add	r2, sp, #60	; 0x3c
 100d956:	4659      	mov	r1, fp
 100d958:	f7ff f992 	bl	100cc80 <__sprint_r.part.0>
 100d95c:	2800      	cmp	r0, #0
 100d95e:	f43f ae24 	beq.w	100d5aa <_vfiprintf_r+0x896>
 100d962:	e624      	b.n	100d5ae <_vfiprintf_r+0x89a>
 100d964:	9907      	ldr	r1, [sp, #28]
 100d966:	f898 2001 	ldrb.w	r2, [r8, #1]
 100d96a:	680c      	ldr	r4, [r1, #0]
 100d96c:	3104      	adds	r1, #4
 100d96e:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 100d972:	46b8      	mov	r8, r7
 100d974:	9107      	str	r1, [sp, #28]
 100d976:	f7ff ba3f 	b.w	100cdf8 <_vfiprintf_r+0xe4>
 100d97a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
 100d97e:	e43c      	b.n	100d1fa <_vfiprintf_r+0x4e6>
 100d980:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
 100d984:	e521      	b.n	100d3ca <_vfiprintf_r+0x6b6>
 100d986:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
 100d98a:	f7ff bbf4 	b.w	100d176 <_vfiprintf_r+0x462>
 100d98e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
 100d992:	e491      	b.n	100d2b8 <_vfiprintf_r+0x5a4>
 100d994:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
 100d998:	e469      	b.n	100d26e <_vfiprintf_r+0x55a>
 100d99a:	bf00      	nop
 100d99c:	01022364 	.word	0x01022364
 100d9a0:	0102235c 	.word	0x0102235c

0100d9a4 <__sbprintf>:
 100d9a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 100d9a8:	460c      	mov	r4, r1
 100d9aa:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 100d9ae:	8989      	ldrh	r1, [r1, #12]
 100d9b0:	6e66      	ldr	r6, [r4, #100]	; 0x64
 100d9b2:	89e5      	ldrh	r5, [r4, #14]
 100d9b4:	9619      	str	r6, [sp, #100]	; 0x64
 100d9b6:	f021 0102 	bic.w	r1, r1, #2
 100d9ba:	4606      	mov	r6, r0
 100d9bc:	69e0      	ldr	r0, [r4, #28]
 100d9be:	f8ad 100c 	strh.w	r1, [sp, #12]
 100d9c2:	4617      	mov	r7, r2
 100d9c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 100d9c8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 100d9ca:	f8ad 500e 	strh.w	r5, [sp, #14]
 100d9ce:	4698      	mov	r8, r3
 100d9d0:	ad1a      	add	r5, sp, #104	; 0x68
 100d9d2:	2300      	movs	r3, #0
 100d9d4:	9007      	str	r0, [sp, #28]
 100d9d6:	a816      	add	r0, sp, #88	; 0x58
 100d9d8:	9209      	str	r2, [sp, #36]	; 0x24
 100d9da:	9306      	str	r3, [sp, #24]
 100d9dc:	9500      	str	r5, [sp, #0]
 100d9de:	9504      	str	r5, [sp, #16]
 100d9e0:	9102      	str	r1, [sp, #8]
 100d9e2:	9105      	str	r1, [sp, #20]
 100d9e4:	f7fe fa88 	bl	100bef8 <__retarget_lock_init_recursive>
 100d9e8:	4643      	mov	r3, r8
 100d9ea:	463a      	mov	r2, r7
 100d9ec:	4669      	mov	r1, sp
 100d9ee:	4630      	mov	r0, r6
 100d9f0:	f7ff f990 	bl	100cd14 <_vfiprintf_r>
 100d9f4:	1e05      	subs	r5, r0, #0
 100d9f6:	db07      	blt.n	100da08 <__sbprintf+0x64>
 100d9f8:	4630      	mov	r0, r6
 100d9fa:	4669      	mov	r1, sp
 100d9fc:	f7fe f82e 	bl	100ba5c <_fflush_r>
 100da00:	2800      	cmp	r0, #0
 100da02:	bf18      	it	ne
 100da04:	f04f 35ff 	movne.w	r5, #4294967295
 100da08:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 100da0c:	065b      	lsls	r3, r3, #25
 100da0e:	d503      	bpl.n	100da18 <__sbprintf+0x74>
 100da10:	89a3      	ldrh	r3, [r4, #12]
 100da12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 100da16:	81a3      	strh	r3, [r4, #12]
 100da18:	9816      	ldr	r0, [sp, #88]	; 0x58
 100da1a:	f7fe fa6f 	bl	100befc <__retarget_lock_close_recursive>
 100da1e:	4628      	mov	r0, r5
 100da20:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
 100da24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0100da28 <_vfprintf_r>:
 100da28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 100da2c:	b0c1      	sub	sp, #260	; 0x104
 100da2e:	461d      	mov	r5, r3
 100da30:	468a      	mov	sl, r1
 100da32:	4691      	mov	r9, r2
 100da34:	4604      	mov	r4, r0
 100da36:	9008      	str	r0, [sp, #32]
 100da38:	f002 fdc4 	bl	10105c4 <_localeconv_r>
 100da3c:	6803      	ldr	r3, [r0, #0]
 100da3e:	9315      	str	r3, [sp, #84]	; 0x54
 100da40:	4618      	mov	r0, r3
 100da42:	f7ff f87d 	bl	100cb40 <strlen>
 100da46:	950e      	str	r5, [sp, #56]	; 0x38
 100da48:	9014      	str	r0, [sp, #80]	; 0x50
 100da4a:	b11c      	cbz	r4, 100da54 <_vfprintf_r+0x2c>
 100da4c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 100da4e:	2b00      	cmp	r3, #0
 100da50:	f000 825f 	beq.w	100df12 <_vfprintf_r+0x4ea>
 100da54:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
 100da58:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
 100da5c:	f013 0f01 	tst.w	r3, #1
 100da60:	b293      	uxth	r3, r2
 100da62:	d102      	bne.n	100da6a <_vfprintf_r+0x42>
 100da64:	0599      	lsls	r1, r3, #22
 100da66:	f140 8275 	bpl.w	100df54 <_vfprintf_r+0x52c>
 100da6a:	049f      	lsls	r7, r3, #18
 100da6c:	d40a      	bmi.n	100da84 <_vfprintf_r+0x5c>
 100da6e:	f8da 1064 	ldr.w	r1, [sl, #100]	; 0x64
 100da72:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
 100da76:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 100da7a:	f8aa 300c 	strh.w	r3, [sl, #12]
 100da7e:	f8ca 1064 	str.w	r1, [sl, #100]	; 0x64
 100da82:	b29b      	uxth	r3, r3
 100da84:	071e      	lsls	r6, r3, #28
 100da86:	f140 8223 	bpl.w	100ded0 <_vfprintf_r+0x4a8>
 100da8a:	f8da 2010 	ldr.w	r2, [sl, #16]
 100da8e:	2a00      	cmp	r2, #0
 100da90:	f000 821e 	beq.w	100ded0 <_vfprintf_r+0x4a8>
 100da94:	f003 021a 	and.w	r2, r3, #26
 100da98:	2a0a      	cmp	r2, #10
 100da9a:	f000 823e 	beq.w	100df1a <_vfprintf_r+0x4f2>
 100da9e:	2300      	movs	r3, #0
 100daa0:	4618      	mov	r0, r3
 100daa2:	9311      	str	r3, [sp, #68]	; 0x44
 100daa4:	9313      	str	r3, [sp, #76]	; 0x4c
 100daa6:	9312      	str	r3, [sp, #72]	; 0x48
 100daa8:	9325      	str	r3, [sp, #148]	; 0x94
 100daaa:	9324      	str	r3, [sp, #144]	; 0x90
 100daac:	9318      	str	r3, [sp, #96]	; 0x60
 100daae:	9319      	str	r3, [sp, #100]	; 0x64
 100dab0:	930b      	str	r3, [sp, #44]	; 0x2c
 100dab2:	ab30      	add	r3, sp, #192	; 0xc0
 100dab4:	9323      	str	r3, [sp, #140]	; 0x8c
 100dab6:	4698      	mov	r8, r3
 100dab8:	9016      	str	r0, [sp, #88]	; 0x58
 100daba:	9017      	str	r0, [sp, #92]	; 0x5c
 100dabc:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 100dac0:	f899 3000 	ldrb.w	r3, [r9]
 100dac4:	464c      	mov	r4, r9
 100dac6:	b1eb      	cbz	r3, 100db04 <_vfprintf_r+0xdc>
 100dac8:	2b25      	cmp	r3, #37	; 0x25
 100daca:	d102      	bne.n	100dad2 <_vfprintf_r+0xaa>
 100dacc:	e01a      	b.n	100db04 <_vfprintf_r+0xdc>
 100dace:	2b25      	cmp	r3, #37	; 0x25
 100dad0:	d003      	beq.n	100dada <_vfprintf_r+0xb2>
 100dad2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 100dad6:	2b00      	cmp	r3, #0
 100dad8:	d1f9      	bne.n	100dace <_vfprintf_r+0xa6>
 100dada:	eba4 0509 	sub.w	r5, r4, r9
 100dade:	b18d      	cbz	r5, 100db04 <_vfprintf_r+0xdc>
 100dae0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 100dae2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 100dae4:	f8c8 9000 	str.w	r9, [r8]
 100dae8:	3301      	adds	r3, #1
 100daea:	442a      	add	r2, r5
 100daec:	2b07      	cmp	r3, #7
 100daee:	f8c8 5004 	str.w	r5, [r8, #4]
 100daf2:	9225      	str	r2, [sp, #148]	; 0x94
 100daf4:	9324      	str	r3, [sp, #144]	; 0x90
 100daf6:	f300 8201 	bgt.w	100defc <_vfprintf_r+0x4d4>
 100dafa:	f108 0808 	add.w	r8, r8, #8
 100dafe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 100db00:	442b      	add	r3, r5
 100db02:	930b      	str	r3, [sp, #44]	; 0x2c
 100db04:	7823      	ldrb	r3, [r4, #0]
 100db06:	2b00      	cmp	r3, #0
 100db08:	f000 83f0 	beq.w	100e2ec <_vfprintf_r+0x8c4>
 100db0c:	2300      	movs	r3, #0
 100db0e:	461a      	mov	r2, r3
 100db10:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 100db14:	4619      	mov	r1, r3
 100db16:	930c      	str	r3, [sp, #48]	; 0x30
 100db18:	469b      	mov	fp, r3
 100db1a:	7866      	ldrb	r6, [r4, #1]
 100db1c:	f04f 33ff 	mov.w	r3, #4294967295
 100db20:	f104 0901 	add.w	r9, r4, #1
 100db24:	9309      	str	r3, [sp, #36]	; 0x24
 100db26:	f109 0901 	add.w	r9, r9, #1
 100db2a:	f1a6 0320 	sub.w	r3, r6, #32
 100db2e:	2b58      	cmp	r3, #88	; 0x58
 100db30:	f200 83bf 	bhi.w	100e2b2 <_vfprintf_r+0x88a>
 100db34:	e8df f013 	tbh	[pc, r3, lsl #1]
 100db38:	03bd02e0 	.word	0x03bd02e0
 100db3c:	034f03bd 	.word	0x034f03bd
 100db40:	03bd03bd 	.word	0x03bd03bd
 100db44:	03bd03bd 	.word	0x03bd03bd
 100db48:	03bd03bd 	.word	0x03bd03bd
 100db4c:	03080354 	.word	0x03080354
 100db50:	021a03bd 	.word	0x021a03bd
 100db54:	03bd02e8 	.word	0x03bd02e8
 100db58:	033a0303 	.word	0x033a0303
 100db5c:	033a033a 	.word	0x033a033a
 100db60:	033a033a 	.word	0x033a033a
 100db64:	033a033a 	.word	0x033a033a
 100db68:	033a033a 	.word	0x033a033a
 100db6c:	03bd03bd 	.word	0x03bd03bd
 100db70:	03bd03bd 	.word	0x03bd03bd
 100db74:	03bd03bd 	.word	0x03bd03bd
 100db78:	03bd03bd 	.word	0x03bd03bd
 100db7c:	03bd03bd 	.word	0x03bd03bd
 100db80:	03620349 	.word	0x03620349
 100db84:	036203bd 	.word	0x036203bd
 100db88:	03bd03bd 	.word	0x03bd03bd
 100db8c:	03bd03bd 	.word	0x03bd03bd
 100db90:	03bd03a2 	.word	0x03bd03a2
 100db94:	006f03bd 	.word	0x006f03bd
 100db98:	03bd03bd 	.word	0x03bd03bd
 100db9c:	03bd03bd 	.word	0x03bd03bd
 100dba0:	005903bd 	.word	0x005903bd
 100dba4:	03bd03bd 	.word	0x03bd03bd
 100dba8:	03bd031e 	.word	0x03bd031e
 100dbac:	03bd03bd 	.word	0x03bd03bd
 100dbb0:	03bd03bd 	.word	0x03bd03bd
 100dbb4:	03bd03bd 	.word	0x03bd03bd
 100dbb8:	03bd03bd 	.word	0x03bd03bd
 100dbbc:	032403bd 	.word	0x032403bd
 100dbc0:	03620273 	.word	0x03620273
 100dbc4:	03620362 	.word	0x03620362
 100dbc8:	027302b7 	.word	0x027302b7
 100dbcc:	03bd03bd 	.word	0x03bd03bd
 100dbd0:	03bd02bc 	.word	0x03bd02bc
 100dbd4:	007102c9 	.word	0x007102c9
 100dbd8:	0247030d 	.word	0x0247030d
 100dbdc:	025203bd 	.word	0x025203bd
 100dbe0:	005b03bd 	.word	0x005b03bd
 100dbe4:	03bd03bd 	.word	0x03bd03bd
 100dbe8:	021f      	.short	0x021f
 100dbea:	f04b 0b10 	orr.w	fp, fp, #16
 100dbee:	f01b 0f20 	tst.w	fp, #32
 100dbf2:	f040 8353 	bne.w	100e29c <_vfprintf_r+0x874>
 100dbf6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 100dbf8:	f01b 0f10 	tst.w	fp, #16
 100dbfc:	4613      	mov	r3, r2
 100dbfe:	f040 85b4 	bne.w	100e76a <_vfprintf_r+0xd42>
 100dc02:	f01b 0f40 	tst.w	fp, #64	; 0x40
 100dc06:	f000 85b0 	beq.w	100e76a <_vfprintf_r+0xd42>
 100dc0a:	8814      	ldrh	r4, [r2, #0]
 100dc0c:	3204      	adds	r2, #4
 100dc0e:	2500      	movs	r5, #0
 100dc10:	2301      	movs	r3, #1
 100dc12:	920e      	str	r2, [sp, #56]	; 0x38
 100dc14:	e014      	b.n	100dc40 <_vfprintf_r+0x218>
 100dc16:	f04b 0b10 	orr.w	fp, fp, #16
 100dc1a:	f01b 0320 	ands.w	r3, fp, #32
 100dc1e:	f040 8332 	bne.w	100e286 <_vfprintf_r+0x85e>
 100dc22:	f01b 0210 	ands.w	r2, fp, #16
 100dc26:	f040 8589 	bne.w	100e73c <_vfprintf_r+0xd14>
 100dc2a:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 100dc2e:	f000 8585 	beq.w	100e73c <_vfprintf_r+0xd14>
 100dc32:	990e      	ldr	r1, [sp, #56]	; 0x38
 100dc34:	4613      	mov	r3, r2
 100dc36:	460a      	mov	r2, r1
 100dc38:	3204      	adds	r2, #4
 100dc3a:	880c      	ldrh	r4, [r1, #0]
 100dc3c:	920e      	str	r2, [sp, #56]	; 0x38
 100dc3e:	2500      	movs	r5, #0
 100dc40:	f04f 0a00 	mov.w	sl, #0
 100dc44:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
 100dc48:	9909      	ldr	r1, [sp, #36]	; 0x24
 100dc4a:	1c4a      	adds	r2, r1, #1
 100dc4c:	f000 820b 	beq.w	100e066 <_vfprintf_r+0x63e>
 100dc50:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
 100dc54:	9206      	str	r2, [sp, #24]
 100dc56:	ea54 0205 	orrs.w	r2, r4, r5
 100dc5a:	f040 820a 	bne.w	100e072 <_vfprintf_r+0x64a>
 100dc5e:	2900      	cmp	r1, #0
 100dc60:	f040 846f 	bne.w	100e542 <_vfprintf_r+0xb1a>
 100dc64:	2b00      	cmp	r3, #0
 100dc66:	f040 852d 	bne.w	100e6c4 <_vfprintf_r+0xc9c>
 100dc6a:	f01b 0301 	ands.w	r3, fp, #1
 100dc6e:	930d      	str	r3, [sp, #52]	; 0x34
 100dc70:	f000 8668 	beq.w	100e944 <_vfprintf_r+0xf1c>
 100dc74:	af40      	add	r7, sp, #256	; 0x100
 100dc76:	2330      	movs	r3, #48	; 0x30
 100dc78:	f807 3d41 	strb.w	r3, [r7, #-65]!
 100dc7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 100dc7e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 100dc80:	4293      	cmp	r3, r2
 100dc82:	bfb8      	it	lt
 100dc84:	4613      	movlt	r3, r2
 100dc86:	9307      	str	r3, [sp, #28]
 100dc88:	2300      	movs	r3, #0
 100dc8a:	9310      	str	r3, [sp, #64]	; 0x40
 100dc8c:	f1ba 0f00 	cmp.w	sl, #0
 100dc90:	d002      	beq.n	100dc98 <_vfprintf_r+0x270>
 100dc92:	9b07      	ldr	r3, [sp, #28]
 100dc94:	3301      	adds	r3, #1
 100dc96:	9307      	str	r3, [sp, #28]
 100dc98:	9b06      	ldr	r3, [sp, #24]
 100dc9a:	f013 0302 	ands.w	r3, r3, #2
 100dc9e:	930f      	str	r3, [sp, #60]	; 0x3c
 100dca0:	d002      	beq.n	100dca8 <_vfprintf_r+0x280>
 100dca2:	9b07      	ldr	r3, [sp, #28]
 100dca4:	3302      	adds	r3, #2
 100dca6:	9307      	str	r3, [sp, #28]
 100dca8:	9b06      	ldr	r3, [sp, #24]
 100dcaa:	f013 0584 	ands.w	r5, r3, #132	; 0x84
 100dcae:	f040 831b 	bne.w	100e2e8 <_vfprintf_r+0x8c0>
 100dcb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 100dcb4:	9a07      	ldr	r2, [sp, #28]
 100dcb6:	eba3 0b02 	sub.w	fp, r3, r2
 100dcba:	f1bb 0f00 	cmp.w	fp, #0
 100dcbe:	f340 8313 	ble.w	100e2e8 <_vfprintf_r+0x8c0>
 100dcc2:	f1bb 0f10 	cmp.w	fp, #16
 100dcc6:	9925      	ldr	r1, [sp, #148]	; 0x94
 100dcc8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 100dcca:	dd28      	ble.n	100dd1e <_vfprintf_r+0x2f6>
 100dccc:	4643      	mov	r3, r8
 100dcce:	2410      	movs	r4, #16
 100dcd0:	46a8      	mov	r8, r5
 100dcd2:	f8dd a020 	ldr.w	sl, [sp, #32]
 100dcd6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 100dcd8:	e006      	b.n	100dce8 <_vfprintf_r+0x2c0>
 100dcda:	f1ab 0b10 	sub.w	fp, fp, #16
 100dcde:	f1bb 0f10 	cmp.w	fp, #16
 100dce2:	f103 0308 	add.w	r3, r3, #8
 100dce6:	dd18      	ble.n	100dd1a <_vfprintf_r+0x2f2>
 100dce8:	3201      	adds	r2, #1
 100dcea:	48b9      	ldr	r0, [pc, #740]	; (100dfd0 <_vfprintf_r+0x5a8>)
 100dcec:	9224      	str	r2, [sp, #144]	; 0x90
 100dcee:	3110      	adds	r1, #16
 100dcf0:	2a07      	cmp	r2, #7
 100dcf2:	9125      	str	r1, [sp, #148]	; 0x94
 100dcf4:	e883 0011 	stmia.w	r3, {r0, r4}
 100dcf8:	ddef      	ble.n	100dcda <_vfprintf_r+0x2b2>
 100dcfa:	aa23      	add	r2, sp, #140	; 0x8c
 100dcfc:	4629      	mov	r1, r5
 100dcfe:	4650      	mov	r0, sl
 100dd00:	f7fe fffe 	bl	100cd00 <__sprint_r>
 100dd04:	2800      	cmp	r0, #0
 100dd06:	f040 836a 	bne.w	100e3de <_vfprintf_r+0x9b6>
 100dd0a:	f1ab 0b10 	sub.w	fp, fp, #16
 100dd0e:	f1bb 0f10 	cmp.w	fp, #16
 100dd12:	9925      	ldr	r1, [sp, #148]	; 0x94
 100dd14:	9a24      	ldr	r2, [sp, #144]	; 0x90
 100dd16:	ab30      	add	r3, sp, #192	; 0xc0
 100dd18:	dce6      	bgt.n	100dce8 <_vfprintf_r+0x2c0>
 100dd1a:	4645      	mov	r5, r8
 100dd1c:	4698      	mov	r8, r3
 100dd1e:	3201      	adds	r2, #1
 100dd20:	4bab      	ldr	r3, [pc, #684]	; (100dfd0 <_vfprintf_r+0x5a8>)
 100dd22:	9224      	str	r2, [sp, #144]	; 0x90
 100dd24:	eb0b 0401 	add.w	r4, fp, r1
 100dd28:	2a07      	cmp	r2, #7
 100dd2a:	9425      	str	r4, [sp, #148]	; 0x94
 100dd2c:	e888 0808 	stmia.w	r8, {r3, fp}
 100dd30:	f300 84cd 	bgt.w	100e6ce <_vfprintf_r+0xca6>
 100dd34:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
 100dd38:	f108 0808 	add.w	r8, r8, #8
 100dd3c:	f1ba 0f00 	cmp.w	sl, #0
 100dd40:	d00e      	beq.n	100dd60 <_vfprintf_r+0x338>
 100dd42:	9b24      	ldr	r3, [sp, #144]	; 0x90
 100dd44:	3301      	adds	r3, #1
 100dd46:	3401      	adds	r4, #1
 100dd48:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
 100dd4c:	2201      	movs	r2, #1
 100dd4e:	2b07      	cmp	r3, #7
 100dd50:	9425      	str	r4, [sp, #148]	; 0x94
 100dd52:	9324      	str	r3, [sp, #144]	; 0x90
 100dd54:	e888 0006 	stmia.w	r8, {r1, r2}
 100dd58:	f300 840a 	bgt.w	100e570 <_vfprintf_r+0xb48>
 100dd5c:	f108 0808 	add.w	r8, r8, #8
 100dd60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 100dd62:	b16b      	cbz	r3, 100dd80 <_vfprintf_r+0x358>
 100dd64:	9b24      	ldr	r3, [sp, #144]	; 0x90
 100dd66:	3301      	adds	r3, #1
 100dd68:	3402      	adds	r4, #2
 100dd6a:	a91c      	add	r1, sp, #112	; 0x70
 100dd6c:	2202      	movs	r2, #2
 100dd6e:	2b07      	cmp	r3, #7
 100dd70:	9425      	str	r4, [sp, #148]	; 0x94
 100dd72:	9324      	str	r3, [sp, #144]	; 0x90
 100dd74:	e888 0006 	stmia.w	r8, {r1, r2}
 100dd78:	f300 8406 	bgt.w	100e588 <_vfprintf_r+0xb60>
 100dd7c:	f108 0808 	add.w	r8, r8, #8
 100dd80:	2d80      	cmp	r5, #128	; 0x80
 100dd82:	f000 832e 	beq.w	100e3e2 <_vfprintf_r+0x9ba>
 100dd86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 100dd88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 100dd8a:	eba3 0a02 	sub.w	sl, r3, r2
 100dd8e:	f1ba 0f00 	cmp.w	sl, #0
 100dd92:	dd3b      	ble.n	100de0c <_vfprintf_r+0x3e4>
 100dd94:	f1ba 0f10 	cmp.w	sl, #16
 100dd98:	9b24      	ldr	r3, [sp, #144]	; 0x90
 100dd9a:	4d8e      	ldr	r5, [pc, #568]	; (100dfd4 <_vfprintf_r+0x5ac>)
 100dd9c:	dd2b      	ble.n	100ddf6 <_vfprintf_r+0x3ce>
 100dd9e:	4642      	mov	r2, r8
 100dda0:	4621      	mov	r1, r4
 100dda2:	46b0      	mov	r8, r6
 100dda4:	f04f 0b10 	mov.w	fp, #16
 100dda8:	462e      	mov	r6, r5
 100ddaa:	9c08      	ldr	r4, [sp, #32]
 100ddac:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 100ddae:	e006      	b.n	100ddbe <_vfprintf_r+0x396>
 100ddb0:	f1aa 0a10 	sub.w	sl, sl, #16
 100ddb4:	f1ba 0f10 	cmp.w	sl, #16
 100ddb8:	f102 0208 	add.w	r2, r2, #8
 100ddbc:	dd17      	ble.n	100ddee <_vfprintf_r+0x3c6>
 100ddbe:	3301      	adds	r3, #1
 100ddc0:	3110      	adds	r1, #16
 100ddc2:	2b07      	cmp	r3, #7
 100ddc4:	9125      	str	r1, [sp, #148]	; 0x94
 100ddc6:	9324      	str	r3, [sp, #144]	; 0x90
 100ddc8:	e882 0840 	stmia.w	r2, {r6, fp}
 100ddcc:	ddf0      	ble.n	100ddb0 <_vfprintf_r+0x388>
 100ddce:	aa23      	add	r2, sp, #140	; 0x8c
 100ddd0:	4629      	mov	r1, r5
 100ddd2:	4620      	mov	r0, r4
 100ddd4:	f7fe ff94 	bl	100cd00 <__sprint_r>
 100ddd8:	2800      	cmp	r0, #0
 100ddda:	f040 8300 	bne.w	100e3de <_vfprintf_r+0x9b6>
 100ddde:	f1aa 0a10 	sub.w	sl, sl, #16
 100dde2:	f1ba 0f10 	cmp.w	sl, #16
 100dde6:	9925      	ldr	r1, [sp, #148]	; 0x94
 100dde8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 100ddea:	aa30      	add	r2, sp, #192	; 0xc0
 100ddec:	dce7      	bgt.n	100ddbe <_vfprintf_r+0x396>
 100ddee:	4635      	mov	r5, r6
 100ddf0:	460c      	mov	r4, r1
 100ddf2:	4646      	mov	r6, r8
 100ddf4:	4690      	mov	r8, r2
 100ddf6:	3301      	adds	r3, #1
 100ddf8:	4454      	add	r4, sl
 100ddfa:	2b07      	cmp	r3, #7
 100ddfc:	9425      	str	r4, [sp, #148]	; 0x94
 100ddfe:	9324      	str	r3, [sp, #144]	; 0x90
 100de00:	e888 0420 	stmia.w	r8, {r5, sl}
 100de04:	f300 83a9 	bgt.w	100e55a <_vfprintf_r+0xb32>
 100de08:	f108 0808 	add.w	r8, r8, #8
 100de0c:	9b06      	ldr	r3, [sp, #24]
 100de0e:	05db      	lsls	r3, r3, #23
 100de10:	f100 8285 	bmi.w	100e31e <_vfprintf_r+0x8f6>
 100de14:	9b24      	ldr	r3, [sp, #144]	; 0x90
 100de16:	990d      	ldr	r1, [sp, #52]	; 0x34
 100de18:	f8c8 7000 	str.w	r7, [r8]
 100de1c:	3301      	adds	r3, #1
 100de1e:	440c      	add	r4, r1
 100de20:	2b07      	cmp	r3, #7
 100de22:	9425      	str	r4, [sp, #148]	; 0x94
 100de24:	f8c8 1004 	str.w	r1, [r8, #4]
 100de28:	9324      	str	r3, [sp, #144]	; 0x90
 100de2a:	f300 8375 	bgt.w	100e518 <_vfprintf_r+0xaf0>
 100de2e:	f108 0808 	add.w	r8, r8, #8
 100de32:	9b06      	ldr	r3, [sp, #24]
 100de34:	0759      	lsls	r1, r3, #29
 100de36:	d53b      	bpl.n	100deb0 <_vfprintf_r+0x488>
 100de38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 100de3a:	9a07      	ldr	r2, [sp, #28]
 100de3c:	1a9d      	subs	r5, r3, r2
 100de3e:	2d00      	cmp	r5, #0
 100de40:	dd36      	ble.n	100deb0 <_vfprintf_r+0x488>
 100de42:	2d10      	cmp	r5, #16
 100de44:	9b24      	ldr	r3, [sp, #144]	; 0x90
 100de46:	dd21      	ble.n	100de8c <_vfprintf_r+0x464>
 100de48:	2610      	movs	r6, #16
 100de4a:	9f08      	ldr	r7, [sp, #32]
 100de4c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 100de50:	e004      	b.n	100de5c <_vfprintf_r+0x434>
 100de52:	3d10      	subs	r5, #16
 100de54:	2d10      	cmp	r5, #16
 100de56:	f108 0808 	add.w	r8, r8, #8
 100de5a:	dd17      	ble.n	100de8c <_vfprintf_r+0x464>
 100de5c:	3301      	adds	r3, #1
 100de5e:	4a5c      	ldr	r2, [pc, #368]	; (100dfd0 <_vfprintf_r+0x5a8>)
 100de60:	9324      	str	r3, [sp, #144]	; 0x90
 100de62:	3410      	adds	r4, #16
 100de64:	2b07      	cmp	r3, #7
 100de66:	9425      	str	r4, [sp, #148]	; 0x94
 100de68:	e888 0044 	stmia.w	r8, {r2, r6}
 100de6c:	ddf1      	ble.n	100de52 <_vfprintf_r+0x42a>
 100de6e:	aa23      	add	r2, sp, #140	; 0x8c
 100de70:	4651      	mov	r1, sl
 100de72:	4638      	mov	r0, r7
 100de74:	f7fe ff44 	bl	100cd00 <__sprint_r>
 100de78:	2800      	cmp	r0, #0
 100de7a:	f040 823f 	bne.w	100e2fc <_vfprintf_r+0x8d4>
 100de7e:	3d10      	subs	r5, #16
 100de80:	2d10      	cmp	r5, #16
 100de82:	9c25      	ldr	r4, [sp, #148]	; 0x94
 100de84:	9b24      	ldr	r3, [sp, #144]	; 0x90
 100de86:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
 100de8a:	dce7      	bgt.n	100de5c <_vfprintf_r+0x434>
 100de8c:	3301      	adds	r3, #1
 100de8e:	4a50      	ldr	r2, [pc, #320]	; (100dfd0 <_vfprintf_r+0x5a8>)
 100de90:	9324      	str	r3, [sp, #144]	; 0x90
 100de92:	442c      	add	r4, r5
 100de94:	2b07      	cmp	r3, #7
 100de96:	9425      	str	r4, [sp, #148]	; 0x94
 100de98:	e888 0024 	stmia.w	r8, {r2, r5}
 100de9c:	dd08      	ble.n	100deb0 <_vfprintf_r+0x488>
 100de9e:	aa23      	add	r2, sp, #140	; 0x8c
 100dea0:	990a      	ldr	r1, [sp, #40]	; 0x28
 100dea2:	9808      	ldr	r0, [sp, #32]
 100dea4:	f7fe ff2c 	bl	100cd00 <__sprint_r>
 100dea8:	2800      	cmp	r0, #0
 100deaa:	f040 8347 	bne.w	100e53c <_vfprintf_r+0xb14>
 100deae:	9c25      	ldr	r4, [sp, #148]	; 0x94
 100deb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 100deb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 100deb4:	9907      	ldr	r1, [sp, #28]
 100deb6:	428a      	cmp	r2, r1
 100deb8:	bfac      	ite	ge
 100deba:	189b      	addge	r3, r3, r2
 100debc:	185b      	addlt	r3, r3, r1
 100debe:	930b      	str	r3, [sp, #44]	; 0x2c
 100dec0:	2c00      	cmp	r4, #0
 100dec2:	f040 8333 	bne.w	100e52c <_vfprintf_r+0xb04>
 100dec6:	2300      	movs	r3, #0
 100dec8:	9324      	str	r3, [sp, #144]	; 0x90
 100deca:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
 100dece:	e5f7      	b.n	100dac0 <_vfprintf_r+0x98>
 100ded0:	4651      	mov	r1, sl
 100ded2:	9808      	ldr	r0, [sp, #32]
 100ded4:	f001 f8ba 	bl	100f04c <__swsetup_r>
 100ded8:	2800      	cmp	r0, #0
 100deda:	d038      	beq.n	100df4e <_vfprintf_r+0x526>
 100dedc:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
 100dee0:	07dd      	lsls	r5, r3, #31
 100dee2:	d404      	bmi.n	100deee <_vfprintf_r+0x4c6>
 100dee4:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 100dee8:	059c      	lsls	r4, r3, #22
 100deea:	f140 85ca 	bpl.w	100ea82 <_vfprintf_r+0x105a>
 100deee:	f04f 33ff 	mov.w	r3, #4294967295
 100def2:	930b      	str	r3, [sp, #44]	; 0x2c
 100def4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 100def6:	b041      	add	sp, #260	; 0x104
 100def8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100defc:	aa23      	add	r2, sp, #140	; 0x8c
 100defe:	990a      	ldr	r1, [sp, #40]	; 0x28
 100df00:	9808      	ldr	r0, [sp, #32]
 100df02:	f7fe fefd 	bl	100cd00 <__sprint_r>
 100df06:	2800      	cmp	r0, #0
 100df08:	f040 8318 	bne.w	100e53c <_vfprintf_r+0xb14>
 100df0c:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
 100df10:	e5f5      	b.n	100dafe <_vfprintf_r+0xd6>
 100df12:	9808      	ldr	r0, [sp, #32]
 100df14:	f7fd fdfa 	bl	100bb0c <__sinit>
 100df18:	e59c      	b.n	100da54 <_vfprintf_r+0x2c>
 100df1a:	f9ba 200e 	ldrsh.w	r2, [sl, #14]
 100df1e:	2a00      	cmp	r2, #0
 100df20:	f6ff adbd 	blt.w	100da9e <_vfprintf_r+0x76>
 100df24:	f8da 2064 	ldr.w	r2, [sl, #100]	; 0x64
 100df28:	07d0      	lsls	r0, r2, #31
 100df2a:	d405      	bmi.n	100df38 <_vfprintf_r+0x510>
 100df2c:	0599      	lsls	r1, r3, #22
 100df2e:	d403      	bmi.n	100df38 <_vfprintf_r+0x510>
 100df30:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
 100df34:	f7fd ffe6 	bl	100bf04 <__retarget_lock_release_recursive>
 100df38:	462b      	mov	r3, r5
 100df3a:	464a      	mov	r2, r9
 100df3c:	4651      	mov	r1, sl
 100df3e:	9808      	ldr	r0, [sp, #32]
 100df40:	f001 f81e 	bl	100ef80 <__sbprintf>
 100df44:	900b      	str	r0, [sp, #44]	; 0x2c
 100df46:	980b      	ldr	r0, [sp, #44]	; 0x2c
 100df48:	b041      	add	sp, #260	; 0x104
 100df4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100df4e:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 100df52:	e59f      	b.n	100da94 <_vfprintf_r+0x6c>
 100df54:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
 100df58:	f7fd ffd2 	bl	100bf00 <__retarget_lock_acquire_recursive>
 100df5c:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
 100df60:	b293      	uxth	r3, r2
 100df62:	e582      	b.n	100da6a <_vfprintf_r+0x42>
 100df64:	980c      	ldr	r0, [sp, #48]	; 0x30
 100df66:	930e      	str	r3, [sp, #56]	; 0x38
 100df68:	4240      	negs	r0, r0
 100df6a:	900c      	str	r0, [sp, #48]	; 0x30
 100df6c:	f04b 0b04 	orr.w	fp, fp, #4
 100df70:	f899 6000 	ldrb.w	r6, [r9]
 100df74:	e5d7      	b.n	100db26 <_vfprintf_r+0xfe>
 100df76:	2a00      	cmp	r2, #0
 100df78:	f040 87df 	bne.w	100ef3a <_vfprintf_r+0x1512>
 100df7c:	4b16      	ldr	r3, [pc, #88]	; (100dfd8 <_vfprintf_r+0x5b0>)
 100df7e:	9318      	str	r3, [sp, #96]	; 0x60
 100df80:	f01b 0f20 	tst.w	fp, #32
 100df84:	f040 84b9 	bne.w	100e8fa <_vfprintf_r+0xed2>
 100df88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 100df8a:	f01b 0f10 	tst.w	fp, #16
 100df8e:	4613      	mov	r3, r2
 100df90:	f040 83dc 	bne.w	100e74c <_vfprintf_r+0xd24>
 100df94:	f01b 0f40 	tst.w	fp, #64	; 0x40
 100df98:	f000 83d8 	beq.w	100e74c <_vfprintf_r+0xd24>
 100df9c:	3304      	adds	r3, #4
 100df9e:	8814      	ldrh	r4, [r2, #0]
 100dfa0:	930e      	str	r3, [sp, #56]	; 0x38
 100dfa2:	2500      	movs	r5, #0
 100dfa4:	f01b 0f01 	tst.w	fp, #1
 100dfa8:	f000 8322 	beq.w	100e5f0 <_vfprintf_r+0xbc8>
 100dfac:	ea54 0305 	orrs.w	r3, r4, r5
 100dfb0:	f000 831e 	beq.w	100e5f0 <_vfprintf_r+0xbc8>
 100dfb4:	2330      	movs	r3, #48	; 0x30
 100dfb6:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 100dfba:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
 100dfbe:	f04b 0b02 	orr.w	fp, fp, #2
 100dfc2:	2302      	movs	r3, #2
 100dfc4:	e63c      	b.n	100dc40 <_vfprintf_r+0x218>
 100dfc6:	f04b 0b20 	orr.w	fp, fp, #32
 100dfca:	f899 6000 	ldrb.w	r6, [r9]
 100dfce:	e5aa      	b.n	100db26 <_vfprintf_r+0xfe>
 100dfd0:	01022398 	.word	0x01022398
 100dfd4:	010223a8 	.word	0x010223a8
 100dfd8:	01022348 	.word	0x01022348
 100dfdc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 100dfde:	6817      	ldr	r7, [r2, #0]
 100dfe0:	2400      	movs	r4, #0
 100dfe2:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
 100dfe6:	1d15      	adds	r5, r2, #4
 100dfe8:	2f00      	cmp	r7, #0
 100dfea:	f000 864e 	beq.w	100ec8a <_vfprintf_r+0x1262>
 100dfee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 100dff0:	1c53      	adds	r3, r2, #1
 100dff2:	f000 85cc 	beq.w	100eb8e <_vfprintf_r+0x1166>
 100dff6:	4621      	mov	r1, r4
 100dff8:	4638      	mov	r0, r7
 100dffa:	f7fe fa59 	bl	100c4b0 <memchr>
 100dffe:	2800      	cmp	r0, #0
 100e000:	f000 8697 	beq.w	100ed32 <_vfprintf_r+0x130a>
 100e004:	1bc3      	subs	r3, r0, r7
 100e006:	930d      	str	r3, [sp, #52]	; 0x34
 100e008:	9409      	str	r4, [sp, #36]	; 0x24
 100e00a:	950e      	str	r5, [sp, #56]	; 0x38
 100e00c:	f8cd b018 	str.w	fp, [sp, #24]
 100e010:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 100e014:	9307      	str	r3, [sp, #28]
 100e016:	9410      	str	r4, [sp, #64]	; 0x40
 100e018:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
 100e01c:	e636      	b.n	100dc8c <_vfprintf_r+0x264>
 100e01e:	2a00      	cmp	r2, #0
 100e020:	f040 8796 	bne.w	100ef50 <_vfprintf_r+0x1528>
 100e024:	f01b 0f20 	tst.w	fp, #32
 100e028:	f040 845a 	bne.w	100e8e0 <_vfprintf_r+0xeb8>
 100e02c:	f01b 0f10 	tst.w	fp, #16
 100e030:	f040 83a2 	bne.w	100e778 <_vfprintf_r+0xd50>
 100e034:	f01b 0f40 	tst.w	fp, #64	; 0x40
 100e038:	f000 839e 	beq.w	100e778 <_vfprintf_r+0xd50>
 100e03c:	990e      	ldr	r1, [sp, #56]	; 0x38
 100e03e:	f9b1 4000 	ldrsh.w	r4, [r1]
 100e042:	3104      	adds	r1, #4
 100e044:	17e5      	asrs	r5, r4, #31
 100e046:	4622      	mov	r2, r4
 100e048:	462b      	mov	r3, r5
 100e04a:	910e      	str	r1, [sp, #56]	; 0x38
 100e04c:	2a00      	cmp	r2, #0
 100e04e:	f173 0300 	sbcs.w	r3, r3, #0
 100e052:	f2c0 8487 	blt.w	100e964 <_vfprintf_r+0xf3c>
 100e056:	9909      	ldr	r1, [sp, #36]	; 0x24
 100e058:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
 100e05c:	1c4a      	adds	r2, r1, #1
 100e05e:	f04f 0301 	mov.w	r3, #1
 100e062:	f47f adf5 	bne.w	100dc50 <_vfprintf_r+0x228>
 100e066:	ea54 0205 	orrs.w	r2, r4, r5
 100e06a:	f000 826c 	beq.w	100e546 <_vfprintf_r+0xb1e>
 100e06e:	f8cd b018 	str.w	fp, [sp, #24]
 100e072:	2b01      	cmp	r3, #1
 100e074:	f000 8308 	beq.w	100e688 <_vfprintf_r+0xc60>
 100e078:	2b02      	cmp	r3, #2
 100e07a:	f040 8295 	bne.w	100e5a8 <_vfprintf_r+0xb80>
 100e07e:	9818      	ldr	r0, [sp, #96]	; 0x60
 100e080:	af30      	add	r7, sp, #192	; 0xc0
 100e082:	0923      	lsrs	r3, r4, #4
 100e084:	f004 010f 	and.w	r1, r4, #15
 100e088:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 100e08c:	092a      	lsrs	r2, r5, #4
 100e08e:	461c      	mov	r4, r3
 100e090:	4615      	mov	r5, r2
 100e092:	5c43      	ldrb	r3, [r0, r1]
 100e094:	f807 3d01 	strb.w	r3, [r7, #-1]!
 100e098:	ea54 0305 	orrs.w	r3, r4, r5
 100e09c:	d1f1      	bne.n	100e082 <_vfprintf_r+0x65a>
 100e09e:	ab30      	add	r3, sp, #192	; 0xc0
 100e0a0:	1bdb      	subs	r3, r3, r7
 100e0a2:	930d      	str	r3, [sp, #52]	; 0x34
 100e0a4:	e5ea      	b.n	100dc7c <_vfprintf_r+0x254>
 100e0a6:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
 100e0aa:	f899 6000 	ldrb.w	r6, [r9]
 100e0ae:	e53a      	b.n	100db26 <_vfprintf_r+0xfe>
 100e0b0:	f899 6000 	ldrb.w	r6, [r9]
 100e0b4:	2e6c      	cmp	r6, #108	; 0x6c
 100e0b6:	bf03      	ittte	eq
 100e0b8:	f899 6001 	ldrbeq.w	r6, [r9, #1]
 100e0bc:	f04b 0b20 	orreq.w	fp, fp, #32
 100e0c0:	f109 0901 	addeq.w	r9, r9, #1
 100e0c4:	f04b 0b10 	orrne.w	fp, fp, #16
 100e0c8:	e52d      	b.n	100db26 <_vfprintf_r+0xfe>
 100e0ca:	2a00      	cmp	r2, #0
 100e0cc:	f040 874c 	bne.w	100ef68 <_vfprintf_r+0x1540>
 100e0d0:	f01b 0f20 	tst.w	fp, #32
 100e0d4:	f040 853f 	bne.w	100eb56 <_vfprintf_r+0x112e>
 100e0d8:	f01b 0f10 	tst.w	fp, #16
 100e0dc:	f040 80fc 	bne.w	100e2d8 <_vfprintf_r+0x8b0>
 100e0e0:	f01b 0f40 	tst.w	fp, #64	; 0x40
 100e0e4:	f000 80f8 	beq.w	100e2d8 <_vfprintf_r+0x8b0>
 100e0e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 100e0ea:	6813      	ldr	r3, [r2, #0]
 100e0ec:	3204      	adds	r2, #4
 100e0ee:	920e      	str	r2, [sp, #56]	; 0x38
 100e0f0:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 100e0f4:	801a      	strh	r2, [r3, #0]
 100e0f6:	e4e3      	b.n	100dac0 <_vfprintf_r+0x98>
 100e0f8:	f899 6000 	ldrb.w	r6, [r9]
 100e0fc:	2900      	cmp	r1, #0
 100e0fe:	f47f ad12 	bne.w	100db26 <_vfprintf_r+0xfe>
 100e102:	2201      	movs	r2, #1
 100e104:	2120      	movs	r1, #32
 100e106:	e50e      	b.n	100db26 <_vfprintf_r+0xfe>
 100e108:	f899 6000 	ldrb.w	r6, [r9]
 100e10c:	2e2a      	cmp	r6, #42	; 0x2a
 100e10e:	f109 0001 	add.w	r0, r9, #1
 100e112:	f000 86f1 	beq.w	100eef8 <_vfprintf_r+0x14d0>
 100e116:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 100e11a:	2b09      	cmp	r3, #9
 100e11c:	4681      	mov	r9, r0
 100e11e:	bf98      	it	ls
 100e120:	2000      	movls	r0, #0
 100e122:	f200 863d 	bhi.w	100eda0 <_vfprintf_r+0x1378>
 100e126:	f819 6b01 	ldrb.w	r6, [r9], #1
 100e12a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 100e12e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 100e132:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 100e136:	2b09      	cmp	r3, #9
 100e138:	d9f5      	bls.n	100e126 <_vfprintf_r+0x6fe>
 100e13a:	9009      	str	r0, [sp, #36]	; 0x24
 100e13c:	e4f5      	b.n	100db2a <_vfprintf_r+0x102>
 100e13e:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 100e142:	f899 6000 	ldrb.w	r6, [r9]
 100e146:	e4ee      	b.n	100db26 <_vfprintf_r+0xfe>
 100e148:	f899 6000 	ldrb.w	r6, [r9]
 100e14c:	2201      	movs	r2, #1
 100e14e:	212b      	movs	r1, #43	; 0x2b
 100e150:	e4e9      	b.n	100db26 <_vfprintf_r+0xfe>
 100e152:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 100e154:	4bae      	ldr	r3, [pc, #696]	; (100e410 <_vfprintf_r+0x9e8>)
 100e156:	6814      	ldr	r4, [r2, #0]
 100e158:	9318      	str	r3, [sp, #96]	; 0x60
 100e15a:	2678      	movs	r6, #120	; 0x78
 100e15c:	2330      	movs	r3, #48	; 0x30
 100e15e:	3204      	adds	r2, #4
 100e160:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 100e164:	f04b 0b02 	orr.w	fp, fp, #2
 100e168:	920e      	str	r2, [sp, #56]	; 0x38
 100e16a:	2500      	movs	r5, #0
 100e16c:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
 100e170:	2302      	movs	r3, #2
 100e172:	e565      	b.n	100dc40 <_vfprintf_r+0x218>
 100e174:	2a00      	cmp	r2, #0
 100e176:	f040 86e4 	bne.w	100ef42 <_vfprintf_r+0x151a>
 100e17a:	4ba6      	ldr	r3, [pc, #664]	; (100e414 <_vfprintf_r+0x9ec>)
 100e17c:	9318      	str	r3, [sp, #96]	; 0x60
 100e17e:	e6ff      	b.n	100df80 <_vfprintf_r+0x558>
 100e180:	990e      	ldr	r1, [sp, #56]	; 0x38
 100e182:	f8cd b018 	str.w	fp, [sp, #24]
 100e186:	680a      	ldr	r2, [r1, #0]
 100e188:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
 100e18c:	2300      	movs	r3, #0
 100e18e:	460a      	mov	r2, r1
 100e190:	469a      	mov	sl, r3
 100e192:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 100e196:	3204      	adds	r2, #4
 100e198:	2301      	movs	r3, #1
 100e19a:	9307      	str	r3, [sp, #28]
 100e19c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 100e1a0:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 100e1a4:	920e      	str	r2, [sp, #56]	; 0x38
 100e1a6:	930d      	str	r3, [sp, #52]	; 0x34
 100e1a8:	af26      	add	r7, sp, #152	; 0x98
 100e1aa:	e575      	b.n	100dc98 <_vfprintf_r+0x270>
 100e1ac:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 100e1b0:	2000      	movs	r0, #0
 100e1b2:	f819 6b01 	ldrb.w	r6, [r9], #1
 100e1b6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 100e1ba:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 100e1be:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 100e1c2:	2b09      	cmp	r3, #9
 100e1c4:	d9f5      	bls.n	100e1b2 <_vfprintf_r+0x78a>
 100e1c6:	900c      	str	r0, [sp, #48]	; 0x30
 100e1c8:	e4af      	b.n	100db2a <_vfprintf_r+0x102>
 100e1ca:	2a00      	cmp	r2, #0
 100e1cc:	f040 86c8 	bne.w	100ef60 <_vfprintf_r+0x1538>
 100e1d0:	f04b 0b10 	orr.w	fp, fp, #16
 100e1d4:	e726      	b.n	100e024 <_vfprintf_r+0x5fc>
 100e1d6:	f04b 0b01 	orr.w	fp, fp, #1
 100e1da:	f899 6000 	ldrb.w	r6, [r9]
 100e1de:	e4a2      	b.n	100db26 <_vfprintf_r+0xfe>
 100e1e0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 100e1e2:	6823      	ldr	r3, [r4, #0]
 100e1e4:	930c      	str	r3, [sp, #48]	; 0x30
 100e1e6:	4618      	mov	r0, r3
 100e1e8:	2800      	cmp	r0, #0
 100e1ea:	4623      	mov	r3, r4
 100e1ec:	f103 0304 	add.w	r3, r3, #4
 100e1f0:	f6ff aeb8 	blt.w	100df64 <_vfprintf_r+0x53c>
 100e1f4:	930e      	str	r3, [sp, #56]	; 0x38
 100e1f6:	f899 6000 	ldrb.w	r6, [r9]
 100e1fa:	e494      	b.n	100db26 <_vfprintf_r+0xfe>
 100e1fc:	2a00      	cmp	r2, #0
 100e1fe:	f040 86b7 	bne.w	100ef70 <_vfprintf_r+0x1548>
 100e202:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 100e204:	3507      	adds	r5, #7
 100e206:	f025 0307 	bic.w	r3, r5, #7
 100e20a:	f103 0208 	add.w	r2, r3, #8
 100e20e:	920e      	str	r2, [sp, #56]	; 0x38
 100e210:	681a      	ldr	r2, [r3, #0]
 100e212:	9213      	str	r2, [sp, #76]	; 0x4c
 100e214:	685b      	ldr	r3, [r3, #4]
 100e216:	9312      	str	r3, [sp, #72]	; 0x48
 100e218:	9b12      	ldr	r3, [sp, #72]	; 0x48
 100e21a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 100e21c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 100e220:	4628      	mov	r0, r5
 100e222:	4621      	mov	r1, r4
 100e224:	f04f 32ff 	mov.w	r2, #4294967295
 100e228:	4b7b      	ldr	r3, [pc, #492]	; (100e418 <_vfprintf_r+0x9f0>)
 100e22a:	f003 fb67 	bl	10118fc <__aeabi_dcmpun>
 100e22e:	2800      	cmp	r0, #0
 100e230:	f040 83a2 	bne.w	100e978 <_vfprintf_r+0xf50>
 100e234:	4628      	mov	r0, r5
 100e236:	4621      	mov	r1, r4
 100e238:	f04f 32ff 	mov.w	r2, #4294967295
 100e23c:	4b76      	ldr	r3, [pc, #472]	; (100e418 <_vfprintf_r+0x9f0>)
 100e23e:	f003 fb3f 	bl	10118c0 <__aeabi_dcmple>
 100e242:	2800      	cmp	r0, #0
 100e244:	f040 8398 	bne.w	100e978 <_vfprintf_r+0xf50>
 100e248:	9a16      	ldr	r2, [sp, #88]	; 0x58
 100e24a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 100e24c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 100e24e:	9912      	ldr	r1, [sp, #72]	; 0x48
 100e250:	f003 fb2c 	bl	10118ac <__aeabi_dcmplt>
 100e254:	2800      	cmp	r0, #0
 100e256:	f040 8435 	bne.w	100eac4 <_vfprintf_r+0x109c>
 100e25a:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
 100e25e:	4f6f      	ldr	r7, [pc, #444]	; (100e41c <_vfprintf_r+0x9f4>)
 100e260:	4b6f      	ldr	r3, [pc, #444]	; (100e420 <_vfprintf_r+0x9f8>)
 100e262:	2203      	movs	r2, #3
 100e264:	2100      	movs	r1, #0
 100e266:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
 100e26a:	9207      	str	r2, [sp, #28]
 100e26c:	9109      	str	r1, [sp, #36]	; 0x24
 100e26e:	9006      	str	r0, [sp, #24]
 100e270:	2e47      	cmp	r6, #71	; 0x47
 100e272:	bfd8      	it	le
 100e274:	461f      	movle	r7, r3
 100e276:	920d      	str	r2, [sp, #52]	; 0x34
 100e278:	9110      	str	r1, [sp, #64]	; 0x40
 100e27a:	e507      	b.n	100dc8c <_vfprintf_r+0x264>
 100e27c:	f04b 0b08 	orr.w	fp, fp, #8
 100e280:	f899 6000 	ldrb.w	r6, [r9]
 100e284:	e44f      	b.n	100db26 <_vfprintf_r+0xfe>
 100e286:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 100e288:	3507      	adds	r5, #7
 100e28a:	f025 0307 	bic.w	r3, r5, #7
 100e28e:	f103 0208 	add.w	r2, r3, #8
 100e292:	e9d3 4500 	ldrd	r4, r5, [r3]
 100e296:	920e      	str	r2, [sp, #56]	; 0x38
 100e298:	2300      	movs	r3, #0
 100e29a:	e4d1      	b.n	100dc40 <_vfprintf_r+0x218>
 100e29c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 100e29e:	3507      	adds	r5, #7
 100e2a0:	f025 0307 	bic.w	r3, r5, #7
 100e2a4:	f103 0208 	add.w	r2, r3, #8
 100e2a8:	e9d3 4500 	ldrd	r4, r5, [r3]
 100e2ac:	920e      	str	r2, [sp, #56]	; 0x38
 100e2ae:	2301      	movs	r3, #1
 100e2b0:	e4c6      	b.n	100dc40 <_vfprintf_r+0x218>
 100e2b2:	2a00      	cmp	r2, #0
 100e2b4:	f040 8650 	bne.w	100ef58 <_vfprintf_r+0x1530>
 100e2b8:	b1c6      	cbz	r6, 100e2ec <_vfprintf_r+0x8c4>
 100e2ba:	2300      	movs	r3, #0
 100e2bc:	2201      	movs	r2, #1
 100e2be:	469a      	mov	sl, r3
 100e2c0:	9207      	str	r2, [sp, #28]
 100e2c2:	f88d 6098 	strb.w	r6, [sp, #152]	; 0x98
 100e2c6:	f8cd b018 	str.w	fp, [sp, #24]
 100e2ca:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 100e2ce:	9309      	str	r3, [sp, #36]	; 0x24
 100e2d0:	9310      	str	r3, [sp, #64]	; 0x40
 100e2d2:	920d      	str	r2, [sp, #52]	; 0x34
 100e2d4:	af26      	add	r7, sp, #152	; 0x98
 100e2d6:	e4df      	b.n	100dc98 <_vfprintf_r+0x270>
 100e2d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 100e2da:	6813      	ldr	r3, [r2, #0]
 100e2dc:	3204      	adds	r2, #4
 100e2de:	920e      	str	r2, [sp, #56]	; 0x38
 100e2e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 100e2e2:	601a      	str	r2, [r3, #0]
 100e2e4:	f7ff bbec 	b.w	100dac0 <_vfprintf_r+0x98>
 100e2e8:	9c25      	ldr	r4, [sp, #148]	; 0x94
 100e2ea:	e527      	b.n	100dd3c <_vfprintf_r+0x314>
 100e2ec:	9b25      	ldr	r3, [sp, #148]	; 0x94
 100e2ee:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 100e2f2:	2b00      	cmp	r3, #0
 100e2f4:	f040 8594 	bne.w	100ee20 <_vfprintf_r+0x13f8>
 100e2f8:	2300      	movs	r3, #0
 100e2fa:	9324      	str	r3, [sp, #144]	; 0x90
 100e2fc:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
 100e300:	f013 0f01 	tst.w	r3, #1
 100e304:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 100e308:	d102      	bne.n	100e310 <_vfprintf_r+0x8e8>
 100e30a:	059a      	lsls	r2, r3, #22
 100e30c:	f140 8249 	bpl.w	100e7a2 <_vfprintf_r+0xd7a>
 100e310:	065b      	lsls	r3, r3, #25
 100e312:	f53f adec 	bmi.w	100deee <_vfprintf_r+0x4c6>
 100e316:	980b      	ldr	r0, [sp, #44]	; 0x2c
 100e318:	b041      	add	sp, #260	; 0x104
 100e31a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100e31e:	2e65      	cmp	r6, #101	; 0x65
 100e320:	f340 80b2 	ble.w	100e488 <_vfprintf_r+0xa60>
 100e324:	9a16      	ldr	r2, [sp, #88]	; 0x58
 100e326:	9813      	ldr	r0, [sp, #76]	; 0x4c
 100e328:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 100e32a:	9912      	ldr	r1, [sp, #72]	; 0x48
 100e32c:	f003 fab4 	bl	1011898 <__aeabi_dcmpeq>
 100e330:	2800      	cmp	r0, #0
 100e332:	f000 8160 	beq.w	100e5f6 <_vfprintf_r+0xbce>
 100e336:	9b24      	ldr	r3, [sp, #144]	; 0x90
 100e338:	4a3a      	ldr	r2, [pc, #232]	; (100e424 <_vfprintf_r+0x9fc>)
 100e33a:	f8c8 2000 	str.w	r2, [r8]
 100e33e:	3301      	adds	r3, #1
 100e340:	3401      	adds	r4, #1
 100e342:	2201      	movs	r2, #1
 100e344:	2b07      	cmp	r3, #7
 100e346:	9425      	str	r4, [sp, #148]	; 0x94
 100e348:	9324      	str	r3, [sp, #144]	; 0x90
 100e34a:	f8c8 2004 	str.w	r2, [r8, #4]
 100e34e:	f300 83bf 	bgt.w	100ead0 <_vfprintf_r+0x10a8>
 100e352:	f108 0808 	add.w	r8, r8, #8
 100e356:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 100e358:	9a11      	ldr	r2, [sp, #68]	; 0x44
 100e35a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 100e35c:	4293      	cmp	r3, r2
 100e35e:	db03      	blt.n	100e368 <_vfprintf_r+0x940>
 100e360:	9b06      	ldr	r3, [sp, #24]
 100e362:	07df      	lsls	r7, r3, #31
 100e364:	f57f ad65 	bpl.w	100de32 <_vfprintf_r+0x40a>
 100e368:	9b24      	ldr	r3, [sp, #144]	; 0x90
 100e36a:	9914      	ldr	r1, [sp, #80]	; 0x50
 100e36c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 100e36e:	f8c8 2000 	str.w	r2, [r8]
 100e372:	3301      	adds	r3, #1
 100e374:	440c      	add	r4, r1
 100e376:	2b07      	cmp	r3, #7
 100e378:	f8c8 1004 	str.w	r1, [r8, #4]
 100e37c:	9425      	str	r4, [sp, #148]	; 0x94
 100e37e:	9324      	str	r3, [sp, #144]	; 0x90
 100e380:	f300 83f8 	bgt.w	100eb74 <_vfprintf_r+0x114c>
 100e384:	f108 0808 	add.w	r8, r8, #8
 100e388:	9b11      	ldr	r3, [sp, #68]	; 0x44
 100e38a:	1e5e      	subs	r6, r3, #1
 100e38c:	2e00      	cmp	r6, #0
 100e38e:	f77f ad50 	ble.w	100de32 <_vfprintf_r+0x40a>
 100e392:	2e10      	cmp	r6, #16
 100e394:	9b24      	ldr	r3, [sp, #144]	; 0x90
 100e396:	4d24      	ldr	r5, [pc, #144]	; (100e428 <_vfprintf_r+0xa00>)
 100e398:	f340 81dd 	ble.w	100e756 <_vfprintf_r+0xd2e>
 100e39c:	2710      	movs	r7, #16
 100e39e:	f8dd a020 	ldr.w	sl, [sp, #32]
 100e3a2:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 100e3a6:	e005      	b.n	100e3b4 <_vfprintf_r+0x98c>
 100e3a8:	f108 0808 	add.w	r8, r8, #8
 100e3ac:	3e10      	subs	r6, #16
 100e3ae:	2e10      	cmp	r6, #16
 100e3b0:	f340 81d1 	ble.w	100e756 <_vfprintf_r+0xd2e>
 100e3b4:	3301      	adds	r3, #1
 100e3b6:	3410      	adds	r4, #16
 100e3b8:	2b07      	cmp	r3, #7
 100e3ba:	9425      	str	r4, [sp, #148]	; 0x94
 100e3bc:	9324      	str	r3, [sp, #144]	; 0x90
 100e3be:	e888 00a0 	stmia.w	r8, {r5, r7}
 100e3c2:	ddf1      	ble.n	100e3a8 <_vfprintf_r+0x980>
 100e3c4:	aa23      	add	r2, sp, #140	; 0x8c
 100e3c6:	4659      	mov	r1, fp
 100e3c8:	4650      	mov	r0, sl
 100e3ca:	f7fe fc99 	bl	100cd00 <__sprint_r>
 100e3ce:	2800      	cmp	r0, #0
 100e3d0:	f040 83cd 	bne.w	100eb6e <_vfprintf_r+0x1146>
 100e3d4:	9c25      	ldr	r4, [sp, #148]	; 0x94
 100e3d6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 100e3d8:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
 100e3dc:	e7e6      	b.n	100e3ac <_vfprintf_r+0x984>
 100e3de:	46aa      	mov	sl, r5
 100e3e0:	e78c      	b.n	100e2fc <_vfprintf_r+0x8d4>
 100e3e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 100e3e4:	9a07      	ldr	r2, [sp, #28]
 100e3e6:	eba3 0a02 	sub.w	sl, r3, r2
 100e3ea:	f1ba 0f00 	cmp.w	sl, #0
 100e3ee:	f77f acca 	ble.w	100dd86 <_vfprintf_r+0x35e>
 100e3f2:	f1ba 0f10 	cmp.w	sl, #16
 100e3f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 100e3f8:	4d0b      	ldr	r5, [pc, #44]	; (100e428 <_vfprintf_r+0xa00>)
 100e3fa:	dd39      	ble.n	100e470 <_vfprintf_r+0xa48>
 100e3fc:	4642      	mov	r2, r8
 100e3fe:	4621      	mov	r1, r4
 100e400:	46b0      	mov	r8, r6
 100e402:	f04f 0b10 	mov.w	fp, #16
 100e406:	462e      	mov	r6, r5
 100e408:	9c08      	ldr	r4, [sp, #32]
 100e40a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 100e40c:	e015      	b.n	100e43a <_vfprintf_r+0xa12>
 100e40e:	bf00      	nop
 100e410:	01022348 	.word	0x01022348
 100e414:	01022334 	.word	0x01022334
 100e418:	7fefffff 	.word	0x7fefffff
 100e41c:	01022388 	.word	0x01022388
 100e420:	01022384 	.word	0x01022384
 100e424:	01022394 	.word	0x01022394
 100e428:	010223a8 	.word	0x010223a8
 100e42c:	f1aa 0a10 	sub.w	sl, sl, #16
 100e430:	f1ba 0f10 	cmp.w	sl, #16
 100e434:	f102 0208 	add.w	r2, r2, #8
 100e438:	dd16      	ble.n	100e468 <_vfprintf_r+0xa40>
 100e43a:	3301      	adds	r3, #1
 100e43c:	3110      	adds	r1, #16
 100e43e:	2b07      	cmp	r3, #7
 100e440:	9125      	str	r1, [sp, #148]	; 0x94
 100e442:	9324      	str	r3, [sp, #144]	; 0x90
 100e444:	e882 0840 	stmia.w	r2, {r6, fp}
 100e448:	ddf0      	ble.n	100e42c <_vfprintf_r+0xa04>
 100e44a:	aa23      	add	r2, sp, #140	; 0x8c
 100e44c:	4629      	mov	r1, r5
 100e44e:	4620      	mov	r0, r4
 100e450:	f7fe fc56 	bl	100cd00 <__sprint_r>
 100e454:	2800      	cmp	r0, #0
 100e456:	d1c2      	bne.n	100e3de <_vfprintf_r+0x9b6>
 100e458:	f1aa 0a10 	sub.w	sl, sl, #16
 100e45c:	f1ba 0f10 	cmp.w	sl, #16
 100e460:	9925      	ldr	r1, [sp, #148]	; 0x94
 100e462:	9b24      	ldr	r3, [sp, #144]	; 0x90
 100e464:	aa30      	add	r2, sp, #192	; 0xc0
 100e466:	dce8      	bgt.n	100e43a <_vfprintf_r+0xa12>
 100e468:	4635      	mov	r5, r6
 100e46a:	460c      	mov	r4, r1
 100e46c:	4646      	mov	r6, r8
 100e46e:	4690      	mov	r8, r2
 100e470:	3301      	adds	r3, #1
 100e472:	4454      	add	r4, sl
 100e474:	2b07      	cmp	r3, #7
 100e476:	9425      	str	r4, [sp, #148]	; 0x94
 100e478:	9324      	str	r3, [sp, #144]	; 0x90
 100e47a:	e888 0420 	stmia.w	r8, {r5, sl}
 100e47e:	f300 8264 	bgt.w	100e94a <_vfprintf_r+0xf22>
 100e482:	f108 0808 	add.w	r8, r8, #8
 100e486:	e47e      	b.n	100dd86 <_vfprintf_r+0x35e>
 100e488:	9b11      	ldr	r3, [sp, #68]	; 0x44
 100e48a:	9e24      	ldr	r6, [sp, #144]	; 0x90
 100e48c:	2b01      	cmp	r3, #1
 100e48e:	f340 81fd 	ble.w	100e88c <_vfprintf_r+0xe64>
 100e492:	3601      	adds	r6, #1
 100e494:	3401      	adds	r4, #1
 100e496:	2301      	movs	r3, #1
 100e498:	2e07      	cmp	r6, #7
 100e49a:	9425      	str	r4, [sp, #148]	; 0x94
 100e49c:	9624      	str	r6, [sp, #144]	; 0x90
 100e49e:	f8c8 7000 	str.w	r7, [r8]
 100e4a2:	f8c8 3004 	str.w	r3, [r8, #4]
 100e4a6:	f300 820e 	bgt.w	100e8c6 <_vfprintf_r+0xe9e>
 100e4aa:	f108 0808 	add.w	r8, r8, #8
 100e4ae:	9a14      	ldr	r2, [sp, #80]	; 0x50
 100e4b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 100e4b2:	f8c8 3000 	str.w	r3, [r8]
 100e4b6:	3601      	adds	r6, #1
 100e4b8:	4414      	add	r4, r2
 100e4ba:	2e07      	cmp	r6, #7
 100e4bc:	9425      	str	r4, [sp, #148]	; 0x94
 100e4be:	9624      	str	r6, [sp, #144]	; 0x90
 100e4c0:	f8c8 2004 	str.w	r2, [r8, #4]
 100e4c4:	f300 822e 	bgt.w	100e924 <_vfprintf_r+0xefc>
 100e4c8:	f108 0808 	add.w	r8, r8, #8
 100e4cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 100e4ce:	9a16      	ldr	r2, [sp, #88]	; 0x58
 100e4d0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 100e4d2:	9912      	ldr	r1, [sp, #72]	; 0x48
 100e4d4:	f003 f9e0 	bl	1011898 <__aeabi_dcmpeq>
 100e4d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 100e4da:	2800      	cmp	r0, #0
 100e4dc:	f040 8106 	bne.w	100e6ec <_vfprintf_r+0xcc4>
 100e4e0:	3b01      	subs	r3, #1
 100e4e2:	3601      	adds	r6, #1
 100e4e4:	3701      	adds	r7, #1
 100e4e6:	441c      	add	r4, r3
 100e4e8:	2e07      	cmp	r6, #7
 100e4ea:	9624      	str	r6, [sp, #144]	; 0x90
 100e4ec:	9425      	str	r4, [sp, #148]	; 0x94
 100e4ee:	f8c8 7000 	str.w	r7, [r8]
 100e4f2:	f8c8 3004 	str.w	r3, [r8, #4]
 100e4f6:	f300 81d9 	bgt.w	100e8ac <_vfprintf_r+0xe84>
 100e4fa:	f108 0808 	add.w	r8, r8, #8
 100e4fe:	9a19      	ldr	r2, [sp, #100]	; 0x64
 100e500:	f8c8 2004 	str.w	r2, [r8, #4]
 100e504:	3601      	adds	r6, #1
 100e506:	4414      	add	r4, r2
 100e508:	ab1f      	add	r3, sp, #124	; 0x7c
 100e50a:	2e07      	cmp	r6, #7
 100e50c:	9425      	str	r4, [sp, #148]	; 0x94
 100e50e:	9624      	str	r6, [sp, #144]	; 0x90
 100e510:	f8c8 3000 	str.w	r3, [r8]
 100e514:	f77f ac8b 	ble.w	100de2e <_vfprintf_r+0x406>
 100e518:	aa23      	add	r2, sp, #140	; 0x8c
 100e51a:	990a      	ldr	r1, [sp, #40]	; 0x28
 100e51c:	9808      	ldr	r0, [sp, #32]
 100e51e:	f7fe fbef 	bl	100cd00 <__sprint_r>
 100e522:	b958      	cbnz	r0, 100e53c <_vfprintf_r+0xb14>
 100e524:	9c25      	ldr	r4, [sp, #148]	; 0x94
 100e526:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
 100e52a:	e482      	b.n	100de32 <_vfprintf_r+0x40a>
 100e52c:	aa23      	add	r2, sp, #140	; 0x8c
 100e52e:	990a      	ldr	r1, [sp, #40]	; 0x28
 100e530:	9808      	ldr	r0, [sp, #32]
 100e532:	f7fe fbe5 	bl	100cd00 <__sprint_r>
 100e536:	2800      	cmp	r0, #0
 100e538:	f43f acc5 	beq.w	100dec6 <_vfprintf_r+0x49e>
 100e53c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 100e540:	e6dc      	b.n	100e2fc <_vfprintf_r+0x8d4>
 100e542:	f8dd b018 	ldr.w	fp, [sp, #24]
 100e546:	2b01      	cmp	r3, #1
 100e548:	f000 8121 	beq.w	100e78e <_vfprintf_r+0xd66>
 100e54c:	2b02      	cmp	r3, #2
 100e54e:	d127      	bne.n	100e5a0 <_vfprintf_r+0xb78>
 100e550:	f8cd b018 	str.w	fp, [sp, #24]
 100e554:	2400      	movs	r4, #0
 100e556:	2500      	movs	r5, #0
 100e558:	e591      	b.n	100e07e <_vfprintf_r+0x656>
 100e55a:	aa23      	add	r2, sp, #140	; 0x8c
 100e55c:	990a      	ldr	r1, [sp, #40]	; 0x28
 100e55e:	9808      	ldr	r0, [sp, #32]
 100e560:	f7fe fbce 	bl	100cd00 <__sprint_r>
 100e564:	2800      	cmp	r0, #0
 100e566:	d1e9      	bne.n	100e53c <_vfprintf_r+0xb14>
 100e568:	9c25      	ldr	r4, [sp, #148]	; 0x94
 100e56a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
 100e56e:	e44d      	b.n	100de0c <_vfprintf_r+0x3e4>
 100e570:	aa23      	add	r2, sp, #140	; 0x8c
 100e572:	990a      	ldr	r1, [sp, #40]	; 0x28
 100e574:	9808      	ldr	r0, [sp, #32]
 100e576:	f7fe fbc3 	bl	100cd00 <__sprint_r>
 100e57a:	2800      	cmp	r0, #0
 100e57c:	d1de      	bne.n	100e53c <_vfprintf_r+0xb14>
 100e57e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 100e580:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
 100e584:	f7ff bbec 	b.w	100dd60 <_vfprintf_r+0x338>
 100e588:	aa23      	add	r2, sp, #140	; 0x8c
 100e58a:	990a      	ldr	r1, [sp, #40]	; 0x28
 100e58c:	9808      	ldr	r0, [sp, #32]
 100e58e:	f7fe fbb7 	bl	100cd00 <__sprint_r>
 100e592:	2800      	cmp	r0, #0
 100e594:	d1d2      	bne.n	100e53c <_vfprintf_r+0xb14>
 100e596:	9c25      	ldr	r4, [sp, #148]	; 0x94
 100e598:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
 100e59c:	f7ff bbf0 	b.w	100dd80 <_vfprintf_r+0x358>
 100e5a0:	f8cd b018 	str.w	fp, [sp, #24]
 100e5a4:	2400      	movs	r4, #0
 100e5a6:	2500      	movs	r5, #0
 100e5a8:	a930      	add	r1, sp, #192	; 0xc0
 100e5aa:	e000      	b.n	100e5ae <_vfprintf_r+0xb86>
 100e5ac:	4639      	mov	r1, r7
 100e5ae:	08e2      	lsrs	r2, r4, #3
 100e5b0:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 100e5b4:	08e8      	lsrs	r0, r5, #3
 100e5b6:	f004 0307 	and.w	r3, r4, #7
 100e5ba:	4605      	mov	r5, r0
 100e5bc:	4614      	mov	r4, r2
 100e5be:	3330      	adds	r3, #48	; 0x30
 100e5c0:	ea54 0205 	orrs.w	r2, r4, r5
 100e5c4:	f801 3c01 	strb.w	r3, [r1, #-1]
 100e5c8:	f101 37ff 	add.w	r7, r1, #4294967295
 100e5cc:	d1ee      	bne.n	100e5ac <_vfprintf_r+0xb84>
 100e5ce:	9a06      	ldr	r2, [sp, #24]
 100e5d0:	07d2      	lsls	r2, r2, #31
 100e5d2:	f57f ad64 	bpl.w	100e09e <_vfprintf_r+0x676>
 100e5d6:	2b30      	cmp	r3, #48	; 0x30
 100e5d8:	f43f ad61 	beq.w	100e09e <_vfprintf_r+0x676>
 100e5dc:	2330      	movs	r3, #48	; 0x30
 100e5de:	3902      	subs	r1, #2
 100e5e0:	f807 3c01 	strb.w	r3, [r7, #-1]
 100e5e4:	ab30      	add	r3, sp, #192	; 0xc0
 100e5e6:	1a5b      	subs	r3, r3, r1
 100e5e8:	930d      	str	r3, [sp, #52]	; 0x34
 100e5ea:	460f      	mov	r7, r1
 100e5ec:	f7ff bb46 	b.w	100dc7c <_vfprintf_r+0x254>
 100e5f0:	2302      	movs	r3, #2
 100e5f2:	f7ff bb25 	b.w	100dc40 <_vfprintf_r+0x218>
 100e5f6:	991d      	ldr	r1, [sp, #116]	; 0x74
 100e5f8:	2900      	cmp	r1, #0
 100e5fa:	f340 8274 	ble.w	100eae6 <_vfprintf_r+0x10be>
 100e5fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 100e600:	9a11      	ldr	r2, [sp, #68]	; 0x44
 100e602:	4293      	cmp	r3, r2
 100e604:	bfa8      	it	ge
 100e606:	4613      	movge	r3, r2
 100e608:	2b00      	cmp	r3, #0
 100e60a:	461e      	mov	r6, r3
 100e60c:	dd0d      	ble.n	100e62a <_vfprintf_r+0xc02>
 100e60e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 100e610:	f8c8 7000 	str.w	r7, [r8]
 100e614:	3301      	adds	r3, #1
 100e616:	4434      	add	r4, r6
 100e618:	2b07      	cmp	r3, #7
 100e61a:	9425      	str	r4, [sp, #148]	; 0x94
 100e61c:	f8c8 6004 	str.w	r6, [r8, #4]
 100e620:	9324      	str	r3, [sp, #144]	; 0x90
 100e622:	f300 8324 	bgt.w	100ec6e <_vfprintf_r+0x1246>
 100e626:	f108 0808 	add.w	r8, r8, #8
 100e62a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 100e62c:	2e00      	cmp	r6, #0
 100e62e:	bfa8      	it	ge
 100e630:	1b9b      	subge	r3, r3, r6
 100e632:	2b00      	cmp	r3, #0
 100e634:	461e      	mov	r6, r3
 100e636:	f340 80d0 	ble.w	100e7da <_vfprintf_r+0xdb2>
 100e63a:	2e10      	cmp	r6, #16
 100e63c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 100e63e:	4dc0      	ldr	r5, [pc, #768]	; (100e940 <_vfprintf_r+0xf18>)
 100e640:	f340 80b7 	ble.w	100e7b2 <_vfprintf_r+0xd8a>
 100e644:	4622      	mov	r2, r4
 100e646:	f04f 0a10 	mov.w	sl, #16
 100e64a:	f8dd b020 	ldr.w	fp, [sp, #32]
 100e64e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 100e650:	e005      	b.n	100e65e <_vfprintf_r+0xc36>
 100e652:	f108 0808 	add.w	r8, r8, #8
 100e656:	3e10      	subs	r6, #16
 100e658:	2e10      	cmp	r6, #16
 100e65a:	f340 80a9 	ble.w	100e7b0 <_vfprintf_r+0xd88>
 100e65e:	3301      	adds	r3, #1
 100e660:	3210      	adds	r2, #16
 100e662:	2b07      	cmp	r3, #7
 100e664:	9225      	str	r2, [sp, #148]	; 0x94
 100e666:	9324      	str	r3, [sp, #144]	; 0x90
 100e668:	e888 0420 	stmia.w	r8, {r5, sl}
 100e66c:	ddf1      	ble.n	100e652 <_vfprintf_r+0xc2a>
 100e66e:	aa23      	add	r2, sp, #140	; 0x8c
 100e670:	4621      	mov	r1, r4
 100e672:	4658      	mov	r0, fp
 100e674:	f7fe fb44 	bl	100cd00 <__sprint_r>
 100e678:	2800      	cmp	r0, #0
 100e67a:	f040 8324 	bne.w	100ecc6 <_vfprintf_r+0x129e>
 100e67e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 100e680:	9b24      	ldr	r3, [sp, #144]	; 0x90
 100e682:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
 100e686:	e7e6      	b.n	100e656 <_vfprintf_r+0xc2e>
 100e688:	2d00      	cmp	r5, #0
 100e68a:	bf08      	it	eq
 100e68c:	2c0a      	cmpeq	r4, #10
 100e68e:	d37c      	bcc.n	100e78a <_vfprintf_r+0xd62>
 100e690:	af30      	add	r7, sp, #192	; 0xc0
 100e692:	4620      	mov	r0, r4
 100e694:	4629      	mov	r1, r5
 100e696:	220a      	movs	r2, #10
 100e698:	2300      	movs	r3, #0
 100e69a:	f7fc ffb7 	bl	100b60c <__aeabi_uldivmod>
 100e69e:	3230      	adds	r2, #48	; 0x30
 100e6a0:	f807 2d01 	strb.w	r2, [r7, #-1]!
 100e6a4:	4620      	mov	r0, r4
 100e6a6:	4629      	mov	r1, r5
 100e6a8:	2300      	movs	r3, #0
 100e6aa:	220a      	movs	r2, #10
 100e6ac:	f7fc ffae 	bl	100b60c <__aeabi_uldivmod>
 100e6b0:	4604      	mov	r4, r0
 100e6b2:	460d      	mov	r5, r1
 100e6b4:	ea54 0305 	orrs.w	r3, r4, r5
 100e6b8:	d1eb      	bne.n	100e692 <_vfprintf_r+0xc6a>
 100e6ba:	ab30      	add	r3, sp, #192	; 0xc0
 100e6bc:	1bdb      	subs	r3, r3, r7
 100e6be:	930d      	str	r3, [sp, #52]	; 0x34
 100e6c0:	f7ff badc 	b.w	100dc7c <_vfprintf_r+0x254>
 100e6c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 100e6c6:	930d      	str	r3, [sp, #52]	; 0x34
 100e6c8:	af30      	add	r7, sp, #192	; 0xc0
 100e6ca:	f7ff bad7 	b.w	100dc7c <_vfprintf_r+0x254>
 100e6ce:	aa23      	add	r2, sp, #140	; 0x8c
 100e6d0:	990a      	ldr	r1, [sp, #40]	; 0x28
 100e6d2:	9808      	ldr	r0, [sp, #32]
 100e6d4:	f7fe fb14 	bl	100cd00 <__sprint_r>
 100e6d8:	2800      	cmp	r0, #0
 100e6da:	f47f af2f 	bne.w	100e53c <_vfprintf_r+0xb14>
 100e6de:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
 100e6e2:	9c25      	ldr	r4, [sp, #148]	; 0x94
 100e6e4:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
 100e6e8:	f7ff bb28 	b.w	100dd3c <_vfprintf_r+0x314>
 100e6ec:	1e5f      	subs	r7, r3, #1
 100e6ee:	2f00      	cmp	r7, #0
 100e6f0:	f77f af05 	ble.w	100e4fe <_vfprintf_r+0xad6>
 100e6f4:	2f10      	cmp	r7, #16
 100e6f6:	4d92      	ldr	r5, [pc, #584]	; (100e940 <_vfprintf_r+0xf18>)
 100e6f8:	f340 810a 	ble.w	100e910 <_vfprintf_r+0xee8>
 100e6fc:	f04f 0a10 	mov.w	sl, #16
 100e700:	f8dd b020 	ldr.w	fp, [sp, #32]
 100e704:	e005      	b.n	100e712 <_vfprintf_r+0xcea>
 100e706:	f108 0808 	add.w	r8, r8, #8
 100e70a:	3f10      	subs	r7, #16
 100e70c:	2f10      	cmp	r7, #16
 100e70e:	f340 80ff 	ble.w	100e910 <_vfprintf_r+0xee8>
 100e712:	3601      	adds	r6, #1
 100e714:	3410      	adds	r4, #16
 100e716:	2e07      	cmp	r6, #7
 100e718:	9425      	str	r4, [sp, #148]	; 0x94
 100e71a:	9624      	str	r6, [sp, #144]	; 0x90
 100e71c:	e888 0420 	stmia.w	r8, {r5, sl}
 100e720:	ddf1      	ble.n	100e706 <_vfprintf_r+0xcde>
 100e722:	aa23      	add	r2, sp, #140	; 0x8c
 100e724:	990a      	ldr	r1, [sp, #40]	; 0x28
 100e726:	4658      	mov	r0, fp
 100e728:	f7fe faea 	bl	100cd00 <__sprint_r>
 100e72c:	2800      	cmp	r0, #0
 100e72e:	f47f af05 	bne.w	100e53c <_vfprintf_r+0xb14>
 100e732:	9c25      	ldr	r4, [sp, #148]	; 0x94
 100e734:	9e24      	ldr	r6, [sp, #144]	; 0x90
 100e736:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
 100e73a:	e7e6      	b.n	100e70a <_vfprintf_r+0xce2>
 100e73c:	990e      	ldr	r1, [sp, #56]	; 0x38
 100e73e:	460a      	mov	r2, r1
 100e740:	3204      	adds	r2, #4
 100e742:	680c      	ldr	r4, [r1, #0]
 100e744:	920e      	str	r2, [sp, #56]	; 0x38
 100e746:	2500      	movs	r5, #0
 100e748:	f7ff ba7a 	b.w	100dc40 <_vfprintf_r+0x218>
 100e74c:	681c      	ldr	r4, [r3, #0]
 100e74e:	3304      	adds	r3, #4
 100e750:	930e      	str	r3, [sp, #56]	; 0x38
 100e752:	2500      	movs	r5, #0
 100e754:	e426      	b.n	100dfa4 <_vfprintf_r+0x57c>
 100e756:	3301      	adds	r3, #1
 100e758:	4434      	add	r4, r6
 100e75a:	2b07      	cmp	r3, #7
 100e75c:	9425      	str	r4, [sp, #148]	; 0x94
 100e75e:	9324      	str	r3, [sp, #144]	; 0x90
 100e760:	e888 0060 	stmia.w	r8, {r5, r6}
 100e764:	f77f ab63 	ble.w	100de2e <_vfprintf_r+0x406>
 100e768:	e6d6      	b.n	100e518 <_vfprintf_r+0xaf0>
 100e76a:	3204      	adds	r2, #4
 100e76c:	681c      	ldr	r4, [r3, #0]
 100e76e:	920e      	str	r2, [sp, #56]	; 0x38
 100e770:	2301      	movs	r3, #1
 100e772:	2500      	movs	r5, #0
 100e774:	f7ff ba64 	b.w	100dc40 <_vfprintf_r+0x218>
 100e778:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 100e77a:	6814      	ldr	r4, [r2, #0]
 100e77c:	4613      	mov	r3, r2
 100e77e:	3304      	adds	r3, #4
 100e780:	17e5      	asrs	r5, r4, #31
 100e782:	930e      	str	r3, [sp, #56]	; 0x38
 100e784:	4622      	mov	r2, r4
 100e786:	462b      	mov	r3, r5
 100e788:	e460      	b.n	100e04c <_vfprintf_r+0x624>
 100e78a:	f8dd b018 	ldr.w	fp, [sp, #24]
 100e78e:	f8cd b018 	str.w	fp, [sp, #24]
 100e792:	af40      	add	r7, sp, #256	; 0x100
 100e794:	3430      	adds	r4, #48	; 0x30
 100e796:	2301      	movs	r3, #1
 100e798:	f807 4d41 	strb.w	r4, [r7, #-65]!
 100e79c:	930d      	str	r3, [sp, #52]	; 0x34
 100e79e:	f7ff ba6d 	b.w	100dc7c <_vfprintf_r+0x254>
 100e7a2:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
 100e7a6:	f7fd fbad 	bl	100bf04 <__retarget_lock_release_recursive>
 100e7aa:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 100e7ae:	e5af      	b.n	100e310 <_vfprintf_r+0x8e8>
 100e7b0:	4614      	mov	r4, r2
 100e7b2:	3301      	adds	r3, #1
 100e7b4:	4434      	add	r4, r6
 100e7b6:	2b07      	cmp	r3, #7
 100e7b8:	9425      	str	r4, [sp, #148]	; 0x94
 100e7ba:	9324      	str	r3, [sp, #144]	; 0x90
 100e7bc:	e888 0060 	stmia.w	r8, {r5, r6}
 100e7c0:	f340 816d 	ble.w	100ea9e <_vfprintf_r+0x1076>
 100e7c4:	aa23      	add	r2, sp, #140	; 0x8c
 100e7c6:	990a      	ldr	r1, [sp, #40]	; 0x28
 100e7c8:	9808      	ldr	r0, [sp, #32]
 100e7ca:	f7fe fa99 	bl	100cd00 <__sprint_r>
 100e7ce:	2800      	cmp	r0, #0
 100e7d0:	f47f aeb4 	bne.w	100e53c <_vfprintf_r+0xb14>
 100e7d4:	9c25      	ldr	r4, [sp, #148]	; 0x94
 100e7d6:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
 100e7da:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 100e7dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 100e7de:	4293      	cmp	r3, r2
 100e7e0:	f280 8158 	bge.w	100ea94 <_vfprintf_r+0x106c>
 100e7e4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 100e7e6:	9814      	ldr	r0, [sp, #80]	; 0x50
 100e7e8:	9915      	ldr	r1, [sp, #84]	; 0x54
 100e7ea:	f8c8 1000 	str.w	r1, [r8]
 100e7ee:	3201      	adds	r2, #1
 100e7f0:	4404      	add	r4, r0
 100e7f2:	2a07      	cmp	r2, #7
 100e7f4:	9425      	str	r4, [sp, #148]	; 0x94
 100e7f6:	f8c8 0004 	str.w	r0, [r8, #4]
 100e7fa:	9224      	str	r2, [sp, #144]	; 0x90
 100e7fc:	f300 8152 	bgt.w	100eaa4 <_vfprintf_r+0x107c>
 100e800:	f108 0808 	add.w	r8, r8, #8
 100e804:	9a11      	ldr	r2, [sp, #68]	; 0x44
 100e806:	9910      	ldr	r1, [sp, #64]	; 0x40
 100e808:	1ad3      	subs	r3, r2, r3
 100e80a:	1a56      	subs	r6, r2, r1
 100e80c:	429e      	cmp	r6, r3
 100e80e:	bfa8      	it	ge
 100e810:	461e      	movge	r6, r3
 100e812:	2e00      	cmp	r6, #0
 100e814:	dd0e      	ble.n	100e834 <_vfprintf_r+0xe0c>
 100e816:	9a24      	ldr	r2, [sp, #144]	; 0x90
 100e818:	f8c8 6004 	str.w	r6, [r8, #4]
 100e81c:	3201      	adds	r2, #1
 100e81e:	440f      	add	r7, r1
 100e820:	4434      	add	r4, r6
 100e822:	2a07      	cmp	r2, #7
 100e824:	f8c8 7000 	str.w	r7, [r8]
 100e828:	9425      	str	r4, [sp, #148]	; 0x94
 100e82a:	9224      	str	r2, [sp, #144]	; 0x90
 100e82c:	f300 823c 	bgt.w	100eca8 <_vfprintf_r+0x1280>
 100e830:	f108 0808 	add.w	r8, r8, #8
 100e834:	2e00      	cmp	r6, #0
 100e836:	bfac      	ite	ge
 100e838:	1b9e      	subge	r6, r3, r6
 100e83a:	461e      	movlt	r6, r3
 100e83c:	2e00      	cmp	r6, #0
 100e83e:	f77f aaf8 	ble.w	100de32 <_vfprintf_r+0x40a>
 100e842:	2e10      	cmp	r6, #16
 100e844:	9b24      	ldr	r3, [sp, #144]	; 0x90
 100e846:	4d3e      	ldr	r5, [pc, #248]	; (100e940 <_vfprintf_r+0xf18>)
 100e848:	dd85      	ble.n	100e756 <_vfprintf_r+0xd2e>
 100e84a:	2710      	movs	r7, #16
 100e84c:	f8dd a020 	ldr.w	sl, [sp, #32]
 100e850:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 100e854:	e005      	b.n	100e862 <_vfprintf_r+0xe3a>
 100e856:	f108 0808 	add.w	r8, r8, #8
 100e85a:	3e10      	subs	r6, #16
 100e85c:	2e10      	cmp	r6, #16
 100e85e:	f77f af7a 	ble.w	100e756 <_vfprintf_r+0xd2e>
 100e862:	3301      	adds	r3, #1
 100e864:	3410      	adds	r4, #16
 100e866:	2b07      	cmp	r3, #7
 100e868:	9425      	str	r4, [sp, #148]	; 0x94
 100e86a:	9324      	str	r3, [sp, #144]	; 0x90
 100e86c:	e888 00a0 	stmia.w	r8, {r5, r7}
 100e870:	ddf1      	ble.n	100e856 <_vfprintf_r+0xe2e>
 100e872:	aa23      	add	r2, sp, #140	; 0x8c
 100e874:	4659      	mov	r1, fp
 100e876:	4650      	mov	r0, sl
 100e878:	f7fe fa42 	bl	100cd00 <__sprint_r>
 100e87c:	2800      	cmp	r0, #0
 100e87e:	f040 8176 	bne.w	100eb6e <_vfprintf_r+0x1146>
 100e882:	9c25      	ldr	r4, [sp, #148]	; 0x94
 100e884:	9b24      	ldr	r3, [sp, #144]	; 0x90
 100e886:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
 100e88a:	e7e6      	b.n	100e85a <_vfprintf_r+0xe32>
 100e88c:	9b06      	ldr	r3, [sp, #24]
 100e88e:	07d8      	lsls	r0, r3, #31
 100e890:	f53f adff 	bmi.w	100e492 <_vfprintf_r+0xa6a>
 100e894:	3601      	adds	r6, #1
 100e896:	3401      	adds	r4, #1
 100e898:	2301      	movs	r3, #1
 100e89a:	2e07      	cmp	r6, #7
 100e89c:	9425      	str	r4, [sp, #148]	; 0x94
 100e89e:	9624      	str	r6, [sp, #144]	; 0x90
 100e8a0:	f8c8 7000 	str.w	r7, [r8]
 100e8a4:	f8c8 3004 	str.w	r3, [r8, #4]
 100e8a8:	f77f ae27 	ble.w	100e4fa <_vfprintf_r+0xad2>
 100e8ac:	aa23      	add	r2, sp, #140	; 0x8c
 100e8ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 100e8b0:	9808      	ldr	r0, [sp, #32]
 100e8b2:	f7fe fa25 	bl	100cd00 <__sprint_r>
 100e8b6:	2800      	cmp	r0, #0
 100e8b8:	f47f ae40 	bne.w	100e53c <_vfprintf_r+0xb14>
 100e8bc:	9c25      	ldr	r4, [sp, #148]	; 0x94
 100e8be:	9e24      	ldr	r6, [sp, #144]	; 0x90
 100e8c0:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
 100e8c4:	e61b      	b.n	100e4fe <_vfprintf_r+0xad6>
 100e8c6:	aa23      	add	r2, sp, #140	; 0x8c
 100e8c8:	990a      	ldr	r1, [sp, #40]	; 0x28
 100e8ca:	9808      	ldr	r0, [sp, #32]
 100e8cc:	f7fe fa18 	bl	100cd00 <__sprint_r>
 100e8d0:	2800      	cmp	r0, #0
 100e8d2:	f47f ae33 	bne.w	100e53c <_vfprintf_r+0xb14>
 100e8d6:	9c25      	ldr	r4, [sp, #148]	; 0x94
 100e8d8:	9e24      	ldr	r6, [sp, #144]	; 0x90
 100e8da:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
 100e8de:	e5e6      	b.n	100e4ae <_vfprintf_r+0xa86>
 100e8e0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 100e8e2:	3507      	adds	r5, #7
 100e8e4:	f025 0507 	bic.w	r5, r5, #7
 100e8e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 100e8ec:	f105 0108 	add.w	r1, r5, #8
 100e8f0:	910e      	str	r1, [sp, #56]	; 0x38
 100e8f2:	4614      	mov	r4, r2
 100e8f4:	461d      	mov	r5, r3
 100e8f6:	f7ff bba9 	b.w	100e04c <_vfprintf_r+0x624>
 100e8fa:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 100e8fc:	3507      	adds	r5, #7
 100e8fe:	f025 0307 	bic.w	r3, r5, #7
 100e902:	f103 0208 	add.w	r2, r3, #8
 100e906:	920e      	str	r2, [sp, #56]	; 0x38
 100e908:	e9d3 4500 	ldrd	r4, r5, [r3]
 100e90c:	f7ff bb4a 	b.w	100dfa4 <_vfprintf_r+0x57c>
 100e910:	3601      	adds	r6, #1
 100e912:	443c      	add	r4, r7
 100e914:	2e07      	cmp	r6, #7
 100e916:	9425      	str	r4, [sp, #148]	; 0x94
 100e918:	9624      	str	r6, [sp, #144]	; 0x90
 100e91a:	e888 00a0 	stmia.w	r8, {r5, r7}
 100e91e:	f77f adec 	ble.w	100e4fa <_vfprintf_r+0xad2>
 100e922:	e7c3      	b.n	100e8ac <_vfprintf_r+0xe84>
 100e924:	aa23      	add	r2, sp, #140	; 0x8c
 100e926:	990a      	ldr	r1, [sp, #40]	; 0x28
 100e928:	9808      	ldr	r0, [sp, #32]
 100e92a:	f7fe f9e9 	bl	100cd00 <__sprint_r>
 100e92e:	2800      	cmp	r0, #0
 100e930:	f47f ae04 	bne.w	100e53c <_vfprintf_r+0xb14>
 100e934:	9c25      	ldr	r4, [sp, #148]	; 0x94
 100e936:	9e24      	ldr	r6, [sp, #144]	; 0x90
 100e938:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
 100e93c:	e5c6      	b.n	100e4cc <_vfprintf_r+0xaa4>
 100e93e:	bf00      	nop
 100e940:	010223a8 	.word	0x010223a8
 100e944:	af30      	add	r7, sp, #192	; 0xc0
 100e946:	f7ff b999 	b.w	100dc7c <_vfprintf_r+0x254>
 100e94a:	aa23      	add	r2, sp, #140	; 0x8c
 100e94c:	990a      	ldr	r1, [sp, #40]	; 0x28
 100e94e:	9808      	ldr	r0, [sp, #32]
 100e950:	f7fe f9d6 	bl	100cd00 <__sprint_r>
 100e954:	2800      	cmp	r0, #0
 100e956:	f47f adf1 	bne.w	100e53c <_vfprintf_r+0xb14>
 100e95a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 100e95c:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
 100e960:	f7ff ba11 	b.w	100dd86 <_vfprintf_r+0x35e>
 100e964:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 100e968:	4264      	negs	r4, r4
 100e96a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 100e96e:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
 100e972:	2301      	movs	r3, #1
 100e974:	f7ff b968 	b.w	100dc48 <_vfprintf_r+0x220>
 100e978:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 100e97a:	4622      	mov	r2, r4
 100e97c:	4620      	mov	r0, r4
 100e97e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 100e980:	4623      	mov	r3, r4
 100e982:	4621      	mov	r1, r4
 100e984:	f002 ffba 	bl	10118fc <__aeabi_dcmpun>
 100e988:	2800      	cmp	r0, #0
 100e98a:	f040 828c 	bne.w	100eea6 <_vfprintf_r+0x147e>
 100e98e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 100e990:	3301      	adds	r3, #1
 100e992:	f026 0320 	bic.w	r3, r6, #32
 100e996:	930d      	str	r3, [sp, #52]	; 0x34
 100e998:	f000 8091 	beq.w	100eabe <_vfprintf_r+0x1096>
 100e99c:	2b47      	cmp	r3, #71	; 0x47
 100e99e:	d104      	bne.n	100e9aa <_vfprintf_r+0xf82>
 100e9a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 100e9a2:	2b00      	cmp	r3, #0
 100e9a4:	bf08      	it	eq
 100e9a6:	2301      	moveq	r3, #1
 100e9a8:	9309      	str	r3, [sp, #36]	; 0x24
 100e9aa:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 100e9ae:	9306      	str	r3, [sp, #24]
 100e9b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 100e9b2:	f1b3 0a00 	subs.w	sl, r3, #0
 100e9b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 100e9b8:	9307      	str	r3, [sp, #28]
 100e9ba:	bfbb      	ittet	lt
 100e9bc:	4653      	movlt	r3, sl
 100e9be:	f103 4a00 	addlt.w	sl, r3, #2147483648	; 0x80000000
 100e9c2:	2300      	movge	r3, #0
 100e9c4:	232d      	movlt	r3, #45	; 0x2d
 100e9c6:	2e66      	cmp	r6, #102	; 0x66
 100e9c8:	930f      	str	r3, [sp, #60]	; 0x3c
 100e9ca:	f000 817f 	beq.w	100eccc <_vfprintf_r+0x12a4>
 100e9ce:	2e46      	cmp	r6, #70	; 0x46
 100e9d0:	f000 81d4 	beq.w	100ed7c <_vfprintf_r+0x1354>
 100e9d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 100e9d6:	9a07      	ldr	r2, [sp, #28]
 100e9d8:	2b45      	cmp	r3, #69	; 0x45
 100e9da:	bf0c      	ite	eq
 100e9dc:	9b09      	ldreq	r3, [sp, #36]	; 0x24
 100e9de:	9d09      	ldrne	r5, [sp, #36]	; 0x24
 100e9e0:	a821      	add	r0, sp, #132	; 0x84
 100e9e2:	a91e      	add	r1, sp, #120	; 0x78
 100e9e4:	bf08      	it	eq
 100e9e6:	1c5d      	addeq	r5, r3, #1
 100e9e8:	9004      	str	r0, [sp, #16]
 100e9ea:	9103      	str	r1, [sp, #12]
 100e9ec:	a81d      	add	r0, sp, #116	; 0x74
 100e9ee:	2102      	movs	r1, #2
 100e9f0:	9002      	str	r0, [sp, #8]
 100e9f2:	4653      	mov	r3, sl
 100e9f4:	9501      	str	r5, [sp, #4]
 100e9f6:	9100      	str	r1, [sp, #0]
 100e9f8:	9808      	ldr	r0, [sp, #32]
 100e9fa:	f000 fc41 	bl	100f280 <_dtoa_r>
 100e9fe:	2e67      	cmp	r6, #103	; 0x67
 100ea00:	4607      	mov	r7, r0
 100ea02:	f040 81af 	bne.w	100ed64 <_vfprintf_r+0x133c>
 100ea06:	f01b 0f01 	tst.w	fp, #1
 100ea0a:	f000 8213 	beq.w	100ee34 <_vfprintf_r+0x140c>
 100ea0e:	197c      	adds	r4, r7, r5
 100ea10:	9a16      	ldr	r2, [sp, #88]	; 0x58
 100ea12:	9807      	ldr	r0, [sp, #28]
 100ea14:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 100ea16:	4651      	mov	r1, sl
 100ea18:	f002 ff3e 	bl	1011898 <__aeabi_dcmpeq>
 100ea1c:	2800      	cmp	r0, #0
 100ea1e:	f040 8132 	bne.w	100ec86 <_vfprintf_r+0x125e>
 100ea22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 100ea24:	42a3      	cmp	r3, r4
 100ea26:	d206      	bcs.n	100ea36 <_vfprintf_r+0x100e>
 100ea28:	2130      	movs	r1, #48	; 0x30
 100ea2a:	1c5a      	adds	r2, r3, #1
 100ea2c:	9221      	str	r2, [sp, #132]	; 0x84
 100ea2e:	7019      	strb	r1, [r3, #0]
 100ea30:	9b21      	ldr	r3, [sp, #132]	; 0x84
 100ea32:	429c      	cmp	r4, r3
 100ea34:	d8f9      	bhi.n	100ea2a <_vfprintf_r+0x1002>
 100ea36:	1bdb      	subs	r3, r3, r7
 100ea38:	9311      	str	r3, [sp, #68]	; 0x44
 100ea3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 100ea3c:	2b47      	cmp	r3, #71	; 0x47
 100ea3e:	f000 80b9 	beq.w	100ebb4 <_vfprintf_r+0x118c>
 100ea42:	2e65      	cmp	r6, #101	; 0x65
 100ea44:	f340 8276 	ble.w	100ef34 <_vfprintf_r+0x150c>
 100ea48:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 100ea4a:	9310      	str	r3, [sp, #64]	; 0x40
 100ea4c:	2e66      	cmp	r6, #102	; 0x66
 100ea4e:	f000 8162 	beq.w	100ed16 <_vfprintf_r+0x12ee>
 100ea52:	9b11      	ldr	r3, [sp, #68]	; 0x44
 100ea54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 100ea56:	4619      	mov	r1, r3
 100ea58:	4291      	cmp	r1, r2
 100ea5a:	f300 814f 	bgt.w	100ecfc <_vfprintf_r+0x12d4>
 100ea5e:	f01b 0f01 	tst.w	fp, #1
 100ea62:	f040 8209 	bne.w	100ee78 <_vfprintf_r+0x1450>
 100ea66:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 100ea6a:	9307      	str	r3, [sp, #28]
 100ea6c:	920d      	str	r2, [sp, #52]	; 0x34
 100ea6e:	2667      	movs	r6, #103	; 0x67
 100ea70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 100ea72:	2b00      	cmp	r3, #0
 100ea74:	f040 8096 	bne.w	100eba4 <_vfprintf_r+0x117c>
 100ea78:	9309      	str	r3, [sp, #36]	; 0x24
 100ea7a:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
 100ea7e:	f7ff b905 	b.w	100dc8c <_vfprintf_r+0x264>
 100ea82:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
 100ea86:	f7fd fa3d 	bl	100bf04 <__retarget_lock_release_recursive>
 100ea8a:	f04f 33ff 	mov.w	r3, #4294967295
 100ea8e:	930b      	str	r3, [sp, #44]	; 0x2c
 100ea90:	f7ff ba30 	b.w	100def4 <_vfprintf_r+0x4cc>
 100ea94:	9a06      	ldr	r2, [sp, #24]
 100ea96:	07d5      	lsls	r5, r2, #31
 100ea98:	f57f aeb4 	bpl.w	100e804 <_vfprintf_r+0xddc>
 100ea9c:	e6a2      	b.n	100e7e4 <_vfprintf_r+0xdbc>
 100ea9e:	f108 0808 	add.w	r8, r8, #8
 100eaa2:	e69a      	b.n	100e7da <_vfprintf_r+0xdb2>
 100eaa4:	aa23      	add	r2, sp, #140	; 0x8c
 100eaa6:	990a      	ldr	r1, [sp, #40]	; 0x28
 100eaa8:	9808      	ldr	r0, [sp, #32]
 100eaaa:	f7fe f929 	bl	100cd00 <__sprint_r>
 100eaae:	2800      	cmp	r0, #0
 100eab0:	f47f ad44 	bne.w	100e53c <_vfprintf_r+0xb14>
 100eab4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 100eab6:	9c25      	ldr	r4, [sp, #148]	; 0x94
 100eab8:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
 100eabc:	e6a2      	b.n	100e804 <_vfprintf_r+0xddc>
 100eabe:	2306      	movs	r3, #6
 100eac0:	9309      	str	r3, [sp, #36]	; 0x24
 100eac2:	e772      	b.n	100e9aa <_vfprintf_r+0xf82>
 100eac4:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 100eac8:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
 100eacc:	f7ff bbc7 	b.w	100e25e <_vfprintf_r+0x836>
 100ead0:	aa23      	add	r2, sp, #140	; 0x8c
 100ead2:	990a      	ldr	r1, [sp, #40]	; 0x28
 100ead4:	9808      	ldr	r0, [sp, #32]
 100ead6:	f7fe f913 	bl	100cd00 <__sprint_r>
 100eada:	2800      	cmp	r0, #0
 100eadc:	f47f ad2e 	bne.w	100e53c <_vfprintf_r+0xb14>
 100eae0:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
 100eae4:	e437      	b.n	100e356 <_vfprintf_r+0x92e>
 100eae6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 100eae8:	4ab4      	ldr	r2, [pc, #720]	; (100edbc <_vfprintf_r+0x1394>)
 100eaea:	f8c8 2000 	str.w	r2, [r8]
 100eaee:	3301      	adds	r3, #1
 100eaf0:	3401      	adds	r4, #1
 100eaf2:	2201      	movs	r2, #1
 100eaf4:	2b07      	cmp	r3, #7
 100eaf6:	9425      	str	r4, [sp, #148]	; 0x94
 100eaf8:	9324      	str	r3, [sp, #144]	; 0x90
 100eafa:	f8c8 2004 	str.w	r2, [r8, #4]
 100eafe:	f300 8124 	bgt.w	100ed4a <_vfprintf_r+0x1322>
 100eb02:	f108 0808 	add.w	r8, r8, #8
 100eb06:	b929      	cbnz	r1, 100eb14 <_vfprintf_r+0x10ec>
 100eb08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 100eb0a:	b91b      	cbnz	r3, 100eb14 <_vfprintf_r+0x10ec>
 100eb0c:	9b06      	ldr	r3, [sp, #24]
 100eb0e:	07de      	lsls	r6, r3, #31
 100eb10:	f57f a98f 	bpl.w	100de32 <_vfprintf_r+0x40a>
 100eb14:	9b24      	ldr	r3, [sp, #144]	; 0x90
 100eb16:	9814      	ldr	r0, [sp, #80]	; 0x50
 100eb18:	9a15      	ldr	r2, [sp, #84]	; 0x54
 100eb1a:	f8c8 2000 	str.w	r2, [r8]
 100eb1e:	3301      	adds	r3, #1
 100eb20:	4602      	mov	r2, r0
 100eb22:	4422      	add	r2, r4
 100eb24:	2b07      	cmp	r3, #7
 100eb26:	9225      	str	r2, [sp, #148]	; 0x94
 100eb28:	f8c8 0004 	str.w	r0, [r8, #4]
 100eb2c:	9324      	str	r3, [sp, #144]	; 0x90
 100eb2e:	f300 8169 	bgt.w	100ee04 <_vfprintf_r+0x13dc>
 100eb32:	f108 0808 	add.w	r8, r8, #8
 100eb36:	2900      	cmp	r1, #0
 100eb38:	f2c0 8136 	blt.w	100eda8 <_vfprintf_r+0x1380>
 100eb3c:	9911      	ldr	r1, [sp, #68]	; 0x44
 100eb3e:	f8c8 7000 	str.w	r7, [r8]
 100eb42:	3301      	adds	r3, #1
 100eb44:	188c      	adds	r4, r1, r2
 100eb46:	2b07      	cmp	r3, #7
 100eb48:	9425      	str	r4, [sp, #148]	; 0x94
 100eb4a:	9324      	str	r3, [sp, #144]	; 0x90
 100eb4c:	f8c8 1004 	str.w	r1, [r8, #4]
 100eb50:	f77f a96d 	ble.w	100de2e <_vfprintf_r+0x406>
 100eb54:	e4e0      	b.n	100e518 <_vfprintf_r+0xaf0>
 100eb56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 100eb58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 100eb5a:	6813      	ldr	r3, [r2, #0]
 100eb5c:	17cd      	asrs	r5, r1, #31
 100eb5e:	4608      	mov	r0, r1
 100eb60:	3204      	adds	r2, #4
 100eb62:	4629      	mov	r1, r5
 100eb64:	920e      	str	r2, [sp, #56]	; 0x38
 100eb66:	e9c3 0100 	strd	r0, r1, [r3]
 100eb6a:	f7fe bfa9 	b.w	100dac0 <_vfprintf_r+0x98>
 100eb6e:	46da      	mov	sl, fp
 100eb70:	f7ff bbc4 	b.w	100e2fc <_vfprintf_r+0x8d4>
 100eb74:	aa23      	add	r2, sp, #140	; 0x8c
 100eb76:	990a      	ldr	r1, [sp, #40]	; 0x28
 100eb78:	9808      	ldr	r0, [sp, #32]
 100eb7a:	f7fe f8c1 	bl	100cd00 <__sprint_r>
 100eb7e:	2800      	cmp	r0, #0
 100eb80:	f47f acdc 	bne.w	100e53c <_vfprintf_r+0xb14>
 100eb84:	9c25      	ldr	r4, [sp, #148]	; 0x94
 100eb86:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
 100eb8a:	f7ff bbfd 	b.w	100e388 <_vfprintf_r+0x960>
 100eb8e:	4638      	mov	r0, r7
 100eb90:	9409      	str	r4, [sp, #36]	; 0x24
 100eb92:	f7fd ffd5 	bl	100cb40 <strlen>
 100eb96:	950e      	str	r5, [sp, #56]	; 0x38
 100eb98:	900d      	str	r0, [sp, #52]	; 0x34
 100eb9a:	f8cd b018 	str.w	fp, [sp, #24]
 100eb9e:	4603      	mov	r3, r0
 100eba0:	f7ff ba36 	b.w	100e010 <_vfprintf_r+0x5e8>
 100eba4:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 100eba8:	2300      	movs	r3, #0
 100ebaa:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
 100ebae:	9309      	str	r3, [sp, #36]	; 0x24
 100ebb0:	f7ff b86f 	b.w	100dc92 <_vfprintf_r+0x26a>
 100ebb4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 100ebb6:	9310      	str	r3, [sp, #64]	; 0x40
 100ebb8:	461a      	mov	r2, r3
 100ebba:	3303      	adds	r3, #3
 100ebbc:	db04      	blt.n	100ebc8 <_vfprintf_r+0x11a0>
 100ebbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 100ebc0:	4619      	mov	r1, r3
 100ebc2:	4291      	cmp	r1, r2
 100ebc4:	f6bf af45 	bge.w	100ea52 <_vfprintf_r+0x102a>
 100ebc8:	3e02      	subs	r6, #2
 100ebca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 100ebcc:	f88d 607c 	strb.w	r6, [sp, #124]	; 0x7c
 100ebd0:	3b01      	subs	r3, #1
 100ebd2:	2b00      	cmp	r3, #0
 100ebd4:	931d      	str	r3, [sp, #116]	; 0x74
 100ebd6:	bfbd      	ittte	lt
 100ebd8:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 100ebda:	f1c3 0301 	rsblt	r3, r3, #1
 100ebde:	222d      	movlt	r2, #45	; 0x2d
 100ebe0:	222b      	movge	r2, #43	; 0x2b
 100ebe2:	2b09      	cmp	r3, #9
 100ebe4:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
 100ebe8:	f340 813e 	ble.w	100ee68 <_vfprintf_r+0x1440>
 100ebec:	f10d 048b 	add.w	r4, sp, #139	; 0x8b
 100ebf0:	4620      	mov	r0, r4
 100ebf2:	4d73      	ldr	r5, [pc, #460]	; (100edc0 <_vfprintf_r+0x1398>)
 100ebf4:	e000      	b.n	100ebf8 <_vfprintf_r+0x11d0>
 100ebf6:	4610      	mov	r0, r2
 100ebf8:	fb85 1203 	smull	r1, r2, r5, r3
 100ebfc:	17d9      	asrs	r1, r3, #31
 100ebfe:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
 100ec02:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 100ec06:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
 100ec0a:	3230      	adds	r2, #48	; 0x30
 100ec0c:	2909      	cmp	r1, #9
 100ec0e:	f800 2c01 	strb.w	r2, [r0, #-1]
 100ec12:	460b      	mov	r3, r1
 100ec14:	f100 32ff 	add.w	r2, r0, #4294967295
 100ec18:	dced      	bgt.n	100ebf6 <_vfprintf_r+0x11ce>
 100ec1a:	3330      	adds	r3, #48	; 0x30
 100ec1c:	3802      	subs	r0, #2
 100ec1e:	b2d9      	uxtb	r1, r3
 100ec20:	4284      	cmp	r4, r0
 100ec22:	f802 1c01 	strb.w	r1, [r2, #-1]
 100ec26:	f240 8190 	bls.w	100ef4a <_vfprintf_r+0x1522>
 100ec2a:	f10d 007e 	add.w	r0, sp, #126	; 0x7e
 100ec2e:	4613      	mov	r3, r2
 100ec30:	e001      	b.n	100ec36 <_vfprintf_r+0x120e>
 100ec32:	f813 1b01 	ldrb.w	r1, [r3], #1
 100ec36:	f800 1b01 	strb.w	r1, [r0], #1
 100ec3a:	42a3      	cmp	r3, r4
 100ec3c:	d1f9      	bne.n	100ec32 <_vfprintf_r+0x120a>
 100ec3e:	3301      	adds	r3, #1
 100ec40:	1a9b      	subs	r3, r3, r2
 100ec42:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
 100ec46:	4413      	add	r3, r2
 100ec48:	aa1f      	add	r2, sp, #124	; 0x7c
 100ec4a:	1a9b      	subs	r3, r3, r2
 100ec4c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 100ec4e:	9319      	str	r3, [sp, #100]	; 0x64
 100ec50:	2a01      	cmp	r2, #1
 100ec52:	4413      	add	r3, r2
 100ec54:	930d      	str	r3, [sp, #52]	; 0x34
 100ec56:	f340 8145 	ble.w	100eee4 <_vfprintf_r+0x14bc>
 100ec5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 100ec5c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 100ec5e:	4413      	add	r3, r2
 100ec60:	930d      	str	r3, [sp, #52]	; 0x34
 100ec62:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 100ec66:	9307      	str	r3, [sp, #28]
 100ec68:	2300      	movs	r3, #0
 100ec6a:	9310      	str	r3, [sp, #64]	; 0x40
 100ec6c:	e700      	b.n	100ea70 <_vfprintf_r+0x1048>
 100ec6e:	aa23      	add	r2, sp, #140	; 0x8c
 100ec70:	990a      	ldr	r1, [sp, #40]	; 0x28
 100ec72:	9808      	ldr	r0, [sp, #32]
 100ec74:	f7fe f844 	bl	100cd00 <__sprint_r>
 100ec78:	2800      	cmp	r0, #0
 100ec7a:	f47f ac5f 	bne.w	100e53c <_vfprintf_r+0xb14>
 100ec7e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 100ec80:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
 100ec84:	e4d1      	b.n	100e62a <_vfprintf_r+0xc02>
 100ec86:	4623      	mov	r3, r4
 100ec88:	e6d5      	b.n	100ea36 <_vfprintf_r+0x100e>
 100ec8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 100ec8c:	9710      	str	r7, [sp, #64]	; 0x40
 100ec8e:	2b06      	cmp	r3, #6
 100ec90:	bf28      	it	cs
 100ec92:	2306      	movcs	r3, #6
 100ec94:	9709      	str	r7, [sp, #36]	; 0x24
 100ec96:	46ba      	mov	sl, r7
 100ec98:	9307      	str	r3, [sp, #28]
 100ec9a:	950e      	str	r5, [sp, #56]	; 0x38
 100ec9c:	f8cd b018 	str.w	fp, [sp, #24]
 100eca0:	930d      	str	r3, [sp, #52]	; 0x34
 100eca2:	4f48      	ldr	r7, [pc, #288]	; (100edc4 <_vfprintf_r+0x139c>)
 100eca4:	f7fe bff2 	b.w	100dc8c <_vfprintf_r+0x264>
 100eca8:	aa23      	add	r2, sp, #140	; 0x8c
 100ecaa:	990a      	ldr	r1, [sp, #40]	; 0x28
 100ecac:	9808      	ldr	r0, [sp, #32]
 100ecae:	f7fe f827 	bl	100cd00 <__sprint_r>
 100ecb2:	2800      	cmp	r0, #0
 100ecb4:	f47f ac42 	bne.w	100e53c <_vfprintf_r+0xb14>
 100ecb8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 100ecba:	9a11      	ldr	r2, [sp, #68]	; 0x44
 100ecbc:	9c25      	ldr	r4, [sp, #148]	; 0x94
 100ecbe:	1ad3      	subs	r3, r2, r3
 100ecc0:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
 100ecc4:	e5b6      	b.n	100e834 <_vfprintf_r+0xe0c>
 100ecc6:	46a2      	mov	sl, r4
 100ecc8:	f7ff bb18 	b.w	100e2fc <_vfprintf_r+0x8d4>
 100eccc:	a821      	add	r0, sp, #132	; 0x84
 100ecce:	a91e      	add	r1, sp, #120	; 0x78
 100ecd0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 100ecd2:	9004      	str	r0, [sp, #16]
 100ecd4:	9103      	str	r1, [sp, #12]
 100ecd6:	a81d      	add	r0, sp, #116	; 0x74
 100ecd8:	2103      	movs	r1, #3
 100ecda:	9002      	str	r0, [sp, #8]
 100ecdc:	9a07      	ldr	r2, [sp, #28]
 100ecde:	9501      	str	r5, [sp, #4]
 100ece0:	4653      	mov	r3, sl
 100ece2:	9100      	str	r1, [sp, #0]
 100ece4:	9808      	ldr	r0, [sp, #32]
 100ece6:	f000 facb 	bl	100f280 <_dtoa_r>
 100ecea:	4607      	mov	r7, r0
 100ecec:	1944      	adds	r4, r0, r5
 100ecee:	783b      	ldrb	r3, [r7, #0]
 100ecf0:	2b30      	cmp	r3, #48	; 0x30
 100ecf2:	f000 80ca 	beq.w	100ee8a <_vfprintf_r+0x1462>
 100ecf6:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 100ecf8:	442c      	add	r4, r5
 100ecfa:	e689      	b.n	100ea10 <_vfprintf_r+0xfe8>
 100ecfc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 100ecfe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 100ed00:	4413      	add	r3, r2
 100ed02:	9a10      	ldr	r2, [sp, #64]	; 0x40
 100ed04:	930d      	str	r3, [sp, #52]	; 0x34
 100ed06:	2a00      	cmp	r2, #0
 100ed08:	f340 80e4 	ble.w	100eed4 <_vfprintf_r+0x14ac>
 100ed0c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 100ed10:	9307      	str	r3, [sp, #28]
 100ed12:	2667      	movs	r6, #103	; 0x67
 100ed14:	e6ac      	b.n	100ea70 <_vfprintf_r+0x1048>
 100ed16:	2b00      	cmp	r3, #0
 100ed18:	f340 80fb 	ble.w	100ef12 <_vfprintf_r+0x14ea>
 100ed1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 100ed1e:	2a00      	cmp	r2, #0
 100ed20:	f040 80ce 	bne.w	100eec0 <_vfprintf_r+0x1498>
 100ed24:	f01b 0f01 	tst.w	fp, #1
 100ed28:	f040 80ca 	bne.w	100eec0 <_vfprintf_r+0x1498>
 100ed2c:	9307      	str	r3, [sp, #28]
 100ed2e:	930d      	str	r3, [sp, #52]	; 0x34
 100ed30:	e69e      	b.n	100ea70 <_vfprintf_r+0x1048>
 100ed32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 100ed34:	9307      	str	r3, [sp, #28]
 100ed36:	930d      	str	r3, [sp, #52]	; 0x34
 100ed38:	9009      	str	r0, [sp, #36]	; 0x24
 100ed3a:	950e      	str	r5, [sp, #56]	; 0x38
 100ed3c:	f8cd b018 	str.w	fp, [sp, #24]
 100ed40:	9010      	str	r0, [sp, #64]	; 0x40
 100ed42:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
 100ed46:	f7fe bfa1 	b.w	100dc8c <_vfprintf_r+0x264>
 100ed4a:	aa23      	add	r2, sp, #140	; 0x8c
 100ed4c:	990a      	ldr	r1, [sp, #40]	; 0x28
 100ed4e:	9808      	ldr	r0, [sp, #32]
 100ed50:	f7fd ffd6 	bl	100cd00 <__sprint_r>
 100ed54:	2800      	cmp	r0, #0
 100ed56:	f47f abf1 	bne.w	100e53c <_vfprintf_r+0xb14>
 100ed5a:	991d      	ldr	r1, [sp, #116]	; 0x74
 100ed5c:	9c25      	ldr	r4, [sp, #148]	; 0x94
 100ed5e:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
 100ed62:	e6d0      	b.n	100eb06 <_vfprintf_r+0x10de>
 100ed64:	2e47      	cmp	r6, #71	; 0x47
 100ed66:	f47f ae52 	bne.w	100ea0e <_vfprintf_r+0xfe6>
 100ed6a:	f01b 0f01 	tst.w	fp, #1
 100ed6e:	f000 80da 	beq.w	100ef26 <_vfprintf_r+0x14fe>
 100ed72:	2e46      	cmp	r6, #70	; 0x46
 100ed74:	eb07 0405 	add.w	r4, r7, r5
 100ed78:	d0b9      	beq.n	100ecee <_vfprintf_r+0x12c6>
 100ed7a:	e649      	b.n	100ea10 <_vfprintf_r+0xfe8>
 100ed7c:	a821      	add	r0, sp, #132	; 0x84
 100ed7e:	a91e      	add	r1, sp, #120	; 0x78
 100ed80:	9c09      	ldr	r4, [sp, #36]	; 0x24
 100ed82:	9004      	str	r0, [sp, #16]
 100ed84:	9103      	str	r1, [sp, #12]
 100ed86:	a81d      	add	r0, sp, #116	; 0x74
 100ed88:	2103      	movs	r1, #3
 100ed8a:	9002      	str	r0, [sp, #8]
 100ed8c:	9a07      	ldr	r2, [sp, #28]
 100ed8e:	9401      	str	r4, [sp, #4]
 100ed90:	4653      	mov	r3, sl
 100ed92:	9100      	str	r1, [sp, #0]
 100ed94:	9808      	ldr	r0, [sp, #32]
 100ed96:	f000 fa73 	bl	100f280 <_dtoa_r>
 100ed9a:	4625      	mov	r5, r4
 100ed9c:	4607      	mov	r7, r0
 100ed9e:	e7e8      	b.n	100ed72 <_vfprintf_r+0x134a>
 100eda0:	2300      	movs	r3, #0
 100eda2:	9309      	str	r3, [sp, #36]	; 0x24
 100eda4:	f7fe bec1 	b.w	100db2a <_vfprintf_r+0x102>
 100eda8:	424e      	negs	r6, r1
 100edaa:	3110      	adds	r1, #16
 100edac:	4d06      	ldr	r5, [pc, #24]	; (100edc8 <_vfprintf_r+0x13a0>)
 100edae:	da43      	bge.n	100ee38 <_vfprintf_r+0x1410>
 100edb0:	2410      	movs	r4, #16
 100edb2:	f8dd a020 	ldr.w	sl, [sp, #32]
 100edb6:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 100edba:	e00c      	b.n	100edd6 <_vfprintf_r+0x13ae>
 100edbc:	01022394 	.word	0x01022394
 100edc0:	66666667 	.word	0x66666667
 100edc4:	0102235c 	.word	0x0102235c
 100edc8:	010223a8 	.word	0x010223a8
 100edcc:	f108 0808 	add.w	r8, r8, #8
 100edd0:	3e10      	subs	r6, #16
 100edd2:	2e10      	cmp	r6, #16
 100edd4:	dd30      	ble.n	100ee38 <_vfprintf_r+0x1410>
 100edd6:	3301      	adds	r3, #1
 100edd8:	3210      	adds	r2, #16
 100edda:	2b07      	cmp	r3, #7
 100eddc:	9225      	str	r2, [sp, #148]	; 0x94
 100edde:	9324      	str	r3, [sp, #144]	; 0x90
 100ede0:	f8c8 5000 	str.w	r5, [r8]
 100ede4:	f8c8 4004 	str.w	r4, [r8, #4]
 100ede8:	ddf0      	ble.n	100edcc <_vfprintf_r+0x13a4>
 100edea:	aa23      	add	r2, sp, #140	; 0x8c
 100edec:	4659      	mov	r1, fp
 100edee:	4650      	mov	r0, sl
 100edf0:	f7fd ff86 	bl	100cd00 <__sprint_r>
 100edf4:	2800      	cmp	r0, #0
 100edf6:	f47f aeba 	bne.w	100eb6e <_vfprintf_r+0x1146>
 100edfa:	9a25      	ldr	r2, [sp, #148]	; 0x94
 100edfc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 100edfe:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
 100ee02:	e7e5      	b.n	100edd0 <_vfprintf_r+0x13a8>
 100ee04:	aa23      	add	r2, sp, #140	; 0x8c
 100ee06:	990a      	ldr	r1, [sp, #40]	; 0x28
 100ee08:	9808      	ldr	r0, [sp, #32]
 100ee0a:	f7fd ff79 	bl	100cd00 <__sprint_r>
 100ee0e:	2800      	cmp	r0, #0
 100ee10:	f47f ab94 	bne.w	100e53c <_vfprintf_r+0xb14>
 100ee14:	991d      	ldr	r1, [sp, #116]	; 0x74
 100ee16:	9a25      	ldr	r2, [sp, #148]	; 0x94
 100ee18:	9b24      	ldr	r3, [sp, #144]	; 0x90
 100ee1a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
 100ee1e:	e68a      	b.n	100eb36 <_vfprintf_r+0x110e>
 100ee20:	9808      	ldr	r0, [sp, #32]
 100ee22:	aa23      	add	r2, sp, #140	; 0x8c
 100ee24:	4651      	mov	r1, sl
 100ee26:	f7fd ff6b 	bl	100cd00 <__sprint_r>
 100ee2a:	2800      	cmp	r0, #0
 100ee2c:	f43f aa64 	beq.w	100e2f8 <_vfprintf_r+0x8d0>
 100ee30:	f7ff ba64 	b.w	100e2fc <_vfprintf_r+0x8d4>
 100ee34:	9b21      	ldr	r3, [sp, #132]	; 0x84
 100ee36:	e5fe      	b.n	100ea36 <_vfprintf_r+0x100e>
 100ee38:	3301      	adds	r3, #1
 100ee3a:	4432      	add	r2, r6
 100ee3c:	2b07      	cmp	r3, #7
 100ee3e:	e888 0060 	stmia.w	r8, {r5, r6}
 100ee42:	9225      	str	r2, [sp, #148]	; 0x94
 100ee44:	9324      	str	r3, [sp, #144]	; 0x90
 100ee46:	f108 0808 	add.w	r8, r8, #8
 100ee4a:	f77f ae77 	ble.w	100eb3c <_vfprintf_r+0x1114>
 100ee4e:	aa23      	add	r2, sp, #140	; 0x8c
 100ee50:	990a      	ldr	r1, [sp, #40]	; 0x28
 100ee52:	9808      	ldr	r0, [sp, #32]
 100ee54:	f7fd ff54 	bl	100cd00 <__sprint_r>
 100ee58:	2800      	cmp	r0, #0
 100ee5a:	f47f ab6f 	bne.w	100e53c <_vfprintf_r+0xb14>
 100ee5e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 100ee60:	9b24      	ldr	r3, [sp, #144]	; 0x90
 100ee62:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
 100ee66:	e669      	b.n	100eb3c <_vfprintf_r+0x1114>
 100ee68:	3330      	adds	r3, #48	; 0x30
 100ee6a:	2230      	movs	r2, #48	; 0x30
 100ee6c:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 100ee70:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
 100ee74:	ab20      	add	r3, sp, #128	; 0x80
 100ee76:	e6e7      	b.n	100ec48 <_vfprintf_r+0x1220>
 100ee78:	9b10      	ldr	r3, [sp, #64]	; 0x40
 100ee7a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 100ee7c:	4413      	add	r3, r2
 100ee7e:	930d      	str	r3, [sp, #52]	; 0x34
 100ee80:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 100ee84:	9307      	str	r3, [sp, #28]
 100ee86:	2667      	movs	r6, #103	; 0x67
 100ee88:	e5f2      	b.n	100ea70 <_vfprintf_r+0x1048>
 100ee8a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 100ee8c:	9807      	ldr	r0, [sp, #28]
 100ee8e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 100ee90:	4651      	mov	r1, sl
 100ee92:	f002 fd01 	bl	1011898 <__aeabi_dcmpeq>
 100ee96:	2800      	cmp	r0, #0
 100ee98:	f47f af2d 	bne.w	100ecf6 <_vfprintf_r+0x12ce>
 100ee9c:	f1c5 0501 	rsb	r5, r5, #1
 100eea0:	951d      	str	r5, [sp, #116]	; 0x74
 100eea2:	442c      	add	r4, r5
 100eea4:	e5b4      	b.n	100ea10 <_vfprintf_r+0xfe8>
 100eea6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 100eea8:	4f33      	ldr	r7, [pc, #204]	; (100ef78 <_vfprintf_r+0x1550>)
 100eeaa:	2b00      	cmp	r3, #0
 100eeac:	bfb6      	itet	lt
 100eeae:	f04f 0a2d 	movlt.w	sl, #45	; 0x2d
 100eeb2:	f89d a06f 	ldrbge.w	sl, [sp, #111]	; 0x6f
 100eeb6:	f88d a06f 	strblt.w	sl, [sp, #111]	; 0x6f
 100eeba:	4b30      	ldr	r3, [pc, #192]	; (100ef7c <_vfprintf_r+0x1554>)
 100eebc:	f7ff b9d1 	b.w	100e262 <_vfprintf_r+0x83a>
 100eec0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 100eec2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 100eec4:	4413      	add	r3, r2
 100eec6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 100eec8:	441a      	add	r2, r3
 100eeca:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 100eece:	920d      	str	r2, [sp, #52]	; 0x34
 100eed0:	9307      	str	r3, [sp, #28]
 100eed2:	e5cd      	b.n	100ea70 <_vfprintf_r+0x1048>
 100eed4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 100eed6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 100eed8:	f1c3 0301 	rsb	r3, r3, #1
 100eedc:	441a      	add	r2, r3
 100eede:	4613      	mov	r3, r2
 100eee0:	920d      	str	r2, [sp, #52]	; 0x34
 100eee2:	e713      	b.n	100ed0c <_vfprintf_r+0x12e4>
 100eee4:	f01b 0301 	ands.w	r3, fp, #1
 100eee8:	9310      	str	r3, [sp, #64]	; 0x40
 100eeea:	f47f aeb6 	bne.w	100ec5a <_vfprintf_r+0x1232>
 100eeee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 100eef0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 100eef4:	9307      	str	r3, [sp, #28]
 100eef6:	e5bb      	b.n	100ea70 <_vfprintf_r+0x1048>
 100eef8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 100eefa:	f899 6001 	ldrb.w	r6, [r9, #1]
 100eefe:	6823      	ldr	r3, [r4, #0]
 100ef00:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 100ef04:	9309      	str	r3, [sp, #36]	; 0x24
 100ef06:	4623      	mov	r3, r4
 100ef08:	3304      	adds	r3, #4
 100ef0a:	4681      	mov	r9, r0
 100ef0c:	930e      	str	r3, [sp, #56]	; 0x38
 100ef0e:	f7fe be0a 	b.w	100db26 <_vfprintf_r+0xfe>
 100ef12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 100ef14:	b913      	cbnz	r3, 100ef1c <_vfprintf_r+0x14f4>
 100ef16:	f01b 0f01 	tst.w	fp, #1
 100ef1a:	d002      	beq.n	100ef22 <_vfprintf_r+0x14fa>
 100ef1c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 100ef1e:	3301      	adds	r3, #1
 100ef20:	e7d1      	b.n	100eec6 <_vfprintf_r+0x149e>
 100ef22:	2301      	movs	r3, #1
 100ef24:	e702      	b.n	100ed2c <_vfprintf_r+0x1304>
 100ef26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 100ef28:	1bdb      	subs	r3, r3, r7
 100ef2a:	9311      	str	r3, [sp, #68]	; 0x44
 100ef2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 100ef2e:	2b47      	cmp	r3, #71	; 0x47
 100ef30:	f43f ae40 	beq.w	100ebb4 <_vfprintf_r+0x118c>
 100ef34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 100ef36:	9310      	str	r3, [sp, #64]	; 0x40
 100ef38:	e647      	b.n	100ebca <_vfprintf_r+0x11a2>
 100ef3a:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 100ef3e:	f7ff b81d 	b.w	100df7c <_vfprintf_r+0x554>
 100ef42:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 100ef46:	f7ff b918 	b.w	100e17a <_vfprintf_r+0x752>
 100ef4a:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
 100ef4e:	e67b      	b.n	100ec48 <_vfprintf_r+0x1220>
 100ef50:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 100ef54:	f7ff b866 	b.w	100e024 <_vfprintf_r+0x5fc>
 100ef58:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 100ef5c:	f7ff b9ac 	b.w	100e2b8 <_vfprintf_r+0x890>
 100ef60:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 100ef64:	f7ff b934 	b.w	100e1d0 <_vfprintf_r+0x7a8>
 100ef68:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 100ef6c:	f7ff b8b0 	b.w	100e0d0 <_vfprintf_r+0x6a8>
 100ef70:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 100ef74:	f7ff b945 	b.w	100e202 <_vfprintf_r+0x7da>
 100ef78:	01022390 	.word	0x01022390
 100ef7c:	0102238c 	.word	0x0102238c

0100ef80 <__sbprintf>:
 100ef80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 100ef84:	460c      	mov	r4, r1
 100ef86:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 100ef8a:	8989      	ldrh	r1, [r1, #12]
 100ef8c:	6e66      	ldr	r6, [r4, #100]	; 0x64
 100ef8e:	89e5      	ldrh	r5, [r4, #14]
 100ef90:	9619      	str	r6, [sp, #100]	; 0x64
 100ef92:	f021 0102 	bic.w	r1, r1, #2
 100ef96:	4606      	mov	r6, r0
 100ef98:	69e0      	ldr	r0, [r4, #28]
 100ef9a:	f8ad 100c 	strh.w	r1, [sp, #12]
 100ef9e:	4617      	mov	r7, r2
 100efa0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 100efa4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 100efa6:	f8ad 500e 	strh.w	r5, [sp, #14]
 100efaa:	4698      	mov	r8, r3
 100efac:	ad1a      	add	r5, sp, #104	; 0x68
 100efae:	2300      	movs	r3, #0
 100efb0:	9007      	str	r0, [sp, #28]
 100efb2:	a816      	add	r0, sp, #88	; 0x58
 100efb4:	9209      	str	r2, [sp, #36]	; 0x24
 100efb6:	9306      	str	r3, [sp, #24]
 100efb8:	9500      	str	r5, [sp, #0]
 100efba:	9504      	str	r5, [sp, #16]
 100efbc:	9102      	str	r1, [sp, #8]
 100efbe:	9105      	str	r1, [sp, #20]
 100efc0:	f7fc ff9a 	bl	100bef8 <__retarget_lock_init_recursive>
 100efc4:	4643      	mov	r3, r8
 100efc6:	463a      	mov	r2, r7
 100efc8:	4669      	mov	r1, sp
 100efca:	4630      	mov	r0, r6
 100efcc:	f7fe fd2c 	bl	100da28 <_vfprintf_r>
 100efd0:	1e05      	subs	r5, r0, #0
 100efd2:	db07      	blt.n	100efe4 <__sbprintf+0x64>
 100efd4:	4630      	mov	r0, r6
 100efd6:	4669      	mov	r1, sp
 100efd8:	f7fc fd40 	bl	100ba5c <_fflush_r>
 100efdc:	2800      	cmp	r0, #0
 100efde:	bf18      	it	ne
 100efe0:	f04f 35ff 	movne.w	r5, #4294967295
 100efe4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 100efe8:	065b      	lsls	r3, r3, #25
 100efea:	d503      	bpl.n	100eff4 <__sbprintf+0x74>
 100efec:	89a3      	ldrh	r3, [r4, #12]
 100efee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 100eff2:	81a3      	strh	r3, [r4, #12]
 100eff4:	9816      	ldr	r0, [sp, #88]	; 0x58
 100eff6:	f7fc ff81 	bl	100befc <__retarget_lock_close_recursive>
 100effa:	4628      	mov	r0, r5
 100effc:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
 100f000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0100f004 <__ascii_wctomb>:
 100f004:	b121      	cbz	r1, 100f010 <__ascii_wctomb+0xc>
 100f006:	2aff      	cmp	r2, #255	; 0xff
 100f008:	d804      	bhi.n	100f014 <__ascii_wctomb+0x10>
 100f00a:	700a      	strb	r2, [r1, #0]
 100f00c:	2001      	movs	r0, #1
 100f00e:	4770      	bx	lr
 100f010:	4608      	mov	r0, r1
 100f012:	4770      	bx	lr
 100f014:	238a      	movs	r3, #138	; 0x8a
 100f016:	6003      	str	r3, [r0, #0]
 100f018:	f04f 30ff 	mov.w	r0, #4294967295
 100f01c:	4770      	bx	lr
 100f01e:	bf00      	nop

0100f020 <_write_r>:
 100f020:	b570      	push	{r4, r5, r6, lr}
 100f022:	460d      	mov	r5, r1
 100f024:	4c08      	ldr	r4, [pc, #32]	; (100f048 <_write_r+0x28>)
 100f026:	4611      	mov	r1, r2
 100f028:	4606      	mov	r6, r0
 100f02a:	461a      	mov	r2, r3
 100f02c:	4628      	mov	r0, r5
 100f02e:	2300      	movs	r3, #0
 100f030:	6023      	str	r3, [r4, #0]
 100f032:	f7f4 fe69 	bl	1003d08 <_write>
 100f036:	1c43      	adds	r3, r0, #1
 100f038:	d000      	beq.n	100f03c <_write_r+0x1c>
 100f03a:	bd70      	pop	{r4, r5, r6, pc}
 100f03c:	6823      	ldr	r3, [r4, #0]
 100f03e:	2b00      	cmp	r3, #0
 100f040:	d0fb      	beq.n	100f03a <_write_r+0x1a>
 100f042:	6033      	str	r3, [r6, #0]
 100f044:	bd70      	pop	{r4, r5, r6, pc}
 100f046:	bf00      	nop
 100f048:	20008354 	.word	0x20008354

0100f04c <__swsetup_r>:
 100f04c:	b538      	push	{r3, r4, r5, lr}
 100f04e:	4b30      	ldr	r3, [pc, #192]	; (100f110 <__swsetup_r+0xc4>)
 100f050:	681b      	ldr	r3, [r3, #0]
 100f052:	4605      	mov	r5, r0
 100f054:	460c      	mov	r4, r1
 100f056:	b113      	cbz	r3, 100f05e <__swsetup_r+0x12>
 100f058:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 100f05a:	2a00      	cmp	r2, #0
 100f05c:	d038      	beq.n	100f0d0 <__swsetup_r+0x84>
 100f05e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 100f062:	b293      	uxth	r3, r2
 100f064:	0718      	lsls	r0, r3, #28
 100f066:	d50c      	bpl.n	100f082 <__swsetup_r+0x36>
 100f068:	6920      	ldr	r0, [r4, #16]
 100f06a:	b1a8      	cbz	r0, 100f098 <__swsetup_r+0x4c>
 100f06c:	f013 0201 	ands.w	r2, r3, #1
 100f070:	d01e      	beq.n	100f0b0 <__swsetup_r+0x64>
 100f072:	6963      	ldr	r3, [r4, #20]
 100f074:	2200      	movs	r2, #0
 100f076:	425b      	negs	r3, r3
 100f078:	61a3      	str	r3, [r4, #24]
 100f07a:	60a2      	str	r2, [r4, #8]
 100f07c:	b1f0      	cbz	r0, 100f0bc <__swsetup_r+0x70>
 100f07e:	2000      	movs	r0, #0
 100f080:	bd38      	pop	{r3, r4, r5, pc}
 100f082:	06d9      	lsls	r1, r3, #27
 100f084:	d53c      	bpl.n	100f100 <__swsetup_r+0xb4>
 100f086:	0758      	lsls	r0, r3, #29
 100f088:	d426      	bmi.n	100f0d8 <__swsetup_r+0x8c>
 100f08a:	6920      	ldr	r0, [r4, #16]
 100f08c:	f042 0308 	orr.w	r3, r2, #8
 100f090:	81a3      	strh	r3, [r4, #12]
 100f092:	b29b      	uxth	r3, r3
 100f094:	2800      	cmp	r0, #0
 100f096:	d1e9      	bne.n	100f06c <__swsetup_r+0x20>
 100f098:	f403 7220 	and.w	r2, r3, #640	; 0x280
 100f09c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 100f0a0:	d0e4      	beq.n	100f06c <__swsetup_r+0x20>
 100f0a2:	4628      	mov	r0, r5
 100f0a4:	4621      	mov	r1, r4
 100f0a6:	f001 fadf 	bl	1010668 <__smakebuf_r>
 100f0aa:	89a3      	ldrh	r3, [r4, #12]
 100f0ac:	6920      	ldr	r0, [r4, #16]
 100f0ae:	e7dd      	b.n	100f06c <__swsetup_r+0x20>
 100f0b0:	0799      	lsls	r1, r3, #30
 100f0b2:	bf58      	it	pl
 100f0b4:	6962      	ldrpl	r2, [r4, #20]
 100f0b6:	60a2      	str	r2, [r4, #8]
 100f0b8:	2800      	cmp	r0, #0
 100f0ba:	d1e0      	bne.n	100f07e <__swsetup_r+0x32>
 100f0bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 100f0c0:	061a      	lsls	r2, r3, #24
 100f0c2:	d5dd      	bpl.n	100f080 <__swsetup_r+0x34>
 100f0c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 100f0c8:	81a3      	strh	r3, [r4, #12]
 100f0ca:	f04f 30ff 	mov.w	r0, #4294967295
 100f0ce:	bd38      	pop	{r3, r4, r5, pc}
 100f0d0:	4618      	mov	r0, r3
 100f0d2:	f7fc fd1b 	bl	100bb0c <__sinit>
 100f0d6:	e7c2      	b.n	100f05e <__swsetup_r+0x12>
 100f0d8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 100f0da:	b151      	cbz	r1, 100f0f2 <__swsetup_r+0xa6>
 100f0dc:	f104 0340 	add.w	r3, r4, #64	; 0x40
 100f0e0:	4299      	cmp	r1, r3
 100f0e2:	d004      	beq.n	100f0ee <__swsetup_r+0xa2>
 100f0e4:	4628      	mov	r0, r5
 100f0e6:	f7fc fdad 	bl	100bc44 <_free_r>
 100f0ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 100f0ee:	2300      	movs	r3, #0
 100f0f0:	6323      	str	r3, [r4, #48]	; 0x30
 100f0f2:	2300      	movs	r3, #0
 100f0f4:	6920      	ldr	r0, [r4, #16]
 100f0f6:	6063      	str	r3, [r4, #4]
 100f0f8:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 100f0fc:	6020      	str	r0, [r4, #0]
 100f0fe:	e7c5      	b.n	100f08c <__swsetup_r+0x40>
 100f100:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 100f104:	2309      	movs	r3, #9
 100f106:	602b      	str	r3, [r5, #0]
 100f108:	f04f 30ff 	mov.w	r0, #4294967295
 100f10c:	81a2      	strh	r2, [r4, #12]
 100f10e:	bd38      	pop	{r3, r4, r5, pc}
 100f110:	200005ec 	.word	0x200005ec

0100f114 <register_fini>:
 100f114:	4b02      	ldr	r3, [pc, #8]	; (100f120 <register_fini+0xc>)
 100f116:	b113      	cbz	r3, 100f11e <register_fini+0xa>
 100f118:	4802      	ldr	r0, [pc, #8]	; (100f124 <register_fini+0x10>)
 100f11a:	f000 b805 	b.w	100f128 <atexit>
 100f11e:	4770      	bx	lr
 100f120:	00000000 	.word	0x00000000
 100f124:	01010199 	.word	0x01010199

0100f128 <atexit>:
 100f128:	2300      	movs	r3, #0
 100f12a:	4601      	mov	r1, r0
 100f12c:	461a      	mov	r2, r3
 100f12e:	4618      	mov	r0, r3
 100f130:	f001 beda 	b.w	1010ee8 <__register_exitproc>

0100f134 <_close_r>:
 100f134:	b538      	push	{r3, r4, r5, lr}
 100f136:	4c07      	ldr	r4, [pc, #28]	; (100f154 <_close_r+0x20>)
 100f138:	2300      	movs	r3, #0
 100f13a:	4605      	mov	r5, r0
 100f13c:	4608      	mov	r0, r1
 100f13e:	6023      	str	r3, [r4, #0]
 100f140:	f7f8 f89c 	bl	100727c <_close>
 100f144:	1c43      	adds	r3, r0, #1
 100f146:	d000      	beq.n	100f14a <_close_r+0x16>
 100f148:	bd38      	pop	{r3, r4, r5, pc}
 100f14a:	6823      	ldr	r3, [r4, #0]
 100f14c:	2b00      	cmp	r3, #0
 100f14e:	d0fb      	beq.n	100f148 <_close_r+0x14>
 100f150:	602b      	str	r3, [r5, #0]
 100f152:	bd38      	pop	{r3, r4, r5, pc}
 100f154:	20008354 	.word	0x20008354

0100f158 <quorem>:
 100f158:	6902      	ldr	r2, [r0, #16]
 100f15a:	690b      	ldr	r3, [r1, #16]
 100f15c:	4293      	cmp	r3, r2
 100f15e:	f300 808d 	bgt.w	100f27c <quorem+0x124>
 100f162:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 100f166:	f103 38ff 	add.w	r8, r3, #4294967295
 100f16a:	f101 0714 	add.w	r7, r1, #20
 100f16e:	f100 0b14 	add.w	fp, r0, #20
 100f172:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 100f176:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 100f17a:	ea4f 0488 	mov.w	r4, r8, lsl #2
 100f17e:	b083      	sub	sp, #12
 100f180:	3201      	adds	r2, #1
 100f182:	fbb3 f9f2 	udiv	r9, r3, r2
 100f186:	eb0b 0304 	add.w	r3, fp, r4
 100f18a:	9400      	str	r4, [sp, #0]
 100f18c:	eb07 0a04 	add.w	sl, r7, r4
 100f190:	9301      	str	r3, [sp, #4]
 100f192:	f1b9 0f00 	cmp.w	r9, #0
 100f196:	d039      	beq.n	100f20c <quorem+0xb4>
 100f198:	2500      	movs	r5, #0
 100f19a:	462e      	mov	r6, r5
 100f19c:	46bc      	mov	ip, r7
 100f19e:	46de      	mov	lr, fp
 100f1a0:	f85c 4b04 	ldr.w	r4, [ip], #4
 100f1a4:	f8de 3000 	ldr.w	r3, [lr]
 100f1a8:	b2a2      	uxth	r2, r4
 100f1aa:	fb09 5502 	mla	r5, r9, r2, r5
 100f1ae:	0c22      	lsrs	r2, r4, #16
 100f1b0:	0c2c      	lsrs	r4, r5, #16
 100f1b2:	fb09 4202 	mla	r2, r9, r2, r4
 100f1b6:	b2ad      	uxth	r5, r5
 100f1b8:	1b75      	subs	r5, r6, r5
 100f1ba:	b296      	uxth	r6, r2
 100f1bc:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
 100f1c0:	fa15 f383 	uxtah	r3, r5, r3
 100f1c4:	eb06 4623 	add.w	r6, r6, r3, asr #16
 100f1c8:	b29b      	uxth	r3, r3
 100f1ca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 100f1ce:	45e2      	cmp	sl, ip
 100f1d0:	ea4f 4512 	mov.w	r5, r2, lsr #16
 100f1d4:	f84e 3b04 	str.w	r3, [lr], #4
 100f1d8:	ea4f 4626 	mov.w	r6, r6, asr #16
 100f1dc:	d2e0      	bcs.n	100f1a0 <quorem+0x48>
 100f1de:	9b00      	ldr	r3, [sp, #0]
 100f1e0:	f85b 3003 	ldr.w	r3, [fp, r3]
 100f1e4:	b993      	cbnz	r3, 100f20c <quorem+0xb4>
 100f1e6:	9c01      	ldr	r4, [sp, #4]
 100f1e8:	1f23      	subs	r3, r4, #4
 100f1ea:	459b      	cmp	fp, r3
 100f1ec:	d20c      	bcs.n	100f208 <quorem+0xb0>
 100f1ee:	f854 3c04 	ldr.w	r3, [r4, #-4]
 100f1f2:	b94b      	cbnz	r3, 100f208 <quorem+0xb0>
 100f1f4:	f1a4 0308 	sub.w	r3, r4, #8
 100f1f8:	e002      	b.n	100f200 <quorem+0xa8>
 100f1fa:	681a      	ldr	r2, [r3, #0]
 100f1fc:	3b04      	subs	r3, #4
 100f1fe:	b91a      	cbnz	r2, 100f208 <quorem+0xb0>
 100f200:	459b      	cmp	fp, r3
 100f202:	f108 38ff 	add.w	r8, r8, #4294967295
 100f206:	d3f8      	bcc.n	100f1fa <quorem+0xa2>
 100f208:	f8c0 8010 	str.w	r8, [r0, #16]
 100f20c:	4604      	mov	r4, r0
 100f20e:	f001 fcd7 	bl	1010bc0 <__mcmp>
 100f212:	2800      	cmp	r0, #0
 100f214:	db2e      	blt.n	100f274 <quorem+0x11c>
 100f216:	f109 0901 	add.w	r9, r9, #1
 100f21a:	465d      	mov	r5, fp
 100f21c:	2300      	movs	r3, #0
 100f21e:	f857 1b04 	ldr.w	r1, [r7], #4
 100f222:	6828      	ldr	r0, [r5, #0]
 100f224:	b28a      	uxth	r2, r1
 100f226:	1a9a      	subs	r2, r3, r2
 100f228:	0c0b      	lsrs	r3, r1, #16
 100f22a:	fa12 f280 	uxtah	r2, r2, r0
 100f22e:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
 100f232:	eb03 4322 	add.w	r3, r3, r2, asr #16
 100f236:	b292      	uxth	r2, r2
 100f238:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 100f23c:	45ba      	cmp	sl, r7
 100f23e:	f845 2b04 	str.w	r2, [r5], #4
 100f242:	ea4f 4323 	mov.w	r3, r3, asr #16
 100f246:	d2ea      	bcs.n	100f21e <quorem+0xc6>
 100f248:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
 100f24c:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
 100f250:	b982      	cbnz	r2, 100f274 <quorem+0x11c>
 100f252:	1f1a      	subs	r2, r3, #4
 100f254:	4593      	cmp	fp, r2
 100f256:	d20b      	bcs.n	100f270 <quorem+0x118>
 100f258:	f853 2c04 	ldr.w	r2, [r3, #-4]
 100f25c:	b942      	cbnz	r2, 100f270 <quorem+0x118>
 100f25e:	3b08      	subs	r3, #8
 100f260:	e002      	b.n	100f268 <quorem+0x110>
 100f262:	681a      	ldr	r2, [r3, #0]
 100f264:	3b04      	subs	r3, #4
 100f266:	b91a      	cbnz	r2, 100f270 <quorem+0x118>
 100f268:	459b      	cmp	fp, r3
 100f26a:	f108 38ff 	add.w	r8, r8, #4294967295
 100f26e:	d3f8      	bcc.n	100f262 <quorem+0x10a>
 100f270:	f8c4 8010 	str.w	r8, [r4, #16]
 100f274:	4648      	mov	r0, r9
 100f276:	b003      	add	sp, #12
 100f278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100f27c:	2000      	movs	r0, #0
 100f27e:	4770      	bx	lr

0100f280 <_dtoa_r>:
 100f280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 100f284:	6c01      	ldr	r1, [r0, #64]	; 0x40
 100f286:	b09b      	sub	sp, #108	; 0x6c
 100f288:	4604      	mov	r4, r0
 100f28a:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 100f28c:	4692      	mov	sl, r2
 100f28e:	469b      	mov	fp, r3
 100f290:	b141      	cbz	r1, 100f2a4 <_dtoa_r+0x24>
 100f292:	6c42      	ldr	r2, [r0, #68]	; 0x44
 100f294:	604a      	str	r2, [r1, #4]
 100f296:	2301      	movs	r3, #1
 100f298:	4093      	lsls	r3, r2
 100f29a:	608b      	str	r3, [r1, #8]
 100f29c:	f001 fab8 	bl	1010810 <_Bfree>
 100f2a0:	2300      	movs	r3, #0
 100f2a2:	6423      	str	r3, [r4, #64]	; 0x40
 100f2a4:	f1bb 0f00 	cmp.w	fp, #0
 100f2a8:	465d      	mov	r5, fp
 100f2aa:	db35      	blt.n	100f318 <_dtoa_r+0x98>
 100f2ac:	2300      	movs	r3, #0
 100f2ae:	6033      	str	r3, [r6, #0]
 100f2b0:	4b9d      	ldr	r3, [pc, #628]	; (100f528 <_dtoa_r+0x2a8>)
 100f2b2:	43ab      	bics	r3, r5
 100f2b4:	d015      	beq.n	100f2e2 <_dtoa_r+0x62>
 100f2b6:	4650      	mov	r0, sl
 100f2b8:	4659      	mov	r1, fp
 100f2ba:	2200      	movs	r2, #0
 100f2bc:	2300      	movs	r3, #0
 100f2be:	f002 faeb 	bl	1011898 <__aeabi_dcmpeq>
 100f2c2:	4680      	mov	r8, r0
 100f2c4:	2800      	cmp	r0, #0
 100f2c6:	d02d      	beq.n	100f324 <_dtoa_r+0xa4>
 100f2c8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 100f2ca:	2301      	movs	r3, #1
 100f2cc:	6013      	str	r3, [r2, #0]
 100f2ce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 100f2d0:	2b00      	cmp	r3, #0
 100f2d2:	f000 80bd 	beq.w	100f450 <_dtoa_r+0x1d0>
 100f2d6:	4895      	ldr	r0, [pc, #596]	; (100f52c <_dtoa_r+0x2ac>)
 100f2d8:	6018      	str	r0, [r3, #0]
 100f2da:	3801      	subs	r0, #1
 100f2dc:	b01b      	add	sp, #108	; 0x6c
 100f2de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100f2e2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 100f2e4:	f242 730f 	movw	r3, #9999	; 0x270f
 100f2e8:	6013      	str	r3, [r2, #0]
 100f2ea:	f1ba 0f00 	cmp.w	sl, #0
 100f2ee:	d10d      	bne.n	100f30c <_dtoa_r+0x8c>
 100f2f0:	f3c5 0513 	ubfx	r5, r5, #0, #20
 100f2f4:	b955      	cbnz	r5, 100f30c <_dtoa_r+0x8c>
 100f2f6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 100f2f8:	488d      	ldr	r0, [pc, #564]	; (100f530 <_dtoa_r+0x2b0>)
 100f2fa:	2b00      	cmp	r3, #0
 100f2fc:	d0ee      	beq.n	100f2dc <_dtoa_r+0x5c>
 100f2fe:	f100 0308 	add.w	r3, r0, #8
 100f302:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 100f304:	6013      	str	r3, [r2, #0]
 100f306:	b01b      	add	sp, #108	; 0x6c
 100f308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100f30c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 100f30e:	4889      	ldr	r0, [pc, #548]	; (100f534 <_dtoa_r+0x2b4>)
 100f310:	2b00      	cmp	r3, #0
 100f312:	d0e3      	beq.n	100f2dc <_dtoa_r+0x5c>
 100f314:	1cc3      	adds	r3, r0, #3
 100f316:	e7f4      	b.n	100f302 <_dtoa_r+0x82>
 100f318:	2301      	movs	r3, #1
 100f31a:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
 100f31e:	6033      	str	r3, [r6, #0]
 100f320:	46ab      	mov	fp, r5
 100f322:	e7c5      	b.n	100f2b0 <_dtoa_r+0x30>
 100f324:	aa18      	add	r2, sp, #96	; 0x60
 100f326:	ab19      	add	r3, sp, #100	; 0x64
 100f328:	9201      	str	r2, [sp, #4]
 100f32a:	9300      	str	r3, [sp, #0]
 100f32c:	4652      	mov	r2, sl
 100f32e:	465b      	mov	r3, fp
 100f330:	4620      	mov	r0, r4
 100f332:	f001 fce5 	bl	1010d00 <__d2b>
 100f336:	0d2b      	lsrs	r3, r5, #20
 100f338:	4681      	mov	r9, r0
 100f33a:	d071      	beq.n	100f420 <_dtoa_r+0x1a0>
 100f33c:	f3cb 0213 	ubfx	r2, fp, #0, #20
 100f340:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
 100f344:	9f18      	ldr	r7, [sp, #96]	; 0x60
 100f346:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 100f34a:	4650      	mov	r0, sl
 100f34c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 100f350:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 100f354:	2200      	movs	r2, #0
 100f356:	4b78      	ldr	r3, [pc, #480]	; (100f538 <_dtoa_r+0x2b8>)
 100f358:	f001 fe82 	bl	1011060 <__aeabi_dsub>
 100f35c:	a36c      	add	r3, pc, #432	; (adr r3, 100f510 <_dtoa_r+0x290>)
 100f35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 100f362:	f002 f831 	bl	10113c8 <__aeabi_dmul>
 100f366:	a36c      	add	r3, pc, #432	; (adr r3, 100f518 <_dtoa_r+0x298>)
 100f368:	e9d3 2300 	ldrd	r2, r3, [r3]
 100f36c:	f001 fe7a 	bl	1011064 <__adddf3>
 100f370:	e9cd 0102 	strd	r0, r1, [sp, #8]
 100f374:	4630      	mov	r0, r6
 100f376:	f001 ffc1 	bl	10112fc <__aeabi_i2d>
 100f37a:	a369      	add	r3, pc, #420	; (adr r3, 100f520 <_dtoa_r+0x2a0>)
 100f37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 100f380:	f002 f822 	bl	10113c8 <__aeabi_dmul>
 100f384:	4602      	mov	r2, r0
 100f386:	460b      	mov	r3, r1
 100f388:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 100f38c:	f001 fe6a 	bl	1011064 <__adddf3>
 100f390:	e9cd 0104 	strd	r0, r1, [sp, #16]
 100f394:	f002 fac8 	bl	1011928 <__aeabi_d2iz>
 100f398:	2200      	movs	r2, #0
 100f39a:	9002      	str	r0, [sp, #8]
 100f39c:	2300      	movs	r3, #0
 100f39e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 100f3a2:	f002 fa83 	bl	10118ac <__aeabi_dcmplt>
 100f3a6:	2800      	cmp	r0, #0
 100f3a8:	f040 8173 	bne.w	100f692 <_dtoa_r+0x412>
 100f3ac:	9d02      	ldr	r5, [sp, #8]
 100f3ae:	2d16      	cmp	r5, #22
 100f3b0:	f200 815d 	bhi.w	100f66e <_dtoa_r+0x3ee>
 100f3b4:	4b61      	ldr	r3, [pc, #388]	; (100f53c <_dtoa_r+0x2bc>)
 100f3b6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 100f3ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 100f3be:	4652      	mov	r2, sl
 100f3c0:	465b      	mov	r3, fp
 100f3c2:	f002 fa91 	bl	10118e8 <__aeabi_dcmpgt>
 100f3c6:	2800      	cmp	r0, #0
 100f3c8:	f000 81c5 	beq.w	100f756 <_dtoa_r+0x4d6>
 100f3cc:	1e6b      	subs	r3, r5, #1
 100f3ce:	9302      	str	r3, [sp, #8]
 100f3d0:	2300      	movs	r3, #0
 100f3d2:	930e      	str	r3, [sp, #56]	; 0x38
 100f3d4:	1bbf      	subs	r7, r7, r6
 100f3d6:	1e7b      	subs	r3, r7, #1
 100f3d8:	9306      	str	r3, [sp, #24]
 100f3da:	f100 8154 	bmi.w	100f686 <_dtoa_r+0x406>
 100f3de:	2300      	movs	r3, #0
 100f3e0:	9308      	str	r3, [sp, #32]
 100f3e2:	9b02      	ldr	r3, [sp, #8]
 100f3e4:	2b00      	cmp	r3, #0
 100f3e6:	f2c0 8145 	blt.w	100f674 <_dtoa_r+0x3f4>
 100f3ea:	9a06      	ldr	r2, [sp, #24]
 100f3ec:	930d      	str	r3, [sp, #52]	; 0x34
 100f3ee:	4611      	mov	r1, r2
 100f3f0:	4419      	add	r1, r3
 100f3f2:	2300      	movs	r3, #0
 100f3f4:	9106      	str	r1, [sp, #24]
 100f3f6:	930c      	str	r3, [sp, #48]	; 0x30
 100f3f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 100f3fa:	2b09      	cmp	r3, #9
 100f3fc:	d82a      	bhi.n	100f454 <_dtoa_r+0x1d4>
 100f3fe:	2b05      	cmp	r3, #5
 100f400:	f340 865b 	ble.w	10100ba <_dtoa_r+0xe3a>
 100f404:	3b04      	subs	r3, #4
 100f406:	9324      	str	r3, [sp, #144]	; 0x90
 100f408:	2500      	movs	r5, #0
 100f40a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 100f40c:	3b02      	subs	r3, #2
 100f40e:	2b03      	cmp	r3, #3
 100f410:	f200 8642 	bhi.w	1010098 <_dtoa_r+0xe18>
 100f414:	e8df f013 	tbh	[pc, r3, lsl #1]
 100f418:	02c903d4 	.word	0x02c903d4
 100f41c:	046103df 	.word	0x046103df
 100f420:	9f18      	ldr	r7, [sp, #96]	; 0x60
 100f422:	9e19      	ldr	r6, [sp, #100]	; 0x64
 100f424:	443e      	add	r6, r7
 100f426:	f206 4332 	addw	r3, r6, #1074	; 0x432
 100f42a:	2b20      	cmp	r3, #32
 100f42c:	f340 818e 	ble.w	100f74c <_dtoa_r+0x4cc>
 100f430:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 100f434:	f206 4012 	addw	r0, r6, #1042	; 0x412
 100f438:	409d      	lsls	r5, r3
 100f43a:	fa2a f000 	lsr.w	r0, sl, r0
 100f43e:	4328      	orrs	r0, r5
 100f440:	f001 ff4c 	bl	10112dc <__aeabi_ui2d>
 100f444:	2301      	movs	r3, #1
 100f446:	3e01      	subs	r6, #1
 100f448:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 100f44c:	9314      	str	r3, [sp, #80]	; 0x50
 100f44e:	e781      	b.n	100f354 <_dtoa_r+0xd4>
 100f450:	483b      	ldr	r0, [pc, #236]	; (100f540 <_dtoa_r+0x2c0>)
 100f452:	e743      	b.n	100f2dc <_dtoa_r+0x5c>
 100f454:	2100      	movs	r1, #0
 100f456:	6461      	str	r1, [r4, #68]	; 0x44
 100f458:	4620      	mov	r0, r4
 100f45a:	9125      	str	r1, [sp, #148]	; 0x94
 100f45c:	f001 f9b2 	bl	10107c4 <_Balloc>
 100f460:	f04f 33ff 	mov.w	r3, #4294967295
 100f464:	930a      	str	r3, [sp, #40]	; 0x28
 100f466:	9a25      	ldr	r2, [sp, #148]	; 0x94
 100f468:	930f      	str	r3, [sp, #60]	; 0x3c
 100f46a:	2301      	movs	r3, #1
 100f46c:	9004      	str	r0, [sp, #16]
 100f46e:	6420      	str	r0, [r4, #64]	; 0x40
 100f470:	9224      	str	r2, [sp, #144]	; 0x90
 100f472:	930b      	str	r3, [sp, #44]	; 0x2c
 100f474:	9b19      	ldr	r3, [sp, #100]	; 0x64
 100f476:	2b00      	cmp	r3, #0
 100f478:	f2c0 80d9 	blt.w	100f62e <_dtoa_r+0x3ae>
 100f47c:	9a02      	ldr	r2, [sp, #8]
 100f47e:	2a0e      	cmp	r2, #14
 100f480:	f300 80d5 	bgt.w	100f62e <_dtoa_r+0x3ae>
 100f484:	4b2d      	ldr	r3, [pc, #180]	; (100f53c <_dtoa_r+0x2bc>)
 100f486:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 100f48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 100f48e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 100f492:	9b25      	ldr	r3, [sp, #148]	; 0x94
 100f494:	2b00      	cmp	r3, #0
 100f496:	f2c0 83ba 	blt.w	100fc0e <_dtoa_r+0x98e>
 100f49a:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
 100f49e:	4650      	mov	r0, sl
 100f4a0:	462a      	mov	r2, r5
 100f4a2:	4633      	mov	r3, r6
 100f4a4:	4659      	mov	r1, fp
 100f4a6:	f002 f8b9 	bl	101161c <__aeabi_ddiv>
 100f4aa:	f002 fa3d 	bl	1011928 <__aeabi_d2iz>
 100f4ae:	4680      	mov	r8, r0
 100f4b0:	f001 ff24 	bl	10112fc <__aeabi_i2d>
 100f4b4:	462a      	mov	r2, r5
 100f4b6:	4633      	mov	r3, r6
 100f4b8:	f001 ff86 	bl	10113c8 <__aeabi_dmul>
 100f4bc:	460b      	mov	r3, r1
 100f4be:	4602      	mov	r2, r0
 100f4c0:	4659      	mov	r1, fp
 100f4c2:	4650      	mov	r0, sl
 100f4c4:	f001 fdcc 	bl	1011060 <__aeabi_dsub>
 100f4c8:	9d04      	ldr	r5, [sp, #16]
 100f4ca:	f108 0330 	add.w	r3, r8, #48	; 0x30
 100f4ce:	702b      	strb	r3, [r5, #0]
 100f4d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 100f4d2:	2b01      	cmp	r3, #1
 100f4d4:	4606      	mov	r6, r0
 100f4d6:	460f      	mov	r7, r1
 100f4d8:	f105 0501 	add.w	r5, r5, #1
 100f4dc:	d068      	beq.n	100f5b0 <_dtoa_r+0x330>
 100f4de:	2200      	movs	r2, #0
 100f4e0:	4b18      	ldr	r3, [pc, #96]	; (100f544 <_dtoa_r+0x2c4>)
 100f4e2:	f001 ff71 	bl	10113c8 <__aeabi_dmul>
 100f4e6:	2200      	movs	r2, #0
 100f4e8:	2300      	movs	r3, #0
 100f4ea:	4606      	mov	r6, r0
 100f4ec:	460f      	mov	r7, r1
 100f4ee:	f002 f9d3 	bl	1011898 <__aeabi_dcmpeq>
 100f4f2:	2800      	cmp	r0, #0
 100f4f4:	f040 8088 	bne.w	100f608 <_dtoa_r+0x388>
 100f4f8:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 100f4fc:	f04f 0a00 	mov.w	sl, #0
 100f500:	f8df b040 	ldr.w	fp, [pc, #64]	; 100f544 <_dtoa_r+0x2c4>
 100f504:	940c      	str	r4, [sp, #48]	; 0x30
 100f506:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 100f50a:	e028      	b.n	100f55e <_dtoa_r+0x2de>
 100f50c:	f3af 8000 	nop.w
 100f510:	636f4361 	.word	0x636f4361
 100f514:	3fd287a7 	.word	0x3fd287a7
 100f518:	8b60c8b3 	.word	0x8b60c8b3
 100f51c:	3fc68a28 	.word	0x3fc68a28
 100f520:	509f79fb 	.word	0x509f79fb
 100f524:	3fd34413 	.word	0x3fd34413
 100f528:	7ff00000 	.word	0x7ff00000
 100f52c:	01022395 	.word	0x01022395
 100f530:	010224bc 	.word	0x010224bc
 100f534:	010224c8 	.word	0x010224c8
 100f538:	3ff80000 	.word	0x3ff80000
 100f53c:	010224f8 	.word	0x010224f8
 100f540:	01022394 	.word	0x01022394
 100f544:	40240000 	.word	0x40240000
 100f548:	f001 ff3e 	bl	10113c8 <__aeabi_dmul>
 100f54c:	2200      	movs	r2, #0
 100f54e:	2300      	movs	r3, #0
 100f550:	4606      	mov	r6, r0
 100f552:	460f      	mov	r7, r1
 100f554:	f002 f9a0 	bl	1011898 <__aeabi_dcmpeq>
 100f558:	2800      	cmp	r0, #0
 100f55a:	f040 83c1 	bne.w	100fce0 <_dtoa_r+0xa60>
 100f55e:	4642      	mov	r2, r8
 100f560:	464b      	mov	r3, r9
 100f562:	4630      	mov	r0, r6
 100f564:	4639      	mov	r1, r7
 100f566:	f002 f859 	bl	101161c <__aeabi_ddiv>
 100f56a:	f002 f9dd 	bl	1011928 <__aeabi_d2iz>
 100f56e:	4604      	mov	r4, r0
 100f570:	f001 fec4 	bl	10112fc <__aeabi_i2d>
 100f574:	4642      	mov	r2, r8
 100f576:	464b      	mov	r3, r9
 100f578:	f001 ff26 	bl	10113c8 <__aeabi_dmul>
 100f57c:	4602      	mov	r2, r0
 100f57e:	460b      	mov	r3, r1
 100f580:	4630      	mov	r0, r6
 100f582:	4639      	mov	r1, r7
 100f584:	f001 fd6c 	bl	1011060 <__aeabi_dsub>
 100f588:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 100f58c:	9e04      	ldr	r6, [sp, #16]
 100f58e:	f805 eb01 	strb.w	lr, [r5], #1
 100f592:	eba5 0e06 	sub.w	lr, r5, r6
 100f596:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 100f598:	45b6      	cmp	lr, r6
 100f59a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 100f59e:	4652      	mov	r2, sl
 100f5a0:	465b      	mov	r3, fp
 100f5a2:	d1d1      	bne.n	100f548 <_dtoa_r+0x2c8>
 100f5a4:	46a0      	mov	r8, r4
 100f5a6:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 100f5aa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 100f5ac:	4606      	mov	r6, r0
 100f5ae:	460f      	mov	r7, r1
 100f5b0:	4632      	mov	r2, r6
 100f5b2:	463b      	mov	r3, r7
 100f5b4:	4630      	mov	r0, r6
 100f5b6:	4639      	mov	r1, r7
 100f5b8:	f001 fd54 	bl	1011064 <__adddf3>
 100f5bc:	4606      	mov	r6, r0
 100f5be:	460f      	mov	r7, r1
 100f5c0:	4602      	mov	r2, r0
 100f5c2:	460b      	mov	r3, r1
 100f5c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 100f5c8:	f002 f970 	bl	10118ac <__aeabi_dcmplt>
 100f5cc:	b948      	cbnz	r0, 100f5e2 <_dtoa_r+0x362>
 100f5ce:	4632      	mov	r2, r6
 100f5d0:	463b      	mov	r3, r7
 100f5d2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 100f5d6:	f002 f95f 	bl	1011898 <__aeabi_dcmpeq>
 100f5da:	b1a8      	cbz	r0, 100f608 <_dtoa_r+0x388>
 100f5dc:	f018 0f01 	tst.w	r8, #1
 100f5e0:	d012      	beq.n	100f608 <_dtoa_r+0x388>
 100f5e2:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 100f5e6:	9a04      	ldr	r2, [sp, #16]
 100f5e8:	1e6b      	subs	r3, r5, #1
 100f5ea:	e004      	b.n	100f5f6 <_dtoa_r+0x376>
 100f5ec:	429a      	cmp	r2, r3
 100f5ee:	f000 8401 	beq.w	100fdf4 <_dtoa_r+0xb74>
 100f5f2:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
 100f5f6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 100f5fa:	f103 0501 	add.w	r5, r3, #1
 100f5fe:	d0f5      	beq.n	100f5ec <_dtoa_r+0x36c>
 100f600:	f108 0801 	add.w	r8, r8, #1
 100f604:	f883 8000 	strb.w	r8, [r3]
 100f608:	4649      	mov	r1, r9
 100f60a:	4620      	mov	r0, r4
 100f60c:	f001 f900 	bl	1010810 <_Bfree>
 100f610:	2200      	movs	r2, #0
 100f612:	9b02      	ldr	r3, [sp, #8]
 100f614:	702a      	strb	r2, [r5, #0]
 100f616:	9a26      	ldr	r2, [sp, #152]	; 0x98
 100f618:	3301      	adds	r3, #1
 100f61a:	6013      	str	r3, [r2, #0]
 100f61c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 100f61e:	2b00      	cmp	r3, #0
 100f620:	f000 839e 	beq.w	100fd60 <_dtoa_r+0xae0>
 100f624:	9804      	ldr	r0, [sp, #16]
 100f626:	601d      	str	r5, [r3, #0]
 100f628:	b01b      	add	sp, #108	; 0x6c
 100f62a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100f62e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 100f630:	2a00      	cmp	r2, #0
 100f632:	d03e      	beq.n	100f6b2 <_dtoa_r+0x432>
 100f634:	9a24      	ldr	r2, [sp, #144]	; 0x90
 100f636:	2a01      	cmp	r2, #1
 100f638:	f340 8311 	ble.w	100fc5e <_dtoa_r+0x9de>
 100f63c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 100f63e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 100f640:	1e5f      	subs	r7, r3, #1
 100f642:	42ba      	cmp	r2, r7
 100f644:	f2c0 838f 	blt.w	100fd66 <_dtoa_r+0xae6>
 100f648:	1bd7      	subs	r7, r2, r7
 100f64a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 100f64c:	2b00      	cmp	r3, #0
 100f64e:	f2c0 848b 	blt.w	100ff68 <_dtoa_r+0xce8>
 100f652:	9d08      	ldr	r5, [sp, #32]
 100f654:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 100f656:	9a08      	ldr	r2, [sp, #32]
 100f658:	441a      	add	r2, r3
 100f65a:	9208      	str	r2, [sp, #32]
 100f65c:	9a06      	ldr	r2, [sp, #24]
 100f65e:	2101      	movs	r1, #1
 100f660:	441a      	add	r2, r3
 100f662:	4620      	mov	r0, r4
 100f664:	9206      	str	r2, [sp, #24]
 100f666:	f001 f96d 	bl	1010944 <__i2b>
 100f66a:	4606      	mov	r6, r0
 100f66c:	e024      	b.n	100f6b8 <_dtoa_r+0x438>
 100f66e:	2301      	movs	r3, #1
 100f670:	930e      	str	r3, [sp, #56]	; 0x38
 100f672:	e6af      	b.n	100f3d4 <_dtoa_r+0x154>
 100f674:	9a08      	ldr	r2, [sp, #32]
 100f676:	9b02      	ldr	r3, [sp, #8]
 100f678:	1ad2      	subs	r2, r2, r3
 100f67a:	425b      	negs	r3, r3
 100f67c:	930c      	str	r3, [sp, #48]	; 0x30
 100f67e:	2300      	movs	r3, #0
 100f680:	9208      	str	r2, [sp, #32]
 100f682:	930d      	str	r3, [sp, #52]	; 0x34
 100f684:	e6b8      	b.n	100f3f8 <_dtoa_r+0x178>
 100f686:	f1c7 0301 	rsb	r3, r7, #1
 100f68a:	9308      	str	r3, [sp, #32]
 100f68c:	2300      	movs	r3, #0
 100f68e:	9306      	str	r3, [sp, #24]
 100f690:	e6a7      	b.n	100f3e2 <_dtoa_r+0x162>
 100f692:	9d02      	ldr	r5, [sp, #8]
 100f694:	4628      	mov	r0, r5
 100f696:	f001 fe31 	bl	10112fc <__aeabi_i2d>
 100f69a:	4602      	mov	r2, r0
 100f69c:	460b      	mov	r3, r1
 100f69e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 100f6a2:	f002 f8f9 	bl	1011898 <__aeabi_dcmpeq>
 100f6a6:	2800      	cmp	r0, #0
 100f6a8:	f47f ae80 	bne.w	100f3ac <_dtoa_r+0x12c>
 100f6ac:	1e6b      	subs	r3, r5, #1
 100f6ae:	9302      	str	r3, [sp, #8]
 100f6b0:	e67c      	b.n	100f3ac <_dtoa_r+0x12c>
 100f6b2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 100f6b4:	9d08      	ldr	r5, [sp, #32]
 100f6b6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 100f6b8:	2d00      	cmp	r5, #0
 100f6ba:	dd0c      	ble.n	100f6d6 <_dtoa_r+0x456>
 100f6bc:	9906      	ldr	r1, [sp, #24]
 100f6be:	2900      	cmp	r1, #0
 100f6c0:	460b      	mov	r3, r1
 100f6c2:	dd08      	ble.n	100f6d6 <_dtoa_r+0x456>
 100f6c4:	42a9      	cmp	r1, r5
 100f6c6:	9a08      	ldr	r2, [sp, #32]
 100f6c8:	bfa8      	it	ge
 100f6ca:	462b      	movge	r3, r5
 100f6cc:	1ad2      	subs	r2, r2, r3
 100f6ce:	1aed      	subs	r5, r5, r3
 100f6d0:	1acb      	subs	r3, r1, r3
 100f6d2:	9208      	str	r2, [sp, #32]
 100f6d4:	9306      	str	r3, [sp, #24]
 100f6d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 100f6d8:	b1d3      	cbz	r3, 100f710 <_dtoa_r+0x490>
 100f6da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 100f6dc:	2b00      	cmp	r3, #0
 100f6de:	f000 82b7 	beq.w	100fc50 <_dtoa_r+0x9d0>
 100f6e2:	2f00      	cmp	r7, #0
 100f6e4:	dd10      	ble.n	100f708 <_dtoa_r+0x488>
 100f6e6:	4631      	mov	r1, r6
 100f6e8:	463a      	mov	r2, r7
 100f6ea:	4620      	mov	r0, r4
 100f6ec:	f001 f9c6 	bl	1010a7c <__pow5mult>
 100f6f0:	464a      	mov	r2, r9
 100f6f2:	4601      	mov	r1, r0
 100f6f4:	4606      	mov	r6, r0
 100f6f6:	4620      	mov	r0, r4
 100f6f8:	f001 f92e 	bl	1010958 <__multiply>
 100f6fc:	4649      	mov	r1, r9
 100f6fe:	4680      	mov	r8, r0
 100f700:	4620      	mov	r0, r4
 100f702:	f001 f885 	bl	1010810 <_Bfree>
 100f706:	46c1      	mov	r9, r8
 100f708:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 100f70a:	1bda      	subs	r2, r3, r7
 100f70c:	f040 82a1 	bne.w	100fc52 <_dtoa_r+0x9d2>
 100f710:	2101      	movs	r1, #1
 100f712:	4620      	mov	r0, r4
 100f714:	f001 f916 	bl	1010944 <__i2b>
 100f718:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 100f71a:	2b00      	cmp	r3, #0
 100f71c:	4680      	mov	r8, r0
 100f71e:	dd1c      	ble.n	100f75a <_dtoa_r+0x4da>
 100f720:	4601      	mov	r1, r0
 100f722:	461a      	mov	r2, r3
 100f724:	4620      	mov	r0, r4
 100f726:	f001 f9a9 	bl	1010a7c <__pow5mult>
 100f72a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 100f72c:	2b01      	cmp	r3, #1
 100f72e:	4680      	mov	r8, r0
 100f730:	f340 8254 	ble.w	100fbdc <_dtoa_r+0x95c>
 100f734:	2300      	movs	r3, #0
 100f736:	930c      	str	r3, [sp, #48]	; 0x30
 100f738:	f8d8 3010 	ldr.w	r3, [r8, #16]
 100f73c:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 100f740:	6918      	ldr	r0, [r3, #16]
 100f742:	f001 f8af 	bl	10108a4 <__hi0bits>
 100f746:	f1c0 0020 	rsb	r0, r0, #32
 100f74a:	e010      	b.n	100f76e <_dtoa_r+0x4ee>
 100f74c:	f1c3 0520 	rsb	r5, r3, #32
 100f750:	fa0a f005 	lsl.w	r0, sl, r5
 100f754:	e674      	b.n	100f440 <_dtoa_r+0x1c0>
 100f756:	900e      	str	r0, [sp, #56]	; 0x38
 100f758:	e63c      	b.n	100f3d4 <_dtoa_r+0x154>
 100f75a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 100f75c:	2b01      	cmp	r3, #1
 100f75e:	f340 8287 	ble.w	100fc70 <_dtoa_r+0x9f0>
 100f762:	2300      	movs	r3, #0
 100f764:	930c      	str	r3, [sp, #48]	; 0x30
 100f766:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 100f768:	2001      	movs	r0, #1
 100f76a:	2b00      	cmp	r3, #0
 100f76c:	d1e4      	bne.n	100f738 <_dtoa_r+0x4b8>
 100f76e:	9a06      	ldr	r2, [sp, #24]
 100f770:	4410      	add	r0, r2
 100f772:	f010 001f 	ands.w	r0, r0, #31
 100f776:	f000 80a1 	beq.w	100f8bc <_dtoa_r+0x63c>
 100f77a:	f1c0 0320 	rsb	r3, r0, #32
 100f77e:	2b04      	cmp	r3, #4
 100f780:	f340 849e 	ble.w	10100c0 <_dtoa_r+0xe40>
 100f784:	9b08      	ldr	r3, [sp, #32]
 100f786:	f1c0 001c 	rsb	r0, r0, #28
 100f78a:	4403      	add	r3, r0
 100f78c:	9308      	str	r3, [sp, #32]
 100f78e:	4613      	mov	r3, r2
 100f790:	4403      	add	r3, r0
 100f792:	4405      	add	r5, r0
 100f794:	9306      	str	r3, [sp, #24]
 100f796:	9b08      	ldr	r3, [sp, #32]
 100f798:	2b00      	cmp	r3, #0
 100f79a:	dd05      	ble.n	100f7a8 <_dtoa_r+0x528>
 100f79c:	4649      	mov	r1, r9
 100f79e:	461a      	mov	r2, r3
 100f7a0:	4620      	mov	r0, r4
 100f7a2:	f001 f9bb 	bl	1010b1c <__lshift>
 100f7a6:	4681      	mov	r9, r0
 100f7a8:	9b06      	ldr	r3, [sp, #24]
 100f7aa:	2b00      	cmp	r3, #0
 100f7ac:	dd05      	ble.n	100f7ba <_dtoa_r+0x53a>
 100f7ae:	4641      	mov	r1, r8
 100f7b0:	461a      	mov	r2, r3
 100f7b2:	4620      	mov	r0, r4
 100f7b4:	f001 f9b2 	bl	1010b1c <__lshift>
 100f7b8:	4680      	mov	r8, r0
 100f7ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 100f7bc:	2b00      	cmp	r3, #0
 100f7be:	f040 8086 	bne.w	100f8ce <_dtoa_r+0x64e>
 100f7c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 100f7c4:	2b00      	cmp	r3, #0
 100f7c6:	f340 8266 	ble.w	100fc96 <_dtoa_r+0xa16>
 100f7ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 100f7cc:	2b00      	cmp	r3, #0
 100f7ce:	f000 8098 	beq.w	100f902 <_dtoa_r+0x682>
 100f7d2:	2d00      	cmp	r5, #0
 100f7d4:	dd05      	ble.n	100f7e2 <_dtoa_r+0x562>
 100f7d6:	4631      	mov	r1, r6
 100f7d8:	462a      	mov	r2, r5
 100f7da:	4620      	mov	r0, r4
 100f7dc:	f001 f99e 	bl	1010b1c <__lshift>
 100f7e0:	4606      	mov	r6, r0
 100f7e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 100f7e4:	2b00      	cmp	r3, #0
 100f7e6:	f040 8337 	bne.w	100fe58 <_dtoa_r+0xbd8>
 100f7ea:	9606      	str	r6, [sp, #24]
 100f7ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 100f7ee:	9a04      	ldr	r2, [sp, #16]
 100f7f0:	f8dd b018 	ldr.w	fp, [sp, #24]
 100f7f4:	3b01      	subs	r3, #1
 100f7f6:	18d3      	adds	r3, r2, r3
 100f7f8:	930b      	str	r3, [sp, #44]	; 0x2c
 100f7fa:	f00a 0301 	and.w	r3, sl, #1
 100f7fe:	930c      	str	r3, [sp, #48]	; 0x30
 100f800:	4617      	mov	r7, r2
 100f802:	46c2      	mov	sl, r8
 100f804:	4651      	mov	r1, sl
 100f806:	4648      	mov	r0, r9
 100f808:	f7ff fca6 	bl	100f158 <quorem>
 100f80c:	4631      	mov	r1, r6
 100f80e:	4605      	mov	r5, r0
 100f810:	4648      	mov	r0, r9
 100f812:	f001 f9d5 	bl	1010bc0 <__mcmp>
 100f816:	465a      	mov	r2, fp
 100f818:	900a      	str	r0, [sp, #40]	; 0x28
 100f81a:	4651      	mov	r1, sl
 100f81c:	4620      	mov	r0, r4
 100f81e:	f001 f9eb 	bl	1010bf8 <__mdiff>
 100f822:	68c2      	ldr	r2, [r0, #12]
 100f824:	4680      	mov	r8, r0
 100f826:	f105 0330 	add.w	r3, r5, #48	; 0x30
 100f82a:	2a00      	cmp	r2, #0
 100f82c:	f040 822b 	bne.w	100fc86 <_dtoa_r+0xa06>
 100f830:	4601      	mov	r1, r0
 100f832:	4648      	mov	r0, r9
 100f834:	9308      	str	r3, [sp, #32]
 100f836:	f001 f9c3 	bl	1010bc0 <__mcmp>
 100f83a:	4641      	mov	r1, r8
 100f83c:	9006      	str	r0, [sp, #24]
 100f83e:	4620      	mov	r0, r4
 100f840:	f000 ffe6 	bl	1010810 <_Bfree>
 100f844:	9a06      	ldr	r2, [sp, #24]
 100f846:	9b08      	ldr	r3, [sp, #32]
 100f848:	b932      	cbnz	r2, 100f858 <_dtoa_r+0x5d8>
 100f84a:	9924      	ldr	r1, [sp, #144]	; 0x90
 100f84c:	b921      	cbnz	r1, 100f858 <_dtoa_r+0x5d8>
 100f84e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 100f850:	2a00      	cmp	r2, #0
 100f852:	f000 83ef 	beq.w	1010034 <_dtoa_r+0xdb4>
 100f856:	9a24      	ldr	r2, [sp, #144]	; 0x90
 100f858:	990a      	ldr	r1, [sp, #40]	; 0x28
 100f85a:	2900      	cmp	r1, #0
 100f85c:	f2c0 829f 	blt.w	100fd9e <_dtoa_r+0xb1e>
 100f860:	d105      	bne.n	100f86e <_dtoa_r+0x5ee>
 100f862:	9924      	ldr	r1, [sp, #144]	; 0x90
 100f864:	b919      	cbnz	r1, 100f86e <_dtoa_r+0x5ee>
 100f866:	990c      	ldr	r1, [sp, #48]	; 0x30
 100f868:	2900      	cmp	r1, #0
 100f86a:	f000 8298 	beq.w	100fd9e <_dtoa_r+0xb1e>
 100f86e:	2a00      	cmp	r2, #0
 100f870:	f300 8306 	bgt.w	100fe80 <_dtoa_r+0xc00>
 100f874:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 100f876:	703b      	strb	r3, [r7, #0]
 100f878:	f107 0801 	add.w	r8, r7, #1
 100f87c:	4297      	cmp	r7, r2
 100f87e:	4645      	mov	r5, r8
 100f880:	f000 830c 	beq.w	100fe9c <_dtoa_r+0xc1c>
 100f884:	4649      	mov	r1, r9
 100f886:	2300      	movs	r3, #0
 100f888:	220a      	movs	r2, #10
 100f88a:	4620      	mov	r0, r4
 100f88c:	f000 ffca 	bl	1010824 <__multadd>
 100f890:	455e      	cmp	r6, fp
 100f892:	4681      	mov	r9, r0
 100f894:	4631      	mov	r1, r6
 100f896:	f04f 0300 	mov.w	r3, #0
 100f89a:	f04f 020a 	mov.w	r2, #10
 100f89e:	4620      	mov	r0, r4
 100f8a0:	f000 81eb 	beq.w	100fc7a <_dtoa_r+0x9fa>
 100f8a4:	f000 ffbe 	bl	1010824 <__multadd>
 100f8a8:	4659      	mov	r1, fp
 100f8aa:	4606      	mov	r6, r0
 100f8ac:	2300      	movs	r3, #0
 100f8ae:	220a      	movs	r2, #10
 100f8b0:	4620      	mov	r0, r4
 100f8b2:	f000 ffb7 	bl	1010824 <__multadd>
 100f8b6:	4647      	mov	r7, r8
 100f8b8:	4683      	mov	fp, r0
 100f8ba:	e7a3      	b.n	100f804 <_dtoa_r+0x584>
 100f8bc:	201c      	movs	r0, #28
 100f8be:	9b08      	ldr	r3, [sp, #32]
 100f8c0:	4403      	add	r3, r0
 100f8c2:	9308      	str	r3, [sp, #32]
 100f8c4:	9b06      	ldr	r3, [sp, #24]
 100f8c6:	4403      	add	r3, r0
 100f8c8:	4405      	add	r5, r0
 100f8ca:	9306      	str	r3, [sp, #24]
 100f8cc:	e763      	b.n	100f796 <_dtoa_r+0x516>
 100f8ce:	4641      	mov	r1, r8
 100f8d0:	4648      	mov	r0, r9
 100f8d2:	f001 f975 	bl	1010bc0 <__mcmp>
 100f8d6:	2800      	cmp	r0, #0
 100f8d8:	f6bf af73 	bge.w	100f7c2 <_dtoa_r+0x542>
 100f8dc:	9f02      	ldr	r7, [sp, #8]
 100f8de:	4649      	mov	r1, r9
 100f8e0:	2300      	movs	r3, #0
 100f8e2:	220a      	movs	r2, #10
 100f8e4:	4620      	mov	r0, r4
 100f8e6:	3f01      	subs	r7, #1
 100f8e8:	9702      	str	r7, [sp, #8]
 100f8ea:	f000 ff9b 	bl	1010824 <__multadd>
 100f8ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 100f8f0:	4681      	mov	r9, r0
 100f8f2:	2b00      	cmp	r3, #0
 100f8f4:	f040 83b6 	bne.w	1010064 <_dtoa_r+0xde4>
 100f8f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 100f8fa:	2b00      	cmp	r3, #0
 100f8fc:	f340 83bf 	ble.w	101007e <_dtoa_r+0xdfe>
 100f900:	930a      	str	r3, [sp, #40]	; 0x28
 100f902:	f8dd b010 	ldr.w	fp, [sp, #16]
 100f906:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 100f908:	465d      	mov	r5, fp
 100f90a:	e002      	b.n	100f912 <_dtoa_r+0x692>
 100f90c:	f000 ff8a 	bl	1010824 <__multadd>
 100f910:	4681      	mov	r9, r0
 100f912:	4641      	mov	r1, r8
 100f914:	4648      	mov	r0, r9
 100f916:	f7ff fc1f 	bl	100f158 <quorem>
 100f91a:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 100f91e:	f805 ab01 	strb.w	sl, [r5], #1
 100f922:	eba5 030b 	sub.w	r3, r5, fp
 100f926:	42bb      	cmp	r3, r7
 100f928:	f04f 020a 	mov.w	r2, #10
 100f92c:	f04f 0300 	mov.w	r3, #0
 100f930:	4649      	mov	r1, r9
 100f932:	4620      	mov	r0, r4
 100f934:	dbea      	blt.n	100f90c <_dtoa_r+0x68c>
 100f936:	9b04      	ldr	r3, [sp, #16]
 100f938:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 100f93a:	2a01      	cmp	r2, #1
 100f93c:	bfac      	ite	ge
 100f93e:	189b      	addge	r3, r3, r2
 100f940:	3301      	addlt	r3, #1
 100f942:	461d      	mov	r5, r3
 100f944:	f04f 0b00 	mov.w	fp, #0
 100f948:	4649      	mov	r1, r9
 100f94a:	2201      	movs	r2, #1
 100f94c:	4620      	mov	r0, r4
 100f94e:	f001 f8e5 	bl	1010b1c <__lshift>
 100f952:	4641      	mov	r1, r8
 100f954:	4681      	mov	r9, r0
 100f956:	f001 f933 	bl	1010bc0 <__mcmp>
 100f95a:	2800      	cmp	r0, #0
 100f95c:	f340 823d 	ble.w	100fdda <_dtoa_r+0xb5a>
 100f960:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 100f964:	9904      	ldr	r1, [sp, #16]
 100f966:	1e6b      	subs	r3, r5, #1
 100f968:	e004      	b.n	100f974 <_dtoa_r+0x6f4>
 100f96a:	428b      	cmp	r3, r1
 100f96c:	f000 81ae 	beq.w	100fccc <_dtoa_r+0xa4c>
 100f970:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 100f974:	2a39      	cmp	r2, #57	; 0x39
 100f976:	f103 0501 	add.w	r5, r3, #1
 100f97a:	d0f6      	beq.n	100f96a <_dtoa_r+0x6ea>
 100f97c:	3201      	adds	r2, #1
 100f97e:	701a      	strb	r2, [r3, #0]
 100f980:	4641      	mov	r1, r8
 100f982:	4620      	mov	r0, r4
 100f984:	f000 ff44 	bl	1010810 <_Bfree>
 100f988:	2e00      	cmp	r6, #0
 100f98a:	f43f ae3d 	beq.w	100f608 <_dtoa_r+0x388>
 100f98e:	f1bb 0f00 	cmp.w	fp, #0
 100f992:	d005      	beq.n	100f9a0 <_dtoa_r+0x720>
 100f994:	45b3      	cmp	fp, r6
 100f996:	d003      	beq.n	100f9a0 <_dtoa_r+0x720>
 100f998:	4659      	mov	r1, fp
 100f99a:	4620      	mov	r0, r4
 100f99c:	f000 ff38 	bl	1010810 <_Bfree>
 100f9a0:	4631      	mov	r1, r6
 100f9a2:	4620      	mov	r0, r4
 100f9a4:	f000 ff34 	bl	1010810 <_Bfree>
 100f9a8:	e62e      	b.n	100f608 <_dtoa_r+0x388>
 100f9aa:	2300      	movs	r3, #0
 100f9ac:	930b      	str	r3, [sp, #44]	; 0x2c
 100f9ae:	9b02      	ldr	r3, [sp, #8]
 100f9b0:	9a25      	ldr	r2, [sp, #148]	; 0x94
 100f9b2:	4413      	add	r3, r2
 100f9b4:	930f      	str	r3, [sp, #60]	; 0x3c
 100f9b6:	3301      	adds	r3, #1
 100f9b8:	2b01      	cmp	r3, #1
 100f9ba:	461f      	mov	r7, r3
 100f9bc:	461e      	mov	r6, r3
 100f9be:	930a      	str	r3, [sp, #40]	; 0x28
 100f9c0:	bfb8      	it	lt
 100f9c2:	2701      	movlt	r7, #1
 100f9c4:	2100      	movs	r1, #0
 100f9c6:	2f17      	cmp	r7, #23
 100f9c8:	6461      	str	r1, [r4, #68]	; 0x44
 100f9ca:	d90a      	bls.n	100f9e2 <_dtoa_r+0x762>
 100f9cc:	2201      	movs	r2, #1
 100f9ce:	2304      	movs	r3, #4
 100f9d0:	005b      	lsls	r3, r3, #1
 100f9d2:	f103 0014 	add.w	r0, r3, #20
 100f9d6:	4287      	cmp	r7, r0
 100f9d8:	4611      	mov	r1, r2
 100f9da:	f102 0201 	add.w	r2, r2, #1
 100f9de:	d2f7      	bcs.n	100f9d0 <_dtoa_r+0x750>
 100f9e0:	6461      	str	r1, [r4, #68]	; 0x44
 100f9e2:	4620      	mov	r0, r4
 100f9e4:	f000 feee 	bl	10107c4 <_Balloc>
 100f9e8:	2e0e      	cmp	r6, #14
 100f9ea:	9004      	str	r0, [sp, #16]
 100f9ec:	6420      	str	r0, [r4, #64]	; 0x40
 100f9ee:	f63f ad41 	bhi.w	100f474 <_dtoa_r+0x1f4>
 100f9f2:	2d00      	cmp	r5, #0
 100f9f4:	f43f ad3e 	beq.w	100f474 <_dtoa_r+0x1f4>
 100f9f8:	9902      	ldr	r1, [sp, #8]
 100f9fa:	2900      	cmp	r1, #0
 100f9fc:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
 100fa00:	f340 8202 	ble.w	100fe08 <_dtoa_r+0xb88>
 100fa04:	4bb8      	ldr	r3, [pc, #736]	; (100fce8 <_dtoa_r+0xa68>)
 100fa06:	f001 020f 	and.w	r2, r1, #15
 100fa0a:	110d      	asrs	r5, r1, #4
 100fa0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 100fa10:	06e9      	lsls	r1, r5, #27
 100fa12:	e9d3 6700 	ldrd	r6, r7, [r3]
 100fa16:	f140 81ae 	bpl.w	100fd76 <_dtoa_r+0xaf6>
 100fa1a:	4bb4      	ldr	r3, [pc, #720]	; (100fcec <_dtoa_r+0xa6c>)
 100fa1c:	4650      	mov	r0, sl
 100fa1e:	4659      	mov	r1, fp
 100fa20:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 100fa24:	f001 fdfa 	bl	101161c <__aeabi_ddiv>
 100fa28:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 100fa2c:	f005 050f 	and.w	r5, r5, #15
 100fa30:	f04f 0a03 	mov.w	sl, #3
 100fa34:	b18d      	cbz	r5, 100fa5a <_dtoa_r+0x7da>
 100fa36:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 100fcec <_dtoa_r+0xa6c>
 100fa3a:	07ea      	lsls	r2, r5, #31
 100fa3c:	d509      	bpl.n	100fa52 <_dtoa_r+0x7d2>
 100fa3e:	4630      	mov	r0, r6
 100fa40:	4639      	mov	r1, r7
 100fa42:	e9d8 2300 	ldrd	r2, r3, [r8]
 100fa46:	f001 fcbf 	bl	10113c8 <__aeabi_dmul>
 100fa4a:	f10a 0a01 	add.w	sl, sl, #1
 100fa4e:	4606      	mov	r6, r0
 100fa50:	460f      	mov	r7, r1
 100fa52:	106d      	asrs	r5, r5, #1
 100fa54:	f108 0808 	add.w	r8, r8, #8
 100fa58:	d1ef      	bne.n	100fa3a <_dtoa_r+0x7ba>
 100fa5a:	463b      	mov	r3, r7
 100fa5c:	4632      	mov	r2, r6
 100fa5e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 100fa62:	f001 fddb 	bl	101161c <__aeabi_ddiv>
 100fa66:	4607      	mov	r7, r0
 100fa68:	4688      	mov	r8, r1
 100fa6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 100fa6c:	b143      	cbz	r3, 100fa80 <_dtoa_r+0x800>
 100fa6e:	2200      	movs	r2, #0
 100fa70:	4b9f      	ldr	r3, [pc, #636]	; (100fcf0 <_dtoa_r+0xa70>)
 100fa72:	4638      	mov	r0, r7
 100fa74:	4641      	mov	r1, r8
 100fa76:	f001 ff19 	bl	10118ac <__aeabi_dcmplt>
 100fa7a:	2800      	cmp	r0, #0
 100fa7c:	f040 8286 	bne.w	100ff8c <_dtoa_r+0xd0c>
 100fa80:	4650      	mov	r0, sl
 100fa82:	f001 fc3b 	bl	10112fc <__aeabi_i2d>
 100fa86:	463a      	mov	r2, r7
 100fa88:	4643      	mov	r3, r8
 100fa8a:	f001 fc9d 	bl	10113c8 <__aeabi_dmul>
 100fa8e:	4b99      	ldr	r3, [pc, #612]	; (100fcf4 <_dtoa_r+0xa74>)
 100fa90:	2200      	movs	r2, #0
 100fa92:	f001 fae7 	bl	1011064 <__adddf3>
 100fa96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 100fa98:	4605      	mov	r5, r0
 100fa9a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 100fa9e:	2b00      	cmp	r3, #0
 100faa0:	f000 813e 	beq.w	100fd20 <_dtoa_r+0xaa0>
 100faa4:	9b02      	ldr	r3, [sp, #8]
 100faa6:	9315      	str	r3, [sp, #84]	; 0x54
 100faa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 100faaa:	9312      	str	r3, [sp, #72]	; 0x48
 100faac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 100faae:	2b00      	cmp	r3, #0
 100fab0:	f000 81fa 	beq.w	100fea8 <_dtoa_r+0xc28>
 100fab4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 100fab6:	4b8c      	ldr	r3, [pc, #560]	; (100fce8 <_dtoa_r+0xa68>)
 100fab8:	498f      	ldr	r1, [pc, #572]	; (100fcf8 <_dtoa_r+0xa78>)
 100faba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 100fabe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 100fac2:	2000      	movs	r0, #0
 100fac4:	f001 fdaa 	bl	101161c <__aeabi_ddiv>
 100fac8:	462a      	mov	r2, r5
 100faca:	4633      	mov	r3, r6
 100facc:	f001 fac8 	bl	1011060 <__aeabi_dsub>
 100fad0:	4682      	mov	sl, r0
 100fad2:	468b      	mov	fp, r1
 100fad4:	4638      	mov	r0, r7
 100fad6:	4641      	mov	r1, r8
 100fad8:	f001 ff26 	bl	1011928 <__aeabi_d2iz>
 100fadc:	4605      	mov	r5, r0
 100fade:	f001 fc0d 	bl	10112fc <__aeabi_i2d>
 100fae2:	4602      	mov	r2, r0
 100fae4:	460b      	mov	r3, r1
 100fae6:	4638      	mov	r0, r7
 100fae8:	4641      	mov	r1, r8
 100faea:	f001 fab9 	bl	1011060 <__aeabi_dsub>
 100faee:	3530      	adds	r5, #48	; 0x30
 100faf0:	fa5f f885 	uxtb.w	r8, r5
 100faf4:	9d04      	ldr	r5, [sp, #16]
 100faf6:	4606      	mov	r6, r0
 100faf8:	460f      	mov	r7, r1
 100fafa:	f885 8000 	strb.w	r8, [r5]
 100fafe:	4602      	mov	r2, r0
 100fb00:	460b      	mov	r3, r1
 100fb02:	4650      	mov	r0, sl
 100fb04:	4659      	mov	r1, fp
 100fb06:	3501      	adds	r5, #1
 100fb08:	f001 feee 	bl	10118e8 <__aeabi_dcmpgt>
 100fb0c:	2800      	cmp	r0, #0
 100fb0e:	d154      	bne.n	100fbba <_dtoa_r+0x93a>
 100fb10:	4632      	mov	r2, r6
 100fb12:	463b      	mov	r3, r7
 100fb14:	2000      	movs	r0, #0
 100fb16:	4976      	ldr	r1, [pc, #472]	; (100fcf0 <_dtoa_r+0xa70>)
 100fb18:	f001 faa2 	bl	1011060 <__aeabi_dsub>
 100fb1c:	4602      	mov	r2, r0
 100fb1e:	460b      	mov	r3, r1
 100fb20:	4650      	mov	r0, sl
 100fb22:	4659      	mov	r1, fp
 100fb24:	f001 fee0 	bl	10118e8 <__aeabi_dcmpgt>
 100fb28:	2800      	cmp	r0, #0
 100fb2a:	f040 8270 	bne.w	101000e <_dtoa_r+0xd8e>
 100fb2e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 100fb30:	2a01      	cmp	r2, #1
 100fb32:	f000 8111 	beq.w	100fd58 <_dtoa_r+0xad8>
 100fb36:	9b12      	ldr	r3, [sp, #72]	; 0x48
 100fb38:	9a04      	ldr	r2, [sp, #16]
 100fb3a:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 100fb3e:	4413      	add	r3, r2
 100fb40:	4699      	mov	r9, r3
 100fb42:	e00d      	b.n	100fb60 <_dtoa_r+0x8e0>
 100fb44:	2000      	movs	r0, #0
 100fb46:	496a      	ldr	r1, [pc, #424]	; (100fcf0 <_dtoa_r+0xa70>)
 100fb48:	f001 fa8a 	bl	1011060 <__aeabi_dsub>
 100fb4c:	4652      	mov	r2, sl
 100fb4e:	465b      	mov	r3, fp
 100fb50:	f001 feac 	bl	10118ac <__aeabi_dcmplt>
 100fb54:	2800      	cmp	r0, #0
 100fb56:	f040 8258 	bne.w	101000a <_dtoa_r+0xd8a>
 100fb5a:	454d      	cmp	r5, r9
 100fb5c:	f000 80fa 	beq.w	100fd54 <_dtoa_r+0xad4>
 100fb60:	4650      	mov	r0, sl
 100fb62:	4659      	mov	r1, fp
 100fb64:	2200      	movs	r2, #0
 100fb66:	4b65      	ldr	r3, [pc, #404]	; (100fcfc <_dtoa_r+0xa7c>)
 100fb68:	f001 fc2e 	bl	10113c8 <__aeabi_dmul>
 100fb6c:	2200      	movs	r2, #0
 100fb6e:	4b63      	ldr	r3, [pc, #396]	; (100fcfc <_dtoa_r+0xa7c>)
 100fb70:	4682      	mov	sl, r0
 100fb72:	468b      	mov	fp, r1
 100fb74:	4630      	mov	r0, r6
 100fb76:	4639      	mov	r1, r7
 100fb78:	f001 fc26 	bl	10113c8 <__aeabi_dmul>
 100fb7c:	460f      	mov	r7, r1
 100fb7e:	4606      	mov	r6, r0
 100fb80:	f001 fed2 	bl	1011928 <__aeabi_d2iz>
 100fb84:	4680      	mov	r8, r0
 100fb86:	f001 fbb9 	bl	10112fc <__aeabi_i2d>
 100fb8a:	4602      	mov	r2, r0
 100fb8c:	460b      	mov	r3, r1
 100fb8e:	4630      	mov	r0, r6
 100fb90:	4639      	mov	r1, r7
 100fb92:	f001 fa65 	bl	1011060 <__aeabi_dsub>
 100fb96:	f108 0830 	add.w	r8, r8, #48	; 0x30
 100fb9a:	fa5f f888 	uxtb.w	r8, r8
 100fb9e:	4652      	mov	r2, sl
 100fba0:	465b      	mov	r3, fp
 100fba2:	f805 8b01 	strb.w	r8, [r5], #1
 100fba6:	4606      	mov	r6, r0
 100fba8:	460f      	mov	r7, r1
 100fbaa:	f001 fe7f 	bl	10118ac <__aeabi_dcmplt>
 100fbae:	4632      	mov	r2, r6
 100fbb0:	463b      	mov	r3, r7
 100fbb2:	2800      	cmp	r0, #0
 100fbb4:	d0c6      	beq.n	100fb44 <_dtoa_r+0x8c4>
 100fbb6:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
 100fbba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 100fbbc:	9302      	str	r3, [sp, #8]
 100fbbe:	e523      	b.n	100f608 <_dtoa_r+0x388>
 100fbc0:	2300      	movs	r3, #0
 100fbc2:	930b      	str	r3, [sp, #44]	; 0x2c
 100fbc4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 100fbc6:	2b00      	cmp	r3, #0
 100fbc8:	f340 80dc 	ble.w	100fd84 <_dtoa_r+0xb04>
 100fbcc:	461f      	mov	r7, r3
 100fbce:	461e      	mov	r6, r3
 100fbd0:	930f      	str	r3, [sp, #60]	; 0x3c
 100fbd2:	930a      	str	r3, [sp, #40]	; 0x28
 100fbd4:	e6f6      	b.n	100f9c4 <_dtoa_r+0x744>
 100fbd6:	2301      	movs	r3, #1
 100fbd8:	930b      	str	r3, [sp, #44]	; 0x2c
 100fbda:	e7f3      	b.n	100fbc4 <_dtoa_r+0x944>
 100fbdc:	f1ba 0f00 	cmp.w	sl, #0
 100fbe0:	f47f ada8 	bne.w	100f734 <_dtoa_r+0x4b4>
 100fbe4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 100fbe8:	2b00      	cmp	r3, #0
 100fbea:	f47f adba 	bne.w	100f762 <_dtoa_r+0x4e2>
 100fbee:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 100fbf2:	0d3f      	lsrs	r7, r7, #20
 100fbf4:	053f      	lsls	r7, r7, #20
 100fbf6:	2f00      	cmp	r7, #0
 100fbf8:	f000 820d 	beq.w	1010016 <_dtoa_r+0xd96>
 100fbfc:	9b08      	ldr	r3, [sp, #32]
 100fbfe:	3301      	adds	r3, #1
 100fc00:	9308      	str	r3, [sp, #32]
 100fc02:	9b06      	ldr	r3, [sp, #24]
 100fc04:	3301      	adds	r3, #1
 100fc06:	9306      	str	r3, [sp, #24]
 100fc08:	2301      	movs	r3, #1
 100fc0a:	930c      	str	r3, [sp, #48]	; 0x30
 100fc0c:	e5ab      	b.n	100f766 <_dtoa_r+0x4e6>
 100fc0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 100fc10:	2b00      	cmp	r3, #0
 100fc12:	f73f ac42 	bgt.w	100f49a <_dtoa_r+0x21a>
 100fc16:	f040 8221 	bne.w	101005c <_dtoa_r+0xddc>
 100fc1a:	2200      	movs	r2, #0
 100fc1c:	4b38      	ldr	r3, [pc, #224]	; (100fd00 <_dtoa_r+0xa80>)
 100fc1e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 100fc22:	f001 fbd1 	bl	10113c8 <__aeabi_dmul>
 100fc26:	4652      	mov	r2, sl
 100fc28:	465b      	mov	r3, fp
 100fc2a:	f001 fe53 	bl	10118d4 <__aeabi_dcmpge>
 100fc2e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 100fc32:	4646      	mov	r6, r8
 100fc34:	2800      	cmp	r0, #0
 100fc36:	d041      	beq.n	100fcbc <_dtoa_r+0xa3c>
 100fc38:	9b25      	ldr	r3, [sp, #148]	; 0x94
 100fc3a:	9d04      	ldr	r5, [sp, #16]
 100fc3c:	43db      	mvns	r3, r3
 100fc3e:	9302      	str	r3, [sp, #8]
 100fc40:	4641      	mov	r1, r8
 100fc42:	4620      	mov	r0, r4
 100fc44:	f000 fde4 	bl	1010810 <_Bfree>
 100fc48:	2e00      	cmp	r6, #0
 100fc4a:	f43f acdd 	beq.w	100f608 <_dtoa_r+0x388>
 100fc4e:	e6a7      	b.n	100f9a0 <_dtoa_r+0x720>
 100fc50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 100fc52:	4649      	mov	r1, r9
 100fc54:	4620      	mov	r0, r4
 100fc56:	f000 ff11 	bl	1010a7c <__pow5mult>
 100fc5a:	4681      	mov	r9, r0
 100fc5c:	e558      	b.n	100f710 <_dtoa_r+0x490>
 100fc5e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 100fc60:	2a00      	cmp	r2, #0
 100fc62:	f000 8187 	beq.w	100ff74 <_dtoa_r+0xcf4>
 100fc66:	f203 4333 	addw	r3, r3, #1075	; 0x433
 100fc6a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 100fc6c:	9d08      	ldr	r5, [sp, #32]
 100fc6e:	e4f2      	b.n	100f656 <_dtoa_r+0x3d6>
 100fc70:	f1ba 0f00 	cmp.w	sl, #0
 100fc74:	f47f ad75 	bne.w	100f762 <_dtoa_r+0x4e2>
 100fc78:	e7b4      	b.n	100fbe4 <_dtoa_r+0x964>
 100fc7a:	f000 fdd3 	bl	1010824 <__multadd>
 100fc7e:	4647      	mov	r7, r8
 100fc80:	4606      	mov	r6, r0
 100fc82:	4683      	mov	fp, r0
 100fc84:	e5be      	b.n	100f804 <_dtoa_r+0x584>
 100fc86:	4601      	mov	r1, r0
 100fc88:	4620      	mov	r0, r4
 100fc8a:	9306      	str	r3, [sp, #24]
 100fc8c:	f000 fdc0 	bl	1010810 <_Bfree>
 100fc90:	2201      	movs	r2, #1
 100fc92:	9b06      	ldr	r3, [sp, #24]
 100fc94:	e5e0      	b.n	100f858 <_dtoa_r+0x5d8>
 100fc96:	9b24      	ldr	r3, [sp, #144]	; 0x90
 100fc98:	2b02      	cmp	r3, #2
 100fc9a:	f77f ad96 	ble.w	100f7ca <_dtoa_r+0x54a>
 100fc9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 100fca0:	2b00      	cmp	r3, #0
 100fca2:	d1c9      	bne.n	100fc38 <_dtoa_r+0x9b8>
 100fca4:	4641      	mov	r1, r8
 100fca6:	2205      	movs	r2, #5
 100fca8:	4620      	mov	r0, r4
 100fcaa:	f000 fdbb 	bl	1010824 <__multadd>
 100fcae:	4601      	mov	r1, r0
 100fcb0:	4680      	mov	r8, r0
 100fcb2:	4648      	mov	r0, r9
 100fcb4:	f000 ff84 	bl	1010bc0 <__mcmp>
 100fcb8:	2800      	cmp	r0, #0
 100fcba:	ddbd      	ble.n	100fc38 <_dtoa_r+0x9b8>
 100fcbc:	9a02      	ldr	r2, [sp, #8]
 100fcbe:	9904      	ldr	r1, [sp, #16]
 100fcc0:	2331      	movs	r3, #49	; 0x31
 100fcc2:	3201      	adds	r2, #1
 100fcc4:	9202      	str	r2, [sp, #8]
 100fcc6:	700b      	strb	r3, [r1, #0]
 100fcc8:	1c4d      	adds	r5, r1, #1
 100fcca:	e7b9      	b.n	100fc40 <_dtoa_r+0x9c0>
 100fccc:	9a02      	ldr	r2, [sp, #8]
 100fcce:	3201      	adds	r2, #1
 100fcd0:	9202      	str	r2, [sp, #8]
 100fcd2:	9a04      	ldr	r2, [sp, #16]
 100fcd4:	2331      	movs	r3, #49	; 0x31
 100fcd6:	7013      	strb	r3, [r2, #0]
 100fcd8:	e652      	b.n	100f980 <_dtoa_r+0x700>
 100fcda:	2301      	movs	r3, #1
 100fcdc:	930b      	str	r3, [sp, #44]	; 0x2c
 100fcde:	e666      	b.n	100f9ae <_dtoa_r+0x72e>
 100fce0:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 100fce4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 100fce6:	e48f      	b.n	100f608 <_dtoa_r+0x388>
 100fce8:	010224f8 	.word	0x010224f8
 100fcec:	010224d0 	.word	0x010224d0
 100fcf0:	3ff00000 	.word	0x3ff00000
 100fcf4:	401c0000 	.word	0x401c0000
 100fcf8:	3fe00000 	.word	0x3fe00000
 100fcfc:	40240000 	.word	0x40240000
 100fd00:	40140000 	.word	0x40140000
 100fd04:	4650      	mov	r0, sl
 100fd06:	f001 faf9 	bl	10112fc <__aeabi_i2d>
 100fd0a:	463a      	mov	r2, r7
 100fd0c:	4643      	mov	r3, r8
 100fd0e:	f001 fb5b 	bl	10113c8 <__aeabi_dmul>
 100fd12:	2200      	movs	r2, #0
 100fd14:	4bc1      	ldr	r3, [pc, #772]	; (101001c <_dtoa_r+0xd9c>)
 100fd16:	f001 f9a5 	bl	1011064 <__adddf3>
 100fd1a:	4605      	mov	r5, r0
 100fd1c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 100fd20:	4641      	mov	r1, r8
 100fd22:	2200      	movs	r2, #0
 100fd24:	4bbe      	ldr	r3, [pc, #760]	; (1010020 <_dtoa_r+0xda0>)
 100fd26:	4638      	mov	r0, r7
 100fd28:	f001 f99a 	bl	1011060 <__aeabi_dsub>
 100fd2c:	462a      	mov	r2, r5
 100fd2e:	4633      	mov	r3, r6
 100fd30:	4682      	mov	sl, r0
 100fd32:	468b      	mov	fp, r1
 100fd34:	f001 fdd8 	bl	10118e8 <__aeabi_dcmpgt>
 100fd38:	4680      	mov	r8, r0
 100fd3a:	2800      	cmp	r0, #0
 100fd3c:	f040 8110 	bne.w	100ff60 <_dtoa_r+0xce0>
 100fd40:	462a      	mov	r2, r5
 100fd42:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 100fd46:	4650      	mov	r0, sl
 100fd48:	4659      	mov	r1, fp
 100fd4a:	f001 fdaf 	bl	10118ac <__aeabi_dcmplt>
 100fd4e:	b118      	cbz	r0, 100fd58 <_dtoa_r+0xad8>
 100fd50:	4646      	mov	r6, r8
 100fd52:	e771      	b.n	100fc38 <_dtoa_r+0x9b8>
 100fd54:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
 100fd58:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
 100fd5c:	f7ff bb8a 	b.w	100f474 <_dtoa_r+0x1f4>
 100fd60:	9804      	ldr	r0, [sp, #16]
 100fd62:	f7ff babb 	b.w	100f2dc <_dtoa_r+0x5c>
 100fd66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 100fd68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 100fd6a:	970c      	str	r7, [sp, #48]	; 0x30
 100fd6c:	1afb      	subs	r3, r7, r3
 100fd6e:	441a      	add	r2, r3
 100fd70:	920d      	str	r2, [sp, #52]	; 0x34
 100fd72:	2700      	movs	r7, #0
 100fd74:	e469      	b.n	100f64a <_dtoa_r+0x3ca>
 100fd76:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 100fd7a:	f04f 0a02 	mov.w	sl, #2
 100fd7e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 100fd82:	e657      	b.n	100fa34 <_dtoa_r+0x7b4>
 100fd84:	2100      	movs	r1, #0
 100fd86:	2301      	movs	r3, #1
 100fd88:	6461      	str	r1, [r4, #68]	; 0x44
 100fd8a:	4620      	mov	r0, r4
 100fd8c:	9325      	str	r3, [sp, #148]	; 0x94
 100fd8e:	f000 fd19 	bl	10107c4 <_Balloc>
 100fd92:	9b25      	ldr	r3, [sp, #148]	; 0x94
 100fd94:	9004      	str	r0, [sp, #16]
 100fd96:	6420      	str	r0, [r4, #64]	; 0x40
 100fd98:	930a      	str	r3, [sp, #40]	; 0x28
 100fd9a:	930f      	str	r3, [sp, #60]	; 0x3c
 100fd9c:	e629      	b.n	100f9f2 <_dtoa_r+0x772>
 100fd9e:	2a00      	cmp	r2, #0
 100fda0:	46d0      	mov	r8, sl
 100fda2:	f8cd b018 	str.w	fp, [sp, #24]
 100fda6:	469a      	mov	sl, r3
 100fda8:	dd11      	ble.n	100fdce <_dtoa_r+0xb4e>
 100fdaa:	4649      	mov	r1, r9
 100fdac:	2201      	movs	r2, #1
 100fdae:	4620      	mov	r0, r4
 100fdb0:	f000 feb4 	bl	1010b1c <__lshift>
 100fdb4:	4641      	mov	r1, r8
 100fdb6:	4681      	mov	r9, r0
 100fdb8:	f000 ff02 	bl	1010bc0 <__mcmp>
 100fdbc:	2800      	cmp	r0, #0
 100fdbe:	f340 8146 	ble.w	101004e <_dtoa_r+0xdce>
 100fdc2:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 100fdc6:	f000 8106 	beq.w	100ffd6 <_dtoa_r+0xd56>
 100fdca:	f105 0a31 	add.w	sl, r5, #49	; 0x31
 100fdce:	46b3      	mov	fp, r6
 100fdd0:	f887 a000 	strb.w	sl, [r7]
 100fdd4:	1c7d      	adds	r5, r7, #1
 100fdd6:	9e06      	ldr	r6, [sp, #24]
 100fdd8:	e5d2      	b.n	100f980 <_dtoa_r+0x700>
 100fdda:	d104      	bne.n	100fde6 <_dtoa_r+0xb66>
 100fddc:	f01a 0f01 	tst.w	sl, #1
 100fde0:	d001      	beq.n	100fde6 <_dtoa_r+0xb66>
 100fde2:	e5bd      	b.n	100f960 <_dtoa_r+0x6e0>
 100fde4:	4615      	mov	r5, r2
 100fde6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 100fdea:	2b30      	cmp	r3, #48	; 0x30
 100fdec:	f105 32ff 	add.w	r2, r5, #4294967295
 100fdf0:	d0f8      	beq.n	100fde4 <_dtoa_r+0xb64>
 100fdf2:	e5c5      	b.n	100f980 <_dtoa_r+0x700>
 100fdf4:	9904      	ldr	r1, [sp, #16]
 100fdf6:	2230      	movs	r2, #48	; 0x30
 100fdf8:	700a      	strb	r2, [r1, #0]
 100fdfa:	9a02      	ldr	r2, [sp, #8]
 100fdfc:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 100fe00:	3201      	adds	r2, #1
 100fe02:	9202      	str	r2, [sp, #8]
 100fe04:	f7ff bbfc 	b.w	100f600 <_dtoa_r+0x380>
 100fe08:	f000 80bb 	beq.w	100ff82 <_dtoa_r+0xd02>
 100fe0c:	9b02      	ldr	r3, [sp, #8]
 100fe0e:	425d      	negs	r5, r3
 100fe10:	4b84      	ldr	r3, [pc, #528]	; (1010024 <_dtoa_r+0xda4>)
 100fe12:	f005 020f 	and.w	r2, r5, #15
 100fe16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 100fe1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 100fe1e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 100fe22:	f001 fad1 	bl	10113c8 <__aeabi_dmul>
 100fe26:	112d      	asrs	r5, r5, #4
 100fe28:	4607      	mov	r7, r0
 100fe2a:	4688      	mov	r8, r1
 100fe2c:	f000 812c 	beq.w	1010088 <_dtoa_r+0xe08>
 100fe30:	4e7d      	ldr	r6, [pc, #500]	; (1010028 <_dtoa_r+0xda8>)
 100fe32:	f04f 0a02 	mov.w	sl, #2
 100fe36:	07eb      	lsls	r3, r5, #31
 100fe38:	d509      	bpl.n	100fe4e <_dtoa_r+0xbce>
 100fe3a:	4638      	mov	r0, r7
 100fe3c:	4641      	mov	r1, r8
 100fe3e:	e9d6 2300 	ldrd	r2, r3, [r6]
 100fe42:	f001 fac1 	bl	10113c8 <__aeabi_dmul>
 100fe46:	f10a 0a01 	add.w	sl, sl, #1
 100fe4a:	4607      	mov	r7, r0
 100fe4c:	4688      	mov	r8, r1
 100fe4e:	106d      	asrs	r5, r5, #1
 100fe50:	f106 0608 	add.w	r6, r6, #8
 100fe54:	d1ef      	bne.n	100fe36 <_dtoa_r+0xbb6>
 100fe56:	e608      	b.n	100fa6a <_dtoa_r+0x7ea>
 100fe58:	6871      	ldr	r1, [r6, #4]
 100fe5a:	4620      	mov	r0, r4
 100fe5c:	f000 fcb2 	bl	10107c4 <_Balloc>
 100fe60:	6933      	ldr	r3, [r6, #16]
 100fe62:	3302      	adds	r3, #2
 100fe64:	009a      	lsls	r2, r3, #2
 100fe66:	4605      	mov	r5, r0
 100fe68:	f106 010c 	add.w	r1, r6, #12
 100fe6c:	300c      	adds	r0, #12
 100fe6e:	f7fc fb6f 	bl	100c550 <memcpy>
 100fe72:	4629      	mov	r1, r5
 100fe74:	2201      	movs	r2, #1
 100fe76:	4620      	mov	r0, r4
 100fe78:	f000 fe50 	bl	1010b1c <__lshift>
 100fe7c:	9006      	str	r0, [sp, #24]
 100fe7e:	e4b5      	b.n	100f7ec <_dtoa_r+0x56c>
 100fe80:	2b39      	cmp	r3, #57	; 0x39
 100fe82:	f8cd b018 	str.w	fp, [sp, #24]
 100fe86:	46d0      	mov	r8, sl
 100fe88:	f000 80a5 	beq.w	100ffd6 <_dtoa_r+0xd56>
 100fe8c:	f103 0a01 	add.w	sl, r3, #1
 100fe90:	46b3      	mov	fp, r6
 100fe92:	f887 a000 	strb.w	sl, [r7]
 100fe96:	1c7d      	adds	r5, r7, #1
 100fe98:	9e06      	ldr	r6, [sp, #24]
 100fe9a:	e571      	b.n	100f980 <_dtoa_r+0x700>
 100fe9c:	465a      	mov	r2, fp
 100fe9e:	46d0      	mov	r8, sl
 100fea0:	46b3      	mov	fp, r6
 100fea2:	469a      	mov	sl, r3
 100fea4:	4616      	mov	r6, r2
 100fea6:	e54f      	b.n	100f948 <_dtoa_r+0x6c8>
 100fea8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 100feaa:	495e      	ldr	r1, [pc, #376]	; (1010024 <_dtoa_r+0xda4>)
 100feac:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 100feb0:	462a      	mov	r2, r5
 100feb2:	4633      	mov	r3, r6
 100feb4:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 100feb8:	f001 fa86 	bl	10113c8 <__aeabi_dmul>
 100febc:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 100fec0:	4638      	mov	r0, r7
 100fec2:	4641      	mov	r1, r8
 100fec4:	f001 fd30 	bl	1011928 <__aeabi_d2iz>
 100fec8:	4605      	mov	r5, r0
 100feca:	f001 fa17 	bl	10112fc <__aeabi_i2d>
 100fece:	460b      	mov	r3, r1
 100fed0:	4602      	mov	r2, r0
 100fed2:	4641      	mov	r1, r8
 100fed4:	4638      	mov	r0, r7
 100fed6:	f001 f8c3 	bl	1011060 <__aeabi_dsub>
 100feda:	9b12      	ldr	r3, [sp, #72]	; 0x48
 100fedc:	460f      	mov	r7, r1
 100fede:	9904      	ldr	r1, [sp, #16]
 100fee0:	3530      	adds	r5, #48	; 0x30
 100fee2:	2b01      	cmp	r3, #1
 100fee4:	700d      	strb	r5, [r1, #0]
 100fee6:	4606      	mov	r6, r0
 100fee8:	f101 0501 	add.w	r5, r1, #1
 100feec:	d026      	beq.n	100ff3c <_dtoa_r+0xcbc>
 100feee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 100fef0:	9a04      	ldr	r2, [sp, #16]
 100fef2:	f8df b13c 	ldr.w	fp, [pc, #316]	; 1010030 <_dtoa_r+0xdb0>
 100fef6:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 100fefa:	4413      	add	r3, r2
 100fefc:	f04f 0a00 	mov.w	sl, #0
 100ff00:	4699      	mov	r9, r3
 100ff02:	4652      	mov	r2, sl
 100ff04:	465b      	mov	r3, fp
 100ff06:	4630      	mov	r0, r6
 100ff08:	4639      	mov	r1, r7
 100ff0a:	f001 fa5d 	bl	10113c8 <__aeabi_dmul>
 100ff0e:	460f      	mov	r7, r1
 100ff10:	4606      	mov	r6, r0
 100ff12:	f001 fd09 	bl	1011928 <__aeabi_d2iz>
 100ff16:	4680      	mov	r8, r0
 100ff18:	f001 f9f0 	bl	10112fc <__aeabi_i2d>
 100ff1c:	f108 0830 	add.w	r8, r8, #48	; 0x30
 100ff20:	4602      	mov	r2, r0
 100ff22:	460b      	mov	r3, r1
 100ff24:	4630      	mov	r0, r6
 100ff26:	4639      	mov	r1, r7
 100ff28:	f001 f89a 	bl	1011060 <__aeabi_dsub>
 100ff2c:	f805 8b01 	strb.w	r8, [r5], #1
 100ff30:	454d      	cmp	r5, r9
 100ff32:	4606      	mov	r6, r0
 100ff34:	460f      	mov	r7, r1
 100ff36:	d1e4      	bne.n	100ff02 <_dtoa_r+0xc82>
 100ff38:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
 100ff3c:	4b3b      	ldr	r3, [pc, #236]	; (101002c <_dtoa_r+0xdac>)
 100ff3e:	2200      	movs	r2, #0
 100ff40:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 100ff44:	f001 f88e 	bl	1011064 <__adddf3>
 100ff48:	4632      	mov	r2, r6
 100ff4a:	463b      	mov	r3, r7
 100ff4c:	f001 fcae 	bl	10118ac <__aeabi_dcmplt>
 100ff50:	2800      	cmp	r0, #0
 100ff52:	d046      	beq.n	100ffe2 <_dtoa_r+0xd62>
 100ff54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 100ff56:	9302      	str	r3, [sp, #8]
 100ff58:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 100ff5c:	f7ff bb43 	b.w	100f5e6 <_dtoa_r+0x366>
 100ff60:	f04f 0800 	mov.w	r8, #0
 100ff64:	4646      	mov	r6, r8
 100ff66:	e6a9      	b.n	100fcbc <_dtoa_r+0xa3c>
 100ff68:	9b08      	ldr	r3, [sp, #32]
 100ff6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 100ff6c:	1a9d      	subs	r5, r3, r2
 100ff6e:	2300      	movs	r3, #0
 100ff70:	f7ff bb71 	b.w	100f656 <_dtoa_r+0x3d6>
 100ff74:	9b18      	ldr	r3, [sp, #96]	; 0x60
 100ff76:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 100ff78:	9d08      	ldr	r5, [sp, #32]
 100ff7a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 100ff7e:	f7ff bb6a 	b.w	100f656 <_dtoa_r+0x3d6>
 100ff82:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
 100ff86:	f04f 0a02 	mov.w	sl, #2
 100ff8a:	e56e      	b.n	100fa6a <_dtoa_r+0x7ea>
 100ff8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 100ff8e:	2b00      	cmp	r3, #0
 100ff90:	f43f aeb8 	beq.w	100fd04 <_dtoa_r+0xa84>
 100ff94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 100ff96:	2b00      	cmp	r3, #0
 100ff98:	f77f aede 	ble.w	100fd58 <_dtoa_r+0xad8>
 100ff9c:	2200      	movs	r2, #0
 100ff9e:	4b24      	ldr	r3, [pc, #144]	; (1010030 <_dtoa_r+0xdb0>)
 100ffa0:	4638      	mov	r0, r7
 100ffa2:	4641      	mov	r1, r8
 100ffa4:	f001 fa10 	bl	10113c8 <__aeabi_dmul>
 100ffa8:	4607      	mov	r7, r0
 100ffaa:	4688      	mov	r8, r1
 100ffac:	f10a 0001 	add.w	r0, sl, #1
 100ffb0:	f001 f9a4 	bl	10112fc <__aeabi_i2d>
 100ffb4:	463a      	mov	r2, r7
 100ffb6:	4643      	mov	r3, r8
 100ffb8:	f001 fa06 	bl	10113c8 <__aeabi_dmul>
 100ffbc:	2200      	movs	r2, #0
 100ffbe:	4b17      	ldr	r3, [pc, #92]	; (101001c <_dtoa_r+0xd9c>)
 100ffc0:	f001 f850 	bl	1011064 <__adddf3>
 100ffc4:	9a02      	ldr	r2, [sp, #8]
 100ffc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 100ffc8:	9312      	str	r3, [sp, #72]	; 0x48
 100ffca:	3a01      	subs	r2, #1
 100ffcc:	4605      	mov	r5, r0
 100ffce:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 100ffd2:	9215      	str	r2, [sp, #84]	; 0x54
 100ffd4:	e56a      	b.n	100faac <_dtoa_r+0x82c>
 100ffd6:	2239      	movs	r2, #57	; 0x39
 100ffd8:	46b3      	mov	fp, r6
 100ffda:	703a      	strb	r2, [r7, #0]
 100ffdc:	9e06      	ldr	r6, [sp, #24]
 100ffde:	1c7d      	adds	r5, r7, #1
 100ffe0:	e4c0      	b.n	100f964 <_dtoa_r+0x6e4>
 100ffe2:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 100ffe6:	2000      	movs	r0, #0
 100ffe8:	4910      	ldr	r1, [pc, #64]	; (101002c <_dtoa_r+0xdac>)
 100ffea:	f001 f839 	bl	1011060 <__aeabi_dsub>
 100ffee:	4632      	mov	r2, r6
 100fff0:	463b      	mov	r3, r7
 100fff2:	f001 fc79 	bl	10118e8 <__aeabi_dcmpgt>
 100fff6:	b908      	cbnz	r0, 100fffc <_dtoa_r+0xd7c>
 100fff8:	e6ae      	b.n	100fd58 <_dtoa_r+0xad8>
 100fffa:	4615      	mov	r5, r2
 100fffc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 1010000:	2b30      	cmp	r3, #48	; 0x30
 1010002:	f105 32ff 	add.w	r2, r5, #4294967295
 1010006:	d0f8      	beq.n	100fffa <_dtoa_r+0xd7a>
 1010008:	e5d7      	b.n	100fbba <_dtoa_r+0x93a>
 101000a:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
 101000e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 1010010:	9302      	str	r3, [sp, #8]
 1010012:	f7ff bae8 	b.w	100f5e6 <_dtoa_r+0x366>
 1010016:	970c      	str	r7, [sp, #48]	; 0x30
 1010018:	f7ff bba5 	b.w	100f766 <_dtoa_r+0x4e6>
 101001c:	401c0000 	.word	0x401c0000
 1010020:	40140000 	.word	0x40140000
 1010024:	010224f8 	.word	0x010224f8
 1010028:	010224d0 	.word	0x010224d0
 101002c:	3fe00000 	.word	0x3fe00000
 1010030:	40240000 	.word	0x40240000
 1010034:	2b39      	cmp	r3, #57	; 0x39
 1010036:	f8cd b018 	str.w	fp, [sp, #24]
 101003a:	46d0      	mov	r8, sl
 101003c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 1010040:	469a      	mov	sl, r3
 1010042:	d0c8      	beq.n	100ffd6 <_dtoa_r+0xd56>
 1010044:	f1bb 0f00 	cmp.w	fp, #0
 1010048:	f73f aebf 	bgt.w	100fdca <_dtoa_r+0xb4a>
 101004c:	e6bf      	b.n	100fdce <_dtoa_r+0xb4e>
 101004e:	f47f aebe 	bne.w	100fdce <_dtoa_r+0xb4e>
 1010052:	f01a 0f01 	tst.w	sl, #1
 1010056:	f43f aeba 	beq.w	100fdce <_dtoa_r+0xb4e>
 101005a:	e6b2      	b.n	100fdc2 <_dtoa_r+0xb42>
 101005c:	f04f 0800 	mov.w	r8, #0
 1010060:	4646      	mov	r6, r8
 1010062:	e5e9      	b.n	100fc38 <_dtoa_r+0x9b8>
 1010064:	4631      	mov	r1, r6
 1010066:	2300      	movs	r3, #0
 1010068:	220a      	movs	r2, #10
 101006a:	4620      	mov	r0, r4
 101006c:	f000 fbda 	bl	1010824 <__multadd>
 1010070:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 1010072:	2b00      	cmp	r3, #0
 1010074:	4606      	mov	r6, r0
 1010076:	dd0a      	ble.n	101008e <_dtoa_r+0xe0e>
 1010078:	930a      	str	r3, [sp, #40]	; 0x28
 101007a:	f7ff bbaa 	b.w	100f7d2 <_dtoa_r+0x552>
 101007e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 1010080:	2b02      	cmp	r3, #2
 1010082:	dc23      	bgt.n	10100cc <_dtoa_r+0xe4c>
 1010084:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 1010086:	e43b      	b.n	100f900 <_dtoa_r+0x680>
 1010088:	f04f 0a02 	mov.w	sl, #2
 101008c:	e4ed      	b.n	100fa6a <_dtoa_r+0x7ea>
 101008e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 1010090:	2b02      	cmp	r3, #2
 1010092:	dc1b      	bgt.n	10100cc <_dtoa_r+0xe4c>
 1010094:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 1010096:	e7ef      	b.n	1010078 <_dtoa_r+0xdf8>
 1010098:	2500      	movs	r5, #0
 101009a:	6465      	str	r5, [r4, #68]	; 0x44
 101009c:	4629      	mov	r1, r5
 101009e:	4620      	mov	r0, r4
 10100a0:	f000 fb90 	bl	10107c4 <_Balloc>
 10100a4:	f04f 33ff 	mov.w	r3, #4294967295
 10100a8:	930a      	str	r3, [sp, #40]	; 0x28
 10100aa:	930f      	str	r3, [sp, #60]	; 0x3c
 10100ac:	2301      	movs	r3, #1
 10100ae:	9004      	str	r0, [sp, #16]
 10100b0:	9525      	str	r5, [sp, #148]	; 0x94
 10100b2:	6420      	str	r0, [r4, #64]	; 0x40
 10100b4:	930b      	str	r3, [sp, #44]	; 0x2c
 10100b6:	f7ff b9dd 	b.w	100f474 <_dtoa_r+0x1f4>
 10100ba:	2501      	movs	r5, #1
 10100bc:	f7ff b9a5 	b.w	100f40a <_dtoa_r+0x18a>
 10100c0:	f43f ab69 	beq.w	100f796 <_dtoa_r+0x516>
 10100c4:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 10100c8:	f7ff bbf9 	b.w	100f8be <_dtoa_r+0x63e>
 10100cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 10100ce:	930a      	str	r3, [sp, #40]	; 0x28
 10100d0:	e5e5      	b.n	100fc9e <_dtoa_r+0xa1e>
 10100d2:	bf00      	nop

010100d4 <_fclose_r>:
 10100d4:	b570      	push	{r4, r5, r6, lr}
 10100d6:	b159      	cbz	r1, 10100f0 <_fclose_r+0x1c>
 10100d8:	4605      	mov	r5, r0
 10100da:	460c      	mov	r4, r1
 10100dc:	b110      	cbz	r0, 10100e4 <_fclose_r+0x10>
 10100de:	6b83      	ldr	r3, [r0, #56]	; 0x38
 10100e0:	2b00      	cmp	r3, #0
 10100e2:	d03c      	beq.n	101015e <_fclose_r+0x8a>
 10100e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 10100e6:	07d8      	lsls	r0, r3, #31
 10100e8:	d505      	bpl.n	10100f6 <_fclose_r+0x22>
 10100ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 10100ee:	b92b      	cbnz	r3, 10100fc <_fclose_r+0x28>
 10100f0:	2600      	movs	r6, #0
 10100f2:	4630      	mov	r0, r6
 10100f4:	bd70      	pop	{r4, r5, r6, pc}
 10100f6:	89a3      	ldrh	r3, [r4, #12]
 10100f8:	0599      	lsls	r1, r3, #22
 10100fa:	d53c      	bpl.n	1010176 <_fclose_r+0xa2>
 10100fc:	4621      	mov	r1, r4
 10100fe:	4628      	mov	r0, r5
 1010100:	f7fb fc0c 	bl	100b91c <__sflush_r>
 1010104:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 1010106:	4606      	mov	r6, r0
 1010108:	b133      	cbz	r3, 1010118 <_fclose_r+0x44>
 101010a:	69e1      	ldr	r1, [r4, #28]
 101010c:	4628      	mov	r0, r5
 101010e:	4798      	blx	r3
 1010110:	2800      	cmp	r0, #0
 1010112:	bfb8      	it	lt
 1010114:	f04f 36ff 	movlt.w	r6, #4294967295
 1010118:	89a3      	ldrh	r3, [r4, #12]
 101011a:	061a      	lsls	r2, r3, #24
 101011c:	d422      	bmi.n	1010164 <_fclose_r+0x90>
 101011e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 1010120:	b141      	cbz	r1, 1010134 <_fclose_r+0x60>
 1010122:	f104 0340 	add.w	r3, r4, #64	; 0x40
 1010126:	4299      	cmp	r1, r3
 1010128:	d002      	beq.n	1010130 <_fclose_r+0x5c>
 101012a:	4628      	mov	r0, r5
 101012c:	f7fb fd8a 	bl	100bc44 <_free_r>
 1010130:	2300      	movs	r3, #0
 1010132:	6323      	str	r3, [r4, #48]	; 0x30
 1010134:	6c61      	ldr	r1, [r4, #68]	; 0x44
 1010136:	b121      	cbz	r1, 1010142 <_fclose_r+0x6e>
 1010138:	4628      	mov	r0, r5
 101013a:	f7fb fd83 	bl	100bc44 <_free_r>
 101013e:	2300      	movs	r3, #0
 1010140:	6463      	str	r3, [r4, #68]	; 0x44
 1010142:	f7fb fd0f 	bl	100bb64 <__sfp_lock_acquire>
 1010146:	6e63      	ldr	r3, [r4, #100]	; 0x64
 1010148:	2200      	movs	r2, #0
 101014a:	07db      	lsls	r3, r3, #31
 101014c:	81a2      	strh	r2, [r4, #12]
 101014e:	d50e      	bpl.n	101016e <_fclose_r+0x9a>
 1010150:	6da0      	ldr	r0, [r4, #88]	; 0x58
 1010152:	f7fb fed3 	bl	100befc <__retarget_lock_close_recursive>
 1010156:	f7fb fd0b 	bl	100bb70 <__sfp_lock_release>
 101015a:	4630      	mov	r0, r6
 101015c:	bd70      	pop	{r4, r5, r6, pc}
 101015e:	f7fb fcd5 	bl	100bb0c <__sinit>
 1010162:	e7bf      	b.n	10100e4 <_fclose_r+0x10>
 1010164:	6921      	ldr	r1, [r4, #16]
 1010166:	4628      	mov	r0, r5
 1010168:	f7fb fd6c 	bl	100bc44 <_free_r>
 101016c:	e7d7      	b.n	101011e <_fclose_r+0x4a>
 101016e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 1010170:	f7fb fec8 	bl	100bf04 <__retarget_lock_release_recursive>
 1010174:	e7ec      	b.n	1010150 <_fclose_r+0x7c>
 1010176:	6da0      	ldr	r0, [r4, #88]	; 0x58
 1010178:	f7fb fec2 	bl	100bf00 <__retarget_lock_acquire_recursive>
 101017c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 1010180:	2b00      	cmp	r3, #0
 1010182:	d1bb      	bne.n	10100fc <_fclose_r+0x28>
 1010184:	6e66      	ldr	r6, [r4, #100]	; 0x64
 1010186:	f016 0601 	ands.w	r6, r6, #1
 101018a:	d1b1      	bne.n	10100f0 <_fclose_r+0x1c>
 101018c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 101018e:	f7fb feb9 	bl	100bf04 <__retarget_lock_release_recursive>
 1010192:	4630      	mov	r0, r6
 1010194:	bd70      	pop	{r4, r5, r6, pc}
 1010196:	bf00      	nop

01010198 <__libc_fini_array>:
 1010198:	b538      	push	{r3, r4, r5, lr}
 101019a:	4c0a      	ldr	r4, [pc, #40]	; (10101c4 <__libc_fini_array+0x2c>)
 101019c:	4d0a      	ldr	r5, [pc, #40]	; (10101c8 <__libc_fini_array+0x30>)
 101019e:	1b64      	subs	r4, r4, r5
 10101a0:	10a4      	asrs	r4, r4, #2
 10101a2:	d00a      	beq.n	10101ba <__libc_fini_array+0x22>
 10101a4:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 10101a8:	3b01      	subs	r3, #1
 10101aa:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 10101ae:	3c01      	subs	r4, #1
 10101b0:	f855 3904 	ldr.w	r3, [r5], #-4
 10101b4:	4798      	blx	r3
 10101b6:	2c00      	cmp	r4, #0
 10101b8:	d1f9      	bne.n	10101ae <__libc_fini_array+0x16>
 10101ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 10101be:	f012 ba0f 	b.w	10225e0 <_fini>
 10101c2:	bf00      	nop
 10101c4:	010225f0 	.word	0x010225f0
 10101c8:	010225ec 	.word	0x010225ec

010101cc <__fputwc>:
 10101cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 10101d0:	b082      	sub	sp, #8
 10101d2:	4680      	mov	r8, r0
 10101d4:	4689      	mov	r9, r1
 10101d6:	4614      	mov	r4, r2
 10101d8:	f7fb fe80 	bl	100bedc <__locale_mb_cur_max>
 10101dc:	2801      	cmp	r0, #1
 10101de:	d036      	beq.n	101024e <__fputwc+0x82>
 10101e0:	464a      	mov	r2, r9
 10101e2:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 10101e6:	a901      	add	r1, sp, #4
 10101e8:	4640      	mov	r0, r8
 10101ea:	f000 fe53 	bl	1010e94 <_wcrtomb_r>
 10101ee:	1c42      	adds	r2, r0, #1
 10101f0:	4606      	mov	r6, r0
 10101f2:	d025      	beq.n	1010240 <__fputwc+0x74>
 10101f4:	b3a8      	cbz	r0, 1010262 <__fputwc+0x96>
 10101f6:	f89d e004 	ldrb.w	lr, [sp, #4]
 10101fa:	2500      	movs	r5, #0
 10101fc:	f10d 0a04 	add.w	sl, sp, #4
 1010200:	e009      	b.n	1010216 <__fputwc+0x4a>
 1010202:	6823      	ldr	r3, [r4, #0]
 1010204:	1c5a      	adds	r2, r3, #1
 1010206:	6022      	str	r2, [r4, #0]
 1010208:	f883 e000 	strb.w	lr, [r3]
 101020c:	3501      	adds	r5, #1
 101020e:	42b5      	cmp	r5, r6
 1010210:	d227      	bcs.n	1010262 <__fputwc+0x96>
 1010212:	f815 e00a 	ldrb.w	lr, [r5, sl]
 1010216:	68a3      	ldr	r3, [r4, #8]
 1010218:	3b01      	subs	r3, #1
 101021a:	2b00      	cmp	r3, #0
 101021c:	60a3      	str	r3, [r4, #8]
 101021e:	daf0      	bge.n	1010202 <__fputwc+0x36>
 1010220:	69a7      	ldr	r7, [r4, #24]
 1010222:	42bb      	cmp	r3, r7
 1010224:	4671      	mov	r1, lr
 1010226:	4622      	mov	r2, r4
 1010228:	4640      	mov	r0, r8
 101022a:	db02      	blt.n	1010232 <__fputwc+0x66>
 101022c:	f1be 0f0a 	cmp.w	lr, #10
 1010230:	d1e7      	bne.n	1010202 <__fputwc+0x36>
 1010232:	f000 fdd7 	bl	1010de4 <__swbuf_r>
 1010236:	1c43      	adds	r3, r0, #1
 1010238:	d1e8      	bne.n	101020c <__fputwc+0x40>
 101023a:	b002      	add	sp, #8
 101023c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 1010240:	89a3      	ldrh	r3, [r4, #12]
 1010242:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 1010246:	81a3      	strh	r3, [r4, #12]
 1010248:	b002      	add	sp, #8
 101024a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 101024e:	f109 33ff 	add.w	r3, r9, #4294967295
 1010252:	2bfe      	cmp	r3, #254	; 0xfe
 1010254:	d8c4      	bhi.n	10101e0 <__fputwc+0x14>
 1010256:	fa5f fe89 	uxtb.w	lr, r9
 101025a:	4606      	mov	r6, r0
 101025c:	f88d e004 	strb.w	lr, [sp, #4]
 1010260:	e7cb      	b.n	10101fa <__fputwc+0x2e>
 1010262:	4648      	mov	r0, r9
 1010264:	b002      	add	sp, #8
 1010266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 101026a:	bf00      	nop

0101026c <_fputwc_r>:
 101026c:	b530      	push	{r4, r5, lr}
 101026e:	6e53      	ldr	r3, [r2, #100]	; 0x64
 1010270:	f013 0f01 	tst.w	r3, #1
 1010274:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 1010278:	4614      	mov	r4, r2
 101027a:	b083      	sub	sp, #12
 101027c:	4605      	mov	r5, r0
 101027e:	b29a      	uxth	r2, r3
 1010280:	d101      	bne.n	1010286 <_fputwc_r+0x1a>
 1010282:	0590      	lsls	r0, r2, #22
 1010284:	d51c      	bpl.n	10102c0 <_fputwc_r+0x54>
 1010286:	0490      	lsls	r0, r2, #18
 1010288:	d406      	bmi.n	1010298 <_fputwc_r+0x2c>
 101028a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 101028c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 1010290:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 1010294:	81a3      	strh	r3, [r4, #12]
 1010296:	6662      	str	r2, [r4, #100]	; 0x64
 1010298:	4628      	mov	r0, r5
 101029a:	4622      	mov	r2, r4
 101029c:	f7ff ff96 	bl	10101cc <__fputwc>
 10102a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 10102a2:	07da      	lsls	r2, r3, #31
 10102a4:	4605      	mov	r5, r0
 10102a6:	d402      	bmi.n	10102ae <_fputwc_r+0x42>
 10102a8:	89a3      	ldrh	r3, [r4, #12]
 10102aa:	059b      	lsls	r3, r3, #22
 10102ac:	d502      	bpl.n	10102b4 <_fputwc_r+0x48>
 10102ae:	4628      	mov	r0, r5
 10102b0:	b003      	add	sp, #12
 10102b2:	bd30      	pop	{r4, r5, pc}
 10102b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 10102b6:	f7fb fe25 	bl	100bf04 <__retarget_lock_release_recursive>
 10102ba:	4628      	mov	r0, r5
 10102bc:	b003      	add	sp, #12
 10102be:	bd30      	pop	{r4, r5, pc}
 10102c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 10102c2:	9101      	str	r1, [sp, #4]
 10102c4:	f7fb fe1c 	bl	100bf00 <__retarget_lock_acquire_recursive>
 10102c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 10102cc:	9901      	ldr	r1, [sp, #4]
 10102ce:	b29a      	uxth	r2, r3
 10102d0:	e7d9      	b.n	1010286 <_fputwc_r+0x1a>
 10102d2:	bf00      	nop

010102d4 <__sfvwrite_r>:
 10102d4:	6893      	ldr	r3, [r2, #8]
 10102d6:	2b00      	cmp	r3, #0
 10102d8:	d073      	beq.n	10103c2 <__sfvwrite_r+0xee>
 10102da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 10102de:	898b      	ldrh	r3, [r1, #12]
 10102e0:	b083      	sub	sp, #12
 10102e2:	460c      	mov	r4, r1
 10102e4:	0719      	lsls	r1, r3, #28
 10102e6:	9000      	str	r0, [sp, #0]
 10102e8:	4616      	mov	r6, r2
 10102ea:	d526      	bpl.n	101033a <__sfvwrite_r+0x66>
 10102ec:	6922      	ldr	r2, [r4, #16]
 10102ee:	b322      	cbz	r2, 101033a <__sfvwrite_r+0x66>
 10102f0:	f013 0002 	ands.w	r0, r3, #2
 10102f4:	6835      	ldr	r5, [r6, #0]
 10102f6:	d02c      	beq.n	1010352 <__sfvwrite_r+0x7e>
 10102f8:	f04f 0900 	mov.w	r9, #0
 10102fc:	4fb0      	ldr	r7, [pc, #704]	; (10105c0 <__sfvwrite_r+0x2ec>)
 10102fe:	46c8      	mov	r8, r9
 1010300:	46b2      	mov	sl, r6
 1010302:	45b8      	cmp	r8, r7
 1010304:	4643      	mov	r3, r8
 1010306:	464a      	mov	r2, r9
 1010308:	bf28      	it	cs
 101030a:	463b      	movcs	r3, r7
 101030c:	9800      	ldr	r0, [sp, #0]
 101030e:	f1b8 0f00 	cmp.w	r8, #0
 1010312:	d050      	beq.n	10103b6 <__sfvwrite_r+0xe2>
 1010314:	69e1      	ldr	r1, [r4, #28]
 1010316:	6a66      	ldr	r6, [r4, #36]	; 0x24
 1010318:	47b0      	blx	r6
 101031a:	2800      	cmp	r0, #0
 101031c:	dd58      	ble.n	10103d0 <__sfvwrite_r+0xfc>
 101031e:	f8da 3008 	ldr.w	r3, [sl, #8]
 1010322:	1a1b      	subs	r3, r3, r0
 1010324:	4481      	add	r9, r0
 1010326:	eba8 0800 	sub.w	r8, r8, r0
 101032a:	f8ca 3008 	str.w	r3, [sl, #8]
 101032e:	2b00      	cmp	r3, #0
 1010330:	d1e7      	bne.n	1010302 <__sfvwrite_r+0x2e>
 1010332:	2000      	movs	r0, #0
 1010334:	b003      	add	sp, #12
 1010336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 101033a:	4621      	mov	r1, r4
 101033c:	9800      	ldr	r0, [sp, #0]
 101033e:	f7fe fe85 	bl	100f04c <__swsetup_r>
 1010342:	2800      	cmp	r0, #0
 1010344:	f040 8133 	bne.w	10105ae <__sfvwrite_r+0x2da>
 1010348:	89a3      	ldrh	r3, [r4, #12]
 101034a:	6835      	ldr	r5, [r6, #0]
 101034c:	f013 0002 	ands.w	r0, r3, #2
 1010350:	d1d2      	bne.n	10102f8 <__sfvwrite_r+0x24>
 1010352:	f013 0901 	ands.w	r9, r3, #1
 1010356:	d145      	bne.n	10103e4 <__sfvwrite_r+0x110>
 1010358:	464f      	mov	r7, r9
 101035a:	9601      	str	r6, [sp, #4]
 101035c:	b337      	cbz	r7, 10103ac <__sfvwrite_r+0xd8>
 101035e:	059a      	lsls	r2, r3, #22
 1010360:	f8d4 8008 	ldr.w	r8, [r4, #8]
 1010364:	f140 8083 	bpl.w	101046e <__sfvwrite_r+0x19a>
 1010368:	4547      	cmp	r7, r8
 101036a:	46c3      	mov	fp, r8
 101036c:	f0c0 80ab 	bcc.w	10104c6 <__sfvwrite_r+0x1f2>
 1010370:	f413 6f90 	tst.w	r3, #1152	; 0x480
 1010374:	f040 80ac 	bne.w	10104d0 <__sfvwrite_r+0x1fc>
 1010378:	6820      	ldr	r0, [r4, #0]
 101037a:	46ba      	mov	sl, r7
 101037c:	465a      	mov	r2, fp
 101037e:	4649      	mov	r1, r9
 1010380:	f000 f9bc 	bl	10106fc <memmove>
 1010384:	68a2      	ldr	r2, [r4, #8]
 1010386:	6823      	ldr	r3, [r4, #0]
 1010388:	eba2 0208 	sub.w	r2, r2, r8
 101038c:	445b      	add	r3, fp
 101038e:	60a2      	str	r2, [r4, #8]
 1010390:	6023      	str	r3, [r4, #0]
 1010392:	9a01      	ldr	r2, [sp, #4]
 1010394:	6893      	ldr	r3, [r2, #8]
 1010396:	eba3 030a 	sub.w	r3, r3, sl
 101039a:	44d1      	add	r9, sl
 101039c:	eba7 070a 	sub.w	r7, r7, sl
 10103a0:	6093      	str	r3, [r2, #8]
 10103a2:	2b00      	cmp	r3, #0
 10103a4:	d0c5      	beq.n	1010332 <__sfvwrite_r+0x5e>
 10103a6:	89a3      	ldrh	r3, [r4, #12]
 10103a8:	2f00      	cmp	r7, #0
 10103aa:	d1d8      	bne.n	101035e <__sfvwrite_r+0x8a>
 10103ac:	f8d5 9000 	ldr.w	r9, [r5]
 10103b0:	686f      	ldr	r7, [r5, #4]
 10103b2:	3508      	adds	r5, #8
 10103b4:	e7d2      	b.n	101035c <__sfvwrite_r+0x88>
 10103b6:	f8d5 9000 	ldr.w	r9, [r5]
 10103ba:	f8d5 8004 	ldr.w	r8, [r5, #4]
 10103be:	3508      	adds	r5, #8
 10103c0:	e79f      	b.n	1010302 <__sfvwrite_r+0x2e>
 10103c2:	2000      	movs	r0, #0
 10103c4:	4770      	bx	lr
 10103c6:	4621      	mov	r1, r4
 10103c8:	9800      	ldr	r0, [sp, #0]
 10103ca:	f7fb fb47 	bl	100ba5c <_fflush_r>
 10103ce:	b370      	cbz	r0, 101042e <__sfvwrite_r+0x15a>
 10103d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 10103d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 10103d8:	f04f 30ff 	mov.w	r0, #4294967295
 10103dc:	81a3      	strh	r3, [r4, #12]
 10103de:	b003      	add	sp, #12
 10103e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 10103e4:	4681      	mov	r9, r0
 10103e6:	4633      	mov	r3, r6
 10103e8:	464e      	mov	r6, r9
 10103ea:	46a8      	mov	r8, r5
 10103ec:	469a      	mov	sl, r3
 10103ee:	464d      	mov	r5, r9
 10103f0:	b34e      	cbz	r6, 1010446 <__sfvwrite_r+0x172>
 10103f2:	b380      	cbz	r0, 1010456 <__sfvwrite_r+0x182>
 10103f4:	6820      	ldr	r0, [r4, #0]
 10103f6:	6923      	ldr	r3, [r4, #16]
 10103f8:	6962      	ldr	r2, [r4, #20]
 10103fa:	45b1      	cmp	r9, r6
 10103fc:	46cb      	mov	fp, r9
 10103fe:	bf28      	it	cs
 1010400:	46b3      	movcs	fp, r6
 1010402:	4298      	cmp	r0, r3
 1010404:	465f      	mov	r7, fp
 1010406:	d904      	bls.n	1010412 <__sfvwrite_r+0x13e>
 1010408:	68a3      	ldr	r3, [r4, #8]
 101040a:	4413      	add	r3, r2
 101040c:	459b      	cmp	fp, r3
 101040e:	f300 80a6 	bgt.w	101055e <__sfvwrite_r+0x28a>
 1010412:	4593      	cmp	fp, r2
 1010414:	db4b      	blt.n	10104ae <__sfvwrite_r+0x1da>
 1010416:	4613      	mov	r3, r2
 1010418:	6a67      	ldr	r7, [r4, #36]	; 0x24
 101041a:	69e1      	ldr	r1, [r4, #28]
 101041c:	9800      	ldr	r0, [sp, #0]
 101041e:	462a      	mov	r2, r5
 1010420:	47b8      	blx	r7
 1010422:	1e07      	subs	r7, r0, #0
 1010424:	ddd4      	ble.n	10103d0 <__sfvwrite_r+0xfc>
 1010426:	ebb9 0907 	subs.w	r9, r9, r7
 101042a:	d0cc      	beq.n	10103c6 <__sfvwrite_r+0xf2>
 101042c:	2001      	movs	r0, #1
 101042e:	f8da 3008 	ldr.w	r3, [sl, #8]
 1010432:	1bdb      	subs	r3, r3, r7
 1010434:	443d      	add	r5, r7
 1010436:	1bf6      	subs	r6, r6, r7
 1010438:	f8ca 3008 	str.w	r3, [sl, #8]
 101043c:	2b00      	cmp	r3, #0
 101043e:	f43f af78 	beq.w	1010332 <__sfvwrite_r+0x5e>
 1010442:	2e00      	cmp	r6, #0
 1010444:	d1d5      	bne.n	10103f2 <__sfvwrite_r+0x11e>
 1010446:	f108 0308 	add.w	r3, r8, #8
 101044a:	e913 0060 	ldmdb	r3, {r5, r6}
 101044e:	4698      	mov	r8, r3
 1010450:	3308      	adds	r3, #8
 1010452:	2e00      	cmp	r6, #0
 1010454:	d0f9      	beq.n	101044a <__sfvwrite_r+0x176>
 1010456:	4632      	mov	r2, r6
 1010458:	210a      	movs	r1, #10
 101045a:	4628      	mov	r0, r5
 101045c:	f7fc f828 	bl	100c4b0 <memchr>
 1010460:	2800      	cmp	r0, #0
 1010462:	f000 80a1 	beq.w	10105a8 <__sfvwrite_r+0x2d4>
 1010466:	3001      	adds	r0, #1
 1010468:	eba0 0905 	sub.w	r9, r0, r5
 101046c:	e7c2      	b.n	10103f4 <__sfvwrite_r+0x120>
 101046e:	6820      	ldr	r0, [r4, #0]
 1010470:	6923      	ldr	r3, [r4, #16]
 1010472:	4298      	cmp	r0, r3
 1010474:	d802      	bhi.n	101047c <__sfvwrite_r+0x1a8>
 1010476:	6963      	ldr	r3, [r4, #20]
 1010478:	429f      	cmp	r7, r3
 101047a:	d25d      	bcs.n	1010538 <__sfvwrite_r+0x264>
 101047c:	45b8      	cmp	r8, r7
 101047e:	bf28      	it	cs
 1010480:	46b8      	movcs	r8, r7
 1010482:	4642      	mov	r2, r8
 1010484:	4649      	mov	r1, r9
 1010486:	f000 f939 	bl	10106fc <memmove>
 101048a:	68a3      	ldr	r3, [r4, #8]
 101048c:	6822      	ldr	r2, [r4, #0]
 101048e:	eba3 0308 	sub.w	r3, r3, r8
 1010492:	4442      	add	r2, r8
 1010494:	60a3      	str	r3, [r4, #8]
 1010496:	6022      	str	r2, [r4, #0]
 1010498:	b10b      	cbz	r3, 101049e <__sfvwrite_r+0x1ca>
 101049a:	46c2      	mov	sl, r8
 101049c:	e779      	b.n	1010392 <__sfvwrite_r+0xbe>
 101049e:	4621      	mov	r1, r4
 10104a0:	9800      	ldr	r0, [sp, #0]
 10104a2:	f7fb fadb 	bl	100ba5c <_fflush_r>
 10104a6:	2800      	cmp	r0, #0
 10104a8:	d192      	bne.n	10103d0 <__sfvwrite_r+0xfc>
 10104aa:	46c2      	mov	sl, r8
 10104ac:	e771      	b.n	1010392 <__sfvwrite_r+0xbe>
 10104ae:	465a      	mov	r2, fp
 10104b0:	4629      	mov	r1, r5
 10104b2:	f000 f923 	bl	10106fc <memmove>
 10104b6:	68a2      	ldr	r2, [r4, #8]
 10104b8:	6823      	ldr	r3, [r4, #0]
 10104ba:	eba2 020b 	sub.w	r2, r2, fp
 10104be:	445b      	add	r3, fp
 10104c0:	60a2      	str	r2, [r4, #8]
 10104c2:	6023      	str	r3, [r4, #0]
 10104c4:	e7af      	b.n	1010426 <__sfvwrite_r+0x152>
 10104c6:	6820      	ldr	r0, [r4, #0]
 10104c8:	46b8      	mov	r8, r7
 10104ca:	46ba      	mov	sl, r7
 10104cc:	46bb      	mov	fp, r7
 10104ce:	e755      	b.n	101037c <__sfvwrite_r+0xa8>
 10104d0:	6962      	ldr	r2, [r4, #20]
 10104d2:	6820      	ldr	r0, [r4, #0]
 10104d4:	6921      	ldr	r1, [r4, #16]
 10104d6:	eb02 0842 	add.w	r8, r2, r2, lsl #1
 10104da:	eba0 0a01 	sub.w	sl, r0, r1
 10104de:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
 10104e2:	f10a 0001 	add.w	r0, sl, #1
 10104e6:	ea4f 0868 	mov.w	r8, r8, asr #1
 10104ea:	4438      	add	r0, r7
 10104ec:	4540      	cmp	r0, r8
 10104ee:	4642      	mov	r2, r8
 10104f0:	bf84      	itt	hi
 10104f2:	4680      	movhi	r8, r0
 10104f4:	4642      	movhi	r2, r8
 10104f6:	055b      	lsls	r3, r3, #21
 10104f8:	d544      	bpl.n	1010584 <__sfvwrite_r+0x2b0>
 10104fa:	4611      	mov	r1, r2
 10104fc:	9800      	ldr	r0, [sp, #0]
 10104fe:	f7fb fd0b 	bl	100bf18 <_malloc_r>
 1010502:	4683      	mov	fp, r0
 1010504:	2800      	cmp	r0, #0
 1010506:	d055      	beq.n	10105b4 <__sfvwrite_r+0x2e0>
 1010508:	4652      	mov	r2, sl
 101050a:	6921      	ldr	r1, [r4, #16]
 101050c:	f7fc f820 	bl	100c550 <memcpy>
 1010510:	89a3      	ldrh	r3, [r4, #12]
 1010512:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 1010516:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 101051a:	81a3      	strh	r3, [r4, #12]
 101051c:	eb0b 000a 	add.w	r0, fp, sl
 1010520:	eba8 030a 	sub.w	r3, r8, sl
 1010524:	f8c4 b010 	str.w	fp, [r4, #16]
 1010528:	f8c4 8014 	str.w	r8, [r4, #20]
 101052c:	6020      	str	r0, [r4, #0]
 101052e:	60a3      	str	r3, [r4, #8]
 1010530:	46b8      	mov	r8, r7
 1010532:	46ba      	mov	sl, r7
 1010534:	46bb      	mov	fp, r7
 1010536:	e721      	b.n	101037c <__sfvwrite_r+0xa8>
 1010538:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 101053c:	42b9      	cmp	r1, r7
 101053e:	bf28      	it	cs
 1010540:	4639      	movcs	r1, r7
 1010542:	464a      	mov	r2, r9
 1010544:	fb91 f1f3 	sdiv	r1, r1, r3
 1010548:	9800      	ldr	r0, [sp, #0]
 101054a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 101054c:	fb03 f301 	mul.w	r3, r3, r1
 1010550:	69e1      	ldr	r1, [r4, #28]
 1010552:	47b0      	blx	r6
 1010554:	f1b0 0a00 	subs.w	sl, r0, #0
 1010558:	f73f af1b 	bgt.w	1010392 <__sfvwrite_r+0xbe>
 101055c:	e738      	b.n	10103d0 <__sfvwrite_r+0xfc>
 101055e:	461a      	mov	r2, r3
 1010560:	4629      	mov	r1, r5
 1010562:	9301      	str	r3, [sp, #4]
 1010564:	f000 f8ca 	bl	10106fc <memmove>
 1010568:	6822      	ldr	r2, [r4, #0]
 101056a:	9b01      	ldr	r3, [sp, #4]
 101056c:	9800      	ldr	r0, [sp, #0]
 101056e:	441a      	add	r2, r3
 1010570:	6022      	str	r2, [r4, #0]
 1010572:	4621      	mov	r1, r4
 1010574:	f7fb fa72 	bl	100ba5c <_fflush_r>
 1010578:	9b01      	ldr	r3, [sp, #4]
 101057a:	2800      	cmp	r0, #0
 101057c:	f47f af28 	bne.w	10103d0 <__sfvwrite_r+0xfc>
 1010580:	461f      	mov	r7, r3
 1010582:	e750      	b.n	1010426 <__sfvwrite_r+0x152>
 1010584:	9800      	ldr	r0, [sp, #0]
 1010586:	f7fc f8df 	bl	100c748 <_realloc_r>
 101058a:	4683      	mov	fp, r0
 101058c:	2800      	cmp	r0, #0
 101058e:	d1c5      	bne.n	101051c <__sfvwrite_r+0x248>
 1010590:	9d00      	ldr	r5, [sp, #0]
 1010592:	6921      	ldr	r1, [r4, #16]
 1010594:	4628      	mov	r0, r5
 1010596:	f7fb fb55 	bl	100bc44 <_free_r>
 101059a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 101059e:	220c      	movs	r2, #12
 10105a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 10105a4:	602a      	str	r2, [r5, #0]
 10105a6:	e715      	b.n	10103d4 <__sfvwrite_r+0x100>
 10105a8:	f106 0901 	add.w	r9, r6, #1
 10105ac:	e722      	b.n	10103f4 <__sfvwrite_r+0x120>
 10105ae:	f04f 30ff 	mov.w	r0, #4294967295
 10105b2:	e6bf      	b.n	1010334 <__sfvwrite_r+0x60>
 10105b4:	9a00      	ldr	r2, [sp, #0]
 10105b6:	230c      	movs	r3, #12
 10105b8:	6013      	str	r3, [r2, #0]
 10105ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 10105be:	e709      	b.n	10103d4 <__sfvwrite_r+0x100>
 10105c0:	7ffffc00 	.word	0x7ffffc00

010105c4 <_localeconv_r>:
 10105c4:	4a04      	ldr	r2, [pc, #16]	; (10105d8 <_localeconv_r+0x14>)
 10105c6:	4b05      	ldr	r3, [pc, #20]	; (10105dc <_localeconv_r+0x18>)
 10105c8:	6812      	ldr	r2, [r2, #0]
 10105ca:	6b50      	ldr	r0, [r2, #52]	; 0x34
 10105cc:	2800      	cmp	r0, #0
 10105ce:	bf08      	it	eq
 10105d0:	4618      	moveq	r0, r3
 10105d2:	30f0      	adds	r0, #240	; 0xf0
 10105d4:	4770      	bx	lr
 10105d6:	bf00      	nop
 10105d8:	200005ec 	.word	0x200005ec
 10105dc:	20000a18 	.word	0x20000a18

010105e0 <_lseek_r>:
 10105e0:	b570      	push	{r4, r5, r6, lr}
 10105e2:	460d      	mov	r5, r1
 10105e4:	4c08      	ldr	r4, [pc, #32]	; (1010608 <_lseek_r+0x28>)
 10105e6:	4611      	mov	r1, r2
 10105e8:	4606      	mov	r6, r0
 10105ea:	461a      	mov	r2, r3
 10105ec:	4628      	mov	r0, r5
 10105ee:	2300      	movs	r3, #0
 10105f0:	6023      	str	r3, [r4, #0]
 10105f2:	f7f6 fe67 	bl	10072c4 <_lseek>
 10105f6:	1c43      	adds	r3, r0, #1
 10105f8:	d000      	beq.n	10105fc <_lseek_r+0x1c>
 10105fa:	bd70      	pop	{r4, r5, r6, pc}
 10105fc:	6823      	ldr	r3, [r4, #0]
 10105fe:	2b00      	cmp	r3, #0
 1010600:	d0fb      	beq.n	10105fa <_lseek_r+0x1a>
 1010602:	6033      	str	r3, [r6, #0]
 1010604:	bd70      	pop	{r4, r5, r6, pc}
 1010606:	bf00      	nop
 1010608:	20008354 	.word	0x20008354

0101060c <__swhatbuf_r>:
 101060c:	b570      	push	{r4, r5, r6, lr}
 101060e:	460c      	mov	r4, r1
 1010610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 1010614:	2900      	cmp	r1, #0
 1010616:	b090      	sub	sp, #64	; 0x40
 1010618:	4615      	mov	r5, r2
 101061a:	461e      	mov	r6, r3
 101061c:	db14      	blt.n	1010648 <__swhatbuf_r+0x3c>
 101061e:	aa01      	add	r2, sp, #4
 1010620:	f000 fcf4 	bl	101100c <_fstat_r>
 1010624:	2800      	cmp	r0, #0
 1010626:	db0f      	blt.n	1010648 <__swhatbuf_r+0x3c>
 1010628:	9a02      	ldr	r2, [sp, #8]
 101062a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 101062e:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
 1010632:	fab2 f282 	clz	r2, r2
 1010636:	0952      	lsrs	r2, r2, #5
 1010638:	f44f 6380 	mov.w	r3, #1024	; 0x400
 101063c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 1010640:	6032      	str	r2, [r6, #0]
 1010642:	602b      	str	r3, [r5, #0]
 1010644:	b010      	add	sp, #64	; 0x40
 1010646:	bd70      	pop	{r4, r5, r6, pc}
 1010648:	89a2      	ldrh	r2, [r4, #12]
 101064a:	2300      	movs	r3, #0
 101064c:	f012 0080 	ands.w	r0, r2, #128	; 0x80
 1010650:	6033      	str	r3, [r6, #0]
 1010652:	d004      	beq.n	101065e <__swhatbuf_r+0x52>
 1010654:	2240      	movs	r2, #64	; 0x40
 1010656:	4618      	mov	r0, r3
 1010658:	602a      	str	r2, [r5, #0]
 101065a:	b010      	add	sp, #64	; 0x40
 101065c:	bd70      	pop	{r4, r5, r6, pc}
 101065e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 1010662:	602b      	str	r3, [r5, #0]
 1010664:	b010      	add	sp, #64	; 0x40
 1010666:	bd70      	pop	{r4, r5, r6, pc}

01010668 <__smakebuf_r>:
 1010668:	898a      	ldrh	r2, [r1, #12]
 101066a:	0792      	lsls	r2, r2, #30
 101066c:	460b      	mov	r3, r1
 101066e:	d506      	bpl.n	101067e <__smakebuf_r+0x16>
 1010670:	f101 0243 	add.w	r2, r1, #67	; 0x43
 1010674:	2101      	movs	r1, #1
 1010676:	601a      	str	r2, [r3, #0]
 1010678:	611a      	str	r2, [r3, #16]
 101067a:	6159      	str	r1, [r3, #20]
 101067c:	4770      	bx	lr
 101067e:	b5f0      	push	{r4, r5, r6, r7, lr}
 1010680:	b083      	sub	sp, #12
 1010682:	ab01      	add	r3, sp, #4
 1010684:	466a      	mov	r2, sp
 1010686:	460c      	mov	r4, r1
 1010688:	4606      	mov	r6, r0
 101068a:	f7ff ffbf 	bl	101060c <__swhatbuf_r>
 101068e:	9900      	ldr	r1, [sp, #0]
 1010690:	4605      	mov	r5, r0
 1010692:	4630      	mov	r0, r6
 1010694:	f7fb fc40 	bl	100bf18 <_malloc_r>
 1010698:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 101069c:	b1d8      	cbz	r0, 10106d6 <__smakebuf_r+0x6e>
 101069e:	9a01      	ldr	r2, [sp, #4]
 10106a0:	4f15      	ldr	r7, [pc, #84]	; (10106f8 <__smakebuf_r+0x90>)
 10106a2:	9900      	ldr	r1, [sp, #0]
 10106a4:	63f7      	str	r7, [r6, #60]	; 0x3c
 10106a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 10106aa:	81a3      	strh	r3, [r4, #12]
 10106ac:	6020      	str	r0, [r4, #0]
 10106ae:	6120      	str	r0, [r4, #16]
 10106b0:	6161      	str	r1, [r4, #20]
 10106b2:	b91a      	cbnz	r2, 10106bc <__smakebuf_r+0x54>
 10106b4:	432b      	orrs	r3, r5
 10106b6:	81a3      	strh	r3, [r4, #12]
 10106b8:	b003      	add	sp, #12
 10106ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 10106bc:	4630      	mov	r0, r6
 10106be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 10106c2:	f000 fcb7 	bl	1011034 <_isatty_r>
 10106c6:	b1a0      	cbz	r0, 10106f2 <__smakebuf_r+0x8a>
 10106c8:	89a3      	ldrh	r3, [r4, #12]
 10106ca:	f023 0303 	bic.w	r3, r3, #3
 10106ce:	f043 0301 	orr.w	r3, r3, #1
 10106d2:	b21b      	sxth	r3, r3
 10106d4:	e7ee      	b.n	10106b4 <__smakebuf_r+0x4c>
 10106d6:	059a      	lsls	r2, r3, #22
 10106d8:	d4ee      	bmi.n	10106b8 <__smakebuf_r+0x50>
 10106da:	f023 0303 	bic.w	r3, r3, #3
 10106de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 10106e2:	f043 0302 	orr.w	r3, r3, #2
 10106e6:	2101      	movs	r1, #1
 10106e8:	81a3      	strh	r3, [r4, #12]
 10106ea:	6022      	str	r2, [r4, #0]
 10106ec:	6122      	str	r2, [r4, #16]
 10106ee:	6161      	str	r1, [r4, #20]
 10106f0:	e7e2      	b.n	10106b8 <__smakebuf_r+0x50>
 10106f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 10106f6:	e7dd      	b.n	10106b4 <__smakebuf_r+0x4c>
 10106f8:	0100bab1 	.word	0x0100bab1

010106fc <memmove>:
 10106fc:	4288      	cmp	r0, r1
 10106fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 1010700:	d90d      	bls.n	101071e <memmove+0x22>
 1010702:	188b      	adds	r3, r1, r2
 1010704:	4298      	cmp	r0, r3
 1010706:	d20a      	bcs.n	101071e <memmove+0x22>
 1010708:	1884      	adds	r4, r0, r2
 101070a:	2a00      	cmp	r2, #0
 101070c:	d051      	beq.n	10107b2 <memmove+0xb6>
 101070e:	4622      	mov	r2, r4
 1010710:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 1010714:	f802 4d01 	strb.w	r4, [r2, #-1]!
 1010718:	4299      	cmp	r1, r3
 101071a:	d1f9      	bne.n	1010710 <memmove+0x14>
 101071c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 101071e:	2a0f      	cmp	r2, #15
 1010720:	d948      	bls.n	10107b4 <memmove+0xb8>
 1010722:	ea41 0300 	orr.w	r3, r1, r0
 1010726:	079b      	lsls	r3, r3, #30
 1010728:	d146      	bne.n	10107b8 <memmove+0xbc>
 101072a:	f100 0410 	add.w	r4, r0, #16
 101072e:	f101 0310 	add.w	r3, r1, #16
 1010732:	4615      	mov	r5, r2
 1010734:	f853 6c10 	ldr.w	r6, [r3, #-16]
 1010738:	f844 6c10 	str.w	r6, [r4, #-16]
 101073c:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 1010740:	f844 6c0c 	str.w	r6, [r4, #-12]
 1010744:	f853 6c08 	ldr.w	r6, [r3, #-8]
 1010748:	f844 6c08 	str.w	r6, [r4, #-8]
 101074c:	3d10      	subs	r5, #16
 101074e:	f853 6c04 	ldr.w	r6, [r3, #-4]
 1010752:	f844 6c04 	str.w	r6, [r4, #-4]
 1010756:	2d0f      	cmp	r5, #15
 1010758:	f103 0310 	add.w	r3, r3, #16
 101075c:	f104 0410 	add.w	r4, r4, #16
 1010760:	d8e8      	bhi.n	1010734 <memmove+0x38>
 1010762:	f1a2 0310 	sub.w	r3, r2, #16
 1010766:	f023 030f 	bic.w	r3, r3, #15
 101076a:	f002 0e0f 	and.w	lr, r2, #15
 101076e:	3310      	adds	r3, #16
 1010770:	f1be 0f03 	cmp.w	lr, #3
 1010774:	4419      	add	r1, r3
 1010776:	4403      	add	r3, r0
 1010778:	d921      	bls.n	10107be <memmove+0xc2>
 101077a:	1f1e      	subs	r6, r3, #4
 101077c:	460d      	mov	r5, r1
 101077e:	4674      	mov	r4, lr
 1010780:	3c04      	subs	r4, #4
 1010782:	f855 7b04 	ldr.w	r7, [r5], #4
 1010786:	f846 7f04 	str.w	r7, [r6, #4]!
 101078a:	2c03      	cmp	r4, #3
 101078c:	d8f8      	bhi.n	1010780 <memmove+0x84>
 101078e:	f1ae 0404 	sub.w	r4, lr, #4
 1010792:	f024 0403 	bic.w	r4, r4, #3
 1010796:	3404      	adds	r4, #4
 1010798:	4421      	add	r1, r4
 101079a:	4423      	add	r3, r4
 101079c:	f002 0203 	and.w	r2, r2, #3
 10107a0:	b162      	cbz	r2, 10107bc <memmove+0xc0>
 10107a2:	3b01      	subs	r3, #1
 10107a4:	440a      	add	r2, r1
 10107a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 10107aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 10107ae:	428a      	cmp	r2, r1
 10107b0:	d1f9      	bne.n	10107a6 <memmove+0xaa>
 10107b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 10107b4:	4603      	mov	r3, r0
 10107b6:	e7f3      	b.n	10107a0 <memmove+0xa4>
 10107b8:	4603      	mov	r3, r0
 10107ba:	e7f2      	b.n	10107a2 <memmove+0xa6>
 10107bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 10107be:	4672      	mov	r2, lr
 10107c0:	e7ee      	b.n	10107a0 <memmove+0xa4>
 10107c2:	bf00      	nop

010107c4 <_Balloc>:
 10107c4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 10107c6:	b570      	push	{r4, r5, r6, lr}
 10107c8:	4605      	mov	r5, r0
 10107ca:	460c      	mov	r4, r1
 10107cc:	b14b      	cbz	r3, 10107e2 <_Balloc+0x1e>
 10107ce:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 10107d2:	b180      	cbz	r0, 10107f6 <_Balloc+0x32>
 10107d4:	6802      	ldr	r2, [r0, #0]
 10107d6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 10107da:	2300      	movs	r3, #0
 10107dc:	6103      	str	r3, [r0, #16]
 10107de:	60c3      	str	r3, [r0, #12]
 10107e0:	bd70      	pop	{r4, r5, r6, pc}
 10107e2:	2221      	movs	r2, #33	; 0x21
 10107e4:	2104      	movs	r1, #4
 10107e6:	f000 fbe1 	bl	1010fac <_calloc_r>
 10107ea:	64e8      	str	r0, [r5, #76]	; 0x4c
 10107ec:	4603      	mov	r3, r0
 10107ee:	2800      	cmp	r0, #0
 10107f0:	d1ed      	bne.n	10107ce <_Balloc+0xa>
 10107f2:	2000      	movs	r0, #0
 10107f4:	bd70      	pop	{r4, r5, r6, pc}
 10107f6:	2101      	movs	r1, #1
 10107f8:	fa01 f604 	lsl.w	r6, r1, r4
 10107fc:	1d72      	adds	r2, r6, #5
 10107fe:	4628      	mov	r0, r5
 1010800:	0092      	lsls	r2, r2, #2
 1010802:	f000 fbd3 	bl	1010fac <_calloc_r>
 1010806:	2800      	cmp	r0, #0
 1010808:	d0f3      	beq.n	10107f2 <_Balloc+0x2e>
 101080a:	6044      	str	r4, [r0, #4]
 101080c:	6086      	str	r6, [r0, #8]
 101080e:	e7e4      	b.n	10107da <_Balloc+0x16>

01010810 <_Bfree>:
 1010810:	b131      	cbz	r1, 1010820 <_Bfree+0x10>
 1010812:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 1010814:	684a      	ldr	r2, [r1, #4]
 1010816:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 101081a:	6008      	str	r0, [r1, #0]
 101081c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 1010820:	4770      	bx	lr
 1010822:	bf00      	nop

01010824 <__multadd>:
 1010824:	b5f0      	push	{r4, r5, r6, r7, lr}
 1010826:	690c      	ldr	r4, [r1, #16]
 1010828:	b083      	sub	sp, #12
 101082a:	460d      	mov	r5, r1
 101082c:	4606      	mov	r6, r0
 101082e:	f101 0e14 	add.w	lr, r1, #20
 1010832:	2700      	movs	r7, #0
 1010834:	f8de 0000 	ldr.w	r0, [lr]
 1010838:	b281      	uxth	r1, r0
 101083a:	fb02 3301 	mla	r3, r2, r1, r3
 101083e:	0c01      	lsrs	r1, r0, #16
 1010840:	0c18      	lsrs	r0, r3, #16
 1010842:	fb02 0101 	mla	r1, r2, r1, r0
 1010846:	b29b      	uxth	r3, r3
 1010848:	3701      	adds	r7, #1
 101084a:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 101084e:	42bc      	cmp	r4, r7
 1010850:	f84e 3b04 	str.w	r3, [lr], #4
 1010854:	ea4f 4311 	mov.w	r3, r1, lsr #16
 1010858:	dcec      	bgt.n	1010834 <__multadd+0x10>
 101085a:	b13b      	cbz	r3, 101086c <__multadd+0x48>
 101085c:	68aa      	ldr	r2, [r5, #8]
 101085e:	4294      	cmp	r4, r2
 1010860:	da07      	bge.n	1010872 <__multadd+0x4e>
 1010862:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 1010866:	3401      	adds	r4, #1
 1010868:	6153      	str	r3, [r2, #20]
 101086a:	612c      	str	r4, [r5, #16]
 101086c:	4628      	mov	r0, r5
 101086e:	b003      	add	sp, #12
 1010870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 1010872:	6869      	ldr	r1, [r5, #4]
 1010874:	9301      	str	r3, [sp, #4]
 1010876:	3101      	adds	r1, #1
 1010878:	4630      	mov	r0, r6
 101087a:	f7ff ffa3 	bl	10107c4 <_Balloc>
 101087e:	692a      	ldr	r2, [r5, #16]
 1010880:	3202      	adds	r2, #2
 1010882:	f105 010c 	add.w	r1, r5, #12
 1010886:	4607      	mov	r7, r0
 1010888:	0092      	lsls	r2, r2, #2
 101088a:	300c      	adds	r0, #12
 101088c:	f7fb fe60 	bl	100c550 <memcpy>
 1010890:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 1010892:	6869      	ldr	r1, [r5, #4]
 1010894:	9b01      	ldr	r3, [sp, #4]
 1010896:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 101089a:	6028      	str	r0, [r5, #0]
 101089c:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 10108a0:	463d      	mov	r5, r7
 10108a2:	e7de      	b.n	1010862 <__multadd+0x3e>

010108a4 <__hi0bits>:
 10108a4:	0c02      	lsrs	r2, r0, #16
 10108a6:	0412      	lsls	r2, r2, #16
 10108a8:	4603      	mov	r3, r0
 10108aa:	b9b2      	cbnz	r2, 10108da <__hi0bits+0x36>
 10108ac:	0403      	lsls	r3, r0, #16
 10108ae:	2010      	movs	r0, #16
 10108b0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 10108b4:	bf04      	itt	eq
 10108b6:	021b      	lsleq	r3, r3, #8
 10108b8:	3008      	addeq	r0, #8
 10108ba:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 10108be:	bf04      	itt	eq
 10108c0:	011b      	lsleq	r3, r3, #4
 10108c2:	3004      	addeq	r0, #4
 10108c4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 10108c8:	bf04      	itt	eq
 10108ca:	009b      	lsleq	r3, r3, #2
 10108cc:	3002      	addeq	r0, #2
 10108ce:	2b00      	cmp	r3, #0
 10108d0:	db02      	blt.n	10108d8 <__hi0bits+0x34>
 10108d2:	005b      	lsls	r3, r3, #1
 10108d4:	d403      	bmi.n	10108de <__hi0bits+0x3a>
 10108d6:	2020      	movs	r0, #32
 10108d8:	4770      	bx	lr
 10108da:	2000      	movs	r0, #0
 10108dc:	e7e8      	b.n	10108b0 <__hi0bits+0xc>
 10108de:	3001      	adds	r0, #1
 10108e0:	4770      	bx	lr
 10108e2:	bf00      	nop

010108e4 <__lo0bits>:
 10108e4:	6803      	ldr	r3, [r0, #0]
 10108e6:	f013 0207 	ands.w	r2, r3, #7
 10108ea:	4601      	mov	r1, r0
 10108ec:	d007      	beq.n	10108fe <__lo0bits+0x1a>
 10108ee:	07da      	lsls	r2, r3, #31
 10108f0:	d421      	bmi.n	1010936 <__lo0bits+0x52>
 10108f2:	0798      	lsls	r0, r3, #30
 10108f4:	d421      	bmi.n	101093a <__lo0bits+0x56>
 10108f6:	089b      	lsrs	r3, r3, #2
 10108f8:	600b      	str	r3, [r1, #0]
 10108fa:	2002      	movs	r0, #2
 10108fc:	4770      	bx	lr
 10108fe:	b298      	uxth	r0, r3
 1010900:	b198      	cbz	r0, 101092a <__lo0bits+0x46>
 1010902:	4610      	mov	r0, r2
 1010904:	f013 0fff 	tst.w	r3, #255	; 0xff
 1010908:	bf04      	itt	eq
 101090a:	0a1b      	lsreq	r3, r3, #8
 101090c:	3008      	addeq	r0, #8
 101090e:	071a      	lsls	r2, r3, #28
 1010910:	bf04      	itt	eq
 1010912:	091b      	lsreq	r3, r3, #4
 1010914:	3004      	addeq	r0, #4
 1010916:	079a      	lsls	r2, r3, #30
 1010918:	bf04      	itt	eq
 101091a:	089b      	lsreq	r3, r3, #2
 101091c:	3002      	addeq	r0, #2
 101091e:	07da      	lsls	r2, r3, #31
 1010920:	d407      	bmi.n	1010932 <__lo0bits+0x4e>
 1010922:	085b      	lsrs	r3, r3, #1
 1010924:	d104      	bne.n	1010930 <__lo0bits+0x4c>
 1010926:	2020      	movs	r0, #32
 1010928:	4770      	bx	lr
 101092a:	0c1b      	lsrs	r3, r3, #16
 101092c:	2010      	movs	r0, #16
 101092e:	e7e9      	b.n	1010904 <__lo0bits+0x20>
 1010930:	3001      	adds	r0, #1
 1010932:	600b      	str	r3, [r1, #0]
 1010934:	4770      	bx	lr
 1010936:	2000      	movs	r0, #0
 1010938:	4770      	bx	lr
 101093a:	085b      	lsrs	r3, r3, #1
 101093c:	600b      	str	r3, [r1, #0]
 101093e:	2001      	movs	r0, #1
 1010940:	4770      	bx	lr
 1010942:	bf00      	nop

01010944 <__i2b>:
 1010944:	b510      	push	{r4, lr}
 1010946:	460c      	mov	r4, r1
 1010948:	2101      	movs	r1, #1
 101094a:	f7ff ff3b 	bl	10107c4 <_Balloc>
 101094e:	2201      	movs	r2, #1
 1010950:	6144      	str	r4, [r0, #20]
 1010952:	6102      	str	r2, [r0, #16]
 1010954:	bd10      	pop	{r4, pc}
 1010956:	bf00      	nop

01010958 <__multiply>:
 1010958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 101095c:	690c      	ldr	r4, [r1, #16]
 101095e:	6915      	ldr	r5, [r2, #16]
 1010960:	42ac      	cmp	r4, r5
 1010962:	b083      	sub	sp, #12
 1010964:	468b      	mov	fp, r1
 1010966:	4616      	mov	r6, r2
 1010968:	da04      	bge.n	1010974 <__multiply+0x1c>
 101096a:	4622      	mov	r2, r4
 101096c:	46b3      	mov	fp, r6
 101096e:	462c      	mov	r4, r5
 1010970:	460e      	mov	r6, r1
 1010972:	4615      	mov	r5, r2
 1010974:	f8db 3008 	ldr.w	r3, [fp, #8]
 1010978:	f8db 1004 	ldr.w	r1, [fp, #4]
 101097c:	eb04 0805 	add.w	r8, r4, r5
 1010980:	4598      	cmp	r8, r3
 1010982:	bfc8      	it	gt
 1010984:	3101      	addgt	r1, #1
 1010986:	f7ff ff1d 	bl	10107c4 <_Balloc>
 101098a:	f100 0914 	add.w	r9, r0, #20
 101098e:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
 1010992:	45d1      	cmp	r9, sl
 1010994:	9000      	str	r0, [sp, #0]
 1010996:	d205      	bcs.n	10109a4 <__multiply+0x4c>
 1010998:	464b      	mov	r3, r9
 101099a:	2100      	movs	r1, #0
 101099c:	f843 1b04 	str.w	r1, [r3], #4
 10109a0:	459a      	cmp	sl, r3
 10109a2:	d8fb      	bhi.n	101099c <__multiply+0x44>
 10109a4:	f106 0c14 	add.w	ip, r6, #20
 10109a8:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
 10109ac:	f10b 0b14 	add.w	fp, fp, #20
 10109b0:	459c      	cmp	ip, r3
 10109b2:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
 10109b6:	d24c      	bcs.n	1010a52 <__multiply+0xfa>
 10109b8:	f8cd a004 	str.w	sl, [sp, #4]
 10109bc:	469a      	mov	sl, r3
 10109be:	f8dc 5000 	ldr.w	r5, [ip]
 10109c2:	b2af      	uxth	r7, r5
 10109c4:	b1ef      	cbz	r7, 1010a02 <__multiply+0xaa>
 10109c6:	2100      	movs	r1, #0
 10109c8:	464d      	mov	r5, r9
 10109ca:	465e      	mov	r6, fp
 10109cc:	460c      	mov	r4, r1
 10109ce:	f856 2b04 	ldr.w	r2, [r6], #4
 10109d2:	6828      	ldr	r0, [r5, #0]
 10109d4:	b293      	uxth	r3, r2
 10109d6:	b281      	uxth	r1, r0
 10109d8:	fb07 1303 	mla	r3, r7, r3, r1
 10109dc:	0c12      	lsrs	r2, r2, #16
 10109de:	0c01      	lsrs	r1, r0, #16
 10109e0:	4423      	add	r3, r4
 10109e2:	fb07 1102 	mla	r1, r7, r2, r1
 10109e6:	eb01 4113 	add.w	r1, r1, r3, lsr #16
 10109ea:	b29b      	uxth	r3, r3
 10109ec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 10109f0:	45b6      	cmp	lr, r6
 10109f2:	f845 3b04 	str.w	r3, [r5], #4
 10109f6:	ea4f 4411 	mov.w	r4, r1, lsr #16
 10109fa:	d8e8      	bhi.n	10109ce <__multiply+0x76>
 10109fc:	602c      	str	r4, [r5, #0]
 10109fe:	f8dc 5000 	ldr.w	r5, [ip]
 1010a02:	0c2d      	lsrs	r5, r5, #16
 1010a04:	d01d      	beq.n	1010a42 <__multiply+0xea>
 1010a06:	f8d9 3000 	ldr.w	r3, [r9]
 1010a0a:	4648      	mov	r0, r9
 1010a0c:	461c      	mov	r4, r3
 1010a0e:	4659      	mov	r1, fp
 1010a10:	2200      	movs	r2, #0
 1010a12:	880e      	ldrh	r6, [r1, #0]
 1010a14:	0c24      	lsrs	r4, r4, #16
 1010a16:	fb05 4406 	mla	r4, r5, r6, r4
 1010a1a:	4422      	add	r2, r4
 1010a1c:	b29b      	uxth	r3, r3
 1010a1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 1010a22:	f840 3b04 	str.w	r3, [r0], #4
 1010a26:	f851 3b04 	ldr.w	r3, [r1], #4
 1010a2a:	6804      	ldr	r4, [r0, #0]
 1010a2c:	0c1b      	lsrs	r3, r3, #16
 1010a2e:	b2a6      	uxth	r6, r4
 1010a30:	fb05 6303 	mla	r3, r5, r3, r6
 1010a34:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 1010a38:	458e      	cmp	lr, r1
 1010a3a:	ea4f 4213 	mov.w	r2, r3, lsr #16
 1010a3e:	d8e8      	bhi.n	1010a12 <__multiply+0xba>
 1010a40:	6003      	str	r3, [r0, #0]
 1010a42:	f10c 0c04 	add.w	ip, ip, #4
 1010a46:	45e2      	cmp	sl, ip
 1010a48:	f109 0904 	add.w	r9, r9, #4
 1010a4c:	d8b7      	bhi.n	10109be <__multiply+0x66>
 1010a4e:	f8dd a004 	ldr.w	sl, [sp, #4]
 1010a52:	f1b8 0f00 	cmp.w	r8, #0
 1010a56:	dd0b      	ble.n	1010a70 <__multiply+0x118>
 1010a58:	f85a 3c04 	ldr.w	r3, [sl, #-4]
 1010a5c:	f1aa 0a04 	sub.w	sl, sl, #4
 1010a60:	b11b      	cbz	r3, 1010a6a <__multiply+0x112>
 1010a62:	e005      	b.n	1010a70 <__multiply+0x118>
 1010a64:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
 1010a68:	b913      	cbnz	r3, 1010a70 <__multiply+0x118>
 1010a6a:	f1b8 0801 	subs.w	r8, r8, #1
 1010a6e:	d1f9      	bne.n	1010a64 <__multiply+0x10c>
 1010a70:	9800      	ldr	r0, [sp, #0]
 1010a72:	f8c0 8010 	str.w	r8, [r0, #16]
 1010a76:	b003      	add	sp, #12
 1010a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

01010a7c <__pow5mult>:
 1010a7c:	f012 0303 	ands.w	r3, r2, #3
 1010a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1010a84:	4614      	mov	r4, r2
 1010a86:	4607      	mov	r7, r0
 1010a88:	d12e      	bne.n	1010ae8 <__pow5mult+0x6c>
 1010a8a:	460d      	mov	r5, r1
 1010a8c:	10a4      	asrs	r4, r4, #2
 1010a8e:	d01c      	beq.n	1010aca <__pow5mult+0x4e>
 1010a90:	6cbe      	ldr	r6, [r7, #72]	; 0x48
 1010a92:	b396      	cbz	r6, 1010afa <__pow5mult+0x7e>
 1010a94:	07e3      	lsls	r3, r4, #31
 1010a96:	f04f 0800 	mov.w	r8, #0
 1010a9a:	d406      	bmi.n	1010aaa <__pow5mult+0x2e>
 1010a9c:	1064      	asrs	r4, r4, #1
 1010a9e:	d014      	beq.n	1010aca <__pow5mult+0x4e>
 1010aa0:	6830      	ldr	r0, [r6, #0]
 1010aa2:	b1a8      	cbz	r0, 1010ad0 <__pow5mult+0x54>
 1010aa4:	4606      	mov	r6, r0
 1010aa6:	07e3      	lsls	r3, r4, #31
 1010aa8:	d5f8      	bpl.n	1010a9c <__pow5mult+0x20>
 1010aaa:	4632      	mov	r2, r6
 1010aac:	4629      	mov	r1, r5
 1010aae:	4638      	mov	r0, r7
 1010ab0:	f7ff ff52 	bl	1010958 <__multiply>
 1010ab4:	b1b5      	cbz	r5, 1010ae4 <__pow5mult+0x68>
 1010ab6:	686a      	ldr	r2, [r5, #4]
 1010ab8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 1010aba:	1064      	asrs	r4, r4, #1
 1010abc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 1010ac0:	6029      	str	r1, [r5, #0]
 1010ac2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 1010ac6:	4605      	mov	r5, r0
 1010ac8:	d1ea      	bne.n	1010aa0 <__pow5mult+0x24>
 1010aca:	4628      	mov	r0, r5
 1010acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 1010ad0:	4632      	mov	r2, r6
 1010ad2:	4631      	mov	r1, r6
 1010ad4:	4638      	mov	r0, r7
 1010ad6:	f7ff ff3f 	bl	1010958 <__multiply>
 1010ada:	6030      	str	r0, [r6, #0]
 1010adc:	f8c0 8000 	str.w	r8, [r0]
 1010ae0:	4606      	mov	r6, r0
 1010ae2:	e7e0      	b.n	1010aa6 <__pow5mult+0x2a>
 1010ae4:	4605      	mov	r5, r0
 1010ae6:	e7d9      	b.n	1010a9c <__pow5mult+0x20>
 1010ae8:	1e5a      	subs	r2, r3, #1
 1010aea:	4d0b      	ldr	r5, [pc, #44]	; (1010b18 <__pow5mult+0x9c>)
 1010aec:	2300      	movs	r3, #0
 1010aee:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 1010af2:	f7ff fe97 	bl	1010824 <__multadd>
 1010af6:	4605      	mov	r5, r0
 1010af8:	e7c8      	b.n	1010a8c <__pow5mult+0x10>
 1010afa:	2101      	movs	r1, #1
 1010afc:	4638      	mov	r0, r7
 1010afe:	f7ff fe61 	bl	10107c4 <_Balloc>
 1010b02:	f240 2171 	movw	r1, #625	; 0x271
 1010b06:	2201      	movs	r2, #1
 1010b08:	2300      	movs	r3, #0
 1010b0a:	6141      	str	r1, [r0, #20]
 1010b0c:	6102      	str	r2, [r0, #16]
 1010b0e:	4606      	mov	r6, r0
 1010b10:	64b8      	str	r0, [r7, #72]	; 0x48
 1010b12:	6003      	str	r3, [r0, #0]
 1010b14:	e7be      	b.n	1010a94 <__pow5mult+0x18>
 1010b16:	bf00      	nop
 1010b18:	010225c0 	.word	0x010225c0

01010b1c <__lshift>:
 1010b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 1010b20:	4691      	mov	r9, r2
 1010b22:	690a      	ldr	r2, [r1, #16]
 1010b24:	688b      	ldr	r3, [r1, #8]
 1010b26:	ea4f 1469 	mov.w	r4, r9, asr #5
 1010b2a:	eb04 0802 	add.w	r8, r4, r2
 1010b2e:	f108 0501 	add.w	r5, r8, #1
 1010b32:	429d      	cmp	r5, r3
 1010b34:	460e      	mov	r6, r1
 1010b36:	4607      	mov	r7, r0
 1010b38:	6849      	ldr	r1, [r1, #4]
 1010b3a:	dd04      	ble.n	1010b46 <__lshift+0x2a>
 1010b3c:	005b      	lsls	r3, r3, #1
 1010b3e:	429d      	cmp	r5, r3
 1010b40:	f101 0101 	add.w	r1, r1, #1
 1010b44:	dcfa      	bgt.n	1010b3c <__lshift+0x20>
 1010b46:	4638      	mov	r0, r7
 1010b48:	f7ff fe3c 	bl	10107c4 <_Balloc>
 1010b4c:	2c00      	cmp	r4, #0
 1010b4e:	f100 0314 	add.w	r3, r0, #20
 1010b52:	dd06      	ble.n	1010b62 <__lshift+0x46>
 1010b54:	eb03 0284 	add.w	r2, r3, r4, lsl #2
 1010b58:	2100      	movs	r1, #0
 1010b5a:	f843 1b04 	str.w	r1, [r3], #4
 1010b5e:	429a      	cmp	r2, r3
 1010b60:	d1fb      	bne.n	1010b5a <__lshift+0x3e>
 1010b62:	6934      	ldr	r4, [r6, #16]
 1010b64:	f106 0114 	add.w	r1, r6, #20
 1010b68:	f019 091f 	ands.w	r9, r9, #31
 1010b6c:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
 1010b70:	d01d      	beq.n	1010bae <__lshift+0x92>
 1010b72:	f1c9 0c20 	rsb	ip, r9, #32
 1010b76:	2200      	movs	r2, #0
 1010b78:	680c      	ldr	r4, [r1, #0]
 1010b7a:	fa04 f409 	lsl.w	r4, r4, r9
 1010b7e:	4314      	orrs	r4, r2
 1010b80:	f843 4b04 	str.w	r4, [r3], #4
 1010b84:	f851 2b04 	ldr.w	r2, [r1], #4
 1010b88:	458e      	cmp	lr, r1
 1010b8a:	fa22 f20c 	lsr.w	r2, r2, ip
 1010b8e:	d8f3      	bhi.n	1010b78 <__lshift+0x5c>
 1010b90:	601a      	str	r2, [r3, #0]
 1010b92:	b10a      	cbz	r2, 1010b98 <__lshift+0x7c>
 1010b94:	f108 0502 	add.w	r5, r8, #2
 1010b98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 1010b9a:	6872      	ldr	r2, [r6, #4]
 1010b9c:	3d01      	subs	r5, #1
 1010b9e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 1010ba2:	6105      	str	r5, [r0, #16]
 1010ba4:	6031      	str	r1, [r6, #0]
 1010ba6:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 1010baa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 1010bae:	3b04      	subs	r3, #4
 1010bb0:	f851 2b04 	ldr.w	r2, [r1], #4
 1010bb4:	f843 2f04 	str.w	r2, [r3, #4]!
 1010bb8:	458e      	cmp	lr, r1
 1010bba:	d8f9      	bhi.n	1010bb0 <__lshift+0x94>
 1010bbc:	e7ec      	b.n	1010b98 <__lshift+0x7c>
 1010bbe:	bf00      	nop

01010bc0 <__mcmp>:
 1010bc0:	b430      	push	{r4, r5}
 1010bc2:	690b      	ldr	r3, [r1, #16]
 1010bc4:	4605      	mov	r5, r0
 1010bc6:	6900      	ldr	r0, [r0, #16]
 1010bc8:	1ac0      	subs	r0, r0, r3
 1010bca:	d10f      	bne.n	1010bec <__mcmp+0x2c>
 1010bcc:	009b      	lsls	r3, r3, #2
 1010bce:	3514      	adds	r5, #20
 1010bd0:	3114      	adds	r1, #20
 1010bd2:	4419      	add	r1, r3
 1010bd4:	442b      	add	r3, r5
 1010bd6:	e001      	b.n	1010bdc <__mcmp+0x1c>
 1010bd8:	429d      	cmp	r5, r3
 1010bda:	d207      	bcs.n	1010bec <__mcmp+0x2c>
 1010bdc:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 1010be0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 1010be4:	4294      	cmp	r4, r2
 1010be6:	d0f7      	beq.n	1010bd8 <__mcmp+0x18>
 1010be8:	d302      	bcc.n	1010bf0 <__mcmp+0x30>
 1010bea:	2001      	movs	r0, #1
 1010bec:	bc30      	pop	{r4, r5}
 1010bee:	4770      	bx	lr
 1010bf0:	f04f 30ff 	mov.w	r0, #4294967295
 1010bf4:	e7fa      	b.n	1010bec <__mcmp+0x2c>
 1010bf6:	bf00      	nop

01010bf8 <__mdiff>:
 1010bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1010bfc:	690f      	ldr	r7, [r1, #16]
 1010bfe:	460e      	mov	r6, r1
 1010c00:	6911      	ldr	r1, [r2, #16]
 1010c02:	1a7f      	subs	r7, r7, r1
 1010c04:	2f00      	cmp	r7, #0
 1010c06:	4690      	mov	r8, r2
 1010c08:	d117      	bne.n	1010c3a <__mdiff+0x42>
 1010c0a:	0089      	lsls	r1, r1, #2
 1010c0c:	f106 0514 	add.w	r5, r6, #20
 1010c10:	f102 0e14 	add.w	lr, r2, #20
 1010c14:	186b      	adds	r3, r5, r1
 1010c16:	4471      	add	r1, lr
 1010c18:	e001      	b.n	1010c1e <__mdiff+0x26>
 1010c1a:	429d      	cmp	r5, r3
 1010c1c:	d25c      	bcs.n	1010cd8 <__mdiff+0xe0>
 1010c1e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 1010c22:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 1010c26:	42a2      	cmp	r2, r4
 1010c28:	d0f7      	beq.n	1010c1a <__mdiff+0x22>
 1010c2a:	d25e      	bcs.n	1010cea <__mdiff+0xf2>
 1010c2c:	4633      	mov	r3, r6
 1010c2e:	462c      	mov	r4, r5
 1010c30:	4646      	mov	r6, r8
 1010c32:	4675      	mov	r5, lr
 1010c34:	4698      	mov	r8, r3
 1010c36:	2701      	movs	r7, #1
 1010c38:	e005      	b.n	1010c46 <__mdiff+0x4e>
 1010c3a:	db58      	blt.n	1010cee <__mdiff+0xf6>
 1010c3c:	f106 0514 	add.w	r5, r6, #20
 1010c40:	f108 0414 	add.w	r4, r8, #20
 1010c44:	2700      	movs	r7, #0
 1010c46:	6871      	ldr	r1, [r6, #4]
 1010c48:	f7ff fdbc 	bl	10107c4 <_Balloc>
 1010c4c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 1010c50:	6936      	ldr	r6, [r6, #16]
 1010c52:	60c7      	str	r7, [r0, #12]
 1010c54:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
 1010c58:	46a6      	mov	lr, r4
 1010c5a:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 1010c5e:	f100 0414 	add.w	r4, r0, #20
 1010c62:	2300      	movs	r3, #0
 1010c64:	f85e 1b04 	ldr.w	r1, [lr], #4
 1010c68:	f855 8b04 	ldr.w	r8, [r5], #4
 1010c6c:	b28a      	uxth	r2, r1
 1010c6e:	fa13 f388 	uxtah	r3, r3, r8
 1010c72:	0c09      	lsrs	r1, r1, #16
 1010c74:	1a9a      	subs	r2, r3, r2
 1010c76:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
 1010c7a:	eb03 4322 	add.w	r3, r3, r2, asr #16
 1010c7e:	b292      	uxth	r2, r2
 1010c80:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 1010c84:	45f4      	cmp	ip, lr
 1010c86:	f844 2b04 	str.w	r2, [r4], #4
 1010c8a:	ea4f 4323 	mov.w	r3, r3, asr #16
 1010c8e:	d8e9      	bhi.n	1010c64 <__mdiff+0x6c>
 1010c90:	42af      	cmp	r7, r5
 1010c92:	d917      	bls.n	1010cc4 <__mdiff+0xcc>
 1010c94:	46a4      	mov	ip, r4
 1010c96:	46ae      	mov	lr, r5
 1010c98:	f85e 2b04 	ldr.w	r2, [lr], #4
 1010c9c:	fa13 f382 	uxtah	r3, r3, r2
 1010ca0:	1419      	asrs	r1, r3, #16
 1010ca2:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 1010ca6:	b29b      	uxth	r3, r3
 1010ca8:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
 1010cac:	4577      	cmp	r7, lr
 1010cae:	f84c 2b04 	str.w	r2, [ip], #4
 1010cb2:	ea4f 4321 	mov.w	r3, r1, asr #16
 1010cb6:	d8ef      	bhi.n	1010c98 <__mdiff+0xa0>
 1010cb8:	43ed      	mvns	r5, r5
 1010cba:	442f      	add	r7, r5
 1010cbc:	f027 0703 	bic.w	r7, r7, #3
 1010cc0:	3704      	adds	r7, #4
 1010cc2:	443c      	add	r4, r7
 1010cc4:	3c04      	subs	r4, #4
 1010cc6:	b922      	cbnz	r2, 1010cd2 <__mdiff+0xda>
 1010cc8:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 1010ccc:	3e01      	subs	r6, #1
 1010cce:	2b00      	cmp	r3, #0
 1010cd0:	d0fa      	beq.n	1010cc8 <__mdiff+0xd0>
 1010cd2:	6106      	str	r6, [r0, #16]
 1010cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 1010cd8:	2100      	movs	r1, #0
 1010cda:	f7ff fd73 	bl	10107c4 <_Balloc>
 1010cde:	2201      	movs	r2, #1
 1010ce0:	2300      	movs	r3, #0
 1010ce2:	6102      	str	r2, [r0, #16]
 1010ce4:	6143      	str	r3, [r0, #20]
 1010ce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 1010cea:	4674      	mov	r4, lr
 1010cec:	e7ab      	b.n	1010c46 <__mdiff+0x4e>
 1010cee:	4633      	mov	r3, r6
 1010cf0:	f106 0414 	add.w	r4, r6, #20
 1010cf4:	f102 0514 	add.w	r5, r2, #20
 1010cf8:	4616      	mov	r6, r2
 1010cfa:	2701      	movs	r7, #1
 1010cfc:	4698      	mov	r8, r3
 1010cfe:	e7a2      	b.n	1010c46 <__mdiff+0x4e>

01010d00 <__d2b>:
 1010d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1010d04:	b082      	sub	sp, #8
 1010d06:	2101      	movs	r1, #1
 1010d08:	461c      	mov	r4, r3
 1010d0a:	f3c3 570a 	ubfx	r7, r3, #20, #11
 1010d0e:	4615      	mov	r5, r2
 1010d10:	9e08      	ldr	r6, [sp, #32]
 1010d12:	f7ff fd57 	bl	10107c4 <_Balloc>
 1010d16:	f3c4 0413 	ubfx	r4, r4, #0, #20
 1010d1a:	4680      	mov	r8, r0
 1010d1c:	b10f      	cbz	r7, 1010d22 <__d2b+0x22>
 1010d1e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 1010d22:	9401      	str	r4, [sp, #4]
 1010d24:	b31d      	cbz	r5, 1010d6e <__d2b+0x6e>
 1010d26:	a802      	add	r0, sp, #8
 1010d28:	f840 5d08 	str.w	r5, [r0, #-8]!
 1010d2c:	f7ff fdda 	bl	10108e4 <__lo0bits>
 1010d30:	2800      	cmp	r0, #0
 1010d32:	d134      	bne.n	1010d9e <__d2b+0x9e>
 1010d34:	e89d 000c 	ldmia.w	sp, {r2, r3}
 1010d38:	f8c8 2014 	str.w	r2, [r8, #20]
 1010d3c:	2b00      	cmp	r3, #0
 1010d3e:	bf0c      	ite	eq
 1010d40:	2101      	moveq	r1, #1
 1010d42:	2102      	movne	r1, #2
 1010d44:	f8c8 3018 	str.w	r3, [r8, #24]
 1010d48:	f8c8 1010 	str.w	r1, [r8, #16]
 1010d4c:	b9df      	cbnz	r7, 1010d86 <__d2b+0x86>
 1010d4e:	eb08 0381 	add.w	r3, r8, r1, lsl #2
 1010d52:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 1010d56:	6030      	str	r0, [r6, #0]
 1010d58:	6918      	ldr	r0, [r3, #16]
 1010d5a:	f7ff fda3 	bl	10108a4 <__hi0bits>
 1010d5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 1010d60:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 1010d64:	6018      	str	r0, [r3, #0]
 1010d66:	4640      	mov	r0, r8
 1010d68:	b002      	add	sp, #8
 1010d6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 1010d6e:	a801      	add	r0, sp, #4
 1010d70:	f7ff fdb8 	bl	10108e4 <__lo0bits>
 1010d74:	9b01      	ldr	r3, [sp, #4]
 1010d76:	f8c8 3014 	str.w	r3, [r8, #20]
 1010d7a:	2101      	movs	r1, #1
 1010d7c:	3020      	adds	r0, #32
 1010d7e:	f8c8 1010 	str.w	r1, [r8, #16]
 1010d82:	2f00      	cmp	r7, #0
 1010d84:	d0e3      	beq.n	1010d4e <__d2b+0x4e>
 1010d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 1010d88:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
 1010d8c:	4407      	add	r7, r0
 1010d8e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 1010d92:	6037      	str	r7, [r6, #0]
 1010d94:	6018      	str	r0, [r3, #0]
 1010d96:	4640      	mov	r0, r8
 1010d98:	b002      	add	sp, #8
 1010d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 1010d9e:	e89d 000a 	ldmia.w	sp, {r1, r3}
 1010da2:	f1c0 0220 	rsb	r2, r0, #32
 1010da6:	fa03 f202 	lsl.w	r2, r3, r2
 1010daa:	430a      	orrs	r2, r1
 1010dac:	40c3      	lsrs	r3, r0
 1010dae:	9301      	str	r3, [sp, #4]
 1010db0:	f8c8 2014 	str.w	r2, [r8, #20]
 1010db4:	e7c2      	b.n	1010d3c <__d2b+0x3c>
 1010db6:	bf00      	nop

01010db8 <_read_r>:
 1010db8:	b570      	push	{r4, r5, r6, lr}
 1010dba:	460d      	mov	r5, r1
 1010dbc:	4c08      	ldr	r4, [pc, #32]	; (1010de0 <_read_r+0x28>)
 1010dbe:	4611      	mov	r1, r2
 1010dc0:	4606      	mov	r6, r0
 1010dc2:	461a      	mov	r2, r3
 1010dc4:	4628      	mov	r0, r5
 1010dc6:	2300      	movs	r3, #0
 1010dc8:	6023      	str	r3, [r4, #0]
 1010dca:	f7f2 ff73 	bl	1003cb4 <_read>
 1010dce:	1c43      	adds	r3, r0, #1
 1010dd0:	d000      	beq.n	1010dd4 <_read_r+0x1c>
 1010dd2:	bd70      	pop	{r4, r5, r6, pc}
 1010dd4:	6823      	ldr	r3, [r4, #0]
 1010dd6:	2b00      	cmp	r3, #0
 1010dd8:	d0fb      	beq.n	1010dd2 <_read_r+0x1a>
 1010dda:	6033      	str	r3, [r6, #0]
 1010ddc:	bd70      	pop	{r4, r5, r6, pc}
 1010dde:	bf00      	nop
 1010de0:	20008354 	.word	0x20008354

01010de4 <__swbuf_r>:
 1010de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 1010de6:	460d      	mov	r5, r1
 1010de8:	4614      	mov	r4, r2
 1010dea:	4606      	mov	r6, r0
 1010dec:	b110      	cbz	r0, 1010df4 <__swbuf_r+0x10>
 1010dee:	6b83      	ldr	r3, [r0, #56]	; 0x38
 1010df0:	2b00      	cmp	r3, #0
 1010df2:	d04b      	beq.n	1010e8c <__swbuf_r+0xa8>
 1010df4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 1010df8:	69a3      	ldr	r3, [r4, #24]
 1010dfa:	60a3      	str	r3, [r4, #8]
 1010dfc:	b291      	uxth	r1, r2
 1010dfe:	0708      	lsls	r0, r1, #28
 1010e00:	d539      	bpl.n	1010e76 <__swbuf_r+0x92>
 1010e02:	6923      	ldr	r3, [r4, #16]
 1010e04:	2b00      	cmp	r3, #0
 1010e06:	d036      	beq.n	1010e76 <__swbuf_r+0x92>
 1010e08:	b2ed      	uxtb	r5, r5
 1010e0a:	0489      	lsls	r1, r1, #18
 1010e0c:	462f      	mov	r7, r5
 1010e0e:	d515      	bpl.n	1010e3c <__swbuf_r+0x58>
 1010e10:	6822      	ldr	r2, [r4, #0]
 1010e12:	6961      	ldr	r1, [r4, #20]
 1010e14:	1ad3      	subs	r3, r2, r3
 1010e16:	428b      	cmp	r3, r1
 1010e18:	da1c      	bge.n	1010e54 <__swbuf_r+0x70>
 1010e1a:	3301      	adds	r3, #1
 1010e1c:	68a1      	ldr	r1, [r4, #8]
 1010e1e:	1c50      	adds	r0, r2, #1
 1010e20:	3901      	subs	r1, #1
 1010e22:	60a1      	str	r1, [r4, #8]
 1010e24:	6020      	str	r0, [r4, #0]
 1010e26:	7015      	strb	r5, [r2, #0]
 1010e28:	6962      	ldr	r2, [r4, #20]
 1010e2a:	429a      	cmp	r2, r3
 1010e2c:	d01a      	beq.n	1010e64 <__swbuf_r+0x80>
 1010e2e:	89a3      	ldrh	r3, [r4, #12]
 1010e30:	07db      	lsls	r3, r3, #31
 1010e32:	d501      	bpl.n	1010e38 <__swbuf_r+0x54>
 1010e34:	2d0a      	cmp	r5, #10
 1010e36:	d015      	beq.n	1010e64 <__swbuf_r+0x80>
 1010e38:	4638      	mov	r0, r7
 1010e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 1010e3c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 1010e3e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 1010e42:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 1010e46:	81a2      	strh	r2, [r4, #12]
 1010e48:	6822      	ldr	r2, [r4, #0]
 1010e4a:	6661      	str	r1, [r4, #100]	; 0x64
 1010e4c:	6961      	ldr	r1, [r4, #20]
 1010e4e:	1ad3      	subs	r3, r2, r3
 1010e50:	428b      	cmp	r3, r1
 1010e52:	dbe2      	blt.n	1010e1a <__swbuf_r+0x36>
 1010e54:	4621      	mov	r1, r4
 1010e56:	4630      	mov	r0, r6
 1010e58:	f7fa fe00 	bl	100ba5c <_fflush_r>
 1010e5c:	b940      	cbnz	r0, 1010e70 <__swbuf_r+0x8c>
 1010e5e:	6822      	ldr	r2, [r4, #0]
 1010e60:	2301      	movs	r3, #1
 1010e62:	e7db      	b.n	1010e1c <__swbuf_r+0x38>
 1010e64:	4621      	mov	r1, r4
 1010e66:	4630      	mov	r0, r6
 1010e68:	f7fa fdf8 	bl	100ba5c <_fflush_r>
 1010e6c:	2800      	cmp	r0, #0
 1010e6e:	d0e3      	beq.n	1010e38 <__swbuf_r+0x54>
 1010e70:	f04f 37ff 	mov.w	r7, #4294967295
 1010e74:	e7e0      	b.n	1010e38 <__swbuf_r+0x54>
 1010e76:	4621      	mov	r1, r4
 1010e78:	4630      	mov	r0, r6
 1010e7a:	f7fe f8e7 	bl	100f04c <__swsetup_r>
 1010e7e:	2800      	cmp	r0, #0
 1010e80:	d1f6      	bne.n	1010e70 <__swbuf_r+0x8c>
 1010e82:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 1010e86:	6923      	ldr	r3, [r4, #16]
 1010e88:	b291      	uxth	r1, r2
 1010e8a:	e7bd      	b.n	1010e08 <__swbuf_r+0x24>
 1010e8c:	f7fa fe3e 	bl	100bb0c <__sinit>
 1010e90:	e7b0      	b.n	1010df4 <__swbuf_r+0x10>
 1010e92:	bf00      	nop

01010e94 <_wcrtomb_r>:
 1010e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 1010e96:	4606      	mov	r6, r0
 1010e98:	b085      	sub	sp, #20
 1010e9a:	461f      	mov	r7, r3
 1010e9c:	b189      	cbz	r1, 1010ec2 <_wcrtomb_r+0x2e>
 1010e9e:	4c10      	ldr	r4, [pc, #64]	; (1010ee0 <_wcrtomb_r+0x4c>)
 1010ea0:	4d10      	ldr	r5, [pc, #64]	; (1010ee4 <_wcrtomb_r+0x50>)
 1010ea2:	6824      	ldr	r4, [r4, #0]
 1010ea4:	6b64      	ldr	r4, [r4, #52]	; 0x34
 1010ea6:	2c00      	cmp	r4, #0
 1010ea8:	bf08      	it	eq
 1010eaa:	462c      	moveq	r4, r5
 1010eac:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 1010eb0:	47a0      	blx	r4
 1010eb2:	1c43      	adds	r3, r0, #1
 1010eb4:	d103      	bne.n	1010ebe <_wcrtomb_r+0x2a>
 1010eb6:	2200      	movs	r2, #0
 1010eb8:	238a      	movs	r3, #138	; 0x8a
 1010eba:	603a      	str	r2, [r7, #0]
 1010ebc:	6033      	str	r3, [r6, #0]
 1010ebe:	b005      	add	sp, #20
 1010ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 1010ec2:	460c      	mov	r4, r1
 1010ec4:	4906      	ldr	r1, [pc, #24]	; (1010ee0 <_wcrtomb_r+0x4c>)
 1010ec6:	4a07      	ldr	r2, [pc, #28]	; (1010ee4 <_wcrtomb_r+0x50>)
 1010ec8:	6809      	ldr	r1, [r1, #0]
 1010eca:	6b49      	ldr	r1, [r1, #52]	; 0x34
 1010ecc:	2900      	cmp	r1, #0
 1010ece:	bf08      	it	eq
 1010ed0:	4611      	moveq	r1, r2
 1010ed2:	4622      	mov	r2, r4
 1010ed4:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
 1010ed8:	a901      	add	r1, sp, #4
 1010eda:	47a0      	blx	r4
 1010edc:	e7e9      	b.n	1010eb2 <_wcrtomb_r+0x1e>
 1010ede:	bf00      	nop
 1010ee0:	200005ec 	.word	0x200005ec
 1010ee4:	20000a18 	.word	0x20000a18

01010ee8 <__register_exitproc>:
 1010ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 1010eec:	4d2c      	ldr	r5, [pc, #176]	; (1010fa0 <__register_exitproc+0xb8>)
 1010eee:	4606      	mov	r6, r0
 1010ef0:	6828      	ldr	r0, [r5, #0]
 1010ef2:	4698      	mov	r8, r3
 1010ef4:	460f      	mov	r7, r1
 1010ef6:	4691      	mov	r9, r2
 1010ef8:	f7fb f802 	bl	100bf00 <__retarget_lock_acquire_recursive>
 1010efc:	4b29      	ldr	r3, [pc, #164]	; (1010fa4 <__register_exitproc+0xbc>)
 1010efe:	681c      	ldr	r4, [r3, #0]
 1010f00:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 1010f04:	2b00      	cmp	r3, #0
 1010f06:	d03e      	beq.n	1010f86 <__register_exitproc+0x9e>
 1010f08:	685a      	ldr	r2, [r3, #4]
 1010f0a:	2a1f      	cmp	r2, #31
 1010f0c:	dc1c      	bgt.n	1010f48 <__register_exitproc+0x60>
 1010f0e:	f102 0e01 	add.w	lr, r2, #1
 1010f12:	b176      	cbz	r6, 1010f32 <__register_exitproc+0x4a>
 1010f14:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 1010f18:	2401      	movs	r4, #1
 1010f1a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 1010f1e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
 1010f22:	4094      	lsls	r4, r2
 1010f24:	4320      	orrs	r0, r4
 1010f26:	2e02      	cmp	r6, #2
 1010f28:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
 1010f2c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 1010f30:	d023      	beq.n	1010f7a <__register_exitproc+0x92>
 1010f32:	3202      	adds	r2, #2
 1010f34:	f8c3 e004 	str.w	lr, [r3, #4]
 1010f38:	6828      	ldr	r0, [r5, #0]
 1010f3a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
 1010f3e:	f7fa ffe1 	bl	100bf04 <__retarget_lock_release_recursive>
 1010f42:	2000      	movs	r0, #0
 1010f44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 1010f48:	4b17      	ldr	r3, [pc, #92]	; (1010fa8 <__register_exitproc+0xc0>)
 1010f4a:	b30b      	cbz	r3, 1010f90 <__register_exitproc+0xa8>
 1010f4c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 1010f50:	f7fa ffda 	bl	100bf08 <malloc>
 1010f54:	4603      	mov	r3, r0
 1010f56:	b1d8      	cbz	r0, 1010f90 <__register_exitproc+0xa8>
 1010f58:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
 1010f5c:	6002      	str	r2, [r0, #0]
 1010f5e:	2100      	movs	r1, #0
 1010f60:	6041      	str	r1, [r0, #4]
 1010f62:	460a      	mov	r2, r1
 1010f64:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
 1010f68:	f04f 0e01 	mov.w	lr, #1
 1010f6c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 1010f70:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
 1010f74:	2e00      	cmp	r6, #0
 1010f76:	d0dc      	beq.n	1010f32 <__register_exitproc+0x4a>
 1010f78:	e7cc      	b.n	1010f14 <__register_exitproc+0x2c>
 1010f7a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
 1010f7e:	430c      	orrs	r4, r1
 1010f80:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
 1010f84:	e7d5      	b.n	1010f32 <__register_exitproc+0x4a>
 1010f86:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
 1010f8a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
 1010f8e:	e7bb      	b.n	1010f08 <__register_exitproc+0x20>
 1010f90:	6828      	ldr	r0, [r5, #0]
 1010f92:	f7fa ffb7 	bl	100bf04 <__retarget_lock_release_recursive>
 1010f96:	f04f 30ff 	mov.w	r0, #4294967295
 1010f9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 1010f9e:	bf00      	nop
 1010fa0:	20000f94 	.word	0x20000f94
 1010fa4:	01022320 	.word	0x01022320
 1010fa8:	0100bf09 	.word	0x0100bf09

01010fac <_calloc_r>:
 1010fac:	b510      	push	{r4, lr}
 1010fae:	fb02 f101 	mul.w	r1, r2, r1
 1010fb2:	f7fa ffb1 	bl	100bf18 <_malloc_r>
 1010fb6:	4604      	mov	r4, r0
 1010fb8:	b1d8      	cbz	r0, 1010ff2 <_calloc_r+0x46>
 1010fba:	f850 2c04 	ldr.w	r2, [r0, #-4]
 1010fbe:	f022 0203 	bic.w	r2, r2, #3
 1010fc2:	3a04      	subs	r2, #4
 1010fc4:	2a24      	cmp	r2, #36	; 0x24
 1010fc6:	d818      	bhi.n	1010ffa <_calloc_r+0x4e>
 1010fc8:	2a13      	cmp	r2, #19
 1010fca:	d914      	bls.n	1010ff6 <_calloc_r+0x4a>
 1010fcc:	2300      	movs	r3, #0
 1010fce:	2a1b      	cmp	r2, #27
 1010fd0:	6003      	str	r3, [r0, #0]
 1010fd2:	6043      	str	r3, [r0, #4]
 1010fd4:	d916      	bls.n	1011004 <_calloc_r+0x58>
 1010fd6:	2a24      	cmp	r2, #36	; 0x24
 1010fd8:	6083      	str	r3, [r0, #8]
 1010fda:	60c3      	str	r3, [r0, #12]
 1010fdc:	bf11      	iteee	ne
 1010fde:	f100 0210 	addne.w	r2, r0, #16
 1010fe2:	6103      	streq	r3, [r0, #16]
 1010fe4:	6143      	streq	r3, [r0, #20]
 1010fe6:	f100 0218 	addeq.w	r2, r0, #24
 1010fea:	2300      	movs	r3, #0
 1010fec:	6013      	str	r3, [r2, #0]
 1010fee:	6053      	str	r3, [r2, #4]
 1010ff0:	6093      	str	r3, [r2, #8]
 1010ff2:	4620      	mov	r0, r4
 1010ff4:	bd10      	pop	{r4, pc}
 1010ff6:	4602      	mov	r2, r0
 1010ff8:	e7f7      	b.n	1010fea <_calloc_r+0x3e>
 1010ffa:	2100      	movs	r1, #0
 1010ffc:	f7fb fb42 	bl	100c684 <memset>
 1011000:	4620      	mov	r0, r4
 1011002:	bd10      	pop	{r4, pc}
 1011004:	f100 0208 	add.w	r2, r0, #8
 1011008:	e7ef      	b.n	1010fea <_calloc_r+0x3e>
 101100a:	bf00      	nop

0101100c <_fstat_r>:
 101100c:	b538      	push	{r3, r4, r5, lr}
 101100e:	460b      	mov	r3, r1
 1011010:	4c07      	ldr	r4, [pc, #28]	; (1011030 <_fstat_r+0x24>)
 1011012:	4605      	mov	r5, r0
 1011014:	4611      	mov	r1, r2
 1011016:	4618      	mov	r0, r3
 1011018:	2300      	movs	r3, #0
 101101a:	6023      	str	r3, [r4, #0]
 101101c:	f7f6 f939 	bl	1007292 <_fstat>
 1011020:	1c43      	adds	r3, r0, #1
 1011022:	d000      	beq.n	1011026 <_fstat_r+0x1a>
 1011024:	bd38      	pop	{r3, r4, r5, pc}
 1011026:	6823      	ldr	r3, [r4, #0]
 1011028:	2b00      	cmp	r3, #0
 101102a:	d0fb      	beq.n	1011024 <_fstat_r+0x18>
 101102c:	602b      	str	r3, [r5, #0]
 101102e:	bd38      	pop	{r3, r4, r5, pc}
 1011030:	20008354 	.word	0x20008354

01011034 <_isatty_r>:
 1011034:	b538      	push	{r3, r4, r5, lr}
 1011036:	4c07      	ldr	r4, [pc, #28]	; (1011054 <_isatty_r+0x20>)
 1011038:	2300      	movs	r3, #0
 101103a:	4605      	mov	r5, r0
 101103c:	4608      	mov	r0, r1
 101103e:	6023      	str	r3, [r4, #0]
 1011040:	f7f6 f936 	bl	10072b0 <_isatty>
 1011044:	1c43      	adds	r3, r0, #1
 1011046:	d000      	beq.n	101104a <_isatty_r+0x16>
 1011048:	bd38      	pop	{r3, r4, r5, pc}
 101104a:	6823      	ldr	r3, [r4, #0]
 101104c:	2b00      	cmp	r3, #0
 101104e:	d0fb      	beq.n	1011048 <_isatty_r+0x14>
 1011050:	602b      	str	r3, [r5, #0]
 1011052:	bd38      	pop	{r3, r4, r5, pc}
 1011054:	20008354 	.word	0x20008354

01011058 <__aeabi_drsub>:
 1011058:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 101105c:	e002      	b.n	1011064 <__adddf3>
 101105e:	bf00      	nop

01011060 <__aeabi_dsub>:
 1011060:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

01011064 <__adddf3>:
 1011064:	b530      	push	{r4, r5, lr}
 1011066:	ea4f 0441 	mov.w	r4, r1, lsl #1
 101106a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 101106e:	ea94 0f05 	teq	r4, r5
 1011072:	bf08      	it	eq
 1011074:	ea90 0f02 	teqeq	r0, r2
 1011078:	bf1f      	itttt	ne
 101107a:	ea54 0c00 	orrsne.w	ip, r4, r0
 101107e:	ea55 0c02 	orrsne.w	ip, r5, r2
 1011082:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 1011086:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 101108a:	f000 80e2 	beq.w	1011252 <__adddf3+0x1ee>
 101108e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 1011092:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 1011096:	bfb8      	it	lt
 1011098:	426d      	neglt	r5, r5
 101109a:	dd0c      	ble.n	10110b6 <__adddf3+0x52>
 101109c:	442c      	add	r4, r5
 101109e:	ea80 0202 	eor.w	r2, r0, r2
 10110a2:	ea81 0303 	eor.w	r3, r1, r3
 10110a6:	ea82 0000 	eor.w	r0, r2, r0
 10110aa:	ea83 0101 	eor.w	r1, r3, r1
 10110ae:	ea80 0202 	eor.w	r2, r0, r2
 10110b2:	ea81 0303 	eor.w	r3, r1, r3
 10110b6:	2d36      	cmp	r5, #54	; 0x36
 10110b8:	bf88      	it	hi
 10110ba:	bd30      	pophi	{r4, r5, pc}
 10110bc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 10110c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 10110c4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 10110c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 10110cc:	d002      	beq.n	10110d4 <__adddf3+0x70>
 10110ce:	4240      	negs	r0, r0
 10110d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 10110d4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 10110d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 10110dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 10110e0:	d002      	beq.n	10110e8 <__adddf3+0x84>
 10110e2:	4252      	negs	r2, r2
 10110e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 10110e8:	ea94 0f05 	teq	r4, r5
 10110ec:	f000 80a7 	beq.w	101123e <__adddf3+0x1da>
 10110f0:	f1a4 0401 	sub.w	r4, r4, #1
 10110f4:	f1d5 0e20 	rsbs	lr, r5, #32
 10110f8:	db0d      	blt.n	1011116 <__adddf3+0xb2>
 10110fa:	fa02 fc0e 	lsl.w	ip, r2, lr
 10110fe:	fa22 f205 	lsr.w	r2, r2, r5
 1011102:	1880      	adds	r0, r0, r2
 1011104:	f141 0100 	adc.w	r1, r1, #0
 1011108:	fa03 f20e 	lsl.w	r2, r3, lr
 101110c:	1880      	adds	r0, r0, r2
 101110e:	fa43 f305 	asr.w	r3, r3, r5
 1011112:	4159      	adcs	r1, r3
 1011114:	e00e      	b.n	1011134 <__adddf3+0xd0>
 1011116:	f1a5 0520 	sub.w	r5, r5, #32
 101111a:	f10e 0e20 	add.w	lr, lr, #32
 101111e:	2a01      	cmp	r2, #1
 1011120:	fa03 fc0e 	lsl.w	ip, r3, lr
 1011124:	bf28      	it	cs
 1011126:	f04c 0c02 	orrcs.w	ip, ip, #2
 101112a:	fa43 f305 	asr.w	r3, r3, r5
 101112e:	18c0      	adds	r0, r0, r3
 1011130:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 1011134:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 1011138:	d507      	bpl.n	101114a <__adddf3+0xe6>
 101113a:	f04f 0e00 	mov.w	lr, #0
 101113e:	f1dc 0c00 	rsbs	ip, ip, #0
 1011142:	eb7e 0000 	sbcs.w	r0, lr, r0
 1011146:	eb6e 0101 	sbc.w	r1, lr, r1
 101114a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 101114e:	d31b      	bcc.n	1011188 <__adddf3+0x124>
 1011150:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 1011154:	d30c      	bcc.n	1011170 <__adddf3+0x10c>
 1011156:	0849      	lsrs	r1, r1, #1
 1011158:	ea5f 0030 	movs.w	r0, r0, rrx
 101115c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 1011160:	f104 0401 	add.w	r4, r4, #1
 1011164:	ea4f 5244 	mov.w	r2, r4, lsl #21
 1011168:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 101116c:	f080 809a 	bcs.w	10112a4 <__adddf3+0x240>
 1011170:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 1011174:	bf08      	it	eq
 1011176:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 101117a:	f150 0000 	adcs.w	r0, r0, #0
 101117e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 1011182:	ea41 0105 	orr.w	r1, r1, r5
 1011186:	bd30      	pop	{r4, r5, pc}
 1011188:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 101118c:	4140      	adcs	r0, r0
 101118e:	eb41 0101 	adc.w	r1, r1, r1
 1011192:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 1011196:	f1a4 0401 	sub.w	r4, r4, #1
 101119a:	d1e9      	bne.n	1011170 <__adddf3+0x10c>
 101119c:	f091 0f00 	teq	r1, #0
 10111a0:	bf04      	itt	eq
 10111a2:	4601      	moveq	r1, r0
 10111a4:	2000      	moveq	r0, #0
 10111a6:	fab1 f381 	clz	r3, r1
 10111aa:	bf08      	it	eq
 10111ac:	3320      	addeq	r3, #32
 10111ae:	f1a3 030b 	sub.w	r3, r3, #11
 10111b2:	f1b3 0220 	subs.w	r2, r3, #32
 10111b6:	da0c      	bge.n	10111d2 <__adddf3+0x16e>
 10111b8:	320c      	adds	r2, #12
 10111ba:	dd08      	ble.n	10111ce <__adddf3+0x16a>
 10111bc:	f102 0c14 	add.w	ip, r2, #20
 10111c0:	f1c2 020c 	rsb	r2, r2, #12
 10111c4:	fa01 f00c 	lsl.w	r0, r1, ip
 10111c8:	fa21 f102 	lsr.w	r1, r1, r2
 10111cc:	e00c      	b.n	10111e8 <__adddf3+0x184>
 10111ce:	f102 0214 	add.w	r2, r2, #20
 10111d2:	bfd8      	it	le
 10111d4:	f1c2 0c20 	rsble	ip, r2, #32
 10111d8:	fa01 f102 	lsl.w	r1, r1, r2
 10111dc:	fa20 fc0c 	lsr.w	ip, r0, ip
 10111e0:	bfdc      	itt	le
 10111e2:	ea41 010c 	orrle.w	r1, r1, ip
 10111e6:	4090      	lslle	r0, r2
 10111e8:	1ae4      	subs	r4, r4, r3
 10111ea:	bfa2      	ittt	ge
 10111ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 10111f0:	4329      	orrge	r1, r5
 10111f2:	bd30      	popge	{r4, r5, pc}
 10111f4:	ea6f 0404 	mvn.w	r4, r4
 10111f8:	3c1f      	subs	r4, #31
 10111fa:	da1c      	bge.n	1011236 <__adddf3+0x1d2>
 10111fc:	340c      	adds	r4, #12
 10111fe:	dc0e      	bgt.n	101121e <__adddf3+0x1ba>
 1011200:	f104 0414 	add.w	r4, r4, #20
 1011204:	f1c4 0220 	rsb	r2, r4, #32
 1011208:	fa20 f004 	lsr.w	r0, r0, r4
 101120c:	fa01 f302 	lsl.w	r3, r1, r2
 1011210:	ea40 0003 	orr.w	r0, r0, r3
 1011214:	fa21 f304 	lsr.w	r3, r1, r4
 1011218:	ea45 0103 	orr.w	r1, r5, r3
 101121c:	bd30      	pop	{r4, r5, pc}
 101121e:	f1c4 040c 	rsb	r4, r4, #12
 1011222:	f1c4 0220 	rsb	r2, r4, #32
 1011226:	fa20 f002 	lsr.w	r0, r0, r2
 101122a:	fa01 f304 	lsl.w	r3, r1, r4
 101122e:	ea40 0003 	orr.w	r0, r0, r3
 1011232:	4629      	mov	r1, r5
 1011234:	bd30      	pop	{r4, r5, pc}
 1011236:	fa21 f004 	lsr.w	r0, r1, r4
 101123a:	4629      	mov	r1, r5
 101123c:	bd30      	pop	{r4, r5, pc}
 101123e:	f094 0f00 	teq	r4, #0
 1011242:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 1011246:	bf06      	itte	eq
 1011248:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 101124c:	3401      	addeq	r4, #1
 101124e:	3d01      	subne	r5, #1
 1011250:	e74e      	b.n	10110f0 <__adddf3+0x8c>
 1011252:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 1011256:	bf18      	it	ne
 1011258:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 101125c:	d029      	beq.n	10112b2 <__adddf3+0x24e>
 101125e:	ea94 0f05 	teq	r4, r5
 1011262:	bf08      	it	eq
 1011264:	ea90 0f02 	teqeq	r0, r2
 1011268:	d005      	beq.n	1011276 <__adddf3+0x212>
 101126a:	ea54 0c00 	orrs.w	ip, r4, r0
 101126e:	bf04      	itt	eq
 1011270:	4619      	moveq	r1, r3
 1011272:	4610      	moveq	r0, r2
 1011274:	bd30      	pop	{r4, r5, pc}
 1011276:	ea91 0f03 	teq	r1, r3
 101127a:	bf1e      	ittt	ne
 101127c:	2100      	movne	r1, #0
 101127e:	2000      	movne	r0, #0
 1011280:	bd30      	popne	{r4, r5, pc}
 1011282:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 1011286:	d105      	bne.n	1011294 <__adddf3+0x230>
 1011288:	0040      	lsls	r0, r0, #1
 101128a:	4149      	adcs	r1, r1
 101128c:	bf28      	it	cs
 101128e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 1011292:	bd30      	pop	{r4, r5, pc}
 1011294:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 1011298:	bf3c      	itt	cc
 101129a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 101129e:	bd30      	popcc	{r4, r5, pc}
 10112a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 10112a4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 10112a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 10112ac:	f04f 0000 	mov.w	r0, #0
 10112b0:	bd30      	pop	{r4, r5, pc}
 10112b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 10112b6:	bf1a      	itte	ne
 10112b8:	4619      	movne	r1, r3
 10112ba:	4610      	movne	r0, r2
 10112bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 10112c0:	bf1c      	itt	ne
 10112c2:	460b      	movne	r3, r1
 10112c4:	4602      	movne	r2, r0
 10112c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 10112ca:	bf06      	itte	eq
 10112cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 10112d0:	ea91 0f03 	teqeq	r1, r3
 10112d4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 10112d8:	bd30      	pop	{r4, r5, pc}
 10112da:	bf00      	nop

010112dc <__aeabi_ui2d>:
 10112dc:	f090 0f00 	teq	r0, #0
 10112e0:	bf04      	itt	eq
 10112e2:	2100      	moveq	r1, #0
 10112e4:	4770      	bxeq	lr
 10112e6:	b530      	push	{r4, r5, lr}
 10112e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 10112ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 10112f0:	f04f 0500 	mov.w	r5, #0
 10112f4:	f04f 0100 	mov.w	r1, #0
 10112f8:	e750      	b.n	101119c <__adddf3+0x138>
 10112fa:	bf00      	nop

010112fc <__aeabi_i2d>:
 10112fc:	f090 0f00 	teq	r0, #0
 1011300:	bf04      	itt	eq
 1011302:	2100      	moveq	r1, #0
 1011304:	4770      	bxeq	lr
 1011306:	b530      	push	{r4, r5, lr}
 1011308:	f44f 6480 	mov.w	r4, #1024	; 0x400
 101130c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 1011310:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 1011314:	bf48      	it	mi
 1011316:	4240      	negmi	r0, r0
 1011318:	f04f 0100 	mov.w	r1, #0
 101131c:	e73e      	b.n	101119c <__adddf3+0x138>
 101131e:	bf00      	nop

01011320 <__aeabi_f2d>:
 1011320:	0042      	lsls	r2, r0, #1
 1011322:	ea4f 01e2 	mov.w	r1, r2, asr #3
 1011326:	ea4f 0131 	mov.w	r1, r1, rrx
 101132a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 101132e:	bf1f      	itttt	ne
 1011330:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 1011334:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 1011338:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 101133c:	4770      	bxne	lr
 101133e:	f092 0f00 	teq	r2, #0
 1011342:	bf14      	ite	ne
 1011344:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 1011348:	4770      	bxeq	lr
 101134a:	b530      	push	{r4, r5, lr}
 101134c:	f44f 7460 	mov.w	r4, #896	; 0x380
 1011350:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 1011354:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 1011358:	e720      	b.n	101119c <__adddf3+0x138>
 101135a:	bf00      	nop

0101135c <__aeabi_ul2d>:
 101135c:	ea50 0201 	orrs.w	r2, r0, r1
 1011360:	bf08      	it	eq
 1011362:	4770      	bxeq	lr
 1011364:	b530      	push	{r4, r5, lr}
 1011366:	f04f 0500 	mov.w	r5, #0
 101136a:	e00a      	b.n	1011382 <__aeabi_l2d+0x16>

0101136c <__aeabi_l2d>:
 101136c:	ea50 0201 	orrs.w	r2, r0, r1
 1011370:	bf08      	it	eq
 1011372:	4770      	bxeq	lr
 1011374:	b530      	push	{r4, r5, lr}
 1011376:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 101137a:	d502      	bpl.n	1011382 <__aeabi_l2d+0x16>
 101137c:	4240      	negs	r0, r0
 101137e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 1011382:	f44f 6480 	mov.w	r4, #1024	; 0x400
 1011386:	f104 0432 	add.w	r4, r4, #50	; 0x32
 101138a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 101138e:	f43f aedc 	beq.w	101114a <__adddf3+0xe6>
 1011392:	f04f 0203 	mov.w	r2, #3
 1011396:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 101139a:	bf18      	it	ne
 101139c:	3203      	addne	r2, #3
 101139e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 10113a2:	bf18      	it	ne
 10113a4:	3203      	addne	r2, #3
 10113a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 10113aa:	f1c2 0320 	rsb	r3, r2, #32
 10113ae:	fa00 fc03 	lsl.w	ip, r0, r3
 10113b2:	fa20 f002 	lsr.w	r0, r0, r2
 10113b6:	fa01 fe03 	lsl.w	lr, r1, r3
 10113ba:	ea40 000e 	orr.w	r0, r0, lr
 10113be:	fa21 f102 	lsr.w	r1, r1, r2
 10113c2:	4414      	add	r4, r2
 10113c4:	e6c1      	b.n	101114a <__adddf3+0xe6>
 10113c6:	bf00      	nop

010113c8 <__aeabi_dmul>:
 10113c8:	b570      	push	{r4, r5, r6, lr}
 10113ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 10113ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 10113d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 10113d6:	bf1d      	ittte	ne
 10113d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 10113dc:	ea94 0f0c 	teqne	r4, ip
 10113e0:	ea95 0f0c 	teqne	r5, ip
 10113e4:	f000 f8de 	bleq	10115a4 <__aeabi_dmul+0x1dc>
 10113e8:	442c      	add	r4, r5
 10113ea:	ea81 0603 	eor.w	r6, r1, r3
 10113ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 10113f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 10113f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 10113fa:	bf18      	it	ne
 10113fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 1011400:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 1011404:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 1011408:	d038      	beq.n	101147c <__aeabi_dmul+0xb4>
 101140a:	fba0 ce02 	umull	ip, lr, r0, r2
 101140e:	f04f 0500 	mov.w	r5, #0
 1011412:	fbe1 e502 	umlal	lr, r5, r1, r2
 1011416:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 101141a:	fbe0 e503 	umlal	lr, r5, r0, r3
 101141e:	f04f 0600 	mov.w	r6, #0
 1011422:	fbe1 5603 	umlal	r5, r6, r1, r3
 1011426:	f09c 0f00 	teq	ip, #0
 101142a:	bf18      	it	ne
 101142c:	f04e 0e01 	orrne.w	lr, lr, #1
 1011430:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 1011434:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 1011438:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 101143c:	d204      	bcs.n	1011448 <__aeabi_dmul+0x80>
 101143e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 1011442:	416d      	adcs	r5, r5
 1011444:	eb46 0606 	adc.w	r6, r6, r6
 1011448:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 101144c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 1011450:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 1011454:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 1011458:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 101145c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 1011460:	bf88      	it	hi
 1011462:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 1011466:	d81e      	bhi.n	10114a6 <__aeabi_dmul+0xde>
 1011468:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 101146c:	bf08      	it	eq
 101146e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 1011472:	f150 0000 	adcs.w	r0, r0, #0
 1011476:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 101147a:	bd70      	pop	{r4, r5, r6, pc}
 101147c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 1011480:	ea46 0101 	orr.w	r1, r6, r1
 1011484:	ea40 0002 	orr.w	r0, r0, r2
 1011488:	ea81 0103 	eor.w	r1, r1, r3
 101148c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 1011490:	bfc2      	ittt	gt
 1011492:	ebd4 050c 	rsbsgt	r5, r4, ip
 1011496:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 101149a:	bd70      	popgt	{r4, r5, r6, pc}
 101149c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 10114a0:	f04f 0e00 	mov.w	lr, #0
 10114a4:	3c01      	subs	r4, #1
 10114a6:	f300 80ab 	bgt.w	1011600 <__aeabi_dmul+0x238>
 10114aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 10114ae:	bfde      	ittt	le
 10114b0:	2000      	movle	r0, #0
 10114b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 10114b6:	bd70      	pople	{r4, r5, r6, pc}
 10114b8:	f1c4 0400 	rsb	r4, r4, #0
 10114bc:	3c20      	subs	r4, #32
 10114be:	da35      	bge.n	101152c <__aeabi_dmul+0x164>
 10114c0:	340c      	adds	r4, #12
 10114c2:	dc1b      	bgt.n	10114fc <__aeabi_dmul+0x134>
 10114c4:	f104 0414 	add.w	r4, r4, #20
 10114c8:	f1c4 0520 	rsb	r5, r4, #32
 10114cc:	fa00 f305 	lsl.w	r3, r0, r5
 10114d0:	fa20 f004 	lsr.w	r0, r0, r4
 10114d4:	fa01 f205 	lsl.w	r2, r1, r5
 10114d8:	ea40 0002 	orr.w	r0, r0, r2
 10114dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 10114e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 10114e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 10114e8:	fa21 f604 	lsr.w	r6, r1, r4
 10114ec:	eb42 0106 	adc.w	r1, r2, r6
 10114f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 10114f4:	bf08      	it	eq
 10114f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 10114fa:	bd70      	pop	{r4, r5, r6, pc}
 10114fc:	f1c4 040c 	rsb	r4, r4, #12
 1011500:	f1c4 0520 	rsb	r5, r4, #32
 1011504:	fa00 f304 	lsl.w	r3, r0, r4
 1011508:	fa20 f005 	lsr.w	r0, r0, r5
 101150c:	fa01 f204 	lsl.w	r2, r1, r4
 1011510:	ea40 0002 	orr.w	r0, r0, r2
 1011514:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 1011518:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 101151c:	f141 0100 	adc.w	r1, r1, #0
 1011520:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 1011524:	bf08      	it	eq
 1011526:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 101152a:	bd70      	pop	{r4, r5, r6, pc}
 101152c:	f1c4 0520 	rsb	r5, r4, #32
 1011530:	fa00 f205 	lsl.w	r2, r0, r5
 1011534:	ea4e 0e02 	orr.w	lr, lr, r2
 1011538:	fa20 f304 	lsr.w	r3, r0, r4
 101153c:	fa01 f205 	lsl.w	r2, r1, r5
 1011540:	ea43 0302 	orr.w	r3, r3, r2
 1011544:	fa21 f004 	lsr.w	r0, r1, r4
 1011548:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 101154c:	fa21 f204 	lsr.w	r2, r1, r4
 1011550:	ea20 0002 	bic.w	r0, r0, r2
 1011554:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 1011558:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 101155c:	bf08      	it	eq
 101155e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 1011562:	bd70      	pop	{r4, r5, r6, pc}
 1011564:	f094 0f00 	teq	r4, #0
 1011568:	d10f      	bne.n	101158a <__aeabi_dmul+0x1c2>
 101156a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 101156e:	0040      	lsls	r0, r0, #1
 1011570:	eb41 0101 	adc.w	r1, r1, r1
 1011574:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 1011578:	bf08      	it	eq
 101157a:	3c01      	subeq	r4, #1
 101157c:	d0f7      	beq.n	101156e <__aeabi_dmul+0x1a6>
 101157e:	ea41 0106 	orr.w	r1, r1, r6
 1011582:	f095 0f00 	teq	r5, #0
 1011586:	bf18      	it	ne
 1011588:	4770      	bxne	lr
 101158a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 101158e:	0052      	lsls	r2, r2, #1
 1011590:	eb43 0303 	adc.w	r3, r3, r3
 1011594:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 1011598:	bf08      	it	eq
 101159a:	3d01      	subeq	r5, #1
 101159c:	d0f7      	beq.n	101158e <__aeabi_dmul+0x1c6>
 101159e:	ea43 0306 	orr.w	r3, r3, r6
 10115a2:	4770      	bx	lr
 10115a4:	ea94 0f0c 	teq	r4, ip
 10115a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 10115ac:	bf18      	it	ne
 10115ae:	ea95 0f0c 	teqne	r5, ip
 10115b2:	d00c      	beq.n	10115ce <__aeabi_dmul+0x206>
 10115b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 10115b8:	bf18      	it	ne
 10115ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 10115be:	d1d1      	bne.n	1011564 <__aeabi_dmul+0x19c>
 10115c0:	ea81 0103 	eor.w	r1, r1, r3
 10115c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 10115c8:	f04f 0000 	mov.w	r0, #0
 10115cc:	bd70      	pop	{r4, r5, r6, pc}
 10115ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 10115d2:	bf06      	itte	eq
 10115d4:	4610      	moveq	r0, r2
 10115d6:	4619      	moveq	r1, r3
 10115d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 10115dc:	d019      	beq.n	1011612 <__aeabi_dmul+0x24a>
 10115de:	ea94 0f0c 	teq	r4, ip
 10115e2:	d102      	bne.n	10115ea <__aeabi_dmul+0x222>
 10115e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 10115e8:	d113      	bne.n	1011612 <__aeabi_dmul+0x24a>
 10115ea:	ea95 0f0c 	teq	r5, ip
 10115ee:	d105      	bne.n	10115fc <__aeabi_dmul+0x234>
 10115f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 10115f4:	bf1c      	itt	ne
 10115f6:	4610      	movne	r0, r2
 10115f8:	4619      	movne	r1, r3
 10115fa:	d10a      	bne.n	1011612 <__aeabi_dmul+0x24a>
 10115fc:	ea81 0103 	eor.w	r1, r1, r3
 1011600:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 1011604:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 1011608:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 101160c:	f04f 0000 	mov.w	r0, #0
 1011610:	bd70      	pop	{r4, r5, r6, pc}
 1011612:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 1011616:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 101161a:	bd70      	pop	{r4, r5, r6, pc}

0101161c <__aeabi_ddiv>:
 101161c:	b570      	push	{r4, r5, r6, lr}
 101161e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 1011622:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 1011626:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 101162a:	bf1d      	ittte	ne
 101162c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 1011630:	ea94 0f0c 	teqne	r4, ip
 1011634:	ea95 0f0c 	teqne	r5, ip
 1011638:	f000 f8a7 	bleq	101178a <__aeabi_ddiv+0x16e>
 101163c:	eba4 0405 	sub.w	r4, r4, r5
 1011640:	ea81 0e03 	eor.w	lr, r1, r3
 1011644:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 1011648:	ea4f 3101 	mov.w	r1, r1, lsl #12
 101164c:	f000 8088 	beq.w	1011760 <__aeabi_ddiv+0x144>
 1011650:	ea4f 3303 	mov.w	r3, r3, lsl #12
 1011654:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 1011658:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 101165c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 1011660:	ea4f 2202 	mov.w	r2, r2, lsl #8
 1011664:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 1011668:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 101166c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 1011670:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 1011674:	429d      	cmp	r5, r3
 1011676:	bf08      	it	eq
 1011678:	4296      	cmpeq	r6, r2
 101167a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 101167e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 1011682:	d202      	bcs.n	101168a <__aeabi_ddiv+0x6e>
 1011684:	085b      	lsrs	r3, r3, #1
 1011686:	ea4f 0232 	mov.w	r2, r2, rrx
 101168a:	1ab6      	subs	r6, r6, r2
 101168c:	eb65 0503 	sbc.w	r5, r5, r3
 1011690:	085b      	lsrs	r3, r3, #1
 1011692:	ea4f 0232 	mov.w	r2, r2, rrx
 1011696:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 101169a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 101169e:	ebb6 0e02 	subs.w	lr, r6, r2
 10116a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 10116a6:	bf22      	ittt	cs
 10116a8:	1ab6      	subcs	r6, r6, r2
 10116aa:	4675      	movcs	r5, lr
 10116ac:	ea40 000c 	orrcs.w	r0, r0, ip
 10116b0:	085b      	lsrs	r3, r3, #1
 10116b2:	ea4f 0232 	mov.w	r2, r2, rrx
 10116b6:	ebb6 0e02 	subs.w	lr, r6, r2
 10116ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 10116be:	bf22      	ittt	cs
 10116c0:	1ab6      	subcs	r6, r6, r2
 10116c2:	4675      	movcs	r5, lr
 10116c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 10116c8:	085b      	lsrs	r3, r3, #1
 10116ca:	ea4f 0232 	mov.w	r2, r2, rrx
 10116ce:	ebb6 0e02 	subs.w	lr, r6, r2
 10116d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 10116d6:	bf22      	ittt	cs
 10116d8:	1ab6      	subcs	r6, r6, r2
 10116da:	4675      	movcs	r5, lr
 10116dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 10116e0:	085b      	lsrs	r3, r3, #1
 10116e2:	ea4f 0232 	mov.w	r2, r2, rrx
 10116e6:	ebb6 0e02 	subs.w	lr, r6, r2
 10116ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 10116ee:	bf22      	ittt	cs
 10116f0:	1ab6      	subcs	r6, r6, r2
 10116f2:	4675      	movcs	r5, lr
 10116f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 10116f8:	ea55 0e06 	orrs.w	lr, r5, r6
 10116fc:	d018      	beq.n	1011730 <__aeabi_ddiv+0x114>
 10116fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 1011702:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 1011706:	ea4f 1606 	mov.w	r6, r6, lsl #4
 101170a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 101170e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 1011712:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 1011716:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 101171a:	d1c0      	bne.n	101169e <__aeabi_ddiv+0x82>
 101171c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 1011720:	d10b      	bne.n	101173a <__aeabi_ddiv+0x11e>
 1011722:	ea41 0100 	orr.w	r1, r1, r0
 1011726:	f04f 0000 	mov.w	r0, #0
 101172a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 101172e:	e7b6      	b.n	101169e <__aeabi_ddiv+0x82>
 1011730:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 1011734:	bf04      	itt	eq
 1011736:	4301      	orreq	r1, r0
 1011738:	2000      	moveq	r0, #0
 101173a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 101173e:	bf88      	it	hi
 1011740:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 1011744:	f63f aeaf 	bhi.w	10114a6 <__aeabi_dmul+0xde>
 1011748:	ebb5 0c03 	subs.w	ip, r5, r3
 101174c:	bf04      	itt	eq
 101174e:	ebb6 0c02 	subseq.w	ip, r6, r2
 1011752:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 1011756:	f150 0000 	adcs.w	r0, r0, #0
 101175a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 101175e:	bd70      	pop	{r4, r5, r6, pc}
 1011760:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 1011764:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 1011768:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 101176c:	bfc2      	ittt	gt
 101176e:	ebd4 050c 	rsbsgt	r5, r4, ip
 1011772:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 1011776:	bd70      	popgt	{r4, r5, r6, pc}
 1011778:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 101177c:	f04f 0e00 	mov.w	lr, #0
 1011780:	3c01      	subs	r4, #1
 1011782:	e690      	b.n	10114a6 <__aeabi_dmul+0xde>
 1011784:	ea45 0e06 	orr.w	lr, r5, r6
 1011788:	e68d      	b.n	10114a6 <__aeabi_dmul+0xde>
 101178a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 101178e:	ea94 0f0c 	teq	r4, ip
 1011792:	bf08      	it	eq
 1011794:	ea95 0f0c 	teqeq	r5, ip
 1011798:	f43f af3b 	beq.w	1011612 <__aeabi_dmul+0x24a>
 101179c:	ea94 0f0c 	teq	r4, ip
 10117a0:	d10a      	bne.n	10117b8 <__aeabi_ddiv+0x19c>
 10117a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 10117a6:	f47f af34 	bne.w	1011612 <__aeabi_dmul+0x24a>
 10117aa:	ea95 0f0c 	teq	r5, ip
 10117ae:	f47f af25 	bne.w	10115fc <__aeabi_dmul+0x234>
 10117b2:	4610      	mov	r0, r2
 10117b4:	4619      	mov	r1, r3
 10117b6:	e72c      	b.n	1011612 <__aeabi_dmul+0x24a>
 10117b8:	ea95 0f0c 	teq	r5, ip
 10117bc:	d106      	bne.n	10117cc <__aeabi_ddiv+0x1b0>
 10117be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 10117c2:	f43f aefd 	beq.w	10115c0 <__aeabi_dmul+0x1f8>
 10117c6:	4610      	mov	r0, r2
 10117c8:	4619      	mov	r1, r3
 10117ca:	e722      	b.n	1011612 <__aeabi_dmul+0x24a>
 10117cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 10117d0:	bf18      	it	ne
 10117d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 10117d6:	f47f aec5 	bne.w	1011564 <__aeabi_dmul+0x19c>
 10117da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 10117de:	f47f af0d 	bne.w	10115fc <__aeabi_dmul+0x234>
 10117e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 10117e6:	f47f aeeb 	bne.w	10115c0 <__aeabi_dmul+0x1f8>
 10117ea:	e712      	b.n	1011612 <__aeabi_dmul+0x24a>

010117ec <__gedf2>:
 10117ec:	f04f 3cff 	mov.w	ip, #4294967295
 10117f0:	e006      	b.n	1011800 <__cmpdf2+0x4>
 10117f2:	bf00      	nop

010117f4 <__ledf2>:
 10117f4:	f04f 0c01 	mov.w	ip, #1
 10117f8:	e002      	b.n	1011800 <__cmpdf2+0x4>
 10117fa:	bf00      	nop

010117fc <__cmpdf2>:
 10117fc:	f04f 0c01 	mov.w	ip, #1
 1011800:	f84d cd04 	str.w	ip, [sp, #-4]!
 1011804:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 1011808:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 101180c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 1011810:	bf18      	it	ne
 1011812:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 1011816:	d01b      	beq.n	1011850 <__cmpdf2+0x54>
 1011818:	b001      	add	sp, #4
 101181a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 101181e:	bf0c      	ite	eq
 1011820:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 1011824:	ea91 0f03 	teqne	r1, r3
 1011828:	bf02      	ittt	eq
 101182a:	ea90 0f02 	teqeq	r0, r2
 101182e:	2000      	moveq	r0, #0
 1011830:	4770      	bxeq	lr
 1011832:	f110 0f00 	cmn.w	r0, #0
 1011836:	ea91 0f03 	teq	r1, r3
 101183a:	bf58      	it	pl
 101183c:	4299      	cmppl	r1, r3
 101183e:	bf08      	it	eq
 1011840:	4290      	cmpeq	r0, r2
 1011842:	bf2c      	ite	cs
 1011844:	17d8      	asrcs	r0, r3, #31
 1011846:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 101184a:	f040 0001 	orr.w	r0, r0, #1
 101184e:	4770      	bx	lr
 1011850:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 1011854:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 1011858:	d102      	bne.n	1011860 <__cmpdf2+0x64>
 101185a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 101185e:	d107      	bne.n	1011870 <__cmpdf2+0x74>
 1011860:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 1011864:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 1011868:	d1d6      	bne.n	1011818 <__cmpdf2+0x1c>
 101186a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 101186e:	d0d3      	beq.n	1011818 <__cmpdf2+0x1c>
 1011870:	f85d 0b04 	ldr.w	r0, [sp], #4
 1011874:	4770      	bx	lr
 1011876:	bf00      	nop

01011878 <__aeabi_cdrcmple>:
 1011878:	4684      	mov	ip, r0
 101187a:	4610      	mov	r0, r2
 101187c:	4662      	mov	r2, ip
 101187e:	468c      	mov	ip, r1
 1011880:	4619      	mov	r1, r3
 1011882:	4663      	mov	r3, ip
 1011884:	e000      	b.n	1011888 <__aeabi_cdcmpeq>
 1011886:	bf00      	nop

01011888 <__aeabi_cdcmpeq>:
 1011888:	b501      	push	{r0, lr}
 101188a:	f7ff ffb7 	bl	10117fc <__cmpdf2>
 101188e:	2800      	cmp	r0, #0
 1011890:	bf48      	it	mi
 1011892:	f110 0f00 	cmnmi.w	r0, #0
 1011896:	bd01      	pop	{r0, pc}

01011898 <__aeabi_dcmpeq>:
 1011898:	f84d ed08 	str.w	lr, [sp, #-8]!
 101189c:	f7ff fff4 	bl	1011888 <__aeabi_cdcmpeq>
 10118a0:	bf0c      	ite	eq
 10118a2:	2001      	moveq	r0, #1
 10118a4:	2000      	movne	r0, #0
 10118a6:	f85d fb08 	ldr.w	pc, [sp], #8
 10118aa:	bf00      	nop

010118ac <__aeabi_dcmplt>:
 10118ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 10118b0:	f7ff ffea 	bl	1011888 <__aeabi_cdcmpeq>
 10118b4:	bf34      	ite	cc
 10118b6:	2001      	movcc	r0, #1
 10118b8:	2000      	movcs	r0, #0
 10118ba:	f85d fb08 	ldr.w	pc, [sp], #8
 10118be:	bf00      	nop

010118c0 <__aeabi_dcmple>:
 10118c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 10118c4:	f7ff ffe0 	bl	1011888 <__aeabi_cdcmpeq>
 10118c8:	bf94      	ite	ls
 10118ca:	2001      	movls	r0, #1
 10118cc:	2000      	movhi	r0, #0
 10118ce:	f85d fb08 	ldr.w	pc, [sp], #8
 10118d2:	bf00      	nop

010118d4 <__aeabi_dcmpge>:
 10118d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 10118d8:	f7ff ffce 	bl	1011878 <__aeabi_cdrcmple>
 10118dc:	bf94      	ite	ls
 10118de:	2001      	movls	r0, #1
 10118e0:	2000      	movhi	r0, #0
 10118e2:	f85d fb08 	ldr.w	pc, [sp], #8
 10118e6:	bf00      	nop

010118e8 <__aeabi_dcmpgt>:
 10118e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 10118ec:	f7ff ffc4 	bl	1011878 <__aeabi_cdrcmple>
 10118f0:	bf34      	ite	cc
 10118f2:	2001      	movcc	r0, #1
 10118f4:	2000      	movcs	r0, #0
 10118f6:	f85d fb08 	ldr.w	pc, [sp], #8
 10118fa:	bf00      	nop

010118fc <__aeabi_dcmpun>:
 10118fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 1011900:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 1011904:	d102      	bne.n	101190c <__aeabi_dcmpun+0x10>
 1011906:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 101190a:	d10a      	bne.n	1011922 <__aeabi_dcmpun+0x26>
 101190c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 1011910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 1011914:	d102      	bne.n	101191c <__aeabi_dcmpun+0x20>
 1011916:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 101191a:	d102      	bne.n	1011922 <__aeabi_dcmpun+0x26>
 101191c:	f04f 0000 	mov.w	r0, #0
 1011920:	4770      	bx	lr
 1011922:	f04f 0001 	mov.w	r0, #1
 1011926:	4770      	bx	lr

01011928 <__aeabi_d2iz>:
 1011928:	ea4f 0241 	mov.w	r2, r1, lsl #1
 101192c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 1011930:	d215      	bcs.n	101195e <__aeabi_d2iz+0x36>
 1011932:	d511      	bpl.n	1011958 <__aeabi_d2iz+0x30>
 1011934:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 1011938:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 101193c:	d912      	bls.n	1011964 <__aeabi_d2iz+0x3c>
 101193e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 1011942:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 1011946:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 101194a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 101194e:	fa23 f002 	lsr.w	r0, r3, r2
 1011952:	bf18      	it	ne
 1011954:	4240      	negne	r0, r0
 1011956:	4770      	bx	lr
 1011958:	f04f 0000 	mov.w	r0, #0
 101195c:	4770      	bx	lr
 101195e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 1011962:	d105      	bne.n	1011970 <__aeabi_d2iz+0x48>
 1011964:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 1011968:	bf08      	it	eq
 101196a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 101196e:	4770      	bx	lr
 1011970:	f04f 0000 	mov.w	r0, #0
 1011974:	4770      	bx	lr
 1011976:	bf00      	nop

01011978 <param_id>:
 1011978:	0100 0000 0ff0 2000 010a 0000 010a 0000     ....... ........
 1011988:	0ffa 2000 0102 0000 010c 0000 0ffc 2000     ... ........... 
 1011998:	0104 0000 0110 0000 1000 2000 0102 0000     ........... ....
	...
 10119b4:	4153 474d 3535 2020 2020 0000               SAMG55    ..

010119c0 <pcus_event_mem_ids>:
 10119c0:	0008 0007 0003 0000 0009 0000 3231 2e2e     ............12..
 10119d0:	452e 0046 4449 454c 0000 0000 6d54 2072     .EF.IDLE....Tmr 
 10119e0:	7653 0063 0000 0000 0000 0000 0000 0000     Svc.............
	...

01011a00 <atpl_bin_start>:
 1011a00:	20018000 	.word	0x20018000
 1011a04:	0000f705 	.word	0x0000f705
 1011a08:	0000f709 	.word	0x0000f709
 1011a0c:	0000f709 	.word	0x0000f709
 1011a10:	0000f709 	.word	0x0000f709
 1011a14:	0000f709 	.word	0x0000f709
 1011a18:	0000f709 	.word	0x0000f709
	...
 1011a2c:	0000f709 	.word	0x0000f709
 1011a30:	0000f709 	.word	0x0000f709
 1011a34:	00000000 	.word	0x00000000
 1011a38:	0000f709 	.word	0x0000f709
 1011a3c:	0000f709 	.word	0x0000f709
 1011a40:	0000f709 	.word	0x0000f709
 1011a44:	00000000 	.word	0x00000000
 1011a48:	0000f709 	.word	0x0000f709
 1011a4c:	00000000 	.word	0x00000000
 1011a50:	0000f709 	.word	0x0000f709
 1011a54:	0000f709 	.word	0x0000f709
 1011a58:	0000f709 	.word	0x0000f709
 1011a5c:	0000f709 	.word	0x0000f709
 1011a60:	0000a659 	.word	0x0000a659
 1011a64:	0000f709 	.word	0x0000f709
 1011a68:	0000f709 	.word	0x0000f709
 1011a6c:	0000f709 	.word	0x0000f709
 1011a70:	00007305 	.word	0x00007305
 1011a74:	0000d6b1 	.word	0x0000d6b1
 1011a78:	00007345 	.word	0x00007345
 1011a7c:	00007ddd 	.word	0x00007ddd
 1011a80:	00000000 	.word	0x00000000
 1011a84:	0000f61d 	.word	0x0000f61d
 1011a88:	0000f709 	.word	0x0000f709
	...
 1011a94:	0000f709 	.word	0x0000f709
 1011a98:	0000f709 	.word	0x0000f709
 1011a9c:	0000f709 	.word	0x0000f709
 1011aa0:	f8dfb5f0 	.word	0xf8dfb5f0
 1011aa4:	b0815a50 	.word	0xb0815a50
 1011aa8:	f8d54604 	.word	0xf8d54604
 1011aac:	79a1749c 	.word	0x79a1749c
 1011ab0:	022cf894 	.word	0x022cf894
 1011ab4:	ea410889 	.word	0xea410889
 1011ab8:	70381000 	.word	0x70381000
 1011abc:	f911f002 	.word	0xf911f002
 1011ac0:	2e014606 	.word	0x2e014606
 1011ac4:	88a179a0 	.word	0x88a179a0
 1011ac8:	ea41d104 	.word	0xea41d104
 1011acc:	70781080 	.word	0x70781080
 1011ad0:	e0071cbf 	.word	0xe0071cbf
 1011ad4:	ea4108c9 	.word	0xea4108c9
 1011ad8:	70781080 	.word	0x70781080
 1011adc:	014088a0 	.word	0x014088a0
 1011ae0:	1cff70b8 	.word	0x1cff70b8
 1011ae4:	f909f002 	.word	0xf909f002
 1011ae8:	28012200 	.word	0x28012200
 1011aec:	f895db36 	.word	0xf895db36
 1011af0:	f44f1483 	.word	0xf44f1483
 1011af4:	fb13730d 	.word	0xfb13730d
 1011af8:	07c3f101 	.word	0x07c3f101
 1011afc:	d50e4429 	.word	0xd50e4429
 1011b00:	3483f895 	.word	0x3483f895
 1011b04:	7c0df44f 	.word	0x7c0df44f
 1011b08:	fb1c79e2 	.word	0xfb1c79e2
 1011b0c:	442bf303 	.word	0x442bf303
 1011b10:	099b7a1b 	.word	0x099b7a1b
 1011b14:	0282ea43 	.word	0x0282ea43
 1011b18:	2b01f807 	.word	0x2b01f807
 1011b1c:	08402201 	.word	0x08402201
 1011b20:	801cf000 	.word	0x801cf000
 1011b24:	0c02eb01 	.word	0x0c02eb01
 1011b28:	f89c18a3 	.word	0xf89c18a3
 1011b2c:	79dbc008 	.word	0x79dbc008
 1011b30:	ea4f1c52 	.word	0xea4f1c52
 1011b34:	ea4c1c9c 	.word	0xea4c1c9c
 1011b38:	eb010383 	.word	0xeb010383
 1011b3c:	f8070c02 	.word	0xf8070c02
 1011b40:	18a33b01 	.word	0x18a33b01
 1011b44:	c008f89c 	.word	0xc008f89c
 1011b48:	79db1c52 	.word	0x79db1c52
 1011b4c:	ea4f1e40 	.word	0xea4f1e40
 1011b50:	ea4c1c9c 	.word	0xea4c1c9c
 1011b54:	f8070383 	.word	0xf8070383
 1011b58:	d1e33b01 	.word	0xd1e33b01
 1011b5c:	0c01f817 	.word	0x0c01f817
 1011b60:	00fcf000 	.word	0x00fcf000
 1011b64:	0c01f807 	.word	0x0c01f807
 1011b68:	f8bef002 	.word	0xf8bef002
 1011b6c:	bf0c2e01 	.word	0xbf0c2e01
 1011b70:	0110f100 	.word	0x0110f100
 1011b74:	0118f100 	.word	0x0118f100
 1011b78:	049cf8d5 	.word	0x049cf8d5
 1011b7c:	f002b289 	.word	0xf002b289
 1011b80:	f817f919 	.word	0xf817f919
 1011b84:	ea411c01 	.word	0xea411c01
 1011b88:	00801190 	.word	0x00801190
 1011b8c:	1c01f807 	.word	0x1c01f807
 1011b90:	20007038 	.word	0x20007038
 1011b94:	b0017078 	.word	0xb0017078
 1011b98:	b570bdf0 	.word	0xb570bdf0
 1011b9c:	f8df4604 	.word	0xf8df4604
 1011ba0:	79a10954 	.word	0x79a10954
 1011ba4:	549cf8d0 	.word	0x549cf8d0
 1011ba8:	022cf894 	.word	0x022cf894
 1011bac:	ea410909 	.word	0xea410909
 1011bb0:	70281000 	.word	0x70281000
 1011bb4:	79a088a1 	.word	0x79a088a1
 1011bb8:	ea410949 	.word	0xea410949
 1011bbc:	21031000 	.word	0x21031000
 1011bc0:	88a07068 	.word	0x88a07068
 1011bc4:	70a800c0 	.word	0x70a800c0
 1011bc8:	f0024628 	.word	0xf0024628
 1011bcc:	4606f90d 	.word	0x4606f90d
 1011bd0:	70e80930 	.word	0x70e80930
 1011bd4:	f89df002 	.word	0xf89df002
 1011bd8:	b9100131 	.word	0xb9100131
 1011bdc:	71687129 	.word	0x71687129
 1011be0:	79e2bd70 	.word	0x79e2bd70
 1011be4:	ea412301 	.word	0xea412301
 1011be8:	71291112 	.word	0x71291112
 1011bec:	28021d69 	.word	0x28021d69
 1011bf0:	1e42db20 	.word	0x1e42db20
 1011bf4:	d50707d5 	.word	0xd50707d5
 1011bf8:	79e37a25 	.word	0x79e37a25
 1011bfc:	ea45092d 	.word	0xea45092d
 1011c00:	f8011303 	.word	0xf8011303
 1011c04:	23023b01 	.word	0x23023b01
 1011c08:	d0130852 	.word	0xd0130852
 1011c0c:	1c5b18e5 	.word	0x1c5b18e5
 1011c10:	79ed79ae 	.word	0x79ed79ae
 1011c14:	ea45092d 	.word	0xea45092d
 1011c18:	f8011506 	.word	0xf8011506
 1011c1c:	18e55b01 	.word	0x18e55b01
 1011c20:	79ed79ae 	.word	0x79ed79ae
 1011c24:	092d1c5b 	.word	0x092d1c5b
 1011c28:	ea451e52 	.word	0xea451e52
 1011c2c:	f8011506 	.word	0xf8011506
 1011c30:	d1eb5b01 	.word	0xd1eb5b01
 1011c34:	79804420 	.word	0x79804420
 1011c38:	f8010100 	.word	0xf8010100
 1011c3c:	20000b01 	.word	0x20000b01
 1011c40:	0b01f801 	.word	0x0b01f801
 1011c44:	1c40bd70 	.word	0x1c40bd70
 1011c48:	1e401040 	.word	0x1e401040
 1011c4c:	b530b282 	.word	0xb530b282
 1011c50:	58a0f8df 	.word	0x58a0f8df
 1011c54:	f8d5b081 	.word	0xf8d5b081
 1011c58:	f8d544ac 	.word	0xf8d544ac
 1011c5c:	462014b0 	.word	0x462014b0
 1011c60:	f8e2f002 	.word	0xf8e2f002
 1011c64:	04a4f8d5 	.word	0x04a4f8d5
 1011c68:	6100f44f 	.word	0x6100f44f
 1011c6c:	46281845 	.word	0x46281845
 1011c70:	f8ecf002 	.word	0xf8ecf002
 1011c74:	60e8f44f 	.word	0x60e8f44f
 1011c78:	462122c0 	.word	0x462122c0
 1011c7c:	f0024428 	.word	0xf0024428
 1011c80:	f104f8e9 	.word	0xf104f8e9
 1011c84:	462801c0 	.word	0x462801c0
 1011c88:	22c4b001 	.word	0x22c4b001
 1011c8c:	4030e8bd 	.word	0x4030e8bd
 1011c90:	b8e0f002 	.word	0xb8e0f002
 1011c94:	b081b530 	.word	0xb081b530
 1011c98:	79a04604 	.word	0x79a04604
 1011c9c:	5854f8df 	.word	0x5854f8df
 1011ca0:	0480f885 	.word	0x0480f885
 1011ca4:	f817f002 	.word	0xf817f002
 1011ca8:	122cf894 	.word	0x122cf894
 1011cac:	f0011c49 	.word	0xf0011c49
 1011cb0:	fb110103 	.word	0xfb110103
 1011cb4:	f894f000 	.word	0xf894f000
 1011cb8:	2900122f 	.word	0x2900122f
 1011cbc:	bf14b280 	.word	0xbf14b280
 1011cc0:	08c00900 	.word	0x08c00900
 1011cc4:	0488f8a5 	.word	0x0488f8a5
 1011cc8:	f802f002 	.word	0xf802f002
 1011ccc:	122bf894 	.word	0x122bf894
 1011cd0:	0040b901 	.word	0x0040b901
 1011cd4:	f002b280 	.word	0xf002b280
 1011cd8:	2000f921 	.word	0x2000f921
 1011cdc:	f885b001 	.word	0xf885b001
 1011ce0:	bd300482 	.word	0xbd300482
 1011ce4:	41f0e92d 	.word	0x41f0e92d
 1011ce8:	4604b084 	.word	0x4604b084
 1011cec:	5804f8df 	.word	0x5804f8df
 1011cf0:	f89579a0 	.word	0xf89579a0
 1011cf4:	1a401480 	.word	0x1a401480
 1011cf8:	1230f894 	.word	0x1230f894
 1011cfc:	0600b109 	.word	0x0600b109
 1011d00:	f8b50e80 	.word	0xf8b50e80
 1011d04:	b2c06488 	.word	0xb2c06488
 1011d08:	122af894 	.word	0x122af894
 1011d0c:	74a0f8d5 	.word	0x74a0f8d5
 1011d10:	b2804370 	.word	0xb2804370
 1011d14:	18404632 	.word	0x18404632
 1011d18:	122ff894 	.word	0x122ff894
 1011d1c:	b1714420 	.word	0xb1714420
 1011d20:	849cf8d5 	.word	0x849cf8d5
 1011d24:	46401dc1 	.word	0x46401dc1
 1011d28:	f894f002 	.word	0xf894f002
 1011d2c:	46394632 	.word	0x46394632
 1011d30:	f0024640 	.word	0xf0024640
 1011d34:	f8b5f931 	.word	0xf8b5f931
 1011d38:	01020488 	.word	0x01020488
 1011d3c:	1dc1e004 	.word	0x1dc1e004
 1011d40:	f0024638 	.word	0xf0024638
 1011d44:	00f2f887 	.word	0x00f2f887
 1011d48:	1498f8d5 	.word	0x1498f8d5
 1011d4c:	04a0f8d5 	.word	0x04a0f8d5
 1011d50:	b2922301 	.word	0xb2922301
 1011d54:	f8baf002 	.word	0xf8baf002
 1011d58:	222ff894 	.word	0x222ff894
 1011d5c:	04a8f8d5 	.word	0x04a8f8d5
 1011d60:	1498f8d5 	.word	0x1498f8d5
 1011d64:	f894b162 	.word	0xf894b162
 1011d68:	9001222c 	.word	0x9001222c
 1011d6c:	46689100 	.word	0x46689100
 1011d70:	2009f88d 	.word	0x2009f88d
 1011d74:	f88d2201 	.word	0xf88d2201
 1011d78:	f002200a 	.word	0xf002200a
 1011d7c:	e003f925 	.word	0xe003f925
 1011d80:	2488f8b5 	.word	0x2488f8b5
 1011d84:	f866f002 	.word	0xf866f002
 1011d88:	04a8f8d5 	.word	0x04a8f8d5
 1011d8c:	f973f002 	.word	0xf973f002
 1011d90:	0230f894 	.word	0x0230f894
 1011d94:	2004b100 	.word	0x2004b100
 1011d98:	0482f885 	.word	0x0482f885
 1011d9c:	e8bdb004 	.word	0xe8bdb004
 1011da0:	b5f081f0 	.word	0xb5f081f0
 1011da4:	f8df4605 	.word	0xf8df4605
 1011da8:	f896674c 	.word	0xf896674c
 1011dac:	b0890482 	.word	0xb0890482
 1011db0:	4628b910 	.word	0x4628b910
 1011db4:	ff96f7ff 	.word	0xff96f7ff
 1011db8:	ff93f001 	.word	0xff93f001
 1011dbc:	222cf895 	.word	0x222cf895
 1011dc0:	f8d64601 	.word	0xf8d64601
 1011dc4:	f00204ac 	.word	0xf00204ac
 1011dc8:	f001f942 	.word	0xf001f942
 1011dcc:	4604ff7e 	.word	0x4604ff7e
 1011dd0:	04acf8d6 	.word	0x04acf8d6
 1011dd4:	20009000 	.word	0x20009000
 1011dd8:	0006f88d 	.word	0x0006f88d
 1011ddc:	f8ad4668 	.word	0xf8ad4668
 1011de0:	f0024004 	.word	0xf0024004
 1011de4:	4620f955 	.word	0x4620f955
 1011de8:	f7ff2400 	.word	0xf7ff2400
 1011dec:	f895ff2c 	.word	0xf895ff2c
 1011df0:	b1200232 	.word	0xb1200232
 1011df4:	0480f896 	.word	0x0480f896
 1011df8:	bf082801 	.word	0xbf082801
 1011dfc:	f8d62401 	.word	0xf8d62401
 1011e00:	f00204a4 	.word	0xf00204a4
 1011e04:	4607f9eb 	.word	0x4607f9eb
 1011e08:	f0022005 	.word	0xf0022005
 1011e0c:	4605fa15 	.word	0x4605fa15
 1011e10:	7200f44f 	.word	0x7200f44f
 1011e14:	46384629 	.word	0x46384629
 1011e18:	fa58f002 	.word	0xfa58f002
 1011e1c:	7200f44f 	.word	0x7200f44f
 1011e20:	46284629 	.word	0x46284629
 1011e24:	fb0ff002 	.word	0xfb0ff002
 1011e28:	0481f896 	.word	0x0481f896
 1011e2c:	620cf44f 	.word	0x620cf44f
 1011e30:	1494f8d6 	.word	0x1494f8d6
 1011e34:	95059702 	.word	0x95059702
 1011e38:	f300fb12 	.word	0xf300fb12
 1011e3c:	9303440b 	.word	0x9303440b
 1011e40:	d0030003 	.word	0xd0030003
 1011e44:	b2c01e40 	.word	0xb2c01e40
 1011e48:	f200fb12 	.word	0xf200fb12
 1011e4c:	f6001888 	.word	0xf6001888
 1011e50:	2c0000bc 	.word	0x2c0000bc
 1011e54:	bf199004 	.word	0xbf199004
 1011e58:	21002000 	.word	0x21002000
 1011e5c:	21082038 	.word	0x21082038
 1011e60:	0020f88d 	.word	0x0020f88d
 1011e64:	f88d2018 	.word	0xf88d2018
 1011e68:	f0021021 	.word	0xf0021021
 1011e6c:	f8dffb21 	.word	0xf8dffb21
 1011e70:	68040688 	.word	0x68040688
 1011e74:	f0022018 	.word	0xf0022018
 1011e78:	2100fb3d 	.word	0x2100fb3d
 1011e7c:	002af241 	.word	0x002af241
 1011e80:	2c00b224 	.word	0x2c00b224
 1011e84:	4622d403 	.word	0x4622d403
 1011e88:	fb70f002 	.word	0xfb70f002
 1011e8c:	4262e002 	.word	0x4262e002
 1011e90:	fb7cf002 	.word	0xfb7cf002
 1011e94:	460d4604 	.word	0x460d4604
 1011e98:	0483f896 	.word	0x0483f896
 1011e9c:	710df44f 	.word	0x710df44f
 1011ea0:	f000fb11 	.word	0xf000fb11
 1011ea4:	f0021837 	.word	0xf0021837
 1011ea8:	f897fdc3 	.word	0xf897fdc3
 1011eac:	f8df222e 	.word	0xf8df222e
 1011eb0:	f831164c 	.word	0xf831164c
 1011eb4:	43481012 	.word	0x43481012
 1011eb8:	2304fba0 	.word	0x2304fba0
 1011ebc:	3305fb00 	.word	0x3305fb00
 1011ec0:	f44f17c1 	.word	0xf44f17c1
 1011ec4:	f8ad7000 	.word	0xf8ad7000
 1011ec8:	0e12001e 	.word	0x0e12001e
 1011ecc:	3304fb01 	.word	0x3304fb01
 1011ed0:	70fff643 	.word	0x70fff643
 1011ed4:	2203ea42 	.word	0x2203ea42
 1011ed8:	001cf8ad 	.word	0x001cf8ad
 1011edc:	a8029206 	.word	0xa8029206
 1011ee0:	fe66f002 	.word	0xfe66f002
 1011ee4:	0481f896 	.word	0x0481f896
 1011ee8:	b2c01c40 	.word	0xb2c01c40
 1011eec:	bf082802 	.word	0xbf082802
 1011ef0:	f8862000 	.word	0xf8862000
 1011ef4:	f8960481 	.word	0xf8960481
 1011ef8:	1e400480 	.word	0x1e400480
 1011efc:	0480f886 	.word	0x0480f886
 1011f00:	0482f896 	.word	0x0482f896
 1011f04:	bf1c0001 	.word	0xbf1c0001
 1011f08:	f8861e40 	.word	0xf8861e40
 1011f0c:	b0090482 	.word	0xb0090482
 1011f10:	0000bdf0 	.word	0x0000bdf0
 1011f14:	43f0e92d 	.word	0x43f0e92d
 1011f18:	95d8f8df 	.word	0x95d8f8df
 1011f1c:	780df44f 	.word	0x780df44f
 1011f20:	0483f899 	.word	0x0483f899
 1011f24:	fb18b089 	.word	0xfb18b089
 1011f28:	eb09f000 	.word	0xeb09f000
 1011f2c:	f8970700 	.word	0xf8970700
 1011f30:	1e80022d 	.word	0x1e80022d
 1011f34:	f2002805 	.word	0xf2002805
 1011f38:	e8df81f6 	.word	0xe8df81f6
 1011f3c:	00d3f010 	.word	0x00d3f010
 1011f40:	01410113 	.word	0x01410113
 1011f44:	00b90006 	.word	0x00b90006
 1011f48:	f00101ea 	.word	0xf00101ea
 1011f4c:	4601feca 	.word	0x4601feca
 1011f50:	04acf8d9 	.word	0x04acf8d9
 1011f54:	f878f002 	.word	0xf878f002
 1011f58:	feb7f001 	.word	0xfeb7f001
 1011f5c:	f8d94604 	.word	0xf8d94604
 1011f60:	900704ac 	.word	0x900704ac
 1011f64:	f88d2000 	.word	0xf88d2000
 1011f68:	a8070022 	.word	0xa8070022
 1011f6c:	4020f8ad 	.word	0x4020f8ad
 1011f70:	f88ef002 	.word	0xf88ef002
 1011f74:	24004620 	.word	0x24004620
 1011f78:	fe65f7ff 	.word	0xfe65f7ff
 1011f7c:	0483f899 	.word	0x0483f899
 1011f80:	f000fb18 	.word	0xf000fb18
 1011f84:	f8904448 	.word	0xf8904448
 1011f88:	b1311232 	.word	0xb1311232
 1011f8c:	1480f899 	.word	0x1480f899
 1011f90:	bf022901 	.word	0xbf022901
 1011f94:	28007980 	.word	0x28007980
 1011f98:	f8d92401 	.word	0xf8d92401
 1011f9c:	f00204a4 	.word	0xf00204a4
 1011fa0:	4606f91d 	.word	0x4606f91d
 1011fa4:	f0022005 	.word	0xf0022005
 1011fa8:	4605f947 	.word	0x4605f947
 1011fac:	7200f44f 	.word	0x7200f44f
 1011fb0:	46304629 	.word	0x46304629
 1011fb4:	f98af002 	.word	0xf98af002
 1011fb8:	7200f44f 	.word	0x7200f44f
 1011fbc:	46284629 	.word	0x46284629
 1011fc0:	fa41f002 	.word	0xfa41f002
 1011fc4:	f8999600 	.word	0xf8999600
 1011fc8:	f44f1481 	.word	0xf44f1481
 1011fcc:	f8d9600c 	.word	0xf8d9600c
 1011fd0:	95032494 	.word	0x95032494
 1011fd4:	f301fb10 	.word	0xf301fb10
 1011fd8:	93014413 	.word	0x93014413
 1011fdc:	d003000b 	.word	0xd003000b
 1011fe0:	b2c91e49 	.word	0xb2c91e49
 1011fe4:	f001fb10 	.word	0xf001fb10
 1011fe8:	f6004410 	.word	0xf6004410
 1011fec:	2c0000bc 	.word	0x2c0000bc
 1011ff0:	bf199002 	.word	0xbf199002
 1011ff4:	21002000 	.word	0x21002000
 1011ff8:	21082038 	.word	0x21082038
 1011ffc:	0018f88d 	.word	0x0018f88d
 1012000:	f88d2018 	.word	0xf88d2018
 1012004:	f0021019 	.word	0xf0021019
 1012008:	f8dffa53 	.word	0xf8dffa53
 101200c:	680404ec 	.word	0x680404ec
 1012010:	f0022018 	.word	0xf0022018
 1012014:	2100fa6f 	.word	0x2100fa6f
 1012018:	002af241 	.word	0x002af241
 101201c:	2c00b224 	.word	0x2c00b224
 1012020:	4622d403 	.word	0x4622d403
 1012024:	faa2f002 	.word	0xfaa2f002
 1012028:	4262e002 	.word	0x4262e002
 101202c:	faaef002 	.word	0xfaaef002
 1012030:	f8994604 	.word	0xf8994604
 1012034:	460d0483 	.word	0x460d0483
 1012038:	f000fb18 	.word	0xf000fb18
 101203c:	0800eb09 	.word	0x0800eb09
 1012040:	fcf6f002 	.word	0xfcf6f002
 1012044:	222ef898 	.word	0x222ef898
 1012048:	5170f60f 	.word	0x5170f60f
 101204c:	1012f831 	.word	0x1012f831
 1012050:	fba04348 	.word	0xfba04348
 1012054:	fb002304 	.word	0xfb002304
 1012058:	17c13305 	.word	0x17c13305
 101205c:	7000f44f 	.word	0x7000f44f
 1012060:	0016f8ad 	.word	0x0016f8ad
 1012064:	fb010e12 	.word	0xfb010e12
 1012068:	f6433304 	.word	0xf6433304
 101206c:	ea4270ff 	.word	0xea4270ff
 1012070:	f8ad2203 	.word	0xf8ad2203
 1012074:	92040014 	.word	0x92040014
 1012078:	f0024668 	.word	0xf0024668
 101207c:	f899fd99 	.word	0xf899fd99
 1012080:	1c400481 	.word	0x1c400481
 1012084:	2802b2c0 	.word	0x2802b2c0
 1012088:	2000bf08 	.word	0x2000bf08
 101208c:	0481f889 	.word	0x0481f889
 1012090:	0480f899 	.word	0x0480f899
 1012094:	f8891e40 	.word	0xf8891e40
 1012098:	b2c00480 	.word	0xb2c00480
 101209c:	f0402800 	.word	0xf0402800
 10120a0:	79b88142 	.word	0x79b88142
 10120a4:	4638b160 	.word	0x4638b160
 10120a8:	fdf4f7ff 	.word	0xfdf4f7ff
 10120ac:	e1382006 	.word	0xe1382006
 10120b0:	f7ff4638 	.word	0xf7ff4638
 10120b4:	f899fe76 	.word	0xf899fe76
 10120b8:	28000480 	.word	0x28000480
 10120bc:	8133f040 	.word	0x8133f040
 10120c0:	0481f899 	.word	0x0481f899
 10120c4:	bf0c0001 	.word	0xbf0c0001
 10120c8:	1e402001 	.word	0x1e402001
 10120cc:	f003b2c0 	.word	0xf003b2c0
 10120d0:	2007f875 	.word	0x2007f875
 10120d4:	022df887 	.word	0x022df887
 10120d8:	f8892002 	.word	0xf8892002
 10120dc:	b0090480 	.word	0xb0090480
 10120e0:	83f0e8bd 	.word	0x83f0e8bd
 10120e4:	fcaaf002 	.word	0xfcaaf002
 10120e8:	21c0eb09 	.word	0x21c0eb09
 10120ec:	42b4f641 	.word	0x42b4f641
 10120f0:	2080eb09 	.word	0x2080eb09
 10120f4:	f44f4411 	.word	0xf44f4411
 10120f8:	9100620c 	.word	0x9100620c
 10120fc:	01b4f244 	.word	0x01b4f244
 1012100:	f8d94408 	.word	0xf8d94408
 1012104:	90031494 	.word	0x90031494
 1012108:	f88d2000 	.word	0xf88d2000
 101210c:	f8990019 	.word	0xf8990019
 1012110:	fb120481 	.word	0xfb120481
 1012114:	1c40f200 	.word	0x1c40f200
 1012118:	2802b2c0 	.word	0x2802b2c0
 101211c:	91014411 	.word	0x91014411
 1012120:	2000bf08 	.word	0x2000bf08
 1012124:	0481f889 	.word	0x0481f889
 1012128:	fc82f002 	.word	0xfc82f002
 101212c:	222ef897 	.word	0x222ef897
 1012130:	4188f60f 	.word	0x4188f60f
 1012134:	1012f831 	.word	0x1012f831
 1012138:	17c14348 	.word	0x17c14348
 101213c:	ea400a00 	.word	0xea400a00
 1012140:	90046001 	.word	0x90046001
 1012144:	7000f44f 	.word	0x7000f44f
 1012148:	0016f8ad 	.word	0x0016f8ad
 101214c:	f88d2000 	.word	0xf88d2000
 1012150:	f6430018 	.word	0xf6430018
 1012154:	f8ad70ff 	.word	0xf8ad70ff
 1012158:	46680014 	.word	0x46680014
 101215c:	fd28f002 	.word	0xfd28f002
 1012160:	e0de2003 	.word	0xe0de2003
 1012164:	1481f899 	.word	0x1481f899
 1012168:	600cf44f 	.word	0x600cf44f
 101216c:	3494f8d9 	.word	0x3494f8d9
 1012170:	bf0f000a 	.word	0xbf0f000a
 1012174:	1e4a4602 	.word	0x1e4a4602
 1012178:	fb10b2d2 	.word	0xfb10b2d2
 101217c:	fb10f202 	.word	0xfb10f202
 1012180:	441af001 	.word	0x441af001
 1012184:	44189200 	.word	0x44189200
 1012188:	f8df9001 	.word	0xf8df9001
 101218c:	90040d3c 	.word	0x90040d3c
 1012190:	7000f44f 	.word	0x7000f44f
 1012194:	0016f8ad 	.word	0x0016f8ad
 1012198:	f88d2000 	.word	0xf88d2000
 101219c:	20080018 	.word	0x20080018
 10121a0:	0019f88d 	.word	0x0019f88d
 10121a4:	f0024668 	.word	0xf0024668
 10121a8:	f899fd03 	.word	0xf899fd03
 10121ac:	1c400481 	.word	0x1c400481
 10121b0:	2802b2c0 	.word	0x2802b2c0
 10121b4:	2000bf08 	.word	0x2000bf08
 10121b8:	0481f889 	.word	0x0481f889
 10121bc:	e0b02004 	.word	0xe0b02004
 10121c0:	fd8ff001 	.word	0xfd8ff001
 10121c4:	f8d94601 	.word	0xf8d94601
 10121c8:	f00104ac 	.word	0xf00104ac
 10121cc:	f001ff3d 	.word	0xf001ff3d
 10121d0:	4604fd7c 	.word	0x4604fd7c
 10121d4:	04acf8d9 	.word	0x04acf8d9
 10121d8:	20009007 	.word	0x20009007
 10121dc:	0022f88d 	.word	0x0022f88d
 10121e0:	f8ada807 	.word	0xf8ada807
 10121e4:	f0014020 	.word	0xf0014020
 10121e8:	4620ff53 	.word	0x4620ff53
 10121ec:	f7ff2400 	.word	0xf7ff2400
 10121f0:	f899fd2a 	.word	0xf899fd2a
 10121f4:	fb180483 	.word	0xfb180483
 10121f8:	4448f000 	.word	0x4448f000
 10121fc:	1232f890 	.word	0x1232f890
 1012200:	f899b131 	.word	0xf899b131
 1012204:	29011480 	.word	0x29011480
 1012208:	7980bf02 	.word	0x7980bf02
 101220c:	24012800 	.word	0x24012800
 1012210:	04a4f8d9 	.word	0x04a4f8d9
 1012214:	ffe2f001 	.word	0xffe2f001
 1012218:	20054606 	.word	0x20054606
 101221c:	f80cf002 	.word	0xf80cf002
 1012220:	f44f4605 	.word	0xf44f4605
 1012224:	46297200 	.word	0x46297200
 1012228:	f0024630 	.word	0xf0024630
 101222c:	f44ff84f 	.word	0xf44ff84f
 1012230:	46297200 	.word	0x46297200
 1012234:	f0024628 	.word	0xf0024628
 1012238:	9600f906 	.word	0x9600f906
 101223c:	1481f899 	.word	0x1481f899
 1012240:	600cf44f 	.word	0x600cf44f
 1012244:	2494f8d9 	.word	0x2494f8d9
 1012248:	fb109503 	.word	0xfb109503
 101224c:	4413f301 	.word	0x4413f301
 1012250:	000b9301 	.word	0x000b9301
 1012254:	1e49d003 	.word	0x1e49d003
 1012258:	fb10b2c9 	.word	0xfb10b2c9
 101225c:	4410f001 	.word	0x4410f001
 1012260:	70fcf200 	.word	0x70fcf200
 1012264:	90022c00 	.word	0x90022c00
 1012268:	2000bf19 	.word	0x2000bf19
 101226c:	20382100 	.word	0x20382100
 1012270:	f88d2108 	.word	0xf88d2108
 1012274:	20180018 	.word	0x20180018
 1012278:	1019f88d 	.word	0x1019f88d
 101227c:	f918f002 	.word	0xf918f002
 1012280:	6804489d 	.word	0x6804489d
 1012284:	f0022018 	.word	0xf0022018
 1012288:	2100f935 	.word	0x2100f935
 101228c:	002af241 	.word	0x002af241
 1012290:	2c00b224 	.word	0x2c00b224
 1012294:	4622d403 	.word	0x4622d403
 1012298:	f968f002 	.word	0xf968f002
 101229c:	4262e002 	.word	0x4262e002
 10122a0:	f974f002 	.word	0xf974f002
 10122a4:	f8994604 	.word	0xf8994604
 10122a8:	460d0483 	.word	0x460d0483
 10122ac:	f000fb18 	.word	0xf000fb18
 10122b0:	0800eb09 	.word	0x0800eb09
 10122b4:	fbbcf002 	.word	0xfbbcf002
 10122b8:	222ef898 	.word	0x222ef898
 10122bc:	21fcf60f 	.word	0x21fcf60f
 10122c0:	1012f831 	.word	0x1012f831
 10122c4:	fba04348 	.word	0xfba04348
 10122c8:	fb002304 	.word	0xfb002304
 10122cc:	17c13305 	.word	0x17c13305
 10122d0:	7000f44f 	.word	0x7000f44f
 10122d4:	0016f8ad 	.word	0x0016f8ad
 10122d8:	fb010e12 	.word	0xfb010e12
 10122dc:	f6433304 	.word	0xf6433304
 10122e0:	ea4270ff 	.word	0xea4270ff
 10122e4:	f8ad2203 	.word	0xf8ad2203
 10122e8:	92040014 	.word	0x92040014
 10122ec:	f0024668 	.word	0xf0024668
 10122f0:	f899fc5f 	.word	0xf899fc5f
 10122f4:	1c400481 	.word	0x1c400481
 10122f8:	2802b2c0 	.word	0x2802b2c0
 10122fc:	2000bf08 	.word	0x2000bf08
 1012300:	0481f889 	.word	0x0481f889
 1012304:	0480f899 	.word	0x0480f899
 1012308:	f8891e40 	.word	0xf8891e40
 101230c:	20050480 	.word	0x20050480
 1012310:	f899e007 	.word	0xf899e007
 1012314:	1e400480 	.word	0x1e400480
 1012318:	0480f889 	.word	0x0480f889
 101231c:	b910b2c0 	.word	0xb910b2c0
 1012320:	f8872008 	.word	0xf8872008
 1012324:	b009022d 	.word	0xb009022d
 1012328:	83f0e8bd 	.word	0x83f0e8bd
 101232c:	1b9cf8df 	.word	0x1b9cf8df
 1012330:	2483f891 	.word	0x2483f891
 1012334:	0342eb02 	.word	0x0342eb02
 1012338:	0183eb01 	.word	0x0183eb01
 101233c:	0468f8c1 	.word	0x0468f8c1
 1012340:	e92d4770 	.word	0xe92d4770
 1012344:	460447f0 	.word	0x460447f0
 1012348:	f5b588a5 	.word	0xf5b588a5
 101234c:	da6a7f00 	.word	0xda6a7f00
 1012350:	00307a66 	.word	0x00307a66
 1012354:	f001d102 	.word	0xf001d102
 1012358:	e001fcd0 	.word	0xe001fcd0
 101235c:	fcd9f001 	.word	0xfcd9f001
 1012360:	f44f7ae2 	.word	0xf44f7ae2
 1012364:	f8df730d 	.word	0xf8df730d
 1012368:	fb131b64 	.word	0xfb131b64
 101236c:	eb01f202 	.word	0xeb01f202
 1012370:	eb090902 	.word	0xeb090902
 1012374:	f8890105 	.word	0xf8890105
 1012378:	2600622b 	.word	0x2600622b
 101237c:	42a81dcf 	.word	0x42a81dcf
 1012380:	022af889 	.word	0x022af889
 1012384:	f894da52 	.word	0xf894da52
 1012388:	1a2da007 	.word	0x1a2da007
 101238c:	0808f04f 	.word	0x0808f04f
 1012390:	f889b2ad 	.word	0xf889b2ad
 1012394:	79e0a22c 	.word	0x79e0a22c
 1012398:	f0100880 	.word	0xf0100880
 101239c:	f8890001 	.word	0xf8890001
 10123a0:	d006022f 	.word	0xd006022f
 10123a4:	00451c68 	.word	0x00451c68
 10123a8:	6b01f807 	.word	0x6b01f807
 10123ac:	f04fb2ad 	.word	0xf04fb2ad
 10123b0:	f0010810 	.word	0xf0010810
 10123b4:	f00afc90 	.word	0xf00afc90
 10123b8:	1c490103 	.word	0x1c490103
 10123bc:	fb10b2c9 	.word	0xfb10b2c9
 10123c0:	00e9f001 	.word	0x00e9f001
 10123c4:	b280b289 	.word	0xb280b289
 10123c8:	f2f0fb91 	.word	0xf2f0fb91
 10123cc:	1212fb00 	.word	0x1212fb00
 10123d0:	b1bab292 	.word	0xb1bab292
 10123d4:	22004441 	.word	0x22004441
 10123d8:	703ab289 	.word	0x703ab289
 10123dc:	f2f0fb91 	.word	0xf2f0fb91
 10123e0:	1212fb00 	.word	0x1212fb00
 10123e4:	b2921c76 	.word	0xb2921c76
 10123e8:	4441b162 	.word	0x4441b162
 10123ec:	2200b289 	.word	0x2200b289
 10123f0:	707a1c76 	.word	0x707a1c76
 10123f4:	fb911cbf 	.word	0xfb911cbf
 10123f8:	fb00f2f0 	.word	0xfb00f2f0
 10123fc:	b2921212 	.word	0xb2921212
 1012400:	d1e72a00 	.word	0xd1e72a00
 1012404:	f8f0fb91 	.word	0xf8f0fb91
 1012408:	08c079e0 	.word	0x08c079e0
 101240c:	0001f010 	.word	0x0001f010
 1012410:	0230f889 	.word	0x0230f889
 1012414:	ea4fbf1a 	.word	0xea4fbf1a
 1012418:	20fc0888 	.word	0x20fc0888
 101241c:	fa1f203f 	.word	0xfa1f203f
 1012420:	4288f188 	.word	0x4288f188
 1012424:	2000d209 	.word	0x2000d209
 1012428:	87f0e8bd 	.word	0x87f0e8bd
 101242c:	1b4646b0 	.word	0x1b4646b0
 1012430:	4631b2b6 	.word	0x4631b2b6
 1012434:	f0014638 	.word	0xf0014638
 1012438:	f8a9fd09 	.word	0xf8a9fd09
 101243c:	20016004 	.word	0x20016004
 1012440:	8006f889 	.word	0x8006f889
 1012444:	87f0e8bd 	.word	0x87f0e8bd
 1012448:	4604b570 	.word	0x4604b570
 101244c:	5a7cf8df 	.word	0x5a7cf8df
 1012450:	0490f8d5 	.word	0x0490f8d5
 1012454:	460eb088 	.word	0x460eb088
 1012458:	f44f4780 	.word	0xf44f4780
 101245c:	f885700d 	.word	0xf885700d
 1012460:	fb104483 	.word	0xfb104483
 1012464:	182cf004 	.word	0x182cf004
 1012468:	022bf894 	.word	0x022bf894
 101246c:	28026026 	.word	0x28026026
 1012470:	2602bf0c 	.word	0x2602bf0c
 1012474:	f0022600 	.word	0xf0022600
 1012478:	eb05fae1 	.word	0xeb05fae1
 101247c:	eb052180 	.word	0xeb052180
 1012480:	b94e20c0 	.word	0xb94e20c0
 1012484:	42b4f243 	.word	0x42b4f243
 1012488:	f8944411 	.word	0xf8944411
 101248c:	f2002231 	.word	0xf2002231
 1012490:	b93a40b4 	.word	0xb93a40b4
 1012494:	e0062208 	.word	0xe0062208
 1012498:	42b4f641 	.word	0x42b4f641
 101249c:	f2444410 	.word	0xf2444410
 10124a0:	441102b4 	.word	0x441102b4
 10124a4:	90002200 	.word	0x90002200
 10124a8:	91032001 	.word	0x91032001
 10124ac:	2019f88d 	.word	0x2019f88d
 10124b0:	fecbf001 	.word	0xfecbf001
 10124b4:	f0029001 	.word	0xf0029001
 10124b8:	f894fabb 	.word	0xf894fabb
 10124bc:	f60f222e 	.word	0xf60f222e
 10124c0:	f83101fc 	.word	0xf83101fc
 10124c4:	43481012 	.word	0x43481012
 10124c8:	0a0017c1 	.word	0x0a0017c1
 10124cc:	6001ea40 	.word	0x6001ea40
 10124d0:	f44f9004 	.word	0xf44f9004
 10124d4:	f8ad7000 	.word	0xf8ad7000
 10124d8:	20000016 	.word	0x20000016
 10124dc:	0018f88d 	.word	0x0018f88d
 10124e0:	70fff643 	.word	0x70fff643
 10124e4:	0014f8ad 	.word	0x0014f8ad
 10124e8:	f0024668 	.word	0xf0024668
 10124ec:	b008fb61 	.word	0xb008fb61
 10124f0:	0000bd70 	.word	0x0000bd70
 10124f4:	2000dd7c 	.word	0x2000dd7c
 10124f8:	e0100048 	.word	0xe0100048
 10124fc:	000013bc 	.word	0x000013bc
 1012500:	e92d2000 	.word	0xe92d2000
 1012504:	f8df4ff0 	.word	0xf8df4ff0
 1012508:	f44f89c4 	.word	0xf44f89c4
 101250c:	f8887b0d 	.word	0xf8887b0d
 1012510:	f8980481 	.word	0xf8980481
 1012514:	b08f0483 	.word	0xb08f0483
 1012518:	6a0cf44f 	.word	0x6a0cf44f
 101251c:	f000fb1b 	.word	0xf000fb1b
 1012520:	90094440 	.word	0x90094440
 1012524:	022bf890 	.word	0x022bf890
 1012528:	900d2803 	.word	0x900d2803
 101252c:	e8dfd863 	.word	0xe8dfd863
 1012530:	6202f000 	.word	0x6202f000
 1012534:	98093107 	.word	0x98093107
 1012538:	f7ff2500 	.word	0xf7ff2500
 101253c:	e05afab1 	.word	0xe05afab1
 1012540:	f0012001 	.word	0xf0012001
 1012544:	f898fe82 	.word	0xf898fe82
 1012548:	90001481 	.word	0x90001481
 101254c:	0494f8d8 	.word	0x0494f8d8
 1012550:	f101fb1a 	.word	0xf101fb1a
 1012554:	90014408 	.word	0x90014408
 1012558:	096cf8df 	.word	0x096cf8df
 101255c:	f44f9004 	.word	0xf44f9004
 1012560:	f8ad7000 	.word	0xf8ad7000
 1012564:	20000016 	.word	0x20000016
 1012568:	0018f88d 	.word	0x0018f88d
 101256c:	f88d2008 	.word	0xf88d2008
 1012570:	46680019 	.word	0x46680019
 1012574:	fb1cf002 	.word	0xfb1cf002
 1012578:	0481f898 	.word	0x0481f898
 101257c:	b2c01c40 	.word	0xb2c01c40
 1012580:	bf082802 	.word	0xbf082802
 1012584:	f8882000 	.word	0xf8882000
 1012588:	98090481 	.word	0x98090481
 101258c:	f7ff2502 	.word	0xf7ff2502
 1012590:	e030fb04 	.word	0xe030fb04
 1012594:	f8d89809 	.word	0xf8d89809
 1012598:	7980449c 	.word	0x7980449c
 101259c:	b2803008 	.word	0xb2803008
 10125a0:	bfa8283f 	.word	0xbfa8283f
 10125a4:	0881203f 	.word	0x0881203f
 10125a8:	0140f041 	.word	0x0140f041
 10125ac:	70210180 	.word	0x70210180
 10125b0:	0004f040 	.word	0x0004f040
 10125b4:	70602500 	.word	0x70602500
 10125b8:	70a02069 	.word	0x70a02069
 10125bc:	70e020e8 	.word	0x70e020e8
 10125c0:	712020af 	.word	0x712020af
 10125c4:	7160202f 	.word	0x7160202f
 10125c8:	71a0203e 	.word	0x71a0203e
 10125cc:	71e020ae 	.word	0x71e020ae
 10125d0:	722020a8 	.word	0x722020a8
 10125d4:	fb88f001 	.word	0xfb88f001
 10125d8:	0110f100 	.word	0x0110f100
 10125dc:	049cf8d8 	.word	0x049cf8d8
 10125e0:	f001b289 	.word	0xf001b289
 10125e4:	7a21fbe7 	.word	0x7a21fbe7
 10125e8:	1190ea41 	.word	0x1190ea41
 10125ec:	72600080 	.word	0x72600080
 10125f0:	72212000 	.word	0x72212000
 10125f4:	f00172a0 	.word	0xf00172a0
 10125f8:	b2e8fce0 	.word	0xb2e8fce0
 10125fc:	f001b910 	.word	0xf001b910
 1012600:	e001fb93 	.word	0xe001fb93
 1012604:	fba4f001 	.word	0xfba4f001
 1012608:	1de04604 	.word	0x1de04604
 101260c:	14a0f8d8 	.word	0x14a0f8d8
 1012610:	f8d80542 	.word	0xf8d80542
 1012614:	0e12049c 	.word	0x0e12049c
 1012618:	fcbef001 	.word	0xfcbef001
 101261c:	1498f8d8 	.word	0x1498f8d8
 1012620:	04a0f8d8 	.word	0x04a0f8d8
 1012624:	23000062 	.word	0x23000062
 1012628:	f001b292 	.word	0xf001b292
 101262c:	b2e8fc4f 	.word	0xb2e8fc4f
 1012630:	2002b918 	.word	0x2002b918
 1012634:	22032102 	.word	0x22032102
 1012638:	2004e002 	.word	0x2004e002
 101263c:	220b2101 	.word	0x220b2101
 1012640:	0480f888 	.word	0x0480f888
 1012644:	0498f8d8 	.word	0x0498f8d8
 1012648:	f8d8900a 	.word	0xf8d8900a
 101264c:	900b04a8 	.word	0x900b04a8
 1012650:	f88da80a 	.word	0xf88da80a
 1012654:	f88d1032 	.word	0xf88d1032
 1012658:	f0012031 	.word	0xf0012031
 101265c:	f8d8fcb5 	.word	0xf8d8fcb5
 1012660:	f00104a8 	.word	0xf00104a8
 1012664:	2100fcfe 	.word	0x2100fcfe
 1012668:	f001b2e8 	.word	0xf001b2e8
 101266c:	f002fd47 	.word	0xf002fd47
 1012670:	4601f9e5 	.word	0x4601f9e5
 1012674:	04b0f8d8 	.word	0x04b0f8d8
 1012678:	f002b2ed 	.word	0xf002b2ed
 101267c:	f898f907 	.word	0xf898f907
 1012680:	f1c00481 	.word	0xf1c00481
 1012684:	f0010702 	.word	0xf0010702
 1012688:	4601fb2c 	.word	0x4601fb2c
 101268c:	04acf8d8 	.word	0x04acf8d8
 1012690:	fcdaf001 	.word	0xfcdaf001
 1012694:	fb19f001 	.word	0xfb19f001
 1012698:	f8d84604 	.word	0xf8d84604
 101269c:	900704ac 	.word	0x900704ac
 10126a0:	f88d2000 	.word	0xf88d2000
 10126a4:	a8070022 	.word	0xa8070022
 10126a8:	4020f8ad 	.word	0x4020f8ad
 10126ac:	fcf0f001 	.word	0xfcf0f001
 10126b0:	24014620 	.word	0x24014620
 10126b4:	fac7f7ff 	.word	0xfac7f7ff
 10126b8:	2400b905 	.word	0x2400b905
 10126bc:	0483f898 	.word	0x0483f898
 10126c0:	fb1b2500 	.word	0xfb1b2500
 10126c4:	4440f000 	.word	0x4440f000
 10126c8:	1232f890 	.word	0x1232f890
 10126cc:	f898b131 	.word	0xf898b131
 10126d0:	29011480 	.word	0x29011480
 10126d4:	7980bf02 	.word	0x7980bf02
 10126d8:	25012800 	.word	0x25012800
 10126dc:	04a4f8d8 	.word	0x04a4f8d8
 10126e0:	fd7cf001 	.word	0xfd7cf001
 10126e4:	20054681 	.word	0x20054681
 10126e8:	fda6f001 	.word	0xfda6f001
 10126ec:	f44f4606 	.word	0xf44f4606
 10126f0:	46317200 	.word	0x46317200
 10126f4:	f0014648 	.word	0xf0014648
 10126f8:	f44ffde9 	.word	0xf44ffde9
 10126fc:	46317200 	.word	0x46317200
 1012700:	f0014630 	.word	0xf0014630
 1012704:	f898fea0 	.word	0xf898fea0
 1012708:	f8d81481 	.word	0xf8d81481
 101270c:	f8cd0494 	.word	0xf8cd0494
 1012710:	fb1a9000 	.word	0xfb1a9000
 1012714:	4402f201 	.word	0x4402f201
 1012718:	96039201 	.word	0x96039201
 101271c:	000ab144 	.word	0x000ab144
 1012720:	4651bf0f 	.word	0x4651bf0f
 1012724:	b2c91e49 	.word	0xb2c91e49
 1012728:	f101fb1a 	.word	0xf101fb1a
 101272c:	e0024408 	.word	0xe0024408
 1012730:	f0012001 	.word	0xf0012001
 1012734:	2d00fd8a 	.word	0x2d00fd8a
 1012738:	70fcf200 	.word	0x70fcf200
 101273c:	bf199002 	.word	0xbf199002
 1012740:	21002000 	.word	0x21002000
 1012744:	21082038 	.word	0x21082038
 1012748:	0018f88d 	.word	0x0018f88d
 101274c:	f88d2018 	.word	0xf88d2018
 1012750:	f0011019 	.word	0xf0011019
 1012754:	f8dffead 	.word	0xf8dffead
 1012758:	68040778 	.word	0x68040778
 101275c:	f0012018 	.word	0xf0012018
 1012760:	f241fec9 	.word	0xf241fec9
 1012764:	b222002a 	.word	0xb222002a
 1012768:	d4032a00 	.word	0xd4032a00
 101276c:	f0012100 	.word	0xf0012100
 1012770:	e003fefd 	.word	0xe003fefd
 1012774:	42522100 	.word	0x42522100
 1012778:	ff08f001 	.word	0xff08f001
 101277c:	f8984604 	.word	0xf8984604
 1012780:	460d0483 	.word	0x460d0483
 1012784:	f000fb1b 	.word	0xf000fb1b
 1012788:	0600eb08 	.word	0x0600eb08
 101278c:	f950f002 	.word	0xf950f002
 1012790:	f8964622 	.word	0xf8964622
 1012794:	f20f422e 	.word	0xf20f422e
 1012798:	462b6124 	.word	0x462b6124
 101279c:	1014f831 	.word	0x1014f831
 10127a0:	fba04348 	.word	0xfba04348
 10127a4:	fb004502 	.word	0xfb004502
 10127a8:	17c15503 	.word	0x17c15503
 10127ac:	7000f44f 	.word	0x7000f44f
 10127b0:	0016f8ad 	.word	0x0016f8ad
 10127b4:	fb010e24 	.word	0xfb010e24
 10127b8:	f6435502 	.word	0xf6435502
 10127bc:	ea4470ff 	.word	0xea4470ff
 10127c0:	f8ad2405 	.word	0xf8ad2405
 10127c4:	94040014 	.word	0x94040014
 10127c8:	f0024668 	.word	0xf0024668
 10127cc:	f898f9f1 	.word	0xf898f9f1
 10127d0:	1c400481 	.word	0x1c400481
 10127d4:	0481f888 	.word	0x0481f888
 10127d8:	2802b2c0 	.word	0x2802b2c0
 10127dc:	2000d137 	.word	0x2000d137
 10127e0:	0481f888 	.word	0x0481f888
 10127e4:	2100e033 	.word	0x2100e033
 10127e8:	f0014252 	.word	0xf0014252
 10127ec:	4604fecf 	.word	0x4604fecf
 10127f0:	0483f898 	.word	0x0483f898
 10127f4:	fb1b460d 	.word	0xfb1b460d
 10127f8:	eb08f000 	.word	0xeb08f000
 10127fc:	f0020600 	.word	0xf0020600
 1012800:	f896f917 	.word	0xf896f917
 1012804:	f20f222e 	.word	0xf20f222e
 1012808:	f83151b4 	.word	0xf83151b4
 101280c:	43481012 	.word	0x43481012
 1012810:	2304fba0 	.word	0x2304fba0
 1012814:	3305fb00 	.word	0x3305fb00
 1012818:	f44f17c1 	.word	0xf44f17c1
 101281c:	f8ad7000 	.word	0xf8ad7000
 1012820:	0e120016 	.word	0x0e120016
 1012824:	3304fb01 	.word	0x3304fb01
 1012828:	70fff643 	.word	0x70fff643
 101282c:	2203ea42 	.word	0x2203ea42
 1012830:	0014f8ad 	.word	0x0014f8ad
 1012834:	46689204 	.word	0x46689204
 1012838:	f9baf002 	.word	0xf9baf002
 101283c:	0481f898 	.word	0x0481f898
 1012840:	b2c01c40 	.word	0xb2c01c40
 1012844:	bf082802 	.word	0xbf082802
 1012848:	f8882000 	.word	0xf8882000
 101284c:	f8980481 	.word	0xf8980481
 1012850:	1e7f0480 	.word	0x1e7f0480
 1012854:	f8881e40 	.word	0xf8881e40
 1012858:	f8980480 	.word	0xf8980480
 101285c:	28000480 	.word	0x28000480
 1012860:	b2f8bf1c 	.word	0xb2f8bf1c
 1012864:	d06e2800 	.word	0xd06e2800
 1012868:	fa3bf001 	.word	0xfa3bf001
 101286c:	f8d84601 	.word	0xf8d84601
 1012870:	f00104ac 	.word	0xf00104ac
 1012874:	f001fbe9 	.word	0xf001fbe9
 1012878:	4604fa28 	.word	0x4604fa28
 101287c:	04acf8d8 	.word	0x04acf8d8
 1012880:	20009007 	.word	0x20009007
 1012884:	0022f88d 	.word	0x0022f88d
 1012888:	f8ada807 	.word	0xf8ada807
 101288c:	f0014020 	.word	0xf0014020
 1012890:	4620fbff 	.word	0x4620fbff
 1012894:	f7ff2400 	.word	0xf7ff2400
 1012898:	f898f9d6 	.word	0xf898f9d6
 101289c:	fb1b0483 	.word	0xfb1b0483
 10128a0:	4440f000 	.word	0x4440f000
 10128a4:	1232f890 	.word	0x1232f890
 10128a8:	f898b131 	.word	0xf898b131
 10128ac:	29011480 	.word	0x29011480
 10128b0:	7980bf02 	.word	0x7980bf02
 10128b4:	24012800 	.word	0x24012800
 10128b8:	04a4f8d8 	.word	0x04a4f8d8
 10128bc:	fc8ef001 	.word	0xfc8ef001
 10128c0:	20054606 	.word	0x20054606
 10128c4:	fcb8f001 	.word	0xfcb8f001
 10128c8:	f44f4605 	.word	0xf44f4605
 10128cc:	46297200 	.word	0x46297200
 10128d0:	f0014630 	.word	0xf0014630
 10128d4:	f44ffcfb 	.word	0xf44ffcfb
 10128d8:	46297200 	.word	0x46297200
 10128dc:	f0014628 	.word	0xf0014628
 10128e0:	9600fdb2 	.word	0x9600fdb2
 10128e4:	1481f898 	.word	0x1481f898
 10128e8:	0494f8d8 	.word	0x0494f8d8
 10128ec:	fb1a9503 	.word	0xfb1a9503
 10128f0:	4402f201 	.word	0x4402f201
 10128f4:	000a9201 	.word	0x000a9201
 10128f8:	4651bf0f 	.word	0x4651bf0f
 10128fc:	b2c91e49 	.word	0xb2c91e49
 1012900:	f101fb1a 	.word	0xf101fb1a
 1012904:	f6004408 	.word	0xf6004408
 1012908:	2c0000bc 	.word	0x2c0000bc
 101290c:	bf199002 	.word	0xbf199002
 1012910:	21002000 	.word	0x21002000
 1012914:	21082038 	.word	0x21082038
 1012918:	0018f88d 	.word	0x0018f88d
 101291c:	f88d2018 	.word	0xf88d2018
 1012920:	f0011019 	.word	0xf0011019
 1012924:	f8dffdc5 	.word	0xf8dffdc5
 1012928:	680405a8 	.word	0x680405a8
 101292c:	f0012018 	.word	0xf0012018
 1012930:	f241fde1 	.word	0xf241fde1
 1012934:	b222002a 	.word	0xb222002a
 1012938:	f53f2a00 	.word	0xf53f2a00
 101293c:	2100af54 	.word	0x2100af54
 1012940:	fe14f001 	.word	0xfe14f001
 1012944:	980de753 	.word	0x980de753
 1012948:	28032405 	.word	0x28032405
 101294c:	8208f040 	.word	0x8208f040
 1012950:	f7ff9809 	.word	0xf7ff9809
 1012954:	f001f922 	.word	0xf001f922
 1012958:	f001fb30 	.word	0xf001fb30
 101295c:	4605f9f9 	.word	0x4605f9f9
 1012960:	f8d81de8 	.word	0xf8d81de8
 1012964:	054214a0 	.word	0x054214a0
 1012968:	049cf8d8 	.word	0x049cf8d8
 101296c:	f0010e12 	.word	0xf0010e12
 1012970:	f8d8fb13 	.word	0xf8d8fb13
 1012974:	f8d81498 	.word	0xf8d81498
 1012978:	006a04a0 	.word	0x006a04a0
 101297c:	b2922300 	.word	0xb2922300
 1012980:	faa4f001 	.word	0xfaa4f001
 1012984:	f8882004 	.word	0xf8882004
 1012988:	f8d80480 	.word	0xf8d80480
 101298c:	900a0498 	.word	0x900a0498
 1012990:	04a8f8d8 	.word	0x04a8f8d8
 1012994:	2001900b 	.word	0x2001900b
 1012998:	0032f88d 	.word	0x0032f88d
 101299c:	f88d200b 	.word	0xf88d200b
 10129a0:	a80a0031 	.word	0xa80a0031
 10129a4:	fb10f001 	.word	0xfb10f001
 10129a8:	04a8f8d8 	.word	0x04a8f8d8
 10129ac:	fb59f001 	.word	0xfb59f001
 10129b0:	2800b2f8 	.word	0x2800b2f8
 10129b4:	81d3f000 	.word	0x81d3f000
 10129b8:	f840f002 	.word	0xf840f002
 10129bc:	21c0eb08 	.word	0x21c0eb08
 10129c0:	42b4f641 	.word	0x42b4f641
 10129c4:	2080eb08 	.word	0x2080eb08
 10129c8:	91004411 	.word	0x91004411
 10129cc:	01b4f244 	.word	0x01b4f244
 10129d0:	f8d84408 	.word	0xf8d84408
 10129d4:	90031494 	.word	0x90031494
 10129d8:	f88d2000 	.word	0xf88d2000
 10129dc:	f8980019 	.word	0xf8980019
 10129e0:	fb1a0481 	.word	0xfb1a0481
 10129e4:	1c40f200 	.word	0x1c40f200
 10129e8:	2802b2c0 	.word	0x2802b2c0
 10129ec:	91014411 	.word	0x91014411
 10129f0:	2000bf08 	.word	0x2000bf08
 10129f4:	0481f888 	.word	0x0481f888
 10129f8:	f0021e7f 	.word	0xf0021e7f
 10129fc:	9a09f819 	.word	0x9a09f819
 1012a00:	31b8f20f 	.word	0x31b8f20f
 1012a04:	222ef892 	.word	0x222ef892
 1012a08:	1012f831 	.word	0x1012f831
 1012a0c:	17c14348 	.word	0x17c14348
 1012a10:	ea400a00 	.word	0xea400a00
 1012a14:	90046001 	.word	0x90046001
 1012a18:	7000f44f 	.word	0x7000f44f
 1012a1c:	0016f8ad 	.word	0x0016f8ad
 1012a20:	f88d2000 	.word	0xf88d2000
 1012a24:	f6430018 	.word	0xf6430018
 1012a28:	f8ad70ff 	.word	0xf8ad70ff
 1012a2c:	46680014 	.word	0x46680014
 1012a30:	f8bef002 	.word	0xf8bef002
 1012a34:	2800b2f8 	.word	0x2800b2f8
 1012a38:	818ff000 	.word	0x818ff000
 1012a3c:	0481f898 	.word	0x0481f898
 1012a40:	2494f8d8 	.word	0x2494f8d8
 1012a44:	bf0f0001 	.word	0xbf0f0001
 1012a48:	1e414651 	.word	0x1e414651
 1012a4c:	fb1ab2c9 	.word	0xfb1ab2c9
 1012a50:	fb1af101 	.word	0xfb1af101
 1012a54:	4411f000 	.word	0x4411f000
 1012a58:	44109100 	.word	0x44109100
 1012a5c:	f8df9001 	.word	0xf8df9001
 1012a60:	90040468 	.word	0x90040468
 1012a64:	7000f44f 	.word	0x7000f44f
 1012a68:	0016f8ad 	.word	0x0016f8ad
 1012a6c:	f88d2000 	.word	0xf88d2000
 1012a70:	20080018 	.word	0x20080018
 1012a74:	0019f88d 	.word	0x0019f88d
 1012a78:	f0024668 	.word	0xf0024668
 1012a7c:	f898f899 	.word	0xf898f899
 1012a80:	1c400481 	.word	0x1c400481
 1012a84:	0481f888 	.word	0x0481f888
 1012a88:	2802b2c0 	.word	0x2802b2c0
 1012a8c:	2000bf04 	.word	0x2000bf04
 1012a90:	0481f888 	.word	0x0481f888
 1012a94:	b2f81e7f 	.word	0xb2f81e7f
 1012a98:	f0002800 	.word	0xf0002800
 1012a9c:	f001815c 	.word	0xf001815c
 1012aa0:	4601f920 	.word	0x4601f920
 1012aa4:	04acf8d8 	.word	0x04acf8d8
 1012aa8:	facef001 	.word	0xfacef001
 1012aac:	f90df001 	.word	0xf90df001
 1012ab0:	f8d84605 	.word	0xf8d84605
 1012ab4:	900704ac 	.word	0x900704ac
 1012ab8:	f88d2000 	.word	0xf88d2000
 1012abc:	a8070022 	.word	0xa8070022
 1012ac0:	5020f8ad 	.word	0x5020f8ad
 1012ac4:	fae4f001 	.word	0xfae4f001
 1012ac8:	25004628 	.word	0x25004628
 1012acc:	f8bbf7ff 	.word	0xf8bbf7ff
 1012ad0:	0483f898 	.word	0x0483f898
 1012ad4:	f000fb1b 	.word	0xf000fb1b
 1012ad8:	f8904440 	.word	0xf8904440
 1012adc:	b1311232 	.word	0xb1311232
 1012ae0:	1480f898 	.word	0x1480f898
 1012ae4:	bf022901 	.word	0xbf022901
 1012ae8:	28007980 	.word	0x28007980
 1012aec:	f8d82501 	.word	0xf8d82501
 1012af0:	f00104a4 	.word	0xf00104a4
 1012af4:	4681fb73 	.word	0x4681fb73
 1012af8:	f0012005 	.word	0xf0012005
 1012afc:	4606fb9d 	.word	0x4606fb9d
 1012b00:	7200f44f 	.word	0x7200f44f
 1012b04:	46484631 	.word	0x46484631
 1012b08:	fbe0f001 	.word	0xfbe0f001
 1012b0c:	7200f44f 	.word	0x7200f44f
 1012b10:	46304631 	.word	0x46304631
 1012b14:	fc97f001 	.word	0xfc97f001
 1012b18:	1481f898 	.word	0x1481f898
 1012b1c:	0494f8d8 	.word	0x0494f8d8
 1012b20:	9000f8cd 	.word	0x9000f8cd
 1012b24:	f201fb1a 	.word	0xf201fb1a
 1012b28:	92014402 	.word	0x92014402
 1012b2c:	9603000a 	.word	0x9603000a
 1012b30:	4651bf0f 	.word	0x4651bf0f
 1012b34:	b2c91e49 	.word	0xb2c91e49
 1012b38:	f101fb1a 	.word	0xf101fb1a
 1012b3c:	f2004408 	.word	0xf2004408
 1012b40:	2d0070fc 	.word	0x2d0070fc
 1012b44:	bf199002 	.word	0xbf199002
 1012b48:	21002000 	.word	0x21002000
 1012b4c:	21082038 	.word	0x21082038
 1012b50:	0018f88d 	.word	0x0018f88d
 1012b54:	f88d2018 	.word	0xf88d2018
 1012b58:	f0011019 	.word	0xf0011019
 1012b5c:	f8dffca9 	.word	0xf8dffca9
 1012b60:	68050370 	.word	0x68050370
 1012b64:	f0012018 	.word	0xf0012018
 1012b68:	f241fcc5 	.word	0xf241fcc5
 1012b6c:	b22a002a 	.word	0xb22a002a
 1012b70:	d4032a00 	.word	0xd4032a00
 1012b74:	f0012100 	.word	0xf0012100
 1012b78:	e003fcf9 	.word	0xe003fcf9
 1012b7c:	42522100 	.word	0x42522100
 1012b80:	fd04f001 	.word	0xfd04f001
 1012b84:	f8984606 	.word	0xf8984606
 1012b88:	46890483 	.word	0x46890483
 1012b8c:	f000fb1b 	.word	0xf000fb1b
 1012b90:	0500eb08 	.word	0x0500eb08
 1012b94:	ff4cf001 	.word	0xff4cf001
 1012b98:	522ef895 	.word	0x522ef895
 1012b9c:	211cf20f 	.word	0x211cf20f
 1012ba0:	464b4632 	.word	0x464b4632
 1012ba4:	1015f831 	.word	0x1015f831
 1012ba8:	fba04348 	.word	0xfba04348
 1012bac:	fb006902 	.word	0xfb006902
 1012bb0:	17c19903 	.word	0x17c19903
 1012bb4:	7000f44f 	.word	0x7000f44f
 1012bb8:	fb010e36 	.word	0xfb010e36
 1012bbc:	ea469902 	.word	0xea469902
 1012bc0:	96042609 	.word	0x96042609
 1012bc4:	0016f8ad 	.word	0x0016f8ad
 1012bc8:	70fff643 	.word	0x70fff643
 1012bcc:	0014f8ad 	.word	0x0014f8ad
 1012bd0:	f0014668 	.word	0xf0014668
 1012bd4:	f898ffed 	.word	0xf898ffed
 1012bd8:	1c400481 	.word	0x1c400481
 1012bdc:	0481f888 	.word	0x0481f888
 1012be0:	2802b2c0 	.word	0x2802b2c0
 1012be4:	2000d139 	.word	0x2000d139
 1012be8:	0481f888 	.word	0x0481f888
 1012bec:	2100e035 	.word	0x2100e035
 1012bf0:	f0014252 	.word	0xf0014252
 1012bf4:	4606fccb 	.word	0x4606fccb
 1012bf8:	0483f898 	.word	0x0483f898
 1012bfc:	fb1b4689 	.word	0xfb1b4689
 1012c00:	eb08f000 	.word	0xeb08f000
 1012c04:	f0010500 	.word	0xf0010500
 1012c08:	f895ff13 	.word	0xf895ff13
 1012c0c:	f20f522e 	.word	0xf20f522e
 1012c10:	463211ac 	.word	0x463211ac
 1012c14:	f831464b 	.word	0xf831464b
 1012c18:	43481015 	.word	0x43481015
 1012c1c:	6902fba0 	.word	0x6902fba0
 1012c20:	9903fb00 	.word	0x9903fb00
 1012c24:	f44f17c1 	.word	0xf44f17c1
 1012c28:	0e367000 	.word	0x0e367000
 1012c2c:	9902fb01 	.word	0x9902fb01
 1012c30:	2609ea46 	.word	0x2609ea46
 1012c34:	f8ad9604 	.word	0xf8ad9604
 1012c38:	f6430016 	.word	0xf6430016
 1012c3c:	f8ad70ff 	.word	0xf8ad70ff
 1012c40:	46680014 	.word	0x46680014
 1012c44:	ffb4f001 	.word	0xffb4f001
 1012c48:	0481f898 	.word	0x0481f898
 1012c4c:	b2c01c40 	.word	0xb2c01c40
 1012c50:	bf082802 	.word	0xbf082802
 1012c54:	f8882000 	.word	0xf8882000
 1012c58:	f8980481 	.word	0xf8980481
 1012c5c:	1e7f0480 	.word	0x1e7f0480
 1012c60:	f8881e40 	.word	0xf8881e40
 1012c64:	f8980480 	.word	0xf8980480
 1012c68:	28000480 	.word	0x28000480
 1012c6c:	b2f8d07b 	.word	0xb2f8d07b
 1012c70:	f0002800 	.word	0xf0002800
 1012c74:	f0018098 	.word	0xf0018098
 1012c78:	4601f834 	.word	0x4601f834
 1012c7c:	04acf8d8 	.word	0x04acf8d8
 1012c80:	f9e2f001 	.word	0xf9e2f001
 1012c84:	f821f001 	.word	0xf821f001
 1012c88:	f8d84605 	.word	0xf8d84605
 1012c8c:	900704ac 	.word	0x900704ac
 1012c90:	f88d2000 	.word	0xf88d2000
 1012c94:	a8070022 	.word	0xa8070022
 1012c98:	5020f8ad 	.word	0x5020f8ad
 1012c9c:	f9f8f001 	.word	0xf9f8f001
 1012ca0:	25004628 	.word	0x25004628
 1012ca4:	ffcff7fe 	.word	0xffcff7fe
 1012ca8:	0483f898 	.word	0x0483f898
 1012cac:	f000fb1b 	.word	0xf000fb1b
 1012cb0:	f8904440 	.word	0xf8904440
 1012cb4:	b1311232 	.word	0xb1311232
 1012cb8:	1480f898 	.word	0x1480f898
 1012cbc:	bf022901 	.word	0xbf022901
 1012cc0:	28007980 	.word	0x28007980
 1012cc4:	f8d82501 	.word	0xf8d82501
 1012cc8:	f00104a4 	.word	0xf00104a4
 1012ccc:	4681fa87 	.word	0x4681fa87
 1012cd0:	f0012005 	.word	0xf0012005
 1012cd4:	4606fab1 	.word	0x4606fab1
 1012cd8:	7200f44f 	.word	0x7200f44f
 1012cdc:	46484631 	.word	0x46484631
 1012ce0:	faf4f001 	.word	0xfaf4f001
 1012ce4:	7200f44f 	.word	0x7200f44f
 1012ce8:	46304631 	.word	0x46304631
 1012cec:	fbabf001 	.word	0xfbabf001
 1012cf0:	1481f898 	.word	0x1481f898
 1012cf4:	0494f8d8 	.word	0x0494f8d8
 1012cf8:	9000f8cd 	.word	0x9000f8cd
 1012cfc:	f201fb1a 	.word	0xf201fb1a
 1012d00:	92014402 	.word	0x92014402
 1012d04:	9603000a 	.word	0x9603000a
 1012d08:	4651bf0f 	.word	0x4651bf0f
 1012d0c:	b2c91e49 	.word	0xb2c91e49
 1012d10:	f101fb1a 	.word	0xf101fb1a
 1012d14:	f6004408 	.word	0xf6004408
 1012d18:	2d0000bc 	.word	0x2d0000bc
 1012d1c:	bf199002 	.word	0xbf199002
 1012d20:	21002000 	.word	0x21002000
 1012d24:	21082038 	.word	0x21082038
 1012d28:	0018f88d 	.word	0x0018f88d
 1012d2c:	f88d2018 	.word	0xf88d2018
 1012d30:	f0011019 	.word	0xf0011019
 1012d34:	f8dffbbd 	.word	0xf8dffbbd
 1012d38:	68050198 	.word	0x68050198
 1012d3c:	f0012018 	.word	0xf0012018
 1012d40:	f241fbd9 	.word	0xf241fbd9
 1012d44:	b22a002a 	.word	0xb22a002a
 1012d48:	f53f2a00 	.word	0xf53f2a00
 1012d4c:	2100af50 	.word	0x2100af50
 1012d50:	fc0cf001 	.word	0xfc0cf001
 1012d54:	2404e74f 	.word	0x2404e74f
 1012d58:	2403e002 	.word	0x2403e002
 1012d5c:	2402e000 	.word	0x2402e000
 1012d60:	0480f898 	.word	0x0480f898
 1012d64:	9809b9f8 	.word	0x9809b9f8
 1012d68:	b1787980 	.word	0xb1787980
 1012d6c:	f7fe9809 	.word	0xf7fe9809
 1012d70:	e003ff91 	.word	0xe003ff91
 1012d74:	1e7f9809 	.word	0x1e7f9809
 1012d78:	f813f7ff 	.word	0xf813f7ff
 1012d7c:	0480f898 	.word	0x0480f898
 1012d80:	b2f8b120 	.word	0xb2f8b120
 1012d84:	d1f52800 	.word	0xd1f52800
 1012d88:	e00c2406 	.word	0xe00c2406
 1012d8c:	0481f898 	.word	0x0481f898
 1012d90:	bf0c0001 	.word	0xbf0c0001
 1012d94:	1e402001 	.word	0x1e402001
 1012d98:	2407b2c0 	.word	0x2407b2c0
 1012d9c:	fa0ef002 	.word	0xfa0ef002
 1012da0:	f8882002 	.word	0xf8882002
 1012da4:	f8980480 	.word	0xf8980480
 1012da8:	fb1b0483 	.word	0xfb1b0483
 1012dac:	4440f000 	.word	0x4440f000
 1012db0:	422df880 	.word	0x422df880
 1012db4:	e8bdb00f 	.word	0xe8bdb00f
 1012db8:	00008ff0 	.word	0x00008ff0
 1012dbc:	e429ffff 	.word	0xe429ffff
 1012dc0:	b53ccb59 	.word	0xb53ccb59
 1012dc4:	8ff6a186 	.word	0x8ff6a186
 1012dc8:	725a804e 	.word	0x725a804e
 1012dcc:	5ad565ea 	.word	0x5ad565ea
 1012dd0:	482750f4 	.word	0x482750f4
 1012dd4:	3950404e 	.word	0x3950404e
 1012dd8:	2d863314 	.word	0x2d863314
 1012ddc:	24292893 	.word	0x24292893
 1012de0:	1cb9203a 	.word	0x1cb9203a
 1012de4:	16d1199a 	.word	0x16d1199a
 1012de8:	00000000 	.word	0x00000000
 1012dec:	b081b5f0 	.word	0xb081b5f0
 1012df0:	460c4607 	.word	0x460c4607
 1012df4:	f0024615 	.word	0xf0024615
 1012df8:	42b8f9da 	.word	0x42b8f9da
 1012dfc:	2601bf0e 	.word	0x2601bf0e
 1012e00:	28ff2600 	.word	0x28ff2600
 1012e04:	200ed102 	.word	0x200ed102
 1012e08:	fb74f001 	.word	0xfb74f001
 1012e0c:	700df44f 	.word	0x700df44f
 1012e10:	fb10492e 	.word	0xfb10492e
 1012e14:	4408f007 	.word	0x4408f007
 1012e18:	222df890 	.word	0x222df890
 1012e1c:	2200b1ca 	.word	0x2200b1ca
 1012e20:	222df880 	.word	0x222df880
 1012e24:	0247eb07 	.word	0x0247eb07
 1012e28:	0282eb01 	.word	0x0282eb01
 1012e2c:	5471f882 	.word	0x5471f882
 1012e30:	446cf8c2 	.word	0x446cf8c2
 1012e34:	022bf890 	.word	0x022bf890
 1012e38:	6473f882 	.word	0x6473f882
 1012e3c:	0470f882 	.word	0x0470f882
 1012e40:	148cf8d1 	.word	0x148cf8d1
 1012e44:	608df44f 	.word	0x608df44f
 1012e48:	4410b001 	.word	0x4410b001
 1012e4c:	40f0e8bd 	.word	0x40f0e8bd
 1012e50:	b0014708 	.word	0xb0014708
 1012e54:	b5f0bdf0 	.word	0xb5f0bdf0
 1012e58:	f44f460d 	.word	0xf44f460d
 1012e5c:	fb11710d 	.word	0xfb11710d
 1012e60:	4b1af100 	.word	0x4b1af100
 1012e64:	4604b081 	.word	0x4604b081
 1012e68:	f897185f 	.word	0xf897185f
 1012e6c:	2908122d 	.word	0x2908122d
 1012e70:	683dd10e 	.word	0x683dd10e
 1012e74:	122ef897 	.word	0x122ef897
 1012e78:	0740eb00 	.word	0x0740eb00
 1012e7c:	2484f893 	.word	0x2484f893
 1012e80:	0087eb03 	.word	0x0087eb03
 1012e84:	f8d02601 	.word	0xf8d02601
 1012e88:	f0010468 	.word	0xf0010468
 1012e8c:	e005fb91 	.word	0xe005fb91
 1012e90:	f002260b 	.word	0xf002260b
 1012e94:	42a0f98c 	.word	0x42a0f98c
 1012e98:	683dbf08 	.word	0x683dbf08
 1012e9c:	46294632 	.word	0x46294632
 1012ea0:	b0014620 	.word	0xb0014620
 1012ea4:	40f0e8bd 	.word	0x40f0e8bd
 1012ea8:	2203e7a0 	.word	0x2203e7a0
 1012eac:	2204e79e 	.word	0x2204e79e
 1012eb0:	f8dfe79c 	.word	0xf8dfe79c
 1012eb4:	f44f090c 	.word	0xf44f090c
 1012eb8:	f890720d 	.word	0xf890720d
 1012ebc:	fb121483 	.word	0xfb121483
 1012ec0:	4408f101 	.word	0x4408f101
 1012ec4:	47707980 	.word	0x47707980
 1012ec8:	ffff0000 	.word	0xffff0000
 1012ecc:	2000dd7c 	.word	0x2000dd7c
 1012ed0:	e0100048 	.word	0xe0100048
 1012ed4:	4ff0e92d 	.word	0x4ff0e92d
 1012ed8:	b0894681 	.word	0xb0894681
 1012edc:	f8df2018 	.word	0xf8df2018
 1012ee0:	f001a8e0 	.word	0xf001a8e0
 1012ee4:	4606f9a9 	.word	0x4606f9a9
 1012ee8:	04a4f8da 	.word	0x04a4f8da
 1012eec:	6100f44f 	.word	0x6100f44f
 1012ef0:	28c9eb0a 	.word	0x28c9eb0a
 1012ef4:	5470f643 	.word	0x5470f643
 1012ef8:	7bfff64f 	.word	0x7bfff64f
 1012efc:	f8da1847 	.word	0xf8da1847
 1012f00:	464904b0 	.word	0x464904b0
 1012f04:	fcc2f001 	.word	0xfcc2f001
 1012f08:	463122c4 	.word	0x463122c4
 1012f0c:	36c44638 	.word	0x36c44638
 1012f10:	ffa0f000 	.word	0xffa0f000
 1012f14:	04b0f8da 	.word	0x04b0f8da
 1012f18:	f1002218 	.word	0xf1002218
 1012f1c:	46380160 	.word	0x46380160
 1012f20:	ff82f000 	.word	0xff82f000
 1012f24:	f24037c4 	.word	0xf24037c4
 1012f28:	4631627c 	.word	0x4631627c
 1012f2c:	f0004638 	.word	0xf0004638
 1012f30:	f207ffa1 	.word	0xf207ffa1
 1012f34:	22c0677c 	.word	0x22c0677c
 1012f38:	617cf206 	.word	0x617cf206
 1012f3c:	f0004638 	.word	0xf0004638
 1012f40:	f8daff99 	.word	0xf8daff99
 1012f44:	221714b0 	.word	0x221714b0
 1012f48:	f0004638 	.word	0xf0004638
 1012f4c:	f8daff6d 	.word	0xf8daff6d
 1012f50:	f00104a4 	.word	0xf00104a4
 1012f54:	4607f943 	.word	0x4607f943
 1012f58:	f0012005 	.word	0xf0012005
 1012f5c:	4606f96d 	.word	0x4606f96d
 1012f60:	7200f44f 	.word	0x7200f44f
 1012f64:	46384631 	.word	0x46384631
 1012f68:	f9b0f001 	.word	0xf9b0f001
 1012f6c:	7200f44f 	.word	0x7200f44f
 1012f70:	46304631 	.word	0x46304631
 1012f74:	fa67f001 	.word	0xfa67f001
 1012f78:	40b4f208 	.word	0x40b4f208
 1012f7c:	90029701 	.word	0x90029701
 1012f80:	96042018 	.word	0x96042018
 1012f84:	fa94f001 	.word	0xfa94f001
 1012f88:	0c0cf8df 	.word	0x0c0cf8df
 1012f8c:	20186805 	.word	0x20186805
 1012f90:	fab0f001 	.word	0xfab0f001
 1012f94:	b018f8ad 	.word	0xb018f8ad
 1012f98:	2d00b22d 	.word	0x2d00b22d
 1012f9c:	fa24bf52 	.word	0xfa24bf52
 1012fa0:	4268f005 	.word	0x4268f005
 1012fa4:	f000fa04 	.word	0xf000fa04
 1012fa8:	20009005 	.word	0x20009005
 1012fac:	7500f44f 	.word	0x7500f44f
 1012fb0:	001cf8ad 	.word	0x001cf8ad
 1012fb4:	501af8ad 	.word	0x501af8ad
 1012fb8:	f001a801 	.word	0xf001a801
 1012fbc:	f44ffdf9 	.word	0xf44ffdf9
 1012fc0:	f2086200 	.word	0xf2086200
 1012fc4:	463041b4 	.word	0x463041b4
 1012fc8:	ff44f000 	.word	0xff44f000
 1012fcc:	4631462a 	.word	0x4631462a
 1012fd0:	f0014630 	.word	0xf0014630
 1012fd4:	eb0af97b 	.word	0xeb0af97b
 1012fd8:	f2432089 	.word	0xf2432089
 1012fdc:	900041b4 	.word	0x900041b4
 1012fe0:	4401462a 	.word	0x4401462a
 1012fe4:	f0014630 	.word	0xf0014630
 1012fe8:	2019fa2e 	.word	0x2019fa2e
 1012fec:	f924f001 	.word	0xf924f001
 1012ff0:	f8da4606 	.word	0xf8da4606
 1012ff4:	f44f04a4 	.word	0xf44f04a4
 1012ff8:	18476100 	.word	0x18476100
 1012ffc:	f8da4649 	.word	0xf8da4649
 1013000:	f10704b0 	.word	0xf10704b0
 1013004:	f00109c4 	.word	0xf00109c4
 1013008:	22c4fc41 	.word	0x22c4fc41
 101300c:	46384631 	.word	0x46384631
 1013010:	f00036c4 	.word	0xf00036c4
 1013014:	f8daff1f 	.word	0xf8daff1f
 1013018:	221804b0 	.word	0x221804b0
 101301c:	0160f100 	.word	0x0160f100
 1013020:	f0004638 	.word	0xf0004638
 1013024:	f240ff01 	.word	0xf240ff01
 1013028:	4631627c 	.word	0x4631627c
 101302c:	f2094648 	.word	0xf2094648
 1013030:	f000697c 	.word	0xf000697c
 1013034:	22c0ff1f 	.word	0x22c0ff1f
 1013038:	617cf206 	.word	0x617cf206
 101303c:	f0004648 	.word	0xf0004648
 1013040:	f8daff19 	.word	0xf8daff19
 1013044:	221714b0 	.word	0x221714b0
 1013048:	f0004648 	.word	0xf0004648
 101304c:	f8dafeed 	.word	0xf8dafeed
 1013050:	f00104a4 	.word	0xf00104a4
 1013054:	4682f8c3 	.word	0x4682f8c3
 1013058:	f0012005 	.word	0xf0012005
 101305c:	4681f8ed 	.word	0x4681f8ed
 1013060:	4649462a 	.word	0x4649462a
 1013064:	f0014650 	.word	0xf0014650
 1013068:	462af931 	.word	0x462af931
 101306c:	46484649 	.word	0x46484649
 1013070:	f9e9f001 	.word	0xf9e9f001
 1013074:	a004f8cd 	.word	0xa004f8cd
 1013078:	40b4f641 	.word	0x40b4f641
 101307c:	0a00eb08 	.word	0x0a00eb08
 1013080:	9010f8cd 	.word	0x9010f8cd
 1013084:	a008f8cd 	.word	0xa008f8cd
 1013088:	f0012018 	.word	0xf0012018
 101308c:	f8dffa11 	.word	0xf8dffa11
 1013090:	68060b08 	.word	0x68060b08
 1013094:	f0012018 	.word	0xf0012018
 1013098:	b236fa2d 	.word	0xb236fa2d
 101309c:	bf522e00 	.word	0xbf522e00
 10130a0:	427040f4 	.word	0x427040f4
 10130a4:	20004084 	.word	0x20004084
 10130a8:	f8ad9405 	.word	0xf8ad9405
 10130ac:	a801001c 	.word	0xa801001c
 10130b0:	501af8ad 	.word	0x501af8ad
 10130b4:	b018f8ad 	.word	0xb018f8ad
 10130b8:	fd7af001 	.word	0xfd7af001
 10130bc:	6200f44f 	.word	0x6200f44f
 10130c0:	46484651 	.word	0x46484651
 10130c4:	fec6f000 	.word	0xfec6f000
 10130c8:	4649462a 	.word	0x4649462a
 10130cc:	f0014648 	.word	0xf0014648
 10130d0:	9800f8fd 	.word	0x9800f8fd
 10130d4:	01b4f244 	.word	0x01b4f244
 10130d8:	4401462a 	.word	0x4401462a
 10130dc:	f0014648 	.word	0xf0014648
 10130e0:	b009f9b2 	.word	0xb009f9b2
 10130e4:	8ff0e8bd 	.word	0x8ff0e8bd
 10130e8:	e92d2000 	.word	0xe92d2000
 10130ec:	f8df4ff0 	.word	0xf8df4ff0
 10130f0:	b08b46d0 	.word	0xb08b46d0
 10130f4:	022df884 	.word	0x022df884
 10130f8:	5620f44f 	.word	0x5620f44f
 10130fc:	0472f884 	.word	0x0472f884
 1013100:	6a00f44f 	.word	0x6a00f44f
 1013104:	0461f884 	.word	0x0461f884
 1013108:	f8842001 	.word	0xf8842001
 101310c:	f884047e 	.word	0xf884047e
 1013110:	20000484 	.word	0x20000484
 1013114:	0483f884 	.word	0x0483f884
 1013118:	f8842001 	.word	0xf8842001
 101311c:	f0010486 	.word	0xf0010486
 1013120:	f8c4f88b 	.word	0xf8c4f88b
 1013124:	200404a8 	.word	0x200404a8
 1013128:	f886f001 	.word	0xf886f001
 101312c:	0498f8c4 	.word	0x0498f8c4
 1013130:	f0012003 	.word	0xf0012003
 1013134:	f8c4f881 	.word	0xf8c4f881
 1013138:	200604a0 	.word	0x200604a0
 101313c:	f87cf001 	.word	0xf87cf001
 1013140:	04a4f8c4 	.word	0x04a4f8c4
 1013144:	f0012008 	.word	0xf0012008
 1013148:	f8c4f877 	.word	0xf8c4f877
 101314c:	200204ac 	.word	0x200204ac
 1013150:	f872f001 	.word	0xf872f001
 1013154:	049cf8c4 	.word	0x049cf8c4
 1013158:	f0012000 	.word	0xf0012000
 101315c:	f8c4f876 	.word	0xf8c4f876
 1013160:	20070494 	.word	0x20070494
 1013164:	f868f001 	.word	0xf868f001
 1013168:	04b0f8c4 	.word	0x04b0f8c4
 101316c:	f83df002 	.word	0xf83df002
 1013170:	0a28f8df 	.word	0x0a28f8df
 1013174:	f870f002 	.word	0xf870f002
 1013178:	0a24f8df 	.word	0x0a24f8df
 101317c:	f86ff002 	.word	0xf86ff002
 1013180:	0a20f8df 	.word	0x0a20f8df
 1013184:	f86ef002 	.word	0xf86ef002
 1013188:	0a1cf8df 	.word	0x0a1cf8df
 101318c:	f86df002 	.word	0xf86df002
 1013190:	0a18f8df 	.word	0x0a18f8df
 1013194:	f86bf002 	.word	0xf86bf002
 1013198:	0a14f8df 	.word	0x0a14f8df
 101319c:	f869f002 	.word	0xf869f002
 10131a0:	0a10f8df 	.word	0x0a10f8df
 10131a4:	f868f002 	.word	0xf868f002
 10131a8:	fc4ef001 	.word	0xfc4ef001
 10131ac:	f44f2000 	.word	0xf44f2000
 10131b0:	f88d6100 	.word	0xf88d6100
 10131b4:	f8d40026 	.word	0xf8d40026
 10131b8:	f8ad04a4 	.word	0xf8ad04a4
 10131bc:	44086024 	.word	0x44086024
 10131c0:	a8089008 	.word	0xa8089008
 10131c4:	f89af002 	.word	0xf89af002
 10131c8:	04a4f8d4 	.word	0x04a4f8d4
 10131cc:	ffe8f000 	.word	0xffe8f000
 10131d0:	22064683 	.word	0x22064683
 10131d4:	7100f44f 	.word	0x7100f44f
 10131d8:	f80ff001 	.word	0xf80ff001
 10131dc:	f0012018 	.word	0xf0012018
 10131e0:	4652f82b 	.word	0x4652f82b
 10131e4:	f0004659 	.word	0xf0004659
 10131e8:	2002fe35 	.word	0x2002fe35
 10131ec:	6024f8ad 	.word	0x6024f8ad
 10131f0:	0026f88d 	.word	0x0026f88d
 10131f4:	04a4f8d4 	.word	0x04a4f8d4
 10131f8:	90084450 	.word	0x90084450
 10131fc:	f002a808 	.word	0xf002a808
 1013200:	f8d4f87d 	.word	0xf8d4f87d
 1013204:	f00004a4 	.word	0xf00004a4
 1013208:	4606ffcb 	.word	0x4606ffcb
 101320c:	f44f2206 	.word	0xf44f2206
 1013210:	f0007100 	.word	0xf0007100
 1013214:	2019fff2 	.word	0x2019fff2
 1013218:	f80ef001 	.word	0xf80ef001
 101321c:	46314652 	.word	0x46314652
 1013220:	fe18f000 	.word	0xfe18f000
 1013224:	f0012018 	.word	0xf0012018
 1013228:	4606f807 	.word	0x4606f807
 101322c:	04a4f8d4 	.word	0x04a4f8d4
 1013230:	eb002100 	.word	0xeb002100
 1013234:	f8d40b0a 	.word	0xf8d40b0a
 1013238:	f00104b0 	.word	0xf00104b0
 101323c:	22c4fb27 	.word	0x22c4fb27
 1013240:	46584631 	.word	0x46584631
 1013244:	f00036c4 	.word	0xf00036c4
 1013248:	f8d4fe05 	.word	0xf8d4fe05
 101324c:	221804b0 	.word	0x221804b0
 1013250:	0160f100 	.word	0x0160f100
 1013254:	f0004658 	.word	0xf0004658
 1013258:	f10bfde7 	.word	0xf10bfde7
 101325c:	f2400bc4 	.word	0xf2400bc4
 1013260:	4631627c 	.word	0x4631627c
 1013264:	f0004658 	.word	0xf0004658
 1013268:	f20bfe05 	.word	0xf20bfe05
 101326c:	22c06b7c 	.word	0x22c06b7c
 1013270:	617cf206 	.word	0x617cf206
 1013274:	f0004658 	.word	0xf0004658
 1013278:	f8d4fdfd 	.word	0xf8d4fdfd
 101327c:	221714b0 	.word	0x221714b0
 1013280:	f0004658 	.word	0xf0004658
 1013284:	f8d4fdd1 	.word	0xf8d4fdd1
 1013288:	f00004a4 	.word	0xf00004a4
 101328c:	4606ffa7 	.word	0x4606ffa7
 1013290:	f0002005 	.word	0xf0002005
 1013294:	4605ffd1 	.word	0x4605ffd1
 1013298:	7200f44f 	.word	0x7200f44f
 101329c:	46304629 	.word	0x46304629
 10132a0:	f814f001 	.word	0xf814f001
 10132a4:	7200f44f 	.word	0x7200f44f
 10132a8:	46284629 	.word	0x46284629
 10132ac:	5b70f643 	.word	0x5b70f643
 10132b0:	f8c9f001 	.word	0xf8c9f001
 10132b4:	40b4f204 	.word	0x40b4f204
 10132b8:	90029601 	.word	0x90029601
 10132bc:	95042018 	.word	0x95042018
 10132c0:	68d4f8df 	.word	0x68d4f8df
 10132c4:	f8f4f001 	.word	0xf8f4f001
 10132c8:	8000f8d6 	.word	0x8000f8d6
 10132cc:	f0012018 	.word	0xf0012018
 10132d0:	f64ff911 	.word	0xf64ff911
 10132d4:	fa0f79ff 	.word	0xfa0f79ff
 10132d8:	f1b8f888 	.word	0xf1b8f888
 10132dc:	f8ad0f00 	.word	0xf8ad0f00
 10132e0:	bf529018 	.word	0xbf529018
 10132e4:	f008fa2b 	.word	0xf008fa2b
 10132e8:	0000f1c8 	.word	0x0000f1c8
 10132ec:	f000fa0b 	.word	0xf000fa0b
 10132f0:	20009005 	.word	0x20009005
 10132f4:	7800f44f 	.word	0x7800f44f
 10132f8:	001cf8ad 	.word	0x001cf8ad
 10132fc:	801af8ad 	.word	0x801af8ad
 1013300:	f001a801 	.word	0xf001a801
 1013304:	4652fc55 	.word	0x4652fc55
 1013308:	41b4f204 	.word	0x41b4f204
 101330c:	f0004628 	.word	0xf0004628
 1013310:	4642fda1 	.word	0x4642fda1
 1013314:	46284629 	.word	0x46284629
 1013318:	ffd8f000 	.word	0xffd8f000
 101331c:	40b4f243 	.word	0x40b4f243
 1013320:	46421821 	.word	0x46421821
 1013324:	f0014628 	.word	0xf0014628
 1013328:	2019f88e 	.word	0x2019f88e
 101332c:	ff84f000 	.word	0xff84f000
 1013330:	f8d44607 	.word	0xf8d44607
 1013334:	210004a4 	.word	0x210004a4
 1013338:	050aeb00 	.word	0x050aeb00
 101333c:	04b0f8d4 	.word	0x04b0f8d4
 1013340:	faa4f001 	.word	0xfaa4f001
 1013344:	463922c4 	.word	0x463922c4
 1013348:	37c44628 	.word	0x37c44628
 101334c:	fd82f000 	.word	0xfd82f000
 1013350:	04b0f8d4 	.word	0x04b0f8d4
 1013354:	f1002218 	.word	0xf1002218
 1013358:	46280160 	.word	0x46280160
 101335c:	fd64f000 	.word	0xfd64f000
 1013360:	f24035c4 	.word	0xf24035c4
 1013364:	4639627c 	.word	0x4639627c
 1013368:	f0004628 	.word	0xf0004628
 101336c:	f205fd83 	.word	0xf205fd83
 1013370:	22c0657c 	.word	0x22c0657c
 1013374:	617cf207 	.word	0x617cf207
 1013378:	f0004628 	.word	0xf0004628
 101337c:	f8d4fd7b 	.word	0xf8d4fd7b
 1013380:	221714b0 	.word	0x221714b0
 1013384:	f0004628 	.word	0xf0004628
 1013388:	f8d4fd4f 	.word	0xf8d4fd4f
 101338c:	f00004a4 	.word	0xf00004a4
 1013390:	4607ff25 	.word	0x4607ff25
 1013394:	f0002005 	.word	0xf0002005
 1013398:	4605ff4f 	.word	0x4605ff4f
 101339c:	46294642 	.word	0x46294642
 10133a0:	f0004638 	.word	0xf0004638
 10133a4:	4642ff93 	.word	0x4642ff93
 10133a8:	46284629 	.word	0x46284629
 10133ac:	f84bf001 	.word	0xf84bf001
 10133b0:	40b4f641 	.word	0x40b4f641
 10133b4:	44209701 	.word	0x44209701
 10133b8:	90029000 	.word	0x90029000
 10133bc:	95042018 	.word	0x95042018
 10133c0:	f876f001 	.word	0xf876f001
 10133c4:	20186837 	.word	0x20186837
 10133c8:	f894f001 	.word	0xf894f001
 10133cc:	801af8ad 	.word	0x801af8ad
 10133d0:	2f00b23f 	.word	0x2f00b23f
 10133d4:	9018f8ad 	.word	0x9018f8ad
 10133d8:	fa2bbf52 	.word	0xfa2bbf52
 10133dc:	4278f007 	.word	0x4278f007
 10133e0:	f000fa0b 	.word	0xf000fa0b
 10133e4:	20009005 	.word	0x20009005
 10133e8:	001cf8ad 	.word	0x001cf8ad
 10133ec:	f001a801 	.word	0xf001a801
 10133f0:	9900fbdf 	.word	0x9900fbdf
 10133f4:	46284652 	.word	0x46284652
 10133f8:	fd2cf000 	.word	0xfd2cf000
 10133fc:	46294642 	.word	0x46294642
 1013400:	f0004628 	.word	0xf0004628
 1013404:	f244ff63 	.word	0xf244ff63
 1013408:	182100b4 	.word	0x182100b4
 101340c:	46284642 	.word	0x46284642
 1013410:	f819f001 	.word	0xf819f001
 1013414:	f0002018 	.word	0xf0002018
 1013418:	4607ff0f 	.word	0x4607ff0f
 101341c:	04a4f8d4 	.word	0x04a4f8d4
 1013420:	eb002101 	.word	0xeb002101
 1013424:	f8d4050a 	.word	0xf8d4050a
 1013428:	f00104b0 	.word	0xf00104b0
 101342c:	22c4fa2f 	.word	0x22c4fa2f
 1013430:	46284639 	.word	0x46284639
 1013434:	f00037c4 	.word	0xf00037c4
 1013438:	f8d4fd0d 	.word	0xf8d4fd0d
 101343c:	221804b0 	.word	0x221804b0
 1013440:	0160f100 	.word	0x0160f100
 1013444:	f0004628 	.word	0xf0004628
 1013448:	35c4fcef 	.word	0x35c4fcef
 101344c:	627cf240 	.word	0x627cf240
 1013450:	46284639 	.word	0x46284639
 1013454:	fd0ef000 	.word	0xfd0ef000
 1013458:	657cf205 	.word	0x657cf205
 101345c:	f20722c0 	.word	0xf20722c0
 1013460:	4628617c 	.word	0x4628617c
 1013464:	fd06f000 	.word	0xfd06f000
 1013468:	14b0f8d4 	.word	0x14b0f8d4
 101346c:	46282217 	.word	0x46282217
 1013470:	fcdaf000 	.word	0xfcdaf000
 1013474:	04a4f8d4 	.word	0x04a4f8d4
 1013478:	feb0f000 	.word	0xfeb0f000
 101347c:	20054607 	.word	0x20054607
 1013480:	fedaf000 	.word	0xfedaf000
 1013484:	46424605 	.word	0x46424605
 1013488:	46384629 	.word	0x46384629
 101348c:	ff1ef000 	.word	0xff1ef000
 1013490:	46294642 	.word	0x46294642
 1013494:	f0004628 	.word	0xf0004628
 1013498:	9701ffd6 	.word	0x9701ffd6
 101349c:	40b4f604 	.word	0x40b4f604
 10134a0:	20189002 	.word	0x20189002
 10134a4:	f0019504 	.word	0xf0019504
 10134a8:	6837f803 	.word	0x6837f803
 10134ac:	f0012018 	.word	0xf0012018
 10134b0:	f8adf821 	.word	0xf8adf821
 10134b4:	b23f801a 	.word	0xb23f801a
 10134b8:	f8ad2f00 	.word	0xf8ad2f00
 10134bc:	bf529018 	.word	0xbf529018
 10134c0:	f007fa2b 	.word	0xf007fa2b
 10134c4:	fa0b4278 	.word	0xfa0b4278
 10134c8:	9005f000 	.word	0x9005f000
 10134cc:	f8ad2000 	.word	0xf8ad2000
 10134d0:	a801001c 	.word	0xa801001c
 10134d4:	fb6cf001 	.word	0xfb6cf001
 10134d8:	f6044652 	.word	0xf6044652
 10134dc:	462841b4 	.word	0x462841b4
 10134e0:	fcb8f000 	.word	0xfcb8f000
 10134e4:	46294642 	.word	0x46294642
 10134e8:	f0004628 	.word	0xf0004628
 10134ec:	f643feef 	.word	0xf643feef
 10134f0:	182100b4 	.word	0x182100b4
 10134f4:	46284642 	.word	0x46284642
 10134f8:	ffa5f000 	.word	0xffa5f000
 10134fc:	f0002019 	.word	0xf0002019
 1013500:	4607fe9b 	.word	0x4607fe9b
 1013504:	04a4f8d4 	.word	0x04a4f8d4
 1013508:	eb002101 	.word	0xeb002101
 101350c:	f8d4050a 	.word	0xf8d4050a
 1013510:	f00104b0 	.word	0xf00104b0
 1013514:	22c4f9bb 	.word	0x22c4f9bb
 1013518:	46284639 	.word	0x46284639
 101351c:	f00037c4 	.word	0xf00037c4
 1013520:	f8d4fc99 	.word	0xf8d4fc99
 1013524:	221804b0 	.word	0x221804b0
 1013528:	0160f100 	.word	0x0160f100
 101352c:	f0004628 	.word	0xf0004628
 1013530:	35c4fc7b 	.word	0x35c4fc7b
 1013534:	627cf240 	.word	0x627cf240
 1013538:	46284639 	.word	0x46284639
 101353c:	fc9af000 	.word	0xfc9af000
 1013540:	657cf205 	.word	0x657cf205
 1013544:	f20722c0 	.word	0xf20722c0
 1013548:	4628617c 	.word	0x4628617c
 101354c:	fc92f000 	.word	0xfc92f000
 1013550:	14b0f8d4 	.word	0x14b0f8d4
 1013554:	46282217 	.word	0x46282217
 1013558:	fc66f000 	.word	0xfc66f000
 101355c:	04a4f8d4 	.word	0x04a4f8d4
 1013560:	fe3cf000 	.word	0xfe3cf000
 1013564:	20054607 	.word	0x20054607
 1013568:	fe66f000 	.word	0xfe66f000
 101356c:	46424605 	.word	0x46424605
 1013570:	46384629 	.word	0x46384629
 1013574:	feaaf000 	.word	0xfeaaf000
 1013578:	46294642 	.word	0x46294642
 101357c:	f0004628 	.word	0xf0004628
 1013580:	f242ff62 	.word	0xf242ff62
 1013584:	970140b4 	.word	0x970140b4
 1013588:	90004420 	.word	0x90004420
 101358c:	20189002 	.word	0x20189002
 1013590:	f0009504 	.word	0xf0009504
 1013594:	6837ff8d 	.word	0x6837ff8d
 1013598:	f0002018 	.word	0xf0002018
 101359c:	f8adffab 	.word	0xf8adffab
 10135a0:	b23f801a 	.word	0xb23f801a
 10135a4:	f8ad2f00 	.word	0xf8ad2f00
 10135a8:	bf529018 	.word	0xbf529018
 10135ac:	f007fa2b 	.word	0xf007fa2b
 10135b0:	fa0b4278 	.word	0xfa0b4278
 10135b4:	9005f000 	.word	0x9005f000
 10135b8:	f8ad2000 	.word	0xf8ad2000
 10135bc:	a801001c 	.word	0xa801001c
 10135c0:	faf6f001 	.word	0xfaf6f001
 10135c4:	46529900 	.word	0x46529900
 10135c8:	f0004628 	.word	0xf0004628
 10135cc:	4642fc43 	.word	0x4642fc43
 10135d0:	46284629 	.word	0x46284629
 10135d4:	fe7af000 	.word	0xfe7af000
 10135d8:	40b4f244 	.word	0x40b4f244
 10135dc:	46421821 	.word	0x46421821
 10135e0:	f0004628 	.word	0xf0004628
 10135e4:	2018ff30 	.word	0x2018ff30
 10135e8:	fe26f000 	.word	0xfe26f000
 10135ec:	f8d44607 	.word	0xf8d44607
 10135f0:	210204a4 	.word	0x210204a4
 10135f4:	050aeb00 	.word	0x050aeb00
 10135f8:	04b0f8d4 	.word	0x04b0f8d4
 10135fc:	f946f001 	.word	0xf946f001
 1013600:	463922c4 	.word	0x463922c4
 1013604:	37c44628 	.word	0x37c44628
 1013608:	fc24f000 	.word	0xfc24f000
 101360c:	04b0f8d4 	.word	0x04b0f8d4
 1013610:	f1002218 	.word	0xf1002218
 1013614:	46280160 	.word	0x46280160
 1013618:	fc06f000 	.word	0xfc06f000
 101361c:	f24035c4 	.word	0xf24035c4
 1013620:	4639627c 	.word	0x4639627c
 1013624:	f0004628 	.word	0xf0004628
 1013628:	f205fc25 	.word	0xf205fc25
 101362c:	22c0657c 	.word	0x22c0657c
 1013630:	617cf207 	.word	0x617cf207
 1013634:	f0004628 	.word	0xf0004628
 1013638:	f8d4fc1d 	.word	0xf8d4fc1d
 101363c:	221714b0 	.word	0x221714b0
 1013640:	f0004628 	.word	0xf0004628
 1013644:	f8d4fbf1 	.word	0xf8d4fbf1
 1013648:	f00004a4 	.word	0xf00004a4
 101364c:	4607fdc7 	.word	0x4607fdc7
 1013650:	f0002005 	.word	0xf0002005
 1013654:	4605fdf1 	.word	0x4605fdf1
 1013658:	46294642 	.word	0x46294642
 101365c:	f0004638 	.word	0xf0004638
 1013660:	4642fe35 	.word	0x4642fe35
 1013664:	46284629 	.word	0x46284629
 1013668:	feedf000 	.word	0xfeedf000
 101366c:	40b4f241 	.word	0x40b4f241
 1013670:	44209701 	.word	0x44209701
 1013674:	90029000 	.word	0x90029000
 1013678:	95042018 	.word	0x95042018
 101367c:	ff18f000 	.word	0xff18f000
 1013680:	20186837 	.word	0x20186837
 1013684:	ff36f000 	.word	0xff36f000
 1013688:	801af8ad 	.word	0x801af8ad
 101368c:	2f00b23f 	.word	0x2f00b23f
 1013690:	9018f8ad 	.word	0x9018f8ad
 1013694:	fa2bbf52 	.word	0xfa2bbf52
 1013698:	4278f007 	.word	0x4278f007
 101369c:	f000fa0b 	.word	0xf000fa0b
 10136a0:	20009005 	.word	0x20009005
 10136a4:	001cf8ad 	.word	0x001cf8ad
 10136a8:	f001a801 	.word	0xf001a801
 10136ac:	9900fa81 	.word	0x9900fa81
 10136b0:	46284652 	.word	0x46284652
 10136b4:	fbcef000 	.word	0xfbcef000
 10136b8:	46294642 	.word	0x46294642
 10136bc:	f0004628 	.word	0xf0004628
 10136c0:	f643fe05 	.word	0xf643fe05
 10136c4:	182140b4 	.word	0x182140b4
 10136c8:	46284642 	.word	0x46284642
 10136cc:	febbf000 	.word	0xfebbf000
 10136d0:	f0002019 	.word	0xf0002019
 10136d4:	4607fdb1 	.word	0x4607fdb1
 10136d8:	04a4f8d4 	.word	0x04a4f8d4
 10136dc:	eb002102 	.word	0xeb002102
 10136e0:	f8d4050a 	.word	0xf8d4050a
 10136e4:	f00104b0 	.word	0xf00104b0
 10136e8:	22c4f8d1 	.word	0x22c4f8d1
 10136ec:	46284639 	.word	0x46284639
 10136f0:	fbb0f000 	.word	0xfbb0f000
 10136f4:	04b0f8d4 	.word	0x04b0f8d4
 10136f8:	f1002218 	.word	0xf1002218
 10136fc:	46280160 	.word	0x46280160
 1013700:	fb92f000 	.word	0xfb92f000
 1013704:	37c435c4 	.word	0x37c435c4
 1013708:	627cf240 	.word	0x627cf240
 101370c:	46284639 	.word	0x46284639
 1013710:	fbb0f000 	.word	0xfbb0f000
 1013714:	657cf205 	.word	0x657cf205
 1013718:	f20722c0 	.word	0xf20722c0
 101371c:	4628617c 	.word	0x4628617c
 1013720:	fba8f000 	.word	0xfba8f000
 1013724:	14b0f8d4 	.word	0x14b0f8d4
 1013728:	46282217 	.word	0x46282217
 101372c:	fb7cf000 	.word	0xfb7cf000
 1013730:	04a4f8d4 	.word	0x04a4f8d4
 1013734:	fd52f000 	.word	0xfd52f000
 1013738:	20054607 	.word	0x20054607
 101373c:	fd7cf000 	.word	0xfd7cf000
 1013740:	46424605 	.word	0x46424605
 1013744:	46384629 	.word	0x46384629
 1013748:	fdc0f000 	.word	0xfdc0f000
 101374c:	46294642 	.word	0x46294642
 1013750:	f0004628 	.word	0xf0004628
 1013754:	9701fe78 	.word	0x9701fe78
 1013758:	40b4f642 	.word	0x40b4f642
 101375c:	20181827 	.word	0x20181827
 1013760:	95049702 	.word	0x95049702
 1013764:	fea4f000 	.word	0xfea4f000
 1013768:	20186836 	.word	0x20186836
 101376c:	fec2f000 	.word	0xfec2f000
 1013770:	801af8ad 	.word	0x801af8ad
 1013774:	2e00b236 	.word	0x2e00b236
 1013778:	9018f8ad 	.word	0x9018f8ad
 101377c:	fa2bbf52 	.word	0xfa2bbf52
 1013780:	4270fb06 	.word	0x4270fb06
 1013784:	fb00fa0b 	.word	0xfb00fa0b
 1013788:	f8cd2000 	.word	0xf8cd2000
 101378c:	f8adb014 	.word	0xf8adb014
 1013790:	a801001c 	.word	0xa801001c
 1013794:	fa0cf001 	.word	0xfa0cf001
 1013798:	46394652 	.word	0x46394652
 101379c:	f0004628 	.word	0xf0004628
 10137a0:	4642fb59 	.word	0x4642fb59
 10137a4:	46284629 	.word	0x46284629
 10137a8:	fd90f000 	.word	0xfd90f000
 10137ac:	00b4f644 	.word	0x00b4f644
 10137b0:	46421821 	.word	0x46421821
 10137b4:	f0004628 	.word	0xf0004628
 10137b8:	b00bfe46 	.word	0xb00bfe46
 10137bc:	8ff0e8bd 	.word	0x8ff0e8bd
 10137c0:	2000dd7c 	.word	0x2000dd7c
 10137c4:	4ff0e92d 	.word	0x4ff0e92d
 10137c8:	4606b083 	.word	0x4606b083
 10137cc:	b00bf896 	.word	0xb00bf896
 10137d0:	93e4f8df 	.word	0x93e4f8df
 10137d4:	0000f8d9 	.word	0x0000f8d9
 10137d8:	f0100b80 	.word	0xf0100b80
 10137dc:	d0070a01 	.word	0xd0070a01
 10137e0:	4080f44f 	.word	0x4080f44f
 10137e4:	0080f8c9 	.word	0x0080f8c9
 10137e8:	8f4ff3bf 	.word	0x8f4ff3bf
 10137ec:	8f6ff3bf 	.word	0x8f6ff3bf
 10137f0:	700df44f 	.word	0x700df44f
 10137f4:	0f02f1bb 	.word	0x0f02f1bb
 10137f8:	f00bfb10 	.word	0xf00bfb10
 10137fc:	83bcf8df 	.word	0x83bcf8df
 1013800:	db0e4440 	.word	0xdb0e4440
 1013804:	022df890 	.word	0x022df890
 1013808:	f44fb938 	.word	0xf44fb938
 101380c:	eb08608d 	.word	0xeb08608d
 1013810:	20080500 	.word	0x20080500
 1013814:	0471f888 	.word	0x0471f888
 1013818:	2000e08a 	.word	0x2000e08a
 101381c:	0485f888 	.word	0x0485f888
 1013820:	7ab4e0b7 	.word	0x7ab4e0b7
 1013824:	014beb0b 	.word	0x014beb0b
 1013828:	eb089002 	.word	0xeb089002
 101382c:	f8980181 	.word	0xf8980181
 1013830:	f44f0486 	.word	0xf44f0486
 1013834:	188d628d 	.word	0x188d628d
 1013838:	200bb908 	.word	0x200bb908
 101383c:	07a0e077 	.word	0x07a0e077
 1013840:	2000d509 	.word	0x2000d509
 1013844:	0485f888 	.word	0x0485f888
 1013848:	fa002001 	.word	0xfa002001
 101384c:	b2c0f00b 	.word	0xb2c0f00b
 1013850:	f92af000 	.word	0xf92af000
 1013854:	f001e09d 	.word	0xf001e09d
 1013858:	4558fcaa 	.word	0x4558fcaa
 101385c:	2004bf08 	.word	0x2004bf08
 1013860:	08a0d065 	.word	0x08a0d065
 1013864:	0001f010 	.word	0x0001f010
 1013868:	0004f88d 	.word	0x0004f88d
 101386c:	7a77d126 	.word	0x7a77d126
 1013870:	fa37f000 	.word	0xfa37f000
 1013874:	d1152f03 	.word	0xd1152f03
 1013878:	da172802 	.word	0xda172802
 101387c:	280079f0 	.word	0x280079f0
 1013880:	2801bf18 	.word	0x2801bf18
 1013884:	2802d014 	.word	0x2802d014
 1013888:	2804bf18 	.word	0x2804bf18
 101388c:	2805d010 	.word	0x2805d010
 1013890:	2806bf18 	.word	0x2806bf18
 1013894:	b11fd00c 	.word	0xb11fd00c
 1013898:	bf18280c 	.word	0xbf18280c
 101389c:	d007280d 	.word	0xd007280d
 10138a0:	e0442006 	.word	0xe0442006
 10138a4:	bf182f00 	.word	0xbf182f00
 10138a8:	d0e72f02 	.word	0xd0e72f02
 10138ac:	e03e2009 	.word	0xe03e2009
 10138b0:	f7fe4630 	.word	0xf7fe4630
 10138b4:	b908fd46 	.word	0xb908fd46
 10138b8:	e0382002 	.word	0xe0382002
 10138bc:	f00179b7 	.word	0xf00179b7
 10138c0:	4287fd50 	.word	0x4287fd50
 10138c4:	f898d304 	.word	0xf898d304
 10138c8:	20011484 	.word	0x20011484
 10138cc:	fffef000 	.word	0xfffef000
 10138d0:	280279f0 	.word	0x280279f0
 10138d4:	f001d11e 	.word	0xf001d11e
 10138d8:	ee00f8ae 	.word	0xee00f8ae
 10138dc:	eebb0a10 	.word	0xeebb0a10
 10138e0:	eddf0a44 	.word	0xeddf0a44
 10138e4:	eeb40aac 	.word	0xeeb40aac
 10138e8:	eef10a60 	.word	0xeef10a60
 10138ec:	db11fa10 	.word	0xdb11fa10
 10138f0:	f0012001 	.word	0xf0012001
 10138f4:	eef3fd45 	.word	0xeef3fd45
 10138f8:	ee200a04 	.word	0xee200a04
 10138fc:	f0010a20 	.word	0xf0010a20
 1013900:	eebdfdf3 	.word	0xeebdfdf3
 1013904:	ee100ac0 	.word	0xee100ac0
 1013908:	1cc00a10 	.word	0x1cc00a10
 101390c:	4297b2c2 	.word	0x4297b2c2
 1013910:	4617bf38 	.word	0x4617bf38
 1013914:	94007a30 	.word	0x94007a30
 1013918:	465b7a72 	.word	0x465b7a72
 101391c:	41891e41 	.word	0x41891e41
 1013920:	43c96830 	.word	0x43c96830
 1013924:	f0010fc9 	.word	0xf0010fc9
 1013928:	b998f979 	.word	0xb998f979
 101392c:	72682007 	.word	0x72682007
 1013930:	f8882000 	.word	0xf8882000
 1013934:	72e80485 	.word	0x72e80485
 1013938:	d50407e0 	.word	0xd50407e0
 101393c:	680048a0 	.word	0x680048a0
 1013940:	18086831 	.word	0x18086831
 1013944:	6830e000 	.word	0x6830e000
 1013948:	f8d86068 	.word	0xf8d86068
 101394c:	4628148c 	.word	0x4628148c
 1013950:	e01e4788 	.word	0xe01e4788
 1013954:	0004f89d 	.word	0x0004f89d
 1013958:	f0809902 	.word	0xf0809902
 101395c:	f8880001 	.word	0xf8880001
 1013960:	f89d0485 	.word	0xf89d0485
 1013964:	f8810004 	.word	0xf8810004
 1013968:	08e00231 	.word	0x08e00231
 101396c:	f0009902 	.word	0xf0009902
 1013970:	2fff0001 	.word	0x2fff0001
 1013974:	0232f881 	.word	0x0232f881
 1013978:	2716bf08 	.word	0x2716bf08
 101397c:	2f16d002 	.word	0x2f16d002
 1013980:	2715bfa8 	.word	0x2715bfa8
 1013984:	f8809802 	.word	0xf8809802
 1013988:	9902722e 	.word	0x9902722e
 101398c:	f8812001 	.word	0xf8812001
 1013990:	f1ba022d 	.word	0xf1ba022d
 1013994:	bf1c0f00 	.word	0xbf1c0f00
 1013998:	4080f44f 	.word	0x4080f44f
 101399c:	0000f8c9 	.word	0x0000f8c9
 10139a0:	e8bdb003 	.word	0xe8bdb003
 10139a4:	46138ff0 	.word	0x46138ff0
 10139a8:	4c84b410 	.word	0x4c84b410
 10139ac:	f894b081 	.word	0xf894b081
 10139b0:	b15a2485 	.word	0xb15a2485
 10139b4:	4601460a 	.word	0x4601460a
 10139b8:	700df44f 	.word	0x700df44f
 10139bc:	fb10b001 	.word	0xfb10b001
 10139c0:	4420f003 	.word	0x4420f003
 10139c4:	bc101dc0 	.word	0xbc101dc0
 10139c8:	ba44f000 	.word	0xba44f000
 10139cc:	bc10b001 	.word	0xbc10b001
 10139d0:	497a4770 	.word	0x497a4770
 10139d4:	048cf8c1 	.word	0x048cf8c1
 10139d8:	49784770 	.word	0x49784770
 10139dc:	0490f8c1 	.word	0x0490f8c1
 10139e0:	00004770 	.word	0x00004770
 10139e4:	4ff0e92d 	.word	0x4ff0e92d
 10139e8:	2400b081 	.word	0x2400b081
 10139ec:	f44f2500 	.word	0xf44f2500
 10139f0:	4f714b80 	.word	0x4f714b80
 10139f4:	81c4f8df 	.word	0x81c4f8df
 10139f8:	700df44f 	.word	0x700df44f
 10139fc:	f005fb10 	.word	0xf005fb10
 1013a00:	f8904440 	.word	0xf8904440
 1013a04:	bb40022d 	.word	0xbb40022d
 1013a08:	0b806838 	.word	0x0b806838
 1013a0c:	0901f010 	.word	0x0901f010
 1013a10:	f8c7d005 	.word	0xf8c7d005
 1013a14:	f3bfb080 	.word	0xf3bfb080
 1013a18:	f3bf8f4f 	.word	0xf3bf8f4f
 1013a1c:	200e8f6f 	.word	0x200e8f6f
 1013a20:	fd89f000 	.word	0xfd89f000
 1013a24:	b9104682 	.word	0xb9104682
 1013a28:	f000200e 	.word	0xf000200e
 1013a2c:	4865fd41 	.word	0x4865fd41
 1013a30:	7180f04f 	.word	0x7180f04f
 1013a34:	40a96800 	.word	0x40a96800
 1013a38:	1e464008 	.word	0x1e464008
 1013a3c:	43f641b6 	.word	0x43f641b6
 1013a40:	f1ba0ff6 	.word	0xf1ba0ff6
 1013a44:	bf040f00 	.word	0xbf040f00
 1013a48:	f000200e 	.word	0xf000200e
 1013a4c:	f1b9fd53 	.word	0xf1b9fd53
 1013a50:	bf180f00 	.word	0xbf180f00
 1013a54:	b000f8c7 	.word	0xb000f8c7
 1013a58:	2401b106 	.word	0x2401b106
 1013a5c:	2d021c6d 	.word	0x2d021c6d
 1013a60:	0020dbca 	.word	0x0020dbca
 1013a64:	f001d104 	.word	0xf001d104
 1013a68:	28fffba2 	.word	0x28fffba2
 1013a6c:	2401bf18 	.word	0x2401bf18
 1013a70:	b0014620 	.word	0xb0014620
 1013a74:	8ff0e8bd 	.word	0x8ff0e8bd
 1013a78:	bfbc2803 	.word	0xbfbc2803
 1013a7c:	f881494f 	.word	0xf881494f
 1013a80:	47700484 	.word	0x47700484
 1013a84:	f890484d 	.word	0xf890484d
 1013a88:	47700484 	.word	0x47700484
 1013a8c:	b081b500 	.word	0xb081b500
 1013a90:	ffd4f000 	.word	0xffd4f000
 1013a94:	2101b001 	.word	0x2101b001
 1013a98:	eb04f85d 	.word	0xeb04f85d
 1013a9c:	bf16f000 	.word	0xbf16f000
 1013aa0:	f8814946 	.word	0xf8814946
 1013aa4:	47700486 	.word	0x47700486
 1013aa8:	4ff1e92d 	.word	0x4ff1e92d
 1013aac:	4d462400 	.word	0x4d462400
 1013ab0:	4b80f44f 	.word	0x4b80f44f
 1013ab4:	7100f8df 	.word	0x7100f8df
 1013ab8:	0000f89d 	.word	0x0000f89d
 1013abc:	40a12101 	.word	0x40a12101
 1013ac0:	d0604208 	.word	0xd0604208
 1013ac4:	710df44f 	.word	0x710df44f
 1013ac8:	fb11483c 	.word	0xfb11483c
 1013acc:	eb00f104 	.word	0xeb00f104
 1013ad0:	f8980801 	.word	0xf8980801
 1013ad4:	bb58022d 	.word	0xbb58022d
 1013ad8:	0b806838 	.word	0x0b806838
 1013adc:	0901f010 	.word	0x0901f010
 1013ae0:	f8c7d005 	.word	0xf8c7d005
 1013ae4:	f3bfb080 	.word	0xf3bfb080
 1013ae8:	f3bf8f4f 	.word	0xf3bf8f4f
 1013aec:	200e8f6f 	.word	0x200e8f6f
 1013af0:	fd21f000 	.word	0xfd21f000
 1013af4:	b9104682 	.word	0xb9104682
 1013af8:	f000200e 	.word	0xf000200e
 1013afc:	6868fcd9 	.word	0x6868fcd9
 1013b00:	7180f04f 	.word	0x7180f04f
 1013b04:	400840a1 	.word	0x400840a1
 1013b08:	41b61e46 	.word	0x41b61e46
 1013b0c:	0ff643f6 	.word	0x0ff643f6
 1013b10:	0f00f1ba 	.word	0x0f00f1ba
 1013b14:	200ebf04 	.word	0x200ebf04
 1013b18:	fcecf000 	.word	0xfcecf000
 1013b1c:	0f00f1b9 	.word	0x0f00f1b9
 1013b20:	f8c7bf18 	.word	0xf8c7bf18
 1013b24:	b91eb000 	.word	0xb91eb000
 1013b28:	fb41f001 	.word	0xfb41f001
 1013b2c:	d12a42a0 	.word	0xd12a42a0
 1013b30:	022df898 	.word	0x022df898
 1013b34:	db022807 	.word	0xdb022807
 1013b38:	0232f898 	.word	0x0232f898
 1013b3c:	6838b318 	.word	0x6838b318
 1013b40:	f0100b80 	.word	0xf0100b80
 1013b44:	d0050801 	.word	0xd0050801
 1013b48:	b080f8c7 	.word	0xb080f8c7
 1013b4c:	8f4ff3bf 	.word	0x8f4ff3bf
 1013b50:	8f6ff3bf 	.word	0x8f6ff3bf
 1013b54:	f000200e 	.word	0xf000200e
 1013b58:	4681fcee 	.word	0x4681fcee
 1013b5c:	200eb910 	.word	0x200eb910
 1013b60:	fca6f000 	.word	0xfca6f000
 1013b64:	f44f6828 	.word	0xf44f6828
 1013b68:	40a17180 	.word	0x40a17180
 1013b6c:	f1b94308 	.word	0xf1b94308
 1013b70:	60280f00 	.word	0x60280f00
 1013b74:	200ebf04 	.word	0x200ebf04
 1013b78:	fcbcf000 	.word	0xfcbcf000
 1013b7c:	0f00f1b8 	.word	0x0f00f1b8
 1013b80:	f8c7bf18 	.word	0xf8c7bf18
 1013b84:	1c64b000 	.word	0x1c64b000
 1013b88:	db952c02 	.word	0xdb952c02
 1013b8c:	e8bdb001 	.word	0xe8bdb001
 1013b90:	00008ff0 	.word	0x00008ff0
 1013b94:	3f353f7d 	.word	0x3f353f7d
 1013b98:	e0100048 	.word	0xe0100048
 1013b9c:	00000a49 	.word	0x00000a49
 1013ba0:	00000b01 	.word	0x00000b01
 1013ba4:	00001457 	.word	0x00001457
 1013ba8:	000014ab 	.word	0x000014ab
 1013bac:	000014af 	.word	0x000014af
 1013bb0:	00000515 	.word	0x00000515
 1013bb4:	0000092d 	.word	0x0000092d
 1013bb8:	e000e100 	.word	0xe000e100
 1013bbc:	2000dd7c 	.word	0x2000dd7c
 1013bc0:	400000ec 	.word	0x400000ec
 1013bc4:	4000403c 	.word	0x4000403c
 1013bc8:	40004038 	.word	0x40004038
 1013bcc:	4605b5f0 	.word	0x4605b5f0
 1013bd0:	2600460c 	.word	0x2600460c
 1013bd4:	b0830629 	.word	0xb0830629
 1013bd8:	2101d503 	.word	0x2101d503
 1013bdc:	f88d2601 	.word	0xf88d2601
 1013be0:	06691000 	.word	0x06691000
 1013be4:	2102d503 	.word	0x2102d503
 1013be8:	1006f80d 	.word	0x1006f80d
 1013bec:	06a91c76 	.word	0x06a91c76
 1013bf0:	2103d504 	.word	0x2103d504
 1013bf4:	f80db2f6 	.word	0xf80db2f6
 1013bf8:	1c761006 	.word	0x1c761006
 1013bfc:	d50406e9 	.word	0xd50406e9
 1013c00:	b2f62104 	.word	0xb2f62104
 1013c04:	1006f80d 	.word	0x1006f80d
 1013c08:	07291c76 	.word	0x07291c76
 1013c0c:	2105d504 	.word	0x2105d504
 1013c10:	f80db2f6 	.word	0xf80db2f6
 1013c14:	1c761006 	.word	0x1c761006
 1013c18:	d5040769 	.word	0xd5040769
 1013c1c:	b2f62106 	.word	0xb2f62106
 1013c20:	1006f80d 	.word	0x1006f80d
 1013c24:	07a91c76 	.word	0x07a91c76
 1013c28:	2107d504 	.word	0x2107d504
 1013c2c:	f80db2f6 	.word	0xf80db2f6
 1013c30:	1c761006 	.word	0x1c761006
 1013c34:	d50407e9 	.word	0xd50407e9
 1013c38:	b2f62108 	.word	0xb2f62108
 1013c3c:	1006f80d 	.word	0x1006f80d
 1013c40:	b2f61c76 	.word	0xb2f61c76
 1013c44:	da1b2e02 	.word	0xda1b2e02
 1013c48:	d0190030 	.word	0xd0190030
 1013c4c:	46324f4c 	.word	0x46324f4c
 1013c50:	46384669 	.word	0x46384669
 1013c54:	f8fef000 	.word	0xf8fef000
 1013c58:	707d2061 	.word	0x707d2061
 1013c5c:	f000fb16 	.word	0xf000fb16
 1013c60:	80b8783d 	.word	0x80b8783d
 1013c64:	fb162054 	.word	0xfb162054
 1013c68:	70bef000 	.word	0x70bef000
 1013c6c:	eb0680f8 	.word	0xeb0680f8
 1013c70:	01400046 	.word	0x01400046
 1013c74:	81382d02 	.word	0x81382d02
 1013c78:	2000bfac 	.word	0x2000bfac
 1013c7c:	e0022001 	.word	0xe0022001
 1013c80:	b0032000 	.word	0xb0032000
 1013c84:	f001bdf0 	.word	0xf001bdf0
 1013c88:	4620fc4b 	.word	0x4620fc4b
 1013c8c:	fdadf001 	.word	0xfdadf001
 1013c90:	f04f4629 	.word	0xf04f4629
 1013c94:	f0014080 	.word	0xf0014080
 1013c98:	200efe5c 	.word	0x200efe5c
 1013c9c:	fc08f000 	.word	0xfc08f000
 1013ca0:	2040f04f 	.word	0x2040f04f
 1013ca4:	f938f002 	.word	0xf938f002
 1013ca8:	f04f4629 	.word	0xf04f4629
 1013cac:	f0022040 	.word	0xf0022040
 1013cb0:	b914f9ed 	.word	0xb914f9ed
 1013cb4:	f000200e 	.word	0xf000200e
 1013cb8:	f003fc1d 	.word	0xf003fc1d
 1013cbc:	4630fc88 	.word	0x4630fc88
 1013cc0:	f9a2f000 	.word	0xf9a2f000
 1013cc4:	b0032001 	.word	0xb0032001
 1013cc8:	482dbdf0 	.word	0x482dbdf0
 1013ccc:	47708880 	.word	0x47708880
 1013cd0:	88c0482b 	.word	0x88c0482b
 1013cd4:	482a4770 	.word	0x482a4770
 1013cd8:	47708900 	.word	0x47708900
 1013cdc:	78404828 	.word	0x78404828
 1013ce0:	48274770 	.word	0x48274770
 1013ce4:	47707880 	.word	0x47707880
 1013ce8:	f20f4925 	.word	0xf20f4925
 1013cec:	78890098 	.word	0x78890098
 1013cf0:	0041eb00 	.word	0x0041eb00
 1013cf4:	0c02f830 	.word	0x0c02f830
 1013cf8:	49214770 	.word	0x49214770
 1013cfc:	0084f20f 	.word	0x0084f20f
 1013d00:	eb007889 	.word	0xeb007889
 1013d04:	f8300041 	.word	0xf8300041
 1013d08:	1c800c02 	.word	0x1c800c02
 1013d0c:	0e000540 	.word	0x0e000540
 1013d10:	491b4770 	.word	0x491b4770
 1013d14:	007cf20f 	.word	0x007cf20f
 1013d18:	eb007889 	.word	0xeb007889
 1013d1c:	f8300041 	.word	0xf8300041
 1013d20:	05400c02 	.word	0x05400c02
 1013d24:	47700e00 	.word	0x47700e00
 1013d28:	f20f4815 	.word	0xf20f4815
 1013d2c:	78810278 	.word	0x78810278
 1013d30:	0050f20f 	.word	0x0050f20f
 1013d34:	0041eb00 	.word	0x0041eb00
 1013d38:	f812440a 	.word	0xf812440a
 1013d3c:	f8302c01 	.word	0xf8302c01
 1013d40:	18800c02 	.word	0x18800c02
 1013d44:	2902301e 	.word	0x2902301e
 1013d48:	3008bfa8 	.word	0x3008bfa8
 1013d4c:	4770b280 	.word	0x4770b280
 1013d50:	f20f480b 	.word	0xf20f480b
 1013d54:	78800140 	.word	0x78800140
 1013d58:	0250f20f 	.word	0x0250f20f
 1013d5c:	0140eb01 	.word	0x0140eb01
 1013d60:	f8104410 	.word	0xf8104410
 1013d64:	f8310c01 	.word	0xf8310c01
 1013d68:	18081c02 	.word	0x18081c02
 1013d6c:	b280302a 	.word	0xb280302a
 1013d70:	48034770 	.word	0x48034770
 1013d74:	47707800 	.word	0x47707800
 1013d78:	47704801 	.word	0x47704801
 1013d7c:	00000000 	.word	0x00000000
 1013d80:	200132a8 	.word	0x200132a8
 1013d84:	007e0036 	.word	0x007e0036
 1013d88:	012600d6 	.word	0x012600d6
 1013d8c:	01ce017e 	.word	0x01ce017e
 1013d90:	02760226 	.word	0x02760226
 1013d94:	00280000 	.word	0x00280000
 1013d98:	00780050 	.word	0x00780050
 1013d9c:	00d000a8 	.word	0x00d000a8
 1013da0:	012000f8 	.word	0x012000f8
 1013da4:	04000400 	.word	0x04000400
 1013da8:	04000400 	.word	0x04000400
 1013dac:	06040200 	.word	0x06040200
 1013db0:	06040200 	.word	0x06040200
 1013db4:	2200b430 	.word	0x2200b430
 1013db8:	b1912400 	.word	0xb1912400
 1013dbc:	0507f014 	.word	0x0507f014
 1013dc0:	10e3bf04 	.word	0x10e3bf04
 1013dc4:	00555cc3 	.word	0x00555cc3
 1013dc8:	b2d2b2db 	.word	0xb2d2b2db
 1013dcc:	0612405a 	.word	0x0612405a
 1013dd0:	f085bf4c 	.word	0xf085bf4c
 1013dd4:	462a0207 	.word	0x462a0207
 1013dd8:	005b1c64 	.word	0x005b1c64
 1013ddc:	428cb2e4 	.word	0x428cb2e4
 1013de0:	b2d0dbec 	.word	0xb2d0dbec
 1013de4:	4770bc30 	.word	0x4770bc30
 1013de8:	2200b470 	.word	0x2200b470
 1013dec:	00c92400 	.word	0x00c92400
 1013df0:	f6402901 	.word	0xf6402901
 1013df4:	db13050f 	.word	0xdb13050f
 1013df8:	0607f014 	.word	0x0607f014
 1013dfc:	10e3d102 	.word	0x10e3d102
 1013e00:	011b5cc3 	.word	0x011b5cc3
 1013e04:	b29b0056 	.word	0xb29b0056
 1013e08:	405ab292 	.word	0x405ab292
 1013e0c:	bf4c0512 	.word	0xbf4c0512
 1013e10:	0206ea85 	.word	0x0206ea85
 1013e14:	1c644632 	.word	0x1c644632
 1013e18:	b2e4005b 	.word	0xb2e4005b
 1013e1c:	dbeb428c 	.word	0xdbeb428c
 1013e20:	000bf3c2 	.word	0x000bf3c2
 1013e24:	4770bc70 	.word	0x4770bc70
 1013e28:	4604b570 	.word	0x4604b570
 1013e2c:	4616460d 	.word	0x4616460d
 1013e30:	f0002018 	.word	0xf0002018
 1013e34:	4632fb3d 	.word	0x4632fb3d
 1013e38:	46204629 	.word	0x46204629
 1013e3c:	fdfef003 	.word	0xfdfef003
 1013e40:	e8bd2018 	.word	0xe8bd2018
 1013e44:	f0004070 	.word	0xf0004070
 1013e48:	0000bb55 	.word	0x0000bb55
 1013e4c:	f0032200 	.word	0xf0032200
 1013e50:	0000be45 	.word	0x0000be45
 1013e54:	078bb362 	.word	0x078bb362
 1013e58:	1e52d008 	.word	0x1e52d008
 1013e5c:	3b01f811 	.word	0x3b01f811
 1013e60:	3b01f800 	.word	0x3b01f800
 1013e64:	8024f000 	.word	0x8024f000
 1013e68:	d1f6078b 	.word	0xd1f6078b
 1013e6c:	f0400783 	.word	0xf0400783
 1013e70:	bf008020 	.word	0xbf008020
 1013e74:	d3073a10 	.word	0xd3073a10
 1013e78:	e8b1b430 	.word	0xe8b1b430
 1013e7c:	3a101038 	.word	0x3a101038
 1013e80:	1038e8a0 	.word	0x1038e8a0
 1013e84:	bc30d2f9 	.word	0xbc30d2f9
 1013e88:	bf240753 	.word	0xbf240753
 1013e8c:	1008e8b1 	.word	0x1008e8b1
 1013e90:	1008e8a0 	.word	0x1008e8a0
 1013e94:	f851bf44 	.word	0xf851bf44
 1013e98:	f8403b04 	.word	0xf8403b04
 1013e9c:	07d23b04 	.word	0x07d23b04
 1013ea0:	f831bf24 	.word	0xf831bf24
 1013ea4:	f8202b02 	.word	0xf8202b02
 1013ea8:	bf442b02 	.word	0xbf442b02
 1013eac:	7003780b 	.word	0x7003780b
 1013eb0:	3a084770 	.word	0x3a084770
 1013eb4:	e8b1d307 	.word	0xe8b1d307
 1013eb8:	3a081008 	.word	0x3a081008
 1013ebc:	3b04f840 	.word	0x3b04f840
 1013ec0:	cb04f840 	.word	0xcb04f840
 1013ec4:	0753d2f7 	.word	0x0753d2f7
 1013ec8:	0000e7e4 	.word	0x0000e7e4
 1013ecc:	d9002b03 	.word	0xd9002b03
 1013ed0:	b5f04770 	.word	0xb5f04770
 1013ed4:	e8dfb081 	.word	0xe8dfb081
 1013ed8:	0f02f003 	.word	0x0f02f003
 1013edc:	f20f160f 	.word	0xf20f160f
 1013ee0:	4c2703a8 	.word	0x4c2703a8
 1013ee4:	10e0e8b3 	.word	0x10e0e8b3
 1013ee8:	10e0e8a4 	.word	0x10e0e8a4
 1013eec:	2300b001 	.word	0x2300b001
 1013ef0:	40f0e8bd 	.word	0x40f0e8bd
 1013ef4:	be22f003 	.word	0xbe22f003
 1013ef8:	78234c22 	.word	0x78234c22
 1013efc:	fe1ef003 	.word	0xfe1ef003
 1013f00:	b0017020 	.word	0xb0017020
 1013f04:	4c1fbdf0 	.word	0x4c1fbdf0
 1013f08:	f0037863 	.word	0xf0037863
 1013f0c:	7060fe55 	.word	0x7060fe55
 1013f10:	bdf0b001 	.word	0xbdf0b001
 1013f14:	491b2000 	.word	0x491b2000
 1013f18:	47707048 	.word	0x47707048
 1013f1c:	1202f248 	.word	0x1202f248
 1013f20:	f100fb02 	.word	0xf100fb02
 1013f24:	2410b4f0 	.word	0x2410b4f0
 1013f28:	055cf20f 	.word	0x055cf20f
 1013f2c:	0d91440a 	.word	0x0d91440a
 1013f30:	11c1ebc1 	.word	0x11c1ebc1
 1013f34:	1d134a13 	.word	0x1d134a13
 1013f38:	b2c01a40 	.word	0xb2c01a40
 1013f3c:	f00008c1 	.word	0xf00008c1
 1013f40:	b2c90007 	.word	0xb2c90007
 1013f44:	40865c6e 	.word	0x40865c6e
 1013f48:	d108290f 	.word	0xd108290f
 1013f4c:	b2c02700 	.word	0xb2c02700
 1013f50:	bf192807 	.word	0xbf192807
 1013f54:	1c402100 	.word	0x1c402100
 1013f58:	20002101 	.word	0x20002101
 1013f5c:	1c49e001 	.word	0x1c49e001
 1013f60:	b2ff460f 	.word	0xb2ff460f
 1013f64:	0c08f1c0 	.word	0x0c08f1c0
 1013f68:	fa275def 	.word	0xfa275def
 1013f6c:	433ef70c 	.word	0x433ef70c
 1013f70:	f8031e64 	.word	0xf8031e64
 1013f74:	d1e46b01 	.word	0xd1e46b01
 1013f78:	70102000 	.word	0x70102000
 1013f7c:	4770bcf0 	.word	0x4770bcf0
 1013f80:	20013264 	.word	0x20013264
 1013f84:	20013260 	.word	0x20013260
 1013f88:	02c9f20e 	.word	0x02c9f20e
 1013f8c:	0cb62e26 	.word	0x0cb62e26
 1013f90:	2ab4e7d4 	.word	0x2ab4e7d4
 1013f94:	feb851fa 	.word	0xfeb851fa
 1013f98:	4604b570 	.word	0x4604b570
 1013f9c:	4616460d 	.word	0x4616460d
 1013fa0:	f0002018 	.word	0xf0002018
 1013fa4:	4632fa85 	.word	0x4632fa85
 1013fa8:	46204629 	.word	0x46204629
 1013fac:	fe2cf003 	.word	0xfe2cf003
 1013fb0:	e8bd2018 	.word	0xe8bd2018
 1013fb4:	f0004070 	.word	0xf0004070
 1013fb8:	2000ba9d 	.word	0x2000ba9d
 1013fbc:	70084901 	.word	0x70084901
 1013fc0:	00004770 	.word	0x00004770
 1013fc4:	200132d4 	.word	0x200132d4
 1013fc8:	4604b510 	.word	0x4604b510
 1013fcc:	f0002018 	.word	0xf0002018
 1013fd0:	7a63fa6f 	.word	0x7a63fa6f
 1013fd4:	68617aa2 	.word	0x68617aa2
 1013fd8:	f0036820 	.word	0xf0036820
 1013fdc:	2018fe77 	.word	0x2018fe77
 1013fe0:	4010e8bd 	.word	0x4010e8bd
 1013fe4:	ba86f000 	.word	0xba86f000
 1013fe8:	4604b510 	.word	0x4604b510
 1013fec:	f0002018 	.word	0xf0002018
 1013ff0:	7a63fa5f 	.word	0x7a63fa5f
 1013ff4:	68617a22 	.word	0x68617a22
 1013ff8:	f0036820 	.word	0xf0036820
 1013ffc:	2018ff37 	.word	0x2018ff37
 1014000:	4010e8bd 	.word	0x4010e8bd
 1014004:	ba76f000 	.word	0xba76f000
 1014008:	490e2254 	.word	0x490e2254
 101400c:	f200fb12 	.word	0xf200fb12
 1014010:	1e527088 	.word	0x1e527088
 1014014:	eb00808a 	.word	0xeb00808a
 1014018:	05520240 	.word	0x05520240
 101401c:	1e530c12 	.word	0x1e530c12
 1014020:	005380cb 	.word	0x005380cb
 1014024:	0242eb02 	.word	0x0242eb02
 1014028:	810b1e5b 	.word	0x810b1e5b
 101402c:	814a1e52 	.word	0x814a1e52
 1014030:	0240eb00 	.word	0x0240eb00
 1014034:	700a0092 	.word	0x700a0092
 1014038:	02c0eb00 	.word	0x02c0eb00
 101403c:	704a0052 	.word	0x704a0052
 1014040:	00004770 	.word	0x00004770
 1014044:	2001329c 	.word	0x2001329c
 1014048:	f0034a0c 	.word	0xf0034a0c
 101404c:	4b0bbfd7 	.word	0x4b0bbfd7
 1014050:	b896f004 	.word	0xb896f004
 1014054:	f303fb12 	.word	0xf303fb12
 1014058:	0224f20f 	.word	0x0224f20f
 101405c:	f004b2db 	.word	0xf004b2db
 1014060:	4906b839 	.word	0x4906b839
 1014064:	20206008 	.word	0x20206008
 1014068:	20007408 	.word	0x20007408
 101406c:	f20f7448 	.word	0xf20f7448
 1014070:	60480010 	.word	0x60480010
 1014074:	49014770 	.word	0x49014770
 1014078:	47706008 	.word	0x47706008
 101407c:	2001324c 	.word	0x2001324c
 1014080:	0ef2c902 	.word	0x0ef2c902
 1014084:	262eb60c 	.word	0x262eb60c
 1014088:	d4e7b42a 	.word	0xd4e7b42a
 101408c:	fa51b8fe 	.word	0xfa51b8fe
 1014090:	4605b570 	.word	0x4605b570
 1014094:	78204c23 	.word	0x78204c23
 1014098:	d107280f 	.word	0xd107280f
 101409c:	29007861 	.word	0x29007861
 10140a0:	200ebf14 	.word	0x200ebf14
 10140a4:	70202000 	.word	0x70202000
 10140a8:	bd702000 	.word	0xbd702000
 10140ac:	fe61f7ff 	.word	0xfe61f7ff
 10140b0:	0001f000 	.word	0x0001f000
 10140b4:	f20f7821 	.word	0xf20f7821
 10140b8:	ebc00270 	.word	0xebc00270
 10140bc:	eb021300 	.word	0xeb021300
 10140c0:	f8500083 	.word	0xf8500083
 10140c4:	78606021 	.word	0x78606021
 10140c8:	bf142800 	.word	0xbf142800
 10140cc:	1c481e48 	.word	0x1c481e48
 10140d0:	000ff000 	.word	0x000ff000
 10140d4:	20187020 	.word	0x20187020
 10140d8:	f9eaf000 	.word	0xf9eaf000
 10140dc:	88aa79a9 	.word	0x88aa79a9
 10140e0:	29006828 	.word	0x29006828
 10140e4:	d1024631 	.word	0xd1024631
 10140e8:	f914f004 	.word	0xf914f004
 10140ec:	f004e001 	.word	0xf004e001
 10140f0:	2018f951 	.word	0x2018f951
 10140f4:	f9fef000 	.word	0xf9fef000
 10140f8:	bd702000 	.word	0xbd702000
 10140fc:	2101b929 	.word	0x2101b929
 1014100:	4a08200e 	.word	0x4a08200e
 1014104:	70517010 	.word	0x70517010
 1014108:	21004770 	.word	0x21004770
 101410c:	200eb920 	.word	0x200eb920
 1014110:	70104a04 	.word	0x70104a04
 1014114:	47707051 	.word	0x47707051
 1014118:	4a022000 	.word	0x4a022000
 101411c:	70517010 	.word	0x70517010
 1014120:	00004770 	.word	0x00004770
 1014124:	200132b2 	.word	0x200132b2
 1014128:	30fc7642 	.word	0x30fc7642
 101412c:	5a825a82 	.word	0x5a825a82
 1014130:	764230fc 	.word	0x764230fc
 1014134:	7fff0000 	.word	0x7fff0000
 1014138:	7642cf04 	.word	0x7642cf04
 101413c:	5a82a57e 	.word	0x5a82a57e
 1014140:	30fc89be 	.word	0x30fc89be
 1014144:	00008000 	.word	0x00008000
 1014148:	cf0489be 	.word	0xcf0489be
 101414c:	a57ea57e 	.word	0xa57ea57e
 1014150:	89becf04 	.word	0x89becf04
 1014154:	80000000 	.word	0x80000000
 1014158:	89be30fc 	.word	0x89be30fc
 101415c:	a57e5a82 	.word	0xa57e5a82
 1014160:	cf047642 	.word	0xcf047642
 1014164:	cf0489be 	.word	0xcf0489be
 1014168:	5a825a82 	.word	0x5a825a82
 101416c:	89becf04 	.word	0x89becf04
 1014170:	7fff0000 	.word	0x7fff0000
 1014174:	89be30fc 	.word	0x89be30fc
 1014178:	5a82a57e 	.word	0x5a82a57e
 101417c:	cf047642 	.word	0xcf047642
 1014180:	00008000 	.word	0x00008000
 1014184:	30fc7642 	.word	0x30fc7642
 1014188:	a57ea57e 	.word	0xa57ea57e
 101418c:	764230fc 	.word	0x764230fc
 1014190:	80000000 	.word	0x80000000
 1014194:	7642cf04 	.word	0x7642cf04
 1014198:	a57e5a82 	.word	0xa57e5a82
 101419c:	30fc89be 	.word	0x30fc89be
 10141a0:	4604b510 	.word	0x4604b510
 10141a4:	f0002018 	.word	0xf0002018
 10141a8:	4620f983 	.word	0x4620f983
 10141ac:	fa69f004 	.word	0xfa69f004
 10141b0:	f0002018 	.word	0xf0002018
 10141b4:	f44ff99f 	.word	0xf44ff99f
 10141b8:	44206000 	.word	0x44206000
 10141bc:	b510bd10 	.word	0xb510bd10
 10141c0:	20184604 	.word	0x20184604
 10141c4:	f974f000 	.word	0xf974f000
 10141c8:	f0044620 	.word	0xf0044620
 10141cc:	2018f97a 	.word	0x2018f97a
 10141d0:	f990f000 	.word	0xf990f000
 10141d4:	7000f44f 	.word	0x7000f44f
 10141d8:	bd104420 	.word	0xbd104420
 10141dc:	4604b510 	.word	0x4604b510
 10141e0:	f0002018 	.word	0xf0002018
 10141e4:	4620f965 	.word	0x4620f965
 10141e8:	fb2df004 	.word	0xfb2df004
 10141ec:	f0002018 	.word	0xf0002018
 10141f0:	f44ff981 	.word	0xf44ff981
 10141f4:	44206000 	.word	0x44206000
 10141f8:	b570bd10 	.word	0xb570bd10
 10141fc:	460d4604 	.word	0x460d4604
 1014200:	20184616 	.word	0x20184616
 1014204:	f954f000 	.word	0xf954f000
 1014208:	46294632 	.word	0x46294632
 101420c:	f0044620 	.word	0xf0044620
 1014210:	4604f91b 	.word	0x4604f91b
 1014214:	f0002018 	.word	0xf0002018
 1014218:	1e60f96d 	.word	0x1e60f96d
 101421c:	43c04180 	.word	0x43c04180
 1014220:	bd700fc0 	.word	0xbd700fc0
 1014224:	b081b500 	.word	0xb081b500
 1014228:	fbfef004 	.word	0xfbfef004
 101422c:	fc04f004 	.word	0xfc04f004
 1014230:	b001490a 	.word	0xb001490a
 1014234:	bd006008 	.word	0xbd006008
 1014238:	da04281b 	.word	0xda04281b
 101423c:	0120f20f 	.word	0x0120f20f
 1014240:	0020f851 	.word	0x0020f851
 1014244:	20004770 	.word	0x20004770
 1014248:	28024770 	.word	0x28024770
 101424c:	4903da04 	.word	0x4903da04
 1014250:	f8516809 	.word	0xf8516809
 1014254:	47700020 	.word	0x47700020
 1014258:	47702000 	.word	0x47702000
 101425c:	200132d0 	.word	0x200132d0
 1014260:	20000000 	.word	0x20000000
 1014264:	20000400 	.word	0x20000400
 1014268:	20000460 	.word	0x20000460
 101426c:	20000478 	.word	0x20000478
 1014270:	200004a0 	.word	0x200004a0
 1014274:	200016b0 	.word	0x200016b0
 1014278:	20000460 	.word	0x20000460
 101427c:	20001460 	.word	0x20001460
 1014280:	20001528 	.word	0x20001528
 1014284:	20000400 	.word	0x20000400
 1014288:	20000480 	.word	0x20000480
 101428c:	20000480 	.word	0x20000480
 1014290:	20000eb0 	.word	0x20000eb0
 1014294:	20000ff0 	.word	0x20000ff0
 1014298:	20001030 	.word	0x20001030
 101429c:	20001048 	.word	0x20001048
 10142a0:	20001480 	.word	0x20001480
 10142a4:	20001608 	.word	0x20001608
 10142a8:	20001728 	.word	0x20001728
 10142ac:	200023c0 	.word	0x200023c0
 10142b0:	20001950 	.word	0x20001950
 10142b4:	20002000 	.word	0x20002000
 10142b8:	20001608 	.word	0x20001608
 10142bc:	20001790 	.word	0x20001790
 10142c0:	20003930 	.word	0x20003930
 10142c4:	20004130 	.word	0x20004130
 10142c8:	20002400 	.word	0x20002400
 10142cc:	4604b570 	.word	0x4604b570
 10142d0:	4616460d 	.word	0x4616460d
 10142d4:	f0002018 	.word	0xf0002018
 10142d8:	4632f8eb 	.word	0x4632f8eb
 10142dc:	46204629 	.word	0x46204629
 10142e0:	f806f000 	.word	0xf806f000
 10142e4:	20184604 	.word	0x20184604
 10142e8:	f904f000 	.word	0xf904f000
 10142ec:	bd704620 	.word	0xbd704620
 10142f0:	43f0e92d 	.word	0x43f0e92d
 10142f4:	46144603 	.word	0x46144603
 10142f8:	f325681d 	.word	0xf325681d
 10142fc:	f843050e 	.word	0xf843050e
 1014300:	1e645b04 	.word	0x1e645b04
 1014304:	f241d1f8 	.word	0xf241d1f8
 1014308:	f2ce0900 	.word	0xf2ce0900
 101430c:	f2411900 	.word	0xf2411900
 1014310:	f2ce0800 	.word	0xf2ce0800
 1014314:	f2411801 	.word	0xf2411801
 1014318:	f2ce0300 	.word	0xf2ce0300
 101431c:	f2401302 	.word	0xf2401302
 1014320:	f2ce0540 	.word	0xf2ce0540
 1014324:	682c0510 	.word	0x682c0510
 1014328:	0600f240 	.word	0x0600f240
 101432c:	0600f2c8 	.word	0x0600f2c8
 1014330:	0406ea44 	.word	0x0406ea44
 1014334:	f888602c 	.word	0xf888602c
 1014338:	f6441007 	.word	0xf6441007
 101433c:	f88955ba 	.word	0xf88955ba
 1014340:	1f005108 	.word	0x1f005108
 1014344:	0188f883 	.word	0x0188f883
 1014348:	f8831f09 	.word	0xf8831f09
 101434c:	f2401148 	.word	0xf2401148
 1014350:	f2400001 	.word	0xf2400001
 1014354:	f8880101 	.word	0xf8880101
 1014358:	f8880208 	.word	0xf8880208
 101435c:	f8890248 	.word	0xf8890248
 1014360:	f889042a 	.word	0xf889042a
 1014364:	f889072a 	.word	0xf889072a
 1014368:	f883190d 	.word	0xf883190d
 101436c:	f8890402 	.word	0xf8890402
 1014370:	f8831b4d 	.word	0xf8831b4d
 1014374:	f889032a 	.word	0xf889032a
 1014378:	f8891d8d 	.word	0xf8891d8d
 101437c:	f889052a 	.word	0xf889052a
 1014380:	f8831fcd 	.word	0xf8831fcd
 1014384:	f889002a 	.word	0xf889002a
 1014388:	f889134d 	.word	0xf889134d
 101438c:	f889022a 	.word	0xf889022a
 1014390:	f240158d 	.word	0xf240158d
 1014394:	fbb20606 	.word	0xfbb20606
 1014398:	fb06f7f6 	.word	0xfb06f7f6
 101439c:	eba2f707 	.word	0xeba2f707
 10143a0:	f8890607 	.word	0xf8890607
 10143a4:	f889052a 	.word	0xf889052a
 10143a8:	f883192d 	.word	0xf883192d
 10143ac:	f889062a 	.word	0xf889062a
 10143b0:	f8831b6d 	.word	0xf8831b6d
 10143b4:	f889032a 	.word	0xf889032a
 10143b8:	f8891dad 	.word	0xf8891dad
 10143bc:	f889052a 	.word	0xf889052a
 10143c0:	f8831fed 	.word	0xf8831fed
 10143c4:	f889002a 	.word	0xf889002a
 10143c8:	f889136d 	.word	0xf889136d
 10143cc:	f889022a 	.word	0xf889022a
 10143d0:	f1a715ad 	.word	0xf1a715ad
 10143d4:	2f000706 	.word	0x2f000706
 10143d8:	2e05d1e3 	.word	0x2e05d1e3
 10143dc:	f889d10e 	.word	0xf889d10e
 10143e0:	f889192d 	.word	0xf889192d
 10143e4:	f8891b2d 	.word	0xf8891b2d
 10143e8:	f8881d2d 	.word	0xf8881d2d
 10143ec:	f8891007 	.word	0xf8891007
 10143f0:	f8881f2d 	.word	0xf8881f2d
 10143f4:	f8891007 	.word	0xf8891007
 10143f8:	e020132d 	.word	0xe020132d
 10143fc:	d10a2e04 	.word	0xd10a2e04
 1014400:	192df889 	.word	0x192df889
 1014404:	1b2df889 	.word	0x1b2df889
 1014408:	1d2df889 	.word	0x1d2df889
 101440c:	1007f888 	.word	0x1007f888
 1014410:	1f2df889 	.word	0x1f2df889
 1014414:	2e03e013 	.word	0x2e03e013
 1014418:	f889d106 	.word	0xf889d106
 101441c:	f889192d 	.word	0xf889192d
 1014420:	f8891b2d 	.word	0xf8891b2d
 1014424:	e00a1d2d 	.word	0xe00a1d2d
 1014428:	d1042e02 	.word	0xd1042e02
 101442c:	192df889 	.word	0x192df889
 1014430:	1b2df889 	.word	0x1b2df889
 1014434:	2e01e003 	.word	0x2e01e003
 1014438:	f889d101 	.word	0xf889d101
 101443c:	f8d3192d 	.word	0xf8d3192d
 1014440:	e8bd0120 	.word	0xe8bd0120
 1014444:	f83083f0 	.word	0xf83083f0
 1014448:	1e523b04 	.word	0x1e523b04
 101444c:	3b02f821 	.word	0x3b02f821
 1014450:	4770d1f9 	.word	0x4770d1f9
 1014454:	49402000 	.word	0x49402000
 1014458:	47706008 	.word	0x47706008
 101445c:	6800483e 	.word	0x6800483e
 1014460:	0003f000 	.word	0x0003f000
 1014464:	41801e40 	.word	0x41801e40
 1014468:	47700fc0 	.word	0x47700fc0
 101446c:	f240483a 	.word	0xf240483a
 1014470:	68011201 	.word	0x68011201
 1014474:	60014311 	.word	0x60014311
 1014478:	48374770 	.word	0x48374770
 101447c:	f0006800 	.word	0xf0006800
 1014480:	1e400001 	.word	0x1e400001
 1014484:	43c04180 	.word	0x43c04180
 1014488:	47700fc0 	.word	0x47700fc0
 101448c:	f2404832 	.word	0xf2404832
 1014490:	68012202 	.word	0x68012202
 1014494:	60014311 	.word	0x60014311
 1014498:	482f4770 	.word	0x482f4770
 101449c:	f0006800 	.word	0xf0006800
 10144a0:	1e400002 	.word	0x1e400002
 10144a4:	43c04180 	.word	0x43c04180
 10144a8:	47700fc0 	.word	0x47700fc0
 10144ac:	00000000 	.word	0x00000000
 10144b0:	f3bfb672 	.word	0xf3bfb672
 10144b4:	21018f5f 	.word	0x21018f5f
 10144b8:	f000fa01 	.word	0xf000fa01
 10144bc:	680a4927 	.word	0x680a4927
 10144c0:	600a4302 	.word	0x600a4302
 10144c4:	8f5ff3bf 	.word	0x8f5ff3bf
 10144c8:	680ab662 	.word	0x680ab662
 10144cc:	601a4b24 	.word	0x601a4b24
 10144d0:	c008f8d3 	.word	0xc008f8d3
 10144d4:	0f02ea1c 	.word	0x0f02ea1c
 10144d8:	b672d0fa 	.word	0xb672d0fa
 10144dc:	8f5ff3bf 	.word	0x8f5ff3bf
 10144e0:	ea22680a 	.word	0xea22680a
 10144e4:	60080000 	.word	0x60080000
 10144e8:	8f5ff3bf 	.word	0x8f5ff3bf
 10144ec:	2000b662 	.word	0x2000b662
 10144f0:	00004770 	.word	0x00004770
 10144f4:	f3bfb672 	.word	0xf3bfb672
 10144f8:	21018f5f 	.word	0x21018f5f
 10144fc:	f000fa01 	.word	0xf000fa01
 1014500:	684a4916 	.word	0x684a4916
 1014504:	604a4302 	.word	0x604a4302
 1014508:	8f5ff3bf 	.word	0x8f5ff3bf
 101450c:	684ab662 	.word	0x684ab662
 1014510:	601a4b14 	.word	0x601a4b14
 1014514:	c004f8d3 	.word	0xc004f8d3
 1014518:	0f02ea1c 	.word	0x0f02ea1c
 101451c:	b672d1fa 	.word	0xb672d1fa
 1014520:	8f5ff3bf 	.word	0x8f5ff3bf
 1014524:	ea22684a 	.word	0xea22684a
 1014528:	60480000 	.word	0x60480000
 101452c:	8f5ff3bf 	.word	0x8f5ff3bf
 1014530:	2000b662 	.word	0x2000b662
 1014534:	b6724770 	.word	0xb6724770
 1014538:	8f5ff3bf 	.word	0x8f5ff3bf
 101453c:	4a07490a 	.word	0x4a07490a
 1014540:	68136809 	.word	0x68136809
 1014544:	43196852 	.word	0x43196852
 1014548:	40c14391 	.word	0x40c14391
 101454c:	0001f001 	.word	0x0001f001
 1014550:	8f5ff3bf 	.word	0x8f5ff3bf
 1014554:	4770b662 	.word	0x4770b662
 1014558:	400e0610 	.word	0x400e0610
 101455c:	200132b4 	.word	0x200132b4
 1014560:	400e0604 	.word	0x400e0604
 1014564:	400e0608 	.word	0x400e0608
 1014568:	400e060c 	.word	0x400e060c
 101456c:	3a20b2d2 	.word	0x3a20b2d2
 1014570:	fa21bf22 	.word	0xfa21bf22
 1014574:	2100f002 	.word	0x2100f002
 1014578:	32204770 	.word	0x32204770
 101457c:	40d041d1 	.word	0x40d041d1
 1014580:	40914048 	.word	0x40914048
 1014584:	404840d1 	.word	0x404840d1
 1014588:	00004770 	.word	0x00004770
 101458c:	3a20b2d2 	.word	0x3a20b2d2
 1014590:	fa00bf22 	.word	0xfa00bf22
 1014594:	2000f102 	.word	0x2000f102
 1014598:	42524770 	.word	0x42524770
 101459c:	f1d241d0 	.word	0xf1d241d0
 10145a0:	40910220 	.word	0x40910220
 10145a4:	40d04041 	.word	0x40d04041
 10145a8:	40414090 	.word	0x40414090
 10145ac:	00004770 	.word	0x00004770
 10145b0:	47f0e92d 	.word	0x47f0e92d
 10145b4:	46064688 	.word	0x46064688
 10145b8:	8b02ed2d 	.word	0x8b02ed2d
 10145bc:	45ecf8df 	.word	0x45ecf8df
 10145c0:	78214692 	.word	0x78214692
 10145c4:	000a68a0 	.word	0x000a68a0
 10145c8:	f8b0bf08 	.word	0xf8b0bf08
 10145cc:	d005038a 	.word	0xd005038a
 10145d0:	bf0c2902 	.word	0xbf0c2902
 10145d4:	0392f8b0 	.word	0x0392f8b0
 10145d8:	0390f8b0 	.word	0x0390f8b0
 10145dc:	88654370 	.word	0x88654370
 10145e0:	23002100 	.word	0x23002100
 10145e4:	0055eb10 	.word	0x0055eb10
 10145e8:	462a4159 	.word	0x462a4159
 10145ec:	fa2af004 	.word	0xfa2af004
 10145f0:	0f00f1ba 	.word	0x0f00f1ba
 10145f4:	f8c44681 	.word	0xf8c44681
 10145f8:	46509010 	.word	0x46509010
 10145fc:	8142f000 	.word	0x8142f000
 1014600:	f0002503 	.word	0xf0002503
 1014604:	4580feae 	.word	0x4580feae
 1014608:	808df080 	.word	0x808df080
 101460c:	68a77820 	.word	0x68a77820
 1014610:	2802b118 	.word	0x2802b118
 1014614:	d33ad049 	.word	0xd33ad049
 1014618:	46b4e089 	.word	0x46b4e089
 101461c:	0688eb07 	.word	0x0688eb07
 1014620:	f1bc8861 	.word	0xf1bc8861
 1014624:	68300f02 	.word	0x68300f02
 1014628:	f04fbf38 	.word	0xf04fbf38
 101462c:	23000c01 	.word	0x23000c01
 1014630:	f200fb01 	.word	0xf200fb01
 1014634:	eb122100 	.word	0xeb122100
 1014638:	4662005c 	.word	0x4662005c
 101463c:	f0044159 	.word	0xf0044159
 1014640:	f8b7fa01 	.word	0xf8b7fa01
 1014644:	b283138c 	.word	0xb283138c
 1014648:	238ef8b7 	.word	0x238ef8b7
 101464c:	d303428b 	.word	0xd303428b
 1014650:	42994611 	.word	0x42994611
 1014654:	4619bf88 	.word	0x4619bf88
 1014658:	edd42902 	.word	0xedd42902
 101465c:	bfb80a03 	.word	0xbfb80a03
 1014660:	80612101 	.word	0x80612101
 1014664:	ee008860 	.word	0xee008860
 1014668:	eeb80a10 	.word	0xeeb80a10
 101466c:	ee200a40 	.word	0xee200a40
 1014670:	f0000a20 	.word	0xf0000a20
 1014674:	eebdff39 	.word	0xeebdff39
 1014678:	ee100ac0 	.word	0xee100ac0
 101467c:	80a00a10 	.word	0x80a00a10
 1014680:	45816e30 	.word	0x45816e30
 1014684:	6c30d309 	.word	0x6c30d309
 1014688:	d2504581 	.word	0xd2504581
 101468c:	eb07e04e 	.word	0xeb07e04e
 1014690:	f8d60688 	.word	0xf8d60688
 1014694:	458100a0 	.word	0x458100a0
 1014698:	2502d201 	.word	0x2502d201
 101469c:	f8d6e047 	.word	0xf8d6e047
 10146a0:	45480080 	.word	0x45480080
 10146a4:	2500d243 	.word	0x2500d243
 10146a8:	46b4e041 	.word	0x46b4e041
 10146ac:	0688eb07 	.word	0x0688eb07
 10146b0:	f1bc8861 	.word	0xf1bc8861
 10146b4:	6a300f02 	.word	0x6a300f02
 10146b8:	f04fbf38 	.word	0xf04fbf38
 10146bc:	23000c01 	.word	0x23000c01
 10146c0:	f200fb01 	.word	0xf200fb01
 10146c4:	eb122100 	.word	0xeb122100
 10146c8:	4662005c 	.word	0x4662005c
 10146cc:	f0044159 	.word	0xf0044159
 10146d0:	f8b7f9b9 	.word	0xf8b7f9b9
 10146d4:	b2831394 	.word	0xb2831394
 10146d8:	2396f8b7 	.word	0x2396f8b7
 10146dc:	d303428b 	.word	0xd303428b
 10146e0:	42994611 	.word	0x42994611
 10146e4:	4619bf88 	.word	0x4619bf88
 10146e8:	edd42902 	.word	0xedd42902
 10146ec:	bfb80a03 	.word	0xbfb80a03
 10146f0:	80612101 	.word	0x80612101
 10146f4:	ee008860 	.word	0xee008860
 10146f8:	eeb80a10 	.word	0xeeb80a10
 10146fc:	ee200a40 	.word	0xee200a40
 1014700:	f0000a20 	.word	0xf0000a20
 1014704:	eebdfef1 	.word	0xeebdfef1
 1014708:	ee100ac0 	.word	0xee100ac0
 101470c:	80a00a10 	.word	0x80a00a10
 1014710:	00e0f8d6 	.word	0x00e0f8d6
 1014714:	d30a4581 	.word	0xd30a4581
 1014718:	00c0f8d6 	.word	0x00c0f8d6
 101471c:	41ad4548 	.word	0x41ad4548
 1014720:	0fed43ed 	.word	0x0fed43ed
 1014724:	7820e003 	.word	0x7820e003
 1014728:	d0002801 	.word	0xd0002801
 101472c:	68a72501 	.word	0x68a72501
 1014730:	038cf8b7 	.word	0x038cf8b7
 1014734:	bfb82802 	.word	0xbfb82802
 1014738:	f8a72001 	.word	0xf8a72001
 101473c:	f8b7038c 	.word	0xf8b7038c
 1014740:	f8b70394 	.word	0xf8b70394
 1014744:	2802138c 	.word	0x2802138c
 1014748:	2001bfb8 	.word	0x2001bfb8
 101474c:	0394f8a7 	.word	0x0394f8a7
 1014750:	038af8b7 	.word	0x038af8b7
 1014754:	bf284281 	.word	0xbf284281
 1014758:	f8a74608 	.word	0xf8a74608
 101475c:	f8b7038a 	.word	0xf8b7038a
 1014760:	f8b70392 	.word	0xf8b70392
 1014764:	42811394 	.word	0x42811394
 1014768:	4608bf28 	.word	0x4608bf28
 101476c:	0392f8a7 	.word	0x0392f8a7
 1014770:	0390f8b7 	.word	0x0390f8b7
 1014774:	138af8b7 	.word	0x138af8b7
 1014778:	bfb82802 	.word	0xbfb82802
 101477c:	f8a72001 	.word	0xf8a72001
 1014780:	f8b70390 	.word	0xf8b70390
 1014784:	4281038e 	.word	0x4281038e
 1014788:	4608bf28 	.word	0x4608bf28
 101478c:	038ef8a7 	.word	0x038ef8a7
 1014790:	0396f8b7 	.word	0x0396f8b7
 1014794:	1392f8b7 	.word	0x1392f8b7
 1014798:	bf284281 	.word	0xbf284281
 101479c:	2d034608 	.word	0x2d034608
 10147a0:	0396f8a7 	.word	0x0396f8a7
 10147a4:	f1bada6d 	.word	0xf1bada6d
 10147a8:	d16a0f01 	.word	0xd16a0f01
 10147ac:	7080f44f 	.word	0x7080f44f
 10147b0:	7025183a 	.word	0x7025183a
 10147b4:	f04f4629 	.word	0xf04f4629
 10147b8:	f0012040 	.word	0xf0012040
 10147bc:	68a0fbca 	.word	0x68a0fbca
 10147c0:	f44fb92d 	.word	0xf44fb92d
 10147c4:	f8b071a2 	.word	0xf8b071a2
 10147c8:	1845738a 	.word	0x1845738a
 10147cc:	2d02e00b 	.word	0x2d02e00b
 10147d0:	f44fd105 	.word	0xf44fd105
 10147d4:	f8b07132 	.word	0xf8b07132
 10147d8:	18457392 	.word	0x18457392
 10147dc:	f8b0e003 	.word	0xf8b0e003
 10147e0:	f2007390 	.word	0xf2007390
 10147e4:	80672506 	.word	0x80672506
 10147e8:	f0002600 	.word	0xf0002600
 10147ec:	2100fdc5 	.word	0x2100fdc5
 10147f0:	46b00002 	.word	0x46b00002
 10147f4:	b2c9d021 	.word	0xb2c9d021
 10147f8:	f8352300 	.word	0xf8352300
 10147fc:	43522011 	.word	0x43522011
 1014800:	eb4818b6 	.word	0xeb4818b6
 1014804:	1c490803 	.word	0x1c490803
 1014808:	4282b2ca 	.word	0x4282b2ca
 101480c:	b2c9d215 	.word	0xb2c9d215
 1014810:	2011f835 	.word	0x2011f835
 1014814:	18b64352 	.word	0x18b64352
 1014818:	0803eb48 	.word	0x0803eb48
 101481c:	b2ca1c49 	.word	0xb2ca1c49
 1014820:	d20a4282 	.word	0xd20a4282
 1014824:	f835b2c9 	.word	0xf835b2c9
 1014828:	43522011 	.word	0x43522011
 101482c:	eb4818b6 	.word	0xeb4818b6
 1014830:	1c490803 	.word	0x1c490803
 1014834:	4282b2ca 	.word	0x4282b2ca
 1014838:	0881d3dd 	.word	0x0881d3dd
 101483c:	f0040780 	.word	0xf0040780
 1014840:	ee08f987 	.word	0xee08f987
 1014844:	46300a10 	.word	0x46300a10
 1014848:	f0044641 	.word	0xf0044641
 101484c:	ee00f981 	.word	0xee00f981
 1014850:	ee880a10 	.word	0xee880a10
 1014854:	f0040a00 	.word	0xf0040a00
 1014858:	ee00f99f 	.word	0xee00f99f
 101485c:	ed847a90 	.word	0xed847a90
 1014860:	eef80a03 	.word	0xeef80a03
 1014864:	ee200a60 	.word	0xee200a60
 1014868:	f0000a80 	.word	0xf0000a80
 101486c:	eebdfe3d 	.word	0xeebdfe3d
 1014870:	ee100ac0 	.word	0xee100ac0
 1014874:	80a00a10 	.word	0x80a00a10
 1014878:	ecbd2001 	.word	0xecbd2001
 101487c:	e8bd8b02 	.word	0xe8bd8b02
 1014880:	200087f0 	.word	0x200087f0
 1014884:	8b02ecbd 	.word	0x8b02ecbd
 1014888:	87f0e8bd 	.word	0x87f0e8bd
 101488c:	b081b530 	.word	0xb081b530
 1014890:	b1394604 	.word	0xb1394604
 1014894:	d00a2902 	.word	0xd00a2902
 1014898:	48c4bf3e 	.word	0x48c4bf3e
 101489c:	f2006880 	.word	0xf2006880
 10148a0:	e0092506 	.word	0xe0092506
 10148a4:	f44f48c1 	.word	0xf44f48c1
 10148a8:	688071a2 	.word	0x688071a2
 10148ac:	48bfe003 	.word	0x48bfe003
 10148b0:	7132f44f 	.word	0x7132f44f
 10148b4:	18456880 	.word	0x18456880
 10148b8:	fd5ef000 	.word	0xfd5ef000
 10148bc:	46290042 	.word	0x46290042
 10148c0:	b0014620 	.word	0xb0014620
 10148c4:	4030e8bd 	.word	0x4030e8bd
 10148c8:	bac4f7ff 	.word	0xbac4f7ff
 10148cc:	41f0e92d 	.word	0x41f0e92d
 10148d0:	4eb64604 	.word	0x4eb64604
 10148d4:	8b02ed2d 	.word	0x8b02ed2d
 10148d8:	f8b068b0 	.word	0xf8b068b0
 10148dc:	2a02238c 	.word	0x2a02238c
 10148e0:	2201bfb8 	.word	0x2201bfb8
 10148e4:	238cf8a0 	.word	0x238cf8a0
 10148e8:	2394f8b0 	.word	0x2394f8b0
 10148ec:	338cf8b0 	.word	0x338cf8b0
 10148f0:	bfb82a02 	.word	0xbfb82a02
 10148f4:	f8a02201 	.word	0xf8a02201
 10148f8:	f8b02394 	.word	0xf8b02394
 10148fc:	4293238a 	.word	0x4293238a
 1014900:	461abf28 	.word	0x461abf28
 1014904:	238af8a0 	.word	0x238af8a0
 1014908:	2392f8b0 	.word	0x2392f8b0
 101490c:	3394f8b0 	.word	0x3394f8b0
 1014910:	bf284293 	.word	0xbf284293
 1014914:	f8a0461a 	.word	0xf8a0461a
 1014918:	f8b02392 	.word	0xf8b02392
 101491c:	f8b02390 	.word	0xf8b02390
 1014920:	2a02338a 	.word	0x2a02338a
 1014924:	2201bfb8 	.word	0x2201bfb8
 1014928:	2390f8a0 	.word	0x2390f8a0
 101492c:	238ef8b0 	.word	0x238ef8b0
 1014930:	bf284293 	.word	0xbf284293
 1014934:	f8a0461a 	.word	0xf8a0461a
 1014938:	f8b0238e 	.word	0xf8b0238e
 101493c:	f8b02396 	.word	0xf8b02396
 1014940:	42933392 	.word	0x42933392
 1014944:	461abf28 	.word	0x461abf28
 1014948:	f8a02c03 	.word	0xf8a02c03
 101494c:	da6a2396 	.word	0xda6a2396
 1014950:	d1682901 	.word	0xd1682901
 1014954:	7180f44f 	.word	0x7180f44f
 1014958:	70341842 	.word	0x70341842
 101495c:	f04f4621 	.word	0xf04f4621
 1014960:	f0012040 	.word	0xf0012040
 1014964:	68b0faf6 	.word	0x68b0faf6
 1014968:	f44fb92c 	.word	0xf44fb92c
 101496c:	f8b071a2 	.word	0xf8b071a2
 1014970:	1847838a 	.word	0x1847838a
 1014974:	2c02e00b 	.word	0x2c02e00b
 1014978:	f44fd105 	.word	0xf44fd105
 101497c:	f8b07132 	.word	0xf8b07132
 1014980:	18478392 	.word	0x18478392
 1014984:	f8b0e003 	.word	0xf8b0e003
 1014988:	f2008390 	.word	0xf2008390
 101498c:	f8a62706 	.word	0xf8a62706
 1014990:	24008002 	.word	0x24008002
 1014994:	fcf0f000 	.word	0xfcf0f000
 1014998:	21002500 	.word	0x21002500
 101499c:	d01e0002 	.word	0xd01e0002
 10149a0:	2300b2c9 	.word	0x2300b2c9
 10149a4:	2011f837 	.word	0x2011f837
 10149a8:	18a44352 	.word	0x18a44352
 10149ac:	1c49415d 	.word	0x1c49415d
 10149b0:	4282b2ca 	.word	0x4282b2ca
 10149b4:	b2c9d213 	.word	0xb2c9d213
 10149b8:	2011f837 	.word	0x2011f837
 10149bc:	18a44352 	.word	0x18a44352
 10149c0:	1c49415d 	.word	0x1c49415d
 10149c4:	4282b2ca 	.word	0x4282b2ca
 10149c8:	b2c9d209 	.word	0xb2c9d209
 10149cc:	2011f837 	.word	0x2011f837
 10149d0:	18a44352 	.word	0x18a44352
 10149d4:	1c49415d 	.word	0x1c49415d
 10149d8:	4282b2ca 	.word	0x4282b2ca
 10149dc:	0881d3e0 	.word	0x0881d3e0
 10149e0:	f0040780 	.word	0xf0040780
 10149e4:	ee08f8b5 	.word	0xee08f8b5
 10149e8:	46200a10 	.word	0x46200a10
 10149ec:	f0044629 	.word	0xf0044629
 10149f0:	ee00f8af 	.word	0xee00f8af
 10149f4:	ee880a10 	.word	0xee880a10
 10149f8:	f0040a00 	.word	0xf0040a00
 10149fc:	ee00f8cd 	.word	0xee00f8cd
 1014a00:	ed868a90 	.word	0xed868a90
 1014a04:	eef80a03 	.word	0xeef80a03
 1014a08:	ee200a60 	.word	0xee200a60
 1014a0c:	f0000a80 	.word	0xf0000a80
 1014a10:	eebdfd6b 	.word	0xeebdfd6b
 1014a14:	ee100ac0 	.word	0xee100ac0
 1014a18:	80b00a10 	.word	0x80b00a10
 1014a1c:	ecbd2001 	.word	0xecbd2001
 1014a20:	e8bd8b02 	.word	0xe8bd8b02
 1014a24:	ecbd81f0 	.word	0xecbd81f0
 1014a28:	20008b02 	.word	0x20008b02
 1014a2c:	81f0e8bd 	.word	0x81f0e8bd
 1014a30:	8880485e 	.word	0x8880485e
 1014a34:	485d4770 	.word	0x485d4770
 1014a38:	47708840 	.word	0x47708840
 1014a3c:	7800485b 	.word	0x7800485b
 1014a40:	485a4770 	.word	0x485a4770
 1014a44:	47706900 	.word	0x47706900
 1014a48:	41f0e92d 	.word	0x41f0e92d
 1014a4c:	ed2d4e57 	.word	0xed2d4e57
 1014a50:	f0008b02 	.word	0xf0008b02
 1014a54:	f000fc83 	.word	0xf000fc83
 1014a58:	60b0fc82 	.word	0x60b0fc82
 1014a5c:	fc8ef000 	.word	0xfc8ef000
 1014a60:	68b04604 	.word	0x68b04604
 1014a64:	138cf8b0 	.word	0x138cf8b0
 1014a68:	bfb82902 	.word	0xbfb82902
 1014a6c:	f8a02101 	.word	0xf8a02101
 1014a70:	f8b0138c 	.word	0xf8b0138c
 1014a74:	f8b01394 	.word	0xf8b01394
 1014a78:	2902238c 	.word	0x2902238c
 1014a7c:	2101bfb8 	.word	0x2101bfb8
 1014a80:	1394f8a0 	.word	0x1394f8a0
 1014a84:	138af8b0 	.word	0x138af8b0
 1014a88:	bf28428a 	.word	0xbf28428a
 1014a8c:	f8a04611 	.word	0xf8a04611
 1014a90:	f8b0138a 	.word	0xf8b0138a
 1014a94:	f8b01392 	.word	0xf8b01392
 1014a98:	428a2394 	.word	0x428a2394
 1014a9c:	4611bf28 	.word	0x4611bf28
 1014aa0:	1392f8a0 	.word	0x1392f8a0
 1014aa4:	1390f8b0 	.word	0x1390f8b0
 1014aa8:	238af8b0 	.word	0x238af8b0
 1014aac:	bfb82902 	.word	0xbfb82902
 1014ab0:	f8a02101 	.word	0xf8a02101
 1014ab4:	f8b01390 	.word	0xf8b01390
 1014ab8:	428a138e 	.word	0x428a138e
 1014abc:	4611bf28 	.word	0x4611bf28
 1014ac0:	138ef8a0 	.word	0x138ef8a0
 1014ac4:	1396f8b0 	.word	0x1396f8b0
 1014ac8:	2392f8b0 	.word	0x2392f8b0
 1014acc:	bf28428a 	.word	0xbf28428a
 1014ad0:	2c034611 	.word	0x2c034611
 1014ad4:	1396f8a0 	.word	0x1396f8a0
 1014ad8:	f44fda63 	.word	0xf44fda63
 1014adc:	18427180 	.word	0x18427180
 1014ae0:	46217034 	.word	0x46217034
 1014ae4:	2040f04f 	.word	0x2040f04f
 1014ae8:	fa33f001 	.word	0xfa33f001
 1014aec:	b92c68b0 	.word	0xb92c68b0
 1014af0:	71a2f44f 	.word	0x71a2f44f
 1014af4:	838af8b0 	.word	0x838af8b0
 1014af8:	e00b1847 	.word	0xe00b1847
 1014afc:	d1052c02 	.word	0xd1052c02
 1014b00:	7132f44f 	.word	0x7132f44f
 1014b04:	8392f8b0 	.word	0x8392f8b0
 1014b08:	e0031847 	.word	0xe0031847
 1014b0c:	8390f8b0 	.word	0x8390f8b0
 1014b10:	2706f200 	.word	0x2706f200
 1014b14:	8002f8a6 	.word	0x8002f8a6
 1014b18:	f0002400 	.word	0xf0002400
 1014b1c:	2500fc2d 	.word	0x2500fc2d
 1014b20:	00022100 	.word	0x00022100
 1014b24:	b2c9d01e 	.word	0xb2c9d01e
 1014b28:	f8372300 	.word	0xf8372300
 1014b2c:	43522011 	.word	0x43522011
 1014b30:	415d18a4 	.word	0x415d18a4
 1014b34:	b2ca1c49 	.word	0xb2ca1c49
 1014b38:	d2134282 	.word	0xd2134282
 1014b3c:	f837b2c9 	.word	0xf837b2c9
 1014b40:	43522011 	.word	0x43522011
 1014b44:	415d18a4 	.word	0x415d18a4
 1014b48:	b2ca1c49 	.word	0xb2ca1c49
 1014b4c:	d2094282 	.word	0xd2094282
 1014b50:	f837b2c9 	.word	0xf837b2c9
 1014b54:	43522011 	.word	0x43522011
 1014b58:	415d18a4 	.word	0x415d18a4
 1014b5c:	b2ca1c49 	.word	0xb2ca1c49
 1014b60:	d3e04282 	.word	0xd3e04282
 1014b64:	07800881 	.word	0x07800881
 1014b68:	fff2f003 	.word	0xfff2f003
 1014b6c:	0a10ee08 	.word	0x0a10ee08
 1014b70:	46294620 	.word	0x46294620
 1014b74:	ffecf003 	.word	0xffecf003
 1014b78:	0a10ee00 	.word	0x0a10ee00
 1014b7c:	0a00ee88 	.word	0x0a00ee88
 1014b80:	f80af004 	.word	0xf80af004
 1014b84:	8a90ee00 	.word	0x8a90ee00
 1014b88:	0a03ed86 	.word	0x0a03ed86
 1014b8c:	0a60eef8 	.word	0x0a60eef8
 1014b90:	0a80ee20 	.word	0x0a80ee20
 1014b94:	fca8f000 	.word	0xfca8f000
 1014b98:	0ac0eebd 	.word	0x0ac0eebd
 1014b9c:	0a10ee10 	.word	0x0a10ee10
 1014ba0:	ecbd80b0 	.word	0xecbd80b0
 1014ba4:	e8bd8b02 	.word	0xe8bd8b02
 1014ba8:	000081f0 	.word	0x000081f0
 1014bac:	20013238 	.word	0x20013238
 1014bb0:	41f0e92d 	.word	0x41f0e92d
 1014bb4:	4604b082 	.word	0x4604b082
 1014bb8:	f8b47e25 	.word	0xf8b47e25
 1014bbc:	7e668016 	.word	0x7e668016
 1014bc0:	68206921 	.word	0x68206921
 1014bc4:	b1256867 	.word	0xb1256867
 1014bc8:	0285eb07 	.word	0x0285eb07
 1014bcc:	425b00b3 	.word	0x425b00b3
 1014bd0:	4a1118d7 	.word	0x4a1118d7
 1014bd4:	d1044291 	.word	0xd1044291
 1014bd8:	46394642 	.word	0x46394642
 1014bdc:	f86ff004 	.word	0xf86ff004
 1014be0:	9100e00a 	.word	0x9100e00a
 1014be4:	f8ad8aa1 	.word	0xf8ad8aa1
 1014be8:	466b8006 	.word	0x466b8006
 1014bec:	1004f8ad 	.word	0x1004f8ad
 1014bf0:	463968e2 	.word	0x463968e2
 1014bf4:	ffdef003 	.word	0xffdef003
 1014bf8:	0005ea56 	.word	0x0005ea56
 1014bfc:	eb07d008 	.word	0xeb07d008
 1014c00:	68a10088 	.word	0x68a10088
 1014c04:	4306ea45 	.word	0x4306ea45
 1014c08:	1f004642 	.word	0x1f004642
 1014c0c:	f806f004 	.word	0xf806f004
 1014c10:	e8bdb002 	.word	0xe8bdb002
 1014c14:	000081f0 	.word	0x000081f0
 1014c18:	ffff0000 	.word	0xffff0000
 1014c1c:	4ff0e92d 	.word	0x4ff0e92d
 1014c20:	461d4604 	.word	0x461d4604
 1014c24:	0658f8df 	.word	0x0658f8df
 1014c28:	1943b081 	.word	0x1943b081
 1014c2c:	711a468b 	.word	0x711a468b
 1014c30:	f8df990a 	.word	0xf8df990a
 1014c34:	08887650 	.word	0x08887650
 1014c38:	0001f000 	.word	0x0001f000
 1014c3c:	08c87198 	.word	0x08c87198
 1014c40:	0001f000 	.word	0x0001f000
 1014c44:	0a01f001 	.word	0x0a01f001
 1014c48:	68387218 	.word	0x68387218
 1014c4c:	f0100b80 	.word	0xf0100b80
 1014c50:	d0070801 	.word	0xd0070801
 1014c54:	4080f44f 	.word	0x4080f44f
 1014c58:	0080f8c7 	.word	0x0080f8c7
 1014c5c:	8f4ff3bf 	.word	0x8f4ff3bf
 1014c60:	8f6ff3bf 	.word	0x8f6ff3bf
 1014c64:	f7ff200e 	.word	0xf7ff200e
 1014c68:	4681fc66 	.word	0x4681fc66
 1014c6c:	200eb910 	.word	0x200eb910
 1014c70:	fc1ef7ff 	.word	0xfc1ef7ff
 1014c74:	2640f04f 	.word	0x2640f04f
 1014c78:	5080f44f 	.word	0x5080f44f
 1014c7c:	40a86bb1 	.word	0x40a86bb1
 1014c80:	0f00f1bb 	.word	0x0f00f1bb
 1014c84:	ea21bf14 	.word	0xea21bf14
 1014c88:	43080000 	.word	0x43080000
 1014c8c:	462963b0 	.word	0x462963b0
 1014c90:	f0014630 	.word	0xf0014630
 1014c94:	ea5ff9e9 	.word	0xea5ff9e9
 1014c98:	d003010a 	.word	0xd003010a
 1014c9c:	bf384284 	.word	0xbf384284
 1014ca0:	d3252401 	.word	0xd3252401
 1014ca4:	b6721a20 	.word	0xb6721a20
 1014ca8:	8f5ff3bf 	.word	0x8f5ff3bf
 1014cac:	1090f8d6 	.word	0x1090f8d6
 1014cb0:	0f00f1ba 	.word	0x0f00f1ba
 1014cb4:	1808bf18 	.word	0x1808bf18
 1014cb8:	2a641a0a 	.word	0x2a641a0a
 1014cbc:	1a41bf24 	.word	0x1a41bf24
 1014cc0:	d30f2905 	.word	0xd30f2905
 1014cc4:	25c0f8df 	.word	0x25c0f8df
 1014cc8:	bf284291 	.word	0xbf284291
 1014ccc:	d20a2400 	.word	0xd20a2400
 1014cd0:	0185eb06 	.word	0x0185eb06
 1014cd4:	64082402 	.word	0x64082402
 1014cd8:	21016bb0 	.word	0x21016bb0
 1014cdc:	430840a9 	.word	0x430840a9
 1014ce0:	e00063b0 	.word	0xe00063b0
 1014ce4:	f3bf2401 	.word	0xf3bf2401
 1014ce8:	b6628f5f 	.word	0xb6628f5f
 1014cec:	d1042c01 	.word	0xd1042c01
 1014cf0:	21116bb0 	.word	0x21116bb0
 1014cf4:	430840a9 	.word	0x430840a9
 1014cf8:	f1b963b0 	.word	0xf1b963b0
 1014cfc:	bf040f00 	.word	0xbf040f00
 1014d00:	f7ff200e 	.word	0xf7ff200e
 1014d04:	f1b8fbf7 	.word	0xf1b8fbf7
 1014d08:	bf1c0f00 	.word	0xbf1c0f00
 1014d0c:	4080f44f 	.word	0x4080f44f
 1014d10:	1e606038 	.word	0x1e606038
 1014d14:	43c04180 	.word	0x43c04180
 1014d18:	b0010fc0 	.word	0xb0010fc0
 1014d1c:	8ff0e8bd 	.word	0x8ff0e8bd
 1014d20:	b081b5f0 	.word	0xb081b5f0
 1014d24:	455cf8df 	.word	0x455cf8df
 1014d28:	0b806820 	.word	0x0b806820
 1014d2c:	0501f010 	.word	0x0501f010
 1014d30:	f44fd007 	.word	0xf44fd007
 1014d34:	f8c44080 	.word	0xf8c44080
 1014d38:	f3bf0080 	.word	0xf3bf0080
 1014d3c:	f3bf8f4f 	.word	0xf3bf8f4f
 1014d40:	f8df8f6f 	.word	0xf8df8f6f
 1014d44:	7830653c 	.word	0x7830653c
 1014d48:	6a30b1f8 	.word	0x6a30b1f8
 1014d4c:	528ff44f 	.word	0x528ff44f
 1014d50:	7100f44f 	.word	0x7100f44f
 1014d54:	f0034410 	.word	0xf0034410
 1014d58:	4607ffc1 	.word	0x4607ffc1
 1014d5c:	f44f6a30 	.word	0xf44f6a30
 1014d60:	f44f52d5 	.word	0xf44f52d5
 1014d64:	44107100 	.word	0x44107100
 1014d68:	ffb8f003 	.word	0xffb8f003
 1014d6c:	eb000840 	.word	0xeb000840
 1014d70:	ee000057 	.word	0xee000057
 1014d74:	eeb80a10 	.word	0xeeb80a10
 1014d78:	f0030a40 	.word	0xf0030a40
 1014d7c:	69f1ff0d 	.word	0x69f1ff0d
 1014d80:	0ac0eebc 	.word	0x0ac0eebc
 1014d84:	0a10ee10 	.word	0x0a10ee10
 1014d88:	b1154788 	.word	0xb1154788
 1014d8c:	4080f44f 	.word	0x4080f44f
 1014d90:	b0016020 	.word	0xb0016020
 1014d94:	0000bdf0 	.word	0x0000bdf0
 1014d98:	b081b5f0 	.word	0xb081b5f0
 1014d9c:	4480f04f 	.word	0x4480f04f
 1014da0:	f8df6920 	.word	0xf8df6920
 1014da4:	f04054e8 	.word	0xf04054e8
 1014da8:	61200001 	.word	0x61200001
 1014dac:	064068a8 	.word	0x064068a8
 1014db0:	2000d508 	.word	0x2000d508
 1014db4:	00b8f8c4 	.word	0x00b8f8c4
 1014db8:	f0406820 	.word	0xf0406820
 1014dbc:	60200004 	.word	0x60200004
 1014dc0:	60682040 	.word	0x60682040
 1014dc4:	064068a8 	.word	0x064068a8
 1014dc8:	f8dfd4fc 	.word	0xf8dfd4fc
 1014dcc:	f44f74b4 	.word	0xf44f74b4
 1014dd0:	6a38518c 	.word	0x6a38518c
 1014dd4:	f8df4408 	.word	0xf8df4408
 1014dd8:	f8c514b8 	.word	0xf8c514b8
 1014ddc:	f44f01c8 	.word	0xf44f01c8
 1014de0:	f8c5608c 	.word	0xf8c5608c
 1014de4:	200001d4 	.word	0x200001d4
 1014de8:	01d0f8c5 	.word	0x01d0f8c5
 1014dec:	60282040 	.word	0x60282040
 1014df0:	f0032006 	.word	0xf0032006
 1014df4:	7878ff81 	.word	0x7878ff81
 1014df8:	79004438 	.word	0x79004438
 1014dfc:	d80b2803 	.word	0xd80b2803
 1014e00:	f000e8df 	.word	0xf000e8df
 1014e04:	08050a02 	.word	0x08050a02
 1014e08:	7600f44f 	.word	0x7600f44f
 1014e0c:	f44fe004 	.word	0xf44fe004
 1014e10:	e0016600 	.word	0xe0016600
 1014e14:	6666f44f 	.word	0x6666f44f
 1014e18:	fe7ef000 	.word	0xfe7ef000
 1014e1c:	b2b66a79 	.word	0xb2b66a79
 1014e20:	f8df1840 	.word	0xf8df1840
 1014e24:	68091470 	.word	0x68091470
 1014e28:	0086eb00 	.word	0x0086eb00
 1014e2c:	68aa1c49 	.word	0x68aa1c49
 1014e30:	d5fc0652 	.word	0xd5fc0652
 1014e34:	20ecf8d4 	.word	0x20ecf8d4
 1014e38:	f0436ae3 	.word	0xf0436ae3
 1014e3c:	62e30302 	.word	0x62e30302
 1014e40:	1a806ae3 	.word	0x1a806ae3
 1014e44:	f0234348 	.word	0xf0234348
 1014e48:	62e30302 	.word	0x62e30302
 1014e4c:	00b8f8c4 	.word	0x00b8f8c4
 1014e50:	1081f241 	.word	0x1081f241
 1014e54:	f8c44348 	.word	0xf8c44348
 1014e58:	682000bc 	.word	0x682000bc
 1014e5c:	0002f040 	.word	0x0002f040
 1014e60:	b0016020 	.word	0xb0016020
 1014e64:	b430bdf0 	.word	0xb430bdf0
 1014e68:	2414f8df 	.word	0x2414f8df
 1014e6c:	18137050 	.word	0x18137050
 1014e70:	00047918 	.word	0x00047918
 1014e74:	f8dfd104 	.word	0xf8dfd104
 1014e78:	f8df4420 	.word	0xf8df4420
 1014e7c:	e0155420 	.word	0xe0155420
 1014e80:	d10d2802 	.word	0xd10d2802
 1014e84:	5418f8df 	.word	0x5418f8df
 1014e88:	440cf8df 	.word	0x440cf8df
 1014e8c:	00ad08ad 	.word	0x00ad08ad
 1014e90:	0501f045 	.word	0x0501f045
 1014e94:	25036025 	.word	0x25036025
 1014e98:	25026065 	.word	0x25026065
 1014e9c:	e00c60e5 	.word	0xe00c60e5
 1014ea0:	d10a2803 	.word	0xd10a2803
 1014ea4:	43f0f8df 	.word	0x43f0f8df
 1014ea8:	53f8f8df 	.word	0x53f8f8df
 1014eac:	00ad08ad 	.word	0x00ad08ad
 1014eb0:	0501f045 	.word	0x0501f045
 1014eb4:	25036025 	.word	0x25036025
 1014eb8:	799b6065 	.word	0x799b6065
 1014ebc:	0004b193 	.word	0x0004b193
 1014ec0:	33e4f8df 	.word	0x33e4f8df
 1014ec4:	f103d105 	.word	0xf103d105
 1014ec8:	6498003c 	.word	0x6498003c
 1014ecc:	bc306251 	.word	0xbc306251
 1014ed0:	28024770 	.word	0x28024770
 1014ed4:	f103bf07 	.word	0xf103bf07
 1014ed8:	f8c30090 	.word	0xf8c30090
 1014edc:	f1030090 	.word	0xf1030090
 1014ee0:	66180054 	.word	0x66180054
 1014ee4:	bc306251 	.word	0xbc306251
 1014ee8:	00004770 	.word	0x00004770
 1014eec:	f8dfb510 	.word	0xf8dfb510
 1014ef0:	46014390 	.word	0x46014390
 1014ef4:	68e27860 	.word	0x68e27860
 1014ef8:	f8df4790 	.word	0xf8df4790
 1014efc:	21800390 	.word	0x21800390
 1014f00:	68816001 	.word	0x68816001
 1014f04:	d5fc0609 	.word	0xd5fc0609
 1014f08:	03a0f8df 	.word	0x03a0f8df
 1014f0c:	f0416801 	.word	0xf0416801
 1014f10:	60010110 	.word	0x60010110
 1014f14:	44207860 	.word	0x44207860
 1014f18:	28037900 	.word	0x28037900
 1014f1c:	e8dfd809 	.word	0xe8dfd809
 1014f20:	0802f000 	.word	0x0802f000
 1014f24:	20010604 	.word	0x20010604
 1014f28:	2003e002 	.word	0x2003e002
 1014f2c:	2005e000 	.word	0x2005e000
 1014f30:	bd107020 	.word	0xbd107020
 1014f34:	4604b5f0 	.word	0x4604b5f0
 1014f38:	5344f8df 	.word	0x5344f8df
 1014f3c:	b0817868 	.word	0xb0817868
 1014f40:	d1354284 	.word	0xd1354284
 1014f44:	2368f8df 	.word	0x2368f8df
 1014f48:	60132313 	.word	0x60132313
 1014f4c:	60132300 	.word	0x60132300
 1014f50:	2360f8df 	.word	0x2360f8df
 1014f54:	60132380 	.word	0x60132380
 1014f58:	061b6853 	.word	0x061b6853
 1014f5c:	f8d2d4fc 	.word	0xf8d2d4fc
 1014f60:	78aa21fc 	.word	0x78aa21fc
 1014f64:	44284bd0 	.word	0x44284bd0
 1014f68:	0642eb02 	.word	0x0642eb02
 1014f6c:	0686eb03 	.word	0x0686eb03
 1014f70:	f0476ab7 	.word	0xf0476ab7
 1014f74:	62b77780 	.word	0x62b77780
 1014f78:	b1777987 	.word	0xb1777987
 1014f7c:	b91f7907 	.word	0xb91f7907
 1014f80:	0724f103 	.word	0x0724f103
 1014f84:	e008649f 	.word	0xe008649f
 1014f88:	bf072f02 	.word	0xbf072f02
 1014f8c:	079cf103 	.word	0x079cf103
 1014f90:	7090f8c3 	.word	0x7090f8c3
 1014f94:	076cf103 	.word	0x076cf103
 1014f98:	7a00661f 	.word	0x7a00661f
 1014f9c:	2a01b140 	.word	0x2a01b140
 1014fa0:	f103bf0c 	.word	0xf103bf0c
 1014fa4:	f1060024 	.word	0xf1060024
 1014fa8:	62700030 	.word	0x62700030
 1014fac:	62b048c2 	.word	0x62b048c2
 1014fb0:	4620696a 	.word	0x4620696a
 1014fb4:	78684790 	.word	0x78684790
 1014fb8:	bf044284 	.word	0xbf044284
 1014fbc:	70282000 	.word	0x70282000
 1014fc0:	bdf0b001 	.word	0xbdf0b001
 1014fc4:	41f0e92d 	.word	0x41f0e92d
 1014fc8:	68204cae 	.word	0x68204cae
 1014fcc:	f0100b80 	.word	0xf0100b80
 1014fd0:	d0070801 	.word	0xd0070801
 1014fd4:	4080f44f 	.word	0x4080f44f
 1014fd8:	0080f8c4 	.word	0x0080f8c4
 1014fdc:	8f4ff3bf 	.word	0x8f4ff3bf
 1014fe0:	8f6ff3bf 	.word	0x8f6ff3bf
 1014fe4:	4fa648ac 	.word	0x4fa648ac
 1014fe8:	08866800 	.word	0x08866800
 1014fec:	00b67838 	.word	0x00b67838
 1014ff0:	290b1e41 	.word	0x290b1e41
 1014ff4:	e8dfd858 	.word	0xe8dfd858
 1014ff8:	1006f001 	.word	0x1006f001
 1014ffc:	2c231d13 	.word	0x2c231d13
 1015000:	3e39342f 	.word	0x3e39342f
 1015004:	78784747 	.word	0x78784747
 1015008:	79804438 	.word	0x79804438
 101500c:	d14b2800 	.word	0xd14b2800
 1015010:	47806938 	.word	0x47806938
 1015014:	70382002 	.word	0x70382002
 1015018:	f7ffe046 	.word	0xf7ffe046
 101501c:	e02efebd 	.word	0xe02efebd
 1015020:	44387878 	.word	0x44387878
 1015024:	28007980 	.word	0x28007980
 1015028:	6938d13e 	.word	0x6938d13e
 101502c:	20044780 	.word	0x20044780
 1015030:	e0397038 	.word	0xe0397038
 1015034:	feb0f7ff 	.word	0xfeb0f7ff
 1015038:	478069b8 	.word	0x478069b8
 101503c:	e01f489f 	.word	0xe01f489f
 1015040:	44387878 	.word	0x44387878
 1015044:	bb787980 	.word	0xbb787980
 1015048:	47806938 	.word	0x47806938
 101504c:	70382006 	.word	0x70382006
 1015050:	2007e02a 	.word	0x2007e02a
 1015054:	e0277038 	.word	0xe0277038
 1015058:	478069b8 	.word	0x478069b8
 101505c:	70382008 	.word	0x70382008
 1015060:	69b8e022 	.word	0x69b8e022
 1015064:	20094780 	.word	0x20094780
 1015068:	e01d7038 	.word	0xe01d7038
 101506c:	478069b8 	.word	0x478069b8
 1015070:	7038200a 	.word	0x7038200a
 1015074:	f7ffe018 	.word	0xf7ffe018
 1015078:	69b8fe8f 	.word	0x69b8fe8f
 101507c:	48904780 	.word	0x48904780
 1015080:	200b62b8 	.word	0x200b62b8
 1015084:	e00f7038 	.word	0xe00f7038
 1015088:	42b16ab9 	.word	0x42b16ab9
 101508c:	1a70d214 	.word	0x1a70d214
 1015090:	fba04a8c 	.word	0xfba04a8c
 1015094:	054d2102 	.word	0x054d2102
 1015098:	2d010e2d 	.word	0x2d010e2d
 101509c:	69b8db03 	.word	0x69b8db03
 10150a0:	1e6d4780 	.word	0x1e6d4780
 10150a4:	62bed1fb 	.word	0x62bed1fb
 10150a8:	0f00f1b8 	.word	0x0f00f1b8
 10150ac:	f44fbf1c 	.word	0xf44fbf1c
 10150b0:	60204080 	.word	0x60204080
 10150b4:	81f0e8bd 	.word	0x81f0e8bd
 10150b8:	d208428e 	.word	0xd208428e
 10150bc:	4a811b88 	.word	0x4a811b88
 10150c0:	2102fba0 	.word	0x2102fba0
 10150c4:	f1c008c8 	.word	0xf1c008c8
 10150c8:	b2ed0502 	.word	0xb2ed0502
 10150cc:	280ce7e5 	.word	0x280ce7e5
 10150d0:	78b9d1e9 	.word	0x78b9d1e9
 10150d4:	eb014874 	.word	0xeb014874
 10150d8:	eb000241 	.word	0xeb000241
 10150dc:	6a400082 	.word	0x6a400082
 10150e0:	d1e04286 	.word	0xd1e04286
 10150e4:	e7da2501 	.word	0xe7da2501
 10150e8:	41f0e92d 	.word	0x41f0e92d
 10150ec:	610cf44f 	.word	0x610cf44f
 10150f0:	4f634d6d 	.word	0x4f634d6d
 10150f4:	6a384c70 	.word	0x6a384c70
 10150f8:	0830f105 	.word	0x0830f105
 10150fc:	f10562e8 	.word	0xf10562e8
 1015100:	f8c50624 	.word	0xf8c50624
 1015104:	44088024 	.word	0x44088024
 1015108:	63a862ac 	.word	0x63a862ac
 101510c:	632e2001 	.word	0x632e2001
 1015110:	f7ff636c 	.word	0xf7ff636c
 1015114:	f105f89a 	.word	0xf105f89a
 1015118:	f1050148 	.word	0xf1050148
 101511c:	63e90360 	.word	0x63e90360
 1015120:	64294969 	.word	0x64294969
 1015124:	6280f44f 	.word	0x6280f44f
 1015128:	440264e9 	.word	0x440264e9
 101512c:	666965a9 	.word	0x666965a9
 1015130:	019cf105 	.word	0x019cf105
 1015134:	f105656b 	.word	0xf105656b
 1015138:	f8c5036c 	.word	0xf8c5036c
 101513c:	49631090 	.word	0x49631090
 1015140:	64ae6468 	.word	0x64ae6468
 1015144:	65e8652a 	.word	0x65e8652a
 1015148:	66aa662b 	.word	0x66aa662b
 101514c:	0284f105 	.word	0x0284f105
 1015150:	1094f8c5 	.word	0x1094f8c5
 1015154:	0098f8c5 	.word	0x0098f8c5
 1015158:	809cf8c5 	.word	0x809cf8c5
 101515c:	10a0f8c5 	.word	0x10a0f8c5
 1015160:	602a6a38 	.word	0x602a6a38
 1015164:	60ea4a5a 	.word	0x60ea4a5a
 1015168:	612a4a5a 	.word	0x612a4a5a
 101516c:	616a2202 	.word	0x616a2202
 1015170:	61aa2200 	.word	0x61aa2200
 1015174:	61ea4a58 	.word	0x61ea4a58
 1015178:	622a2200 	.word	0x622a2200
 101517c:	620cf44f 	.word	0x620cf44f
 1015180:	00a4f8c5 	.word	0x00a4f8c5
 1015184:	60694402 	.word	0x60694402
 1015188:	f8c560a8 	.word	0xf8c560a8
 101518c:	f1051088 	.word	0xf1051088
 1015190:	67680178 	.word	0x67680178
 1015194:	f8c54851 	.word	0xf8c54851
 1015198:	f8c5208c 	.word	0xf8c5208c
 101519c:	66e96084 	.word	0x66e96084
 10151a0:	67ad672c 	.word	0x67ad672c
 10151a4:	f8c567e8 	.word	0xf8c567e8
 10151a8:	e8bd2080 	.word	0xe8bd2080
 10151ac:	483481f0 	.word	0x483481f0
 10151b0:	b9097801 	.word	0xb9097801
 10151b4:	477020ff 	.word	0x477020ff
 10151b8:	47707840 	.word	0x47707840
 10151bc:	eb00493a 	.word	0xeb00493a
 10151c0:	eb010240 	.word	0xeb010240
 10151c4:	4a2e0182 	.word	0x4a2e0182
 10151c8:	44137853 	.word	0x44137853
 10151cc:	b1237a1b 	.word	0xb1237a1b
 10151d0:	0324f101 	.word	0x0324f101
 10151d4:	4b3d624b 	.word	0x4b3d624b
 10151d8:	6a8be002 	.word	0x6a8be002
 10151dc:	7380f023 	.word	0x7380f023
 10151e0:	7090628b 	.word	0x7090628b
 10151e4:	7010200c 	.word	0x7010200c
 10151e8:	b5104770 	.word	0xb5104770
 10151ec:	20004c24 	.word	0x20004c24
 10151f0:	f7ff7020 	.word	0xf7ff7020
 10151f4:	6220f82a 	.word	0x6220f82a
 10151f8:	ff76f7ff 	.word	0xff76f7ff
 10151fc:	21014838 	.word	0x21014838
 1015200:	1204f8c0 	.word	0x1204f8c0
 1015204:	f8c04932 	.word	0xf8c04932
 1015208:	49321218 	.word	0x49321218
 101520c:	122cf8c0 	.word	0x122cf8c0
 1015210:	f8c02100 	.word	0xf8c02100
 1015214:	49331230 	.word	0x49331230
 1015218:	1234f8c0 	.word	0x1234f8c0
 101521c:	60012180 	.word	0x60012180
 1015220:	20074931 	.word	0x20074931
 1015224:	fd68f003 	.word	0xfd68f003
 1015228:	f899f000 	.word	0xf899f000
 101522c:	7180f44f 	.word	0x7180f44f
 1015230:	f04f4401 	.word	0xf04f4401
 1015234:	f0002040 	.word	0xf0002040
 1015238:	482cfecb 	.word	0x482cfecb
 101523c:	feb9f003 	.word	0xfeb9f003
 1015240:	f003482b 	.word	0xf003482b
 1015244:	482bfeb3 	.word	0x482bfeb3
 1015248:	febcf003 	.word	0xfebcf003
 101524c:	f04f482a 	.word	0xf04f482a
 1015250:	f8c12140 	.word	0xf8c12140
 1015254:	bd1000cc 	.word	0xbd1000cc
 1015258:	60c84909 	.word	0x60c84909
 101525c:	49084770 	.word	0x49084770
 1015260:	47706108 	.word	0x47706108
 1015264:	61484906 	.word	0x61484906
 1015268:	f0034770 	.word	0xf0034770
 101526c:	f003bea5 	.word	0xf003bea5
 1015270:	4903bea6 	.word	0x4903bea6
 1015274:	47706188 	.word	0x47706188
 1015278:	61c84901 	.word	0x61c84901
 101527c:	00004770 	.word	0x00004770
 1015280:	2001317c 	.word	0x2001317c
 1015284:	e000e100 	.word	0xe000e100
 1015288:	23c34601 	.word	0x23c34601
 101528c:	4001001c 	.word	0x4001001c
 1015290:	00003321 	.word	0x00003321
 1015294:	40004008 	.word	0x40004008
 1015298:	40010228 	.word	0x40010228
 101529c:	20016f84 	.word	0x20016f84
 10152a0:	20016fd8 	.word	0x20016fd8
 10152a4:	20016f9c 	.word	0x20016f9c
 10152a8:	20016f48 	.word	0x20016f48
 10152ac:	40004004 	.word	0x40004004
 10152b0:	400040c0 	.word	0x400040c0
 10152b4:	40010020 	.word	0x40010020
 10152b8:	03000230 	.word	0x03000230
 10152bc:	20016f6c 	.word	0x20016f6c
 10152c0:	20016f78 	.word	0x20016f78
 10152c4:	aaaaaaab 	.word	0xaaaaaaab
 10152c8:	03000100 	.word	0x03000100
 10152cc:	03000200 	.word	0x03000200
 10152d0:	e2004000 	.word	0xe2004000
 10152d4:	07027011 	.word	0x07027011
 10152d8:	fffff800 	.word	0xfffff800
 10152dc:	1b000230 	.word	0x1b000230
 10152e0:	4001000c 	.word	0x4001000c
 10152e4:	00fff800 	.word	0x00fff800
 10152e8:	000035c5 	.word	0x000035c5
 10152ec:	00003535 	.word	0x00003535
 10152f0:	00003467 	.word	0x00003467
 10152f4:	000034ed 	.word	0x000034ed
 10152f8:	01d03333 	.word	0x01d03333
 10152fc:	4604b570 	.word	0x4604b570
 1015300:	f7fe2006 	.word	0xf7fe2006
 1015304:	4605ff99 	.word	0x4605ff99
 1015308:	60b54e10 	.word	0x60b54e10
 101530c:	f7ff2018 	.word	0xf7ff2018
 1015310:	79a0f8cf 	.word	0x79a0f8cf
 1015314:	331cf244 	.word	0x331cf244
 1015318:	bf072802 	.word	0xbf072802
 101531c:	f645480c 	.word	0xf645480c
 1015320:	480c318e 	.word	0x480c318e
 1015324:	6071490c 	.word	0x6071490c
 1015328:	7100f44f 	.word	0x7100f44f
 101532c:	88a26030 	.word	0x88a26030
 1015330:	f0032000 	.word	0xf0032000
 1015334:	2018fe4f 	.word	0x2018fe4f
 1015338:	f8dcf7ff 	.word	0xf8dcf7ff
 101533c:	68204629 	.word	0x68204629
 1015340:	6200f44f 	.word	0x6200f44f
 1015344:	4070e8bd 	.word	0x4070e8bd
 1015348:	bec0f003 	.word	0xbec0f003
 101534c:	20013290 	.word	0x20013290
 1015350:	fea2c1b7 	.word	0xfea2c1b7
 1015354:	015d3e49 	.word	0x015d3e49
 1015358:	ffffa472 	.word	0xffffa472
 101535c:	48054770 	.word	0x48054770
 1015360:	48044770 	.word	0x48044770
 1015364:	0398f890 	.word	0x0398f890
 1015368:	49024770 	.word	0x49024770
 101536c:	0398f881 	.word	0x0398f881
 1015370:	00004770 	.word	0x00004770
 1015374:	2000d9dc 	.word	0x2000d9dc
 1015378:	47702061 	.word	0x47702061
 101537c:	47702000 	.word	0x47702000
 1015380:	ed2db510 	.word	0xed2db510
 1015384:	b0810a01 	.word	0xb0810a01
 1015388:	98014604 	.word	0x98014604
 101538c:	50c7f3c0 	.word	0x50c7f3c0
 1015390:	d10828ff 	.word	0xd10828ff
 1015394:	20009901 	.word	0x20009901
 1015398:	f0400249 	.word	0xf0400249
 101539c:	99018084 	.word	0x99018084
 10153a0:	d4142900 	.word	0xd4142900
 10153a4:	2801bd13 	.word	0x2801bd13
 10153a8:	a801da0b 	.word	0xa801da0b
 10153ac:	fecaf003 	.word	0xfecaf003
 10153b0:	db062801 	.word	0xdb062801
 10153b4:	fedaf003 	.word	0xfedaf003
 10153b8:	60012122 	.word	0x60012122
 10153bc:	0a3aed9f 	.word	0x0a3aed9f
 10153c0:	9a01bd13 	.word	0x9a01bd13
 10153c4:	f361217e 	.word	0xf361217e
 10153c8:	920152de 	.word	0x920152de
 10153cc:	9901387e 	.word	0x9901387e
 10153d0:	d5062900 	.word	0xd5062900
 10153d4:	fecaf003 	.word	0xfecaf003
 10153d8:	60012121 	.word	0x60012121
 10153dc:	0a33ed9f 	.word	0x0a33ed9f
 10153e0:	ed9dbd13 	.word	0xed9dbd13
 10153e4:	eddf0a01 	.word	0xeddf0a01
 10153e8:	eeb40a32 	.word	0xeeb40a32
 10153ec:	eef10a60 	.word	0xeef10a60
 10153f0:	d506fa10 	.word	0xd506fa10
 10153f4:	0a00eef0 	.word	0x0a00eef0
 10153f8:	0a20ee20 	.word	0x0a20ee20
 10153fc:	0a01ed8d 	.word	0x0a01ed8d
 1015400:	ed9d1e40 	.word	0xed9d1e40
 1015404:	eeff0a01 	.word	0xeeff0a01
 1015408:	ee700a00 	.word	0xee700a00
 101540c:	eeb70a20 	.word	0xeeb70a20
 1015410:	ee301a00 	.word	0xee301a00
 1015414:	ee800a01 	.word	0xee800a01
 1015418:	ee200a80 	.word	0xee200a80
 101541c:	eddf1a00 	.word	0xeddf1a00
 1015420:	ed9f1a25 	.word	0xed9f1a25
 1015424:	ee012a25 	.word	0xee012a25
 1015428:	eddf2a21 	.word	0xeddf2a21
 101542c:	ee421a24 	.word	0xee421a24
 1015430:	eeb01a01 	.word	0xeeb01a01
 1015434:	ee012a60 	.word	0xee012a60
 1015438:	ee222ac1 	.word	0xee222ac1
 101543c:	b2001a00 	.word	0xb2001a00
 1015440:	0a10ee00 	.word	0x0a10ee00
 1015444:	1ac0eef8 	.word	0x1ac0eef8
 1015448:	ed9fb954 	.word	0xed9fb954
 101544c:	ee210a1d 	.word	0xee210a1d
 1015450:	ee300a80 	.word	0xee300a80
 1015454:	ee300a41 	.word	0xee300a41
 1015458:	eddf0a20 	.word	0xeddf0a20
 101545c:	e0130a1a 	.word	0xe0130a1a
 1015460:	db142c01 	.word	0xdb142c01
 1015464:	0a18ed9f 	.word	0x0a18ed9f
 1015468:	0a80ee21 	.word	0x0a80ee21
 101546c:	3a17ed9f 	.word	0x3a17ed9f
 1015470:	2a17eddf 	.word	0x2a17eddf
 1015474:	0a43ee01 	.word	0x0a43ee01
 1015478:	2a16ed9f 	.word	0x2a16ed9f
 101547c:	0aa2ee00 	.word	0x0aa2ee00
 1015480:	0a82ee00 	.word	0x0a82ee00
 1015484:	0a14eddf 	.word	0x0a14eddf
 1015488:	0aa0ee01 	.word	0x0aa0ee01
 101548c:	ed9fbd13 	.word	0xed9fbd13
 1015490:	ed9f2a13 	.word	0xed9f2a13
 1015494:	ee200a13 	.word	0xee200a13
 1015498:	ee012a82 	.word	0xee012a82
 101549c:	ee002a40 	.word	0xee002a40
 10154a0:	ee322a80 	.word	0xee322a80
 10154a4:	bd130a21 	.word	0xbd130a21
 10154a8:	ff800000 	.word	0xff800000
 10154ac:	7fffffff 	.word	0x7fffffff
 10154b0:	3f3504f3 	.word	0x3f3504f3
 10154b4:	3e990215 	.word	0x3e990215
 10154b8:	3eccae11 	.word	0x3eccae11
 10154bc:	3f2aaac0 	.word	0x3f2aaac0
 10154c0:	33fbe8e8 	.word	0x33fbe8e8
 10154c4:	3f317216 	.word	0x3f317216
 10154c8:	33a13ef4 	.word	0x33a13ef4
 10154cc:	3ede5bd9 	.word	0x3ede5bd9
 10154d0:	32a93728 	.word	0x32a93728
 10154d4:	3ede5bd8 	.word	0x3ede5bd8
 10154d8:	3e9a2098 	.word	0x3e9a2098
 10154dc:	32a57060 	.word	0x32a57060
 10154e0:	3fb8aa3b 	.word	0x3fb8aa3b
 10154e4:	00000000 	.word	0x00000000
 10154e8:	0a10ee10 	.word	0x0a10ee10
 10154ec:	f00046f4 	.word	0xf00046f4
 10154f0:	ee00f803 	.word	0xee00f803
 10154f4:	47600a10 	.word	0x47600a10
 10154f8:	52c7f3c0 	.word	0x52c7f3c0
 10154fc:	dd093a7e 	.word	0xdd093a7e
 1015500:	da0c2a18 	.word	0xda0c2a18
 1015504:	417ff06f 	.word	0x417ff06f
 1015508:	ea2040d1 	.word	0xea2040d1
 101550c:	18400051 	.word	0x18400051
 1015510:	47704388 	.word	0x47704388
 1015514:	4000f000 	.word	0x4000f000
 1015518:	f040bf08 	.word	0xf040bf08
 101551c:	4770507e 	.word	0x4770507e
 1015520:	d0022801 	.word	0xd0022801
 1015524:	d0022802 	.word	0xd0022802
 1015528:	f7fee003 	.word	0xf7fee003
 101552c:	f7febf9f 	.word	0xf7febf9f
 1015530:	f7febfad 	.word	0xf7febfad
 1015534:	b500bf8f 	.word	0xb500bf8f
 1015538:	f7feb081 	.word	0xf7feb081
 101553c:	b110ff8f 	.word	0xb110ff8f
 1015540:	b0012000 	.word	0xb0012000
 1015544:	f7febd00 	.word	0xf7febd00
 1015548:	2800ff98 	.word	0x2800ff98
 101554c:	bf14b001 	.word	0xbf14b001
 1015550:	20022001 	.word	0x20022001
 1015554:	b500bd00 	.word	0xb500bd00
 1015558:	f7feb081 	.word	0xf7feb081
 101555c:	b958ff7f 	.word	0xb958ff7f
 1015560:	ff8bf7fe 	.word	0xff8bf7fe
 1015564:	481ab110 	.word	0x481ab110
 1015568:	bd00b001 	.word	0xbd00b001
 101556c:	ff95f7fe 	.word	0xff95f7fe
 1015570:	4818b110 	.word	0x4818b110
 1015574:	bd00b001 	.word	0xbd00b001
 1015578:	b0014817 	.word	0xb0014817
 101557c:	b500bd00 	.word	0xb500bd00
 1015580:	f7feb081 	.word	0xf7feb081
 1015584:	b958ff6b 	.word	0xb958ff6b
 1015588:	ff77f7fe 	.word	0xff77f7fe
 101558c:	4813b110 	.word	0x4813b110
 1015590:	bd00b001 	.word	0xbd00b001
 1015594:	ff81f7fe 	.word	0xff81f7fe
 1015598:	4811b110 	.word	0x4811b110
 101559c:	bd00b001 	.word	0xbd00b001
 10155a0:	b0014810 	.word	0xb0014810
 10155a4:	b500bd00 	.word	0xb500bd00
 10155a8:	f7feb081 	.word	0xf7feb081
 10155ac:	b958ff57 	.word	0xb958ff57
 10155b0:	ff63f7fe 	.word	0xff63f7fe
 10155b4:	4807b110 	.word	0x4807b110
 10155b8:	bd00b001 	.word	0xbd00b001
 10155bc:	ff6df7fe 	.word	0xff6df7fe
 10155c0:	4809b110 	.word	0x4809b110
 10155c4:	bd00b001 	.word	0xbd00b001
 10155c8:	b0014801 	.word	0xb0014801
 10155cc:	0000bd00 	.word	0x0000bd00
 10155d0:	066ff300 	.word	0x066ff300
 10155d4:	0337f980 	.word	0x0337f980
 10155d8:	0cdfe600 	.word	0x0cdfe600
 10155dc:	00b71b00 	.word	0x00b71b00
 10155e0:	005b8d80 	.word	0x005b8d80
 10155e4:	016e3600 	.word	0x016e3600
 10155e8:	019bfcc0 	.word	0x019bfcc0
 10155ec:	be04f004 	.word	0xbe04f004
 10155f0:	4604b510 	.word	0x4604b510
 10155f4:	b1087ae0 	.word	0xb1087ae0
 10155f8:	fe65f005 	.word	0xfe65f005
 10155fc:	48997a61 	.word	0x48997a61
 1015600:	d1082901 	.word	0xd1082901
 1015604:	f8b06801 	.word	0xf8b06801
 1015608:	1c492052 	.word	0x1c492052
 101560c:	68416001 	.word	0x68416001
 1015610:	60411889 	.word	0x60411889
 1015614:	6881e020 	.word	0x6881e020
 1015618:	60811c49 	.word	0x60811c49
 101561c:	1e897a61 	.word	0x1e897a61
 1015620:	d8192909 	.word	0xd8192909
 1015624:	f001e8df 	.word	0xf001e8df
 1015628:	090d0905 	.word	0x090d0905
 101562c:	11111511 	.word	0x11111511
 1015630:	69411511 	.word	0x69411511
 1015634:	61411c49 	.word	0x61411c49
 1015638:	6901e00e 	.word	0x6901e00e
 101563c:	61011c49 	.word	0x61011c49
 1015640:	68c1e00a 	.word	0x68c1e00a
 1015644:	60c11c49 	.word	0x60c11c49
 1015648:	6981e006 	.word	0x6981e006
 101564c:	61811c49 	.word	0x61811c49
 1015650:	69c1e002 	.word	0x69c1e002
 1015654:	61c11c49 	.word	0x61c11c49
 1015658:	00086c01 	.word	0x00086c01
 101565c:	4620d003 	.word	0x4620d003
 1015660:	4010e8bd 	.word	0x4010e8bd
 1015664:	bd104708 	.word	0xbd104708
 1015668:	6a134a7e 	.word	0x6a134a7e
 101566c:	62131c5b 	.word	0x62131c5b
 1015670:	185b6a53 	.word	0x185b6a53
 1015674:	6c526253 	.word	0x6c526253
 1015678:	bf180013 	.word	0xbf180013
 101567c:	47704710 	.word	0x47704710
 1015680:	6c894978 	.word	0x6c894978
 1015684:	bf18000a 	.word	0xbf18000a
 1015688:	47704708 	.word	0x47704708
 101568c:	d81d2806 	.word	0xd81d2806
 1015690:	f000e8df 	.word	0xf000e8df
 1015694:	091c1c04 	.word	0x091c1c04
 1015698:	0018130e 	.word	0x0018130e
 101569c:	6b414871 	.word	0x6b414871
 10156a0:	63411c49 	.word	0x63411c49
 10156a4:	486f4770 	.word	0x486f4770
 10156a8:	1c496bc1 	.word	0x1c496bc1
 10156ac:	477063c1 	.word	0x477063c1
 10156b0:	6b01486c 	.word	0x6b01486c
 10156b4:	63011c49 	.word	0x63011c49
 10156b8:	486a4770 	.word	0x486a4770
 10156bc:	1c496ac1 	.word	0x1c496ac1
 10156c0:	477062c1 	.word	0x477062c1
 10156c4:	6b814867 	.word	0x6b814867
 10156c8:	63811c49 	.word	0x63811c49
 10156cc:	49654770 	.word	0x49654770
 10156d0:	000a6cc9 	.word	0x000a6cc9
 10156d4:	4708bf18 	.word	0x4708bf18
 10156d8:	b5304770 	.word	0xb5304770
 10156dc:	4862b081 	.word	0x4862b081
 10156e0:	f0106800 	.word	0xf0106800
 10156e4:	d0000f03 	.word	0xd0000f03
 10156e8:	4c5ee7fe 	.word	0x4c5ee7fe
 10156ec:	f8842001 	.word	0xf8842001
 10156f0:	200c0050 	.word	0x200c0050
 10156f4:	fedcf7fe 	.word	0xfedcf7fe
 10156f8:	2500200d 	.word	0x2500200d
 10156fc:	fed8f7fe 	.word	0xfed8f7fe
 1015700:	f7fe200e 	.word	0xf7fe200e
 1015704:	4859fed5 	.word	0x4859fed5
 1015708:	f8c02101 	.word	0xf8c02101
 101570c:	f04f11c4 	.word	0xf04f11c4
 1015710:	f8c04162 	.word	0xf8c04162
 1015714:	210011d4 	.word	0x210011d4
 1015718:	11e8f8c0 	.word	0x11e8f8c0
 101571c:	f8c04954 	.word	0xf8c04954
 1015720:	214011ec 	.word	0x214011ec
 1015724:	f7fe6001 	.word	0xf7fe6001
 1015728:	2101fd7d 	.word	0x2101fd7d
 101572c:	f7fe2080 	.word	0xf7fe2080
 1015730:	f7fdfa4d 	.word	0xf7fdfa4d
 1015734:	484ffcd9 	.word	0x484ffcd9
 1015738:	f94bf7fe 	.word	0xf94bf7fe
 101573c:	f7fe484e 	.word	0xf7fe484e
 1015740:	f005f94c 	.word	0xf005f94c
 1015744:	2000fdd2 	.word	0x2000fdd2
 1015748:	fe21f005 	.word	0xfe21f005
 101574c:	f005484b 	.word	0xf005484b
 1015750:	484bfe2e 	.word	0x484bfe2e
 1015754:	fe2ef005 	.word	0xfe2ef005
 1015758:	f005484a 	.word	0xf005484a
 101575c:	484afe31 	.word	0x484afe31
 1015760:	fe2bf005 	.word	0xfe2bf005
 1015764:	fdaff005 	.word	0xfdaff005
 1015768:	fe9cf005 	.word	0xfe9cf005
 101576c:	4947201f 	.word	0x4947201f
 1015770:	f1046008 	.word	0xf1046008
 1015774:	21000040 	.word	0x21000040
 1015778:	23002200 	.word	0x23002200
 101577c:	4620c02e 	.word	0x4620c02e
 1015780:	fbc2f006 	.word	0xfbc2f006
 1015784:	fdaff006 	.word	0xfdaff006
 1015788:	f44f4841 	.word	0xf44f4841
 101578c:	f8c07180 	.word	0xf8c07180
 1015790:	22201180 	.word	0x22201180
 1015794:	2308f880 	.word	0x2308f880
 1015798:	60012240 	.word	0x60012240
 101579c:	4180f44f 	.word	0x4180f44f
 10157a0:	1180f8c0 	.word	0x1180f8c0
 10157a4:	230ef880 	.word	0x230ef880
 10157a8:	60012260 	.word	0x60012260
 10157ac:	5100f44f 	.word	0x5100f44f
 10157b0:	1180f8c0 	.word	0x1180f8c0
 10157b4:	230df880 	.word	0x230df880
 10157b8:	60012280 	.word	0x60012280
 10157bc:	5180f44f 	.word	0x5180f44f
 10157c0:	1180f8c0 	.word	0x1180f8c0
 10157c4:	230cf880 	.word	0x230cf880
 10157c8:	f44f6001 	.word	0xf44f6001
 10157cc:	f8c04100 	.word	0xf8c04100
 10157d0:	f8801180 	.word	0xf8801180
 10157d4:	6001230f 	.word	0x6001230f
 10157d8:	f7fe200e 	.word	0xf7fe200e
 10157dc:	b001fe8b 	.word	0xb001fe8b
 10157e0:	e8bd2019 	.word	0xe8bd2019
 10157e4:	f7fe4030 	.word	0xf7fe4030
 10157e8:	491ebe85 	.word	0x491ebe85
 10157ec:	2050f891 	.word	0x2050f891
 10157f0:	f04f4601 	.word	0xf04f4601
 10157f4:	f0064080 	.word	0xf0064080
 10157f8:	491abe99 	.word	0x491abe99
 10157fc:	0050f881 	.word	0x0050f881
 1015800:	f04f4601 	.word	0xf04f4601
 1015804:	f0064080 	.word	0xf0064080
 1015808:	4816bf21 	.word	0x4816bf21
 101580c:	0050f890 	.word	0x0050f890
 1015810:	00004770 	.word	0x00004770
 1015814:	b081b500 	.word	0xb081b500
 1015818:	fdecf006 	.word	0xfdecf006
 101581c:	fb7af006 	.word	0xfb7af006
 1015820:	f8904810 	.word	0xf8904810
 1015824:	28000050 	.word	0x28000050
 1015828:	481ad004 	.word	0x481ad004
 101582c:	04c06800 	.word	0x04c06800
 1015830:	bf30d400 	.word	0xbf30d400
 1015834:	bd00b001 	.word	0xbd00b001
 1015838:	4917b430 	.word	0x4917b430
 101583c:	c13cc83c 	.word	0xc13cc83c
 1015840:	4770bc30 	.word	0x4770bc30
 1015844:	4604b510 	.word	0x4604b510
 1015848:	ffbcf7fd 	.word	0xffbcf7fd
 101584c:	88a17ae2 	.word	0x88a17ae2
 1015850:	000cf104 	.word	0x000cf104
 1015854:	f8a7f7fe 	.word	0xf8a7f7fe
 1015858:	490288a0 	.word	0x490288a0
 101585c:	0052f8a1 	.word	0x0052f8a1
 1015860:	0000bd10 	.word	0x0000bd10
 1015864:	200130ec 	.word	0x200130ec
 1015868:	400e182c 	.word	0x400e182c
 101586c:	4001000c 	.word	0x4001000c
 1015870:	06041001 	.word	0x06041001
 1015874:	00003bf1 	.word	0x00003bf1
 1015878:	00003bed 	.word	0x00003bed
 101587c:	00003c69 	.word	0x00003c69
 1015880:	00003c81 	.word	0x00003c81
 1015884:	00003ccf 	.word	0x00003ccf
 1015888:	00003c8d 	.word	0x00003c8d
 101588c:	400000b4 	.word	0x400000b4
 1015890:	e000e100 	.word	0xe000e100
 1015894:	40000034 	.word	0x40000034
 1015898:	2001312c 	.word	0x2001312c
 101589c:	49aab9e1 	.word	0x49aab9e1
 10158a0:	f8c04aaa 	.word	0xf8c04aaa
 10158a4:	49aa1088 	.word	0x49aa1088
 10158a8:	1094f8c0 	.word	0x1094f8c0
 10158ac:	1090f8d0 	.word	0x1090f8d0
 10158b0:	0110f021 	.word	0x0110f021
 10158b4:	1090f8c0 	.word	0x1090f8c0
 10158b8:	6129f64c 	.word	0x6129f64c
 10158bc:	f6446381 	.word	0xf6446381
 10158c0:	63c17107 	.word	0x63c17107
 10158c4:	41b8f244 	.word	0x41b8f244
 10158c8:	49a26401 	.word	0x49a26401
 10158cc:	66c26681 	.word	0x66c26681
 10158d0:	1202f04f 	.word	0x1202f04f
 10158d4:	e0196702 	.word	0xe0196702
 10158d8:	f8c0499f 	.word	0xf8c0499f
 10158dc:	499f1088 	.word	0x499f1088
 10158e0:	1094f8c0 	.word	0x1094f8c0
 10158e4:	1090f8d0 	.word	0x1090f8d0
 10158e8:	0110f041 	.word	0x0110f041
 10158ec:	1090f8c0 	.word	0x1090f8c0
 10158f0:	6381499b 	.word	0x6381499b
 10158f4:	63c1499b 	.word	0x63c1499b
 10158f8:	613df64d 	.word	0x613df64d
 10158fc:	499a6401 	.word	0x499a6401
 1015900:	499a6681 	.word	0x499a6681
 1015904:	499a66c1 	.word	0x499a66c1
 1015908:	499a6701 	.word	0x499a6701
 101590c:	499a6741 	.word	0x499a6741
 1015910:	499a6441 	.word	0x499a6441
 1015914:	499a6481 	.word	0x499a6481
 1015918:	499a64c1 	.word	0x499a64c1
 101591c:	499a6501 	.word	0x499a6501
 1015920:	499a6541 	.word	0x499a6541
 1015924:	499a6581 	.word	0x499a6581
 1015928:	499a65c1 	.word	0x499a65c1
 101592c:	499a6601 	.word	0x499a6601
 1015930:	f6476641 	.word	0xf6476641
 1015934:	630171f9 	.word	0x630171f9
 1015938:	1090f8d0 	.word	0x1090f8d0
 101593c:	01c0f021 	.word	0x01c0f021
 1015940:	1090f8c0 	.word	0x1090f8c0
 1015944:	1090f8d0 	.word	0x1090f8d0
 1015948:	01c0f041 	.word	0x01c0f041
 101594c:	1090f8c0 	.word	0x1090f8c0
 1015950:	b5704770 	.word	0xb5704770
 1015954:	460d4604 	.word	0x460d4604
 1015958:	f0406ae0 	.word	0xf0406ae0
 101595c:	62e00001 	.word	0x62e00001
 1015960:	f4406b60 	.word	0xf4406b60
 1015964:	63604000 	.word	0x63604000
 1015968:	f4406820 	.word	0xf4406820
 101596c:	60203080 	.word	0x60203080
 1015970:	fde1f7ff 	.word	0xfde1f7ff
 1015974:	46324606 	.word	0x46324606
 1015978:	46204629 	.word	0x46204629
 101597c:	f8a5f000 	.word	0xf8a5f000
 1015980:	d1040030 	.word	0xd1040030
 1015984:	21072006 	.word	0x21072006
 1015988:	4b702204 	.word	0x4b702204
 101598c:	2007e005 	.word	0x2007e005
 1015990:	f44f2106 	.word	0xf44f2106
 1015994:	f44f2380 	.word	0xf44f2380
 1015998:	60a23280 	.word	0x60a23280
 101599c:	60e30209 	.word	0x60e30209
 10159a0:	f0416922 	.word	0xf0416922
 10159a4:	2380010a 	.word	0x2380010a
 10159a8:	4000ea41 	.word	0x4000ea41
 10159ac:	f0422101 	.word	0xf0422101
 10159b0:	61220201 	.word	0x61220201
 10159b4:	61624a79 	.word	0x61624a79
 10159b8:	61a24a79 	.word	0x61a24a79
 10159bc:	2204f20f 	.word	0x2204f20f
 10159c0:	462061e0 	.word	0x462061e0
 10159c4:	fe55f006 	.word	0xfe55f006
 10159c8:	f20f2380 	.word	0xf20f2380
 10159cc:	210222f8 	.word	0x210222f8
 10159d0:	f0064620 	.word	0xf0064620
 10159d4:	4631fe4e 	.word	0x4631fe4e
 10159d8:	f7ff4620 	.word	0xf7ff4620
 10159dc:	6ae0ff5f 	.word	0x6ae0ff5f
 10159e0:	00400840 	.word	0x00400840
 10159e4:	6b6062e0 	.word	0x6b6062e0
 10159e8:	4000f420 	.word	0x4000f420
 10159ec:	bd706360 	.word	0xbd706360
 10159f0:	0100f05f 	.word	0x0100f05f
 10159f4:	12ccf20f 	.word	0x12ccf20f
 10159f8:	3011f832 	.word	0x3011f832
 10159fc:	3021f840 	.word	0x3021f840
 1015a00:	f8321c49 	.word	0xf8321c49
 1015a04:	f8403011 	.word	0xf8403011
 1015a08:	1c493021 	.word	0x1c493021
 1015a0c:	3011f832 	.word	0x3011f832
 1015a10:	3021f840 	.word	0x3021f840
 1015a14:	f8321c49 	.word	0xf8321c49
 1015a18:	f8403011 	.word	0xf8403011
 1015a1c:	1c493021 	.word	0x1c493021
 1015a20:	dbe92980 	.word	0xdbe92980
 1015a24:	47702080 	.word	0x47702080
 1015a28:	b081b530 	.word	0xb081b530
 1015a2c:	6ae04604 	.word	0x6ae04604
 1015a30:	2302460d 	.word	0x2302460d
 1015a34:	428cf20f 	.word	0x428cf20f
 1015a38:	f0402101 	.word	0xf0402101
 1015a3c:	62e00001 	.word	0x62e00001
 1015a40:	f4406b60 	.word	0xf4406b60
 1015a44:	63604000 	.word	0x63604000
 1015a48:	f4206820 	.word	0xf4206820
 1015a4c:	60203080 	.word	0x60203080
 1015a50:	60a04854 	.word	0x60a04854
 1015a54:	60e04854 	.word	0x60e04854
 1015a58:	f0406920 	.word	0xf0406920
 1015a5c:	61200001 	.word	0x61200001
 1015a60:	3080f44f 	.word	0x3080f44f
 1015a64:	48516160 	.word	0x48516160
 1015a68:	485161a0 	.word	0x485161a0
 1015a6c:	462061e0 	.word	0x462061e0
 1015a70:	fdfff006 	.word	0xfdfff006
 1015a74:	f20f2380 	.word	0xf20f2380
 1015a78:	2102324c 	.word	0x2102324c
 1015a7c:	f0064620 	.word	0xf0064620
 1015a80:	6b60fdf8 	.word	0x6b60fdf8
 1015a84:	f020494b 	.word	0xf020494b
 1015a88:	636050f0 	.word	0x636050f0
 1015a8c:	f0406b60 	.word	0xf0406b60
 1015a90:	63606040 	.word	0x63606040
 1015a94:	0090f8d4 	.word	0x0090f8d4
 1015a98:	2d004008 	.word	0x2d004008
 1015a9c:	0090f8c4 	.word	0x0090f8c4
 1015aa0:	0090f8d4 	.word	0x0090f8d4
 1015aa4:	f040bf19 	.word	0xf040bf19
 1015aa8:	f44040ce 	.word	0xf44040ce
 1015aac:	49425018 	.word	0x49425018
 1015ab0:	f8c44308 	.word	0xf8c44308
 1015ab4:	6ae00090 	.word	0x6ae00090
 1015ab8:	00400840 	.word	0x00400840
 1015abc:	6b6062e0 	.word	0x6b6062e0
 1015ac0:	4000f420 	.word	0x4000f420
 1015ac4:	b0016360 	.word	0xb0016360
 1015ac8:	460bbd30 	.word	0x460bbd30
 1015acc:	da002b09 	.word	0xda002b09
 1015ad0:	2100b911 	.word	0x2100b911
 1015ad4:	e0132200 	.word	0xe0132200
 1015ad8:	f20fb93a 	.word	0xf20fb93a
 1015adc:	f20f4134 	.word	0xf20f4134
 1015ae0:	44194208 	.word	0x44194208
 1015ae4:	1c01f811 	.word	0x1c01f811
 1015ae8:	f20fe006 	.word	0xf20fe006
 1015aec:	f20f411c 	.word	0xf20f411c
 1015af0:	441932d8 	.word	0x441932d8
 1015af4:	1c01f811 	.word	0x1c01f811
 1015af8:	0283eb02 	.word	0x0283eb02
 1015afc:	2c04f852 	.word	0x2c04f852
 1015b00:	06496b43 	.word	0x06496b43
 1015b04:	51f0f001 	.word	0x51f0f001
 1015b08:	53f0f023 	.word	0x53f0f023
 1015b0c:	6b436343 	.word	0x6b436343
 1015b10:	63414319 	.word	0x63414319
 1015b14:	47706042 	.word	0x47706042
 1015b18:	b081b500 	.word	0xb081b500
 1015b1c:	fd0bf7ff 	.word	0xfd0bf7ff
 1015b20:	b0012800 	.word	0xb0012800
 1015b24:	f240bf0c 	.word	0xf240bf0c
 1015b28:	f44f1021 	.word	0xf44f1021
 1015b2c:	bd00708a 	.word	0xbd00708a
 1015b30:	4c22b510 	.word	0x4c22b510
 1015b34:	fcfff7ff 	.word	0xfcfff7ff
 1015b38:	bd104620 	.word	0xbd104620
 1015b3c:	4c20b510 	.word	0x4c20b510
 1015b40:	fcf9f7ff 	.word	0xfcf9f7ff
 1015b44:	bd104620 	.word	0xbd104620
 1015b48:	08202260 	.word	0x08202260
 1015b4c:	00040002 	.word	0x00040002
 1015b50:	000e00a8 	.word	0x000e00a8
 1015b54:	00780190 	.word	0x00780190
 1015b58:	08200dac 	.word	0x08200dac
 1015b5c:	00070054 	.word	0x00070054
 1015b60:	002f3ea0 	.word	0x002f3ea0
 1015b64:	000c5ff8 	.word	0x000c5ff8
 1015b68:	003c0190 	.word	0x003c0190
 1015b6c:	000e0001 	.word	0x000e0001
 1015b70:	00040001 	.word	0x00040001
 1015b74:	00100050 	.word	0x00100050
 1015b78:	07800180 	.word	0x07800180
 1015b7c:	016000f0 	.word	0x016000f0
 1015b80:	008c003c 	.word	0x008c003c
 1015b84:	001e000f 	.word	0x001e000f
 1015b88:	00070500 	.word	0x00070500
 1015b8c:	01700140 	.word	0x01700140
 1015b90:	00a00050 	.word	0x00a00050
 1015b94:	00280014 	.word	0x00280014
 1015b98:	000a0005 	.word	0x000a0005
 1015b9c:	107f0000 	.word	0x107f0000
 1015ba0:	1b7f0000 	.word	0x1b7f0000
 1015ba4:	01000104 	.word	0x01000104
 1015ba8:	00030002 	.word	0x00030002
 1015bac:	037f0000 	.word	0x037f0000
 1015bb0:	0007090a 	.word	0x0007090a
 1015bb4:	c50000ff 	.word	0xc50000ff
 1015bb8:	5d163c00 	.word	0x5d163c00
 1015bbc:	01c71c70 	.word	0x01c71c70
 1015bc0:	0ffffff0 	.word	0x0ffffff0
 1015bc4:	ffff0002 	.word	0xffff0002
 1015bc8:	ffe2fff6 	.word	0xffe2fff6
 1015bcc:	ff99ffc1 	.word	0xff99ffc1
 1015bd0:	ff5aff71 	.word	0xff5aff71
 1015bd4:	ff90ff61 	.word	0xff90ff61
 1015bd8:	0044ffe2 	.word	0x0044ffe2
 1015bdc:	00b60096 	.word	0x00b60096
 1015be0:	0024008f 	.word	0x0024008f
 1015be4:	ff1bff96 	.word	0xff1bff96
 1015be8:	ff2efeed 	.word	0xff2efeed
 1015bec:	00b3ffd8 	.word	0x00b3ffd8
 1015bf0:	019e0167 	.word	0x019e0167
 1015bf4:	00190127 	.word	0x00190127
 1015bf8:	fdd7fed1 	.word	0xfdd7fed1
 1015bfc:	fe7cfda8 	.word	0xfe7cfda8
 1015c00:	01fa0020 	.word	0x01fa0020
 1015c04:	0345033f 	.word	0x0345033f
 1015c08:	ff5d01d7 	.word	0xff5d01d7
 1015c0c:	fb3cfcc7 	.word	0xfb3cfcc7
 1015c10:	fdf7fb95 	.word	0xfdf7fb95
 1015c14:	052601a3 	.word	0x052601a3
 1015c18:	05d306e7 	.word	0x05d306e7
 1015c1c:	fc8c01f2 	.word	0xfc8c01f2
 1015c20:	f5f9f7ce 	.word	0xf5f9f7ce
 1015c24:	feb8f862 	.word	0xfeb8f862
 1015c28:	0d7306da 	.word	0x0d7306da
 1015c2c:	0a440f35 	.word	0x0a440f35
 1015c30:	f1c0ff4b 	.word	0xf1c0ff4b
 1015c34:	e517e718 	.word	0xe517e718
 1015c38:	07dcefcc 	.word	0x07dcefcc
 1015c3c:	4ec029d3 	.word	0x4ec029d3
 1015c40:	7fff6e0e 	.word	0x7fff6e0e
 1015c44:	6e0e7fff 	.word	0x6e0e7fff
 1015c48:	29d34ec0 	.word	0x29d34ec0
 1015c4c:	efcc07dc 	.word	0xefcc07dc
 1015c50:	e718e517 	.word	0xe718e517
 1015c54:	ff4bf1c0 	.word	0xff4bf1c0
 1015c58:	0f350a44 	.word	0x0f350a44
 1015c5c:	06da0d73 	.word	0x06da0d73
 1015c60:	f862feb8 	.word	0xf862feb8
 1015c64:	f7cef5f9 	.word	0xf7cef5f9
 1015c68:	01f2fc8c 	.word	0x01f2fc8c
 1015c6c:	06e705d3 	.word	0x06e705d3
 1015c70:	01a30526 	.word	0x01a30526
 1015c74:	fb95fdf7 	.word	0xfb95fdf7
 1015c78:	fcc7fb3c 	.word	0xfcc7fb3c
 1015c7c:	01d7ff5d 	.word	0x01d7ff5d
 1015c80:	033f0345 	.word	0x033f0345
 1015c84:	002001fa 	.word	0x002001fa
 1015c88:	fda8fe7c 	.word	0xfda8fe7c
 1015c8c:	fed1fdd7 	.word	0xfed1fdd7
 1015c90:	01270019 	.word	0x01270019
 1015c94:	0167019e 	.word	0x0167019e
 1015c98:	ffd800b3 	.word	0xffd800b3
 1015c9c:	feedff2e 	.word	0xfeedff2e
 1015ca0:	ff96ff1b 	.word	0xff96ff1b
 1015ca4:	008f0024 	.word	0x008f0024
 1015ca8:	009600b6 	.word	0x009600b6
 1015cac:	ffe20044 	.word	0xffe20044
 1015cb0:	ff61ff90 	.word	0xff61ff90
 1015cb4:	ff71ff5a 	.word	0xff71ff5a
 1015cb8:	ffc1ff99 	.word	0xffc1ff99
 1015cbc:	fff6ffe2 	.word	0xfff6ffe2
 1015cc0:	0002ffff 	.word	0x0002ffff
 1015cc4:	ffd20022 	.word	0xffd20022
 1015cc8:	ffb0ffc8 	.word	0xffb0ffc8
 1015ccc:	ff60ff8d 	.word	0xff60ff8d
 1015cd0:	fee4ff28 	.word	0xfee4ff28
 1015cd4:	fe35fe93 	.word	0xfe35fe93
 1015cd8:	fd50fdca 	.word	0xfd50fdca
 1015cdc:	fc33fcc8 	.word	0xfc33fcc8
 1015ce0:	fae4fb91 	.word	0xfae4fb91
 1015ce4:	f972fa2e 	.word	0xf972fa2e
 1015ce8:	f7f2f8b2 	.word	0xf7f2f8b2
 1015cec:	f685f737 	.word	0xf685f737
 1015cf0:	f556f5e3 	.word	0xf556f5e3
 1015cf4:	f495f4e4 	.word	0xf495f4e4
 1015cf8:	f47af46f 	.word	0xf47af46f
 1015cfc:	f540f4bd 	.word	0xf540f4bd
 1015d00:	f71ff609 	.word	0xf71ff609
 1015d04:	fa4bf889 	.word	0xfa4bf889
 1015d08:	feedfc6b 	.word	0xfeedfc6b
 1015d0c:	051d01d2 	.word	0x051d01d2
 1015d10:	0ce108cd 	.word	0x0ce108cd
 1015d14:	16271156 	.word	0x16271156
 1015d18:	20c71b50 	.word	0x20c71b50
 1015d1c:	2c7f2685 	.word	0x2c7f2685
 1015d20:	38f532a8 	.word	0x38f532a8
 1015d24:	45bd3f56 	.word	0x45bd3f56
 1015d28:	525c4c1a 	.word	0x525c4c1a
 1015d2c:	5e525875 	.word	0x5e525875
 1015d30:	691b63e4 	.word	0x691b63e4
 1015d34:	723c6de8 	.word	0x723c6de8
 1015d38:	794c760c 	.word	0x794c760c
 1015d3c:	7df57bf2 	.word	0x7df57bf2
 1015d40:	7fff7f50 	.word	0x7fff7f50
 1015d44:	7f507fff 	.word	0x7f507fff
 1015d48:	7bf27df5 	.word	0x7bf27df5
 1015d4c:	760c794c 	.word	0x760c794c
 1015d50:	6de8723c 	.word	0x6de8723c
 1015d54:	63e4691b 	.word	0x63e4691b
 1015d58:	58755e52 	.word	0x58755e52
 1015d5c:	4c1a525c 	.word	0x4c1a525c
 1015d60:	3f5645bd 	.word	0x3f5645bd
 1015d64:	32a838f5 	.word	0x32a838f5
 1015d68:	26852c7f 	.word	0x26852c7f
 1015d6c:	1b5020c7 	.word	0x1b5020c7
 1015d70:	11561627 	.word	0x11561627
 1015d74:	08cd0ce1 	.word	0x08cd0ce1
 1015d78:	01d2051d 	.word	0x01d2051d
 1015d7c:	fc6bfeed 	.word	0xfc6bfeed
 1015d80:	f889fa4b 	.word	0xf889fa4b
 1015d84:	f609f71f 	.word	0xf609f71f
 1015d88:	f4bdf540 	.word	0xf4bdf540
 1015d8c:	f46ff47a 	.word	0xf46ff47a
 1015d90:	f4e4f495 	.word	0xf4e4f495
 1015d94:	f5e3f556 	.word	0xf5e3f556
 1015d98:	f737f685 	.word	0xf737f685
 1015d9c:	f8b2f7f2 	.word	0xf8b2f7f2
 1015da0:	fa2ef972 	.word	0xfa2ef972
 1015da4:	fb91fae4 	.word	0xfb91fae4
 1015da8:	fcc8fc33 	.word	0xfcc8fc33
 1015dac:	fdcafd50 	.word	0xfdcafd50
 1015db0:	fe93fe35 	.word	0xfe93fe35
 1015db4:	ff28fee4 	.word	0xff28fee4
 1015db8:	ff8dff60 	.word	0xff8dff60
 1015dbc:	ffc8ffb0 	.word	0xffc8ffb0
 1015dc0:	0022ffd2 	.word	0x0022ffd2
 1015dc4:	0006000b 	.word	0x0006000b
 1015dc8:	ffc6fff2 	.word	0xffc6fff2
 1015dcc:	ff68ff90 	.word	0xff68ff90
 1015dd0:	ffadff6e 	.word	0xffadff6e
 1015dd4:	00690011 	.word	0x00690011
 1015dd8:	003c007e 	.word	0x003c007e
 1015ddc:	ff61ffc3 	.word	0xff61ffc3
 1015de0:	ffd3ff60 	.word	0xffd3ff60
 1015de4:	00e9007c 	.word	0x00e9007c
 1015de8:	000600c1 	.word	0x000600c1
 1015dec:	febdff25 	.word	0xfebdff25
 1015df0:	004aff2e 	.word	0x004aff2e
 1015df4:	01a1015f 	.word	0x01a1015f
 1015df8:	ff2e00bf 	.word	0xff2e00bf
 1015dfc:	fe0cfdf8 	.word	0xfe0cfdf8
 1015e00:	019fff8f 	.word	0x019fff8f
 1015e04:	022102cf 	.word	0x022102cf
 1015e08:	fd46ffcd 	.word	0xfd46ffcd
 1015e0c:	fdf9fc5d 	.word	0xfdf9fc5d
 1015e10:	0429014b 	.word	0x0429014b
 1015e14:	01780469 	.word	0x01780469
 1015e18:	fa12fd03 	.word	0xfa12fd03
 1015e1c:	ffcbfb07 	.word	0xffcbfb07
 1015e20:	0810057b 	.word	0x0810057b
 1015e24:	fdd7051d 	.word	0xfdd7051d
 1015e28:	f554f6d5 	.word	0xf554f6d5
 1015e2c:	0688fb8f 	.word	0x0688fb8f
 1015e30:	0e470f21 	.word	0x0e470f21
 1015e34:	f0180201 	.word	0xf0180201
 1015e38:	ea58e448 	.word	0xea58e448
 1015e3c:	3475071f 	.word	0x3475071f
 1015e40:	7fff62cd 	.word	0x7fff62cd
 1015e44:	62cd7fff 	.word	0x62cd7fff
 1015e48:	071f3475 	.word	0x071f3475
 1015e4c:	e448ea58 	.word	0xe448ea58
 1015e50:	0201f018 	.word	0x0201f018
 1015e54:	0f210e47 	.word	0x0f210e47
 1015e58:	fb8f0688 	.word	0xfb8f0688
 1015e5c:	f6d5f554 	.word	0xf6d5f554
 1015e60:	051dfdd7 	.word	0x051dfdd7
 1015e64:	057b0810 	.word	0x057b0810
 1015e68:	fb07ffcb 	.word	0xfb07ffcb
 1015e6c:	fd03fa12 	.word	0xfd03fa12
 1015e70:	04690178 	.word	0x04690178
 1015e74:	014b0429 	.word	0x014b0429
 1015e78:	fc5dfdf9 	.word	0xfc5dfdf9
 1015e7c:	ffcdfd46 	.word	0xffcdfd46
 1015e80:	02cf0221 	.word	0x02cf0221
 1015e84:	ff8f019f 	.word	0xff8f019f
 1015e88:	fdf8fe0c 	.word	0xfdf8fe0c
 1015e8c:	00bfff2e 	.word	0x00bfff2e
 1015e90:	015f01a1 	.word	0x015f01a1
 1015e94:	ff2e004a 	.word	0xff2e004a
 1015e98:	ff25febd 	.word	0xff25febd
 1015e9c:	00c10006 	.word	0x00c10006
 1015ea0:	007c00e9 	.word	0x007c00e9
 1015ea4:	ff60ffd3 	.word	0xff60ffd3
 1015ea8:	ffc3ff61 	.word	0xffc3ff61
 1015eac:	007e003c 	.word	0x007e003c
 1015eb0:	00110069 	.word	0x00110069
 1015eb4:	ff6effad 	.word	0xff6effad
 1015eb8:	ff90ff68 	.word	0xff90ff68
 1015ebc:	fff2ffc6 	.word	0xfff2ffc6
 1015ec0:	000b0006 	.word	0x000b0006
 1015ec4:	00007fff 	.word	0x00007fff
 1015ec8:	00046299 	.word	0x00046299
 1015ecc:	00080ce3 	.word	0x00080ce3
 1015ed0:	000bb72c 	.word	0x000bb72c
 1015ed4:	000f6176 	.word	0x000f6176
 1015ed8:	00130bc0 	.word	0x00130bc0
 1015edc:	0016b60a 	.word	0x0016b60a
 1015ee0:	001a6054 	.word	0x001a6054
 1015ee4:	001e0a9e 	.word	0x001e0a9e
 1015ee8:	0002314c 	.word	0x0002314c
 1015eec:	00040671 	.word	0x00040671
 1015ef0:	0005db96 	.word	0x0005db96
 1015ef4:	0007b0bb 	.word	0x0007b0bb
 1015ef8:	000985e0 	.word	0x000985e0
 1015efc:	000b5b05 	.word	0x000b5b05
 1015f00:	000d302a 	.word	0x000d302a
 1015f04:	000f054f 	.word	0x000f054f
 1015f08:	00000103 	.word	0x00000103
 1015f0c:	00000000 	.word	0x00000000
 1015f10:	01020204 	.word	0x01020204
 1015f14:	00000001 	.word	0x00000001
 1015f18:	4604b510 	.word	0x4604b510
 1015f1c:	fb43f7ff 	.word	0xfb43f7ff
 1015f20:	23004a4e 	.word	0x23004a4e
 1015f24:	2102fba0 	.word	0x2102fba0
 1015f28:	1e400cc8 	.word	0x1e400cc8
 1015f2c:	4c4c60a0 	.word	0x4c4c60a0
 1015f30:	6280f44f 	.word	0x6280f44f
 1015f34:	6100f04f 	.word	0x6100f04f
 1015f38:	f0064620 	.word	0xf0064620
 1015f3c:	4620fc04 	.word	0x4620fc04
 1015f40:	f44f2300 	.word	0xf44f2300
 1015f44:	f04f6200 	.word	0xf04f6200
 1015f48:	e8bd6100 	.word	0xe8bd6100
 1015f4c:	f0064010 	.word	0xf0064010
 1015f50:	e92dbbfa 	.word	0xe92dbbfa
 1015f54:	b08143f0 	.word	0xb08143f0
 1015f58:	4f424604 	.word	0x4f424604
 1015f5c:	6838460d 	.word	0x6838460d
 1015f60:	0b804616 	.word	0x0b804616
 1015f64:	0801f010 	.word	0x0801f010
 1015f68:	f44fd007 	.word	0xf44fd007
 1015f6c:	f8c74080 	.word	0xf8c74080
 1015f70:	f3bf0080 	.word	0xf3bf0080
 1015f74:	f3bf8f4f 	.word	0xf3bf8f4f
 1015f78:	200e8f6f 	.word	0x200e8f6f
 1015f7c:	fadbf7fe 	.word	0xfadbf7fe
 1015f80:	b9104681 	.word	0xb9104681
 1015f84:	f7fe200e 	.word	0xf7fe200e
 1015f88:	b11dfa93 	.word	0xb11dfa93
 1015f8c:	d0082d02 	.word	0xd0082d02
 1015f90:	e00ed307 	.word	0xe00ed307
 1015f94:	f8c46af0 	.word	0xf8c46af0
 1015f98:	6b3000a8 	.word	0x6b3000a8
 1015f9c:	6b7063a0 	.word	0x6b7063a0
 1015fa0:	6bb0e005 	.word	0x6bb0e005
 1015fa4:	00a8f8c4 	.word	0x00a8f8c4
 1015fa8:	63a06bf0 	.word	0x63a06bf0
 1015fac:	f8c46c30 	.word	0xf8c46c30
 1015fb0:	f1b900a4 	.word	0xf1b900a4
 1015fb4:	bf040f00 	.word	0xbf040f00
 1015fb8:	f7fe200e 	.word	0xf7fe200e
 1015fbc:	f1b8fa9b 	.word	0xf1b8fa9b
 1015fc0:	bf1c0f00 	.word	0xbf1c0f00
 1015fc4:	4080f44f 	.word	0x4080f44f
 1015fc8:	b0016038 	.word	0xb0016038
 1015fcc:	83f0e8bd 	.word	0x83f0e8bd
 1015fd0:	41f0e92d 	.word	0x41f0e92d
 1015fd4:	4e234680 	.word	0x4e234680
 1015fd8:	460d6830 	.word	0x460d6830
 1015fdc:	f0100b80 	.word	0xf0100b80
 1015fe0:	d0070701 	.word	0xd0070701
 1015fe4:	4080f44f 	.word	0x4080f44f
 1015fe8:	0080f8c6 	.word	0x0080f8c6
 1015fec:	8f4ff3bf 	.word	0x8f4ff3bf
 1015ff0:	8f6ff3bf 	.word	0x8f6ff3bf
 1015ff4:	f7fe200e 	.word	0xf7fe200e
 1015ff8:	4604fa9e 	.word	0x4604fa9e
 1015ffc:	200eb910 	.word	0x200eb910
 1016000:	fa56f7fe 	.word	0xfa56f7fe
 1016004:	f8c86828 	.word	0xf8c86828
 1016008:	6868009c 	.word	0x6868009c
 101600c:	00b4f8c8 	.word	0x00b4f8c8
 1016010:	f8c868a8 	.word	0xf8c868a8
 1016014:	68e800b8 	.word	0x68e800b8
 1016018:	00bcf8c8 	.word	0x00bcf8c8
 101601c:	f8c86928 	.word	0xf8c86928
 1016020:	696800d8 	.word	0x696800d8
 1016024:	00dcf8c8 	.word	0x00dcf8c8
 1016028:	f8c869a8 	.word	0xf8c869a8
 101602c:	69e80094 	.word	0x69e80094
 1016030:	0098f8c8 	.word	0x0098f8c8
 1016034:	f8c86a28 	.word	0xf8c86a28
 1016038:	6a6800ac 	.word	0x6a6800ac
 101603c:	00b0f8c8 	.word	0x00b0f8c8
 1016040:	f8c86aa8 	.word	0xf8c86aa8
 1016044:	b91400a0 	.word	0xb91400a0
 1016048:	f7fe200e 	.word	0xf7fe200e
 101604c:	b117fa53 	.word	0xb117fa53
 1016050:	4080f44f 	.word	0x4080f44f
 1016054:	e8bd6030 	.word	0xe8bd6030
 1016058:	000081f0 	.word	0x000081f0
 101605c:	8637bd06 	.word	0x8637bd06
 1016060:	400e0400 	.word	0x400e0400
 1016064:	e000e100 	.word	0xe000e100
 1016068:	0181eb00 	.word	0x0181eb00
 101606c:	6d09b510 	.word	0x6d09b510
 1016070:	68806882 	.word	0x68806882
 1016074:	f0221c52 	.word	0xf0221c52
 1016078:	18514200 	.word	0x18514200
 101607c:	00401c40 	.word	0x00401c40
 1016080:	f4f0fbb1 	.word	0xf4f0fbb1
 1016084:	f8b2f000 	.word	0xf8b2f000
 1016088:	bd101900 	.word	0xbd101900
 101608c:	4604b570 	.word	0x4604b570
 1016090:	460e484b 	.word	0x460e484b
 1016094:	f04f6060 	.word	0xf04f6060
 1016098:	f7ff5500 	.word	0xf7ff5500
 101609c:	b9b8fa4c 	.word	0xb9b8fa4c
 10160a0:	2044f20f 	.word	0x2044f20f
 10160a4:	0086eb00 	.word	0x0086eb00
 10160a8:	0c04f850 	.word	0x0c04f850
 10160ac:	484560e0 	.word	0x484560e0
 10160b0:	48456120 	.word	0x48456120
 10160b4:	626061e5 	.word	0x626061e5
 10160b8:	62a04844 	.word	0x62a04844
 10160bc:	62e04844 	.word	0x62e04844
 10160c0:	63204844 	.word	0x63204844
 10160c4:	5011f240 	.word	0x5011f240
 10160c8:	f44f61a0 	.word	0xf44f61a0
 10160cc:	e0167041 	.word	0xe0167041
 10160d0:	10f4f20f 	.word	0x10f4f20f
 10160d4:	0086eb00 	.word	0x0086eb00
 10160d8:	0c04f850 	.word	0x0c04f850
 10160dc:	483e60e0 	.word	0x483e60e0
 10160e0:	483e6120 	.word	0x483e6120
 10160e4:	626061e5 	.word	0x626061e5
 10160e8:	62a0483d 	.word	0x62a0483d
 10160ec:	62e0483d 	.word	0x62e0483d
 10160f0:	6320483d 	.word	0x6320483d
 10160f4:	3011f240 	.word	0x3011f240
 10160f8:	f24061a0 	.word	0xf24061a0
 10160fc:	61602006 	.word	0x61602006
 1016100:	11e8f247 	.word	0x11e8f247
 1016104:	6007f44f 	.word	0x6007f44f
 1016108:	66206521 	.word	0x66206521
 101610c:	67222201 	.word	0x67222201
 1016110:	f8c42202 	.word	0xf8c42202
 1016114:	22012080 	.word	0x22012080
 1016118:	66606561 	.word	0x66606561
 101611c:	22026762 	.word	0x22026762
 1016120:	2084f8c4 	.word	0x2084f8c4
 1016124:	65a12201 	.word	0x65a12201
 1016128:	67a266a0 	.word	0x67a266a0
 101612c:	f8c42202 	.word	0xf8c42202
 1016130:	65e12088 	.word	0x65e12088
 1016134:	01c8f20f 	.word	0x01c8f20f
 1016138:	200166e0 	.word	0x200166e0
 101613c:	200067e0 	.word	0x200067e0
 1016140:	208cf8c4 	.word	0x208cf8c4
 1016144:	0380eb04 	.word	0x0380eb04
 1016148:	2010f831 	.word	0x2010f831
 101614c:	f8c31c40 	.word	0xf8c31c40
 1016150:	eb042400 	.word	0xeb042400
 1016154:	f8310380 	.word	0xf8310380
 1016158:	1c402010 	.word	0x1c402010
 101615c:	2400f8c3 	.word	0x2400f8c3
 1016160:	0380eb04 	.word	0x0380eb04
 1016164:	2010f831 	.word	0x2010f831
 1016168:	28211c40 	.word	0x28211c40
 101616c:	2400f8c3 	.word	0x2400f8c3
 1016170:	f64fdbe8 	.word	0xf64fdbe8
 1016174:	f20f70e5 	.word	0xf20f70e5
 1016178:	f8c401cc 	.word	0xf8c401cc
 101617c:	20010600 	.word	0x20010600
 1016180:	0380eb04 	.word	0x0380eb04
 1016184:	2010f831 	.word	0x2010f831
 1016188:	f8c31c40 	.word	0xf8c31c40
 101618c:	eb042600 	.word	0xeb042600
 1016190:	f8310380 	.word	0xf8310380
 1016194:	1c402010 	.word	0x1c402010
 1016198:	2600f8c3 	.word	0x2600f8c3
 101619c:	0380eb04 	.word	0x0380eb04
 10161a0:	2010f831 	.word	0x2010f831
 10161a4:	f8c31c40 	.word	0xf8c31c40
 10161a8:	eb042600 	.word	0xeb042600
 10161ac:	f8310380 	.word	0xf8310380
 10161b0:	1c402010 	.word	0x1c402010
 10161b4:	f8c32841 	.word	0xf8c32841
 10161b8:	dbe12600 	.word	0xdbe12600
 10161bc:	0000bd70 	.word	0x0000bd70
 10161c0:	02010001 	.word	0x02010001
 10161c4:	3084035f 	.word	0x3084035f
 10161c8:	1120035f 	.word	0x1120035f
 10161cc:	000a01af 	.word	0x000a01af
 10161d0:	114001af 	.word	0x114001af
 10161d4:	000800d7 	.word	0x000800d7
 10161d8:	184201af 	.word	0x184201af
 10161dc:	112001af 	.word	0x112001af
 10161e0:	000900d7 	.word	0x000900d7
 10161e4:	114000d7 	.word	0x114000d7
 10161e8:	0009006b 	.word	0x0009006b
 10161ec:	b081b500 	.word	0xb081b500
 10161f0:	f9a1f7ff 	.word	0xf9a1f7ff
 10161f4:	b0012800 	.word	0xb0012800
 10161f8:	20d2bf0c 	.word	0x20d2bf0c
 10161fc:	bd0020e8 	.word	0xbd0020e8
 1016200:	ffbe0000 	.word	0xffbe0000
 1016204:	ff88ff89 	.word	0xff88ff89
 1016208:	00e70000 	.word	0x00e70000
 101620c:	019b01b7 	.word	0x019b01b7
 1016210:	fd430000 	.word	0xfd430000
 1016214:	fb4dfaf3 	.word	0xfb4dfaf3
 1016218:	08ee0000 	.word	0x08ee0000
 101621c:	1c9413ba 	.word	0x1c9413ba
 1016220:	1c942000 	.word	0x1c942000
 1016224:	08ee13ba 	.word	0x08ee13ba
 1016228:	fb4d0000 	.word	0xfb4d0000
 101622c:	fd43faf3 	.word	0xfd43faf3
 1016230:	019b0000 	.word	0x019b0000
 1016234:	00e701b7 	.word	0x00e701b7
 1016238:	ff880000 	.word	0xff880000
 101623c:	ffbeff89 	.word	0xffbeff89
 1016240:	00000000 	.word	0x00000000
 1016244:	fff6ffe5 	.word	0xfff6ffe5
 1016248:	00130000 	.word	0x00130000
 101624c:	003d002a 	.word	0x003d002a
 1016250:	002e0041 	.word	0x002e0041
 1016254:	ffbf0000 	.word	0xffbf0000
 1016258:	ff4bff7b 	.word	0xff4bff7b
 101625c:	ff86ff4a 	.word	0xff86ff4a
 1016260:	00a20000 	.word	0x00a20000
 1016264:	01ab0142 	.word	0x01ab0142
 1016268:	011701a7 	.word	0x011701a7
 101626c:	fe910000 	.word	0xfe910000
 1016270:	fc2ffd25 	.word	0xfc2ffd25
 1016274:	fd60fc25 	.word	0xfd60fc25
 1016278:	03de0000 	.word	0x03de0000
 101627c:	0d540888 	.word	0x0d540888
 1016280:	1454117f 	.word	0x1454117f
 1016284:	14541555 	.word	0x14541555
 1016288:	0d54117f 	.word	0x0d54117f
 101628c:	03de0888 	.word	0x03de0888
 1016290:	fd600000 	.word	0xfd600000
 1016294:	fc2ffc25 	.word	0xfc2ffc25
 1016298:	fe91fd25 	.word	0xfe91fd25
 101629c:	01170000 	.word	0x01170000
 10162a0:	01ab01a7 	.word	0x01ab01a7
 10162a4:	00a20142 	.word	0x00a20142
 10162a8:	ff860000 	.word	0xff860000
 10162ac:	ff4bff4a 	.word	0xff4bff4a
 10162b0:	ffbfff7b 	.word	0xffbfff7b
 10162b4:	002e0000 	.word	0x002e0000
 10162b8:	003d0041 	.word	0x003d0041
 10162bc:	0013002a 	.word	0x0013002a
 10162c0:	fff60000 	.word	0xfff60000
 10162c4:	0000ffe5 	.word	0x0000ffe5
 10162c8:	00046299 	.word	0x00046299
 10162cc:	00080ce3 	.word	0x00080ce3
 10162d0:	000bb72c 	.word	0x000bb72c
 10162d4:	000f6176 	.word	0x000f6176
 10162d8:	00130bc0 	.word	0x00130bc0
 10162dc:	0016b60a 	.word	0x0016b60a
 10162e0:	001a6054 	.word	0x001a6054
 10162e4:	001e0a9e 	.word	0x001e0a9e
 10162e8:	0002314c 	.word	0x0002314c
 10162ec:	00040671 	.word	0x00040671
 10162f0:	0005db96 	.word	0x0005db96
 10162f4:	0007b0bb 	.word	0x0007b0bb
 10162f8:	000985e0 	.word	0x000985e0
 10162fc:	000b5b05 	.word	0x000b5b05
 1016300:	000d302a 	.word	0x000d302a
 1016304:	000f054f 	.word	0x000f054f
 1016308:	3106f240 	.word	0x3106f240
 101630c:	7224f44f 	.word	0x7224f44f
 1016310:	4ce1b5f0 	.word	0x4ce1b5f0
 1016314:	f894b08b 	.word	0xf894b08b
 1016318:	f8df0091 	.word	0xf8df0091
 101631c:	fb115e84 	.word	0xfb115e84
 1016320:	4421f100 	.word	0x4421f100
 1016324:	f894188e 	.word	0xf894188e
 1016328:	b1511094 	.word	0xb1511094
 101632c:	0388f8d5 	.word	0x0388f8d5
 1016330:	2095f894 	.word	0x2095f894
 1016334:	00800880 	.word	0x00800880
 1016338:	46306881 	.word	0x46306881
 101633c:	fb7df006 	.word	0xfb7df006
 1016340:	f8d5e00f 	.word	0xf8d5e00f
 1016344:	088f1388 	.word	0x088f1388
 1016348:	b92000bf 	.word	0xb92000bf
 101634c:	221368b9 	.word	0x221368b9
 1016350:	f0064668 	.word	0xf0064668
 1016354:	68b9fb2e 	.word	0x68b9fb2e
 1016358:	466a2349 	.word	0x466a2349
 101635c:	f0064630 	.word	0xf0064630
 1016360:	f894fb2e 	.word	0xf894fb2e
 1016364:	f8941093 	.word	0xf8941093
 1016368:	1c400091 	.word	0x1c400091
 101636c:	0091f884 	.word	0x0091f884
 1016370:	292fb2c0 	.word	0x292fb2c0
 1016374:	212fbfc8 	.word	0x212fbfc8
 1016378:	d1304288 	.word	0xd1304288
 101637c:	0140eb00 	.word	0x0140eb00
 1016380:	21000048 	.word	0x21000048
 1016384:	009cf8a4 	.word	0x009cf8a4
 1016388:	4080f04f 	.word	0x4080f04f
 101638c:	10c4f8c0 	.word	0x10c4f8c0
 1016390:	f4416ac1 	.word	0xf4416ac1
 1016394:	62c13100 	.word	0x62c13100
 1016398:	5000f44f 	.word	0x5000f44f
 101639c:	20026028 	.word	0x20026028
 10163a0:	0092f884 	.word	0x0092f884
 10163a4:	fce5f7fd 	.word	0xfce5f7fd
 10163a8:	f8944605 	.word	0xf8944605
 10163ac:	b1700094 	.word	0xb1700094
 10163b0:	bf042d01 	.word	0xbf042d01
 10163b4:	f7ff2001 	.word	0xf7ff2001
 10163b8:	2000f8b3 	.word	0x2000f8b3
 10163bc:	fa15f7ff 	.word	0xfa15f7ff
 10163c0:	f04f4629 	.word	0xf04f4629
 10163c4:	f7ff4080 	.word	0xf7ff4080
 10163c8:	b00bfac4 	.word	0xb00bfac4
 10163cc:	f7ffbdf0 	.word	0xf7ffbdf0
 10163d0:	4602f8b2 	.word	0x4602f8b2
 10163d4:	f04f4629 	.word	0xf04f4629
 10163d8:	f7ff4080 	.word	0xf7ff4080
 10163dc:	b00bfb76 	.word	0xb00bfb76
 10163e0:	b510bdf0 	.word	0xb510bdf0
 10163e4:	f8944cac 	.word	0xf8944cac
 10163e8:	28010092 	.word	0x28010092
 10163ec:	f7ffbf08 	.word	0xf7ffbf08
 10163f0:	f894ff8b 	.word	0xf894ff8b
 10163f4:	b1500089 	.word	0xb1500089
 10163f8:	ffd9f003 	.word	0xffd9f003
 10163fc:	e8bdb118 	.word	0xe8bdb118
 1016400:	f0034010 	.word	0xf0034010
 1016404:	e8bdbfdc 	.word	0xe8bdbfdc
 1016408:	f0004010 	.word	0xf0004010
 101640c:	bd10bf8d 	.word	0xbd10bf8d
 1016410:	e92d48a1 	.word	0xe92d48a1
 1016414:	b0814ff0 	.word	0xb0814ff0
 1016418:	0a00f04f 	.word	0x0a00f04f
 101641c:	ed2d46d0 	.word	0xed2d46d0
 1016420:	e9d08b04 	.word	0xe9d08b04
 1016424:	300a0100 	.word	0x300a0100
 1016428:	0100f141 	.word	0x0100f141
 101642c:	23002214 	.word	0x23002214
 1016430:	fb08f002 	.word	0xfb08f002
 1016434:	4a98b084 	.word	0x4a98b084
 1016438:	25002600 	.word	0x25002600
 101643c:	aa02e9cd 	.word	0xaa02e9cd
 1016440:	f8d22400 	.word	0xf8d22400
 1016444:	f04fc0a0 	.word	0xf04fc0a0
 1016448:	46020e14 	.word	0x46020e14
 101644c:	e9dc084b 	.word	0xe9dc084b
 1016450:	ea4f97fe 	.word	0xea4f97fe
 1016454:	429f0232 	.word	0x429f0232
 1016458:	d801d307 	.word	0xd801d307
 101645c:	d3044591 	.word	0xd3044591
 1016460:	0809eb18 	.word	0x0809eb18
 1016464:	1c6d417e 	.word	0x1c6d417e
 1016468:	e9dde00d 	.word	0xe9dde00d
 101646c:	e9cd2302 	.word	0xe9cd2302
 1016470:	464a2300 	.word	0x464a2300
 1016474:	e9dd463b 	.word	0xe9dd463b
 1016478:	eb199700 	.word	0xeb199700
 101647c:	417b0202 	.word	0x417b0202
 1016480:	2302e9cd 	.word	0x2302e9cd
 1016484:	f1be1c64 	.word	0xf1be1c64
 1016488:	f10c0e01 	.word	0xf10c0e01
 101648c:	d1dc0c08 	.word	0xd1dc0c08
 1016490:	f8904881 	.word	0xf8904881
 1016494:	2800008e 	.word	0x2800008e
 1016498:	bf07b2e8 	.word	0xbf07b2e8
 101649c:	8a7ceddf 	.word	0x8a7ceddf
 10164a0:	8a0eeeb2 	.word	0x8a0eeeb2
 10164a4:	8a7beddf 	.word	0x8a7beddf
 10164a8:	8a06eeb2 	.word	0x8a06eeb2
 10164ac:	bf1a2800 	.word	0xbf1a2800
 10164b0:	2800b2e0 	.word	0x2800b2e0
 10164b4:	a000f88d 	.word	0xa000f88d
 10164b8:	80dff000 	.word	0x80dff000
 10164bc:	21000628 	.word	0x21000628
 10164c0:	6050eb18 	.word	0x6050eb18
 10164c4:	462ab2ed 	.word	0x462ab2ed
 10164c8:	9a80ed9f 	.word	0x9a80ed9f
 10164cc:	0a49eeb0 	.word	0x0a49eeb0
 10164d0:	23004171 	.word	0x23004171
 10164d4:	fab6f002 	.word	0xfab6f002
 10164d8:	20144681 	.word	0x20144681
 10164dc:	2309fba0 	.word	0x2309fba0
 10164e0:	fb00460f 	.word	0xfb00460f
 10164e4:	2b003307 	.word	0x2b003307
 10164e8:	2a02d801 	.word	0x2a02d801
 10164ec:	4610d310 	.word	0x4610d310
 10164f0:	f0024619 	.word	0xf0024619
 10164f4:	ee00fb2d 	.word	0xee00fb2d
 10164f8:	20010a10 	.word	0x20010a10
 10164fc:	ff40f7fe 	.word	0xff40f7fe
 1016500:	0a40eef0 	.word	0x0a40eef0
 1016504:	1a04eeb2 	.word	0x1a04eeb2
 1016508:	0a49eeb0 	.word	0x0a49eeb0
 101650c:	0a81ee00 	.word	0x0a81ee00
 1016510:	0a68eeb4 	.word	0x0a68eeb4
 1016514:	fa10eef1 	.word	0xfa10eef1
 1016518:	2d01d427 	.word	0x2d01d427
 101651c:	b2e4bf1c 	.word	0xb2e4bf1c
 1016520:	d0222c01 	.word	0xd0222c01
 1016524:	46394648 	.word	0x46394648
 1016528:	fb12f002 	.word	0xfb12f002
 101652c:	0a90ee09 	.word	0x0a90ee09
 1016530:	e9dd2100 	.word	0xe9dd2100
 1016534:	eb122302 	.word	0xeb122302
 1016538:	46220054 	.word	0x46220054
 101653c:	23004159 	.word	0x23004159
 1016540:	fa80f002 	.word	0xfa80f002
 1016544:	fb04f002 	.word	0xfb04f002
 1016548:	0a10ee00 	.word	0x0a10ee00
 101654c:	ee892001 	.word	0xee892001
 1016550:	f7fe0a80 	.word	0xf7fe0a80
 1016554:	eef2ff15 	.word	0xeef2ff15
 1016558:	ee200a04 	.word	0xee200a04
 101655c:	eeb40a20 	.word	0xeeb40a20
 1016560:	eef10a48 	.word	0xeef10a48
 1016564:	f280fa10 	.word	0xf280fa10
 1016568:	e9dd8085 	.word	0xe9dd8085
 101656c:	06202302 	.word	0x06202302
 1016570:	eb122100 	.word	0xeb122100
 1016574:	b2e26050 	.word	0xb2e26050
 1016578:	a000f88d 	.word	0xa000f88d
 101657c:	e9cd46d0 	.word	0xe9cd46d0
 1016580:	4159aa02 	.word	0x4159aa02
 1016584:	f0022300 	.word	0xf0022300
 1016588:	4a43fa5d 	.word	0x4a43fa5d
 101658c:	25002600 	.word	0x25002600
 1016590:	f8d22400 	.word	0xf8d22400
 1016594:	f04fc0a0 	.word	0xf04fc0a0
 1016598:	46020e14 	.word	0x46020e14
 101659c:	e9dc084b 	.word	0xe9dc084b
 10165a0:	ea4f97fe 	.word	0xea4f97fe
 10165a4:	429f0232 	.word	0x429f0232
 10165a8:	d801d307 	.word	0xd801d307
 10165ac:	d3044591 	.word	0xd3044591
 10165b0:	0809eb18 	.word	0x0809eb18
 10165b4:	1c6d417e 	.word	0x1c6d417e
 10165b8:	e9dde00a 	.word	0xe9dde00a
 10165bc:	469b2302 	.word	0x469b2302
 10165c0:	eb12463b 	.word	0xeb12463b
 10165c4:	eb4b0209 	.word	0xeb4b0209
 10165c8:	e9cd0303 	.word	0xe9cd0303
 10165cc:	1c642302 	.word	0x1c642302
 10165d0:	0e01f1be 	.word	0x0e01f1be
 10165d4:	0c08f10c 	.word	0x0c08f10c
 10165d8:	b2edd1df 	.word	0xb2edd1df
 10165dc:	bfa42d02 	.word	0xbfa42d02
 10165e0:	2c02b2e4 	.word	0x2c02b2e4
 10165e4:	2100db49 	.word	0x2100db49
 10165e8:	0055eb18 	.word	0x0055eb18
 10165ec:	4171462a 	.word	0x4171462a
 10165f0:	f0022300 	.word	0xf0022300
 10165f4:	4681fa27 	.word	0x4681fa27
 10165f8:	fba02014 	.word	0xfba02014
 10165fc:	460f2309 	.word	0x460f2309
 1016600:	3307fb00 	.word	0x3307fb00
 1016604:	d8012b00 	.word	0xd8012b00
 1016608:	d30c2a02 	.word	0xd30c2a02
 101660c:	46194610 	.word	0x46194610
 1016610:	fa9ef002 	.word	0xfa9ef002
 1016614:	0a10ee00 	.word	0x0a10ee00
 1016618:	f7fe2001 	.word	0xf7fe2001
 101661c:	eef2feb1 	.word	0xeef2feb1
 1016620:	ee000a04 	.word	0xee000a04
 1016624:	eeb49a20 	.word	0xeeb49a20
 1016628:	eef19a68 	.word	0xeef19a68
 101662c:	d424fa10 	.word	0xd424fa10
 1016630:	46394648 	.word	0x46394648
 1016634:	fa8cf002 	.word	0xfa8cf002
 1016638:	0a90ee08 	.word	0x0a90ee08
 101663c:	e9dd2100 	.word	0xe9dd2100
 1016640:	eb122302 	.word	0xeb122302
 1016644:	46220054 	.word	0x46220054
 1016648:	23004159 	.word	0x23004159
 101664c:	f9faf002 	.word	0xf9faf002
 1016650:	fa7ef002 	.word	0xfa7ef002
 1016654:	0a10ee00 	.word	0x0a10ee00
 1016658:	ee882001 	.word	0xee882001
 101665c:	f7fe0a80 	.word	0xf7fe0a80
 1016660:	eef2fe8f 	.word	0xeef2fe8f
 1016664:	ee200a04 	.word	0xee200a04
 1016668:	eeb40a20 	.word	0xeeb40a20
 101666c:	eef10a48 	.word	0xeef10a48
 1016670:	db02fa10 	.word	0xdb02fa10
 1016674:	f88d2001 	.word	0xf88d2001
 1016678:	f89d0000 	.word	0xf89d0000
 101667c:	49060000 	.word	0x49060000
 1016680:	f881b004 	.word	0xf881b004
 1016684:	ecbd008f 	.word	0xecbd008f
 1016688:	b0018b04 	.word	0xb0018b04
 101668c:	8ff0e8bd 	.word	0x8ff0e8bd
 1016690:	42640000 	.word	0x42640000
 1016694:	42540000 	.word	0x42540000
 1016698:	20004930 	.word	0x20004930
 101669c:	4ff0e92d 	.word	0x4ff0e92d
 10166a0:	2000b081 	.word	0x2000b081
 10166a4:	f8df4681 	.word	0xf8df4681
 10166a8:	ed2d8e48 	.word	0xed2d8e48
 10166ac:	b0928b0a 	.word	0xb0928b0a
 10166b0:	711bf44f 	.word	0x711bf44f
 10166b4:	0000e9cd 	.word	0x0000e9cd
 10166b8:	00a0f8d8 	.word	0x00a0f8d8
 10166bc:	8a8eeddf 	.word	0x8a8eeddf
 10166c0:	9a04eeb2 	.word	0x9a04eeb2
 10166c4:	8a01ed9f 	.word	0x8a01ed9f
 10166c8:	bf00e002 	.word	0xbf00e002
 10166cc:	c1ee6666 	.word	0xc1ee6666
 10166d0:	0a01eb00 	.word	0x0a01eb00
 10166d4:	6193f44f 	.word	0x6193f44f
 10166d8:	18454604 	.word	0x18454604
 10166dc:	6700e9d5 	.word	0x6700e9d5
 10166e0:	eeb02f00 	.word	0xeeb02f00
 10166e4:	d8010a48 	.word	0xd8010a48
 10166e8:	d30e2e02 	.word	0xd30e2e02
 10166ec:	46394630 	.word	0x46394630
 10166f0:	fa2ef002 	.word	0xfa2ef002
 10166f4:	0a10ee00 	.word	0x0a10ee00
 10166f8:	f7fe2001 	.word	0xf7fe2001
 10166fc:	eef0fe41 	.word	0xeef0fe41
 1016700:	eeb00a40 	.word	0xeeb00a40
 1016704:	ee000a48 	.word	0xee000a48
 1016708:	f1a90a89 	.word	0xf1a90a89
 101670c:	2861000f 	.word	0x2861000f
 1016710:	0a00ed84 	.word	0x0a00ed84
 1016714:	e9ddd21b 	.word	0xe9ddd21b
 1016718:	eeb50100 	.word	0xeeb50100
 101671c:	19800a40 	.word	0x19800a40
 1016720:	eef14179 	.word	0xeef14179
 1016724:	e9cdfa10 	.word	0xe9cdfa10
 1016728:	bf480100 	.word	0xbf480100
 101672c:	d40c2000 	.word	0xd40c2000
 1016730:	0a68eeb4 	.word	0x0a68eeb4
 1016734:	fa10eef1 	.word	0xfa10eef1
 1016738:	20ffbfa8 	.word	0x20ffbfa8
 101673c:	f7feda05 	.word	0xf7feda05
 1016740:	eebdfed3 	.word	0xeebdfed3
 1016744:	ee100ac0 	.word	0xee100ac0
 1016748:	f88a0a10 	.word	0xf88a0a10
 101674c:	f1090000 	.word	0xf1090000
 1016750:	35080901 	.word	0x35080901
 1016754:	f1b91d24 	.word	0xf1b91d24
 1016758:	f10a0f7f 	.word	0xf10a0f7f
 101675c:	dbbd0a01 	.word	0xdbbd0a01
 1016760:	0100e9dd 	.word	0x0100e9dd
 1016764:	f1413030 	.word	0xf1413030
 1016768:	22610100 	.word	0x22610100
 101676c:	f0022300 	.word	0xf0022300
 1016770:	e9cdf969 	.word	0xe9cdf969
 1016774:	20000108 	.word	0x20000108
 1016778:	26002100 	.word	0x26002100
 101677c:	0a09f04f 	.word	0x0a09f04f
 1016780:	2308e9dd 	.word	0x2308e9dd
 1016784:	4502fbaa 	.word	0x4502fbaa
 1016788:	20a0f8d8 	.word	0x20a0f8d8
 101678c:	5503fb0a 	.word	0x5503fb0a
 1016790:	63a2f44f 	.word	0x63a2f44f
 1016794:	e9d2441a 	.word	0xe9d2441a
 1016798:	08e42300 	.word	0x08e42300
 101679c:	0fd5ebb3 	.word	0x0fd5ebb3
 10167a0:	7445ea44 	.word	0x7445ea44
 10167a4:	bf28d805 	.word	0xbf28d805
 10167a8:	d20242a2 	.word	0xd20242a2
 10167ac:	46194610 	.word	0x46194610
 10167b0:	f8d82601 	.word	0xf8d82601
 10167b4:	f44f20a0 	.word	0xf44f20a0
 10167b8:	271063a3 	.word	0x271063a3
 10167bc:	0903eb02 	.word	0x0903eb02
 10167c0:	2300e9d9 	.word	0x2300e9d9
 10167c4:	0fd5ebb3 	.word	0x0fd5ebb3
 10167c8:	bf28d805 	.word	0xbf28d805
 10167cc:	d20242a2 	.word	0xd20242a2
 10167d0:	41591880 	.word	0x41591880
 10167d4:	1c7f1c76 	.word	0x1c7f1c76
 10167d8:	2302e9d9 	.word	0x2302e9d9
 10167dc:	0fd5ebb3 	.word	0x0fd5ebb3
 10167e0:	bf28d805 	.word	0xbf28d805
 10167e4:	d20242a2 	.word	0xd20242a2
 10167e8:	41591880 	.word	0x41591880
 10167ec:	1c7f1c76 	.word	0x1c7f1c76
 10167f0:	2304e9d9 	.word	0x2304e9d9
 10167f4:	0fd5ebb3 	.word	0x0fd5ebb3
 10167f8:	bf28d805 	.word	0xbf28d805
 10167fc:	d20242a2 	.word	0xd20242a2
 1016800:	41591880 	.word	0x41591880
 1016804:	1c7f1c76 	.word	0x1c7f1c76
 1016808:	2306e9d9 	.word	0x2306e9d9
 101680c:	0fd5ebb3 	.word	0x0fd5ebb3
 1016810:	bf28d805 	.word	0xbf28d805
 1016814:	d20242a2 	.word	0xd20242a2
 1016818:	41591880 	.word	0x41591880
 101681c:	1c7f1c76 	.word	0x1c7f1c76
 1016820:	2f70b2bf 	.word	0x2f70b2bf
 1016824:	0920f109 	.word	0x0920f109
 1016828:	0432dbca 	.word	0x0432dbca
 101682c:	eb102300 	.word	0xeb102300
 1016830:	b2b24052 	.word	0xb2b24052
 1016834:	8a48eef0 	.word	0x8a48eef0
 1016838:	f0024159 	.word	0xf0024159
 101683c:	2900f903 	.word	0x2900f903
 1016840:	2802d801 	.word	0x2802d801
 1016844:	f002d30a 	.word	0xf002d30a
 1016848:	ee00f983 	.word	0xee00f983
 101684c:	20010a10 	.word	0x20010a10
 1016850:	fd96f7fe 	.word	0xfd96f7fe
 1016854:	0a04eef2 	.word	0x0a04eef2
 1016858:	8a20ee40 	.word	0x8a20ee40
 101685c:	0a05eeb2 	.word	0x0a05eeb2
 1016860:	ee782600 	.word	0xee782600
 1016864:	27009a80 	.word	0x27009a80
 1016868:	0a03eeb1 	.word	0x0a03eeb1
 101686c:	0408f108 	.word	0x0408f108
 1016870:	aa80ee38 	.word	0xaa80ee38
 1016874:	0500f05f 	.word	0x0500f05f
 1016878:	9ac5ed9f 	.word	0x9ac5ed9f
 101687c:	aac5eddf 	.word	0xaac5eddf
 1016880:	bac5ed9f 	.word	0xbac5ed9f
 1016884:	bac5eddf 	.word	0xbac5eddf
 1016888:	cac5ed9f 	.word	0xcac5ed9f
 101688c:	00a0f8d8 	.word	0x00a0f8d8
 1016890:	010ff1a7 	.word	0x010ff1a7
 1016894:	0a00f04f 	.word	0x0a00f04f
 1016898:	29611940 	.word	0x29611940
 101689c:	ca00edd0 	.word	0xca00edd0
 10168a0:	d2147820 	.word	0xd2147820
 10168a4:	bf4707c2 	.word	0xbf4707c2
 10168a8:	0a4ceeb0 	.word	0x0a4ceeb0
 10168ac:	0a4aeef0 	.word	0x0a4aeef0
 10168b0:	0a6beeb0 	.word	0x0a6beeb0
 10168b4:	0a69eef0 	.word	0x0a69eef0
 10168b8:	0a6ceeb4 	.word	0x0a6ceeb4
 10168bc:	fa10eef1 	.word	0xfa10eef1
 10168c0:	eef4bf42 	.word	0xeef4bf42
 10168c4:	eef10a6c 	.word	0xeef10a6c
 10168c8:	f04ffa10 	.word	0xf04ffa10
 10168cc:	07800a01 	.word	0x07800a01
 10168d0:	2961d519 	.word	0x2961d519
 10168d4:	f7fdd212 	.word	0xf7fdd212
 10168d8:	4681fa04 	.word	0x4681fa04
 10168dc:	fa4cf7fd 	.word	0xfa4cf7fd
 10168e0:	eef04448 	.word	0xeef04448
 10168e4:	f8100a4a 	.word	0xf8100a4a
 10168e8:	1e400c01 	.word	0x1e400c01
 10168ec:	eb08b2c0 	.word	0xeb08b2c0
 10168f0:	ed900080 	.word	0xed900080
 10168f4:	e01b0a31 	.word	0xe01b0a31
 10168f8:	437f0001 	.word	0x437f0001
 10168fc:	0a4beeb0 	.word	0x0a4beeb0
 1016900:	0a4aeef0 	.word	0x0a4aeef0
 1016904:	2961e014 	.word	0x2961e014
 1016908:	f7fdd20e 	.word	0xf7fdd20e
 101690c:	4681f9ea 	.word	0x4681f9ea
 1016910:	fa32f7fd 	.word	0xfa32f7fd
 1016914:	f8104448 	.word	0xf8104448
 1016918:	1e400c01 	.word	0x1e400c01
 101691c:	eb08b2c0 	.word	0xeb08b2c0
 1016920:	ed900080 	.word	0xed900080
 1016924:	e0010a29 	.word	0xe0010a29
 1016928:	0a6aeeb0 	.word	0x0a6aeeb0
 101692c:	0a69eef0 	.word	0x0a69eef0
 1016930:	0a6ceeb4 	.word	0x0a6ceeb4
 1016934:	fa10eef1 	.word	0xfa10eef1
 1016938:	eef4bf44 	.word	0xeef4bf44
 101693c:	eef10a6c 	.word	0xeef10a6c
 1016940:	d509fa10 	.word	0xd509fa10
 1016944:	eeb42601 	.word	0xeeb42601
 1016948:	eef19a6c 	.word	0xeef19a6c
 101694c:	f04afa10 	.word	0xf04afa10
 1016950:	bf480a06 	.word	0xbf480a06
 1016954:	9a6ceeb0 	.word	0x9a6ceeb0
 1016958:	90a0f8d8 	.word	0x90a0f8d8
 101695c:	1c641d2d 	.word	0x1c641d2d
 1016960:	0007eb09 	.word	0x0007eb09
 1016964:	2f7f1c7f 	.word	0x2f7f1c7f
 1016968:	a1fcf880 	.word	0xa1fcf880
 101696c:	f898db8e 	.word	0xf898db8e
 1016970:	f898008a 	.word	0xf898008a
 1016974:	43081090 	.word	0x43081090
 1016978:	840bf000 	.word	0x840bf000
 101697c:	f0002e00 	.word	0xf0002e00
 1016980:	eeb283dc 	.word	0xeeb283dc
 1016984:	eddf0a06 	.word	0xeddf0a06
 1016988:	ed9f0a87 	.word	0xed9f0a87
 101698c:	20001a87 	.word	0x20001a87
 1016990:	21002600 	.word	0x21002600
 1016994:	72fff64f 	.word	0x72fff64f
 1016998:	0401eb08 	.word	0x0401eb08
 101699c:	f1c12300 	.word	0xf1c12300
 10169a0:	34080e7f 	.word	0x34080e7f
 10169a4:	7aceea5f 	.word	0x7aceea5f
 10169a8:	1a41eef0 	.word	0x1a41eef0
 10169ac:	0581eb09 	.word	0x0581eb09
 10169b0:	eb09d51e 	.word	0xeb09d51e
 10169b4:	f8930301 	.word	0xf8930301
 10169b8:	f00331fc 	.word	0xf00331fc
 10169bc:	2b04031c 	.word	0x2b04031c
 10169c0:	811bf040 	.word	0x811bf040
 10169c4:	23017824 	.word	0x23017824
 10169c8:	2a00ed95 	.word	0x2a00ed95
 10169cc:	06a4460f 	.word	0x06a4460f
 10169d0:	eef1bf44 	.word	0xeef1bf44
 10169d4:	ee322a00 	.word	0xee322a00
 10169d8:	eddf2a22 	.word	0xeddf2a22
 10169dc:	eeb42a74 	.word	0xeeb42a74
 10169e0:	eef12a62 	.word	0xeef12a62
 10169e4:	bfa4fa10 	.word	0xbfa4fa10
 10169e8:	1a42eef0 	.word	0x1a42eef0
 10169ec:	1c49468c 	.word	0x1c49468c
 10169f0:	0e5eea5f 	.word	0x0e5eea5f
 10169f4:	8043f000 	.word	0x8043f000
 10169f8:	0401eb09 	.word	0x0401eb09
 10169fc:	41fcf894 	.word	0x41fcf894
 1016a00:	041cf004 	.word	0x041cf004
 1016a04:	d13a2c04 	.word	0xd13a2c04
 1016a08:	0481eb09 	.word	0x0481eb09
 1016a0c:	460f1c5b 	.word	0x460f1c5b
 1016a10:	2a00ed94 	.word	0x2a00ed94
 1016a14:	0401eb08 	.word	0x0401eb08
 1016a18:	06a47a24 	.word	0x06a47a24
 1016a1c:	eef1bf44 	.word	0xeef1bf44
 1016a20:	ee322a00 	.word	0xee322a00
 1016a24:	eef42a22 	.word	0xeef42a22
 1016a28:	eef11a42 	.word	0xeef11a42
 1016a2c:	bf44fa10 	.word	0xbf44fa10
 1016a30:	1a42eef0 	.word	0x1a42eef0
 1016a34:	1c49468c 	.word	0x1c49468c
 1016a38:	0401eb09 	.word	0x0401eb09
 1016a3c:	41fcf894 	.word	0x41fcf894
 1016a40:	041cf004 	.word	0x041cf004
 1016a44:	d11a2c04 	.word	0xd11a2c04
 1016a48:	0481eb09 	.word	0x0481eb09
 1016a4c:	460f1c5b 	.word	0x460f1c5b
 1016a50:	2a00ed94 	.word	0x2a00ed94
 1016a54:	0401eb08 	.word	0x0401eb08
 1016a58:	06a47a24 	.word	0x06a47a24
 1016a5c:	eef1bf44 	.word	0xeef1bf44
 1016a60:	ee322a00 	.word	0xee322a00
 1016a64:	eef42a22 	.word	0xeef42a22
 1016a68:	eef11a42 	.word	0xeef11a42
 1016a6c:	bf44fa10 	.word	0xbf44fa10
 1016a70:	1a42eef0 	.word	0x1a42eef0
 1016a74:	1c49468c 	.word	0x1c49468c
 1016a78:	0e01f1be 	.word	0x0e01f1be
 1016a7c:	fa1fd1bc 	.word	0xfa1fd1bc
 1016a80:	f1befe83 	.word	0xf1befe83
 1016a84:	f0000f00 	.word	0xf0000f00
 1016a88:	f64f80b8 	.word	0xf64f80b8
 1016a8c:	42a274ff 	.word	0x42a274ff
 1016a90:	fc8cfa1f 	.word	0xfc8cfa1f
 1016a94:	ebacd025 	.word	0xebacd025
 1016a98:	2c050402 	.word	0x2c050402
 1016a9c:	eb09da21 	.word	0xeb09da21
 1016aa0:	ed940482 	.word	0xed940482
 1016aa4:	eb082a00 	.word	0xeb082a00
 1016aa8:	7a240402 	.word	0x7a240402
 1016aac:	eb0806a4 	.word	0xeb0806a4
 1016ab0:	7a24040c 	.word	0x7a24040c
 1016ab4:	eef1bf44 	.word	0xeef1bf44
 1016ab8:	ee322a00 	.word	0xee322a00
 1016abc:	06a42a22 	.word	0x06a42a22
 1016ac0:	eef1bf44 	.word	0xeef1bf44
 1016ac4:	ee712a00 	.word	0xee712a00
 1016ac8:	eeb41aa2 	.word	0xeeb41aa2
 1016acc:	eef12a61 	.word	0xeef12a61
 1016ad0:	d50ffa10 	.word	0xd50ffa10
 1016ad4:	f892444a 	.word	0xf892444a
 1016ad8:	f00441fc 	.word	0xf00441fc
 1016adc:	f88204df 	.word	0xf88204df
 1016ae0:	eb0941fc 	.word	0xeb0941fc
 1016ae4:	f892020c 	.word	0xf892020c
 1016ae8:	f04ee1fc 	.word	0xf04ee1fc
 1016aec:	f8820e20 	.word	0xf8820e20
 1016af0:	4662e1fc 	.word	0x4662e1fc
 1016af4:	469eb29b 	.word	0x469eb29b
 1016af8:	0f01f1be 	.word	0x0f01f1be
 1016afc:	2401d161 	.word	0x2401d161
 1016b00:	fa87fa1f 	.word	0xfa87fa1f
 1016b04:	0f00f1ba 	.word	0x0f00f1ba
 1016b08:	eef0bf08 	.word	0xeef0bf08
 1016b0c:	d0121a41 	.word	0xd0121a41
 1016b10:	b2ad1e7d 	.word	0xb2ad1e7d
 1016b14:	0a85eb09 	.word	0x0a85eb09
 1016b18:	1a00edda 	.word	0x1a00edda
 1016b1c:	0a05eb08 	.word	0x0a05eb08
 1016b20:	a008f89a 	.word	0xa008f89a
 1016b24:	0a0cf00a 	.word	0x0a0cf00a
 1016b28:	0f0cf1ba 	.word	0x0f0cf1ba
 1016b2c:	eeb1bf04 	.word	0xeeb1bf04
 1016b30:	ee712a00 	.word	0xee712a00
 1016b34:	fa1f1a82 	.word	0xfa1f1a82
 1016b38:	f1bbfb87 	.word	0xf1bbfb87
 1016b3c:	bf080f7e 	.word	0xbf080f7e
 1016b40:	2a41eeb0 	.word	0x2a41eeb0
 1016b44:	f107d014 	.word	0xf107d014
 1016b48:	fa1f0a01 	.word	0xfa1f0a01
 1016b4c:	eb09fa8a 	.word	0xeb09fa8a
 1016b50:	ed9b0b8a 	.word	0xed9b0b8a
 1016b54:	eb082a00 	.word	0xeb082a00
 1016b58:	f89b0b0a 	.word	0xf89b0b0a
 1016b5c:	f00bb008 	.word	0xf00bb008
 1016b60:	f1bb0b14 	.word	0xf1bb0b14
 1016b64:	bf040f14 	.word	0xbf040f14
 1016b68:	2a00eef1 	.word	0x2a00eef1
 1016b6c:	2a22ee32 	.word	0x2a22ee32
 1016b70:	eeb41c40 	.word	0xeeb41c40
 1016b74:	eef12a61 	.word	0xeef12a61
 1016b78:	d519fa10 	.word	0xd519fa10
 1016b7c:	1e7f444d 	.word	0x1e7f444d
 1016b80:	a1fcf895 	.word	0xa1fcf895
 1016b84:	f04ab2bf 	.word	0xf04ab2bf
 1016b88:	f8850a0c 	.word	0xf8850a0c
 1016b8c:	e023a1fc 	.word	0xe023a1fc
 1016b90:	00000000 	.word	0x00000000
 1016b94:	42440000 	.word	0x42440000
 1016b98:	42340000 	.word	0x42340000
 1016b9c:	423c0000 	.word	0x423c0000
 1016ba0:	422c0000 	.word	0x422c0000
 1016ba4:	447a0000 	.word	0x447a0000
 1016ba8:	c2c80000 	.word	0xc2c80000
 1016bac:	c2c7ffff 	.word	0xc2c7ffff
 1016bb0:	050aeb09 	.word	0x050aeb09
 1016bb4:	a1fcf895 	.word	0xa1fcf895
 1016bb8:	0a14f04a 	.word	0x0a14f04a
 1016bbc:	a1fcf885 	.word	0xa1fcf885
 1016bc0:	f1bee00a 	.word	0xf1bee00a
 1016bc4:	d1020f02 	.word	0xd1020f02
 1016bc8:	1c802402 	.word	0x1c802402
 1016bcc:	1818e003 	.word	0x1818e003
 1016bd0:	2c02b2dc 	.word	0x2c02b2dc
 1016bd4:	1c40d100 	.word	0x1c40d100
 1016bd8:	da0c2e05 	.word	0xda0c2e05
 1016bdc:	ad0a1c7f 	.word	0xad0a1c7f
 1016be0:	f1be1afb 	.word	0xf1be1afb
 1016be4:	55ac0f01 	.word	0x55ac0f01
 1016be8:	f827af0f 	.word	0xf827af0f
 1016bec:	bf043016 	.word	0xbf043016
 1016bf0:	f823ab0c 	.word	0xf823ab0c
 1016bf4:	1c76c016 	.word	0x1c76c016
 1016bf8:	1c49b2f6 	.word	0x1c49b2f6
 1016bfc:	297fb289 	.word	0x297fb289
 1016c00:	aecaf6ff 	.word	0xaecaf6ff
 1016c04:	2806b2c0 	.word	0x2806b2c0
 1016c08:	808bf2c0 	.word	0x808bf2c0
 1016c0c:	11fcf899 	.word	0x11fcf899
 1016c10:	0218f011 	.word	0x0218f011
 1016c14:	f001bf1c 	.word	0xf001bf1c
 1016c18:	f88901e3 	.word	0xf88901e3
 1016c1c:	210111fc 	.word	0x210111fc
 1016c20:	0201eb09 	.word	0x0201eb09
 1016c24:	31fcf892 	.word	0x31fcf892
 1016c28:	0718f013 	.word	0x0718f013
 1016c2c:	f003bf1c 	.word	0xf003bf1c
 1016c30:	f88203e3 	.word	0xf88203e3
 1016c34:	1c4931fc 	.word	0x1c4931fc
 1016c38:	0201eb09 	.word	0x0201eb09
 1016c3c:	31fcf892 	.word	0x31fcf892
 1016c40:	0718f013 	.word	0x0718f013
 1016c44:	f003bf1c 	.word	0xf003bf1c
 1016c48:	f88203e3 	.word	0xf88203e3
 1016c4c:	1c4931fc 	.word	0x1c4931fc
 1016c50:	0201eb09 	.word	0x0201eb09
 1016c54:	31fcf892 	.word	0x31fcf892
 1016c58:	0718f013 	.word	0x0718f013
 1016c5c:	f003bf1c 	.word	0xf003bf1c
 1016c60:	f88203e3 	.word	0xf88203e3
 1016c64:	1c4931fc 	.word	0x1c4931fc
 1016c68:	dbd9297f 	.word	0xdbd9297f
 1016c6c:	73fef44f 	.word	0x73fef44f
 1016c70:	1a60eef0 	.word	0x1a60eef0
 1016c74:	444b2200 	.word	0x444b2200
 1016c78:	0708f108 	.word	0x0708f108
 1016c7c:	0c09ea4f 	.word	0x0c09ea4f
 1016c80:	e000f893 	.word	0xe000f893
 1016c84:	744eea5f 	.word	0x744eea5f
 1016c88:	783cd517 	.word	0x783cd517
 1016c8c:	2a00ed9c 	.word	0x2a00ed9c
 1016c90:	041cf004 	.word	0x041cf004
 1016c94:	bf042c04 	.word	0xbf042c04
 1016c98:	2a00eef1 	.word	0x2a00eef1
 1016c9c:	2a22ee32 	.word	0x2a22ee32
 1016ca0:	6e8eea5f 	.word	0x6e8eea5f
 1016ca4:	ee32bf48 	.word	0xee32bf48
 1016ca8:	eeb42a00 	.word	0xeeb42a00
 1016cac:	eef12a61 	.word	0xeef12a61
 1016cb0:	bf44fa10 	.word	0xbf44fa10
 1016cb4:	1a42eef0 	.word	0x1a42eef0
 1016cb8:	1c524611 	.word	0x1c524611
 1016cbc:	1c5b1c7f 	.word	0x1c5b1c7f
 1016cc0:	f10c2a7f 	.word	0xf10c2a7f
 1016cc4:	dbdb0c04 	.word	0xdbdb0c04
 1016cc8:	4449b289 	.word	0x4449b289
 1016ccc:	21fcf891 	.word	0x21fcf891
 1016cd0:	02fbf002 	.word	0x02fbf002
 1016cd4:	21fcf881 	.word	0x21fcf881
 1016cd8:	11fcf899 	.word	0x11fcf899
 1016cdc:	01dff001 	.word	0x01dff001
 1016ce0:	11fcf889 	.word	0x11fcf889
 1016ce4:	bf002101 	.word	0xbf002101
 1016ce8:	0201eb09 	.word	0x0201eb09
 1016cec:	f8921c49 	.word	0xf8921c49
 1016cf0:	f00331fc 	.word	0xf00331fc
 1016cf4:	f88203df 	.word	0xf88203df
 1016cf8:	eb0931fc 	.word	0xeb0931fc
 1016cfc:	f8920201 	.word	0xf8920201
 1016d00:	1c4931fc 	.word	0x1c4931fc
 1016d04:	03dff003 	.word	0x03dff003
 1016d08:	31fcf882 	.word	0x31fcf882
 1016d0c:	0201eb09 	.word	0x0201eb09
 1016d10:	31fcf892 	.word	0x31fcf892
 1016d14:	297f1c49 	.word	0x297f1c49
 1016d18:	03dff003 	.word	0x03dff003
 1016d1c:	31fcf882 	.word	0x31fcf882
 1016d20:	2806dbe2 	.word	0x2806dbe2
 1016d24:	ae33f6bf 	.word	0xae33f6bf
 1016d28:	2e012700 	.word	0x2e012700
 1016d2c:	f2c046bb 	.word	0xf2c046bb
 1016d30:	a80a81c8 	.word	0xa80a81c8
 1016d34:	9a1feddf 	.word	0x9a1feddf
 1016d38:	f10d9004 	.word	0xf10d9004
 1016d3c:	98040a14 	.word	0x98040a14
 1016d40:	90027800 	.word	0x90027800
 1016d44:	f830a80f 	.word	0xf830a80f
 1016d48:	9802401b 	.word	0x9802401b
 1016d4c:	d1332801 	.word	0xd1332801
 1016d50:	00c4eb09 	.word	0x00c4eb09
 1016d54:	6193f44f 	.word	0x6193f44f
 1016d58:	e9d21842 	.word	0xe9d21842
 1016d5c:	e9cd0102 	.word	0xe9cd0102
 1016d60:	e9d20100 	.word	0xe9d20100
 1016d64:	f0010100 	.word	0xf0010100
 1016d68:	ee00fef3 	.word	0xee00fef3
 1016d6c:	f0010a10 	.word	0xf0010a10
 1016d70:	eeb0ff13 	.word	0xeeb0ff13
 1016d74:	e9ddaa40 	.word	0xe9ddaa40
 1016d78:	f0010100 	.word	0xf0010100
 1016d7c:	ee00fee9 	.word	0xee00fee9
 1016d80:	f0010a10 	.word	0xf0010a10
 1016d84:	ee7aff09 	.word	0xee7aff09
 1016d88:	ee800a00 	.word	0xee800a00
 1016d8c:	ee200a20 	.word	0xee200a20
 1016d90:	f7fe0a29 	.word	0xf7fe0a29
 1016d94:	2c3ffba9 	.word	0x2c3ffba9
 1016d98:	0ac0eebd 	.word	0x0ac0eebd
 1016d9c:	0a10ee10 	.word	0x0a10ee10
 1016da0:	bfb4b280 	.word	0xbfb4b280
 1016da4:	11c1f204 	.word	0x11c1f204
 1016da8:	013ff1a4 	.word	0x013ff1a4
 1016dac:	eb00b289 	.word	0xeb00b289
 1016db0:	e14910c1 	.word	0xe14910c1
 1016db4:	43000000 	.word	0x43000000
 1016db8:	f0402802 	.word	0xf0402802
 1016dbc:	940380b3 	.word	0x940380b3
 1016dc0:	f24eb914 	.word	0xf24eb914
 1016dc4:	e0320080 	.word	0xe0320080
 1016dc8:	b2a41e64 	.word	0xb2a41e64
 1016dcc:	02c4eb09 	.word	0x02c4eb09
 1016dd0:	6093f44f 	.word	0x6093f44f
 1016dd4:	e9d24402 	.word	0xe9d24402
 1016dd8:	e9cd0102 	.word	0xe9cd0102
 1016ddc:	e9d20100 	.word	0xe9d20100
 1016de0:	f0010100 	.word	0xf0010100
 1016de4:	ee00feb5 	.word	0xee00feb5
 1016de8:	f0010a10 	.word	0xf0010a10
 1016dec:	eeb0fed5 	.word	0xeeb0fed5
 1016df0:	e9ddaa40 	.word	0xe9ddaa40
 1016df4:	f0010100 	.word	0xf0010100
 1016df8:	ee00feab 	.word	0xee00feab
 1016dfc:	f0010a10 	.word	0xf0010a10
 1016e00:	ee7afecb 	.word	0xee7afecb
 1016e04:	ee800a00 	.word	0xee800a00
 1016e08:	ee200a20 	.word	0xee200a20
 1016e0c:	f7fe0a29 	.word	0xf7fe0a29
 1016e10:	2c3ffb6b 	.word	0x2c3ffb6b
 1016e14:	0ac0eebd 	.word	0x0ac0eebd
 1016e18:	0a10ee10 	.word	0x0a10ee10
 1016e1c:	bfb4b280 	.word	0xbfb4b280
 1016e20:	11c1f204 	.word	0x11c1f204
 1016e24:	013ff1a4 	.word	0x013ff1a4
 1016e28:	eb00b289 	.word	0xeb00b289
 1016e2c:	f44f10c1 	.word	0xf44f10c1
 1016e30:	b2ff6193 	.word	0xb2ff6193
 1016e34:	0017f82a 	.word	0x0017f82a
 1016e38:	9c031c7f 	.word	0x9c031c7f
 1016e3c:	b2a4b2ff 	.word	0xb2a4b2ff
 1016e40:	00c4eb09 	.word	0x00c4eb09
 1016e44:	e9d21842 	.word	0xe9d21842
 1016e48:	e9cd0102 	.word	0xe9cd0102
 1016e4c:	e9d20100 	.word	0xe9d20100
 1016e50:	f0010100 	.word	0xf0010100
 1016e54:	ee00fe7d 	.word	0xee00fe7d
 1016e58:	f0010a10 	.word	0xf0010a10
 1016e5c:	eeb0fe9d 	.word	0xeeb0fe9d
 1016e60:	e9ddaa40 	.word	0xe9ddaa40
 1016e64:	f0010100 	.word	0xf0010100
 1016e68:	ee00fe73 	.word	0xee00fe73
 1016e6c:	f0010a10 	.word	0xf0010a10
 1016e70:	ee7afe93 	.word	0xee7afe93
 1016e74:	ee800a00 	.word	0xee800a00
 1016e78:	ee200a20 	.word	0xee200a20
 1016e7c:	f7fe0a29 	.word	0xf7fe0a29
 1016e80:	2c3ffb33 	.word	0x2c3ffb33
 1016e84:	0ac0eebd 	.word	0x0ac0eebd
 1016e88:	0a10ee10 	.word	0x0a10ee10
 1016e8c:	bfb4b280 	.word	0xbfb4b280
 1016e90:	11c1f204 	.word	0x11c1f204
 1016e94:	013ff1a4 	.word	0x013ff1a4
 1016e98:	1c7db289 	.word	0x1c7db289
 1016e9c:	10c1eb00 	.word	0x10c1eb00
 1016ea0:	0017f82a 	.word	0x0017f82a
 1016ea4:	99029803 	.word	0x99029803
 1016ea8:	1e471808 	.word	0x1e471808
 1016eac:	2f7eb2bf 	.word	0x2f7eb2bf
 1016eb0:	f44fbf08 	.word	0xf44fbf08
 1016eb4:	d0305000 	.word	0xd0305000
 1016eb8:	02c7eb09 	.word	0x02c7eb09
 1016ebc:	6093f44f 	.word	0x6093f44f
 1016ec0:	e9d24402 	.word	0xe9d24402
 1016ec4:	e9cd0102 	.word	0xe9cd0102
 1016ec8:	e9d20100 	.word	0xe9d20100
 1016ecc:	f0010100 	.word	0xf0010100
 1016ed0:	ee00fe3f 	.word	0xee00fe3f
 1016ed4:	f0010a10 	.word	0xf0010a10
 1016ed8:	eeb0fe5f 	.word	0xeeb0fe5f
 1016edc:	e9ddaa40 	.word	0xe9ddaa40
 1016ee0:	f0010100 	.word	0xf0010100
 1016ee4:	ee00fe35 	.word	0xee00fe35
 1016ee8:	f0010a10 	.word	0xf0010a10
 1016eec:	ee7afe55 	.word	0xee7afe55
 1016ef0:	ee800a00 	.word	0xee800a00
 1016ef4:	ee200a20 	.word	0xee200a20
 1016ef8:	f7fe0a29 	.word	0xf7fe0a29
 1016efc:	2f3ffaf5 	.word	0x2f3ffaf5
 1016f00:	0ac0eebd 	.word	0x0ac0eebd
 1016f04:	0a10ee10 	.word	0x0a10ee10
 1016f08:	bfb4b280 	.word	0xbfb4b280
 1016f0c:	11c1f207 	.word	0x11c1f207
 1016f10:	013ff1a7 	.word	0x013ff1a7
 1016f14:	eb00b289 	.word	0xeb00b289
 1016f18:	b2ed10c1 	.word	0xb2ed10c1
 1016f1c:	f82a1c6f 	.word	0xf82a1c6f
 1016f20:	e0950015 	.word	0xe0950015
 1016f24:	bf080025 	.word	0xbf080025
 1016f28:	0080f24e 	.word	0x0080f24e
 1016f2c:	1e6cd035 	.word	0x1e6cd035
 1016f30:	eb09b2a4 	.word	0xeb09b2a4
 1016f34:	f44f02c4 	.word	0xf44f02c4
 1016f38:	44106094 	.word	0x44106094
 1016f3c:	0100e9d0 	.word	0x0100e9d0
 1016f40:	0100e9cd 	.word	0x0100e9cd
 1016f44:	6093f44f 	.word	0x6093f44f
 1016f48:	e9d04410 	.word	0xe9d04410
 1016f4c:	f0010100 	.word	0xf0010100
 1016f50:	ee00fdff 	.word	0xee00fdff
 1016f54:	f0010a10 	.word	0xf0010a10
 1016f58:	eeb0fe1f 	.word	0xeeb0fe1f
 1016f5c:	e9ddaa40 	.word	0xe9ddaa40
 1016f60:	f0010100 	.word	0xf0010100
 1016f64:	ee00fdf5 	.word	0xee00fdf5
 1016f68:	f0010a10 	.word	0xf0010a10
 1016f6c:	ee7afe15 	.word	0xee7afe15
 1016f70:	ee800a00 	.word	0xee800a00
 1016f74:	ee200a20 	.word	0xee200a20
 1016f78:	f7fe0a29 	.word	0xf7fe0a29
 1016f7c:	2c3ffab5 	.word	0x2c3ffab5
 1016f80:	0ac0eebd 	.word	0x0ac0eebd
 1016f84:	0a10ee10 	.word	0x0a10ee10
 1016f88:	bfb4b280 	.word	0xbfb4b280
 1016f8c:	11c1f204 	.word	0x11c1f204
 1016f90:	013ff1a4 	.word	0x013ff1a4
 1016f94:	eb00b289 	.word	0xeb00b289
 1016f98:	b2ff10c1 	.word	0xb2ff10c1
 1016f9c:	0017f82a 	.word	0x0017f82a
 1016fa0:	1c689902 	.word	0x1c689902
 1016fa4:	b2801c7f 	.word	0xb2801c7f
 1016fa8:	1e891949 	.word	0x1e891949
 1016fac:	db0e4281 	.word	0xdb0e4281
 1016fb0:	b2ff283f 	.word	0xb2ff283f
 1016fb4:	f200bfb4 	.word	0xf200bfb4
 1016fb8:	f1a012c1 	.word	0xf1a012c1
 1016fbc:	01d2023f 	.word	0x01d2023f
 1016fc0:	f82a1c40 	.word	0xf82a1c40
 1016fc4:	1c7f2017 	.word	0x1c7f2017
 1016fc8:	4281b280 	.word	0x4281b280
 1016fcc:	9802daf0 	.word	0x9802daf0
 1016fd0:	1e451940 	.word	0x1e451940
 1016fd4:	2d7eb2ad 	.word	0x2d7eb2ad
 1016fd8:	f44fbf08 	.word	0xf44fbf08
 1016fdc:	d0335000 	.word	0xd0335000
 1016fe0:	02c5eb09 	.word	0x02c5eb09
 1016fe4:	6094f44f 	.word	0x6094f44f
 1016fe8:	e9d04410 	.word	0xe9d04410
 1016fec:	e9cd0100 	.word	0xe9cd0100
 1016ff0:	f44f0100 	.word	0xf44f0100
 1016ff4:	44106093 	.word	0x44106093
 1016ff8:	0100e9d0 	.word	0x0100e9d0
 1016ffc:	fda8f001 	.word	0xfda8f001
 1017000:	0a10ee00 	.word	0x0a10ee00
 1017004:	fdc8f001 	.word	0xfdc8f001
 1017008:	aa40eeb0 	.word	0xaa40eeb0
 101700c:	0100e9dd 	.word	0x0100e9dd
 1017010:	fd9ef001 	.word	0xfd9ef001
 1017014:	0a10ee00 	.word	0x0a10ee00
 1017018:	fdbef001 	.word	0xfdbef001
 101701c:	0a00ee7a 	.word	0x0a00ee7a
 1017020:	0a20ee80 	.word	0x0a20ee80
 1017024:	0a29ee20 	.word	0x0a29ee20
 1017028:	fa5ef7fe 	.word	0xfa5ef7fe
 101702c:	eebd2d3f 	.word	0xeebd2d3f
 1017030:	ee100ac0 	.word	0xee100ac0
 1017034:	b2800a10 	.word	0xb2800a10
 1017038:	f205bfb4 	.word	0xf205bfb4
 101703c:	f1a511c1 	.word	0xf1a511c1
 1017040:	b289013f 	.word	0xb289013f
 1017044:	10c1eb00 	.word	0x10c1eb00
 1017048:	f82ab2ff 	.word	0xf82ab2ff
 101704c:	1c7f0017 	.word	0x1c7f0017
 1017050:	f10b9804 	.word	0xf10b9804
 1017054:	1c400b01 	.word	0x1c400b01
 1017058:	900445b3 	.word	0x900445b3
 101705c:	ae6ff6ff 	.word	0xae6ff6ff
 1017060:	2f01b2ff 	.word	0x2f01b2ff
 1017064:	f8bdd12d 	.word	0xf8bdd12d
 1017068:	f8bd0014 	.word	0xf8bd0014
 101706c:	eb092030 	.word	0xeb092030
 1017070:	09010282 	.word	0x09010282
 1017074:	0107f001 	.word	0x0107f001
 1017078:	ed922904 	.word	0xed922904
 101707c:	f8980a00 	.word	0xf8980a00
 1017080:	bfa4208b 	.word	0xbfa4208b
 1017084:	0107f1c1 	.word	0x0107f1c1
 1017088:	2a01b289 	.word	0x2a01b289
 101708c:	f9b8d10b 	.word	0xf9b8d10b
 1017090:	1a8020e8 	.word	0x1a8020e8
 1017094:	2800b200 	.word	0x2800b200
 1017098:	4240bf48 	.word	0x4240bf48
 101709c:	bfb82821 	.word	0xbfb82821
 10170a0:	1094f60f 	.word	0x1094f60f
 10170a4:	f60fdb01 	.word	0xf60fdb01
 10170a8:	5c40108c 	.word	0x5c40108c
 10170ac:	0a90ee00 	.word	0x0a90ee00
 10170b0:	0a60eef8 	.word	0x0a60eef8
 10170b4:	0aa8ee70 	.word	0x0aa8ee70
 10170b8:	0a60eeb4 	.word	0x0a60eeb4
 10170bc:	fa10eef1 	.word	0xfa10eef1
 10170c0:	eeb0d43b 	.word	0xeeb0d43b
 10170c4:	f7fe0a49 	.word	0xf7fe0a49
 10170c8:	f898fa0f 	.word	0xf898fa0f
 10170cc:	eebd208b 	.word	0xeebd208b
 10170d0:	ee100ac0 	.word	0xee100ac0
 10170d4:	f8a80a10 	.word	0xf8a80a10
 10170d8:	42970098 	.word	0x42970098
 10170dc:	2100d11c 	.word	0x2100d11c
 10170e0:	f10d2200 	.word	0xf10d2200
 10170e4:	42ba0a14 	.word	0x42ba0a14
 10170e8:	b9a9db02 	.word	0xb9a9db02
 10170ec:	e04e2000 	.word	0xe04e2000
 10170f0:	0942eb08 	.word	0x0942eb08
 10170f4:	3012f93a 	.word	0x3012f93a
 10170f8:	90e8f9b9 	.word	0x90e8f9b9
 10170fc:	0309eba3 	.word	0x0309eba3
 1017100:	2b00b21b 	.word	0x2b00b21b
 1017104:	425bbf48 	.word	0x425bbf48
 1017108:	bfa82b21 	.word	0xbfa82b21
 101710c:	1c522101 	.word	0x1c522101
 1017110:	b2d2000b 	.word	0xb2d2000b
 1017114:	e7e8d0e7 	.word	0xe7e8d0e7
 1017118:	f8882101 	.word	0xf8882101
 101711c:	f888708c 	.word	0xf888708c
 1017120:	007a108d 	.word	0x007a108d
 1017124:	f108a905 	.word	0xf108a905
 1017128:	f7fc00f4 	.word	0xf7fc00f4
 101712c:	b012fea3 	.word	0xb012fea3
 1017130:	8b0aecbd 	.word	0x8b0aecbd
 1017134:	e8bdb001 	.word	0xe8bdb001
 1017138:	e9dd8ff0 	.word	0xe9dd8ff0
 101713c:	29000108 	.word	0x29000108
 1017140:	2802d801 	.word	0x2802d801
 1017144:	f001d30a 	.word	0xf001d30a
 1017148:	ee00fd03 	.word	0xee00fd03
 101714c:	20010a10 	.word	0x20010a10
 1017150:	f916f7fe 	.word	0xf916f7fe
 1017154:	0a04eef2 	.word	0x0a04eef2
 1017158:	8a20ee00 	.word	0x8a20ee00
 101715c:	0a48eeb0 	.word	0x0a48eeb0
 1017160:	f9c2f7fe 	.word	0xf9c2f7fe
 1017164:	0ac0eebd 	.word	0x0ac0eebd
 1017168:	0a10ee10 	.word	0x0a10ee10
 101716c:	0098f8a8 	.word	0x0098f8a8
 1017170:	008bf898 	.word	0x008bf898
 1017174:	2001b158 	.word	0x2001b158
 1017178:	f888b012 	.word	0xf888b012
 101717c:	2000008d 	.word	0x2000008d
 1017180:	008cf888 	.word	0x008cf888
 1017184:	8b0aecbd 	.word	0x8b0aecbd
 1017188:	e8bdb001 	.word	0xe8bdb001
 101718c:	f8888ff0 	.word	0xf8888ff0
 1017190:	b012008d 	.word	0xb012008d
 1017194:	8b0aecbd 	.word	0x8b0aecbd
 1017198:	e8bdb001 	.word	0xe8bdb001
 101719c:	00008ff0 	.word	0x00008ff0
 10171a0:	40010020 	.word	0x40010020
 10171a4:	4cd2b570 	.word	0x4cd2b570
 10171a8:	008ff894 	.word	0x008ff894
 10171ac:	1090f894 	.word	0x1090f894
 10171b0:	008ef884 	.word	0x008ef884
 10171b4:	008af894 	.word	0x008af894
 10171b8:	d0114308 	.word	0xd0114308
 10171bc:	0098f8b4 	.word	0x0098f8b4
 10171c0:	f8a42261 	.word	0xf8a42261
 10171c4:	20000096 	.word	0x20000096
 10171c8:	0090f884 	.word	0x0090f884
 10171cc:	00a0f8d4 	.word	0x00a0f8d4
 10171d0:	217bf200 	.word	0x217bf200
 10171d4:	700bf44f 	.word	0x700bf44f
 10171d8:	f7fc4420 	.word	0xf7fc4420
 10171dc:	e008fe3b 	.word	0xe008fe3b
 10171e0:	608cf894 	.word	0x608cf894
 10171e4:	d0040030 	.word	0xd0040030
 10171e8:	1c402000 	.word	0x1c402000
 10171ec:	42b1b2c1 	.word	0x42b1b2c1
 10171f0:	f8d4d3fb 	.word	0xf8d4d3fb
 10171f4:	f44f50a0 	.word	0xf44f50a0
 10171f8:	227f70fe 	.word	0x227f70fe
 10171fc:	f1041829 	.word	0xf1041829
 1017200:	f7fc0008 	.word	0xf7fc0008
 1017204:	7de1fe37 	.word	0x7de1fe37
 1017208:	07c92000 	.word	0x07c92000
 101720c:	0118f104 	.word	0x0118f104
 1017210:	f8a4bf44 	.word	0xf8a4bf44
 1017214:	20010100 	.word	0x20010100
 1017218:	780b2210 	.word	0x780b2210
 101721c:	d50707db 	.word	0xd50707db
 1017220:	f1a2b280 	.word	0xf1a2b280
 1017224:	eb04030f 	.word	0xeb04030f
 1017228:	1c400640 	.word	0x1c400640
 101722c:	3100f8a6 	.word	0x3100f8a6
 1017230:	1c52784b 	.word	0x1c52784b
 1017234:	d50707db 	.word	0xd50707db
 1017238:	f1a2b280 	.word	0xf1a2b280
 101723c:	eb04030f 	.word	0xeb04030f
 1017240:	1c400640 	.word	0x1c400640
 1017244:	3100f8a6 	.word	0x3100f8a6
 1017248:	1c52788b 	.word	0x1c52788b
 101724c:	d50707db 	.word	0xd50707db
 1017250:	f1a2b280 	.word	0xf1a2b280
 1017254:	eb04030f 	.word	0xeb04030f
 1017258:	1c400640 	.word	0x1c400640
 101725c:	3100f8a6 	.word	0x3100f8a6
 1017260:	1c5278cb 	.word	0x1c5278cb
 1017264:	d50707db 	.word	0xd50707db
 1017268:	f1a2b280 	.word	0xf1a2b280
 101726c:	eb04030f 	.word	0xeb04030f
 1017270:	1c400640 	.word	0x1c400640
 1017274:	3100f8a6 	.word	0x3100f8a6
 1017278:	1d091c52 	.word	0x1d091c52
 101727c:	2a70b292 	.word	0x2a70b292
 1017280:	f8a4dbcb 	.word	0xf8a4dbcb
 1017284:	f894009a 	.word	0xf894009a
 1017288:	2800008d 	.word	0x2800008d
 101728c:	f894d04a 	.word	0xf894d04a
 1017290:	0030608c 	.word	0x0030608c
 1017294:	608bf884 	.word	0x608bf884
 1017298:	210ad114 	.word	0x210ad114
 101729c:	00e8f104 	.word	0x00e8f104
 10172a0:	fbf4f005 	.word	0xfbf4f005
 10172a4:	0738f8df 	.word	0x0738f8df
 10172a8:	f0416801 	.word	0xf0416801
 10172ac:	60010101 	.word	0x60010101
 10172b0:	f0022000 	.word	0xf0022000
 10172b4:	f44fffb5 	.word	0xf44fffb5
 10172b8:	216170e4 	.word	0x216170e4
 10172bc:	f0054420 	.word	0xf0054420
 10172c0:	e02cfbe5 	.word	0xe02cfbe5
 10172c4:	f1040072 	.word	0xf1040072
 10172c8:	f10401f4 	.word	0xf10401f4
 10172cc:	f7fc00e8 	.word	0xf7fc00e8
 10172d0:	462afdd1 	.word	0x462afdd1
 10172d4:	f1044631 	.word	0xf1044631
 10172d8:	f00500e8 	.word	0xf00500e8
 10172dc:	4605fbdb 	.word	0x4605fbdb
 10172e0:	f7fc2010 	.word	0xf7fc2010
 10172e4:	4606ffa9 	.word	0x4606ffa9
 10172e8:	60e8f44f 	.word	0x60e8f44f
 10172ec:	22c01829 	.word	0x22c01829
 10172f0:	f7fc4630 	.word	0xf7fc4630
 10172f4:	22c4fdaf 	.word	0x22c4fdaf
 10172f8:	f1064629 	.word	0xf1064629
 10172fc:	f7fc00c0 	.word	0xf7fc00c0
 1017300:	f7fcfda9 	.word	0xf7fcfda9
 1017304:	4603fce2 	.word	0x4603fce2
 1017308:	70e4f44f 	.word	0x70e4f44f
 101730c:	f8df1821 	.word	0xf8df1821
 1017310:	463026d4 	.word	0x463026d4
 1017314:	fb2ff005 	.word	0xfb2ff005
 1017318:	f0024628 	.word	0xf0024628
 101731c:	2000ff81 	.word	0x2000ff81
 1017320:	008df884 	.word	0x008df884
 1017324:	0000bd70 	.word	0x0000bd70
 1017328:	43f0e92d 	.word	0x43f0e92d
 101732c:	81c0f8df 	.word	0x81c0f8df
 1017330:	f898b081 	.word	0xf898b081
 1017334:	28140091 	.word	0x28140091
 1017338:	80a1f280 	.word	0x80a1f280
 101733c:	20a0f8d8 	.word	0x20a0f8d8
 1017340:	6109f44f 	.word	0x6109f44f
 1017344:	25002400 	.word	0x25002400
 1017348:	0901eb02 	.word	0x0901eb02
 101734c:	2002b9b8 	.word	0x2002b9b8
 1017350:	717ef44f 	.word	0x717ef44f
 1017354:	0089f888 	.word	0x0089f888
 1017358:	6093f44f 	.word	0x6093f44f
 101735c:	f0054410 	.word	0xf0054410
 1017360:	f8d8fb95 	.word	0xf8d8fb95
 1017364:	f88801c4 	.word	0xf88801c4
 1017368:	e9c84088 	.word	0xe9c84088
 101736c:	f2414500 	.word	0xf2414500
 1017370:	22130104 	.word	0x22130104
 1017374:	46485841 	.word	0x46485841
 1017378:	f005b289 	.word	0xf005b289
 101737c:	200afa53 	.word	0x200afa53
 1017380:	ff5af7fc 	.word	0xff5af7fc
 1017384:	1088f898 	.word	0x1088f898
 1017388:	4606464a 	.word	0x4606464a
 101738c:	4918f640 	.word	0x4918f640
 1017390:	01c4f8d8 	.word	0x01c4f8d8
 1017394:	3650f8df 	.word	0x3650f8df
 1017398:	f101fb19 	.word	0xf101fb19
 101739c:	f44f4408 	.word	0xf44f4408
 10173a0:	44015180 	.word	0x44015180
 10173a4:	7000f44f 	.word	0x7000f44f
 10173a8:	f0051830 	.word	0xf0051830
 10173ac:	4607fa42 	.word	0x4607fa42
 10173b0:	f7fc4630 	.word	0xf7fc4630
 10173b4:	4606ff04 	.word	0x4606ff04
 10173b8:	f7fc2010 	.word	0xf7fc2010
 10173bc:	4681ff3d 	.word	0x4681ff3d
 10173c0:	7082f44f 	.word	0x7082f44f
 10173c4:	22fc1831 	.word	0x22fc1831
 10173c8:	f7fc4648 	.word	0xf7fc4648
 10173cc:	f44ffd43 	.word	0xf44ffd43
 10173d0:	46317280 	.word	0x46317280
 10173d4:	00fcf109 	.word	0x00fcf109
 10173d8:	fd3cf7fc 	.word	0xfd3cf7fc
 10173dc:	217f2204 	.word	0x217f2204
 10173e0:	f7fc4648 	.word	0xf7fc4648
 10173e4:	f8d8ff0a 	.word	0xf8d8ff0a
 10173e8:	043820a0 	.word	0x043820a0
 10173ec:	037ff040 	.word	0x037ff040
 10173f0:	6093f44f 	.word	0x6093f44f
 10173f4:	46481811 	.word	0x46481811
 10173f8:	fa96f005 	.word	0xfa96f005
 10173fc:	21002000 	.word	0x21002000
 1017400:	020ff05f 	.word	0x020ff05f
 1017404:	90a0f8d8 	.word	0x90a0f8d8
 1017408:	03c2eb09 	.word	0x03c2eb09
 101740c:	6700e9d3 	.word	0x6700e9d3
 1017410:	41791980 	.word	0x41791980
 1017414:	2a701c52 	.word	0x2a701c52
 1017418:	3030dbf6 	.word	0x3030dbf6
 101741c:	0100f141 	.word	0x0100f141
 1017420:	23002261 	.word	0x23002261
 1017424:	fb0ef001 	.word	0xfb0ef001
 1017428:	22000049 	.word	0x22000049
 101742c:	ea41230f 	.word	0xea41230f
 1017430:	004677d0 	.word	0x004677d0
 1017434:	00c3eb09 	.word	0x00c3eb09
 1017438:	0100e9d0 	.word	0x0100e9d0
 101743c:	d80542b9 	.word	0xd80542b9
 1017440:	42b0bf28 	.word	0x42b0bf28
 1017444:	1824d202 	.word	0x1824d202
 1017448:	1c52414d 	.word	0x1c52414d
 101744c:	2b701c5b 	.word	0x2b701c5b
 1017450:	0410dbf0 	.word	0x0410dbf0
 1017454:	eb142100 	.word	0xeb142100
 1017458:	b2924050 	.word	0xb2924050
 101745c:	23004169 	.word	0x23004169
 1017460:	faf0f001 	.word	0xfaf0f001
 1017464:	2091f898 	.word	0x2091f898
 1017468:	02c2eb09 	.word	0x02c2eb09
 101746c:	01fee9c2 	.word	0x01fee9c2
 1017470:	2300e9d8 	.word	0x2300e9d8
 1017474:	41591810 	.word	0x41591810
 1017478:	0100e9c8 	.word	0x0100e9c8
 101747c:	d102e007 	.word	0xd102e007
 1017480:	ffc6f7fe 	.word	0xffc6f7fe
 1017484:	2815e003 	.word	0x2815e003
 1017488:	f7ffbf08 	.word	0xf7ffbf08
 101748c:	f898f907 	.word	0xf898f907
 1017490:	1c400088 	.word	0x1c400088
 1017494:	2802b2c0 	.word	0x2802b2c0
 1017498:	2000bf08 	.word	0x2000bf08
 101749c:	0088f888 	.word	0x0088f888
 10174a0:	0091f898 	.word	0x0091f898
 10174a4:	f8881c40 	.word	0xf8881c40
 10174a8:	b2c00091 	.word	0xb2c00091
 10174ac:	d11b2818 	.word	0xd11b2818
 10174b0:	0538f8df 	.word	0x0538f8df
 10174b4:	f8c02100 	.word	0xf8c02100
 10174b8:	68011098 	.word	0x68011098
 10174bc:	3100f441 	.word	0x3100f441
 10174c0:	f44f6001 	.word	0xf44f6001
 10174c4:	f8df5000 	.word	0xf8df5000
 10174c8:	60081528 	.word	0x60081528
 10174cc:	f8882000 	.word	0xf8882000
 10174d0:	f7ff0089 	.word	0xf7ff0089
 10174d4:	f8d8fe67 	.word	0xf8d8fe67
 10174d8:	f44f00e4 	.word	0xf44f00e4
 10174dc:	b001717a 	.word	0xb001717a
 10174e0:	43f0e8bd 	.word	0x43f0e8bd
 10174e4:	e0b44348 	.word	0xe0b44348
 10174e8:	e8bdb001 	.word	0xe8bdb001
 10174ec:	000083f0 	.word	0x000083f0
 10174f0:	20004930 	.word	0x20004930
 10174f4:	f8dfb510 	.word	0xf8dfb510
 10174f8:	200144fc 	.word	0x200144fc
 10174fc:	008af884 	.word	0x008af884
 1017500:	f8842000 	.word	0xf8842000
 1017504:	f44f008b 	.word	0xf44f008b
 1017508:	f8c4707a 	.word	0xf8c4707a
 101750c:	210a00e4 	.word	0x210a00e4
 1017510:	00e8f104 	.word	0x00e8f104
 1017514:	fabaf005 	.word	0xfabaf005
 1017518:	f104217f 	.word	0xf104217f
 101751c:	f0050008 	.word	0xf0050008
 1017520:	f44ffab5 	.word	0xf44ffab5
 1017524:	2161700b 	.word	0x2161700b
 1017528:	f0054420 	.word	0xf0054420
 101752c:	2000faaf 	.word	0x2000faaf
 1017530:	0089f884 	.word	0x0089f884
 1017534:	009af8a4 	.word	0x009af8a4
 1017538:	f7fc201a 	.word	0xf7fc201a
 101753c:	f8c4fe7d 	.word	0xf8c4fe7d
 1017540:	200000a0 	.word	0x200000a0
 1017544:	0090f884 	.word	0x0090f884
 1017548:	f8842161 	.word	0xf8842161
 101754c:	f44f008e 	.word	0xf44f008e
 1017550:	442070e4 	.word	0x442070e4
 1017554:	fa9af005 	.word	0xfa9af005
 1017558:	f7fc2000 	.word	0xf7fc2000
 101755c:	f8c4fe76 	.word	0xf8c4fe76
 1017560:	f04f01c4 	.word	0xf04f01c4
 1017564:	f8df7100 	.word	0xf8df7100
 1017568:	60112484 	.word	0x60112484
 101756c:	2488f8df 	.word	0x2488f8df
 1017570:	1488f8df 	.word	0x1488f8df
 1017574:	030cf102 	.word	0x030cf102
 1017578:	61116051 	.word	0x61116051
 101757c:	4118f641 	.word	0x4118f641
 1017580:	f44f6013 	.word	0xf44f6013
 1017584:	44035380 	.word	0x44035380
 1017588:	61504408 	.word	0x61504408
 101758c:	0470f8df 	.word	0x0470f8df
 1017590:	21016093 	.word	0x21016093
 1017594:	f8c060d2 	.word	0xf8c060d2
 1017598:	f8df1384 	.word	0xf8df1384
 101759c:	f8c01468 	.word	0xf8c01468
 10175a0:	21051394 	.word	0x21051394
 10175a4:	13a0f8c0 	.word	0x13a0f8c0
 10175a8:	f8c02100 	.word	0xf8c02100
 10175ac:	f8df13a8 	.word	0xf8df13a8
 10175b0:	f8c01458 	.word	0xf8c01458
 10175b4:	f44f13ac 	.word	0xf44f13ac
 10175b8:	60015100 	.word	0x60015100
 10175bc:	144cf8df 	.word	0x144cf8df
 10175c0:	f001200d 	.word	0xf001200d
 10175c4:	2000fb99 	.word	0x2000fb99
 10175c8:	0092f884 	.word	0x0092f884
 10175cc:	b510bd10 	.word	0xb510bd10
 10175d0:	4420f8df 	.word	0x4420f8df
 10175d4:	008bf894 	.word	0x008bf894
 10175d8:	2000b168 	.word	0x2000b168
 10175dc:	f884210a 	.word	0xf884210a
 10175e0:	f104008b 	.word	0xf104008b
 10175e4:	f00500e8 	.word	0xf00500e8
 10175e8:	f8dffa51 	.word	0xf8dffa51
 10175ec:	680103f4 	.word	0x680103f4
 10175f0:	0101f041 	.word	0x0101f041
 10175f4:	217f6001 	.word	0x217f6001
 10175f8:	0008f104 	.word	0x0008f104
 10175fc:	fa46f005 	.word	0xfa46f005
 1017600:	700bf44f 	.word	0x700bf44f
 1017604:	44202161 	.word	0x44202161
 1017608:	fa40f005 	.word	0xfa40f005
 101760c:	21612000 	.word	0x21612000
 1017610:	0089f884 	.word	0x0089f884
 1017614:	009af8a4 	.word	0x009af8a4
 1017618:	008ef884 	.word	0x008ef884
 101761c:	70e4f44f 	.word	0x70e4f44f
 1017620:	e8bd4420 	.word	0xe8bd4420
 1017624:	f0054010 	.word	0xf0054010
 1017628:	f8dfba31 	.word	0xf8dfba31
 101762c:	210003c0 	.word	0x210003c0
 1017630:	1098f8c0 	.word	0x1098f8c0
 1017634:	f4416801 	.word	0xf4416801
 1017638:	60013100 	.word	0x60013100
 101763c:	5000f44f 	.word	0x5000f44f
 1017640:	13acf8df 	.word	0x13acf8df
 1017644:	20006008 	.word	0x20006008
 1017648:	13a8f8df 	.word	0x13a8f8df
 101764c:	0089f881 	.word	0x0089f881
 1017650:	b5704770 	.word	0xb5704770
 1017654:	f8df4604 	.word	0xf8df4604
 1017658:	f895539c 	.word	0xf895539c
 101765c:	b128008b 	.word	0xb128008b
 1017660:	037cf8df 	.word	0x037cf8df
 1017664:	08496801 	.word	0x08496801
 1017668:	60010049 	.word	0x60010049
 101766c:	0089f895 	.word	0x0089f895
 1017670:	d1112801 	.word	0xd1112801
 1017674:	0368f8df 	.word	0x0368f8df
 1017678:	f8c02100 	.word	0xf8c02100
 101767c:	69c110b4 	.word	0x69c110b4
 1017680:	3100f441 	.word	0x3100f441
 1017684:	f44f61c1 	.word	0xf44f61c1
 1017688:	f8df5000 	.word	0xf8df5000
 101768c:	60481384 	.word	0x60481384
 1017690:	f8852000 	.word	0xf8852000
 1017694:	e0000089 	.word	0xe0000089
 1017698:	2000bb58 	.word	0x2000bb58
 101769c:	6370f8df 	.word	0x6370f8df
 10176a0:	0091f885 	.word	0x0091f885
 10176a4:	048068b0 	.word	0x048068b0
 10176a8:	48d3d4fc 	.word	0x48d3d4fc
 10176ac:	00800880 	.word	0x00800880
 10176b0:	038cf8c6 	.word	0x038cf8c6
 10176b4:	5000f44f 	.word	0x5000f44f
 10176b8:	f7fd6030 	.word	0xf7fd6030
 10176bc:	4ad5ff74 	.word	0x4ad5ff74
 10176c0:	2102fba0 	.word	0x2102fba0
 10176c4:	68b00cc9 	.word	0x68b00cc9
 10176c8:	d5fc0480 	.word	0xd5fc0480
 10176cc:	436148c4 	.word	0x436148c4
 10176d0:	f04269c2 	.word	0xf04269c2
 10176d4:	61c20204 	.word	0x61c20204
 10176d8:	f02269c2 	.word	0xf02269c2
 10176dc:	61c20204 	.word	0x61c20204
 10176e0:	10b4f8c0 	.word	0x10b4f8c0
 10176e4:	f44169c1 	.word	0xf44169c1
 10176e8:	61c13180 	.word	0x61c13180
 10176ec:	f8852001 	.word	0xf8852001
 10176f0:	bd700089 	.word	0xbd700089
 10176f4:	49bf2001 	.word	0x49bf2001
 10176f8:	0090f881 	.word	0x0090f881
 10176fc:	48bd4770 	.word	0x48bd4770
 1017700:	008af890 	.word	0x008af890
 1017704:	49bb4770 	.word	0x49bb4770
 1017708:	008af881 	.word	0x008af881
 101770c:	b5304770 	.word	0xb5304770
 1017710:	4604b081 	.word	0x4604b081
 1017714:	fae5f7fc 	.word	0xfae5f7fc
 1017718:	f7fc4605 	.word	0xf7fc4605
 101771c:	4428fb2d 	.word	0x4428fb2d
 1017720:	f81049b4 	.word	0xf81049b4
 1017724:	ee000c01 	.word	0xee000c01
 1017728:	eebb4a10 	.word	0xeebb4a10
 101772c:	1e400a47 	.word	0x1e400a47
 1017730:	eb01b2c0 	.word	0xeb01b2c0
 1017734:	ed800080 	.word	0xed800080
 1017738:	b0010a29 	.word	0xb0010a29
 101773c:	b510bd30 	.word	0xb510bd30
 1017740:	facff7fc 	.word	0xfacff7fc
 1017744:	f7fc4604 	.word	0xf7fc4604
 1017748:	4420fb17 	.word	0x4420fb17
 101774c:	f81049a9 	.word	0xf81049a9
 1017750:	eef10c01 	.word	0xeef10c01
 1017754:	1e400a00 	.word	0x1e400a00
 1017758:	eb01b2c0 	.word	0xeb01b2c0
 101775c:	ed900080 	.word	0xed900080
 1017760:	ee200a29 	.word	0xee200a29
 1017764:	f7fd0a20 	.word	0xf7fd0a20
 1017768:	eebdfebf 	.word	0xeebdfebf
 101776c:	ee100ac0 	.word	0xee100ac0
 1017770:	b2800a10 	.word	0xb2800a10
 1017774:	b530bd10 	.word	0xb530bd10
 1017778:	4604b081 	.word	0x4604b081
 101777c:	fab1f7fc 	.word	0xfab1f7fc
 1017780:	f7fc4605 	.word	0xf7fc4605
 1017784:	4428faf9 	.word	0x4428faf9
 1017788:	f810499a 	.word	0xf810499a
 101778c:	ee000c01 	.word	0xee000c01
 1017790:	eebb4a10 	.word	0xeebb4a10
 1017794:	1e400a47 	.word	0x1e400a47
 1017798:	eb01b2c0 	.word	0xeb01b2c0
 101779c:	ed800080 	.word	0xed800080
 10177a0:	b0010a31 	.word	0xb0010a31
 10177a4:	b510bd30 	.word	0xb510bd30
 10177a8:	fa9bf7fc 	.word	0xfa9bf7fc
 10177ac:	f7fc4604 	.word	0xf7fc4604
 10177b0:	4420fae3 	.word	0x4420fae3
 10177b4:	f810498f 	.word	0xf810498f
 10177b8:	eef10c01 	.word	0xeef10c01
 10177bc:	1e400a00 	.word	0x1e400a00
 10177c0:	eb01b2c0 	.word	0xeb01b2c0
 10177c4:	ed900080 	.word	0xed900080
 10177c8:	ee200a31 	.word	0xee200a31
 10177cc:	f7fd0a20 	.word	0xf7fd0a20
 10177d0:	eebdfe8b 	.word	0xeebdfe8b
 10177d4:	ee100ac0 	.word	0xee100ac0
 10177d8:	b2800a10 	.word	0xb2800a10
 10177dc:	2828bd10 	.word	0x2828bd10
 10177e0:	bf384984 	.word	0xbf384984
 10177e4:	f8c12028 	.word	0xf8c12028
 10177e8:	477000e4 	.word	0x477000e4
 10177ec:	f8d04881 	.word	0xf8d04881
 10177f0:	477000e4 	.word	0x477000e4
 10177f4:	f9b0487f 	.word	0xf9b0487f
 10177f8:	47700096 	.word	0x47700096
 10177fc:	f890487d 	.word	0xf890487d
 1017800:	4770008b 	.word	0x4770008b
 1017804:	f891497b 	.word	0xf891497b
 1017808:	b932208a 	.word	0xb932208a
 101780c:	da042806 	.word	0xda042806
 1017810:	f8812201 	.word	0xf8812201
 1017814:	f881008c 	.word	0xf881008c
 1017818:	4770208d 	.word	0x4770208d
 101781c:	4770487e 	.word	0x4770487e
 1017820:	f8934b74 	.word	0xf8934b74
 1017824:	b941108a 	.word	0xb941108a
 1017828:	220a2101 	.word	0x220a2101
 101782c:	108df883 	.word	0x108df883
 1017830:	f1034601 	.word	0xf1034601
 1017834:	f7fc00f4 	.word	0xf7fc00f4
 1017838:	4770bb0d 	.word	0x4770bb0d
 101783c:	f890486d 	.word	0xf890486d
 1017840:	1e481089 	.word	0x1e481089
 1017844:	43c04180 	.word	0x43c04180
 1017848:	47700fc0 	.word	0x47700fc0
 101784c:	f8b04869 	.word	0xf8b04869
 1017850:	4770009a 	.word	0x4770009a
 1017854:	47704871 	.word	0x47704871
 1017858:	47704871 	.word	0x47704871
 101785c:	f8904865 	.word	0xf8904865
 1017860:	4770008e 	.word	0x4770008e
 1017864:	4770486f 	.word	0x4770486f
 1017868:	43f0e92d 	.word	0x43f0e92d
 101786c:	4e614604 	.word	0x4e614604
 1017870:	460d2000 	.word	0x460d2000
 1017874:	0091f886 	.word	0x0091f886
 1017878:	f8a6495f 	.word	0xf8a6495f
 101787c:	2001009e 	.word	0x2001009e
 1017880:	0092f886 	.word	0x0092f886
 1017884:	b0810889 	.word	0xb0810889
 1017888:	00894861 	.word	0x00894861
 101788c:	8198f8df 	.word	0x8198f8df
 1017890:	138cf8c0 	.word	0x138cf8c0
 1017894:	5100f44f 	.word	0x5100f44f
 1017898:	f0046001 	.word	0xf0046001
 101789c:	f8860020 	.word	0xf8860020
 10178a0:	27000094 	.word	0x27000094
 10178a4:	fe57f7fd 	.word	0xfe57f7fd
 10178a8:	4a6021c8 	.word	0x4a6021c8
 10178ac:	0100fba1 	.word	0x0100fba1
 10178b0:	f0012300 	.word	0xf0012300
 10178b4:	4681f8c7 	.word	0x4681f8c7
 10178b8:	0094f896 	.word	0x0094f896
 10178bc:	2000b1d0 	.word	0x2000b1d0
 10178c0:	fe2ef7fd 	.word	0xfe2ef7fd
 10178c4:	f0000920 	.word	0xf0000920
 10178c8:	f8860001 	.word	0xf8860001
 10178cc:	46010095 	.word	0x46010095
 10178d0:	4080f04f 	.word	0x4080f04f
 10178d4:	f8a8f7fe 	.word	0xf8a8f7fe
 10178d8:	4a544854 	.word	0x4a544854
 10178dc:	8705fbe0 	.word	0x8705fbe0
 10178e0:	46402300 	.word	0x46402300
 10178e4:	f0014639 	.word	0xf0014639
 10178e8:	0089f8ad 	.word	0x0089f8ad
 10178ec:	7190ea41 	.word	0x7190ea41
 10178f0:	e0180080 	.word	0xe0180080
 10178f4:	fe1ff7fd 	.word	0xfe1ff7fd
 10178f8:	f0044602 	.word	0xf0044602
 10178fc:	f04f010f 	.word	0xf04f010f
 1017900:	24064080 	.word	0x24064080
 1017904:	f8e1f7fe 	.word	0xf8e1f7fe
 1017908:	4a484849 	.word	0x4a484849
 101790c:	8705fbe0 	.word	0x8705fbe0
 1017910:	46402300 	.word	0x46402300
 1017914:	f0014639 	.word	0xf0014639
 1017918:	4602f895 	.word	0x4602f895
 101791c:	fba4460b 	.word	0xfba4460b
 1017920:	fb040102 	.word	0xfb040102
 1017924:	f6401103 	.word	0xf6401103
 1017928:	23004217 	.word	0x23004217
 101792c:	41591880 	.word	0x41591880
 1017930:	4218f640 	.word	0x4218f640
 1017934:	f886f001 	.word	0xf886f001
 1017938:	0093f886 	.word	0x0093f886
 101793c:	4080f04f 	.word	0x4080f04f
 1017940:	f0416ac1 	.word	0xf0416ac1
 1017944:	62c10102 	.word	0x62c10102
 1017948:	f0216ac1 	.word	0xf0216ac1
 101794c:	62c10102 	.word	0x62c10102
 1017950:	f8c02100 	.word	0xf8c02100
 1017954:	f8c010b8 	.word	0xf8c010b8
 1017958:	680110bc 	.word	0x680110bc
 101795c:	0102f041 	.word	0x0102f041
 1017960:	6ac16001 	.word	0x6ac16001
 1017964:	0104f041 	.word	0x0104f041
 1017968:	6ac162c1 	.word	0x6ac162c1
 101796c:	0104f021 	.word	0x0104f021
 1017970:	f8c062c1 	.word	0xf8c062c1
 1017974:	6ac190c4 	.word	0x6ac190c4
 1017978:	3180f441 	.word	0x3180f441
 101797c:	b00162c1 	.word	0xb00162c1
 1017980:	83f0e8bd 	.word	0x83f0e8bd
 1017984:	f890481b 	.word	0xf890481b
 1017988:	47700092 	.word	0x47700092
 101798c:	49192000 	.word	0x49192000
 1017990:	0092f881 	.word	0x0092f881
 1017994:	48174770 	.word	0x48174770
 1017998:	009cf8b0 	.word	0x009cf8b0
 101799c:	48154770 	.word	0x48154770
 10179a0:	009ef8b0 	.word	0x009ef8b0
 10179a4:	49134770 	.word	0x49134770
 10179a8:	209cf8b1 	.word	0x209cf8b1
 10179ac:	bf284290 	.word	0xbf284290
 10179b0:	f8a11e50 	.word	0xf8a11e50
 10179b4:	4770009e 	.word	0x4770009e
 10179b8:	f891490e 	.word	0xf891490e
 10179bc:	2a022092 	.word	0x2a022092
 10179c0:	f8b1d10a 	.word	0xf8b1d10a
 10179c4:	2281309e 	.word	0x2281309e
 10179c8:	13c3eb03 	.word	0x13c3eb03
 10179cc:	f44f4419 	.word	0xf44f4419
 10179d0:	44197324 	.word	0x44197324
 10179d4:	ba3ef7fc 	.word	0xba3ef7fc
 10179d8:	218122ff 	.word	0x218122ff
 10179dc:	b87af000 	.word	0xb87af000
 10179e0:	40000010 	.word	0x40000010
 10179e4:	066e309d 	.word	0x066e309d
 10179e8:	02000049 	.word	0x02000049
 10179ec:	4000002c 	.word	0x4000002c
 10179f0:	40010020 	.word	0x40010020
 10179f4:	20004930 	.word	0x20004930
 10179f8:	20013cc0 	.word	0x20013cc0
 10179fc:	05000306 	.word	0x05000306
 1017a00:	4001000c 	.word	0x4001000c
 1017a04:	e2000010 	.word	0xe2000010
 1017a08:	0d047001 	.word	0x0d047001
 1017a0c:	000049e3 	.word	0x000049e3
 1017a10:	4001001c 	.word	0x4001001c
 1017a14:	8637bd06 	.word	0x8637bd06
 1017a18:	20004a18 	.word	0x20004a18
 1017a1c:	20004a30 	.word	0x20004a30
 1017a20:	20004b5c 	.word	0x20004b5c
 1017a24:	20004af8 	.word	0x20004af8
 1017a28:	000f423f 	.word	0x000f423f
 1017a2c:	000f4240 	.word	0x000f4240
 1017a30:	0003d090 	.word	0x0003d090
 1017a34:	0c0e1215 	.word	0x0c0e1215
 1017a38:	080a0e11 	.word	0x080a0e11
 1017a3c:	f1a0b570 	.word	0xf1a0b570
 1017a40:	ea4f0304 	.word	0xea4f0304
 1017a44:	ea4f0090 	.word	0xea4f0090
 1017a48:	f2410151 	.word	0xf2410151
 1017a4c:	f2ce0400 	.word	0xf2ce0400
 1017a50:	f2411400 	.word	0xf2411400
 1017a54:	f2ce0500 	.word	0xf2ce0500
 1017a58:	f2411501 	.word	0xf2411501
 1017a5c:	f2ce0600 	.word	0xf2ce0600
 1017a60:	f8861602 	.word	0xf8861602
 1017a64:	f04f3148 	.word	0xf04f3148
 1017a68:	f8860300 	.word	0xf8860300
 1017a6c:	f04f3188 	.word	0xf04f3188
 1017a70:	f8850301 	.word	0xf8850301
 1017a74:	70290108 	.word	0x70290108
 1017a78:	0001f100 	.word	0x0001f100
 1017a7c:	0101f101 	.word	0x0101f101
 1017a80:	0148f885 	.word	0x0148f885
 1017a84:	1040f885 	.word	0x1040f885
 1017a88:	0001f100 	.word	0x0001f100
 1017a8c:	0101f101 	.word	0x0101f101
 1017a90:	080af884 	.word	0x080af884
 1017a94:	0001f100 	.word	0x0001f100
 1017a98:	0b4af884 	.word	0x0b4af884
 1017a9c:	0001f100 	.word	0x0001f100
 1017aa0:	3228f885 	.word	0x3228f885
 1017aa4:	3268f885 	.word	0x3268f885
 1017aa8:	f1017029 	.word	0xf1017029
 1017aac:	f8850101 	.word	0xf8850101
 1017ab0:	f1011040 	.word	0xf1011040
 1017ab4:	1e520101 	.word	0x1e520101
 1017ab8:	f884d1ea 	.word	0xf884d1ea
 1017abc:	f8840802 	.word	0xf8840802
 1017ac0:	f8850b42 	.word	0xf8850b42
 1017ac4:	f8853228 	.word	0xf8853228
 1017ac8:	bf003268 	.word	0xbf003268
 1017acc:	bf00bf00 	.word	0xbf00bf00
 1017ad0:	bd70bf00 	.word	0xbd70bf00
 1017ad4:	220ff362 	.word	0x220ff362
 1017ad8:	421ff362 	.word	0x421ff362
 1017adc:	f0101840 	.word	0xf0101840
 1017ae0:	d0080303 	.word	0xd0080303
 1017ae4:	d31f1ac9 	.word	0xd31f1ac9
 1017ae8:	bf4807db 	.word	0xbf4807db
 1017aec:	2d01f800 	.word	0x2d01f800
 1017af0:	f820bf28 	.word	0xf820bf28
 1017af4:	00132d02 	.word	0x00132d02
 1017af8:	4614b430 	.word	0x4614b430
 1017afc:	39104615 	.word	0x39104615
 1017b00:	e920bf28 	.word	0xe920bf28
 1017b04:	d8fa003c 	.word	0xd8fa003c
 1017b08:	bf280749 	.word	0xbf280749
 1017b0c:	000ce920 	.word	0x000ce920
 1017b10:	f840bf48 	.word	0xf840bf48
 1017b14:	00892d04 	.word	0x00892d04
 1017b18:	f820bf28 	.word	0xf820bf28
 1017b1c:	bf482d02 	.word	0xbf482d02
 1017b20:	2d01f800 	.word	0x2d01f800
 1017b24:	4770bc30 	.word	0x4770bc30
 1017b28:	bf1818c9 	.word	0xbf1818c9
 1017b2c:	2d01f800 	.word	0x2d01f800
 1017b30:	bf2807cb 	.word	0xbf2807cb
 1017b34:	2d01f800 	.word	0x2d01f800
 1017b38:	00004770 	.word	0x00004770
 1017b3c:	4c30b570 	.word	0x4c30b570
 1017b40:	5b04f850 	.word	0x5b04f850
 1017b44:	ea8558e6 	.word	0xea8558e6
 1017b48:	f8410506 	.word	0xf8410506
 1017b4c:	f1035b04 	.word	0xf1035b04
 1017b50:	2b100304 	.word	0x2b100304
 1017b54:	3a20d002 	.word	0x3a20d002
 1017b58:	e02bdcf2 	.word	0xe02bdcf2
 1017b5c:	ba2d6825 	.word	0xba2d6825
 1017b60:	f5a5fa95 	.word	0xf5a5fa95
 1017b64:	68e608ae 	.word	0x68e608ae
 1017b68:	fa96ba36 	.word	0xfa96ba36
 1017b6c:	ea5ff6a6 	.word	0xea5ff6a6
 1017b70:	fa960636 	.word	0xfa960636
 1017b74:	ba36f6a6 	.word	0xba36f6a6
 1017b78:	68a660e6 	.word	0x68a660e6
 1017b7c:	fa96ba36 	.word	0xfa96ba36
 1017b80:	ea5ff6a6 	.word	0xea5ff6a6
 1017b84:	fa960636 	.word	0xfa960636
 1017b88:	ba36f6a6 	.word	0xba36f6a6
 1017b8c:	686660a6 	.word	0x686660a6
 1017b90:	fa96ba36 	.word	0xfa96ba36
 1017b94:	ea5ff6a6 	.word	0xea5ff6a6
 1017b98:	fa960636 	.word	0xfa960636
 1017b9c:	ba36f6a6 	.word	0xba36f6a6
 1017ba0:	ea4f6066 	.word	0xea4f6066
 1017ba4:	fa950535 	.word	0xfa950535
 1017ba8:	ba2df5a5 	.word	0xba2df5a5
 1017bac:	f04f6025 	.word	0xf04f6025
 1017bb0:	e7d00300 	.word	0xe7d00300
 1017bb4:	bd704618 	.word	0xbd704618
 1017bb8:	4c12b570 	.word	0x4c12b570
 1017bbc:	05d3ea4f 	.word	0x05d3ea4f
 1017bc0:	f0035d65 	.word	0xf0035d65
 1017bc4:	fa050607 	.word	0xfa050607
 1017bc8:	f910f506 	.word	0xf910f506
 1017bcc:	f0156b01 	.word	0xf0156b01
 1017bd0:	bf180f80 	.word	0xbf180f80
 1017bd4:	f8014276 	.word	0xf8014276
 1017bd8:	2b7e6b01 	.word	0x2b7e6b01
 1017bdc:	2300bf0c 	.word	0x2300bf0c
 1017be0:	1e521c5b 	.word	0x1e521c5b
 1017be4:	f013d009 	.word	0xf013d009
 1017be8:	d0020f07 	.word	0xd0020f07
 1017bec:	0545ea4f 	.word	0x0545ea4f
 1017bf0:	ea4fe7eb 	.word	0xea4fe7eb
 1017bf4:	5d6505d3 	.word	0x5d6505d3
 1017bf8:	4618e7e7 	.word	0x4618e7e7
 1017bfc:	0000bd70 	.word	0x0000bd70
 1017c00:	20013264 	.word	0x20013264
 1017c04:	00002588 	.word	0x00002588
 1017c08:	5ff0e92d 	.word	0x5ff0e92d
 1017c0c:	0500f04f 	.word	0x0500f04f
 1017c10:	0700f243 	.word	0x0700f243
 1017c14:	1704f2ce 	.word	0x1704f2ce
 1017c18:	5808f887 	.word	0x5808f887
 1017c1c:	0700f243 	.word	0x0700f243
 1017c20:	1700f2ce 	.word	0x1700f2ce
 1017c24:	5c08f887 	.word	0x5c08f887
 1017c28:	781b4b27 	.word	0x781b4b27
 1017c2c:	0201f1a2 	.word	0x0201f1a2
 1017c30:	4b01f810 	.word	0x4b01f810
 1017c34:	fa94ba24 	.word	0xfa94ba24
 1017c38:	ea4ff4a4 	.word	0xea4ff4a4
 1017c3c:	449b1b84 	.word	0x449b1b84
 1017c40:	0353ea4f 	.word	0x0353ea4f
 1017c44:	1a44ea4f 	.word	0x1a44ea4f
 1017c48:	ea4f449a 	.word	0xea4f449a
 1017c4c:	ea4f0353 	.word	0xea4f0353
 1017c50:	44991904 	.word	0x44991904
 1017c54:	0353ea4f 	.word	0x0353ea4f
 1017c58:	08c4ea4f 	.word	0x08c4ea4f
 1017c5c:	ea4f4498 	.word	0xea4f4498
 1017c60:	ea4f0353 	.word	0xea4f0353
 1017c64:	441e0684 	.word	0x441e0684
 1017c68:	0353ea4f 	.word	0x0353ea4f
 1017c6c:	0544ea4f 	.word	0x0544ea4f
 1017c70:	ea84441d 	.word	0xea84441d
 1017c74:	ea830305 	.word	0xea830305
 1017c78:	ea830306 	.word	0xea830306
 1017c7c:	ea830308 	.word	0xea830308
 1017c80:	fa93030b 	.word	0xfa93030b
 1017c84:	723bf3a3 	.word	0x723bf3a3
 1017c88:	0306ea84 	.word	0x0306ea84
 1017c8c:	0308ea83 	.word	0x0308ea83
 1017c90:	030aea83 	.word	0x030aea83
 1017c94:	030bea83 	.word	0x030bea83
 1017c98:	f3a3fa93 	.word	0xf3a3fa93
 1017c9c:	3208f887 	.word	0x3208f887
 1017ca0:	1070f887 	.word	0x1070f887
 1017ca4:	1702f2ce 	.word	0x1702f2ce
 1017ca8:	c020f8d7 	.word	0xc020f8d7
 1017cac:	fc8cfa9c 	.word	0xfc8cfa9c
 1017cb0:	cb02f821 	.word	0xcb02f821
 1017cb4:	1700f2ce 	.word	0x1700f2ce
 1017cb8:	0394ea4f 	.word	0x0394ea4f
 1017cbc:	d5b71e52 	.word	0xd5b71e52
 1017cc0:	70034801 	.word	0x70034801
 1017cc4:	9ff0e8bd 	.word	0x9ff0e8bd
 1017cc8:	200132d4 	.word	0x200132d4
 1017ccc:	5ff0e92d 	.word	0x5ff0e92d
 1017cd0:	78fff64f 	.word	0x78fff64f
 1017cd4:	0008ea00 	.word	0x0008ea00
 1017cd8:	00c0ea4f 	.word	0x00c0ea4f
 1017cdc:	01c1ea4f 	.word	0x01c1ea4f
 1017ce0:	0540f240 	.word	0x0540f240
 1017ce4:	0510f2ce 	.word	0x0510f2ce
 1017ce8:	f240682e 	.word	0xf240682e
 1017cec:	f6c30c00 	.word	0xf6c30c00
 1017cf0:	ea460c00 	.word	0xea460c00
 1017cf4:	602e060c 	.word	0x602e060c
 1017cf8:	0554f240 	.word	0x0554f240
 1017cfc:	0510f2ce 	.word	0x0510f2ce
 1017d00:	0600f240 	.word	0x0600f240
 1017d04:	f003602e 	.word	0xf003602e
 1017d08:	2b0803fb 	.word	0x2b0803fb
 1017d0c:	2604bf5a 	.word	0x2604bf5a
 1017d10:	26013b08 	.word	0x26013b08
 1017d14:	0c00f242 	.word	0x0c00f242
 1017d18:	1c06f2ce 	.word	0x1c06f2ce
 1017d1c:	d00c2b00 	.word	0xd00c2b00
 1017d20:	d0132b01 	.word	0xd0132b01
 1017d24:	d01a2b02 	.word	0xd01a2b02
 1017d28:	88244cad 	.word	0x88244cad
 1017d2c:	782d4dad 	.word	0x782d4dad
 1017d30:	0802f04f 	.word	0x0802f04f
 1017d34:	0a05f04f 	.word	0x0a05f04f
 1017d38:	4cabe019 	.word	0x4cabe019
 1017d3c:	4da98824 	.word	0x4da98824
 1017d40:	f04f782d 	.word	0xf04f782d
 1017d44:	f04f0802 	.word	0xf04f0802
 1017d48:	e0100a07 	.word	0xe0100a07
 1017d4c:	88244ca7 	.word	0x88244ca7
 1017d50:	782d4da4 	.word	0x782d4da4
 1017d54:	0804f04f 	.word	0x0804f04f
 1017d58:	0a0ff04f 	.word	0x0a0ff04f
 1017d5c:	4ca4e007 	.word	0x4ca4e007
 1017d60:	4da48824 	.word	0x4da48824
 1017d64:	f04f782d 	.word	0xf04f782d
 1017d68:	f04f0802 	.word	0xf04f0802
 1017d6c:	f88c0a0f 	.word	0xf88c0a0f
 1017d70:	f04f1c08 	.word	0xf04f1c08
 1017d74:	46310700 	.word	0x46310700
 1017d78:	7e08f88c 	.word	0x7e08f88c
 1017d7c:	0900f04f 	.word	0x0900f04f
 1017d80:	46d31e6b 	.word	0x46d31e6b
 1017d84:	0c00f242 	.word	0x0c00f242
 1017d88:	1c07f2ce 	.word	0x1c07f2ce
 1017d8c:	0e00f88c 	.word	0x0e00f88c
 1017d90:	0e40f88c 	.word	0x0e40f88c
 1017d94:	9c20f88c 	.word	0x9c20f88c
 1017d98:	f88c44a9 	.word	0xf88c44a9
 1017d9c:	44a99c60 	.word	0x44a99c60
 1017da0:	0b02f1bb 	.word	0x0b02f1bb
 1017da4:	f1bad5ee 	.word	0xf1bad5ee
 1017da8:	d1060f05 	.word	0xd1060f05
 1017dac:	0e00f88c 	.word	0x0e00f88c
 1017db0:	c007f88c 	.word	0xc007f88c
 1017db4:	9c20f88c 	.word	0x9c20f88c
 1017db8:	ebb944a9 	.word	0xebb944a9
 1017dbc:	1e5b0904 	.word	0x1e5b0904
 1017dc0:	ebbad1df 	.word	0xebbad1df
 1017dc4:	dd0b0307 	.word	0xdd0b0307
 1017dc8:	0e00f88c 	.word	0x0e00f88c
 1017dcc:	0e40f88c 	.word	0x0e40f88c
 1017dd0:	9c20f88c 	.word	0x9c20f88c
 1017dd4:	f88c44a9 	.word	0xf88c44a9
 1017dd8:	44a99c60 	.word	0x44a99c60
 1017ddc:	d5f31e9b 	.word	0xd5f31e9b
 1017de0:	0f05f1ba 	.word	0x0f05f1ba
 1017de4:	f88cd106 	.word	0xf88cd106
 1017de8:	f88c0e00 	.word	0xf88c0e00
 1017dec:	f88cb007 	.word	0xf88cb007
 1017df0:	44a99c20 	.word	0x44a99c20
 1017df4:	dd182f00 	.word	0xdd182f00
 1017df8:	0b00f04f 	.word	0x0b00f04f
 1017dfc:	0c00f242 	.word	0x0c00f242
 1017e00:	1c06f2ce 	.word	0x1c06f2ce
 1017e04:	be08f88c 	.word	0xbe08f88c
 1017e08:	f242463b 	.word	0xf242463b
 1017e0c:	f2ce0c00 	.word	0xf2ce0c00
 1017e10:	f88c1c07 	.word	0xf88c1c07
 1017e14:	f88c0e00 	.word	0xf88c0e00
 1017e18:	f88c0e40 	.word	0xf88c0e40
 1017e1c:	44a99c20 	.word	0x44a99c20
 1017e20:	9c60f88c 	.word	0x9c60f88c
 1017e24:	1e9b44a9 	.word	0x1e9b44a9
 1017e28:	f242dcef 	.word	0xf242dcef
 1017e2c:	f2ce0c00 	.word	0xf2ce0c00
 1017e30:	f8dc1c06 	.word	0xf8dc1c06
 1017e34:	44a3b1a0 	.word	0x44a3b1a0
 1017e38:	0b01f10b 	.word	0x0b01f10b
 1017e3c:	bc08f88c 	.word	0xbc08f88c
 1017e40:	1e494447 	.word	0x1e494447
 1017e44:	4420d198 	.word	0x4420d198
 1017e48:	0001f100 	.word	0x0001f100
 1017e4c:	d1901e52 	.word	0xd1901e52
 1017e50:	0540f240 	.word	0x0540f240
 1017e54:	0510f2ce 	.word	0x0510f2ce
 1017e58:	f64f682e 	.word	0xf64f682e
 1017e5c:	f2cc7cff 	.word	0xf2cc7cff
 1017e60:	ea067cff 	.word	0xea067cff
 1017e64:	602e060c 	.word	0x602e060c
 1017e68:	9ff0e8bd 	.word	0x9ff0e8bd
 1017e6c:	5ff0e92d 	.word	0x5ff0e92d
 1017e70:	78fff64f 	.word	0x78fff64f
 1017e74:	0008ea00 	.word	0x0008ea00
 1017e78:	0040ea4f 	.word	0x0040ea4f
 1017e7c:	0108ea01 	.word	0x0108ea01
 1017e80:	03fbf003 	.word	0x03fbf003
 1017e84:	9170f8df 	.word	0x9170f8df
 1017e88:	9000f899 	.word	0x9000f899
 1017e8c:	f242b402 	.word	0xf242b402
 1017e90:	f2ce0b00 	.word	0xf2ce0b00
 1017e94:	f2421b01 	.word	0xf2421b01
 1017e98:	f2ce0c00 	.word	0xf2ce0c00
 1017e9c:	f2401c02 	.word	0xf2401c02
 1017ea0:	f2ce0540 	.word	0xf2ce0540
 1017ea4:	682e0510 	.word	0x682e0510
 1017ea8:	0400f240 	.word	0x0400f240
 1017eac:	4400f6cf 	.word	0x4400f6cf
 1017eb0:	0604ea46 	.word	0x0604ea46
 1017eb4:	f240602e 	.word	0xf240602e
 1017eb8:	f2ce0554 	.word	0xf2ce0554
 1017ebc:	f2400510 	.word	0xf2400510
 1017ec0:	602e0600 	.word	0x602e0600
 1017ec4:	0a00f04f 	.word	0x0a00f04f
 1017ec8:	a808f88c 	.word	0xa808f88c
 1017ecc:	aa08f88c 	.word	0xaa08f88c
 1017ed0:	bf582b08 	.word	0xbf582b08
 1017ed4:	2b003b08 	.word	0x2b003b08
 1017ed8:	2b01d015 	.word	0x2b01d015
 1017edc:	2b02d025 	.word	0x2b02d025
 1017ee0:	ea4fd035 	.word	0xea4fd035
 1017ee4:	44190342 	.word	0x44190342
 1017ee8:	0354f04f 	.word	0x0354f04f
 1017eec:	f309fb03 	.word	0xf309fb03
 1017ef0:	0301f1a3 	.word	0x0301f1a3
 1017ef4:	0407f04f 	.word	0x0407f04f
 1017ef8:	080cf04f 	.word	0x080cf04f
 1017efc:	f809fb08 	.word	0xf809fb08
 1017f00:	0801f1a8 	.word	0x0801f1a8
 1017f04:	ea4fe031 	.word	0xea4fe031
 1017f08:	44190342 	.word	0x44190342
 1017f0c:	0360f04f 	.word	0x0360f04f
 1017f10:	f309fb03 	.word	0xf309fb03
 1017f14:	0301f1a3 	.word	0x0301f1a3
 1017f18:	0408f04f 	.word	0x0408f04f
 1017f1c:	080cf04f 	.word	0x080cf04f
 1017f20:	f809fb08 	.word	0xf809fb08
 1017f24:	0801f1a8 	.word	0x0801f1a8
 1017f28:	ea4fe01f 	.word	0xea4fe01f
 1017f2c:	44190382 	.word	0x44190382
 1017f30:	03c0f04f 	.word	0x03c0f04f
 1017f34:	f309fb03 	.word	0xf309fb03
 1017f38:	0301f1a3 	.word	0x0301f1a3
 1017f3c:	0410f04f 	.word	0x0410f04f
 1017f40:	080cf04f 	.word	0x080cf04f
 1017f44:	f809fb08 	.word	0xf809fb08
 1017f48:	0801f1a8 	.word	0x0801f1a8
 1017f4c:	f44fe00d 	.word	0xf44fe00d
 1017f50:	fb037390 	.word	0xfb037390
 1017f54:	f1a3f309 	.word	0xf1a3f309
 1017f58:	f04f0301 	.word	0xf04f0301
 1017f5c:	f04f0410 	.word	0xf04f0410
 1017f60:	fb080812 	.word	0xfb080812
 1017f64:	f1a8f809 	.word	0xf1a8f809
 1017f68:	46270801 	.word	0x46270801
 1017f6c:	9b04f85d 	.word	0x9b04f85d
 1017f70:	46464499 	.word	0x46464499
 1017f74:	d0092a00 	.word	0xd0092a00
 1017f78:	1810f88b 	.word	0x1810f88b
 1017f7c:	0504eb01 	.word	0x0504eb01
 1017f80:	bfc4454d 	.word	0xbfc4454d
 1017f84:	1e6d1aed 	.word	0x1e6d1aed
 1017f88:	5850f88b 	.word	0x5850f88b
 1017f8c:	0a08f88b 	.word	0x0a08f88b
 1017f90:	0001f100 	.word	0x0001f100
 1017f94:	0a48f88b 	.word	0x0a48f88b
 1017f98:	0001f100 	.word	0x0001f100
 1017f9c:	1830f88b 	.word	0x1830f88b
 1017fa0:	2a004421 	.word	0x2a004421
 1017fa4:	460dbf08 	.word	0x460dbf08
 1017fa8:	5870f88b 	.word	0x5870f88b
 1017fac:	d1034421 	.word	0xd1034421
 1017fb0:	a008f88c 	.word	0xa008f88c
 1017fb4:	a208f88c 	.word	0xa208f88c
 1017fb8:	d5db1eb6 	.word	0xd5db1eb6
 1017fbc:	1e7f1ac9 	.word	0x1e7f1ac9
 1017fc0:	f240dcd7 	.word	0xf240dcd7
 1017fc4:	f2ce0540 	.word	0xf2ce0540
 1017fc8:	682e0510 	.word	0x682e0510
 1017fcc:	77fff64f 	.word	0x77fff64f
 1017fd0:	37fff2c8 	.word	0x37fff2c8
 1017fd4:	0607ea06 	.word	0x0607ea06
 1017fd8:	e8bd602e 	.word	0xe8bd602e
 1017fdc:	00009ff0 	.word	0x00009ff0
 1017fe0:	200132a0 	.word	0x200132a0
 1017fe4:	2001329c 	.word	0x2001329c
 1017fe8:	200132a2 	.word	0x200132a2
 1017fec:	200132a4 	.word	0x200132a4
 1017ff0:	200132a6 	.word	0x200132a6
 1017ff4:	2001329d 	.word	0x2001329d
 1017ff8:	2001329e 	.word	0x2001329e
 1017ffc:	5ff0e92d 	.word	0x5ff0e92d
 1018000:	3b04f852 	.word	0x3b04f852
 1018004:	9b04f852 	.word	0x9b04f852
 1018008:	4b04f852 	.word	0x4b04f852
 101800c:	cb04f852 	.word	0xcb04f852
 1018010:	5b01f812 	.word	0x5b01f812
 1018014:	f8df7816 	.word	0xf8df7816
 1018018:	f8daa2f8 	.word	0xf8daa2f8
 101801c:	f8da7000 	.word	0xf8da7000
 1018020:	f04f8010 	.word	0xf04f8010
 1018024:	f01a0a60 	.word	0xf01a0a60
 1018028:	d1180f07 	.word	0xd1180f07
 101802c:	0f1ff016 	.word	0x0f1ff016
 1018030:	f859bf08 	.word	0xf859bf08
 1018034:	ea5fcb04 	.word	0xea5fcb04
 1018038:	bf270c4c 	.word	0xbf270c4c
 101803c:	0b01f04f 	.word	0x0b01f04f
 1018040:	8b04f840 	.word	0x8b04f840
 1018044:	0b00f04f 	.word	0x0b00f04f
 1018048:	7b04f840 	.word	0x7b04f840
 101804c:	bf062e7e 	.word	0xbf062e7e
 1018050:	f1a92600 	.word	0xf1a92600
 1018054:	1c760910 	.word	0x1c760910
 1018058:	0a01f1aa 	.word	0x0a01f1aa
 101805c:	2d20e7e3 	.word	0x2d20e7e3
 1018060:	f853bf04 	.word	0xf853bf04
 1018064:	ba244b04 	.word	0xba244b04
 1018068:	bf2c0064 	.word	0xbf2c0064
 101806c:	0b01f09b 	.word	0x0b01f09b
 1018070:	0b00f09b 	.word	0x0b00f09b
 1018074:	f840bf0c 	.word	0xf840bf0c
 1018078:	f8407b04 	.word	0xf8407b04
 101807c:	1e6d8b04 	.word	0x1e6d8b04
 1018080:	2520bf08 	.word	0x2520bf08
 1018084:	0a01f1ba 	.word	0x0a01f1ba
 1018088:	f016d1cd 	.word	0xf016d1cd
 101808c:	bf080f1f 	.word	0xbf080f1f
 1018090:	cb04f859 	.word	0xcb04f859
 1018094:	0c4cea5f 	.word	0x0c4cea5f
 1018098:	f04fbf27 	.word	0xf04fbf27
 101809c:	f8400b01 	.word	0xf8400b01
 10180a0:	f04f8b04 	.word	0xf04f8b04
 10180a4:	f8400b00 	.word	0xf8400b00
 10180a8:	2e7e7b04 	.word	0x2e7e7b04
 10180ac:	2600bf06 	.word	0x2600bf06
 10180b0:	0910f1a9 	.word	0x0910f1a9
 10180b4:	1e491c76 	.word	0x1e491c76
 10180b8:	f802d1b3 	.word	0xf802d1b3
 10180bc:	f8026901 	.word	0xf8026901
 10180c0:	f8425904 	.word	0xf8425904
 10180c4:	f842c904 	.word	0xf842c904
 10180c8:	f8424904 	.word	0xf8424904
 10180cc:	60139904 	.word	0x60139904
 10180d0:	9ff0e8bd 	.word	0x9ff0e8bd
 10180d4:	5ff0e92d 	.word	0x5ff0e92d
 10180d8:	0520f04f 	.word	0x0520f04f
 10180dc:	0600f04f 	.word	0x0600f04f
 10180e0:	0720f04f 	.word	0x0720f04f
 10180e4:	0960f04f 	.word	0x0960f04f
 10180e8:	0f07f019 	.word	0x0f07f019
 10180ec:	f016d111 	.word	0xf016d111
 10180f0:	bf080f1f 	.word	0xbf080f1f
 10180f4:	ab04f852 	.word	0xab04f852
 10180f8:	0a4aea5f 	.word	0x0a4aea5f
 10180fc:	f04fbf2c 	.word	0xf04fbf2c
 1018100:	f04f0b02 	.word	0xf04f0b02
 1018104:	2e7e0b00 	.word	0x2e7e0b00
 1018108:	2600bf06 	.word	0x2600bf06
 101810c:	1c763a10 	.word	0x1c763a10
 1018110:	2d20e00d 	.word	0x2d20e00d
 1018114:	f850bf04 	.word	0xf850bf04
 1018118:	ba244b04 	.word	0xba244b04
 101811c:	bf2c0064 	.word	0xbf2c0064
 1018120:	0b02f08b 	.word	0x0b02f08b
 1018124:	0b00f08b 	.word	0x0b00f08b
 1018128:	bf081e6d 	.word	0xbf081e6d
 101812c:	ea5f2520 	.word	0xea5f2520
 1018130:	ea4f7ccb 	.word	0xea4f7ccb
 1018134:	1e7f0838 	.word	0x1e7f0838
 1018138:	f841bf04 	.word	0xf841bf04
 101813c:	27208b04 	.word	0x27208b04
 1018140:	0901f1b9 	.word	0x0901f1b9
 1018144:	f016d1d0 	.word	0xf016d1d0
 1018148:	bf080f1f 	.word	0xbf080f1f
 101814c:	ab04f852 	.word	0xab04f852
 1018150:	0a4aea5f 	.word	0x0a4aea5f
 1018154:	0838ea4f 	.word	0x0838ea4f
 1018158:	bf041e7f 	.word	0xbf041e7f
 101815c:	8b04f841 	.word	0x8b04f841
 1018160:	2e7e2720 	.word	0x2e7e2720
 1018164:	2600bf06 	.word	0x2600bf06
 1018168:	1c763a10 	.word	0x1c763a10
 101816c:	d1b91e5b 	.word	0xd1b91e5b
 1018170:	bf1c2f20 	.word	0xbf1c2f20
 1018174:	f807fa28 	.word	0xf807fa28
 1018178:	8000f8c1 	.word	0x8000f8c1
 101817c:	9ff0e8bd 	.word	0x9ff0e8bd
 1018180:	5ff0e92d 	.word	0x5ff0e92d
 1018184:	4b04f853 	.word	0x4b04f853
 1018188:	5b08f853 	.word	0x5b08f853
 101818c:	6b05f853 	.word	0x6b05f853
 1018190:	f8df781f 	.word	0xf8df781f
 1018194:	f002c17c 	.word	0xf002c17c
 1018198:	2a010203 	.word	0x2a010203
 101819c:	d030d863 	.word	0xd030d863
 10181a0:	a000f8dc 	.word	0xa000f8dc
 10181a4:	b010f8dc 	.word	0xb010f8dc
 10181a8:	0f1ff017 	.word	0x0f1ff017
 10181ac:	f855bf08 	.word	0xf855bf08
 10181b0:	00766b04 	.word	0x00766b04
 10181b4:	2201bf27 	.word	0x2201bf27
 10181b8:	bb04f840 	.word	0xbb04f840
 10181bc:	f8402200 	.word	0xf8402200
 10181c0:	2f7eab04 	.word	0x2f7eab04
 10181c4:	2700bf06 	.word	0x2700bf06
 10181c8:	1c7f3d10 	.word	0x1c7f3d10
 10181cc:	0860f04f 	.word	0x0860f04f
 10181d0:	0f1ff018 	.word	0x0f1ff018
 10181d4:	f854bf04 	.word	0xf854bf04
 10181d8:	fa999b04 	.word	0xfa999b04
 10181dc:	ea5ff989 	.word	0xea5ff989
 10181e0:	bf2c0949 	.word	0xbf2c0949
 10181e4:	0201f092 	.word	0x0201f092
 10181e8:	0200f092 	.word	0x0200f092
 10181ec:	f840bf0c 	.word	0xf840bf0c
 10181f0:	f840ab04 	.word	0xf840ab04
 10181f4:	f1b8bb04 	.word	0xf1b8bb04
 10181f8:	d1e90801 	.word	0xd1e90801
 10181fc:	d1d31e49 	.word	0xd1d31e49
 1018200:	f017e07d 	.word	0xf017e07d
 1018204:	bf080f1f 	.word	0xbf080f1f
 1018208:	6b04f855 	.word	0x6b04f855
 101820c:	bf2c0076 	.word	0xbf2c0076
 1018210:	22002202 	.word	0x22002202
 1018214:	a032f85c 	.word	0xa032f85c
 1018218:	ab04f840 	.word	0xab04f840
 101821c:	bf062f7e 	.word	0xbf062f7e
 1018220:	3d102700 	.word	0x3d102700
 1018224:	f04f1c7f 	.word	0xf04f1c7f
 1018228:	f0180860 	.word	0xf0180860
 101822c:	bf040f0f 	.word	0xbf040f0f
 1018230:	9b04f854 	.word	0x9b04f854
 1018234:	f989fa99 	.word	0xf989fa99
 1018238:	7b81f3c9 	.word	0x7b81f3c9
 101823c:	0989ea4f 	.word	0x0989ea4f
 1018240:	0f01f1bb 	.word	0x0f01f1bb
 1018244:	f1cbbf88 	.word	0xf1cbbf88
 1018248:	445a0b05 	.word	0x445a0b05
 101824c:	bf882a03 	.word	0xbf882a03
 1018250:	f85c1f12 	.word	0xf85c1f12
 1018254:	f840a032 	.word	0xf840a032
 1018258:	f1b8ab04 	.word	0xf1b8ab04
 101825c:	d1e40801 	.word	0xd1e40801
 1018260:	d1ce1e49 	.word	0xd1ce1e49
 1018264:	f04fe04b 	.word	0xf04fe04b
 1018268:	f0170b08 	.word	0xf0170b08
 101826c:	bf080f1f 	.word	0xbf080f1f
 1018270:	6b04f855 	.word	0x6b04f855
 1018274:	bf2c0076 	.word	0xbf2c0076
 1018278:	22002204 	.word	0x22002204
 101827c:	a022f85c 	.word	0xa022f85c
 1018280:	ab04f840 	.word	0xab04f840
 1018284:	bf062f7e 	.word	0xbf062f7e
 1018288:	3d102700 	.word	0x3d102700
 101828c:	f04f1c7f 	.word	0xf04f1c7f
 1018290:	f1bb0860 	.word	0xf1bb0860
 1018294:	d10b0f08 	.word	0xd10b0f08
 1018298:	9b01f814 	.word	0x9b01f814
 101829c:	ab01f814 	.word	0xab01f814
 10182a0:	290ff36a 	.word	0x290ff36a
 10182a4:	ab01f814 	.word	0xab01f814
 10182a8:	4917f36a 	.word	0x4917f36a
 10182ac:	f989fa99 	.word	0xf989fa99
 10182b0:	0b01f1bb 	.word	0x0b01f1bb
 10182b4:	f04fbf08 	.word	0xf04fbf08
 10182b8:	f3c90b08 	.word	0xf3c90b08
 10182bc:	ea4f7a42 	.word	0xea4f7a42
 10182c0:	f1ba09c9 	.word	0xf1ba09c9
 10182c4:	d90d0f01 	.word	0xd90d0f01
 10182c8:	0f03f1ba 	.word	0x0f03f1ba
 10182cc:	f1cabf9c 	.word	0xf1cabf9c
 10182d0:	e0070a05 	.word	0xe0070a05
 10182d4:	0f05f1ba 	.word	0x0f05f1ba
 10182d8:	f1cabf9c 	.word	0xf1cabf9c
 10182dc:	e0010a0b 	.word	0xe0010a0b
 10182e0:	0a02f1aa 	.word	0x0a02f1aa
 10182e4:	2a074452 	.word	0x2a074452
 10182e8:	3a08bf88 	.word	0x3a08bf88
 10182ec:	a022f85c 	.word	0xa022f85c
 10182f0:	ab04f840 	.word	0xab04f840
 10182f4:	0801f1b8 	.word	0x0801f1b8
 10182f8:	1e49d1cb 	.word	0x1e49d1cb
 10182fc:	f803d1b5 	.word	0xf803d1b5
 1018300:	f8437905 	.word	0xf8437905
 1018304:	f8436908 	.word	0xf8436908
 1018308:	601c5904 	.word	0x601c5904
 101830c:	9ff0e8bd 	.word	0x9ff0e8bd
 1018310:	0000f6cc 	.word	0x0000f6cc
 1018314:	5ff0e92d 	.word	0x5ff0e92d
 1018318:	0a00f241 	.word	0x0a00f241
 101831c:	1a00f2ce 	.word	0x1a00f2ce
 1018320:	0b00f241 	.word	0x0b00f241
 1018324:	1b01f2ce 	.word	0x1b01f2ce
 1018328:	0c00f241 	.word	0x0c00f241
 101832c:	1c02f2ce 	.word	0x1c02f2ce
 1018330:	0401f04f 	.word	0x0401f04f
 1018334:	0004f1a0 	.word	0x0004f1a0
 1018338:	0188f88c 	.word	0x0188f88c
 101833c:	0148f88c 	.word	0x0148f88c
 1018340:	4208f88b 	.word	0x4208f88b
 1018344:	1108f88a 	.word	0x1108f88a
 1018348:	422af88a 	.word	0x422af88a
 101834c:	1007f88b 	.word	0x1007f88b
 1018350:	0203f1a2 	.word	0x0203f1a2
 1018354:	452af88a 	.word	0x452af88a
 1018358:	4228f88b 	.word	0x4228f88b
 101835c:	402af88c 	.word	0x402af88c
 1018360:	4268f88b 	.word	0x4268f88b
 1018364:	422af88a 	.word	0x422af88a
 1018368:	42a8f88b 	.word	0x42a8f88b
 101836c:	daf11ed2 	.word	0xdaf11ed2
 1018370:	0202f102 	.word	0x0202f102
 1018374:	d0092a00 	.word	0xd0092a00
 1018378:	d0002a01 	.word	0xd0002a01
 101837c:	f88ae008 	.word	0xf88ae008
 1018380:	f88b452a 	.word	0xf88b452a
 1018384:	f88b4228 	.word	0xf88b4228
 1018388:	e0014268 	.word	0xe0014268
 101838c:	4228f88b 	.word	0x4228f88b
 1018390:	9ff0e8bd 	.word	0x9ff0e8bd
 1018394:	5ff0e92d 	.word	0x5ff0e92d
 1018398:	0a00f241 	.word	0x0a00f241
 101839c:	1a00f2ce 	.word	0x1a00f2ce
 10183a0:	0b00f241 	.word	0x0b00f241
 10183a4:	1b01f2ce 	.word	0x1b01f2ce
 10183a8:	0c00f241 	.word	0x0c00f241
 10183ac:	1c02f2ce 	.word	0x1c02f2ce
 10183b0:	0401f04f 	.word	0x0401f04f
 10183b4:	0004f1a0 	.word	0x0004f1a0
 10183b8:	0800f04f 	.word	0x0800f04f
 10183bc:	0188f88c 	.word	0x0188f88c
 10183c0:	0148f88c 	.word	0x0148f88c
 10183c4:	4208f88b 	.word	0x4208f88b
 10183c8:	1108f88a 	.word	0x1108f88a
 10183cc:	4002f88a 	.word	0x4002f88a
 10183d0:	4248f88b 	.word	0x4248f88b
 10183d4:	0203f1a2 	.word	0x0203f1a2
 10183d8:	80c8f88a 	.word	0x80c8f88a
 10183dc:	452af88a 	.word	0x452af88a
 10183e0:	4b06f88c 	.word	0x4b06f88c
 10183e4:	42e8f88b 	.word	0x42e8f88b
 10183e8:	80c8f88a 	.word	0x80c8f88a
 10183ec:	402af88c 	.word	0x402af88c
 10183f0:	4b46f88c 	.word	0x4b46f88c
 10183f4:	42e8f88b 	.word	0x42e8f88b
 10183f8:	80c8f88a 	.word	0x80c8f88a
 10183fc:	422af88a 	.word	0x422af88a
 1018400:	4b86f88c 	.word	0x4b86f88c
 1018404:	42e8f88b 	.word	0x42e8f88b
 1018408:	dae51ed2 	.word	0xdae51ed2
 101840c:	0202f102 	.word	0x0202f102
 1018410:	d0112a00 	.word	0xd0112a00
 1018414:	d0002a01 	.word	0xd0002a01
 1018418:	f88ae014 	.word	0xf88ae014
 101841c:	f88a80c8 	.word	0xf88a80c8
 1018420:	f88c452a 	.word	0xf88c452a
 1018424:	f88b4b06 	.word	0xf88b4b06
 1018428:	f88a42e8 	.word	0xf88a42e8
 101842c:	f88c80c8 	.word	0xf88c80c8
 1018430:	f88b4b46 	.word	0xf88b4b46
 1018434:	e00542e8 	.word	0xe00542e8
 1018438:	80c8f88a 	.word	0x80c8f88a
 101843c:	4b06f88c 	.word	0x4b06f88c
 1018440:	42e8f88b 	.word	0x42e8f88b
 1018444:	9ff0e8bd 	.word	0x9ff0e8bd
 1018448:	41f0e92d 	.word	0x41f0e92d
 101844c:	0348f240 	.word	0x0348f240
 1018450:	0310f2ce 	.word	0x0310f2ce
 1018454:	b21b881b 	.word	0xb21b881b
 1018458:	f282fa43 	.word	0xf282fa43
 101845c:	8400f3ef 	.word	0x8400f3ef
 1018460:	78fff64f 	.word	0x78fff64f
 1018464:	78fff2cf 	.word	0x78fff2cf
 1018468:	0404ea08 	.word	0x0404ea08
 101846c:	8800f384 	.word	0x8800f384
 1018470:	0300f1c2 	.word	0x0300f1c2
 1018474:	4000f9b0 	.word	0x4000f9b0
 1018478:	5002f9b0 	.word	0x5002f9b0
 101847c:	db042a00 	.word	0xdb042a00
 1018480:	f602fa44 	.word	0xf602fa44
 1018484:	f702fa45 	.word	0xf702fa45
 1018488:	fa14e007 	.word	0xfa14e007
 101848c:	fa15f603 	.word	0xfa15f603
 1018490:	f306f703 	.word	0xf306f703
 1018494:	f307060f 	.word	0xf307060f
 1018498:	f820070f 	.word	0xf820070f
 101849c:	f8206b02 	.word	0xf8206b02
 10184a0:	1e497b02 	.word	0x1e497b02
 10184a4:	f04fd1e6 	.word	0xf04fd1e6
 10184a8:	f3ef0000 	.word	0xf3ef0000
 10184ac:	014a8100 	.word	0x014a8100
 10184b0:	ea01d305 	.word	0xea01d305
 10184b4:	f04f0108 	.word	0xf04f0108
 10184b8:	f3810001 	.word	0xf3810001
 10184bc:	e8bd8800 	.word	0xe8bd8800
 10184c0:	e92d81f0 	.word	0xe92d81f0
 10184c4:	f2405ff0 	.word	0xf2405ff0
 10184c8:	f2ce0a48 	.word	0xf2ce0a48
 10184cc:	f64f0a10 	.word	0xf64f0a10
 10184d0:	f2c07bff 	.word	0xf2c07bff
 10184d4:	f8ca2b07 	.word	0xf8ca2b07
 10184d8:	f241b000 	.word	0xf241b000
 10184dc:	f2ce0900 	.word	0xf2ce0900
 10184e0:	f2411900 	.word	0xf2411900
 10184e4:	f2ce0a00 	.word	0xf2ce0a00
 10184e8:	f2411a01 	.word	0xf2411a01
 10184ec:	f2ce0b00 	.word	0xf2ce0b00
 10184f0:	f2411b02 	.word	0xf2411b02
 10184f4:	f2ce0c00 	.word	0xf2ce0c00
 10184f8:	f2401c03 	.word	0xf2401c03
 10184fc:	f2ce0644 	.word	0xf2ce0644
 1018500:	f04f0610 	.word	0xf04f0610
 1018504:	60370706 	.word	0x60370706
 1018508:	0108f88b 	.word	0x0108f88b
 101850c:	054bf24e 	.word	0x054bf24e
 1018510:	656df6cf 	.word	0x656df6cf
 1018514:	51c8f889 	.word	0x51c8f889
 1018518:	0540f04f 	.word	0x0540f04f
 101851c:	0148f88b 	.word	0x0148f88b
 1018520:	7100f500 	.word	0x7100f500
 1018524:	1188f88b 	.word	0x1188f88b
 1018528:	0100f04f 	.word	0x0100f04f
 101852c:	d0032900 	.word	0xd0032900
 1018530:	0120f8db 	.word	0x0120f8db
 1018534:	0188f88b 	.word	0x0188f88b
 1018538:	0200f04f 	.word	0x0200f04f
 101853c:	0600f04f 	.word	0x0600f04f
 1018540:	0700f04f 	.word	0x0700f04f
 1018544:	0300f04f 	.word	0x0300f04f
 1018548:	6110f889 	.word	0x6110f889
 101854c:	d10c2900 	.word	0xd10c2900
 1018550:	0003eb02 	.word	0x0003eb02
 1018554:	0008f88b 	.word	0x0008f88b
 1018558:	0008f88a 	.word	0x0008f88a
 101855c:	0405eb00 	.word	0x0405eb00
 1018560:	4048f88b 	.word	0x4048f88b
 1018564:	4048f88a 	.word	0x4048f88a
 1018568:	eb02e00b 	.word	0xeb02e00b
 101856c:	f88b0003 	.word	0xf88b0003
 1018570:	f88a0008 	.word	0xf88a0008
 1018574:	eb000008 	.word	0xeb000008
 1018578:	f88b0405 	.word	0xf88b0405
 101857c:	f88a4048 	.word	0xf88a4048
 1018580:	ea4f4048 	.word	0xea4f4048
 1018584:	44200455 	.word	0x44200455
 1018588:	0088f88b 	.word	0x0088f88b
 101858c:	6750f889 	.word	0x6750f889
 1018590:	0007f88c 	.word	0x0007f88c
 1018594:	0007f88c 	.word	0x0007f88c
 1018598:	0405eb00 	.word	0x0405eb00
 101859c:	40c8f88b 	.word	0x40c8f88b
 10185a0:	d1042900 	.word	0xd1042900
 10185a4:	0449f88a 	.word	0x0449f88a
 10185a8:	470af889 	.word	0x470af889
 10185ac:	f88ae003 	.word	0xf88ae003
 10185b0:	f8890449 	.word	0xf8890449
 10185b4:	f88b470a 	.word	0xf88b470a
 10185b8:	f88c01c8 	.word	0xf88c01c8
 10185bc:	f88c0007 	.word	0xf88c0007
 10185c0:	f88b02c1 	.word	0xf88b02c1
 10185c4:	f8894542 	.word	0xf8894542
 10185c8:	f8890281 	.word	0xf8890281
 10185cc:	f8db7190 	.word	0xf8db7190
 10185d0:	f8db0020 	.word	0xf8db0020
 10185d4:	f88a4060 	.word	0xf88a4060
 10185d8:	f88b01d4 	.word	0xf88b01d4
 10185dc:	f8db4392 	.word	0xf8db4392
 10185e0:	f8db00a0 	.word	0xf8db00a0
 10185e4:	f88a40e0 	.word	0xf88a40e0
 10185e8:	f88a00a8 	.word	0xf88a00a8
 10185ec:	ea4f40e8 	.word	0xea4f40e8
 10185f0:	44030045 	.word	0x44030045
 10185f4:	007ff1b3 	.word	0x007ff1b3
 10185f8:	d4a51e40 	.word	0xd4a51e40
 10185fc:	01e0f8d9 	.word	0x01e0f8d9
 1018600:	ea4f4406 	.word	0xea4f4406
 1018604:	44070040 	.word	0x44070040
 1018608:	0201f102 	.word	0x0201f102
 101860c:	0055ea4f 	.word	0x0055ea4f
 1018610:	d1974282 	.word	0xd1974282
 1018614:	01e0f8d9 	.word	0x01e0f8d9
 1018618:	0080ea4f 	.word	0x0080ea4f
 101861c:	01c8f889 	.word	0x01c8f889
 1018620:	0595ea4f 	.word	0x0595ea4f
 1018624:	c418f889 	.word	0xc418f889
 1018628:	0102f101 	.word	0x0102f101
 101862c:	f53f2906 	.word	0xf53f2906
 1018630:	f8dbaf7d 	.word	0xf8dbaf7d
 1018634:	f5000120 	.word	0xf5000120
 1018638:	f88b7000 	.word	0xf88b7000
 101863c:	f04f0148 	.word	0xf04f0148
 1018640:	f1010100 	.word	0xf1010100
 1018644:	f1020201 	.word	0xf1020201
 1018648:	f1030301 	.word	0xf1030301
 101864c:	f88a0501 	.word	0xf88a0501
 1018650:	f88a1008 	.word	0xf88a1008
 1018654:	f88a2048 	.word	0xf88a2048
 1018658:	f88a3088 	.word	0xf88a3088
 101865c:	f88a5649 	.word	0xf88a5649
 1018660:	f88a1038 	.word	0xf88a1038
 1018664:	f88c2078 	.word	0xf88c2078
 1018668:	f88a10c1 	.word	0xf88a10c1
 101866c:	f88a30b8 	.word	0xf88a30b8
 1018670:	f10150f8 	.word	0xf10150f8
 1018674:	f1b10104 	.word	0xf1b10104
 1018678:	1e40007f 	.word	0x1e40007f
 101867c:	e8bdd4e1 	.word	0xe8bdd4e1
 1018680:	e92d9ff0 	.word	0xe92d9ff0
 1018684:	f2404ff0 	.word	0xf2404ff0
 1018688:	f2ce0a48 	.word	0xf2ce0a48
 101868c:	f64f0a10 	.word	0xf64f0a10
 1018690:	f2c07bff 	.word	0xf2c07bff
 1018694:	f8ca2b07 	.word	0xf8ca2b07
 1018698:	f241b000 	.word	0xf241b000
 101869c:	f2ce0900 	.word	0xf2ce0900
 10186a0:	f2411900 	.word	0xf2411900
 10186a4:	f2ce0a00 	.word	0xf2ce0a00
 10186a8:	f2411a01 	.word	0xf2411a01
 10186ac:	f2ce0b00 	.word	0xf2ce0b00
 10186b0:	f2411b02 	.word	0xf2411b02
 10186b4:	f2ce0c00 	.word	0xf2ce0c00
 10186b8:	f2401c03 	.word	0xf2401c03
 10186bc:	f2ce0644 	.word	0xf2ce0644
 10186c0:	f04f0610 	.word	0xf04f0610
 10186c4:	60370708 	.word	0x60370708
 10186c8:	0108f88b 	.word	0x0108f88b
 10186cc:	0513f647 	.word	0x0513f647
 10186d0:	759bf6cf 	.word	0x759bf6cf
 10186d4:	51c8f889 	.word	0x51c8f889
 10186d8:	7580f44f 	.word	0x7580f44f
 10186dc:	0148f88b 	.word	0x0148f88b
 10186e0:	6100f500 	.word	0x6100f500
 10186e4:	1188f88b 	.word	0x1188f88b
 10186e8:	0100f04f 	.word	0x0100f04f
 10186ec:	d0032900 	.word	0xd0032900
 10186f0:	0120f8db 	.word	0x0120f8db
 10186f4:	0188f88b 	.word	0x0188f88b
 10186f8:	0200f04f 	.word	0x0200f04f
 10186fc:	0600f04f 	.word	0x0600f04f
 1018700:	0700f04f 	.word	0x0700f04f
 1018704:	0300f04f 	.word	0x0300f04f
 1018708:	6110f889 	.word	0x6110f889
 101870c:	d10c2900 	.word	0xd10c2900
 1018710:	0003eb02 	.word	0x0003eb02
 1018714:	0008f88b 	.word	0x0008f88b
 1018718:	0008f88a 	.word	0x0008f88a
 101871c:	0405eb00 	.word	0x0405eb00
 1018720:	4048f88b 	.word	0x4048f88b
 1018724:	4048f88a 	.word	0x4048f88a
 1018728:	eb02e00b 	.word	0xeb02e00b
 101872c:	f88b0003 	.word	0xf88b0003
 1018730:	f88a0008 	.word	0xf88a0008
 1018734:	eb000008 	.word	0xeb000008
 1018738:	f88b0405 	.word	0xf88b0405
 101873c:	f88a4048 	.word	0xf88a4048
 1018740:	ea4f4048 	.word	0xea4f4048
 1018744:	44200455 	.word	0x44200455
 1018748:	0088f88b 	.word	0x0088f88b
 101874c:	6750f889 	.word	0x6750f889
 1018750:	0007f88c 	.word	0x0007f88c
 1018754:	0007f88c 	.word	0x0007f88c
 1018758:	0405eb00 	.word	0x0405eb00
 101875c:	40c8f88b 	.word	0x40c8f88b
 1018760:	d1042900 	.word	0xd1042900
 1018764:	0449f88a 	.word	0x0449f88a
 1018768:	470af889 	.word	0x470af889
 101876c:	f88ae003 	.word	0xf88ae003
 1018770:	f8890449 	.word	0xf8890449
 1018774:	f88b470a 	.word	0xf88b470a
 1018778:	f88c01c8 	.word	0xf88c01c8
 101877c:	f88c0007 	.word	0xf88c0007
 1018780:	f88b02c1 	.word	0xf88b02c1
 1018784:	f8894542 	.word	0xf8894542
 1018788:	f8890281 	.word	0xf8890281
 101878c:	f8db7190 	.word	0xf8db7190
 1018790:	f8db0020 	.word	0xf8db0020
 1018794:	f88a4060 	.word	0xf88a4060
 1018798:	f88b01d4 	.word	0xf88b01d4
 101879c:	f8db4392 	.word	0xf8db4392
 10187a0:	f8db00a0 	.word	0xf8db00a0
 10187a4:	f88a40e0 	.word	0xf88a40e0
 10187a8:	f88a00a8 	.word	0xf88a00a8
 10187ac:	ea4f40e8 	.word	0xea4f40e8
 10187b0:	44030045 	.word	0x44030045
 10187b4:	00fff1b3 	.word	0x00fff1b3
 10187b8:	1e4038ff 	.word	0x1e4038ff
 10187bc:	f8d9d4a4 	.word	0xf8d9d4a4
 10187c0:	440601e0 	.word	0x440601e0
 10187c4:	0040ea4f 	.word	0x0040ea4f
 10187c8:	f1024407 	.word	0xf1024407
 10187cc:	ea4f0201 	.word	0xea4f0201
 10187d0:	42820055 	.word	0x42820055
 10187d4:	f8d9d196 	.word	0xf8d9d196
 10187d8:	ea4f01e0 	.word	0xea4f01e0
 10187dc:	f8890080 	.word	0xf8890080
 10187e0:	ea4f01c8 	.word	0xea4f01c8
 10187e4:	f8890595 	.word	0xf8890595
 10187e8:	f101c418 	.word	0xf101c418
 10187ec:	29080102 	.word	0x29080102
 10187f0:	af7cf53f 	.word	0xaf7cf53f
 10187f4:	0120f8db 	.word	0x0120f8db
 10187f8:	6000f500 	.word	0x6000f500
 10187fc:	0148f88b 	.word	0x0148f88b
 1018800:	0100f04f 	.word	0x0100f04f
 1018804:	0201f101 	.word	0x0201f101
 1018808:	0301f102 	.word	0x0301f102
 101880c:	0501f103 	.word	0x0501f103
 1018810:	1008f88a 	.word	0x1008f88a
 1018814:	2048f88a 	.word	0x2048f88a
 1018818:	3088f88a 	.word	0x3088f88a
 101881c:	5649f88a 	.word	0x5649f88a
 1018820:	1038f88a 	.word	0x1038f88a
 1018824:	2078f88a 	.word	0x2078f88a
 1018828:	10c1f88c 	.word	0x10c1f88c
 101882c:	30b8f88a 	.word	0x30b8f88a
 1018830:	50f8f88a 	.word	0x50f8f88a
 1018834:	0104f101 	.word	0x0104f101
 1018838:	00fff1b1 	.word	0x00fff1b1
 101883c:	1e4038ff 	.word	0x1e4038ff
 1018840:	e8bdd4e0 	.word	0xe8bdd4e0
 1018844:	e92d8ff0 	.word	0xe92d8ff0
 1018848:	f2404ff0 	.word	0xf2404ff0
 101884c:	f2ce0a48 	.word	0xf2ce0a48
 1018850:	f64f0a10 	.word	0xf64f0a10
 1018854:	f2c07bff 	.word	0xf2c07bff
 1018858:	f8ca2b07 	.word	0xf8ca2b07
 101885c:	f240b000 	.word	0xf240b000
 1018860:	f2ce0a48 	.word	0xf2ce0a48
 1018864:	f64f0a10 	.word	0xf64f0a10
 1018868:	f6cf7bff 	.word	0xf6cf7bff
 101886c:	f8da7bfe 	.word	0xf8da7bfe
 1018870:	ea099000 	.word	0xea099000
 1018874:	f8ca090b 	.word	0xf8ca090b
 1018878:	f2419000 	.word	0xf2419000
 101887c:	f2ce0900 	.word	0xf2ce0900
 1018880:	f2411900 	.word	0xf2411900
 1018884:	f2ce0a00 	.word	0xf2ce0a00
 1018888:	f2411a01 	.word	0xf2411a01
 101888c:	f2ce0b00 	.word	0xf2ce0b00
 1018890:	f2411b02 	.word	0xf2411b02
 1018894:	f2ce0c00 	.word	0xf2ce0c00
 1018898:	f2401c03 	.word	0xf2401c03
 101889c:	f2ce0644 	.word	0xf2ce0644
 10188a0:	f04f0610 	.word	0xf04f0610
 10188a4:	60370708 	.word	0x60370708
 10188a8:	0108f88b 	.word	0x0108f88b
 10188ac:	0513f647 	.word	0x0513f647
 10188b0:	759bf6cf 	.word	0x759bf6cf
 10188b4:	51c8f889 	.word	0x51c8f889
 10188b8:	7580f44f 	.word	0x7580f44f
 10188bc:	0148f88b 	.word	0x0148f88b
 10188c0:	6100f500 	.word	0x6100f500
 10188c4:	1188f88b 	.word	0x1188f88b
 10188c8:	0100f04f 	.word	0x0100f04f
 10188cc:	d0032900 	.word	0xd0032900
 10188d0:	0120f8db 	.word	0x0120f8db
 10188d4:	0188f88b 	.word	0x0188f88b
 10188d8:	0200f04f 	.word	0x0200f04f
 10188dc:	0600f04f 	.word	0x0600f04f
 10188e0:	0700f04f 	.word	0x0700f04f
 10188e4:	0300f04f 	.word	0x0300f04f
 10188e8:	6110f889 	.word	0x6110f889
 10188ec:	d10c2900 	.word	0xd10c2900
 10188f0:	0003eb02 	.word	0x0003eb02
 10188f4:	0008f88b 	.word	0x0008f88b
 10188f8:	0008f88a 	.word	0x0008f88a
 10188fc:	0405eb00 	.word	0x0405eb00
 1018900:	4048f88b 	.word	0x4048f88b
 1018904:	4048f88a 	.word	0x4048f88a
 1018908:	eb02e00b 	.word	0xeb02e00b
 101890c:	f88b0003 	.word	0xf88b0003
 1018910:	f88a0008 	.word	0xf88a0008
 1018914:	eb000008 	.word	0xeb000008
 1018918:	f88b0405 	.word	0xf88b0405
 101891c:	f88a4048 	.word	0xf88a4048
 1018920:	ea4f4048 	.word	0xea4f4048
 1018924:	44200455 	.word	0x44200455
 1018928:	0088f88b 	.word	0x0088f88b
 101892c:	6350f889 	.word	0x6350f889
 1018930:	0007f88c 	.word	0x0007f88c
 1018934:	0007f88c 	.word	0x0007f88c
 1018938:	0405eb00 	.word	0x0405eb00
 101893c:	40c8f88b 	.word	0x40c8f88b
 1018940:	d1042900 	.word	0xd1042900
 1018944:	0449f88a 	.word	0x0449f88a
 1018948:	470af889 	.word	0x470af889
 101894c:	f88ae003 	.word	0xf88ae003
 1018950:	f8890449 	.word	0xf8890449
 1018954:	f88b470a 	.word	0xf88b470a
 1018958:	f88c01c8 	.word	0xf88c01c8
 101895c:	f88c0007 	.word	0xf88c0007
 1018960:	f88b02c1 	.word	0xf88b02c1
 1018964:	f8894542 	.word	0xf8894542
 1018968:	f8890281 	.word	0xf8890281
 101896c:	f8db7190 	.word	0xf8db7190
 1018970:	f8db0020 	.word	0xf8db0020
 1018974:	f88a4060 	.word	0xf88a4060
 1018978:	f88b01d4 	.word	0xf88b01d4
 101897c:	f8db4392 	.word	0xf8db4392
 1018980:	f8db00a0 	.word	0xf8db00a0
 1018984:	f88a40e0 	.word	0xf88a40e0
 1018988:	f88a00a8 	.word	0xf88a00a8
 101898c:	ea4f40e8 	.word	0xea4f40e8
 1018990:	44030045 	.word	0x44030045
 1018994:	00fff1b3 	.word	0x00fff1b3
 1018998:	1e4038ff 	.word	0x1e4038ff
 101899c:	f8d9d4a4 	.word	0xf8d9d4a4
 10189a0:	1a3601e0 	.word	0x1a3601e0
 10189a4:	0040ea4f 	.word	0x0040ea4f
 10189a8:	f1021a3f 	.word	0xf1021a3f
 10189ac:	ea4f0201 	.word	0xea4f0201
 10189b0:	42820055 	.word	0x42820055
 10189b4:	f8d9d196 	.word	0xf8d9d196
 10189b8:	ea4f01e0 	.word	0xea4f01e0
 10189bc:	f8890080 	.word	0xf8890080
 10189c0:	ea4f01c8 	.word	0xea4f01c8
 10189c4:	f8890595 	.word	0xf8890595
 10189c8:	f101c418 	.word	0xf101c418
 10189cc:	29080102 	.word	0x29080102
 10189d0:	af7cf53f 	.word	0xaf7cf53f
 10189d4:	0120f8db 	.word	0x0120f8db
 10189d8:	6000f500 	.word	0x6000f500
 10189dc:	0148f88b 	.word	0x0148f88b
 10189e0:	0100f04f 	.word	0x0100f04f
 10189e4:	0201f101 	.word	0x0201f101
 10189e8:	0301f102 	.word	0x0301f102
 10189ec:	0501f103 	.word	0x0501f103
 10189f0:	1008f88a 	.word	0x1008f88a
 10189f4:	2048f88a 	.word	0x2048f88a
 10189f8:	3088f88a 	.word	0x3088f88a
 10189fc:	5649f88a 	.word	0x5649f88a
 1018a00:	1038f88a 	.word	0x1038f88a
 1018a04:	2078f88a 	.word	0x2078f88a
 1018a08:	10c1f88c 	.word	0x10c1f88c
 1018a0c:	30b8f88a 	.word	0x30b8f88a
 1018a10:	50f8f88a 	.word	0x50f8f88a
 1018a14:	0104f101 	.word	0x0104f101
 1018a18:	00fff1b1 	.word	0x00fff1b1
 1018a1c:	1e4038ff 	.word	0x1e4038ff
 1018a20:	e8bdd4e0 	.word	0xe8bdd4e0
 1018a24:	00008ff0 	.word	0x00008ff0
 1018a28:	49054804 	.word	0x49054804
 1018a2c:	f6426001 	.word	0xf6426001
 1018a30:	44110230 	.word	0x44110230
 1018a34:	47706041 	.word	0x47706041
 1018a38:	47704800 	.word	0x47704800
 1018a3c:	200132bc 	.word	0x200132bc
 1018a40:	20013cd8 	.word	0x20013cd8
 1018a44:	d113421b 	.word	0xd113421b
 1018a48:	d1364209 	.word	0xd1364209
 1018a4c:	4684b12a 	.word	0x4684b12a
 1018a50:	f0f2fbb0 	.word	0xf0f2fbb0
 1018a54:	c210fb02 	.word	0xc210fb02
 1018a58:	f0044770 	.word	0xf0044770
 1018a5c:	d3fcb89b 	.word	0xd3fcb89b
 1018a60:	23002200 	.word	0x23002200
 1018a64:	000b4770 	.word	0x000b4770
 1018a68:	21000002 	.word	0x21000002
 1018a6c:	47702000 	.word	0x47702000
 1018a70:	eb714290 	.word	0xeb714290
 1018a74:	d3f60c03 	.word	0xd3f60c03
 1018a78:	fab1b570 	.word	0xfab1b570
 1018a7c:	fab3f481 	.word	0xfab3f481
 1018a80:	1b2cf583 	.word	0x1b2cf583
 1018a84:	f1c440a3 	.word	0xf1c440a3
 1018a88:	fa320520 	.word	0xfa320520
 1018a8c:	4333f605 	.word	0x4333f605
 1018a90:	f05f40a2 	.word	0xf05f40a2
 1018a94:	40e64600 	.word	0x40e64600
 1018a98:	085be002 	.word	0x085be002
 1018a9c:	0232ea5f 	.word	0x0232ea5f
 1018aa0:	eb711a84 	.word	0xeb711a84
 1018aa4:	bf240503 	.word	0xbf240503
 1018aa8:	46294620 	.word	0x46294620
 1018aac:	d3f44176 	.word	0xd3f44176
 1018ab0:	000b0002 	.word	0x000b0002
 1018ab4:	21000030 	.word	0x21000030
 1018ab8:	2a01bd70 	.word	0x2a01bd70
 1018abc:	b570d9cf 	.word	0xb570d9cf
 1018ac0:	d0200c14 	.word	0xd0200c14
 1018ac4:	f481fab1 	.word	0xf481fab1
 1018ac8:	f582fab2 	.word	0xf582fab2
 1018acc:	0420f1c4 	.word	0x0420f1c4
 1018ad0:	f1b41964 	.word	0xf1b41964
 1018ad4:	d3d60620 	.word	0xd3d60620
 1018ad8:	f05f40b2 	.word	0xf05f40b2
 1018adc:	40f44400 	.word	0x40f44400
 1018ae0:	e0022500 	.word	0xe0022500
 1018ae4:	ea5f0852 	.word	0xea5f0852
 1018ae8:	1ac60333 	.word	0x1ac60333
 1018aec:	0e02eb71 	.word	0x0e02eb71
 1018af0:	4630bf24 	.word	0x4630bf24
 1018af4:	41644671 	.word	0x41644671
 1018af8:	d3f3416d 	.word	0xd3f3416d
 1018afc:	000b0002 	.word	0x000b0002
 1018b00:	00290020 	.word	0x00290020
 1018b04:	460cbd70 	.word	0x460cbd70
 1018b08:	f1f2fbb1 	.word	0xf1f2fbb1
 1018b0c:	4511fb02 	.word	0x4511fb02
 1018b10:	ea45042d 	.word	0xea45042d
 1018b14:	fbb54510 	.word	0xfbb54510
 1018b18:	fb02f4f2 	.word	0xfb02f4f2
 1018b1c:	b2805514 	.word	0xb2805514
 1018b20:	4505ea40 	.word	0x4505ea40
 1018b24:	f0f2fbb5 	.word	0xf0f2fbb5
 1018b28:	5210fb02 	.word	0x5210fb02
 1018b2c:	4004ea40 	.word	0x4004ea40
 1018b30:	0000bd70 	.word	0x0000bd70
 1018b34:	f1402900 	.word	0xf1402900
 1018b38:	46f4800b 	.word	0x46f4800b
 1018b3c:	42404249 	.word	0x42404249
 1018b40:	0100f171 	.word	0x0100f171
 1018b44:	f80af000 	.word	0xf80af000
 1018b48:	4000f050 	.word	0x4000f050
 1018b4c:	00004760 	.word	0x00004760
 1018b50:	0201ea50 	.word	0x0201ea50
 1018b54:	800ef000 	.word	0x800ef000
 1018b58:	bf004209 	.word	0xbf004209
 1018b5c:	fab0d10b 	.word	0xfab0d10b
 1018b60:	4088f180 	.word	0x4088f180
 1018b64:	019df1c1 	.word	0x019df1c1
 1018b68:	060205c9 	.word	0x060205c9
 1018b6c:	4200f172 	.word	0x4200f172
 1018b70:	2010eb41 	.word	0x2010eb41
 1018b74:	fab14770 	.word	0xfab14770
 1018b78:	4041f281 	.word	0x4041f281
 1018b7c:	f1c24090 	.word	0xf1c24090
 1018b80:	fa610220 	.word	0xfa610220
 1018b84:	ea81f102 	.word	0xea81f102
 1018b88:	bf180000 	.word	0xbf180000
 1018b8c:	0001f040 	.word	0x0001f040
 1018b90:	019df102 	.word	0x019df102
 1018b94:	0000e7e8 	.word	0x0000e7e8
 1018b98:	0ac0eeb5 	.word	0x0ac0eeb5
 1018b9c:	fa10eef1 	.word	0xfa10eef1
 1018ba0:	eeb1d402 	.word	0xeeb1d402
 1018ba4:	47700ac0 	.word	0x47700ac0
 1018ba8:	4c00f06f 	.word	0x4c00f06f
 1018bac:	ca10ee00 	.word	0xca10ee00
 1018bb0:	bff2f003 	.word	0xbff2f003
 1018bb4:	5ff0e92d 	.word	0x5ff0e92d
 1018bb8:	4b04f853 	.word	0x4b04f853
 1018bbc:	5b02f833 	.word	0x5b02f833
 1018bc0:	2c00881b 	.word	0x2c00881b
 1018bc4:	4626bf59 	.word	0x4626bf59
 1018bc8:	4266462f 	.word	0x4266462f
 1018bcc:	f832426f 	.word	0xf832426f
 1018bd0:	fb368b02 	.word	0xfb368b02
 1018bd4:	f850f908 	.word	0xf850f908
 1018bd8:	45a9ab04 	.word	0x45a9ab04
 1018bdc:	fb34d50a 	.word	0xfb34d50a
 1018be0:	fb34f80a 	.word	0xfb34f80a
 1018be4:	eac8f91a 	.word	0xeac8f91a
 1018be8:	f8414809 	.word	0xf8414809
 1018bec:	1e5b8b04 	.word	0x1e5b8b04
 1018bf0:	e011d1ed 	.word	0xe011d1ed
 1018bf4:	f98afa0f 	.word	0xf98afa0f
 1018bf8:	9b07fb89 	.word	0x9b07fb89
 1018bfc:	f9f8fb99 	.word	0xf9f8fb99
 1018c00:	4b2aea4f 	.word	0x4b2aea4f
 1018c04:	bc07fb8b 	.word	0xbc07fb8b
 1018c08:	fbf8fb9b 	.word	0xfbf8fb9b
 1018c0c:	490beac9 	.word	0x490beac9
 1018c10:	9b04f841 	.word	0x9b04f841
 1018c14:	d1da1e5b 	.word	0xd1da1e5b
 1018c18:	9ff0e8bd 	.word	0x9ff0e8bd
 1018c1c:	4ff0e92d 	.word	0x4ff0e92d
 1018c20:	4413ea4f 	.word	0x4413ea4f
 1018c24:	eba0b2db 	.word	0xeba0b2db
 1018c28:	2c000a82 	.word	0x2c000a82
 1018c2c:	4d2ad042 	.word	0x4d2ad042
 1018c30:	d0002b00 	.word	0xd0002b00
 1018c34:	f835e00d 	.word	0xf835e00d
 1018c38:	68076b02 	.word	0x68076b02
 1018c3c:	f807fb36 	.word	0xf807fb36
 1018c40:	f917fb36 	.word	0xf917fb36
 1018c44:	4809eac8 	.word	0x4809eac8
 1018c48:	8904f840 	.word	0x8904f840
 1018c4c:	d1f21e64 	.word	0xd1f21e64
 1018c50:	46a3e033 	.word	0x46a3e033
 1018c54:	6b02f835 	.word	0x6b02f835
 1018c58:	fb366807 	.word	0xfb366807
 1018c5c:	fb36f807 	.word	0xfb36f807
 1018c60:	eac8f917 	.word	0xeac8f917
 1018c64:	f8404809 	.word	0xf8404809
 1018c68:	f84a8904 	.word	0xf84a8904
 1018c6c:	f1bb7904 	.word	0xf1bb7904
 1018c70:	d1ef0b01 	.word	0xd1ef0b01
 1018c74:	0344eba3 	.word	0x0344eba3
 1018c78:	7904f850 	.word	0x7904f850
 1018c7c:	7904f84a 	.word	0x7904f84a
 1018c80:	d1f91e5b 	.word	0xd1f91e5b
 1018c84:	d0182c00 	.word	0xd0182c00
 1018c88:	0502f1a5 	.word	0x0502f1a5
 1018c8c:	f835680b 	.word	0xf835680b
 1018c90:	f8506902 	.word	0xf8506902
 1018c94:	fa0f7904 	.word	0xfa0f7904
 1018c98:	fb36f883 	.word	0xfb36f883
 1018c9c:	ea4f8807 	.word	0xea4f8807
 1018ca0:	fb364323 	.word	0xfb364323
 1018ca4:	eac83317 	.word	0xeac83317
 1018ca8:	f8414803 	.word	0xf8414803
 1018cac:	1e648904 	.word	0x1e648904
 1018cb0:	e002d1ec 	.word	0xe002d1ec
 1018cb4:	d0002b00 	.word	0xd0002b00
 1018cb8:	e8bde7de 	.word	0xe8bde7de
 1018cbc:	b5108ff0 	.word	0xb5108ff0
 1018cc0:	0300f04f 	.word	0x0300f04f
 1018cc4:	4b04f850 	.word	0x4b04f850
 1018cc8:	f404fad3 	.word	0xf404fad3
 1018ccc:	4b04f841 	.word	0x4b04f841
 1018cd0:	d1f71e52 	.word	0xd1f71e52
 1018cd4:	0000bd10 	.word	0x0000bd10
 1018cd8:	0000f744 	.word	0x0000f744
 1018cdc:	f04fb510 	.word	0xf04fb510
 1018ce0:	f8500300 	.word	0xf8500300
 1018ce4:	fb244b04 	.word	0xfb244b04
 1018ce8:	eb03f204 	.word	0xeb03f204
 1018cec:	39011312 	.word	0x39011312
 1018cf0:	4618d1f7 	.word	0x4618d1f7
 1018cf4:	0000bd10 	.word	0x0000bd10
 1018cf8:	bfbc280f 	.word	0xbfbc280f
 1018cfc:	f8424a0e 	.word	0xf8424a0e
 1018d00:	47701020 	.word	0x47701020
 1018d04:	b081b5f0 	.word	0xb081b5f0
 1018d08:	2400480c 	.word	0x2400480c
 1018d0c:	4e0a6805 	.word	0x4e0a6805
 1018d10:	e00c4f0b 	.word	0xe00c4f0b
 1018d14:	d50607e8 	.word	0xd50607e8
 1018d18:	1084eb07 	.word	0x1084eb07
 1018d1c:	683068c0 	.word	0x683068c0
 1018d20:	bf180001 	.word	0xbf180001
 1018d24:	1c644780 	.word	0x1c644780
 1018d28:	086db2e4 	.word	0x086db2e4
 1018d2c:	b10d1d36 	.word	0xb10d1d36
 1018d30:	dbef2c0f 	.word	0xdbef2c0f
 1018d34:	bdf0b001 	.word	0xbdf0b001
 1018d38:	20013140 	.word	0x20013140
 1018d3c:	40010018 	.word	0x40010018
 1018d40:	40010050 	.word	0x40010050
 1018d44:	4ff0e92d 	.word	0x4ff0e92d
 1018d48:	48a0b083 	.word	0x48a0b083
 1018d4c:	f04f6800 	.word	0xf04f6800
 1018d50:	90002840 	.word	0x90002840
 1018d54:	f7fb200e 	.word	0xf7fb200e
 1018d58:	f8d8fbab 	.word	0xf8d8fbab
 1018d5c:	4e9c50c8 	.word	0x4e9c50c8
 1018d60:	24024647 	.word	0x24024647
 1018d64:	28017830 	.word	0x28017830
 1018d68:	0268d11f 	.word	0x0268d11f
 1018d6c:	6d38d51d 	.word	0x6d38d51d
 1018d70:	f8d86e39 	.word	0xf8d86e39
 1018d74:	f8d8a008 	.word	0xf8d8a008
 1018d78:	f425b008 	.word	0xf425b008
 1018d7c:	eba00580 	.word	0xeba00580
 1018d80:	f7fd0901 	.word	0xf7fd0901
 1018d84:	f10afa33 	.word	0xf10afa33
 1018d88:	99000201 	.word	0x99000201
 1018d8c:	4200f022 	.word	0x4200f022
 1018d90:	0301f10b 	.word	0x0301f10b
 1018d94:	005b444a 	.word	0x005b444a
 1018d98:	f2f3fbb2 	.word	0xf2f3fbb2
 1018d9c:	18401851 	.word	0x18401851
 1018da0:	6949498b 	.word	0x6949498b
 1018da4:	20024788 	.word	0x20024788
 1018da8:	1d3f7030 	.word	0x1d3f7030
 1018dac:	1e641c76 	.word	0x1e641c76
 1018db0:	2600d1d8 	.word	0x2600d1d8
 1018db4:	46444f86 	.word	0x46444f86
 1018db8:	28027838 	.word	0x28027838
 1018dbc:	2010d12e 	.word	0x2010d12e
 1018dc0:	420540b0 	.word	0x420540b0
 1018dc4:	d0299001 	.word	0xd0299001
 1018dc8:	0010f8d8 	.word	0x0010f8d8
 1018dcc:	10a0f8d8 	.word	0x10a0f8d8
 1018dd0:	eb010c09 	.word	0xeb010c09
 1018dd4:	f8d44910 	.word	0xf8d44910
 1018dd8:	90020080 	.word	0x90020080
 1018ddc:	a008f8d8 	.word	0xa008f8d8
 1018de0:	b008f8d8 	.word	0xb008f8d8
 1018de4:	fa02f7fd 	.word	0xfa02f7fd
 1018de8:	9a029900 	.word	0x9a029900
 1018dec:	f1091840 	.word	0xf1091840
 1018df0:	eb020102 	.word	0xeb020102
 1018df4:	f10a0181 	.word	0xf10a0181
 1018df8:	00520201 	.word	0x00520201
 1018dfc:	0162eb01 	.word	0x0162eb01
 1018e00:	0201f10b 	.word	0x0201f10b
 1018e04:	fb910052 	.word	0xfb910052
 1018e08:	4a71f1f2 	.word	0x4a71f1f2
 1018e0c:	68921a41 	.word	0x68921a41
 1018e10:	47904630 	.word	0x47904630
 1018e14:	70382000 	.word	0x70382000
 1018e18:	43859801 	.word	0x43859801
 1018e1c:	1d241c76 	.word	0x1d241c76
 1018e20:	2e021c7f 	.word	0x2e021c7f
 1018e24:	07e8dbc8 	.word	0x07e8dbc8
 1018e28:	200ed50f 	.word	0x200ed50f
 1018e2c:	fb40f7fb 	.word	0xfb40f7fb
 1018e30:	46402100 	.word	0x46402100
 1018e34:	f918f7fd 	.word	0xf918f7fd
 1018e38:	4a659900 	.word	0x4a659900
 1018e3c:	18416852 	.word	0x18416852
 1018e40:	47902000 	.word	0x47902000
 1018e44:	49622001 	.word	0x49622001
 1018e48:	f3c57008 	.word	0xf3c57008
 1018e4c:	b1780040 	.word	0xb1780040
 1018e50:	f7fb200e 	.word	0xf7fb200e
 1018e54:	2101fb2d 	.word	0x2101fb2d
 1018e58:	f7fd4640 	.word	0xf7fd4640
 1018e5c:	9900f905 	.word	0x9900f905
 1018e60:	68524a5b 	.word	0x68524a5b
 1018e64:	20011841 	.word	0x20011841
 1018e68:	20014790 	.word	0x20014790
 1018e6c:	70484958 	.word	0x70484958
 1018e70:	d5280268 	.word	0xd5280268
 1018e74:	4e56200e 	.word	0x4e56200e
 1018e78:	fb1af7fb 	.word	0xfb1af7fb
 1018e7c:	24024647 	.word	0x24024647
 1018e80:	28017830 	.word	0x28017830
 1018e84:	6d38d11b 	.word	0x6d38d11b
 1018e88:	f8d86e39 	.word	0xf8d86e39
 1018e8c:	f8d8a008 	.word	0xf8d8a008
 1018e90:	eba0b008 	.word	0xeba0b008
 1018e94:	f7fd0901 	.word	0xf7fd0901
 1018e98:	f10af9a9 	.word	0xf10af9a9
 1018e9c:	99000201 	.word	0x99000201
 1018ea0:	4200f022 	.word	0x4200f022
 1018ea4:	0301f10b 	.word	0x0301f10b
 1018ea8:	005b444a 	.word	0x005b444a
 1018eac:	f2f3fbb2 	.word	0xf2f3fbb2
 1018eb0:	18401851 	.word	0x18401851
 1018eb4:	69494946 	.word	0x69494946
 1018eb8:	20024788 	.word	0x20024788
 1018ebc:	1d3f7030 	.word	0x1d3f7030
 1018ec0:	1e641c76 	.word	0x1e641c76
 1018ec4:	2600d1dc 	.word	0x2600d1dc
 1018ec8:	46444f41 	.word	0x46444f41
 1018ecc:	40b02010 	.word	0x40b02010
 1018ed0:	d02a4205 	.word	0xd02a4205
 1018ed4:	f7fb200e 	.word	0xf7fb200e
 1018ed8:	f8d8faeb 	.word	0xf8d8faeb
 1018edc:	f8d80010 	.word	0xf8d80010
 1018ee0:	0c0910a0 	.word	0x0c0910a0
 1018ee4:	4910eb01 	.word	0x4910eb01
 1018ee8:	0080f8d4 	.word	0x0080f8d4
 1018eec:	f8d89001 	.word	0xf8d89001
 1018ef0:	f8d8a008 	.word	0xf8d8a008
 1018ef4:	f7fdb008 	.word	0xf7fdb008
 1018ef8:	9900f979 	.word	0x9900f979
 1018efc:	18409a01 	.word	0x18409a01
 1018f00:	0102f109 	.word	0x0102f109
 1018f04:	0181eb02 	.word	0x0181eb02
 1018f08:	0201f10a 	.word	0x0201f10a
 1018f0c:	eb010052 	.word	0xeb010052
 1018f10:	f10b0162 	.word	0xf10b0162
 1018f14:	00520201 	.word	0x00520201
 1018f18:	f1f2fb91 	.word	0xf1f2fb91
 1018f1c:	1a414a2c 	.word	0x1a414a2c
 1018f20:	46306892 	.word	0x46306892
 1018f24:	20004790 	.word	0x20004790
 1018f28:	f44f7038 	.word	0xf44f7038
 1018f2c:	40b07080 	.word	0x40b07080
 1018f30:	d01f4205 	.word	0xd01f4205
 1018f34:	f7fb200e 	.word	0xf7fb200e
 1018f38:	6d20fabb 	.word	0x6d20fabb
 1018f3c:	f8d86e21 	.word	0xf8d86e21
 1018f40:	f8d8a008 	.word	0xf8d8a008
 1018f44:	eba0b008 	.word	0xeba0b008
 1018f48:	f7fd0901 	.word	0xf7fd0901
 1018f4c:	f10af94f 	.word	0xf10af94f
 1018f50:	99000201 	.word	0x99000201
 1018f54:	4200f022 	.word	0x4200f022
 1018f58:	0301f10b 	.word	0x0301f10b
 1018f5c:	005b444a 	.word	0x005b444a
 1018f60:	f2f3fbb2 	.word	0xf2f3fbb2
 1018f64:	4a1a1851 	.word	0x4a1a1851
 1018f68:	184168d2 	.word	0x184168d2
 1018f6c:	47904630 	.word	0x47904630
 1018f70:	70382000 	.word	0x70382000
 1018f74:	5080f44f 	.word	0x5080f44f
 1018f78:	420540b0 	.word	0x420540b0
 1018f7c:	200ed00e 	.word	0x200ed00e
 1018f80:	fa96f7fb 	.word	0xfa96f7fb
 1018f84:	46404631 	.word	0x46404631
 1018f88:	f86ef7fd 	.word	0xf86ef7fd
 1018f8c:	4a109900 	.word	0x4a109900
 1018f90:	18416912 	.word	0x18416912
 1018f94:	47904630 	.word	0x47904630
 1018f98:	70382000 	.word	0x70382000
 1018f9c:	1d241c76 	.word	0x1d241c76
 1018fa0:	2e021c7f 	.word	0x2e021c7f
 1018fa4:	b003db92 	.word	0xb003db92
 1018fa8:	8ff0e8bd 	.word	0x8ff0e8bd
 1018fac:	60484908 	.word	0x60484908
 1018fb0:	49074770 	.word	0x49074770
 1018fb4:	47706088 	.word	0x47706088
 1018fb8:	60c84905 	.word	0x60c84905
 1018fbc:	49044770 	.word	0x49044770
 1018fc0:	47706108 	.word	0x47706108
 1018fc4:	61484902 	.word	0x61484902
 1018fc8:	00004770 	.word	0x00004770
 1018fcc:	400000ec 	.word	0x400000ec
 1018fd0:	200131f4 	.word	0x200131f4
 1018fd4:	5ff0e92d 	.word	0x5ff0e92d
 1018fd8:	0600f241 	.word	0x0600f241
 1018fdc:	1600f2ce 	.word	0x1600f2ce
 1018fe0:	0700f240 	.word	0x0700f240
 1018fe4:	1705f2ce 	.word	0x1705f2ce
 1018fe8:	0800f241 	.word	0x0800f241
 1018fec:	1802f2ce 	.word	0x1802f2ce
 1018ff0:	0b00f04f 	.word	0x0b00f04f
 1018ff4:	b148f888 	.word	0xb148f888
 1018ff8:	4a317232 	.word	0x4a317232
 1018ffc:	4c316812 	.word	0x4c316812
 1019000:	4d316824 	.word	0x4d316824
 1019004:	ea4f682d 	.word	0xea4f682d
 1019008:	fb000565 	.word	0xfb000565
 101900c:	fb01f003 	.word	0xfb01f003
 1019010:	f640f103 	.word	0xf640f103
 1019014:	fba04b91 	.word	0xfba04b91
 1019018:	ea4fc900 	.word	0xea4fc900
 101901c:	ea8929c9 	.word	0xea8929c9
 1019020:	fb89595c 	.word	0xfb89595c
 1019024:	ea4fc905 	.word	0xea4fc905
 1019028:	ea892949 	.word	0xea892949
 101902c:	fb8459dc 	.word	0xfb8459dc
 1019030:	ea4fca00 	.word	0xea4fca00
 1019034:	ea8a5a0a 	.word	0xea8a5a0a
 1019038:	44d13a1c 	.word	0x44d13a1c
 101903c:	0a00f240 	.word	0x0a00f240
 1019040:	0a10f2c0 	.word	0x0a10f2c0
 1019044:	0f00f1b9 	.word	0x0f00f1b9
 1019048:	eb19d504 	.word	0xeb19d504
 101904c:	d5060f0a 	.word	0xd5060f0a
 1019050:	e7fa44d1 	.word	0xe7fa44d1
 1019054:	d40245d1 	.word	0xd40245d1
 1019058:	090aeba9 	.word	0x090aeba9
 101905c:	ea4fe7fa 	.word	0xea4fe7fa
 1019060:	f1b90a5a 	.word	0xf1b90a5a
 1019064:	d5050f00 	.word	0xd5050f00
 1019068:	0f0aeb19 	.word	0x0f0aeb19
 101906c:	eb09bf48 	.word	0xeb09bf48
 1019070:	e003094a 	.word	0xe003094a
 1019074:	bf5845d1 	.word	0xbf5845d1
 1019078:	094aeba9 	.word	0x094aeba9
 101907c:	fa0bfb09 	.word	0xfa0bfb09
 1019080:	a1c8f888 	.word	0xa1c8f888
 1019084:	b00df886 	.word	0xb00df886
 1019088:	b007f886 	.word	0xb007f886
 101908c:	b007f886 	.word	0xb007f886
 1019090:	b007f886 	.word	0xb007f886
 1019094:	b007f886 	.word	0xb007f886
 1019098:	b007f886 	.word	0xb007f886
 101909c:	b007f886 	.word	0xb007f886
 10190a0:	b007f886 	.word	0xb007f886
 10190a4:	b007f886 	.word	0xb007f886
 10190a8:	b007f886 	.word	0xb007f886
 10190ac:	2b30f887 	.word	0x2b30f887
 10190b0:	0204f102 	.word	0x0204f102
 10190b4:	42814418 	.word	0x42814418
 10190b8:	e8bdd1ad 	.word	0xe8bdd1ad
 10190bc:	00009ff0 	.word	0x00009ff0
 10190c0:	20013298 	.word	0x20013298
 10190c4:	20013294 	.word	0x20013294
 10190c8:	20013290 	.word	0x20013290
 10190cc:	bf3a4281 	.word	0xbf3a4281
 10190d0:	42981853 	.word	0x42981853
 10190d4:	bebef7fa 	.word	0xbebef7fa
 10190d8:	07991880 	.word	0x07991880
 10190dc:	1e52d007 	.word	0x1e52d007
 10190e0:	f813bf24 	.word	0xf813bf24
 10190e4:	f8001d01 	.word	0xf8001d01
 10190e8:	d8f61d01 	.word	0xd8f61d01
 10190ec:	07814770 	.word	0x07814770
 10190f0:	3a10d11c 	.word	0x3a10d11c
 10190f4:	b430d307 	.word	0xb430d307
 10190f8:	1032e933 	.word	0x1032e933
 10190fc:	e9203a10 	.word	0xe9203a10
 1019100:	d2f91032 	.word	0xd2f91032
 1019104:	3210bc30 	.word	0x3210bc30
 1019108:	bf241f12 	.word	0xbf241f12
 101910c:	1d04f853 	.word	0x1d04f853
 1019110:	1d04f840 	.word	0x1d04f840
 1019114:	bf38d8f8 	.word	0xbf38d8f8
 1019118:	1e521d12 	.word	0x1e521d12
 101911c:	f813bf24 	.word	0xf813bf24
 1019120:	f8001d01 	.word	0xf8001d01
 1019124:	d8f81d01 	.word	0xd8f81d01
 1019128:	bf004770 	.word	0xbf004770
 101912c:	d3073a08 	.word	0xd3073a08
 1019130:	1002e933 	.word	0x1002e933
 1019134:	f8403a08 	.word	0xf8403a08
 1019138:	f840cd04 	.word	0xf840cd04
 101913c:	d2f71d04 	.word	0xd2f71d04
 1019140:	e7ea3208 	.word	0xe7ea3208
 1019144:	f0026802 	.word	0xf0026802
 1019148:	21014300 	.word	0x21014300
 101914c:	0216f3c2 	.word	0x0216f3c2
 1019150:	d1022a00 	.word	0xd1022a00
 1019154:	0052e006 	.word	0x0052e006
 1019158:	ea5f1e49 	.word	0xea5f1e49
 101915c:	d5fa2c02 	.word	0xd5fa2c02
 1019160:	0216f3c2 	.word	0x0216f3c2
 1019164:	6002431a 	.word	0x6002431a
 1019168:	47704608 	.word	0x47704608
 101916c:	f0034801 	.word	0xf0034801
 1019170:	0000bd19 	.word	0x0000bd19
 1019174:	2000dd78 	.word	0x2000dd78
 1019178:	f8dfb5f0 	.word	0xf8dfb5f0
 101917c:	b0814dbc 	.word	0xb0814dbc
 1019180:	004cf894 	.word	0x004cf894
 1019184:	50a4f8d4 	.word	0x50a4f8d4
 1019188:	f44fb120 	.word	0xf44fb120
 101918c:	182e7000 	.word	0x182e7000
 1019190:	e0042780 	.word	0xe0042780
 1019194:	6000f44f 	.word	0x6000f44f
 1019198:	f44f182e 	.word	0xf44f182e
 101919c:	42ae7700 	.word	0x42ae7700
 10191a0:	4630463a 	.word	0x4630463a
 10191a4:	eb05bf08 	.word	0xeb05bf08
 10191a8:	46290587 	.word	0x46290587
 10191ac:	f88ef7fb 	.word	0xf88ef7fb
 10191b0:	3064f8b4 	.word	0x3064f8b4
 10191b4:	4629463a 	.word	0x4629463a
 10191b8:	f0034630 	.word	0xf0034630
 10191bc:	f894fe71 	.word	0xf894fe71
 10191c0:	f8d4104c 	.word	0xf8d4104c
 10191c4:	b11100a4 	.word	0xb11100a4
 10191c8:	fff9f7fa 	.word	0xfff9f7fa
 10191cc:	f7fae001 	.word	0xf7fae001
 10191d0:	4606ffe7 	.word	0x4606ffe7
 10191d4:	f7fb2010 	.word	0xf7fb2010
 10191d8:	f894f82f 	.word	0xf894f82f
 10191dc:	4605704c 	.word	0x4605704c
 10191e0:	bf140038 	.word	0xbf140038
 10191e4:	7000f44f 	.word	0x7000f44f
 10191e8:	6000f44f 	.word	0x6000f44f
 10191ec:	f1a04430 	.word	0xf1a04430
 10191f0:	22c001c0 	.word	0x22c001c0
 10191f4:	f7fa4628 	.word	0xf7fa4628
 10191f8:	22c4fe2d 	.word	0x22c4fe2d
 10191fc:	f1054631 	.word	0xf1054631
 1019200:	f7fa00c0 	.word	0xf7fa00c0
 1019204:	f994fe27 	.word	0xf994fe27
 1019208:	b11f6042 	.word	0xb11f6042
 101920c:	1eb62000 	.word	0x1eb62000
 1019210:	004cf884 	.word	0x004cf884
 1019214:	fd59f7fa 	.word	0xfd59f7fa
 1019218:	b2724601 	.word	0xb2724601
 101921c:	f7fa4628 	.word	0xf7fa4628
 1019220:	4628ffec 	.word	0x4628ffec
 1019224:	bdf0b001 	.word	0xbdf0b001
 1019228:	f8dfb570 	.word	0xf8dfb570
 101922c:	f8b00e24 	.word	0xf8b00e24
 1019230:	f8d05052 	.word	0xf8d05052
 1019234:	f8d060a0 	.word	0xf8d060a0
 1019238:	f50540a4 	.word	0xf50540a4
 101923c:	b2897100 	.word	0xb2897100
 1019240:	6f80f5b1 	.word	0x6f80f5b1
 1019244:	6280f5c5 	.word	0x6280f5c5
 1019248:	f5a1bfa8 	.word	0xf5a1bfa8
 101924c:	f5b26180 	.word	0xf5b26180
 1019250:	f8a07f00 	.word	0xf8a07f00
 1019254:	eb061052 	.word	0xeb061052
 1019258:	db030185 	.word	0xdb030185
 101925c:	6200f44f 	.word	0x6200f44f
 1019260:	e00f18a0 	.word	0xe00f18a0
 1019264:	6000f44f 	.word	0x6000f44f
 1019268:	44200092 	.word	0x44200092
 101926c:	fdf2f7fa 	.word	0xfdf2f7fa
 1019270:	7000f5a5 	.word	0x7000f5a5
 1019274:	00a80082 	.word	0x00a80082
 1019278:	44204240 	.word	0x44204240
 101927c:	53c0f44f 	.word	0x53c0f44f
 1019280:	44184631 	.word	0x44184631
 1019284:	fde6f7fa 	.word	0xfde6f7fa
 1019288:	4070e8bd 	.word	0x4070e8bd
 101928c:	b570e774 	.word	0xb570e774
 1019290:	f9cbf7fe 	.word	0xf9cbf7fe
 1019294:	4ca0f8df 	.word	0x4ca0f8df
 1019298:	f89489a0 	.word	0xf89489a0
 101929c:	0002103f 	.word	0x0002103f
 10192a0:	0008d10c 	.word	0x0008d10c
 10192a4:	004ef8b4 	.word	0x004ef8b4
 10192a8:	2300e9d4 	.word	0x2300e9d4
 10192ac:	211fbf0c 	.word	0x211fbf0c
 10192b0:	3a201e49 	.word	0x3a201e49
 10192b4:	0300f163 	.word	0x0300f163
 10192b8:	2300e9c4 	.word	0x2300e9c4
 10192bc:	000bf3c0 	.word	0x000bf3c0
 10192c0:	02c0380c 	.word	0x02c0380c
 10192c4:	b2c90c00 	.word	0xb2c90c00
 10192c8:	1141eb00 	.word	0x1141eb00
 10192cc:	f201b289 	.word	0xf201b289
 10192d0:	124a31ff 	.word	0x124a31ff
 10192d4:	5292eb01 	.word	0x5292eb01
 10192d8:	eba11292 	.word	0xeba11292
 10192dc:	f8a42182 	.word	0xf8a42182
 10192e0:	f2401052 	.word	0xf2401052
 10192e4:	e9d42101 	.word	0xe9d42101
 10192e8:	1a082300 	.word	0x1a082300
 10192ec:	eb631a12 	.word	0xeb631a12
 10192f0:	f8b473e0 	.word	0xf8b473e0
 10192f4:	e9c40052 	.word	0xe9c40052
 10192f8:	f5002300 	.word	0xf5002300
 10192fc:	b2807006 	.word	0xb2807006
 1019300:	6f80f5b0 	.word	0x6f80f5b0
 1019304:	f5a0bfa4 	.word	0xf5a0bfa4
 1019308:	b2806080 	.word	0xb2806080
 101930c:	eb001101 	.word	0xeb001101
 1019310:	114961d1 	.word	0x114961d1
 1019314:	eba0460d 	.word	0xeba0460d
 1019318:	b2811041 	.word	0xb2811041
 101931c:	b2e8b929 	.word	0xb2e8b929
 1019320:	bf0c2800 	.word	0xbf0c2800
 1019324:	1e6d251f 	.word	0x1e6d251f
 1019328:	f8842020 	.word	0xf8842020
 101932c:	f894503e 	.word	0xf894503e
 1019330:	f44f103e 	.word	0xf44f103e
 1019334:	b28076f0 	.word	0xb28076f0
 1019338:	60a0f040 	.word	0x60a0f040
 101933c:	0541eb01 	.word	0x0541eb01
 1019340:	f8df00a9 	.word	0xf8df00a9
 1019344:	442e5d10 	.word	0x442e5d10
 1019348:	4429506e 	.word	0x4429506e
 101934c:	f8df6048 	.word	0xf8df6048
 1019350:	68285d08 	.word	0x68285d08
 1019354:	0682eb00 	.word	0x0682eb00
 1019358:	fbdef7fc 	.word	0xfbdef7fc
 101935c:	0a196fab 	.word	0x0a196fab
 1019360:	0107f001 	.word	0x0107f001
 1019364:	f002011a 	.word	0xf002011a
 1019368:	43110210 	.word	0x43110210
 101936c:	f8842200 	.word	0xf8842200
 1019370:	1a311048 	.word	0x1a311048
 1019374:	6ea30ad8 	.word	0x6ea30ad8
 1019378:	6fe24798 	.word	0x6fe24798
 101937c:	210068a6 	.word	0x210068a6
 1019380:	eb100850 	.word	0xeb100850
 1019384:	eb514006 	.word	0xeb514006
 1019388:	23004116 	.word	0x23004116
 101938c:	fb5af7ff 	.word	0xfb5af7ff
 1019390:	71fff64f 	.word	0x71fff64f
 1019394:	bf284288 	.word	0xbf284288
 1019398:	f8a44608 	.word	0xf8a44608
 101939c:	20030062 	.word	0x20030062
 10193a0:	0043f884 	.word	0x0043f884
 10193a4:	f8a42011 	.word	0xf8a42011
 10193a8:	bd700064 	.word	0xbd700064
 10193ac:	f8dfb570 	.word	0xf8dfb570
 10193b0:	23204b88 	.word	0x23204b88
 10193b4:	1094f8d4 	.word	0x1094f8d4
 10193b8:	0210f104 	.word	0x0210f104
 10193bc:	0c9cf8df 	.word	0x0c9cf8df
 10193c0:	fc45f003 	.word	0xfc45f003
 10193c4:	f8dfb1a8 	.word	0xf8dfb1a8
 10193c8:	68285e3c 	.word	0x68285e3c
 10193cc:	5080f440 	.word	0x5080f440
 10193d0:	6f616028 	.word	0x6f616028
 10193d4:	47882001 	.word	0x47882001
 10193d8:	f0406828 	.word	0xf0406828
 10193dc:	60284000 	.word	0x60284000
 10193e0:	0045f894 	.word	0x0045f894
 10193e4:	d10b2803 	.word	0xd10b2803
 10193e8:	68a16920 	.word	0x68a16920
 10193ec:	d2074288 	.word	0xd2074288
 10193f0:	f894e003 	.word	0xf894e003
 10193f4:	28030045 	.word	0x28030045
 10193f8:	e8bdd15f 	.word	0xe8bdd15f
 10193fc:	e7464070 	.word	0xe7464070
 1019400:	f913f7fe 	.word	0xf913f7fe
 1019404:	f8948aa0 	.word	0xf8948aa0
 1019408:	0002103f 	.word	0x0002103f
 101940c:	0008d10c 	.word	0x0008d10c
 1019410:	0050f8b4 	.word	0x0050f8b4
 1019414:	2300e9d4 	.word	0x2300e9d4
 1019418:	211fbf0c 	.word	0x211fbf0c
 101941c:	3a201e49 	.word	0x3a201e49
 1019420:	0300f163 	.word	0x0300f163
 1019424:	2300e9c4 	.word	0x2300e9c4
 1019428:	000bf3c0 	.word	0x000bf3c0
 101942c:	02c01f00 	.word	0x02c01f00
 1019430:	b2c90c00 	.word	0xb2c90c00
 1019434:	1141eb00 	.word	0x1141eb00
 1019438:	f201b289 	.word	0xf201b289
 101943c:	124a11ff 	.word	0x124a11ff
 1019440:	5292eb01 	.word	0x5292eb01
 1019444:	eba11292 	.word	0xeba11292
 1019448:	f8a42182 	.word	0xf8a42182
 101944c:	f2401052 	.word	0xf2401052
 1019450:	1a082101 	.word	0x1a082101
 1019454:	e9d417c1 	.word	0xe9d417c1
 1019458:	1a102300 	.word	0x1a102300
 101945c:	0101eb63 	.word	0x0101eb63
 1019460:	0100e9c4 	.word	0x0100e9c4
 1019464:	fee0f7ff 	.word	0xfee0f7ff
 1019468:	f7fa4605 	.word	0xf7fa4605
 101946c:	0082fc2e 	.word	0x0082fc2e
 1019470:	00a8f8d4 	.word	0x00a8f8d4
 1019474:	f7fa4629 	.word	0xf7fa4629
 1019478:	2003fcfd 	.word	0x2003fcfd
 101947c:	f8846fe2 	.word	0xf8846fe2
 1019480:	20020046 	.word	0x20020046
 1019484:	0043f884 	.word	0x0043f884
 1019488:	f8842000 	.word	0xf8842000
 101948c:	f06f0039 	.word	0xf06f0039
 1019490:	f884000f 	.word	0xf884000f
 1019494:	69260038 	.word	0x69260038
 1019498:	21000850 	.word	0x21000850
 101949c:	4006eb10 	.word	0x4006eb10
 10194a0:	4116eb51 	.word	0x4116eb51
 10194a4:	f7ff2300 	.word	0xf7ff2300
 10194a8:	f64ffacd 	.word	0xf64ffacd
 10194ac:	428871ff 	.word	0x428871ff
 10194b0:	4608bf28 	.word	0x4608bf28
 10194b4:	0062f8a4 	.word	0x0062f8a4
 10194b8:	8aa0bd70 	.word	0x8aa0bd70
 10194bc:	0050f8a4 	.word	0x0050f8a4
 10194c0:	28107da0 	.word	0x28107da0
 10194c4:	f8dfda0c 	.word	0xf8dfda0c
 10194c8:	68285d3c 	.word	0x68285d3c
 10194cc:	5080f440 	.word	0x5080f440
 10194d0:	6f616028 	.word	0x6f616028
 10194d4:	47882001 	.word	0x47882001
 10194d8:	f0406828 	.word	0xf0406828
 10194dc:	60284000 	.word	0x60284000
 10194e0:	b5f0bd70 	.word	0xb5f0bd70
 10194e4:	f8dfb081 	.word	0xf8dfb081
 10194e8:	f7ff6b68 	.word	0xf7ff6b68
 10194ec:	4604fe9d 	.word	0x4604fe9d
 10194f0:	f7fa2017 	.word	0xf7fa2017
 10194f4:	4607fea1 	.word	0x4607fea1
 10194f8:	fbe7f7fa 	.word	0xfbe7f7fa
 10194fc:	10a8f8d6 	.word	0x10a8f8d6
 1019500:	462b4605 	.word	0x462b4605
 1019504:	4620463a 	.word	0x4620463a
 1019508:	fc7bf003 	.word	0xfc7bf003
 101950c:	4639462a 	.word	0x4639462a
 1019510:	f7fa4638 	.word	0xf7fa4638
 1019514:	f7fefedb 	.word	0xf7fefedb
 1019518:	4601f9a5 	.word	0x4601f9a5
 101951c:	4638462a 	.word	0x4638462a
 1019520:	fbd5f003 	.word	0xfbd5f003
 1019524:	31f2f243 	.word	0x31f2f243
 1019528:	db504288 	.word	0xdb504288
 101952c:	0052f8b6 	.word	0x0052f8b6
 1019530:	7006f500 	.word	0x7006f500
 1019534:	f5b0b280 	.word	0xf5b0b280
 1019538:	bfa46f80 	.word	0xbfa46f80
 101953c:	6080f5a0 	.word	0x6080f5a0
 1019540:	1101b280 	.word	0x1101b280
 1019544:	61d1eb00 	.word	0x61d1eb00
 1019548:	460a1149 	.word	0x460a1149
 101954c:	1041eba0 	.word	0x1041eba0
 1019550:	b929b281 	.word	0xb929b281
 1019554:	2800b2d0 	.word	0x2800b2d0
 1019558:	221fbf0c 	.word	0x221fbf0c
 101955c:	20201e52 	.word	0x20201e52
 1019560:	203ef886 	.word	0x203ef886
 1019564:	103ef896 	.word	0x103ef896
 1019568:	73f0f44f 	.word	0x73f0f44f
 101956c:	f040b280 	.word	0xf040b280
 1019570:	f8df60a0 	.word	0xf8df60a0
 1019574:	eb017ae4 	.word	0xeb017ae4
 1019578:	00910241 	.word	0x00910241
 101957c:	2ad4f8df 	.word	0x2ad4f8df
 1019580:	50534413 	.word	0x50534413
 1019584:	60484411 	.word	0x60484411
 1019588:	f8862003 	.word	0xf8862003
 101958c:	e9d60043 	.word	0xe9d60043
 1019590:	f5b00100 	.word	0xf5b00100
 1019594:	f1616280 	.word	0xf1616280
 1019598:	e9c60300 	.word	0xe9c60300
 101959c:	68382300 	.word	0x68382300
 10195a0:	0482eb00 	.word	0x0482eb00
 10195a4:	fab8f7fc 	.word	0xfab8f7fc
 10195a8:	b0016fbb 	.word	0xb0016fbb
 10195ac:	f0010a19 	.word	0xf0010a19
 10195b0:	1a200107 	.word	0x1a200107
 10195b4:	f002011a 	.word	0xf002011a
 10195b8:	43110210 	.word	0x43110210
 10195bc:	f8862202 	.word	0xf8862202
 10195c0:	1e411048 	.word	0x1e411048
 10195c4:	6eb30ad8 	.word	0x6eb30ad8
 10195c8:	40f0e8bd 	.word	0x40f0e8bd
 10195cc:	e9d64718 	.word	0xe9d64718
 10195d0:	f5100100 	.word	0xf5100100
 10195d4:	f1417000 	.word	0xf1417000
 10195d8:	e9c60100 	.word	0xe9c60100
 10195dc:	462a0100 	.word	0x462a0100
 10195e0:	f8d64621 	.word	0xf8d64621
 10195e4:	b00100a8 	.word	0xb00100a8
 10195e8:	40f0e8bd 	.word	0x40f0e8bd
 10195ec:	bc2ff003 	.word	0xbc2ff003
 10195f0:	f8dfb470 	.word	0xf8dfb470
 10195f4:	22000944 	.word	0x22000944
 10195f8:	00a0f8d0 	.word	0x00a0f8d0
 10195fc:	3c1cf8df 	.word	0x3c1cf8df
 1019600:	1a50f8df 	.word	0x1a50f8df
 1019604:	0442eb02 	.word	0x0442eb02
 1019608:	0484eb01 	.word	0x0484eb01
 101960c:	050cf104 	.word	0x050cf104
 1019610:	eb006025 	.word	0xeb006025
 1019614:	1c5215c2 	.word	0x1c5215c2
 1019618:	60632a1f 	.word	0x60632a1f
 101961c:	dbf160a5 	.word	0xdbf160a5
 1019620:	6278f44f 	.word	0x6278f44f
 1019624:	f8c14402 	.word	0xf8c14402
 1019628:	24003178 	.word	0x24003178
 101962c:	217cf8c1 	.word	0x217cf8c1
 1019630:	720cf44f 	.word	0x720cf44f
 1019634:	1174f8c1 	.word	0x1174f8c1
 1019638:	3d8cf8df 	.word	0x3d8cf8df
 101963c:	0544eb04 	.word	0x0544eb04
 1019640:	76c6f44f 	.word	0x76c6f44f
 1019644:	0585eb01 	.word	0x0585eb01
 1019648:	f8c5442e 	.word	0xf8c5442e
 101964c:	fb026180 	.word	0xfb026180
 1019650:	f8c5f604 	.word	0xf8c5f604
 1019654:	1c643184 	.word	0x1c643184
 1019658:	f8c54406 	.word	0xf8c54406
 101965c:	eb046188 	.word	0xeb046188
 1019660:	eb010544 	.word	0xeb010544
 1019664:	f44f0585 	.word	0xf44f0585
 1019668:	442e76c6 	.word	0x442e76c6
 101966c:	6180f8c5 	.word	0x6180f8c5
 1019670:	f604fb02 	.word	0xf604fb02
 1019674:	3184f8c5 	.word	0x3184f8c5
 1019678:	44061c64 	.word	0x44061c64
 101967c:	6188f8c5 	.word	0x6188f8c5
 1019680:	0544eb04 	.word	0x0544eb04
 1019684:	0585eb01 	.word	0x0585eb01
 1019688:	76c6f44f 	.word	0x76c6f44f
 101968c:	f8c5442e 	.word	0xf8c5442e
 1019690:	fb026180 	.word	0xfb026180
 1019694:	1c64f604 	.word	0x1c64f604
 1019698:	f8c52c0f 	.word	0xf8c52c0f
 101969c:	44063184 	.word	0x44063184
 10196a0:	6188f8c5 	.word	0x6188f8c5
 10196a4:	f44fdbca 	.word	0xf44fdbca
 10196a8:	440a72c0 	.word	0x440a72c0
 10196ac:	2234f8c1 	.word	0x2234f8c1
 10196b0:	02d0f242 	.word	0x02d0f242
 10196b4:	f8c14410 	.word	0xf8c14410
 10196b8:	f8c13238 	.word	0xf8c13238
 10196bc:	bc70023c 	.word	0xbc70023c
 10196c0:	f8df4770 	.word	0xf8df4770
 10196c4:	b5f0098c 	.word	0xb5f0098c
 10196c8:	6052f8b0 	.word	0x6052f8b0
 10196cc:	50a4f8d0 	.word	0x50a4f8d0
 10196d0:	40a0f8d0 	.word	0x40a0f8d0
 10196d4:	f106b081 	.word	0xf106b081
 10196d8:	b2bf0730 	.word	0xb2bf0730
 10196dc:	6f80f5b7 	.word	0x6f80f5b7
 10196e0:	f5a7bfa4 	.word	0xf5a7bfa4
 10196e4:	b2bf6780 	.word	0xb2bf6780
 10196e8:	6080f5c7 	.word	0x6080f5c7
 10196ec:	7ff4f5b0 	.word	0x7ff4f5b0
 10196f0:	0187eb04 	.word	0x0187eb04
 10196f4:	f44fdb05 	.word	0xf44fdb05
 10196f8:	f44f6000 	.word	0xf44f6000
 10196fc:	442862f4 	.word	0x442862f4
 1019700:	0082e00f 	.word	0x0082e00f
 1019704:	6000f44f 	.word	0x6000f44f
 1019708:	f7fa4428 	.word	0xf7fa4428
 101970c:	f5a7fba3 	.word	0xf5a7fba3
 1019710:	00827006 	.word	0x00827006
 1019714:	f44f4278 	.word	0xf44f4278
 1019718:	eb0553c0 	.word	0xeb0553c0
 101971c:	46210080 	.word	0x46210080
 1019720:	f7fa4418 	.word	0xf7fa4418
 1019724:	f106fb97 	.word	0xf106fb97
 1019728:	12410018 	.word	0x12410018
 101972c:	5191eb00 	.word	0x5191eb00
 1019730:	eba01289 	.word	0xeba01289
 1019734:	b2b62681 	.word	0xb2b62681
 1019738:	6080f5c6 	.word	0x6080f5c6
 101973c:	eb042818 	.word	0xeb042818
 1019740:	db040186 	.word	0xdb040186
 1019744:	607af44f 	.word	0x607af44f
 1019748:	44282260 	.word	0x44282260
 101974c:	0082e00f 	.word	0x0082e00f
 1019750:	607af44f 	.word	0x607af44f
 1019754:	f7fa4428 	.word	0xf7fa4428
 1019758:	f5a6fb7d 	.word	0xf5a6fb7d
 101975c:	0082707a 	.word	0x0082707a
 1019760:	f44f4270 	.word	0xf44f4270
 1019764:	eb0553fd 	.word	0xeb0553fd
 1019768:	46210080 	.word	0x46210080
 101976c:	f7fa4418 	.word	0xf7fa4418
 1019770:	b001fb71 	.word	0xb001fb71
 1019774:	40f0e8bd 	.word	0x40f0e8bd
 1019778:	b510e4fe 	.word	0xb510e4fe
 101977c:	47b8f8df 	.word	0x47b8f8df
 1019780:	f8b42220 	.word	0xf8b42220
 1019784:	f8940054 	.word	0xf8940054
 1019788:	f100303f 	.word	0xf100303f
 101978c:	f8d42120 	.word	0xf8d42120
 1019790:	eb0000a0 	.word	0xeb0000a0
 1019794:	f00310c3 	.word	0xf00310c3
 1019798:	200ffab5 	.word	0x200ffab5
 101979c:	fe88f7fa 	.word	0xfe88f7fa
 10197a0:	0cbcf8df 	.word	0x0cbcf8df
 10197a4:	2dacf8df 	.word	0x2dacf8df
 10197a8:	f0216841 	.word	0xf0216841
 10197ac:	60417100 	.word	0x60417100
 10197b0:	f0416841 	.word	0xf0416841
 10197b4:	60417100 	.word	0x60417100
 10197b8:	f8842101 	.word	0xf8842101
 10197bc:	f8b41044 	.word	0xf8b41044
 10197c0:	f5b11054 	.word	0xf5b11054
 10197c4:	bf0c7f80 	.word	0xbf0c7f80
 10197c8:	31102100 	.word	0x31102100
 10197cc:	1054f8a4 	.word	0x1054f8a4
 10197d0:	f36f6801 	.word	0xf36f6801
 10197d4:	4311411b 	.word	0x4311411b
 10197d8:	bd106001 	.word	0xbd106001
 10197dc:	f8dfb570 	.word	0xf8dfb570
 10197e0:	68204d54 	.word	0x68204d54
 10197e4:	f0100b80 	.word	0xf0100b80
 10197e8:	d0070601 	.word	0xd0070601
 10197ec:	4080f44f 	.word	0x4080f44f
 10197f0:	0080f8c4 	.word	0x0080f8c4
 10197f4:	8f4ff3bf 	.word	0x8f4ff3bf
 10197f8:	8f6ff3bf 	.word	0x8f6ff3bf
 10197fc:	5738f8df 	.word	0x5738f8df
 1019800:	0047f895 	.word	0x0047f895
 1019804:	f000b130 	.word	0xf000b130
 1019808:	f7fdfbf6 	.word	0xf7fdfbf6
 101980c:	2000ff0e 	.word	0x2000ff0e
 1019810:	0047f885 	.word	0x0047f885
 1019814:	f44fb116 	.word	0xf44fb116
 1019818:	60204080 	.word	0x60204080
 101981c:	0043f895 	.word	0x0043f895
 1019820:	f0002800 	.word	0xf0002800
 1019824:	f89581c8 	.word	0xf89581c8
 1019828:	28010044 	.word	0x28010044
 101982c:	f0c0d006 	.word	0xf0c0d006
 1019830:	280381c2 	.word	0x280381c2
 1019834:	80bcf000 	.word	0x80bcf000
 1019838:	e1bcd354 	.word	0xe1bcd354
 101983c:	0045f895 	.word	0x0045f895
 1019840:	f8d5b9d8 	.word	0xf8d5b9d8
 1019844:	23201090 	.word	0x23201090
 1019848:	0218f105 	.word	0x0218f105
 101984c:	0d1cf8df 	.word	0x0d1cf8df
 1019850:	f9fdf003 	.word	0xf9fdf003
 1019854:	7fa8b910 	.word	0x7fa8b910
 1019858:	da0e2810 	.word	0xda0e2810
 101985c:	69a4f8df 	.word	0x69a4f8df
 1019860:	f4406830 	.word	0xf4406830
 1019864:	60305080 	.word	0x60305080
 1019868:	20016f69 	.word	0x20016f69
 101986c:	20014788 	.word	0x20014788
 1019870:	0045f885 	.word	0x0045f885
 1019874:	f8852000 	.word	0xf8852000
 1019878:	f895003a 	.word	0xf895003a
 101987c:	b9e00046 	.word	0xb9e00046
 1019880:	109cf8d5 	.word	0x109cf8d5
 1019884:	f1052320 	.word	0xf1052320
 1019888:	f8df0220 	.word	0xf8df0220
 101988c:	f00307d0 	.word	0xf00307d0
 1019890:	b918f9de 	.word	0xb918f9de
 1019894:	0026f895 	.word	0x0026f895
 1019898:	da0e2810 	.word	0xda0e2810
 101989c:	6964f8df 	.word	0x6964f8df
 10198a0:	f4406830 	.word	0xf4406830
 10198a4:	60305080 	.word	0x60305080
 10198a8:	20016f69 	.word	0x20016f69
 10198ac:	20014788 	.word	0x20014788
 10198b0:	0046f885 	.word	0x0046f885
 10198b4:	f8852000 	.word	0xf8852000
 10198b8:	f8df003b 	.word	0xf8df003b
 10198bc:	f8df0ba4 	.word	0xf8df0ba4
 10198c0:	68412cb0 	.word	0x68412cb0
 10198c4:	7100f021 	.word	0x7100f021
 10198c8:	68416041 	.word	0x68416041
 10198cc:	7100f041 	.word	0x7100f041
 10198d0:	21026041 	.word	0x21026041
 10198d4:	1044f885 	.word	0x1044f885
 10198d8:	f36f6801 	.word	0xf36f6801
 10198dc:	4311411b 	.word	0x4311411b
 10198e0:	e1686001 	.word	0xe1686001
 10198e4:	0045f895 	.word	0x0045f895
 10198e8:	da202802 	.word	0xda202802
 10198ec:	108cf8d5 	.word	0x108cf8d5
 10198f0:	f1052320 	.word	0xf1052320
 10198f4:	f8df0228 	.word	0xf8df0228
 10198f8:	f0030c74 	.word	0xf0030c74
 10198fc:	b918f9a8 	.word	0xb918f9a8
 1019900:	002ef895 	.word	0x002ef895
 1019904:	da122810 	.word	0xda122810
 1019908:	68f8f8df 	.word	0x68f8f8df
 101990c:	f4406830 	.word	0xf4406830
 1019910:	60305080 	.word	0x60305080
 1019914:	20016f69 	.word	0x20016f69
 1019918:	68304788 	.word	0x68304788
 101991c:	4000f040 	.word	0x4000f040
 1019920:	20026030 	.word	0x20026030
 1019924:	0045f885 	.word	0x0045f885
 1019928:	f8852000 	.word	0xf8852000
 101992c:	f895003c 	.word	0xf895003c
 1019930:	28020046 	.word	0x28020046
 1019934:	f8d5da20 	.word	0xf8d5da20
 1019938:	23201098 	.word	0x23201098
 101993c:	0230f105 	.word	0x0230f105
 1019940:	0718f8df 	.word	0x0718f8df
 1019944:	f983f003 	.word	0xf983f003
 1019948:	f895b918 	.word	0xf895b918
 101994c:	28100036 	.word	0x28100036
 1019950:	f8dfda12 	.word	0xf8dfda12
 1019954:	683068b0 	.word	0x683068b0
 1019958:	5080f440 	.word	0x5080f440
 101995c:	6f696030 	.word	0x6f696030
 1019960:	47882001 	.word	0x47882001
 1019964:	f0406830 	.word	0xf0406830
 1019968:	60304000 	.word	0x60304000
 101996c:	f8852002 	.word	0xf8852002
 1019970:	20000046 	.word	0x20000046
 1019974:	003df885 	.word	0x003df885
 1019978:	0ae4f8df 	.word	0x0ae4f8df
 101997c:	f0216841 	.word	0xf0216841
 1019980:	60417100 	.word	0x60417100
 1019984:	f0416841 	.word	0xf0416841
 1019988:	60417100 	.word	0x60417100
 101998c:	f8852103 	.word	0xf8852103
 1019990:	68011044 	.word	0x68011044
 1019994:	411bf36f 	.word	0x411bf36f
 1019998:	017ff441 	.word	0x017ff441
 101999c:	68c16001 	.word	0x68c16001
 10199a0:	0209f3c1 	.word	0x0209f3c1
 10199a4:	bf0c2a22 	.word	0xbf0c2a22
 10199a8:	1c893920 	.word	0x1c893920
 10199ac:	e10260c1 	.word	0xe10260c1
 10199b0:	1088f8d5 	.word	0x1088f8d5
 10199b4:	f1052320 	.word	0xf1052320
 10199b8:	f8df0208 	.word	0xf8df0208
 10199bc:	f0030bb0 	.word	0xf0030bb0
 10199c0:	b180f946 	.word	0xb180f946
 10199c4:	683cf8df 	.word	0x683cf8df
 10199c8:	f4406830 	.word	0xf4406830
 10199cc:	60305080 	.word	0x60305080
 10199d0:	20016f69 	.word	0x20016f69
 10199d4:	68304788 	.word	0x68304788
 10199d8:	4000f040 	.word	0x4000f040
 10199dc:	20036030 	.word	0x20036030
 10199e0:	0045f885 	.word	0x0045f885
 10199e4:	89a8e012 	.word	0x89a8e012
 10199e8:	004ef8a5 	.word	0x004ef8a5
 10199ec:	28107ba8 	.word	0x28107ba8
 10199f0:	f8dfda0c 	.word	0xf8dfda0c
 10199f4:	68306810 	.word	0x68306810
 10199f8:	5080f440 	.word	0x5080f440
 10199fc:	6f696030 	.word	0x6f696030
 1019a00:	47882001 	.word	0x47882001
 1019a04:	f0406830 	.word	0xf0406830
 1019a08:	60304000 	.word	0x60304000
 1019a0c:	fccef7ff 	.word	0xfccef7ff
 1019a10:	f7fa200f 	.word	0xf7fa200f
 1019a14:	f895fd6f 	.word	0xf895fd6f
 1019a18:	28010043 	.word	0x28010043
 1019a1c:	e9d5d106 	.word	0xe9d5d106
 1019a20:	30200100 	.word	0x30200100
 1019a24:	0100f141 	.word	0x0100f141
 1019a28:	0100e9c5 	.word	0x0100e9c5
 1019a2c:	0045f895 	.word	0x0045f895
 1019a30:	bf012801 	.word	0xbf012801
 1019a34:	003af895 	.word	0x003af895
 1019a38:	f8851c41 	.word	0xf8851c41
 1019a3c:	2809103a 	.word	0x2809103a
 1019a40:	7ba8d115 	.word	0x7ba8d115
 1019a44:	d1122810 	.word	0xd1122810
 1019a48:	0046f895 	.word	0x0046f895
 1019a4c:	f8dfb940 	.word	0xf8dfb940
 1019a50:	683067b4 	.word	0x683067b4
 1019a54:	5080f420 	.word	0x5080f420
 1019a58:	6f696030 	.word	0x6f696030
 1019a5c:	47882000 	.word	0x47882000
 1019a60:	f8852000 	.word	0xf8852000
 1019a64:	20100045 	.word	0x20100045
 1019a68:	200077a8 	.word	0x200077a8
 1019a6c:	f89561a8 	.word	0xf89561a8
 1019a70:	28010046 	.word	0x28010046
 1019a74:	f895bf01 	.word	0xf895bf01
 1019a78:	1c41003b 	.word	0x1c41003b
 1019a7c:	103bf885 	.word	0x103bf885
 1019a80:	d1162809 	.word	0xd1162809
 1019a84:	28107da8 	.word	0x28107da8
 1019a88:	f895d113 	.word	0xf895d113
 1019a8c:	b9400045 	.word	0xb9400045
 1019a90:	6770f8df 	.word	0x6770f8df
 1019a94:	f4206830 	.word	0xf4206830
 1019a98:	60305080 	.word	0x60305080
 1019a9c:	20006f69 	.word	0x20006f69
 1019aa0:	20004788 	.word	0x20004788
 1019aa4:	0046f885 	.word	0x0046f885
 1019aa8:	f8852010 	.word	0xf8852010
 1019aac:	20000026 	.word	0x20000026
 1019ab0:	f8956228 	.word	0xf8956228
 1019ab4:	28020045 	.word	0x28020045
 1019ab8:	f895bf01 	.word	0xf895bf01
 1019abc:	1c41003c 	.word	0x1c41003c
 1019ac0:	103cf885 	.word	0x103cf885
 1019ac4:	d1242805 	.word	0xd1242805
 1019ac8:	28107ba8 	.word	0x28107ba8
 1019acc:	f895d121 	.word	0xf895d121
 1019ad0:	b9400046 	.word	0xb9400046
 1019ad4:	672cf8df 	.word	0x672cf8df
 1019ad8:	f4206830 	.word	0xf4206830
 1019adc:	60305080 	.word	0x60305080
 1019ae0:	20006f69 	.word	0x20006f69
 1019ae4:	f8954788 	.word	0xf8954788
 1019ae8:	28020046 	.word	0x28020046
 1019aec:	f8dfda05 	.word	0xf8dfda05
 1019af0:	68306714 	.word	0x68306714
 1019af4:	4000f020 	.word	0x4000f020
 1019af8:	20006030 	.word	0x20006030
 1019afc:	0045f885 	.word	0x0045f885
 1019b00:	77a82010 	.word	0x77a82010
 1019b04:	61a82000 	.word	0x61a82000
 1019b08:	f8852010 	.word	0xf8852010
 1019b0c:	2000002e 	.word	0x2000002e
 1019b10:	f89562a8 	.word	0xf89562a8
 1019b14:	28020046 	.word	0x28020046
 1019b18:	f895bf01 	.word	0xf895bf01
 1019b1c:	1c41003d 	.word	0x1c41003d
 1019b20:	103df885 	.word	0x103df885
 1019b24:	d1252805 	.word	0xd1252805
 1019b28:	28107da8 	.word	0x28107da8
 1019b2c:	f895d122 	.word	0xf895d122
 1019b30:	b9400045 	.word	0xb9400045
 1019b34:	66ccf8df 	.word	0x66ccf8df
 1019b38:	f4206830 	.word	0xf4206830
 1019b3c:	60305080 	.word	0x60305080
 1019b40:	20006f69 	.word	0x20006f69
 1019b44:	f8954788 	.word	0xf8954788
 1019b48:	28020045 	.word	0x28020045
 1019b4c:	f8dfda05 	.word	0xf8dfda05
 1019b50:	683066b4 	.word	0x683066b4
 1019b54:	4000f020 	.word	0x4000f020
 1019b58:	20006030 	.word	0x20006030
 1019b5c:	0046f885 	.word	0x0046f885
 1019b60:	f8852010 	.word	0xf8852010
 1019b64:	20000026 	.word	0x20000026
 1019b68:	20106228 	.word	0x20106228
 1019b6c:	0036f885 	.word	0x0036f885
 1019b70:	63282000 	.word	0x63282000
 1019b74:	103ff895 	.word	0x103ff895
 1019b78:	0041f895 	.word	0x0041f895
 1019b7c:	f8851e40 	.word	0xf8851e40
 1019b80:	b2c00041 	.word	0xb2c00041
 1019b84:	bf0c291f 	.word	0xbf0c291f
 1019b88:	1c492100 	.word	0x1c492100
 1019b8c:	103ff885 	.word	0x103ff885
 1019b90:	f895b130 	.word	0xf895b130
 1019b94:	28010043 	.word	0x28010043
 1019b98:	f7ffd102 	.word	0xf7ffd102
 1019b9c:	e00afdee 	.word	0xe00afdee
 1019ba0:	f8852000 	.word	0xf8852000
 1019ba4:	f8950044 	.word	0xf8950044
 1019ba8:	b1200049 	.word	0xb1200049
 1019bac:	fbbcf7fd 	.word	0xfbbcf7fd
 1019bb0:	f8852000 	.word	0xf8852000
 1019bb4:	68200049 	.word	0x68200049
 1019bb8:	f0100b80 	.word	0xf0100b80
 1019bbc:	d0070601 	.word	0xd0070601
 1019bc0:	4080f44f 	.word	0x4080f44f
 1019bc4:	0080f8c4 	.word	0x0080f8c4
 1019bc8:	8f4ff3bf 	.word	0x8f4ff3bf
 1019bcc:	8f6ff3bf 	.word	0x8f6ff3bf
 1019bd0:	0047f895 	.word	0x0047f895
 1019bd4:	f000b130 	.word	0xf000b130
 1019bd8:	f7fdfa0e 	.word	0xf7fdfa0e
 1019bdc:	2000fd26 	.word	0x2000fd26
 1019be0:	0047f885 	.word	0x0047f885
 1019be4:	f44fb116 	.word	0xf44fb116
 1019be8:	60204080 	.word	0x60204080
 1019bec:	0000bd70 	.word	0x0000bd70
 1019bf0:	4ff0e92d 	.word	0x4ff0e92d
 1019bf4:	f8dfb081 	.word	0xf8dfb081
 1019bf8:	f8d8893c 	.word	0xf8d8893c
 1019bfc:	0b800000 	.word	0x0b800000
 1019c00:	0401f010 	.word	0x0401f010
 1019c04:	f44fd007 	.word	0xf44fd007
 1019c08:	f8c84080 	.word	0xf8c84080
 1019c0c:	f3bf0080 	.word	0xf3bf0080
 1019c10:	f3bf8f4f 	.word	0xf3bf8f4f
 1019c14:	4ec88f6f 	.word	0x4ec88f6f
 1019c18:	0047f896 	.word	0x0047f896
 1019c1c:	f000b130 	.word	0xf000b130
 1019c20:	f7fdf9ea 	.word	0xf7fdf9ea
 1019c24:	2000fd02 	.word	0x2000fd02
 1019c28:	0047f886 	.word	0x0047f886
 1019c2c:	f44fb11c 	.word	0xf44fb11c
 1019c30:	f8c84080 	.word	0xf8c84080
 1019c34:	f8960000 	.word	0xf8960000
 1019c38:	00010043 	.word	0x00010043
 1019c3c:	815cf000 	.word	0x815cf000
 1019c40:	1930f8df 	.word	0x1930f8df
 1019c44:	11c8f8d1 	.word	0x11c8f8d1
 1019c48:	f896088f 	.word	0xf896088f
 1019c4c:	00bf104a 	.word	0x00bf104a
 1019c50:	f04fb199 	.word	0xf04fb199
 1019c54:	22112120 	.word	0x22112120
 1019c58:	600b2300 	.word	0x600b2300
 1019c5c:	3110608b 	.word	0x3110608b
 1019c60:	d1fa1e52 	.word	0xd1fa1e52
 1019c64:	1910f8df 	.word	0x1910f8df
 1019c68:	304af886 	.word	0x304af886
 1019c6c:	210567b1 	.word	0x210567b1
 1019c70:	1042f886 	.word	0x1042f886
 1019c74:	f8a62111 	.word	0xf8a62111
 1019c78:	28011064 	.word	0x28011064
 1019c7c:	2802bf18 	.word	0x2802bf18
 1019c80:	6fb1d113 	.word	0x6fb1d113
 1019c84:	d307428f 	.word	0xd307428f
 1019c88:	f8df1a79 	.word	0xf8df1a79
 1019c8c:	fba138f0 	.word	0xfba138f0
 1019c90:	05553203 	.word	0x05553203
 1019c94:	e0080e2d 	.word	0xe0080e2d
 1019c98:	f8df1bc9 	.word	0xf8df1bc9
 1019c9c:	fba138e0 	.word	0xfba138e0
 1019ca0:	08d13203 	.word	0x08d13203
 1019ca4:	0520f1c1 	.word	0x0520f1c1
 1019ca8:	1e40b2ed 	.word	0x1e40b2ed
 1019cac:	f2002804 	.word	0xf2002804
 1019cb0:	e8df8122 	.word	0xe8df8122
 1019cb4:	0005f010 	.word	0x0005f010
 1019cb8:	006b0016 	.word	0x006b0016
 1019cbc:	008a008a 	.word	0x008a008a
 1019cc0:	0041f896 	.word	0x0041f896
 1019cc4:	f8861828 	.word	0xf8861828
 1019cc8:	b2c00041 	.word	0xb2c00041
 1019ccc:	f0002800 	.word	0xf0002800
 1019cd0:	f8968112 	.word	0xf8968112
 1019cd4:	28000044 	.word	0x28000044
 1019cd8:	810df040 	.word	0x810df040
 1019cdc:	fd4df7ff 	.word	0xfd4df7ff
 1019ce0:	2400e109 	.word	0x2400e109
 1019ce4:	bf00e00d 	.word	0xbf00e00d
 1019ce8:	1043f896 	.word	0x1043f896
 1019cec:	f0402902 	.word	0xf0402902
 1019cf0:	1c408102 	.word	0x1c408102
 1019cf4:	2810b240 	.word	0x2810b240
 1019cf8:	2000bf08 	.word	0x2000bf08
 1019cfc:	0038f886 	.word	0x0038f886
 1019d00:	b2e41c64 	.word	0xb2e41c64
 1019d04:	f28042ac 	.word	0xf28042ac
 1019d08:	f99680f6 	.word	0xf99680f6
 1019d0c:	b9080038 	.word	0xb9080038
 1019d10:	fbe7f7ff 	.word	0xfbe7f7ff
 1019d14:	0038f996 	.word	0x0038f996
 1019d18:	d1e52801 	.word	0xd1e52801
 1019d1c:	1039f896 	.word	0x1039f896
 1019d20:	f8861c49 	.word	0xf8861c49
 1019d24:	b2c91039 	.word	0xb2c91039
 1019d28:	d1dd2903 	.word	0xd1dd2903
 1019d2c:	f7fa200f 	.word	0xf7fa200f
 1019d30:	b150fc02 	.word	0xb150fc02
 1019d34:	9848f8df 	.word	0x9848f8df
 1019d38:	0000f8d9 	.word	0x0000f8d9
 1019d3c:	6080f040 	.word	0x6080f040
 1019d40:	0000f8c9 	.word	0x0000f8c9
 1019d44:	f7fa200f 	.word	0xf7fa200f
 1019d48:	2000fbd5 	.word	0x2000fbd5
 1019d4c:	4580f04f 	.word	0x4580f04f
 1019d50:	0043f886 	.word	0x0043f886
 1019d54:	181cf8df 	.word	0x181cf8df
 1019d58:	0044f886 	.word	0x0044f886
 1019d5c:	00b8f8c5 	.word	0x00b8f8c5
 1019d60:	f0406828 	.word	0xf0406828
 1019d64:	60280004 	.word	0x60280004
 1019d68:	60082040 	.word	0x60082040
 1019d6c:	f4206b68 	.word	0xf4206b68
 1019d70:	63685080 	.word	0x63685080
 1019d74:	20006f71 	.word	0x20006f71
 1019d78:	6b684788 	.word	0x6b684788
 1019d7c:	4000f020 	.word	0x4000f020
 1019d80:	f0006368 	.word	0xf0006368
 1019d84:	6f30f96d 	.word	0x6f30f96d
 1019d88:	e0b44780 	.word	0xe0b44780
 1019d8c:	f44f4cb1 	.word	0xf44f4cb1
 1019d90:	442070c0 	.word	0x442070c0
 1019d94:	28c01a38 	.word	0x28c01a38
 1019d98:	80adf080 	.word	0x80adf080
 1019d9c:	27dcf8df 	.word	0x27dcf8df
 1019da0:	2102fba0 	.word	0x2102fba0
 1019da4:	0e000548 	.word	0x0e000548
 1019da8:	f0002808 	.word	0xf0002808
 1019dac:	f7ff80a4 	.word	0xf7ff80a4
 1019db0:	6ef1fc88 	.word	0x6ef1fc88
 1019db4:	20084788 	.word	0x20084788
 1019db8:	0040f886 	.word	0x0040f886
 1019dbc:	70f6f44f 	.word	0x70f6f44f
 1019dc0:	67b04420 	.word	0x67b04420
 1019dc4:	f8862004 	.word	0xf8862004
 1019dc8:	6fb00043 	.word	0x6fb00043
 1019dcc:	d3064287 	.word	0xd3064287
 1019dd0:	f8df1a38 	.word	0xf8df1a38
 1019dd4:	fba027a8 	.word	0xfba027a8
 1019dd8:	08c82102 	.word	0x08c82102
 1019ddc:	1bc0e007 	.word	0x1bc0e007
 1019de0:	2798f8df 	.word	0x2798f8df
 1019de4:	2102fba0 	.word	0x2102fba0
 1019de8:	f1c008c8 	.word	0xf1c008c8
 1019dec:	f8960010 	.word	0xf8960010
 1019df0:	180d104b 	.word	0x180d104b
 1019df4:	08acb2ed 	.word	0x08acb2ed
 1019df8:	eba52c01 	.word	0xeba52c01
 1019dfc:	f8860084 	.word	0xf8860084
 1019e00:	db78004b 	.word	0xdb78004b
 1019e04:	4580f04f 	.word	0x4580f04f
 1019e08:	9774f8df 	.word	0x9774f8df
 1019e0c:	1040f896 	.word	0x1040f896
 1019e10:	720cf44f 	.word	0x720cf44f
 1019e14:	00a0f8d6 	.word	0x00a0f8d6
 1019e18:	b0a4f8d6 	.word	0xb0a4f8d6
 1019e1c:	f101fb12 	.word	0xf101fb12
 1019e20:	0a01eb00 	.word	0x0a01eb00
 1019e24:	004cf896 	.word	0x004cf896
 1019e28:	f44fb190 	.word	0xf44fb190
 1019e2c:	eb0a7090 	.word	0xeb0a7090
 1019e30:	f44f0100 	.word	0xf44f0100
 1019e34:	23047000 	.word	0x23047000
 1019e38:	72f4f44f 	.word	0x72f4f44f
 1019e3c:	f0034458 	.word	0xf0034458
 1019e40:	2304f8b7 	.word	0x2304f8b7
 1019e44:	f10a2218 	.word	0xf10a2218
 1019e48:	f00301c0 	.word	0xf00301c0
 1019e4c:	e012f8b1 	.word	0xe012f8b1
 1019e50:	7090f44f 	.word	0x7090f44f
 1019e54:	0100eb0a 	.word	0x0100eb0a
 1019e58:	6000f44f 	.word	0x6000f44f
 1019e5c:	62f4f44f 	.word	0x62f4f44f
 1019e60:	f7fa4458 	.word	0xf7fa4458
 1019e64:	f44ff807 	.word	0xf44ff807
 1019e68:	2260607a 	.word	0x2260607a
 1019e6c:	01c0f10a 	.word	0x01c0f10a
 1019e70:	f7f94458 	.word	0xf7f94458
 1019e74:	f896ffff 	.word	0xf896ffff
 1019e78:	1d000040 	.word	0x1d000040
 1019e7c:	2810b2c0 	.word	0x2810b2c0
 1019e80:	2000bf08 	.word	0x2000bf08
 1019e84:	0040f886 	.word	0x0040f886
 1019e88:	0043f896 	.word	0x0043f896
 1019e8c:	d1282805 	.word	0xd1282805
 1019e90:	f7fa200f 	.word	0xf7fa200f
 1019e94:	b140fb50 	.word	0xb140fb50
 1019e98:	0000f8d9 	.word	0x0000f8d9
 1019e9c:	6080f040 	.word	0x6080f040
 1019ea0:	0000f8c9 	.word	0x0000f8c9
 1019ea4:	f7fa200f 	.word	0xf7fa200f
 1019ea8:	2000fb25 	.word	0x2000fb25
 1019eac:	16c4f8df 	.word	0x16c4f8df
 1019eb0:	0043f886 	.word	0x0043f886
 1019eb4:	0044f886 	.word	0x0044f886
 1019eb8:	00b8f8c5 	.word	0x00b8f8c5
 1019ebc:	f0406828 	.word	0xf0406828
 1019ec0:	60280004 	.word	0x60280004
 1019ec4:	60082040 	.word	0x60082040
 1019ec8:	f4206b68 	.word	0xf4206b68
 1019ecc:	63685080 	.word	0x63685080
 1019ed0:	20006f71 	.word	0x20006f71
 1019ed4:	6b684788 	.word	0x6b684788
 1019ed8:	4000f020 	.word	0x4000f020
 1019edc:	f0006368 	.word	0xf0006368
 1019ee0:	f7fff8bf 	.word	0xf7fff8bf
 1019ee4:	6ef1f949 	.word	0x6ef1f949
 1019ee8:	f8964788 	.word	0xf8964788
 1019eec:	28010043 	.word	0x28010043
 1019ef0:	1e64d001 	.word	0x1e64d001
 1019ef4:	67b7d18a 	.word	0x67b7d18a
 1019ef8:	0000f8d8 	.word	0x0000f8d8
 1019efc:	f0100b80 	.word	0xf0100b80
 1019f00:	d0070401 	.word	0xd0070401
 1019f04:	4080f44f 	.word	0x4080f44f
 1019f08:	0080f8c8 	.word	0x0080f8c8
 1019f0c:	8f4ff3bf 	.word	0x8f4ff3bf
 1019f10:	8f6ff3bf 	.word	0x8f6ff3bf
 1019f14:	0047f896 	.word	0x0047f896
 1019f18:	f000b130 	.word	0xf000b130
 1019f1c:	f7fdf86c 	.word	0xf7fdf86c
 1019f20:	2000fb84 	.word	0x2000fb84
 1019f24:	0047f886 	.word	0x0047f886
 1019f28:	f44fb11c 	.word	0xf44fb11c
 1019f2c:	f8c84080 	.word	0xf8c84080
 1019f30:	b0010000 	.word	0xb0010000
 1019f34:	8ff0e8bd 	.word	0x8ff0e8bd
 1019f38:	20013040 	.word	0x20013040
 1019f3c:	4a44b430 	.word	0x4a44b430
 1019f40:	0056f8b2 	.word	0x0056f8b2
 1019f44:	f8d26fd3 	.word	0xf8d26fd3
 1019f48:	f8d24080 	.word	0xf8d24080
 1019f4c:	fba05084 	.word	0xfba05084
 1019f50:	f5100103 	.word	0xf5100103
 1019f54:	f1414000 	.word	0xf1414000
 1019f58:	0c000100 	.word	0x0c000100
 1019f5c:	4001ea40 	.word	0x4001ea40
 1019f60:	0088f8c2 	.word	0x0088f8c2
 1019f64:	005af8b2 	.word	0x005af8b2
 1019f68:	0104fba0 	.word	0x0104fba0
 1019f6c:	4000f510 	.word	0x4000f510
 1019f70:	0100f141 	.word	0x0100f141
 1019f74:	ea400c00 	.word	0xea400c00
 1019f78:	f8c24001 	.word	0xf8c24001
 1019f7c:	f8b2008c 	.word	0xf8b2008c
 1019f80:	fba00058 	.word	0xfba00058
 1019f84:	f5100105 	.word	0xf5100105
 1019f88:	f1414000 	.word	0xf1414000
 1019f8c:	0c000100 	.word	0x0c000100
 1019f90:	4001ea40 	.word	0x4001ea40
 1019f94:	0090f8c2 	.word	0x0090f8c2
 1019f98:	005cf8b2 	.word	0x005cf8b2
 1019f9c:	0103fba0 	.word	0x0103fba0
 1019fa0:	4000f510 	.word	0x4000f510
 1019fa4:	0100f141 	.word	0x0100f141
 1019fa8:	ea400c00 	.word	0xea400c00
 1019fac:	f8c24001 	.word	0xf8c24001
 1019fb0:	f8b20094 	.word	0xf8b20094
 1019fb4:	fba00060 	.word	0xfba00060
 1019fb8:	f5100104 	.word	0xf5100104
 1019fbc:	f1414000 	.word	0xf1414000
 1019fc0:	0c000100 	.word	0x0c000100
 1019fc4:	4001ea40 	.word	0x4001ea40
 1019fc8:	0098f8c2 	.word	0x0098f8c2
 1019fcc:	005ef8b2 	.word	0x005ef8b2
 1019fd0:	0105fba0 	.word	0x0105fba0
 1019fd4:	4000f510 	.word	0x4000f510
 1019fd8:	0100f141 	.word	0x0100f141
 1019fdc:	ea400c00 	.word	0xea400c00
 1019fe0:	f8c24001 	.word	0xf8c24001
 1019fe4:	bc30009c 	.word	0xbc30009c
 1019fe8:	20054770 	.word	0x20054770
 1019fec:	1474f8df 	.word	0x1474f8df
 1019ff0:	0043f881 	.word	0x0043f881
 1019ff4:	b5104770 	.word	0xb5104770
 1019ff8:	f7fa200f 	.word	0xf7fa200f
 1019ffc:	b140fa9c 	.word	0xb140fa9c
 101a000:	057cf8df 	.word	0x057cf8df
 101a004:	f0416801 	.word	0xf0416801
 101a008:	60016180 	.word	0x60016180
 101a00c:	f7fa200f 	.word	0xf7fa200f
 101a010:	f8dffa71 	.word	0xf8dffa71
 101a014:	20001450 	.word	0x20001450
 101a018:	0043f881 	.word	0x0043f881
 101a01c:	4480f04f 	.word	0x4480f04f
 101a020:	0044f881 	.word	0x0044f881
 101a024:	254cf8df 	.word	0x254cf8df
 101a028:	00b8f8c4 	.word	0x00b8f8c4
 101a02c:	f0406820 	.word	0xf0406820
 101a030:	60200004 	.word	0x60200004
 101a034:	60102040 	.word	0x60102040
 101a038:	f4206b60 	.word	0xf4206b60
 101a03c:	63605080 	.word	0x63605080
 101a040:	20006f49 	.word	0x20006f49
 101a044:	6b604788 	.word	0x6b604788
 101a048:	4000f020 	.word	0x4000f020
 101a04c:	bd106360 	.word	0xbd106360
 101a050:	20013040 	.word	0x20013040
 101a054:	20016d08 	.word	0x20016d08
 101a058:	40000020 	.word	0x40000020
 101a05c:	20002004 	.word	0x20002004
 101a060:	f8dfb570 	.word	0xf8dfb570
 101a064:	68a04520 	.word	0x68a04520
 101a068:	d5280640 	.word	0xd5280640
 101a06c:	f7fa200f 	.word	0xf7fa200f
 101a070:	b140fa62 	.word	0xb140fa62
 101a074:	03e8f8df 	.word	0x03e8f8df
 101a078:	f0416841 	.word	0xf0416841
 101a07c:	60416180 	.word	0x60416180
 101a080:	f7fa200f 	.word	0xf7fa200f
 101a084:	f8dffa37 	.word	0xf8dffa37
 101a088:	200053dc 	.word	0x200053dc
 101a08c:	0043f885 	.word	0x0043f885
 101a090:	4680f04f 	.word	0x4680f04f
 101a094:	0044f885 	.word	0x0044f885
 101a098:	00b8f8c6 	.word	0x00b8f8c6
 101a09c:	f0406830 	.word	0xf0406830
 101a0a0:	60300004 	.word	0x60300004
 101a0a4:	60602040 	.word	0x60602040
 101a0a8:	f4206b70 	.word	0xf4206b70
 101a0ac:	63705080 	.word	0x63705080
 101a0b0:	20006f69 	.word	0x20006f69
 101a0b4:	6b704788 	.word	0x6b704788
 101a0b8:	4000f020 	.word	0x4000f020
 101a0bc:	f8df6370 	.word	0xf8df6370
 101a0c0:	200053a4 	.word	0x200053a4
 101a0c4:	003ff885 	.word	0x003ff885
 101a0c8:	f8852001 	.word	0xf8852001
 101a0cc:	21000043 	.word	0x21000043
 101a0d0:	f8852000 	.word	0xf8852000
 101a0d4:	f8851045 	.word	0xf8851045
 101a0d8:	f8850044 	.word	0xf8850044
 101a0dc:	f8850049 	.word	0xf8850049
 101a0e0:	f8a50041 	.word	0xf8a50041
 101a0e4:	e9c50054 	.word	0xe9c50054
 101a0e8:	20010100 	.word	0x20010100
 101a0ec:	1046f885 	.word	0x1046f885
 101a0f0:	004af885 	.word	0x004af885
 101a0f4:	f8852010 	.word	0xf8852010
 101a0f8:	77a8104b 	.word	0x77a8104b
 101a0fc:	f88561a9 	.word	0xf88561a9
 101a100:	62290026 	.word	0x62290026
 101a104:	002ef885 	.word	0x002ef885
 101a108:	f88562a9 	.word	0xf88562a9
 101a10c:	63290036 	.word	0x63290036
 101a110:	60a973a8 	.word	0x60a973a8
 101a114:	612975a8 	.word	0x612975a8
 101a118:	064068a0 	.word	0x064068a0
 101a11c:	2000d4fc 	.word	0x2000d4fc
 101a120:	10a0f8d5 	.word	0x10a0f8d5
 101a124:	2280f04f 	.word	0x2280f04f
 101a128:	13c0eb01 	.word	0x13c0eb01
 101a12c:	601a2608 	.word	0x601a2608
 101a130:	609a605a 	.word	0x609a605a
 101a134:	331060da 	.word	0x331060da
 101a138:	d1f81e76 	.word	0xd1f81e76
 101a13c:	28201c40 	.word	0x28201c40
 101a140:	200fdbf2 	.word	0x200fdbf2
 101a144:	4680f04f 	.word	0x4680f04f
 101a148:	f9b2f7fa 	.word	0xf9b2f7fa
 101a14c:	684148c4 	.word	0x684148c4
 101a150:	6180f041 	.word	0x6180f041
 101a154:	f44f6041 	.word	0xf44f6041
 101a158:	6001017f 	.word	0x6001017f
 101a15c:	1428f8df 	.word	0x1428f8df
 101a160:	21006041 	.word	0x21006041
 101a164:	f8df6081 	.word	0xf8df6081
 101a168:	60c11424 	.word	0x60c11424
 101a16c:	f7fa200f 	.word	0xf7fa200f
 101a170:	f8dff9c1 	.word	0xf8dff9c1
 101a174:	2006141c 	.word	0x2006141c
 101a178:	fdbef7fe 	.word	0xfdbef7fe
 101a17c:	003ef895 	.word	0x003ef895
 101a180:	2410f8df 	.word	0x2410f8df
 101a184:	0140eb00 	.word	0x0140eb00
 101a188:	18530089 	.word	0x18530089
 101a18c:	bf0e281f 	.word	0xbf0e281f
 101a190:	f1035052 	.word	0xf1035052
 101a194:	5050000c 	.word	0x5050000c
 101a198:	60584820 	.word	0x60584820
 101a19c:	01c0f8d4 	.word	0x01c0f8d4
 101a1a0:	00800890 	.word	0x00800890
 101a1a4:	01ccf8c4 	.word	0x01ccf8c4
 101a1a8:	f8c42005 	.word	0xf8c42005
 101a1ac:	204001d0 	.word	0x204001d0
 101a1b0:	6b706020 	.word	0x6b706020
 101a1b4:	5080f420 	.word	0x5080f420
 101a1b8:	6f696370 	.word	0x6f696370
 101a1bc:	47882000 	.word	0x47882000
 101a1c0:	f0206b70 	.word	0xf0206b70
 101a1c4:	63704000 	.word	0x63704000
 101a1c8:	f0024630 	.word	0xf0024630
 101a1cc:	68a0fa86 	.word	0x68a0fa86
 101a1d0:	d5fc0640 	.word	0xd5fc0640
 101a1d4:	f0406af0 	.word	0xf0406af0
 101a1d8:	62f00002 	.word	0x62f00002
 101a1dc:	f0206af0 	.word	0xf0206af0
 101a1e0:	62f00002 	.word	0x62f00002
 101a1e4:	f8c62000 	.word	0xf8c62000
 101a1e8:	f8c600b8 	.word	0xf8c600b8
 101a1ec:	683000bc 	.word	0x683000bc
 101a1f0:	0002f040 	.word	0x0002f040
 101a1f4:	bd706030 	.word	0xbd706030
 101a1f8:	499a2001 	.word	0x499a2001
 101a1fc:	0047f881 	.word	0x0047f881
 101a200:	00004770 	.word	0x00004770
 101a204:	40000034 	.word	0x40000034
 101a208:	49962000 	.word	0x49962000
 101a20c:	0047f881 	.word	0x0047f881
 101a210:	20014770 	.word	0x20014770
 101a214:	f8814993 	.word	0xf8814993
 101a218:	4770004c 	.word	0x4770004c
 101a21c:	05000020 	.word	0x05000020
 101a220:	4605b5f0 	.word	0x4605b5f0
 101a224:	2010b083 	.word	0x2010b083
 101a228:	f806f7fa 	.word	0xf806f7fa
 101a22c:	b1f54604 	.word	0xb1f54604
 101a230:	7100f44f 	.word	0x7100f44f
 101a234:	f0024628 	.word	0xf0024628
 101a238:	ee00fe74 	.word	0xee00fe74
 101a23c:	eeb80a10 	.word	0xeeb80a10
 101a240:	f7fe0a40 	.word	0xf7fe0a40
 101a244:	f002fca9 	.word	0xf002fca9
 101a248:	eebdfebd 	.word	0xeebdfebd
 101a24c:	f44f0ac0 	.word	0xf44f0ac0
 101a250:	ee107300 	.word	0xee107300
 101a254:	46210a10 	.word	0x46210a10
 101a258:	4628b282 	.word	0x4628b282
 101a25c:	fe6ef002 	.word	0xfe6ef002
 101a260:	f44f4625 	.word	0xf44f4625
 101a264:	46297200 	.word	0x46297200
 101a268:	f7fa4628 	.word	0xf7fa4628
 101a26c:	4c7df82f 	.word	0x4c7df82f
 101a270:	6100f44f 	.word	0x6100f44f
 101a274:	00a4f8d4 	.word	0x00a4f8d4
 101a278:	46301846 	.word	0x46301846
 101a27c:	fbb8f7fb 	.word	0xfbb8f7fb
 101a280:	7100f5c0 	.word	0x7100f5c0
 101a284:	0080eb06 	.word	0x0080eb06
 101a288:	f7f90089 	.word	0xf7f90089
 101a28c:	f8d4fddf 	.word	0xf8d4fddf
 101a290:	f7f900a4 	.word	0xf7f900a4
 101a294:	4606ff85 	.word	0x4606ff85
 101a298:	7100f44f 	.word	0x7100f44f
 101a29c:	fe41f002 	.word	0xfe41f002
 101a2a0:	0a10ee00 	.word	0x0a10ee00
 101a2a4:	0a40eeb8 	.word	0x0a40eeb8
 101a2a8:	fc76f7fe 	.word	0xfc76f7fe
 101a2ac:	fe8af002 	.word	0xfe8af002
 101a2b0:	0ac0eebd 	.word	0x0ac0eebd
 101a2b4:	7300f44f 	.word	0x7300f44f
 101a2b8:	0a10ee10 	.word	0x0a10ee10
 101a2bc:	b2824631 	.word	0xb2824631
 101a2c0:	f0024630 	.word	0xf0024630
 101a2c4:	f44ffe3b 	.word	0xf44ffe3b
 101a2c8:	46317200 	.word	0x46317200
 101a2cc:	f7f94630 	.word	0xf7f94630
 101a2d0:	2018fffd 	.word	0x2018fffd
 101a2d4:	ffb0f7f9 	.word	0xffb0f7f9
 101a2d8:	10a4f8d4 	.word	0x10a4f8d4
 101a2dc:	6200f44f 	.word	0x6200f44f
 101a2e0:	7300f44f 	.word	0x7300f44f
 101a2e4:	463a188f 	.word	0x463a188f
 101a2e8:	f0024631 	.word	0xf0024631
 101a2ec:	b135fe47 	.word	0xb135fe47
 101a2f0:	7300f44f 	.word	0x7300f44f
 101a2f4:	4629463a 	.word	0x4629463a
 101a2f8:	f0024638 	.word	0xf0024638
 101a2fc:	f8d4fe3f 	.word	0xf8d4fe3f
 101a300:	f7f900a4 	.word	0xf7f900a4
 101a304:	4605ff6b 	.word	0x4605ff6b
 101a308:	7100f44f 	.word	0x7100f44f
 101a30c:	fe09f002 	.word	0xfe09f002
 101a310:	0a10ee00 	.word	0x0a10ee00
 101a314:	0a40eeb8 	.word	0x0a40eeb8
 101a318:	fc3ef7fe 	.word	0xfc3ef7fe
 101a31c:	fe52f002 	.word	0xfe52f002
 101a320:	0ac0eebd 	.word	0x0ac0eebd
 101a324:	7300f44f 	.word	0x7300f44f
 101a328:	0a10ee10 	.word	0x0a10ee10
 101a32c:	b2824629 	.word	0xb2824629
 101a330:	f0024628 	.word	0xf0024628
 101a334:	2000fe03 	.word	0x2000fe03
 101a338:	ff7ef7f9 	.word	0xff7ef7f9
 101a33c:	f1044601 	.word	0xf1044601
 101a340:	90000080 	.word	0x90000080
 101a344:	0084f104 	.word	0x0084f104
 101a348:	f44f9001 	.word	0xf44f9001
 101a34c:	f8ad70cc 	.word	0xf8ad70cc
 101a350:	f44f0008 	.word	0xf44f0008
 101a354:	f8ad7080 	.word	0xf8ad7080
 101a358:	466b000a 	.word	0x466b000a
 101a35c:	7200f44f 	.word	0x7200f44f
 101a360:	f0024628 	.word	0xf0024628
 101a364:	67e0fc21 	.word	0x67e0fc21
 101a368:	fde8f7ff 	.word	0xfde8f7ff
 101a36c:	bdf0b003 	.word	0xbdf0b003
 101a370:	28091f00 	.word	0x28091f00
 101a374:	e8dfd815 	.word	0xe8dfd815
 101a378:	0a05f000 	.word	0x0a05f000
 101a37c:	1414140f 	.word	0x1414140f
 101a380:	0a051414 	.word	0x0a051414
 101a384:	49372011 	.word	0x49372011
 101a388:	0064f8a1 	.word	0x0064f8a1
 101a38c:	20124770 	.word	0x20124770
 101a390:	f8a14934 	.word	0xf8a14934
 101a394:	47700064 	.word	0x47700064
 101a398:	49322013 	.word	0x49322013
 101a39c:	0064f8a1 	.word	0x0064f8a1
 101a3a0:	f64f4770 	.word	0xf64f4770
 101a3a4:	492f70ff 	.word	0x492f70ff
 101a3a8:	0064f8a1 	.word	0x0064f8a1
 101a3ac:	482d4770 	.word	0x482d4770
 101a3b0:	1044f890 	.word	0x1044f890
 101a3b4:	41801e48 	.word	0x41801e48
 101a3b8:	0fc043c0 	.word	0x0fc043c0
 101a3bc:	20014770 	.word	0x20014770
 101a3c0:	f8814928 	.word	0xf8814928
 101a3c4:	47700049 	.word	0x47700049
 101a3c8:	0500008c 	.word	0x0500008c
 101a3cc:	4c25b510 	.word	0x4c25b510
 101a3d0:	4008f642 	.word	0x4008f642
 101a3d4:	0056f8a4 	.word	0x0056f8a4
 101a3d8:	200cf244 	.word	0x200cf244
 101a3dc:	0058f8a4 	.word	0x0058f8a4
 101a3e0:	705cf642 	.word	0x705cf642
 101a3e4:	005af8a4 	.word	0x005af8a4
 101a3e8:	10fcf642 	.word	0x10fcf642
 101a3ec:	005cf8a4 	.word	0x005cf8a4
 101a3f0:	60faf643 	.word	0x60faf643
 101a3f4:	005ef8a4 	.word	0x005ef8a4
 101a3f8:	500ef642 	.word	0x500ef642
 101a3fc:	0060f8a4 	.word	0x0060f8a4
 101a400:	f8842000 	.word	0xf8842000
 101a404:	f8840047 	.word	0xf8840047
 101a408:	f8840043 	.word	0xf8840043
 101a40c:	f7f9004c 	.word	0xf7f9004c
 101a410:	f8c4ff1c 	.word	0xf8c4ff1c
 101a414:	200a00a0 	.word	0x200a00a0
 101a418:	ff0ef7f9 	.word	0xff0ef7f9
 101a41c:	00a4f8c4 	.word	0x00a4f8c4
 101a420:	f7f92016 	.word	0xf7f92016
 101a424:	f8c4ff09 	.word	0xf8c4ff09
 101a428:	200000a8 	.word	0x200000a8
 101a42c:	fef8f7ff 	.word	0xfef8f7ff
 101a430:	4010e8bd 	.word	0x4010e8bd
 101a434:	b8dcf7ff 	.word	0xb8dcf7ff
 101a438:	f8b1490a 	.word	0xf8b1490a
 101a43c:	80022056 	.word	0x80022056
 101a440:	205cf8b1 	.word	0x205cf8b1
 101a444:	f8b18042 	.word	0xf8b18042
 101a448:	8082205a 	.word	0x8082205a
 101a44c:	2060f8b1 	.word	0x2060f8b1
 101a450:	f8b180c2 	.word	0xf8b180c2
 101a454:	81022058 	.word	0x81022058
 101a458:	105ef8b1 	.word	0x105ef8b1
 101a45c:	47708141 	.word	0x47708141
 101a460:	e2002000 	.word	0xe2002000
 101a464:	20013040 	.word	0x20013040
 101a468:	8801b5f0 	.word	0x8801b5f0
 101a46c:	6fd54a4a 	.word	0x6fd54a4a
 101a470:	7080f8d2 	.word	0x7080f8d2
 101a474:	1056f8a2 	.word	0x1056f8a2
 101a478:	c002f8b0 	.word	0xc002f8b0
 101a47c:	c05cf8a2 	.word	0xc05cf8a2
 101a480:	e004f8b0 	.word	0xe004f8b0
 101a484:	e05af8a2 	.word	0xe05af8a2
 101a488:	f8a288c3 	.word	0xf8a288c3
 101a48c:	89063060 	.word	0x89063060
 101a490:	6058f8a2 	.word	0x6058f8a2
 101a494:	fba18944 	.word	0xfba18944
 101a498:	f8a20105 	.word	0xf8a20105
 101a49c:	f510405e 	.word	0xf510405e
 101a4a0:	f1414000 	.word	0xf1414000
 101a4a4:	0c000100 	.word	0x0c000100
 101a4a8:	4001ea40 	.word	0x4001ea40
 101a4ac:	0088f8c2 	.word	0x0088f8c2
 101a4b0:	0107fbae 	.word	0x0107fbae
 101a4b4:	e084f8d2 	.word	0xe084f8d2
 101a4b8:	4000f510 	.word	0x4000f510
 101a4bc:	0100f141 	.word	0x0100f141
 101a4c0:	ea400c00 	.word	0xea400c00
 101a4c4:	f8c24001 	.word	0xf8c24001
 101a4c8:	fba6008c 	.word	0xfba6008c
 101a4cc:	f510010e 	.word	0xf510010e
 101a4d0:	f1414000 	.word	0xf1414000
 101a4d4:	0c000100 	.word	0x0c000100
 101a4d8:	4001ea40 	.word	0x4001ea40
 101a4dc:	0090f8c2 	.word	0x0090f8c2
 101a4e0:	0105fbac 	.word	0x0105fbac
 101a4e4:	4000f510 	.word	0x4000f510
 101a4e8:	0100f141 	.word	0x0100f141
 101a4ec:	ea400c00 	.word	0xea400c00
 101a4f0:	f8c24001 	.word	0xf8c24001
 101a4f4:	fba30094 	.word	0xfba30094
 101a4f8:	f5100107 	.word	0xf5100107
 101a4fc:	f1414000 	.word	0xf1414000
 101a500:	0c000100 	.word	0x0c000100
 101a504:	4001ea40 	.word	0x4001ea40
 101a508:	0098f8c2 	.word	0x0098f8c2
 101a50c:	010efba4 	.word	0x010efba4
 101a510:	4000f510 	.word	0x4000f510
 101a514:	0100f141 	.word	0x0100f141
 101a518:	ea400c00 	.word	0xea400c00
 101a51c:	f8c24001 	.word	0xf8c24001
 101a520:	bdf0009c 	.word	0xbdf0009c
 101a524:	f890481c 	.word	0xf890481c
 101a528:	1e481043 	.word	0x1e481043
 101a52c:	43c04180 	.word	0x43c04180
 101a530:	47700fc0 	.word	0x47700fc0
 101a534:	e000e100 	.word	0xe000e100
 101a538:	f9904817 	.word	0xf9904817
 101a53c:	47700042 	.word	0x47700042
 101a540:	f8914915 	.word	0xf8914915
 101a544:	1a102042 	.word	0x1a102042
 101a548:	0042f881 	.word	0x0042f881
 101a54c:	49124770 	.word	0x49124770
 101a550:	47706688 	.word	0x47706688
 101a554:	01970000 	.word	0x01970000
 101a558:	66c8490f 	.word	0x66c8490f
 101a55c:	490e4770 	.word	0x490e4770
 101a560:	47706708 	.word	0x47706708
 101a564:	6748490c 	.word	0x6748490c
 101a568:	00004770 	.word	0x00004770
 101a56c:	2000200c 	.word	0x2000200c
 101a570:	01ff0000 	.word	0x01ff0000
 101a574:	40010020 	.word	0x40010020
 101a578:	20016d14 	.word	0x20016d14
 101a57c:	aaaaaaab 	.word	0xaaaaaaab
 101a580:	e2002004 	.word	0xe2002004
 101a584:	4001001c 	.word	0x4001001c
 101a588:	0001001f 	.word	0x0001001f
 101a58c:	00210002 	.word	0x00210002
 101a590:	000081f1 	.word	0x000081f1
 101a594:	20016d08 	.word	0x20016d08
 101a598:	20013040 	.word	0x20013040
 101a59c:	4ff0e92d 	.word	0x4ff0e92d
 101a5a0:	f8dfb081 	.word	0xf8dfb081
 101a5a4:	ed2d6e00 	.word	0xed2d6e00
 101a5a8:	69f08b04 	.word	0x69f08b04
 101a5ac:	7800b088 	.word	0x7800b088
 101a5b0:	1001f3c0 	.word	0x1001f3c0
 101a5b4:	f0027530 	.word	0xf0027530
 101a5b8:	0001ff04 	.word	0x0001ff04
 101a5bc:	0021f896 	.word	0x0021f896
 101a5c0:	f8968db2 	.word	0xf8968db2
 101a5c4:	fb103022 	.word	0xfb103022
 101a5c8:	8e72f002 	.word	0x8e72f002
 101a5cc:	0403fb12 	.word	0x0403fb12
 101a5d0:	d01ab2a4 	.word	0xd01ab2a4
 101a5d4:	1a10ee00 	.word	0x1a10ee00
 101a5d8:	ee004621 	.word	0xee004621
 101a5dc:	20011a90 	.word	0x20011a90
 101a5e0:	0a40eeb8 	.word	0x0a40eeb8
 101a5e4:	0a60eef8 	.word	0x0a60eef8
 101a5e8:	0a20ee80 	.word	0x0a20ee80
 101a5ec:	0ae4eddf 	.word	0x0ae4eddf
 101a5f0:	0a20ee20 	.word	0x0a20ee20
 101a5f4:	fec4f7fa 	.word	0xfec4f7fa
 101a5f8:	0ae2eddf 	.word	0x0ae2eddf
 101a5fc:	0a20ee20 	.word	0x0a20ee20
 101a600:	0a40eeb5 	.word	0x0a40eeb5
 101a604:	fa10eef1 	.word	0xfa10eef1
 101a608:	2000d501 	.word	0x2000d501
 101a60c:	eddfe00e 	.word	0xeddfe00e
 101a610:	eeb40ade 	.word	0xeeb40ade
 101a614:	eef10a60 	.word	0xeef10a60
 101a618:	bfa8fa10 	.word	0xbfa8fa10
 101a61c:	da0520ff 	.word	0xda0520ff
 101a620:	ff62f7fa 	.word	0xff62f7fa
 101a624:	0ac0eebd 	.word	0x0ac0eebd
 101a628:	0a10ee10 	.word	0x0a10ee10
 101a62c:	ed9f7630 	.word	0xed9f7630
 101a630:	f0028ad6 	.word	0xf0028ad6
 101a634:	0001fec9 	.word	0x0001fec9
 101a638:	ee00d019 	.word	0xee00d019
 101a63c:	20011a10 	.word	0x20011a10
 101a640:	4a90ee00 	.word	0x4a90ee00
 101a644:	0a40eeb8 	.word	0x0a40eeb8
 101a648:	0a60eef8 	.word	0x0a60eef8
 101a64c:	0a20ee80 	.word	0x0a20ee80
 101a650:	0acbeddf 	.word	0x0acbeddf
 101a654:	0a20ee20 	.word	0x0a20ee20
 101a658:	fe92f7fa 	.word	0xfe92f7fa
 101a65c:	0ac9eddf 	.word	0x0ac9eddf
 101a660:	0a20ee20 	.word	0x0a20ee20
 101a664:	0a40eeb5 	.word	0x0a40eeb5
 101a668:	fa10eef1 	.word	0xfa10eef1
 101a66c:	2000d501 	.word	0x2000d501
 101a670:	eeb4e00c 	.word	0xeeb4e00c
 101a674:	eef10a48 	.word	0xeef10a48
 101a678:	bfa8fa10 	.word	0xbfa8fa10
 101a67c:	da0520ff 	.word	0xda0520ff
 101a680:	ff32f7fa 	.word	0xff32f7fa
 101a684:	0ac0eebd 	.word	0x0ac0eebd
 101a688:	0a10ee10 	.word	0x0a10ee10
 101a68c:	f8967670 	.word	0xf8967670
 101a690:	f8960022 	.word	0xf8960022
 101a694:	eef21021 	.word	0xeef21021
 101a698:	18088a04 	.word	0x18088a04
 101a69c:	9000b280 	.word	0x9000b280
 101a6a0:	ff6df002 	.word	0xff6df002
 101a6a4:	23009a00 	.word	0x23009a00
 101a6a8:	f9ccf7fe 	.word	0xf9ccf7fe
 101a6ac:	fa50f7fe 	.word	0xfa50f7fe
 101a6b0:	0a10ee00 	.word	0x0a10ee00
 101a6b4:	f7fa2001 	.word	0xf7fa2001
 101a6b8:	eeb0fe63 	.word	0xeeb0fe63
 101a6bc:	20019a40 	.word	0x20019a40
 101a6c0:	0a16ed96 	.word	0x0a16ed96
 101a6c4:	0a40eeb8 	.word	0x0a40eeb8
 101a6c8:	fe5af7fa 	.word	0xfe5af7fa
 101a6cc:	9a40eef0 	.word	0x9a40eef0
 101a6d0:	ff32f7ff 	.word	0xff32f7ff
 101a6d4:	0140eb00 	.word	0x0140eb00
 101a6d8:	0aaceddf 	.word	0x0aaceddf
 101a6dc:	ee000048 	.word	0xee000048
 101a6e0:	eeb80a10 	.word	0xeeb80a10
 101a6e4:	ee090ac0 	.word	0xee090ac0
 101a6e8:	ee300a28 	.word	0xee300a28
 101a6ec:	eef30a20 	.word	0xeef30a20
 101a6f0:	ee090a04 	.word	0xee090a04
 101a6f4:	eeb50ae0 	.word	0xeeb50ae0
 101a6f8:	eef10a40 	.word	0xeef10a40
 101a6fc:	bf48fa10 	.word	0xbf48fa10
 101a700:	d40c2000 	.word	0xd40c2000
 101a704:	0a48eeb4 	.word	0x0a48eeb4
 101a708:	fa10eef1 	.word	0xfa10eef1
 101a70c:	20ffbfa8 	.word	0x20ffbfa8
 101a710:	f7fada05 	.word	0xf7fada05
 101a714:	eebdfee9 	.word	0xeebdfee9
 101a718:	ee100ac0 	.word	0xee100ac0
 101a71c:	75700a10 	.word	0x75700a10
 101a720:	ff0af002 	.word	0xff0af002
 101a724:	46884604 	.word	0x46884604
 101a728:	ff0af002 	.word	0xff0af002
 101a72c:	45902200 	.word	0x45902200
 101a730:	4294bf02 	.word	0x4294bf02
 101a734:	46902401 	.word	0x46902401
 101a738:	fa0af7fe 	.word	0xfa0af7fe
 101a73c:	0a10ee09 	.word	0x0a10ee09
 101a740:	46414620 	.word	0x46414620
 101a744:	fa04f7fe 	.word	0xfa04f7fe
 101a748:	0a10ee00 	.word	0x0a10ee00
 101a74c:	0a00ee89 	.word	0x0a00ee89
 101a750:	0a28ee20 	.word	0x0a28ee20
 101a754:	0a00eef7 	.word	0x0a00eef7
 101a758:	0a60eeb4 	.word	0x0a60eeb4
 101a75c:	fa10eef1 	.word	0xfa10eef1
 101a760:	2001d40b 	.word	0x2001d40b
 101a764:	fe0cf7fa 	.word	0xfe0cf7fa
 101a768:	0a86eddf 	.word	0x0a86eddf
 101a76c:	0a20ee20 	.word	0x0a20ee20
 101a770:	0a40eeb5 	.word	0x0a40eeb5
 101a774:	fa10eef1 	.word	0xfa10eef1
 101a778:	2000d501 	.word	0x2000d501
 101a77c:	eeb4e00c 	.word	0xeeb4e00c
 101a780:	eef10a48 	.word	0xeef10a48
 101a784:	bfa8fa10 	.word	0xbfa8fa10
 101a788:	da0520ff 	.word	0xda0520ff
 101a78c:	feacf7fa 	.word	0xfeacf7fa
 101a790:	0ac0eebd 	.word	0x0ac0eebd
 101a794:	0a10ee10 	.word	0x0a10ee10
 101a798:	f00275b0 	.word	0xf00275b0
 101a79c:	ee20fed5 	.word	0xee20fed5
 101a7a0:	eef70a28 	.word	0xeef70a28
 101a7a4:	eeb40a00 	.word	0xeeb40a00
 101a7a8:	eef10a60 	.word	0xeef10a60
 101a7ac:	d40bfa10 	.word	0xd40bfa10
 101a7b0:	f7fa2001 	.word	0xf7fa2001
 101a7b4:	eddffde5 	.word	0xeddffde5
 101a7b8:	ee200a73 	.word	0xee200a73
 101a7bc:	eeb50a20 	.word	0xeeb50a20
 101a7c0:	eef10a40 	.word	0xeef10a40
 101a7c4:	d501fa10 	.word	0xd501fa10
 101a7c8:	e00c2000 	.word	0xe00c2000
 101a7cc:	0a48eeb4 	.word	0x0a48eeb4
 101a7d0:	fa10eef1 	.word	0xfa10eef1
 101a7d4:	20ffbfa8 	.word	0x20ffbfa8
 101a7d8:	f7fada05 	.word	0xf7fada05
 101a7dc:	eebdfe85 	.word	0xeebdfe85
 101a7e0:	ee100ac0 	.word	0xee100ac0
 101a7e4:	75f00a10 	.word	0x75f00a10
 101a7e8:	f0022564 	.word	0xf0022564
 101a7ec:	f641fed2 	.word	0xf641fed2
 101a7f0:	43681922 	.word	0x43681922
 101a7f4:	2040eb09 	.word	0x2040eb09
 101a7f8:	2bc8f8df 	.word	0x2bc8f8df
 101a7fc:	2b44f243 	.word	0x2b44f243
 101a800:	2102fba0 	.word	0x2102fba0
 101a804:	f5b00b48 	.word	0xf5b00b48
 101a808:	bf284f48 	.word	0xbf284f48
 101a80c:	4048f44f 	.word	0x4048f44f
 101a810:	246481b0 	.word	0x246481b0
 101a814:	fec0f002 	.word	0xfec0f002
 101a818:	8e704602 	.word	0x8e704602
 101a81c:	fb0b2300 	.word	0xfb0b2300
 101a820:	fba4fc00 	.word	0xfba4fc00
 101a824:	fb140102 	.word	0xfb140102
 101a828:	ea4f1103 	.word	0xea4f1103
 101a82c:	0649025c 	.word	0x0649025c
 101a830:	11d0ea41 	.word	0x11d0ea41
 101a834:	6040eb12 	.word	0x6040eb12
 101a838:	41594662 	.word	0x41594662
 101a83c:	f902f7fe 	.word	0xf902f7fe
 101a840:	42992300 	.word	0x42992300
 101a844:	4248f04f 	.word	0x4248f04f
 101a848:	4290d801 	.word	0x4290d801
 101a84c:	4610d300 	.word	0x4610d300
 101a850:	f0026030 	.word	0xf0026030
 101a854:	4368fe98 	.word	0x4368fe98
 101a858:	2b68f8df 	.word	0x2b68f8df
 101a85c:	2040eb09 	.word	0x2040eb09
 101a860:	2102fba0 	.word	0x2102fba0
 101a864:	f5b00b48 	.word	0xf5b00b48
 101a868:	bf284f48 	.word	0xbf284f48
 101a86c:	4048f44f 	.word	0x4048f44f
 101a870:	f00281f0 	.word	0xf00281f0
 101a874:	8e35fe8b 	.word	0x8e35fe8b
 101a878:	a700fba4 	.word	0xa700fba4
 101a87c:	fb0b2100 	.word	0xfb0b2100
 101a880:	fb14f205 	.word	0xfb14f205
 101a884:	067f7701 	.word	0x067f7701
 101a888:	ea470850 	.word	0xea470850
 101a88c:	eb1017da 	.word	0xeb1017da
 101a890:	4179604a 	.word	0x4179604a
 101a894:	f7fe2300 	.word	0xf7fe2300
 101a898:	2300f8d5 	.word	0x2300f8d5
 101a89c:	f04f4299 	.word	0xf04f4299
 101a8a0:	d8014248 	.word	0xd8014248
 101a8a4:	d3004290 	.word	0xd3004290
 101a8a8:	60704610 	.word	0x60704610
 101a8ac:	90026c70 	.word	0x90026c70
 101a8b0:	90036cb0 	.word	0x90036cb0
 101a8b4:	f8ad7cb0 	.word	0xf8ad7cb0
 101a8b8:	f88d5012 	.word	0xf88d5012
 101a8bc:	a8010017 	.word	0xa8010017
 101a8c0:	f8ecf003 	.word	0xf8ecf003
 101a8c4:	f0044604 	.word	0xf0044604
 101a8c8:	1900fb30 	.word	0x1900fb30
 101a8cc:	ee00b280 	.word	0xee00b280
 101a8d0:	8e300a10 	.word	0x8e300a10
 101a8d4:	0a40eeb8 	.word	0x0a40eeb8
 101a8d8:	0a90ee00 	.word	0x0a90ee00
 101a8dc:	0a60eef8 	.word	0x0a60eef8
 101a8e0:	0a20ee80 	.word	0x0a20ee80
 101a8e4:	0a8aeddf 	.word	0x0a8aeddf
 101a8e8:	0a20ee20 	.word	0x0a20ee20
 101a8ec:	0a40eeb5 	.word	0x0a40eeb5
 101a8f0:	fa10eef1 	.word	0xfa10eef1
 101a8f4:	2000bf48 	.word	0x2000bf48
 101a8f8:	eeb4d40c 	.word	0xeeb4d40c
 101a8fc:	eef10a48 	.word	0xeef10a48
 101a900:	bfa8fa10 	.word	0xbfa8fa10
 101a904:	da0520ff 	.word	0xda0520ff
 101a908:	fdeef7fa 	.word	0xfdeef7fa
 101a90c:	0ac0eebd 	.word	0x0ac0eebd
 101a910:	0a10ee10 	.word	0x0a10ee10
 101a914:	8eb076b0 	.word	0x8eb076b0
 101a918:	0a10ee00 	.word	0x0a10ee00
 101a91c:	0000f8bd 	.word	0x0000f8bd
 101a920:	0a40eeb8 	.word	0x0a40eeb8
 101a924:	0a90ee00 	.word	0x0a90ee00
 101a928:	0a60eef8 	.word	0x0a60eef8
 101a92c:	0a20ee80 	.word	0x0a20ee80
 101a930:	0a78eddf 	.word	0x0a78eddf
 101a934:	0a20ee20 	.word	0x0a20ee20
 101a938:	0a40eeb5 	.word	0x0a40eeb5
 101a93c:	fa10eef1 	.word	0xfa10eef1
 101a940:	2000bf48 	.word	0x2000bf48
 101a944:	eeb4d40c 	.word	0xeeb4d40c
 101a948:	eef10a48 	.word	0xeef10a48
 101a94c:	bfa8fa10 	.word	0xbfa8fa10
 101a950:	da0520ff 	.word	0xda0520ff
 101a954:	fdc8f7fa 	.word	0xfdc8f7fa
 101a958:	0ac0eebd 	.word	0x0ac0eebd
 101a95c:	0a10ee10 	.word	0x0a10ee10
 101a960:	76f06bf1 	.word	0x76f06bf1
 101a964:	47884630 	.word	0x47884630
 101a968:	f8862001 	.word	0xf8862001
 101a96c:	6eb00023 	.word	0x6eb00023
 101a970:	fe6ff7fc 	.word	0xfe6ff7fc
 101a974:	ecbdb008 	.word	0xecbdb008
 101a978:	b0018b04 	.word	0xb0018b04
 101a97c:	8ff0e8bd 	.word	0x8ff0e8bd
 101a980:	459c4000 	.word	0x459c4000
 101a984:	42200000 	.word	0x42200000
 101a988:	437f0001 	.word	0x437f0001
 101a98c:	425f999a 	.word	0x425f999a
 101a990:	4605b5f0 	.word	0x4605b5f0
 101a994:	4a0cf8df 	.word	0x4a0cf8df
 101a998:	8de26c60 	.word	0x8de26c60
 101a99c:	f600b08d 	.word	0xf600b08d
 101a9a0:	4628014c 	.word	0x4628014c
 101a9a4:	fc92f7f9 	.word	0xfc92f7f9
 101a9a8:	95036c60 	.word	0x95036c60
 101a9ac:	004cf600 	.word	0x004cf600
 101a9b0:	7ca09004 	.word	0x7ca09004
 101a9b4:	0015f88d 	.word	0x0015f88d
 101a9b8:	0028f894 	.word	0x0028f894
 101a9bc:	0014f88d 	.word	0x0014f88d
 101a9c0:	f002a803 	.word	0xf002a803
 101a9c4:	8de1fd6a 	.word	0x8de1fd6a
 101a9c8:	f0034628 	.word	0xf0034628
 101a9cc:	2002ff47 	.word	0x2002ff47
 101a9d0:	f88d9506 	.word	0xf88d9506
 101a9d4:	6c60002a 	.word	0x6c60002a
 101a9d8:	6ca09007 	.word	0x6ca09007
 101a9dc:	7ca09008 	.word	0x7ca09008
 101a9e0:	002bf88d 	.word	0x002bf88d
 101a9e4:	0028f894 	.word	0x0028f894
 101a9e8:	002cf88d 	.word	0x002cf88d
 101a9ec:	f8ad8e20 	.word	0xf8ad8e20
 101a9f0:	a8060026 	.word	0xa8060026
 101a9f4:	ff78f002 	.word	0xff78f002
 101a9f8:	8ea0b910 	.word	0x8ea0b910
 101a9fc:	86a01c40 	.word	0x86a01c40
 101aa00:	0020f894 	.word	0x0020f894
 101aa04:	2021f894 	.word	0x2021f894
 101aa08:	42911c41 	.word	0x42911c41
 101aa0c:	1025f894 	.word	0x1025f894
 101aa10:	2501bf0c 	.word	0x2501bf0c
 101aa14:	b3a92500 	.word	0xb3a92500
 101aa18:	1026f894 	.word	0x1026f894
 101aa1c:	b1092600 	.word	0xb1092600
 101aa20:	0603f000 	.word	0x0603f000
 101aa24:	f44f7ca0 	.word	0xf44f7ca0
 101aa28:	f88d61f0 	.word	0xf88d61f0
 101aa2c:	f88d6008 	.word	0xf88d6008
 101aa30:	6c600009 	.word	0x6c600009
 101aa34:	90004408 	.word	0x90004408
 101aa38:	90016d20 	.word	0x90016d20
 101aa3c:	f7f94668 	.word	0xf7f94668
 101aa40:	f894fad3 	.word	0xf894fad3
 101aa44:	28000026 	.word	0x28000026
 101aa48:	2e03bf18 	.word	0x2e03bf18
 101aa4c:	8da2d10d 	.word	0x8da2d10d
 101aa50:	6d206ce1 	.word	0x6d206ce1
 101aa54:	f7f92303 	.word	0xf7f92303
 101aa58:	6d61fa39 	.word	0x6d61fa39
 101aa5c:	462a6ce0 	.word	0x462a6ce0
 101aa60:	fa92f004 	.word	0xfa92f004
 101aa64:	0026f894 	.word	0x0026f894
 101aa68:	8da1b130 	.word	0x8da1b130
 101aa6c:	462b6d20 	.word	0x462b6d20
 101aa70:	f0024632 	.word	0xf0024632
 101aa74:	e027fac7 	.word	0xe027fac7
 101aa78:	6ce08da1 	.word	0x6ce08da1
 101aa7c:	f002462a 	.word	0xf002462a
 101aa80:	e021fbb4 	.word	0xe021fbb4
 101aa84:	6c608da1 	.word	0x6c608da1
 101aa88:	fffff002 	.word	0xfffff002
 101aa8c:	6c608da2 	.word	0x6c608da2
 101aa90:	23026ce1 	.word	0x23026ce1
 101aa94:	0028f600 	.word	0x0028f600
 101aa98:	fa18f7f9 	.word	0xfa18f7f9
 101aa9c:	7020f894 	.word	0x7020f894
 101aaa0:	8da669e0 	.word	0x8da669e0
 101aaa4:	08f36ce1 	.word	0x08f36ce1
 101aaa8:	f303fb17 	.word	0xf303fb17
 101aaac:	f8944418 	.word	0xf8944418
 101aab0:	08f23027 	.word	0x08f23027
 101aab4:	f7f94418 	.word	0xf7f94418
 101aab8:	6c60f9cd 	.word	0x6c60f9cd
 101aabc:	62f0f44f 	.word	0x62f0f44f
 101aac0:	44104631 	.word	0x44104631
 101aac4:	fc0bf002 	.word	0xfc0bf002
 101aac8:	f894b19d 	.word	0xf894b19d
 101aacc:	b1380025 	.word	0xb1380025
 101aad0:	3027f894 	.word	0x3027f894
 101aad4:	69e08d62 	.word	0x69e08d62
 101aad8:	44186d61 	.word	0x44186d61
 101aadc:	f9baf7f9 	.word	0xf9baf7f9
 101aae0:	6ba28a21 	.word	0x6ba28a21
 101aae4:	006cf104 	.word	0x006cf104
 101aae8:	f7ff4790 	.word	0xf7ff4790
 101aaec:	b00dfd57 	.word	0xb00dfd57
 101aaf0:	f894bdf0 	.word	0xf894bdf0
 101aaf4:	f8940020 	.word	0xf8940020
 101aaf8:	1c401021 	.word	0x1c401021
 101aafc:	0020f884 	.word	0x0020f884
 101ab00:	1c40b2c0 	.word	0x1c40b2c0
 101ab04:	bf084288 	.word	0xbf084288
 101ab08:	fa6ff7ff 	.word	0xfa6ff7ff
 101ab0c:	bdf0b00d 	.word	0xbdf0b00d
 101ab10:	44000000 	.word	0x44000000
 101ab14:	43800000 	.word	0x43800000
 101ab18:	4ff0e92d 	.word	0x4ff0e92d
 101ab1c:	b081000f 	.word	0xb081000f
 101ab20:	f8df4604 	.word	0xf8df4604
 101ab24:	d120a880 	.word	0xd120a880
 101ab28:	0028f89a 	.word	0x0028f89a
 101ab2c:	f89a2801 	.word	0xf89a2801
 101ab30:	bf0c0027 	.word	0xbf0c0027
 101ab34:	26012600 	.word	0x26012600
 101ab38:	1c401830 	.word	0x1c401830
 101ab3c:	5c21b2c0 	.word	0x5c21b2c0
 101ab40:	78404420 	.word	0x78404420
 101ab44:	ea400880 	.word	0xea400880
 101ab48:	f0001081 	.word	0xf0001081
 101ab4c:	f7f908ff 	.word	0xf7f908ff
 101ab50:	f100f8cb 	.word	0xf100f8cb
 101ab54:	f89a0110 	.word	0xf89a0110
 101ab58:	28020028 	.word	0x28020028
 101ab5c:	bfa84620 	.word	0xbfa84620
 101ab60:	b2893108 	.word	0xb2893108
 101ab64:	f926f7f9 	.word	0xf926f7f9
 101ab68:	7921e008 	.word	0x7921e008
 101ab6c:	090978e0 	.word	0x090978e0
 101ab70:	1800ea41 	.word	0x1800ea41
 101ab74:	46202103 	.word	0x46202103
 101ab78:	f936f7f9 	.word	0xf936f7f9
 101ab7c:	f0404580 	.word	0xf0404580
 101ab80:	7820815a 	.word	0x7820815a
 101ab84:	20010901 	.word	0x20010901
 101ab88:	f88a000a 	.word	0xf88a000a
 101ab8c:	bf181012 	.word	0xbf181012
 101ab90:	d00e2901 	.word	0xd00e2901
 101ab94:	bf182902 	.word	0xbf182902
 101ab98:	d00a2904 	.word	0xd00a2904
 101ab9c:	bf182905 	.word	0xbf182905
 101aba0:	d0062906 	.word	0xd0062906
 101aba4:	d003003b 	.word	0xd003003b
 101aba8:	bf18290c 	.word	0xbf18290c
 101abac:	d000290d 	.word	0xd000290d
 101abb0:	00022000 	.word	0x00022000
 101abb4:	8139f000 	.word	0x8139f000
 101abb8:	2f002200 	.word	0x2f002200
 101abbc:	2029f88a 	.word	0x2029f88a
 101abc0:	78237862 	.word	0x78237862
 101abc4:	f0404694 	.word	0xf0404694
 101abc8:	009b809c 	.word	0x009b809c
 101abcc:	033cf003 	.word	0x033cf003
 101abd0:	1292ea43 	.word	0x1292ea43
 101abd4:	3028f89a 	.word	0x3028f89a
 101abd8:	bf082b01 	.word	0xbf082b01
 101abdc:	073ff00c 	.word	0x073ff00c
 101abe0:	78a7d005 	.word	0x78a7d005
 101abe4:	ea47097f 	.word	0xea47097f
 101abe8:	f3c707cc 	.word	0xf3c707cc
 101abec:	1cb60708 	.word	0x1cb60708
 101abf0:	f814b2f6 	.word	0xf814b2f6
 101abf4:	f8dae006 	.word	0xf8dae006
 101abf8:	ea4fc01c 	.word	0xea4fc01c
 101abfc:	f88c0e9e 	.word	0xf88c0e9e
 101ac00:	f89ae000 	.word	0xf89ae000
 101ac04:	f04f8027 	.word	0xf04f8027
 101ac08:	f1b80e01 	.word	0xf1b80e01
 101ac0c:	db540f02 	.word	0xdb540f02
 101ac10:	0801f1a8 	.word	0x0801f1a8
 101ac14:	0903f018 	.word	0x0903f018
 101ac18:	8011f000 	.word	0x8011f000
 101ac1c:	0506eb0e 	.word	0x0506eb0e
 101ac20:	0b05eb04 	.word	0x0b05eb04
 101ac24:	f81b5d65 	.word	0xf81b5d65
 101ac28:	08adbc01 	.word	0x08adbc01
 101ac2c:	0901f1b9 	.word	0x0901f1b9
 101ac30:	158bea45 	.word	0x158bea45
 101ac34:	500ef80c 	.word	0x500ef80c
 101ac38:	0e01f10e 	.word	0x0e01f10e
 101ac3c:	ea5fd1ee 	.word	0xea5fd1ee
 101ac40:	d03a0898 	.word	0xd03a0898
 101ac44:	0506eb0e 	.word	0x0506eb0e
 101ac48:	0905eb04 	.word	0x0905eb04
 101ac4c:	f8195d65 	.word	0xf8195d65
 101ac50:	08ad9c01 	.word	0x08ad9c01
 101ac54:	1989ea45 	.word	0x1989ea45
 101ac58:	900ef80c 	.word	0x900ef80c
 101ac5c:	0e01f10e 	.word	0x0e01f10e
 101ac60:	0506eb0e 	.word	0x0506eb0e
 101ac64:	0905eb04 	.word	0x0905eb04
 101ac68:	f8195d65 	.word	0xf8195d65
 101ac6c:	08ad9c01 	.word	0x08ad9c01
 101ac70:	1989ea45 	.word	0x1989ea45
 101ac74:	900ef80c 	.word	0x900ef80c
 101ac78:	0e01f10e 	.word	0x0e01f10e
 101ac7c:	0506eb0e 	.word	0x0506eb0e
 101ac80:	0905eb04 	.word	0x0905eb04
 101ac84:	f8195d65 	.word	0xf8195d65
 101ac88:	08ad9c01 	.word	0x08ad9c01
 101ac8c:	1989ea45 	.word	0x1989ea45
 101ac90:	900ef80c 	.word	0x900ef80c
 101ac94:	0e01f10e 	.word	0x0e01f10e
 101ac98:	0506eb0e 	.word	0x0506eb0e
 101ac9c:	0905eb04 	.word	0x0905eb04
 101aca0:	f8195d65 	.word	0xf8195d65
 101aca4:	08ad9c01 	.word	0x08ad9c01
 101aca8:	0801f1b8 	.word	0x0801f1b8
 101acac:	1989ea45 	.word	0x1989ea45
 101acb0:	900ef80c 	.word	0x900ef80c
 101acb4:	0e01f10e 	.word	0x0e01f10e
 101acb8:	2b01d1c4 	.word	0x2b01d1c4
 101acbc:	f89cbf04 	.word	0xf89cbf04
 101acc0:	2b1a3000 	.word	0x2b1a3000
 101acc4:	f89cd15b 	.word	0xf89cd15b
 101acc8:	2b7a3001 	.word	0x2b7a3001
 101accc:	f89cbf04 	.word	0xf89cbf04
 101acd0:	2b2b3002 	.word	0x2b2b3002
 101acd4:	f89cd153 	.word	0xf89cd153
 101acd8:	2bcb3003 	.word	0x2bcb3003
 101acdc:	f89cbf04 	.word	0xf89cbf04
 101ace0:	2bcf3004 	.word	0x2bcf3004
 101ace4:	f89cd14b 	.word	0xf89cd14b
 101ace8:	2bab3005 	.word	0x2bab3005
 101acec:	f89cbf04 	.word	0xf89cbf04
 101acf0:	2baa3006 	.word	0x2baa3006
 101acf4:	2301d143 	.word	0x2301d143
 101acf8:	3024f88a 	.word	0x3024f88a
 101acfc:	3029f88a 	.word	0x3029f88a
 101ad00:	0912e03d 	.word	0x0912e03d
 101ad04:	8027f89a 	.word	0x8027f89a
 101ad08:	1203ea42 	.word	0x1203ea42
 101ad0c:	260078a3 	.word	0x260078a3
 101ad10:	ea4308db 	.word	0xea4308db
 101ad14:	f1b8134c 	.word	0xf1b8134c
 101ad18:	f3c30f00 	.word	0xf3c30f00
 101ad1c:	f8da0708 	.word	0xf8da0708
 101ad20:	d02c301c 	.word	0xd02c301c
 101ad24:	7cc8ea5f 	.word	0x7cc8ea5f
 101ad28:	f894d508 	.word	0xf894d508
 101ad2c:	7926c005 	.word	0x7926c005
 101ad30:	1c1cea4f 	.word	0x1c1cea4f
 101ad34:	1606ea4c 	.word	0x1606ea4c
 101ad38:	2601701e 	.word	0x2601701e
 101ad3c:	0c58ea5f 	.word	0x0c58ea5f
 101ad40:	801df000 	.word	0x801df000
 101ad44:	0e06eb04 	.word	0x0e06eb04
 101ad48:	8004f89e 	.word	0x8004f89e
 101ad4c:	e005f89e 	.word	0xe005f89e
 101ad50:	1e1eea4f 	.word	0x1e1eea4f
 101ad54:	1e08ea4e 	.word	0x1e08ea4e
 101ad58:	e006f803 	.word	0xe006f803
 101ad5c:	eb041c76 	.word	0xeb041c76
 101ad60:	f89e0e06 	.word	0xf89e0e06
 101ad64:	f89e8004 	.word	0xf89e8004
 101ad68:	ea4fe005 	.word	0xea4fe005
 101ad6c:	ea4e1e1e 	.word	0xea4e1e1e
 101ad70:	f8031e08 	.word	0xf8031e08
 101ad74:	1c76e006 	.word	0x1c76e006
 101ad78:	0c01f1bc 	.word	0x0c01f1bc
 101ad7c:	b2d3d1e2 	.word	0xb2d3d1e2
 101ad80:	d03c2b00 	.word	0xd03c2b00
 101ad84:	f01308cb 	.word	0xf01308cb
 101ad88:	f88a0401 	.word	0xf88a0401
 101ad8c:	d0064026 	.word	0xd0064026
 101ad90:	f04f26fc 	.word	0xf04f26fc
 101ad94:	ea120c03 	.word	0xea120c03
 101ad98:	d1380f0c 	.word	0xd1380f0c
 101ad9c:	263fe000 	.word	0x263fe000
 101ada0:	429eb2d3 	.word	0x429eb2d3
 101ada4:	f8bad333 	.word	0xf8bad333
 101ada8:	1c4e3030 	.word	0x1c4e3030
 101adac:	0603f006 	.word	0x0603f006
 101adb0:	f0010889 	.word	0xf0010889
 101adb4:	b2d20101 	.word	0xb2d20101
 101adb8:	1025f88a 	.word	0x1025f88a
 101adbc:	f306fb13 	.word	0xf306fb13
 101adc0:	302cf8aa 	.word	0x302cf8aa
 101adc4:	0cdb041b 	.word	0x0cdb041b
 101adc8:	f302fb13 	.word	0xf302fb13
 101adcc:	041bb114 	.word	0x041bb114
 101add0:	e0030cdb 	.word	0xe0030cdb
 101add4:	bf1c000c 	.word	0xbf1c000c
 101add8:	0c5b041b 	.word	0x0c5b041b
 101addc:	f5b3b29b 	.word	0xf5b3b29b
 101ade0:	da147f09 	.word	0xda147f09
 101ade4:	1bdbb21b 	.word	0x1bdbb21b
 101ade8:	1e5bb101 	.word	0x1e5bb101
 101adec:	2901b219 	.word	0x2901b219
 101adf0:	f89adb0d 	.word	0xf89adb0d
 101adf4:	f8aa1027 	.word	0xf8aa1027
 101adf8:	1859302a 	.word	0x1859302a
 101adfc:	f89ae002 	.word	0xf89ae002
 101ae00:	1bc91027 	.word	0x1bc91027
 101ae04:	1e4bb209 	.word	0x1e4bb209
 101ae08:	7ffff5b3 	.word	0x7ffff5b3
 101ae0c:	2104d906 	.word	0x2104d906
 101ae10:	f88a2000 	.word	0xf88a2000
 101ae14:	b0011024 	.word	0xb0011024
 101ae18:	8ff0e8bd 	.word	0x8ff0e8bd
 101ae1c:	1010f8aa 	.word	0x1010f8aa
 101ae20:	f88ab001 	.word	0xf88ab001
 101ae24:	e8bd2021 	.word	0xe8bd2021
 101ae28:	21038ff0 	.word	0x21038ff0
 101ae2c:	f88ab001 	.word	0xf88ab001
 101ae30:	e8bd1024 	.word	0xe8bd1024
 101ae34:	20008ff0 	.word	0x20008ff0
 101ae38:	f88ab001 	.word	0xf88ab001
 101ae3c:	e8bd0024 	.word	0xe8bd0024
 101ae40:	e92d8ff0 	.word	0xe92d8ff0
 101ae44:	f8df43f0 	.word	0xf8df43f0
 101ae48:	b091455c 	.word	0xb091455c
 101ae4c:	8de04607 	.word	0x8de04607
 101ae50:	f8ad9703 	.word	0xf8ad9703
 101ae54:	20000010 	.word	0x20000010
 101ae58:	0012f88d 	.word	0x0012f88d
 101ae5c:	f7f9a803 	.word	0xf7f9a803
 101ae60:	6c60f917 	.word	0x6c60f917
 101ae64:	f6008de2 	.word	0xf6008de2
 101ae68:	4638014c 	.word	0x4638014c
 101ae6c:	fa2ef7f9 	.word	0xfa2ef7f9
 101ae70:	97086c60 	.word	0x97086c60
 101ae74:	8de09009 	.word	0x8de09009
 101ae78:	002cf8ad 	.word	0x002cf8ad
 101ae7c:	f8ad8e60 	.word	0xf8ad8e60
 101ae80:	f894002e 	.word	0xf894002e
 101ae84:	f88d0028 	.word	0xf88d0028
 101ae88:	20000034 	.word	0x20000034
 101ae8c:	0032f88d 	.word	0x0032f88d
 101ae90:	f002a808 	.word	0xf002a808
 101ae94:	6c60fd29 	.word	0x6c60fd29
 101ae98:	f6008de2 	.word	0xf6008de2
 101ae9c:	4638014c 	.word	0x4638014c
 101aea0:	fcaaf003 	.word	0xfcaaf003
 101aea4:	b9257ce5 	.word	0xb9257ce5
 101aea8:	f88d2003 	.word	0xf88d2003
 101aeac:	20000009 	.word	0x20000009
 101aeb0:	200be004 	.word	0x200be004
 101aeb4:	0009f88d 	.word	0x0009f88d
 101aeb8:	0022f894 	.word	0x0022f894
 101aebc:	0008f88d 	.word	0x0008f88d
 101aec0:	f44f6c60 	.word	0xf44f6c60
 101aec4:	440861f0 	.word	0x440861f0
 101aec8:	6d209000 	.word	0x6d209000
 101aecc:	46689001 	.word	0x46689001
 101aed0:	f88af7f9 	.word	0xf88af7f9
 101aed4:	0022f894 	.word	0x0022f894
 101aed8:	2d001c40 	.word	0x2d001c40
 101aedc:	0022f884 	.word	0x0022f884
 101aee0:	bf0cb2c0 	.word	0xbf0cb2c0
 101aee4:	26042602 	.word	0x26042602
 101aee8:	bf0842b0 	.word	0xbf0842b0
 101aeec:	0801f04f 	.word	0x0801f04f
 101aef0:	f04fd002 	.word	0xf04fd002
 101aef4:	b9b50800 	.word	0xb9b50800
 101aef8:	6ce18e62 	.word	0x6ce18e62
 101aefc:	23036d20 	.word	0x23036d20
 101af00:	ffe4f7f8 	.word	0xffe4f7f8
 101af04:	6ce06d61 	.word	0x6ce06d61
 101af08:	f0044642 	.word	0xf0044642
 101af0c:	f1b8f83d 	.word	0xf1b8f83d
 101af10:	d10f0f00 	.word	0xd10f0f00
 101af14:	f894b93d 	.word	0xf894b93d
 101af18:	8e623022 	.word	0x8e623022
 101af1c:	6ce06de1 	.word	0x6ce06de1
 101af20:	fa32f002 	.word	0xfa32f002
 101af24:	f894e006 	.word	0xf894e006
 101af28:	8e623022 	.word	0x8e623022
 101af2c:	6d206e21 	.word	0x6d206e21
 101af30:	f9e4f002 	.word	0xf9e4f002
 101af34:	970e6c60 	.word	0x970e6c60
 101af38:	004cf600 	.word	0x004cf600
 101af3c:	f894900f 	.word	0xf894900f
 101af40:	f88d0028 	.word	0xf88d0028
 101af44:	a80e0040 	.word	0xa80e0040
 101af48:	fa60f002 	.word	0xfa60f002
 101af4c:	0f00f1b8 	.word	0x0f00f1b8
 101af50:	8152f000 	.word	0x8152f000
 101af54:	f0038de0 	.word	0xf0038de0
 101af58:	4607fcfd 	.word	0x4607fcfd
 101af5c:	faf8f002 	.word	0xfaf8f002
 101af60:	f7ff4638 	.word	0xf7ff4638
 101af64:	6d60faed 	.word	0x6d60faed
 101af68:	f7ff4629 	.word	0xf7ff4629
 101af6c:	0001fdd5 	.word	0x0001fdd5
 101af70:	8096f040 	.word	0x8096f040
 101af74:	1028f894 	.word	0x1028f894
 101af78:	46328de0 	.word	0x46328de0
 101af7c:	fee6f003 	.word	0xfee6f003
 101af80:	f88d6ca1 	.word	0xf88d6ca1
 101af84:	f44f0031 	.word	0xf44f0031
 101af88:	20016242 	.word	0x20016242
 101af8c:	0032f88d 	.word	0x0032f88d
 101af90:	440aa808 	.word	0x440aa808
 101af94:	9208910a 	.word	0x9208910a
 101af98:	6030f88d 	.word	0x6030f88d
 101af9c:	fca4f002 	.word	0xfca4f002
 101afa0:	4668bb4d 	.word	0x4668bb4d
 101afa4:	f820f7f9 	.word	0xf820f7f9
 101afa8:	ffb4f7f8 	.word	0xffb4f7f8
 101afac:	6ce18e62 	.word	0x6ce18e62
 101afb0:	23036d20 	.word	0x23036d20
 101afb4:	ff8af7f8 	.word	0xff8af7f8
 101afb8:	22008e60 	.word	0x22008e60
 101afbc:	f0042102 	.word	0xf0042102
 101afc0:	6d61f807 	.word	0x6d61f807
 101afc4:	22006ce0 	.word	0x22006ce0
 101afc8:	ffdef003 	.word	0xffdef003
 101afcc:	6de18e62 	.word	0x6de18e62
 101afd0:	23016ce0 	.word	0x23016ce0
 101afd4:	f9d8f002 	.word	0xf9d8f002
 101afd8:	8e619800 	.word	0x8e619800
 101afdc:	0051eb00 	.word	0x0051eb00
 101afe0:	46689000 	.word	0x46689000
 101afe4:	f800f7f9 	.word	0xf800f7f9
 101afe8:	6ce18e62 	.word	0x6ce18e62
 101afec:	23036d20 	.word	0x23036d20
 101aff0:	ff6cf7f8 	.word	0xff6cf7f8
 101aff4:	2000e04b 	.word	0x2000e04b
 101aff8:	0008f88d 	.word	0x0008f88d
 101affc:	f7f84668 	.word	0xf7f84668
 101b000:	8e62fff3 	.word	0x8e62fff3
 101b004:	6d206e21 	.word	0x6d206e21
 101b008:	f0022301 	.word	0xf0022301
 101b00c:	9800f977 	.word	0x9800f977
 101b010:	eb008e61 	.word	0xeb008e61
 101b014:	90000051 	.word	0x90000051
 101b018:	0008f89d 	.word	0x0008f89d
 101b01c:	f88d1c40 	.word	0xf88d1c40
 101b020:	46680008 	.word	0x46680008
 101b024:	ffe0f7f8 	.word	0xffe0f7f8
 101b028:	6e218e62 	.word	0x6e218e62
 101b02c:	23026d20 	.word	0x23026d20
 101b030:	f964f002 	.word	0xf964f002
 101b034:	8e619800 	.word	0x8e619800
 101b038:	0051eb00 	.word	0x0051eb00
 101b03c:	f89d9000 	.word	0xf89d9000
 101b040:	1c400008 	.word	0x1c400008
 101b044:	0008f88d 	.word	0x0008f88d
 101b048:	f7f84668 	.word	0xf7f84668
 101b04c:	8e62ffcd 	.word	0x8e62ffcd
 101b050:	6d206e21 	.word	0x6d206e21
 101b054:	f0022303 	.word	0xf0022303
 101b058:	9800f951 	.word	0x9800f951
 101b05c:	eb008e61 	.word	0xeb008e61
 101b060:	90000051 	.word	0x90000051
 101b064:	0008f89d 	.word	0x0008f89d
 101b068:	f88d1c40 	.word	0xf88d1c40
 101b06c:	46680008 	.word	0x46680008
 101b070:	ffbaf7f8 	.word	0xffbaf7f8
 101b074:	ff4ef7f8 	.word	0xff4ef7f8
 101b078:	6ce18e62 	.word	0x6ce18e62
 101b07c:	23036d20 	.word	0x23036d20
 101b080:	ff24f7f8 	.word	0xff24f7f8
 101b084:	22018e60 	.word	0x22018e60
 101b088:	f0032101 	.word	0xf0032101
 101b08c:	6d61ffa1 	.word	0x6d61ffa1
 101b090:	22016ce0 	.word	0x22016ce0
 101b094:	ff78f003 	.word	0xff78f003
 101b098:	46296d60 	.word	0x46296d60
 101b09c:	fd3cf7ff 	.word	0xfd3cf7ff
 101b0a0:	1029f894 	.word	0x1029f894
 101b0a4:	0101f081 	.word	0x0101f081
 101b0a8:	f0004208 	.word	0xf0004208
 101b0ac:	f8948092 	.word	0xf8948092
 101b0b0:	b9200025 	.word	0xb9200025
 101b0b4:	680148c4 	.word	0x680148c4
 101b0b8:	0101f041 	.word	0x0101f041
 101b0bc:	00286001 	.word	0x00286001
 101b0c0:	f7f8d106 	.word	0xf7f8d106
 101b0c4:	2602fe31 	.word	0x2602fe31
 101b0c8:	46b04681 	.word	0x46b04681
 101b0cc:	e0042703 	.word	0xe0042703
 101b0d0:	fe3ef7f8 	.word	0xfe3ef7f8
 101b0d4:	26044681 	.word	0x26044681
 101b0d8:	f109270b 	.word	0xf109270b
 101b0dc:	05420007 	.word	0x05420007
 101b0e0:	6d606de1 	.word	0x6d606de1
 101b0e4:	f7f80e12 	.word	0xf7f80e12
 101b0e8:	6e21ff57 	.word	0x6e21ff57
 101b0ec:	ea4f6de0 	.word	0xea4f6de0
 101b0f0:	23000249 	.word	0x23000249
 101b0f4:	f7f8b292 	.word	0xf7f8b292
 101b0f8:	6e20fee9 	.word	0x6e20fee9
 101b0fc:	801ef88d 	.word	0x801ef88d
 101b100:	6e609005 	.word	0x6e609005
 101b104:	a8059006 	.word	0xa8059006
 101b108:	701df88d 	.word	0x701df88d
 101b10c:	ff5cf7f8 	.word	0xff5cf7f8
 101b110:	fb93f003 	.word	0xfb93f003
 101b114:	f8944601 	.word	0xf8944601
 101b118:	6e603028 	.word	0x6e603028
 101b11c:	f7f84632 	.word	0xf7f84632
 101b120:	7ca2ff99 	.word	0x7ca2ff99
 101b124:	1028f894 	.word	0x1028f894
 101b128:	f0038de0 	.word	0xf0038de0
 101b12c:	4606fc39 	.word	0x4606fc39
 101b130:	b9358e62 	.word	0xb9358e62
 101b134:	6ce06de1 	.word	0x6ce06de1
 101b138:	f0022302 	.word	0xf0022302
 101b13c:	2002f925 	.word	0x2002f925
 101b140:	6e21e005 	.word	0x6e21e005
 101b144:	23046d20 	.word	0x23046d20
 101b148:	f8d8f002 	.word	0xf8d8f002
 101b14c:	f8942004 	.word	0xf8942004
 101b150:	1b801021 	.word	0x1b801021
 101b154:	000886a0 	.word	0x000886a0
 101b158:	f894d02d 	.word	0xf894d02d
 101b15c:	20002026 	.word	0x20002026
 101b160:	0020f884 	.word	0x0020f884
 101b164:	8da00010 	.word	0x8da00010
 101b168:	0889bf18 	.word	0x0889bf18
 101b16c:	ff30f003 	.word	0xff30f003
 101b170:	8e607ce1 	.word	0x8e607ce1
 101b174:	0040b901 	.word	0x0040b901
 101b178:	1025f894 	.word	0x1025f894
 101b17c:	b280b919 	.word	0xb280b919
 101b180:	feccf7f8 	.word	0xfeccf7f8
 101b184:	f894e005 	.word	0xf894e005
 101b188:	b2812026 	.word	0xb2812026
 101b18c:	f0026d60 	.word	0xf0026d60
 101b190:	4630f91e 	.word	0x4630f91e
 101b194:	fc74f002 	.word	0xfc74f002
 101b198:	f8842003 	.word	0xf8842003
 101b19c:	f8940023 	.word	0xf8940023
 101b1a0:	28010021 	.word	0x28010021
 101b1a4:	f7febf08 	.word	0xf7febf08
 101b1a8:	7ca0ff20 	.word	0x7ca0ff20
 101b1ac:	f8e0f7ff 	.word	0xf8e0f7ff
 101b1b0:	e8bdb011 	.word	0xe8bdb011
 101b1b4:	f7fe83f0 	.word	0xf7fe83f0
 101b1b8:	f7feff1e 	.word	0xf7feff1e
 101b1bc:	8a21ff51 	.word	0x8a21ff51
 101b1c0:	f1046ba2 	.word	0xf1046ba2
 101b1c4:	4790006c 	.word	0x4790006c
 101b1c8:	f9e8f7ff 	.word	0xf9e8f7ff
 101b1cc:	e8bdb011 	.word	0xe8bdb011
 101b1d0:	f7fe83f0 	.word	0xf7fe83f0
 101b1d4:	f7feff10 	.word	0xf7feff10
 101b1d8:	487cff43 	.word	0x487cff43
 101b1dc:	fa39f7fc 	.word	0xfa39f7fc
 101b1e0:	0024f894 	.word	0x0024f894
 101b1e4:	bf1c2801 	.word	0xbf1c2801
 101b1e8:	47886c21 	.word	0x47886c21
 101b1ec:	b0112001 	.word	0xb0112001
 101b1f0:	0023f884 	.word	0x0023f884
 101b1f4:	83f0e8bd 	.word	0x83f0e8bd
 101b1f8:	0022f894 	.word	0x0022f894
 101b1fc:	42b01c40 	.word	0x42b01c40
 101b200:	f7ffbf08 	.word	0xf7ffbf08
 101b204:	b011f806 	.word	0xb011f806
 101b208:	83f0e8bd 	.word	0x83f0e8bd
 101b20c:	f8914965 	.word	0xf8914965
 101b210:	29021023 	.word	0x29021023
 101b214:	2903d002 	.word	0x2903d002
 101b218:	4770d001 	.word	0x4770d001
 101b21c:	f7ffe611 	.word	0xf7ffe611
 101b220:	b570bbb7 	.word	0xb570bbb7
 101b224:	46154c5f 	.word	0x46154c5f
 101b228:	f89465a0 	.word	0xf89465a0
 101b22c:	b1380029 	.word	0xb1380029
 101b230:	d1052d02 	.word	0xd1052d02
 101b234:	25032000 	.word	0x25032000
 101b238:	51ccf5a1 	.word	0x51ccf5a1
 101b23c:	0029f884 	.word	0x0029f884
 101b240:	210160a1 	.word	0x210160a1
 101b244:	462874e5 	.word	0x462874e5
 101b248:	ff58f7f8 	.word	0xff58f7f8
 101b24c:	2502b925 	.word	0x2502b925
 101b250:	f7f82600 	.word	0xf7f82600
 101b254:	e003fd52 	.word	0xe003fd52
 101b258:	26012501 	.word	0x26012501
 101b25c:	fd59f7f8 	.word	0xfd59f7f8
 101b260:	0027f884 	.word	0x0027f884
 101b264:	fd34f7f8 	.word	0xfd34f7f8
 101b268:	46328660 	.word	0x46328660
 101b26c:	f0034629 	.word	0xf0034629
 101b270:	f7f8feaf 	.word	0xf7f8feaf
 101b274:	f884fd36 	.word	0xf884fd36
 101b278:	f7f80028 	.word	0xf7f80028
 101b27c:	85e0fd26 	.word	0x85e0fd26
 101b280:	fd29f7f8 	.word	0xfd29f7f8
 101b284:	20008620 	.word	0x20008620
 101b288:	0022f884 	.word	0x0022f884
 101b28c:	f987f002 	.word	0xf987f002
 101b290:	fe93f7f8 	.word	0xfe93f7f8
 101b294:	fe3ef7f8 	.word	0xfe3ef7f8
 101b298:	faa7f003 	.word	0xfaa7f003
 101b29c:	f8842002 	.word	0xf8842002
 101b2a0:	bd700023 	.word	0xbd700023
 101b2a4:	2006493f 	.word	0x2006493f
 101b2a8:	6c09b500 	.word	0x6c09b500
 101b2ac:	4788b081 	.word	0x4788b081
 101b2b0:	f44fb001 	.word	0xf44fb001
 101b2b4:	f85d200c 	.word	0xf85d200c
 101b2b8:	f7fceb04 	.word	0xf7fceb04
 101b2bc:	4839b9ca 	.word	0x4839b9ca
 101b2c0:	0021f890 	.word	0x0021f890
 101b2c4:	b5104770 	.word	0xb5104770
 101b2c8:	ff9ef7fe 	.word	0xff9ef7fe
 101b2cc:	f92af7ff 	.word	0xf92af7ff
 101b2d0:	4c34b950 	.word	0x4c34b950
 101b2d4:	f8842001 	.word	0xf8842001
 101b2d8:	f7fe0023 	.word	0xf7fe0023
 101b2dc:	6ea0fec1 	.word	0x6ea0fec1
 101b2e0:	4010e8bd 	.word	0x4010e8bd
 101b2e4:	b9b5f7fc 	.word	0xb9b5f7fc
 101b2e8:	2000bd10 	.word	0x2000bd10
 101b2ec:	4c2db510 	.word	0x4c2db510
 101b2f0:	f884b084 	.word	0xf884b084
 101b2f4:	f1040023 	.word	0xf1040023
 101b2f8:	61e0006c 	.word	0x61e0006c
 101b2fc:	f8842000 	.word	0xf8842000
 101b300:	f6400029 	.word	0xf6400029
 101b304:	66a030b8 	.word	0x66a030b8
 101b308:	f7f8200b 	.word	0xf7f8200b
 101b30c:	6460ff95 	.word	0x6460ff95
 101b310:	f7f8200c 	.word	0xf7f8200c
 101b314:	64e0ff91 	.word	0x64e0ff91
 101b318:	f7f82011 	.word	0xf7f82011
 101b31c:	6520ff8d 	.word	0x6520ff8d
 101b320:	f7f82012 	.word	0xf7f82012
 101b324:	6560ff89 	.word	0x6560ff89
 101b328:	f7f8200d 	.word	0xf7f8200d
 101b32c:	65e0ff85 	.word	0x65e0ff85
 101b330:	f7f8200e 	.word	0xf7f8200e
 101b334:	6620ff81 	.word	0x6620ff81
 101b338:	f7f8200f 	.word	0xf7f8200f
 101b33c:	6660ff7d 	.word	0x6660ff7d
 101b340:	f7f82013 	.word	0xf7f82013
 101b344:	64a0ff79 	.word	0x64a0ff79
 101b348:	f840f7ff 	.word	0xf840f7ff
 101b34c:	f7ff4820 	.word	0xf7ff4820
 101b350:	4820f903 	.word	0x4820f903
 101b354:	f8fbf7ff 	.word	0xf8fbf7ff
 101b358:	f7ff481f 	.word	0xf7ff481f
 101b35c:	2015f900 	.word	0x2015f900
 101b360:	ff6af7f8 	.word	0xff6af7f8
 101b364:	f1009003 	.word	0xf1009003
 101b368:	304001c0 	.word	0x304001c0
 101b36c:	90019102 	.word	0x90019102
 101b370:	f7f82009 	.word	0xf7f82009
 101b374:	9000ff61 	.word	0x9000ff61
 101b378:	f0034668 	.word	0xf0034668
 101b37c:	f7fcfe64 	.word	0xf7fcfe64
 101b380:	f003f8b9 	.word	0xf003f8b9
 101b384:	f002fa28 	.word	0xf002fa28
 101b388:	b004f835 	.word	0xb004f835
 101b38c:	4770bd10 	.word	0x4770bd10
 101b390:	31b9f640 	.word	0x31b9f640
 101b394:	49034288 	.word	0x49034288
 101b398:	f640bf38 	.word	0xf640bf38
 101b39c:	668830b8 	.word	0x668830b8
 101b3a0:	00004770 	.word	0x00004770
 101b3a4:	20012dac 	.word	0x20012dac
 101b3a8:	6e80480c 	.word	0x6e80480c
 101b3ac:	490b4770 	.word	0x490b4770
 101b3b0:	47706388 	.word	0x47706388
 101b3b4:	63c84909 	.word	0x63c84909
 101b3b8:	49084770 	.word	0x49084770
 101b3bc:	47706408 	.word	0x47706408
 101b3c0:	b8d0f7ff 	.word	0xb8d0f7ff
 101b3c4:	a2f96525 	.word	0xa2f96525
 101b3c8:	40000010 	.word	0x40000010
 101b3cc:	00089d00 	.word	0x00089d00
 101b3d0:	0000980d 	.word	0x0000980d
 101b3d4:	00009823 	.word	0x00009823
 101b3d8:	000098a5 	.word	0x000098a5
 101b3dc:	20012dac 	.word	0x20012dac
 101b3e0:	4957b510 	.word	0x4957b510
 101b3e4:	68084c57 	.word	0x68084c57
 101b3e8:	7da26849 	.word	0x7da26849
 101b3ec:	2200b12a 	.word	0x2200b12a
 101b3f0:	1a0a75a2 	.word	0x1a0a75a2
 101b3f4:	0262eb00 	.word	0x0262eb00
 101b3f8:	46226022 	.word	0x46226022
 101b3fc:	fe34f003 	.word	0xfe34f003
 101b400:	38fe8b21 	.word	0x38fe8b21
 101b404:	61e01a40 	.word	0x61e01a40
 101b408:	b470bd10 	.word	0xb470bd10
 101b40c:	4a4f484e 	.word	0x4a4f484e
 101b410:	23606801 	.word	0x23606801
 101b414:	0b496113 	.word	0x0b496113
 101b418:	0101f001 	.word	0x0101f001
 101b41c:	f0136893 	.word	0xf0136893
 101b420:	d1fb0f60 	.word	0xd1fb0f60
 101b424:	5300f44f 	.word	0x5300f44f
 101b428:	3080f8c0 	.word	0x3080f8c0
 101b42c:	3180f8c0 	.word	0x3180f8c0
 101b430:	4100f8d0 	.word	0x4100f8d0
 101b434:	3440f3c4 	.word	0x3440f3c4
 101b438:	6814b304 	.word	0x6814b304
 101b43c:	3180f8c0 	.word	0x3180f8c0
 101b440:	4100f8d0 	.word	0x4100f8d0
 101b444:	3440f3c4 	.word	0x3440f3c4
 101b448:	6814b1c4 	.word	0x6814b1c4
 101b44c:	3180f8c0 	.word	0x3180f8c0
 101b450:	4100f8d0 	.word	0x4100f8d0
 101b454:	3440f3c4 	.word	0x3440f3c4
 101b458:	6814b184 	.word	0x6814b184
 101b45c:	3180f8c0 	.word	0x3180f8c0
 101b460:	4100f8d0 	.word	0x4100f8d0
 101b464:	3440f3c4 	.word	0x3440f3c4
 101b468:	6814b144 	.word	0x6814b144
 101b46c:	3180f8c0 	.word	0x3180f8c0
 101b470:	4100f8d0 	.word	0x4100f8d0
 101b474:	3440f3c4 	.word	0x3440f3c4
 101b478:	d1de2c00 	.word	0xd1de2c00
 101b47c:	25014c31 	.word	0x25014c31
 101b480:	250075a5 	.word	0x250075a5
 101b484:	60657d26 	.word	0x60657d26
 101b488:	fb954d31 	.word	0xfb954d31
 101b48c:	8225f5f6 	.word	0x8225f5f6
 101b490:	2c007d64 	.word	0x2c007d64
 101b494:	2420bf0c 	.word	0x2420bf0c
 101b498:	60d42440 	.word	0x60d42440
 101b49c:	6003b101 	.word	0x6003b101
 101b4a0:	4770bc70 	.word	0x4770bc70
 101b4a4:	21b04827 	.word	0x21b04827
 101b4a8:	8301b500 	.word	0x8301b500
 101b4ac:	75012132 	.word	0x75012132
 101b4b0:	75412101 	.word	0x75412101
 101b4b4:	60c12100 	.word	0x60c12100
 101b4b8:	414af640 	.word	0x414af640
 101b4bc:	21838101 	.word	0x21838101
 101b4c0:	8141b081 	.word	0x8141b081
 101b4c4:	f86ff7fa 	.word	0xf86ff7fa
 101b4c8:	23004a22 	.word	0x23004a22
 101b4cc:	2102fba0 	.word	0x2102fba0
 101b4d0:	1e400cc8 	.word	0x1e400cc8
 101b4d4:	4920b2c0 	.word	0x4920b2c0
 101b4d8:	49204308 	.word	0x49204308
 101b4dc:	f44f6008 	.word	0xf44f6008
 101b4e0:	f04f5280 	.word	0xf04f5280
 101b4e4:	481e5120 	.word	0x481e5120
 101b4e8:	f92df001 	.word	0xf92df001
 101b4ec:	f003481d 	.word	0xf003481d
 101b4f0:	b001fdeb 	.word	0xb001fdeb
 101b4f4:	eb04f85d 	.word	0xeb04f85d
 101b4f8:	4812e787 	.word	0x4812e787
 101b4fc:	477069c0 	.word	0x477069c0
 101b500:	68c04810 	.word	0x68c04810
 101b504:	490f4770 	.word	0x490f4770
 101b508:	42827d4a 	.word	0x42827d4a
 101b50c:	7548bf1c 	.word	0x7548bf1c
 101b510:	bf7bf7ff 	.word	0xbf7bf7ff
 101b514:	480b4770 	.word	0x480b4770
 101b518:	47707d40 	.word	0x47707d40
 101b51c:	7d0a4909 	.word	0x7d0a4909
 101b520:	bf1c4282 	.word	0xbf1c4282
 101b524:	f7ff7508 	.word	0xf7ff7508
 101b528:	4770bf70 	.word	0x4770bf70
 101b52c:	7d004805 	.word	0x7d004805
 101b530:	49044770 	.word	0x49044770
 101b534:	47708308 	.word	0x47708308
 101b538:	8b004802 	.word	0x8b004802
 101b53c:	00004770 	.word	0x00004770
 101b540:	400000d0 	.word	0x400000d0
 101b544:	200131d4 	.word	0x200131d4
 101b548:	e000e100 	.word	0xe000e100
 101b54c:	400000a4 	.word	0x400000a4
 101b550:	000f4240 	.word	0x000f4240
 101b554:	8637bd06 	.word	0x8637bd06
 101b558:	fefe0000 	.word	0xfefe0000
 101b55c:	400000cc 	.word	0x400000cc
 101b560:	400e0400 	.word	0x400e0400
 101b564:	000099e1 	.word	0x000099e1
 101b568:	41f0e92d 	.word	0x41f0e92d
 101b56c:	283c2500 	.word	0x283c2500
 101b570:	4607b082 	.word	0x4607b082
 101b574:	4616460c 	.word	0x4616460c
 101b578:	8207f200 	.word	0x8207f200
 101b57c:	f010e8df 	.word	0xf010e8df
 101b580:	0040003d 	.word	0x0040003d
 101b584:	00490046 	.word	0x00490046
 101b588:	005b0054 	.word	0x005b0054
 101b58c:	00690062 	.word	0x00690062
 101b590:	00770070 	.word	0x00770070
 101b594:	00a600a6 	.word	0x00a600a6
 101b598:	00b400b4 	.word	0x00b400b4
 101b59c:	00db00b4 	.word	0x00db00b4
 101b5a0:	00db00db 	.word	0x00db00db
 101b5a4:	00f100f1 	.word	0x00f100f1
 101b5a8:	010600f1 	.word	0x010600f1
 101b5ac:	0098007e 	.word	0x0098007e
 101b5b0:	0110009f 	.word	0x0110009f
 101b5b4:	011e0117 	.word	0x011e0117
 101b5b8:	01440125 	.word	0x01440125
 101b5bc:	0136012c 	.word	0x0136012c
 101b5c0:	014c013d 	.word	0x014c013d
 101b5c4:	015a0153 	.word	0x015a0153
 101b5c8:	01680161 	.word	0x01680161
 101b5cc:	0174016d 	.word	0x0174016d
 101b5d0:	01800179 	.word	0x01800179
 101b5d4:	0190018c 	.word	0x0190018c
 101b5d8:	019b0195 	.word	0x019b0195
 101b5dc:	01a701a1 	.word	0x01a701a1
 101b5e0:	01b301ad 	.word	0x01b301ad
 101b5e4:	01bf01b9 	.word	0x01bf01b9
 101b5e8:	01cb01c5 	.word	0x01cb01c5
 101b5ec:	01d701d1 	.word	0x01d701d1
 101b5f0:	018701dd 	.word	0x018701dd
 101b5f4:	01f701e9 	.word	0x01f701e9
 101b5f8:	f60f01fe 	.word	0xf60f01fe
 101b5fc:	e1a12144 	.word	0xe1a12144
 101b600:	6001f243 	.word	0x6001f243
 101b604:	f8ada901 	.word	0xf8ada901
 101b608:	e0060004 	.word	0xe0060004
 101b60c:	213cf60f 	.word	0x213cf60f
 101b610:	f8dfe198 	.word	0xf8dfe198
 101b614:	46690968 	.word	0x46690968
 101b618:	46209000 	.word	0x46209000
 101b61c:	fc1af7f8 	.word	0xfc1af7f8
 101b620:	b0024628 	.word	0xb0024628
 101b624:	81f0e8bd 	.word	0x81f0e8bd
 101b628:	fa2cf7f8 	.word	0xfa2cf7f8
 101b62c:	46287020 	.word	0x46287020
 101b630:	e8bdb002 	.word	0xe8bdb002
 101b634:	f7f981f0 	.word	0xf7f981f0
 101b638:	7020fa01 	.word	0x7020fa01
 101b63c:	b0024628 	.word	0xb0024628
 101b640:	81f0e8bd 	.word	0x81f0e8bd
 101b644:	ff59f7ff 	.word	0xff59f7ff
 101b648:	46286020 	.word	0x46286020
 101b64c:	e8bdb002 	.word	0xe8bdb002
 101b650:	f7ff81f0 	.word	0xf7ff81f0
 101b654:	7020fe34 	.word	0x7020fe34
 101b658:	b0024628 	.word	0xb0024628
 101b65c:	81f0e8bd 	.word	0x81f0e8bd
 101b660:	fc27f7f7 	.word	0xfc27f7f7
 101b664:	46287020 	.word	0x46287020
 101b668:	e8bdb002 	.word	0xe8bdb002
 101b66c:	f7fa81f0 	.word	0xf7fa81f0
 101b670:	7020f8cc 	.word	0x7020f8cc
 101b674:	b0024628 	.word	0xb0024628
 101b678:	81f0e8bd 	.word	0x81f0e8bd
 101b67c:	fb2ef7f8 	.word	0xfb2ef7f8
 101b680:	07c22108 	.word	0x07c22108
 101b684:	0840d40f 	.word	0x0840d40f
 101b688:	07c21e49 	.word	0x07c21e49
 101b68c:	0840d40b 	.word	0x0840d40b
 101b690:	07c21e49 	.word	0x07c21e49
 101b694:	0840d407 	.word	0x0840d407
 101b698:	07c21e49 	.word	0x07c21e49
 101b69c:	0840d403 	.word	0x0840d403
 101b6a0:	07c21e49 	.word	0x07c21e49
 101b6a4:	7021d5ef 	.word	0x7021d5ef
 101b6a8:	b0024628 	.word	0xb0024628
 101b6ac:	81f0e8bd 	.word	0x81f0e8bd
 101b6b0:	fe57f7f9 	.word	0xfe57f7f9
 101b6b4:	46287020 	.word	0x46287020
 101b6b8:	e8bdb002 	.word	0xe8bdb002
 101b6bc:	f7f981f0 	.word	0xf7f981f0
 101b6c0:	6020f9c0 	.word	0x6020f9c0
 101b6c4:	b0024628 	.word	0xb0024628
 101b6c8:	81f0e8bd 	.word	0x81f0e8bd
 101b6cc:	fe49f7f9 	.word	0xfe49f7f9
 101b6d0:	0f80ebb6 	.word	0x0f80ebb6
 101b6d4:	815df040 	.word	0x815df040
 101b6d8:	fe41f7f9 	.word	0xfe41f7f9
 101b6dc:	2f0a4601 	.word	0x2f0a4601
 101b6e0:	bf184632 	.word	0xbf184632
 101b6e4:	e12d3120 	.word	0xe12d3120
 101b6e8:	fe3bf7f9 	.word	0xfe3bf7f9
 101b6ec:	0fc0ebb6 	.word	0x0fc0ebb6
 101b6f0:	814ff040 	.word	0x814ff040
 101b6f4:	fe33f7f9 	.word	0xfe33f7f9
 101b6f8:	2f0c4680 	.word	0x2f0c4680
 101b6fc:	f108bf08 	.word	0xf108bf08
 101b700:	d0050140 	.word	0xd0050140
 101b704:	bf0c2f0d 	.word	0xbf0c2f0d
 101b708:	0180f108 	.word	0x0180f108
 101b70c:	01c0f108 	.word	0x01c0f108
 101b710:	46200872 	.word	0x46200872
 101b714:	fb9ef7f8 	.word	0xfb9ef7f8
 101b718:	eb042f0c 	.word	0xeb042f0c
 101b71c:	bf080056 	.word	0xbf080056
 101b720:	0160f108 	.word	0x0160f108
 101b724:	2f0dd005 	.word	0x2f0dd005
 101b728:	f108bf0c 	.word	0xf108bf0c
 101b72c:	f10801a0 	.word	0xf10801a0
 101b730:	087201e0 	.word	0x087201e0
 101b734:	f000e107 	.word	0xf000e107
 101b738:	4286fc29 	.word	0x4286fc29
 101b73c:	8129f040 	.word	0x8129f040
 101b740:	fe0df7f9 	.word	0xfe0df7f9
 101b744:	bf082f0f 	.word	0xbf082f0f
 101b748:	71a2f44f 	.word	0x71a2f44f
 101b74c:	2f10d006 	.word	0x2f10d006
 101b750:	f200bf08 	.word	0xf200bf08
 101b754:	d0022106 	.word	0xd0022106
 101b758:	7132f44f 	.word	0x7132f44f
 101b75c:	46324401 	.word	0x46324401
 101b760:	f000e0f0 	.word	0xf000e0f0
 101b764:	4286fc13 	.word	0x4286fc13
 101b768:	8113f040 	.word	0x8113f040
 101b76c:	fdf7f7f9 	.word	0xfdf7f7f9
 101b770:	bf082f12 	.word	0xbf082f12
 101b774:	318af200 	.word	0x318af200
 101b778:	2f13d006 	.word	0x2f13d006
 101b77c:	f44fbf06 	.word	0xf44fbf06
 101b780:	18417164 	.word	0x18417164
 101b784:	3192f200 	.word	0x3192f200
 101b788:	e0db4632 	.word	0xe0db4632
 101b78c:	f0402e44 	.word	0xf0402e44
 101b790:	f7f98100 	.word	0xf7f98100
 101b794:	f44ffde4 	.word	0xf44ffde4
 101b798:	22447180 	.word	0x22447180
 101b79c:	e0d14401 	.word	0xe0d14401
 101b7a0:	f949f7f9 	.word	0xf949f7f9
 101b7a4:	46288020 	.word	0x46288020
 101b7a8:	e8bdb002 	.word	0xe8bdb002
 101b7ac:	f7ff81f0 	.word	0xf7ff81f0
 101b7b0:	7020feb2 	.word	0x7020feb2
 101b7b4:	b0024628 	.word	0xb0024628
 101b7b8:	81f0e8bd 	.word	0x81f0e8bd
 101b7bc:	feb6f7ff 	.word	0xfeb6f7ff
 101b7c0:	46287020 	.word	0x46287020
 101b7c4:	e8bdb002 	.word	0xe8bdb002
 101b7c8:	f7ff81f0 	.word	0xf7ff81f0
 101b7cc:	8020feb5 	.word	0x8020feb5
 101b7d0:	b0024628 	.word	0xb0024628
 101b7d4:	81f0e8bd 	.word	0x81f0e8bd
 101b7d8:	f8ddf7fc 	.word	0xf8ddf7fc
 101b7dc:	f7fc8020 	.word	0xf7fc8020
 101b7e0:	70a0f8d1 	.word	0x70a0f8d1
 101b7e4:	b0024628 	.word	0xb0024628
 101b7e8:	81f0e8bd 	.word	0x81f0e8bd
 101b7ec:	f8d7f7fc 	.word	0xf8d7f7fc
 101b7f0:	46288020 	.word	0x46288020
 101b7f4:	e8bdb002 	.word	0xe8bdb002
 101b7f8:	462081f0 	.word	0x462081f0
 101b7fc:	f8dcf7fc 	.word	0xf8dcf7fc
 101b800:	b0024628 	.word	0xb0024628
 101b804:	81f0e8bd 	.word	0x81f0e8bd
 101b808:	46204631 	.word	0x46204631
 101b80c:	fb1ef7f8 	.word	0xfb1ef7f8
 101b810:	b0024628 	.word	0xb0024628
 101b814:	81f0e8bd 	.word	0x81f0e8bd
 101b818:	ff71f7fb 	.word	0xff71f7fb
 101b81c:	46287020 	.word	0x46287020
 101b820:	e8bdb002 	.word	0xe8bdb002
 101b824:	f7fb81f0 	.word	0xf7fb81f0
 101b828:	6020ffe1 	.word	0x6020ffe1
 101b82c:	b0024628 	.word	0xb0024628
 101b830:	81f0e8bd 	.word	0x81f0e8bd
 101b834:	fdb8f7ff 	.word	0xfdb8f7ff
 101b838:	46286020 	.word	0x46286020
 101b83c:	e8bdb002 	.word	0xe8bdb002
 101b840:	f7fb81f0 	.word	0xf7fb81f0
 101b844:	7020ffdb 	.word	0x7020ffdb
 101b848:	b0024628 	.word	0xb0024628
 101b84c:	81f0e8bd 	.word	0x81f0e8bd
 101b850:	ffe4f7fb 	.word	0xffe4f7fb
 101b854:	4601220a 	.word	0x4601220a
 101b858:	f7fbe074 	.word	0xf7fbe074
 101b85c:	8020ffcb 	.word	0x8020ffcb
 101b860:	b0024628 	.word	0xb0024628
 101b864:	81f0e8bd 	.word	0x81f0e8bd
 101b868:	46287025 	.word	0x46287025
 101b86c:	e8bdb002 	.word	0xe8bdb002
 101b870:	f7fb81f0 	.word	0xf7fb81f0
 101b874:	8020ff64 	.word	0x8020ff64
 101b878:	b0024628 	.word	0xb0024628
 101b87c:	81f0e8bd 	.word	0x81f0e8bd
 101b880:	ff91f7fb 	.word	0xff91f7fb
 101b884:	46288020 	.word	0x46288020
 101b888:	e8bdb002 	.word	0xe8bdb002
 101b88c:	f7fb81f0 	.word	0xf7fb81f0
 101b890:	4632ffe3 	.word	0x4632ffe3
 101b894:	e0554601 	.word	0xe0554601
 101b898:	06e4f8df 	.word	0x06e4f8df
 101b89c:	e0516841 	.word	0xe0516841
 101b8a0:	06dcf8df 	.word	0x06dcf8df
 101b8a4:	1d016840 	.word	0x1d016840
 101b8a8:	f8dfe04c 	.word	0xf8dfe04c
 101b8ac:	684006d4 	.word	0x684006d4
 101b8b0:	0108f100 	.word	0x0108f100
 101b8b4:	f8dfe046 	.word	0xf8dfe046
 101b8b8:	684006c8 	.word	0x684006c8
 101b8bc:	010cf100 	.word	0x010cf100
 101b8c0:	f8dfe040 	.word	0xf8dfe040
 101b8c4:	684006bc 	.word	0x684006bc
 101b8c8:	0110f100 	.word	0x0110f100
 101b8cc:	f8dfe03a 	.word	0xf8dfe03a
 101b8d0:	684006b0 	.word	0x684006b0
 101b8d4:	0114f100 	.word	0x0114f100
 101b8d8:	f8dfe034 	.word	0xf8dfe034
 101b8dc:	684006a4 	.word	0x684006a4
 101b8e0:	0118f100 	.word	0x0118f100
 101b8e4:	f8dfe02e 	.word	0xf8dfe02e
 101b8e8:	68400698 	.word	0x68400698
 101b8ec:	011cf100 	.word	0x011cf100
 101b8f0:	f8dfe028 	.word	0xf8dfe028
 101b8f4:	6840068c 	.word	0x6840068c
 101b8f8:	0120f100 	.word	0x0120f100
 101b8fc:	f8dfe022 	.word	0xf8dfe022
 101b900:	68400680 	.word	0x68400680
 101b904:	0124f100 	.word	0x0124f100
 101b908:	f8dfe01c 	.word	0xf8dfe01c
 101b90c:	68400674 	.word	0x68400674
 101b910:	012cf100 	.word	0x012cf100
 101b914:	f8dfe016 	.word	0xf8dfe016
 101b918:	68400668 	.word	0x68400668
 101b91c:	0130f100 	.word	0x0130f100
 101b920:	f8dfe010 	.word	0xf8dfe010
 101b924:	6840065c 	.word	0x6840065c
 101b928:	0134f100 	.word	0x0134f100
 101b92c:	f8dfe00a 	.word	0xf8dfe00a
 101b930:	68400650 	.word	0x68400650
 101b934:	0138f100 	.word	0x0138f100
 101b938:	f8dfe004 	.word	0xf8dfe004
 101b93c:	68400644 	.word	0x68400644
 101b940:	013cf100 	.word	0x013cf100
 101b944:	f7f84620 	.word	0xf7f84620
 101b948:	4628fa85 	.word	0x4628fa85
 101b94c:	e8bdb002 	.word	0xe8bdb002
 101b950:	f8df81f0 	.word	0xf8df81f0
 101b954:	68000630 	.word	0x68000630
 101b958:	7080f400 	.word	0x7080f400
 101b95c:	41801e40 	.word	0x41801e40
 101b960:	0fc043c0 	.word	0x0fc043c0
 101b964:	46287020 	.word	0x46287020
 101b968:	e8bdb002 	.word	0xe8bdb002
 101b96c:	f7ff81f0 	.word	0xf7ff81f0
 101b970:	6020fdc7 	.word	0x6020fdc7
 101b974:	b0024628 	.word	0xb0024628
 101b978:	81f0e8bd 	.word	0x81f0e8bd
 101b97c:	f7fe4620 	.word	0xf7fe4620
 101b980:	4628fd5b 	.word	0x4628fd5b
 101b984:	e8bdb002 	.word	0xe8bdb002
 101b988:	463181f0 	.word	0x463181f0
 101b98c:	f7f84620 	.word	0xf7f84620
 101b990:	2501fa5d 	.word	0x2501fa5d
 101b994:	b0024628 	.word	0xb0024628
 101b998:	81f0e8bd 	.word	0x81f0e8bd
 101b99c:	43f0e92d 	.word	0x43f0e92d
 101b9a0:	283c2400 	.word	0x283c2400
 101b9a4:	4607b081 	.word	0x4607b081
 101b9a8:	4616460d 	.word	0x4616460d
 101b9ac:	82a7f200 	.word	0x82a7f200
 101b9b0:	f010e8df 	.word	0xf010e8df
 101b9b4:	02a002a0 	.word	0x02a002a0
 101b9b8:	02a002a0 	.word	0x02a002a0
 101b9bc:	0056003d 	.word	0x0056003d
 101b9c0:	02a002a0 	.word	0x02a002a0
 101b9c4:	006f02a0 	.word	0x006f02a0
 101b9c8:	00760076 	.word	0x00760076
 101b9cc:	00840084 	.word	0x00840084
 101b9d0:	00ab0084 	.word	0x00ab0084
 101b9d4:	00ab00ab 	.word	0x00ab00ab
 101b9d8:	01000100 	.word	0x01000100
 101b9dc:	01420100 	.word	0x01420100
 101b9e0:	019f016d 	.word	0x019f016d
 101b9e4:	02a002a0 	.word	0x02a002a0
 101b9e8:	01ad01a6 	.word	0x01ad01a6
 101b9ec:	01bb01b4 	.word	0x01bb01b4
 101b9f0:	020a02a0 	.word	0x020a02a0
 101b9f4:	021102a0 	.word	0x021102a0
 101b9f8:	021f0218 	.word	0x021f0218
 101b9fc:	022d0226 	.word	0x022d0226
 101ba00:	023402a0 	.word	0x023402a0
 101ba04:	0244023d 	.word	0x0244023d
 101ba08:	024e024b 	.word	0x024e024b
 101ba0c:	02560252 	.word	0x02560252
 101ba10:	025e025a 	.word	0x025e025a
 101ba14:	02660262 	.word	0x02660262
 101ba18:	026e026a 	.word	0x026e026a
 101ba1c:	02760272 	.word	0x02760272
 101ba20:	027e027a 	.word	0x027e027a
 101ba24:	02a00282 	.word	0x02a00282
 101ba28:	02a0028b 	.word	0x02a0028b
 101ba2c:	782d0299 	.word	0x782d0299
 101ba30:	f2802d03 	.word	0xf2802d03
 101ba34:	f7f88264 	.word	0xf7f88264
 101ba38:	4285f825 	.word	0x4285f825
 101ba3c:	8260f000 	.word	0x8260f000
 101ba40:	f7f82000 	.word	0xf7f82000
 101ba44:	2003f82d 	.word	0x2003f82d
 101ba48:	f82ef7f8 	.word	0xf82ef7f8
 101ba4c:	ffcaf7f7 	.word	0xffcaf7f7
 101ba50:	d1fb2800 	.word	0xd1fb2800
 101ba54:	f7f84628 	.word	0xf7f84628
 101ba58:	f7f8f80f 	.word	0xf7f8f80f
 101ba5c:	e141f817 	.word	0xe141f817
 101ba60:	2e03782e 	.word	0x2e03782e
 101ba64:	824bf280 	.word	0x824bf280
 101ba68:	ffe8f7f8 	.word	0xffe8f7f8
 101ba6c:	f0004286 	.word	0xf0004286
 101ba70:	20008247 	.word	0x20008247
 101ba74:	f814f7f8 	.word	0xf814f7f8
 101ba78:	f7f82003 	.word	0xf7f82003
 101ba7c:	bf00f815 	.word	0xbf00f815
 101ba80:	ffb0f7f7 	.word	0xffb0f7f7
 101ba84:	d1fb2800 	.word	0xd1fb2800
 101ba88:	21017828 	.word	0x21017828
 101ba8c:	ff1ef7f8 	.word	0xff1ef7f8
 101ba90:	7828e128 	.word	0x7828e128
 101ba94:	feb1f7f9 	.word	0xfeb1f7f9
 101ba98:	b0014620 	.word	0xb0014620
 101ba9c:	83f0e8bd 	.word	0x83f0e8bd
 101baa0:	fc5ff7f9 	.word	0xfc5ff7f9
 101baa4:	0f80ebb6 	.word	0x0f80ebb6
 101baa8:	8229f040 	.word	0x8229f040
 101baac:	fc57f7f9 	.word	0xfc57f7f9
 101bab0:	46322f0a 	.word	0x46322f0a
 101bab4:	bf184629 	.word	0xbf184629
 101bab8:	e2003020 	.word	0xe2003020
 101babc:	fc51f7f9 	.word	0xfc51f7f9
 101bac0:	0fc0ebb6 	.word	0x0fc0ebb6
 101bac4:	821bf040 	.word	0x821bf040
 101bac8:	fc49f7f9 	.word	0xfc49f7f9
 101bacc:	2f0c4680 	.word	0x2f0c4680
 101bad0:	f108bf08 	.word	0xf108bf08
 101bad4:	d0050040 	.word	0xd0050040
 101bad8:	bf0c2f0d 	.word	0xbf0c2f0d
 101badc:	0080f108 	.word	0x0080f108
 101bae0:	00c0f108 	.word	0x00c0f108
 101bae4:	46290872 	.word	0x46290872
 101bae8:	f9b4f7f8 	.word	0xf9b4f7f8
 101baec:	eb052f0c 	.word	0xeb052f0c
 101baf0:	bf080156 	.word	0xbf080156
 101baf4:	0060f108 	.word	0x0060f108
 101baf8:	2f0dd005 	.word	0x2f0dd005
 101bafc:	f108bf0c 	.word	0xf108bf0c
 101bb00:	f10800a0 	.word	0xf10800a0
 101bb04:	087200e0 	.word	0x087200e0
 101bb08:	f000e1d9 	.word	0xf000e1d9
 101bb0c:	4286fa3f 	.word	0x4286fa3f
 101bb10:	81f5f040 	.word	0x81f5f040
 101bb14:	fc23f7f9 	.word	0xfc23f7f9
 101bb18:	46802f0f 	.word	0x46802f0f
 101bb1c:	f44fbf08 	.word	0xf44fbf08
 101bb20:	d00670a2 	.word	0xd00670a2
 101bb24:	bf082f10 	.word	0xbf082f10
 101bb28:	2906f208 	.word	0x2906f208
 101bb2c:	f44fd003 	.word	0xf44fd003
 101bb30:	eb087032 	.word	0xeb087032
 101bb34:	46320900 	.word	0x46320900
 101bb38:	46484629 	.word	0x46484629
 101bb3c:	faccf003 	.word	0xfaccf003
 101bb40:	f0002800 	.word	0xf0002800
 101bb44:	200081dd 	.word	0x200081dd
 101bb48:	ffaaf7f7 	.word	0xffaaf7f7
 101bb4c:	f7f72003 	.word	0xf7f72003
 101bb50:	bf00ffab 	.word	0xbf00ffab
 101bb54:	ff46f7f7 	.word	0xff46f7f7
 101bb58:	d1fb2800 	.word	0xd1fb2800
 101bb5c:	fb4cf7fe 	.word	0xfb4cf7fe
 101bb60:	fce0f7fe 	.word	0xfce0f7fe
 101bb64:	d1fb2800 	.word	0xd1fb2800
 101bb68:	fe68f7fb 	.word	0xfe68f7fb
 101bb6c:	d1f72800 	.word	0xd1f72800
 101bb70:	d1062f0f 	.word	0xd1062f0f
 101bb74:	46294632 	.word	0x46294632
 101bb78:	f7f84648 	.word	0xf7f84648
 101bb7c:	2000f96b 	.word	0x2000f96b
 101bb80:	2f10e013 	.word	0x2f10e013
 101bb84:	46294632 	.word	0x46294632
 101bb88:	d1024648 	.word	0xd1024648
 101bb8c:	f962f7f8 	.word	0xf962f7f8
 101bb90:	f7f8e00a 	.word	0xf7f8e00a
 101bb94:	4632f95f 	.word	0x4632f95f
 101bb98:	f2084629 	.word	0xf2084629
 101bb9c:	f7f82006 	.word	0xf7f82006
 101bba0:	2002f959 	.word	0x2002f959
 101bba4:	f996f7f7 	.word	0xf996f7f7
 101bba8:	f7f72001 	.word	0xf7f72001
 101bbac:	f7f7f993 	.word	0xf7f7f993
 101bbb0:	e095ff6d 	.word	0xe095ff6d
 101bbb4:	f9eaf000 	.word	0xf9eaf000
 101bbb8:	f0404286 	.word	0xf0404286
 101bbbc:	f7f981a0 	.word	0xf7f981a0
 101bbc0:	4680fbce 	.word	0x4680fbce
 101bbc4:	bf082f12 	.word	0xbf082f12
 101bbc8:	398af208 	.word	0x398af208
 101bbcc:	2f13d007 	.word	0x2f13d007
 101bbd0:	f44fbf06 	.word	0xf44fbf06
 101bbd4:	eb087064 	.word	0xeb087064
 101bbd8:	f2080900 	.word	0xf2080900
 101bbdc:	46323992 	.word	0x46323992
 101bbe0:	46484629 	.word	0x46484629
 101bbe4:	fa78f003 	.word	0xfa78f003
 101bbe8:	f0002800 	.word	0xf0002800
 101bbec:	20008189 	.word	0x20008189
 101bbf0:	ff56f7f7 	.word	0xff56f7f7
 101bbf4:	f7f72003 	.word	0xf7f72003
 101bbf8:	bf00ff57 	.word	0xbf00ff57
 101bbfc:	fef2f7f7 	.word	0xfef2f7f7
 101bc00:	d1fb2800 	.word	0xd1fb2800
 101bc04:	d1032f12 	.word	0xd1032f12
 101bc08:	46294632 	.word	0x46294632
 101bc0c:	e0044648 	.word	0xe0044648
 101bc10:	46322f13 	.word	0x46322f13
 101bc14:	46484629 	.word	0x46484629
 101bc18:	f7f8d102 	.word	0xf7f8d102
 101bc1c:	e008f91b 	.word	0xe008f91b
 101bc20:	f918f7f8 	.word	0xf918f7f8
 101bc24:	7064f44f 	.word	0x7064f44f
 101bc28:	44407829 	.word	0x44407829
 101bc2c:	78697001 	.word	0x78697001
 101bc30:	f7f77041 	.word	0xf7f77041
 101bc34:	e055ff2b 	.word	0xe055ff2b
 101bc38:	f0402e44 	.word	0xf0402e44
 101bc3c:	f7f98160 	.word	0xf7f98160
 101bc40:	4606fb8e 	.word	0x4606fb8e
 101bc44:	7080f44f 	.word	0x7080f44f
 101bc48:	46292244 	.word	0x46292244
 101bc4c:	f0034430 	.word	0xf0034430
 101bc50:	2800fa43 	.word	0x2800fa43
 101bc54:	8154f000 	.word	0x8154f000
 101bc58:	f7f72000 	.word	0xf7f72000
 101bc5c:	2003ff21 	.word	0x2003ff21
 101bc60:	ff22f7f7 	.word	0xff22f7f7
 101bc64:	febef7f7 	.word	0xfebef7f7
 101bc68:	d1fb2800 	.word	0xd1fb2800
 101bc6c:	7080f44f 	.word	0x7080f44f
 101bc70:	46292244 	.word	0x46292244
 101bc74:	f7f84430 	.word	0xf7f84430
 101bc78:	f44ff8ed 	.word	0xf44ff8ed
 101bc7c:	18317080 	.word	0x18317080
 101bc80:	2040f04f 	.word	0x2040f04f
 101bc84:	f9a4f7fa 	.word	0xf9a4f7fa
 101bc88:	ff00f7f7 	.word	0xff00f7f7
 101bc8c:	7828e02a 	.word	0x7828e02a
 101bc90:	f0002800 	.word	0xf0002800
 101bc94:	28098134 	.word	0x28098134
 101bc98:	8131f280 	.word	0x8131f280
 101bc9c:	1e402580 	.word	0x1e402580
 101bca0:	f7f840c5 	.word	0xf7f840c5
 101bca4:	b2e9f81b 	.word	0xb2e9f81b
 101bca8:	f0004288 	.word	0xf0004288
 101bcac:	20008129 	.word	0x20008129
 101bcb0:	fef6f7f7 	.word	0xfef6f7f7
 101bcb4:	f7f72003 	.word	0xf7f72003
 101bcb8:	bf00fef7 	.word	0xbf00fef7
 101bcbc:	fe92f7f7 	.word	0xfe92f7f7
 101bcc0:	d1fb2800 	.word	0xd1fb2800
 101bcc4:	fa98f7fe 	.word	0xfa98f7fe
 101bcc8:	fc2cf7fe 	.word	0xfc2cf7fe
 101bccc:	d1fb2800 	.word	0xd1fb2800
 101bcd0:	fdb4f7fb 	.word	0xfdb4f7fb
 101bcd4:	d1f72800 	.word	0xd1f72800
 101bcd8:	b2e82100 	.word	0xb2e82100
 101bcdc:	ff76f7f7 	.word	0xff76f7f7
 101bce0:	faf1f7ff 	.word	0xfaf1f7ff
 101bce4:	f7f72001 	.word	0xf7f72001
 101bce8:	4620fedb 	.word	0x4620fedb
 101bcec:	e8bdb001 	.word	0xe8bdb001
 101bcf0:	782883f0 	.word	0x782883f0
 101bcf4:	fb39f7f9 	.word	0xfb39f7f9
 101bcf8:	b0014620 	.word	0xb0014620
 101bcfc:	83f0e8bd 	.word	0x83f0e8bd
 101bd00:	f7ff7828 	.word	0xf7ff7828
 101bd04:	4620fc00 	.word	0x4620fc00
 101bd08:	e8bdb001 	.word	0xe8bdb001
 101bd0c:	782883f0 	.word	0x782883f0
 101bd10:	fc04f7ff 	.word	0xfc04f7ff
 101bd14:	b0014620 	.word	0xb0014620
 101bd18:	83f0e8bd 	.word	0x83f0e8bd
 101bd1c:	f7ff8828 	.word	0xf7ff8828
 101bd20:	4620fc08 	.word	0x4620fc08
 101bd24:	e8bdb001 	.word	0xe8bdb001
 101bd28:	2e0883f0 	.word	0x2e0883f0
 101bd2c:	80e8f040 	.word	0x80e8f040
 101bd30:	4e937828 	.word	0x4e937828
 101bd34:	78aa7070 	.word	0x78aa7070
 101bd38:	79ab7869 	.word	0x79ab7869
 101bd3c:	eb020412 	.word	0xeb020412
 101bd40:	78ea6101 	.word	0x78ea6101
 101bd44:	2102eb01 	.word	0x2102eb01
 101bd48:	041b792a 	.word	0x041b792a
 101bd4c:	796a1889 	.word	0x796a1889
 101bd50:	6202eb03 	.word	0x6202eb03
 101bd54:	eb0279eb 	.word	0xeb0279eb
 101bd58:	7a2b2203 	.word	0x7a2b2203
 101bd5c:	064018d2 	.word	0x064018d2
 101bd60:	d50460f2 	.word	0xd50460f2
 101bd64:	2040f04f 	.word	0x2040f04f
 101bd68:	0090f8d0 	.word	0x0090f8d0
 101bd6c:	60b11841 	.word	0x60b11841
 101bd70:	68004885 	.word	0x68004885
 101bd74:	f5b01a08 	.word	0xf5b01a08
 101bd78:	da1d7fc8 	.word	0xda1d7fc8
 101bd7c:	f7f72000 	.word	0xf7f72000
 101bd80:	2003fe8f 	.word	0x2003fe8f
 101bd84:	fe90f7f7 	.word	0xfe90f7f7
 101bd88:	fe2cf7f7 	.word	0xfe2cf7f7
 101bd8c:	d1fb2800 	.word	0xd1fb2800
 101bd90:	fa32f7fe 	.word	0xfa32f7fe
 101bd94:	fbc6f7fe 	.word	0xfbc6f7fe
 101bd98:	d1fb2800 	.word	0xd1fb2800
 101bd9c:	fd4ef7fb 	.word	0xfd4ef7fb
 101bda0:	d1f72800 	.word	0xd1f72800
 101bda4:	68f17870 	.word	0x68f17870
 101bda8:	fd5ef7fb 	.word	0xfd5ef7fb
 101bdac:	b0012001 	.word	0xb0012001
 101bdb0:	46207030 	.word	0x46207030
 101bdb4:	83f0e8bd 	.word	0x83f0e8bd
 101bdb8:	fde8f7fb 	.word	0xfde8f7fb
 101bdbc:	b0012001 	.word	0xb0012001
 101bdc0:	46207030 	.word	0x46207030
 101bdc4:	83f0e8bd 	.word	0x83f0e8bd
 101bdc8:	f7fb8828 	.word	0xf7fb8828
 101bdcc:	4620fdec 	.word	0x4620fdec
 101bdd0:	e8bdb001 	.word	0xe8bdb001
 101bdd4:	782883f0 	.word	0x782883f0
 101bdd8:	fc95f7fb 	.word	0xfc95f7fb
 101bddc:	b0014620 	.word	0xb0014620
 101bde0:	83f0e8bd 	.word	0x83f0e8bd
 101bde4:	f7fb6828 	.word	0xf7fb6828
 101bde8:	4620fcfa 	.word	0x4620fcfa
 101bdec:	e8bdb001 	.word	0xe8bdb001
 101bdf0:	682883f0 	.word	0x682883f0
 101bdf4:	faccf7ff 	.word	0xfaccf7ff
 101bdf8:	b0014620 	.word	0xb0014620
 101bdfc:	83f0e8bd 	.word	0x83f0e8bd
 101be00:	f7fb7828 	.word	0xf7fb7828
 101be04:	4620fcff 	.word	0x4620fcff
 101be08:	e8bdb001 	.word	0xe8bdb001
 101be0c:	462883f0 	.word	0x462883f0
 101be10:	fd06f7fb 	.word	0xfd06f7fb
 101be14:	b0014620 	.word	0xb0014620
 101be18:	83f0e8bd 	.word	0x83f0e8bd
 101be1c:	28007828 	.word	0x28007828
 101be20:	f7fbd06e 	.word	0xf7fbd06e
 101be24:	4620fc67 	.word	0x4620fc67
 101be28:	e8bdb001 	.word	0xe8bdb001
 101be2c:	882883f0 	.word	0x882883f0
 101be30:	fc6df7fb 	.word	0xfc6df7fb
 101be34:	b0014620 	.word	0xb0014620
 101be38:	83f0e8bd 	.word	0x83f0e8bd
 101be3c:	f7fb8828 	.word	0xf7fb8828
 101be40:	4620fc9a 	.word	0x4620fc9a
 101be44:	e8bdb001 	.word	0xe8bdb001
 101be48:	484d83f0 	.word	0x484d83f0
 101be4c:	e0366840 	.word	0xe0366840
 101be50:	6840484b 	.word	0x6840484b
 101be54:	e0321d00 	.word	0xe0321d00
 101be58:	68404849 	.word	0x68404849
 101be5c:	e02e3008 	.word	0xe02e3008
 101be60:	68404847 	.word	0x68404847
 101be64:	e02a300c 	.word	0xe02a300c
 101be68:	68404845 	.word	0x68404845
 101be6c:	e0263010 	.word	0xe0263010
 101be70:	68404843 	.word	0x68404843
 101be74:	e0223014 	.word	0xe0223014
 101be78:	68404841 	.word	0x68404841
 101be7c:	e01e3018 	.word	0xe01e3018
 101be80:	6840483f 	.word	0x6840483f
 101be84:	e01a301c 	.word	0xe01a301c
 101be88:	6840483d 	.word	0x6840483d
 101be8c:	e0163020 	.word	0xe0163020
 101be90:	6840483b 	.word	0x6840483b
 101be94:	e0123024 	.word	0xe0123024
 101be98:	68404839 	.word	0x68404839
 101be9c:	e00e302c 	.word	0xe00e302c
 101bea0:	68404837 	.word	0x68404837
 101bea4:	e00a3030 	.word	0xe00a3030
 101bea8:	68404835 	.word	0x68404835
 101beac:	e0063034 	.word	0xe0063034
 101beb0:	68404833 	.word	0x68404833
 101beb4:	e0023038 	.word	0xe0023038
 101beb8:	68404831 	.word	0x68404831
 101bebc:	f7f7303c 	.word	0xf7f7303c
 101bec0:	4620ffc9 	.word	0x4620ffc9
 101bec4:	e8bdb001 	.word	0xe8bdb001
 101bec8:	782983f0 	.word	0x782983f0
 101becc:	2900482d 	.word	0x2900482d
 101bed0:	bf0c6801 	.word	0xbf0c6801
 101bed4:	7180f421 	.word	0x7180f421
 101bed8:	7180f441 	.word	0x7180f441
 101bedc:	46206001 	.word	0x46206001
 101bee0:	e8bdb001 	.word	0xe8bdb001
 101bee4:	462883f0 	.word	0x462883f0
 101bee8:	fabef7fe 	.word	0xfabef7fe
 101beec:	b0014620 	.word	0xb0014620
 101bef0:	83f0e8bd 	.word	0x83f0e8bd
 101bef4:	46202402 	.word	0x46202402
 101bef8:	e8bdb001 	.word	0xe8bdb001
 101befc:	240183f0 	.word	0x240183f0
 101bf00:	b0014620 	.word	0xb0014620
 101bf04:	83f0e8bd 	.word	0x83f0e8bd
 101bf08:	6048491d 	.word	0x6048491d
 101bf0c:	70082000 	.word	0x70082000
 101bf10:	00004770 	.word	0x00004770
 101bf14:	4c1ab510 	.word	0x4c1ab510
 101bf18:	b3707820 	.word	0xb3707820
 101bf1c:	fd32f7fb 	.word	0xfd32f7fb
 101bf20:	4819bb00 	.word	0x4819bb00
 101bf24:	68a16800 	.word	0x68a16800
 101bf28:	f5b01a08 	.word	0xf5b01a08
 101bf2c:	da247fc8 	.word	0xda247fc8
 101bf30:	f7f72000 	.word	0xf7f72000
 101bf34:	2003fdb5 	.word	0x2003fdb5
 101bf38:	fdb6f7f7 	.word	0xfdb6f7f7
 101bf3c:	fd52f7f7 	.word	0xfd52f7f7
 101bf40:	d1fb2800 	.word	0xd1fb2800
 101bf44:	f958f7fe 	.word	0xf958f7fe
 101bf48:	faecf7fe 	.word	0xfaecf7fe
 101bf4c:	d1fb2800 	.word	0xd1fb2800
 101bf50:	fc74f7fb 	.word	0xfc74f7fb
 101bf54:	d1f72800 	.word	0xd1f72800
 101bf58:	786068e1 	.word	0x786068e1
 101bf5c:	4010e8bd 	.word	0x4010e8bd
 101bf60:	bc82f7fb 	.word	0xbc82f7fb
 101bf64:	fd0ef7fb 	.word	0xfd0ef7fb
 101bf68:	d1062802 	.word	0xd1062802
 101bf6c:	f9abf7ff 	.word	0xf9abf7ff
 101bf70:	f7f72001 	.word	0xf7f72001
 101bf74:	2000fd95 	.word	0x2000fd95
 101bf78:	bd107020 	.word	0xbd107020
 101bf7c:	36050409 	.word	0x36050409
 101bf80:	20013274 	.word	0x20013274
 101bf84:	400e1800 	.word	0x400e1800
 101bf88:	400000ec 	.word	0x400000ec
 101bf8c:	b500283c 	.word	0xb500283c
 101bf90:	d851b081 	.word	0xd851b081
 101bf94:	f000e8df 	.word	0xf000e8df
 101bf98:	2b1f252e 	.word	0x2b1f252e
 101bf9c:	222b2222 	.word	0x222b2222
 101bfa0:	34342222 	.word	0x34342222
 101bfa4:	3e393939 	.word	0x3e393939
 101bfa8:	25413e3e 	.word	0x25413e3e
 101bfac:	22224441 	.word	0x22224441
 101bfb0:	2222252b 	.word	0x2222252b
 101bfb4:	25282e25 	.word	0x25282e25
 101bfb8:	2b2b2231 	.word	0x2b2b2231
 101bfbc:	22254d22 	.word	0x22254d22
 101bfc0:	2b2b2525 	.word	0x2b2b2525
 101bfc4:	2b2b2b2b 	.word	0x2b2b2b2b
 101bfc8:	2b2b2b2b 	.word	0x2b2b2b2b
 101bfcc:	2b2b2b2b 	.word	0x2b2b2b2b
 101bfd0:	2b22472b 	.word	0x2b22472b
 101bfd4:	200b004a 	.word	0x200b004a
 101bfd8:	bd00b001 	.word	0xbd00b001
 101bfdc:	b0012001 	.word	0xb0012001
 101bfe0:	2002bd00 	.word	0x2002bd00
 101bfe4:	bd00b001 	.word	0xbd00b001
 101bfe8:	b0012003 	.word	0xb0012003
 101bfec:	2004bd00 	.word	0x2004bd00
 101bff0:	bd00b001 	.word	0xbd00b001
 101bff4:	b0012008 	.word	0xb0012008
 101bff8:	2081bd00 	.word	0x2081bd00
 101bffc:	bd00b001 	.word	0xbd00b001
 101c000:	f9aff7f9 	.word	0xf9aff7f9
 101c004:	b0010080 	.word	0xb0010080
 101c008:	f7f9bd00 	.word	0xf7f9bd00
 101c00c:	00c0f9aa 	.word	0x00c0f9aa
 101c010:	bd00b001 	.word	0xbd00b001
 101c014:	b00120c2 	.word	0xb00120c2
 101c018:	2006bd00 	.word	0x2006bd00
 101c01c:	bd00b001 	.word	0xbd00b001
 101c020:	b0012044 	.word	0xb0012044
 101c024:	2061bd00 	.word	0x2061bd00
 101c028:	bd00b001 	.word	0xbd00b001
 101c02c:	b001200c 	.word	0xb001200c
 101c030:	200abd00 	.word	0x200abd00
 101c034:	bd00b001 	.word	0xbd00b001
 101c038:	b0012000 	.word	0xb0012000
 101c03c:	0000bd00 	.word	0x0000bd00
 101c040:	4c505441 	.word	0x4c505441
 101c044:	42303633 	.word	0x42303633
 101c048:	00000000 	.word	0x00000000
 101c04c:	302e3633 	.word	0x302e3633
 101c050:	34302e35 	.word	0x34302e35
 101c054:	0039302e 	.word	0x0039302e
 101c058:	b081b530 	.word	0xb081b530
 101c05c:	0488f8df 	.word	0x0488f8df
 101c060:	69426881 	.word	0x69426881
 101c064:	4484f8df 	.word	0x4484f8df
 101c068:	07ca4011 	.word	0x07ca4011
 101c06c:	6802d53b 	.word	0x6802d53b
 101c070:	335cf894 	.word	0x335cf894
 101c074:	b292001d 	.word	0xb292001d
 101c078:	2a0ad117 	.word	0x2a0ad117
 101c07c:	f240db04 	.word	0xf240db04
 101c080:	61014109 	.word	0x61014109
 101c084:	bd30b001 	.word	0xbd30b001
 101c088:	5368f8d4 	.word	0x5368f8d4
 101c08c:	3022f854 	.word	0x3022f854
 101c090:	f8d4602b 	.word	0xf8d4602b
 101c094:	602b536c 	.word	0x602b536c
 101c098:	f8df2301 	.word	0xf8df2301
 101c09c:	602b5454 	.word	0x602b5454
 101c0a0:	335cf884 	.word	0x335cf884
 101c0a4:	235ef8a4 	.word	0x235ef8a4
 101c0a8:	2b01e01d 	.word	0x2b01e01d
 101c0ac:	0413d11b 	.word	0x0413d11b
 101c0b0:	f8d4d511 	.word	0xf8d4d511
 101c0b4:	f3c23378 	.word	0xf3c23378
 101c0b8:	601a020e 	.word	0x601a020e
 101c0bc:	2430f8df 	.word	0x2430f8df
 101c0c0:	60532301 	.word	0x60532301
 101c0c4:	60132302 	.word	0x60132302
 101c0c8:	4201f240 	.word	0x4201f240
 101c0cc:	22016102 	.word	0x22016102
 101c0d0:	335cf884 	.word	0x335cf884
 101c0d4:	2209e005 	.word	0x2209e005
 101c0d8:	22036102 	.word	0x22036102
 101c0dc:	235cf884 	.word	0x235cf884
 101c0e0:	f8842200 	.word	0xf8842200
 101c0e4:	078a235b 	.word	0x078a235b
 101c0e8:	f8b4d50d 	.word	0xf8b4d50d
 101c0ec:	60422360 	.word	0x60422360
 101c0f0:	61022202 	.word	0x61022202
 101c0f4:	2374f8d4 	.word	0x2374f8d4
 101c0f8:	3370f8d4 	.word	0x3370f8d4
 101c0fc:	601a6812 	.word	0x601a6812
 101c100:	f8842200 	.word	0xf8842200
 101c104:	05c9235c 	.word	0x05c9235c
 101c108:	8086f140 	.word	0x8086f140
 101c10c:	135cf894 	.word	0x135cf894
 101c110:	23dcf8df 	.word	0x23dcf8df
 101c114:	d1022903 	.word	0xd1022903
 101c118:	21016801 	.word	0x21016801
 101c11c:	21006051 	.word	0x21006051
 101c120:	135cf884 	.word	0x135cf884
 101c124:	417ff06f 	.word	0x417ff06f
 101c128:	f2416551 	.word	0xf2416551
 101c12c:	60411122 	.word	0x60411122
 101c130:	510bf240 	.word	0x510bf240
 101c134:	f89460c1 	.word	0xf89460c1
 101c138:	f8b4135b 	.word	0xf8b4135b
 101c13c:	b381035e 	.word	0xb381035e
 101c140:	2a014602 	.word	0x2a014602
 101c144:	2a04bf18 	.word	0x2a04bf18
 101c148:	2a02d006 	.word	0x2a02d006
 101c14c:	2a05d108 	.word	0x2a05d108
 101c150:	2010bf0c 	.word	0x2010bf0c
 101c154:	e0172004 	.word	0xe0172004
 101c158:	f8542100 	.word	0xf8542100
 101c15c:	e0150022 	.word	0xe0150022
 101c160:	d0f42a05 	.word	0xd0f42a05
 101c164:	d1512a09 	.word	0xd1512a09
 101c168:	5358f894 	.word	0x5358f894
 101c16c:	6a6120cc 	.word	0x6a6120cc
 101c170:	fb1022cc 	.word	0xfb1022cc
 101c174:	4420f005 	.word	0x4420f005
 101c178:	f7f73028 	.word	0xf7f73028
 101c17c:	2d03fe6b 	.word	0x2d03fe6b
 101c180:	2000bf0c 	.word	0x2000bf0c
 101c184:	e0041c68 	.word	0xe0041c68
 101c188:	58202101 	.word	0x58202101
 101c18c:	fb5af7f9 	.word	0xfb5af7f9
 101c190:	f884e03c 	.word	0xf884e03c
 101c194:	f8940358 	.word	0xf8940358
 101c198:	1c40035a 	.word	0x1c40035a
 101c19c:	035af884 	.word	0x035af884
 101c1a0:	2803e034 	.word	0x2803e034
 101c1a4:	2001d107 	.word	0x2001d107
 101c1a8:	1360f8b4 	.word	0x1360f8b4
 101c1ac:	0000ea21 	.word	0x0000ea21
 101c1b0:	0360f8a4 	.word	0x0360f8a4
 101c1b4:	2806e02a 	.word	0x2806e02a
 101c1b8:	2002bf08 	.word	0x2002bf08
 101c1bc:	2808d0f4 	.word	0x2808d0f4
 101c1c0:	f8b4d10c 	.word	0xf8b4d10c
 101c1c4:	f64f0360 	.word	0xf64f0360
 101c1c8:	400871fb 	.word	0x400871fb
 101c1cc:	0360f8a4 	.word	0x0360f8a4
 101c1d0:	0364f8d4 	.word	0x0364f8d4
 101c1d4:	0c096841 	.word	0x0c096841
 101c1d8:	e0160409 	.word	0xe0160409
 101c1dc:	d1072807 	.word	0xd1072807
 101c1e0:	0360f8b4 	.word	0x0360f8b4
 101c1e4:	71dff64f 	.word	0x71dff64f
 101c1e8:	f8a44008 	.word	0xf8a44008
 101c1ec:	e00d0360 	.word	0xe00d0360
 101c1f0:	d10b2809 	.word	0xd10b2809
 101c1f4:	0360f8b4 	.word	0x0360f8b4
 101c1f8:	71eff64f 	.word	0x71eff64f
 101c1fc:	f8a44008 	.word	0xf8a44008
 101c200:	f8d40360 	.word	0xf8d40360
 101c204:	68410364 	.word	0x68410364
 101c208:	6041b289 	.word	0x6041b289
 101c20c:	0360f8b4 	.word	0x0360f8b4
 101c210:	2008b910 	.word	0x2008b910
 101c214:	600849b7 	.word	0x600849b7
 101c218:	bd30b001 	.word	0xbd30b001
 101c21c:	b081b530 	.word	0xb081b530
 101c220:	4db27a81 	.word	0x4db27a81
 101c224:	46012900 	.word	0x46012900
 101c228:	2403bf0c 	.word	0x2403bf0c
 101c22c:	f8552406 	.word	0xf8552406
 101c230:	220c0024 	.word	0x220c0024
 101c234:	fe0ef7f7 	.word	0xfe0ef7f7
 101c238:	bf082c03 	.word	0xbf082c03
 101c23c:	d0032001 	.word	0xd0032001
 101c240:	bf0c2c06 	.word	0xbf0c2c06
 101c244:	20002002 	.word	0x20002002
 101c248:	f3bfb672 	.word	0xf3bfb672
 101c24c:	f8b58f5f 	.word	0xf8b58f5f
 101c250:	43081360 	.word	0x43081360
 101c254:	0360f8a5 	.word	0x0360f8a5
 101c258:	8f5ff3bf 	.word	0x8f5ff3bf
 101c25c:	2008b662 	.word	0x2008b662
 101c260:	600849a5 	.word	0x600849a5
 101c264:	bd30b001 	.word	0xbd30b001
 101c268:	4da0b530 	.word	0x4da0b530
 101c26c:	4601460c 	.word	0x4601460c
 101c270:	b0816a28 	.word	0xb0816a28
 101c274:	f7f74622 	.word	0xf7f74622
 101c278:	b672fded 	.word	0xb672fded
 101c27c:	8f5ff3bf 	.word	0x8f5ff3bf
 101c280:	0364f8d5 	.word	0x0364f8d5
 101c284:	f3646841 	.word	0xf3646841
 101c288:	6041010f 	.word	0x6041010f
 101c28c:	0360f8b5 	.word	0x0360f8b5
 101c290:	0004f040 	.word	0x0004f040
 101c294:	0360f8a5 	.word	0x0360f8a5
 101c298:	8f5ff3bf 	.word	0x8f5ff3bf
 101c29c:	2008b662 	.word	0x2008b662
 101c2a0:	60084995 	.word	0x60084995
 101c2a4:	bd30b001 	.word	0xbd30b001
 101c2a8:	4c90b510 	.word	0x4c90b510
 101c2ac:	69e04601 	.word	0x69e04601
 101c2b0:	f7f7221c 	.word	0xf7f7221c
 101c2b4:	b672fdcf 	.word	0xb672fdcf
 101c2b8:	8f5ff3bf 	.word	0x8f5ff3bf
 101c2bc:	0360f8b4 	.word	0x0360f8b4
 101c2c0:	0020f040 	.word	0x0020f040
 101c2c4:	0360f8a4 	.word	0x0360f8a4
 101c2c8:	8f5ff3bf 	.word	0x8f5ff3bf
 101c2cc:	2008b662 	.word	0x2008b662
 101c2d0:	60084989 	.word	0x60084989
 101c2d4:	4987bd10 	.word	0x4987bd10
 101c2d8:	2001b110 	.word	0x2001b110
 101c2dc:	47706048 	.word	0x47706048
 101c2e0:	60082001 	.word	0x60082001
 101c2e4:	b5704770 	.word	0xb5704770
 101c2e8:	4884b084 	.word	0x4884b084
 101c2ec:	48849000 	.word	0x48849000
 101c2f0:	48849001 	.word	0x48849001
 101c2f4:	48849002 	.word	0x48849002
 101c2f8:	46689003 	.word	0x46689003
 101c2fc:	fa9cf7f9 	.word	0xfa9cf7f9
 101c300:	4c822008 	.word	0x4c822008
 101c304:	f8d4f7f8 	.word	0xf8d4f7f8
 101c308:	4d812080 	.word	0x4d812080
 101c30c:	20026020 	.word	0x20026020
 101c310:	68606020 	.word	0x68606020
 101c314:	08404e75 	.word	0x08404e75
 101c318:	60600040 	.word	0x60600040
 101c31c:	f0406860 	.word	0xf0406860
 101c320:	60600010 	.word	0x60600010
 101c324:	f4206860 	.word	0xf4206860
 101c328:	60602070 	.word	0x60602070
 101c32c:	f4406860 	.word	0xf4406860
 101c330:	60602060 	.word	0x60602060
 101c334:	f0206b20 	.word	0xf0206b20
 101c338:	632000f0 	.word	0x632000f0
 101c33c:	f0406b20 	.word	0xf0406b20
 101c340:	63200080 	.word	0x63200080
 101c344:	08406b20 	.word	0x08406b20
 101c348:	63200040 	.word	0x63200040
 101c34c:	f0406b20 	.word	0xf0406b20
 101c350:	63200002 	.word	0x63200002
 101c354:	f0206860 	.word	0xf0206860
 101c358:	60600002 	.word	0x60600002
 101c35c:	f8c54862 	.word	0xf8c54862
 101c360:	486c0090 	.word	0x486c0090
 101c364:	00a8f8c5 	.word	0x00a8f8c5
 101c368:	f8c52000 	.word	0xf8c52000
 101c36c:	f8c5009c 	.word	0xf8c5009c
 101c370:	200200a4 	.word	0x200200a4
 101c374:	48686028 	.word	0x48686028
 101c378:	48686568 	.word	0x48686568
 101c37c:	200066a8 	.word	0x200066a8
 101c380:	666865e8 	.word	0x666865e8
 101c384:	60282001 	.word	0x60282001
 101c388:	f0024630 	.word	0xf0024630
 101c38c:	6830fed7 	.word	0x6830fed7
 101c390:	f8c62101 	.word	0xf8c62101
 101c394:	23000364 	.word	0x23000364
 101c398:	21006021 	.word	0x21006021
 101c39c:	1360f8a6 	.word	0x1360f8a6
 101c3a0:	f8862208 	.word	0xf8862208
 101c3a4:	f886135c 	.word	0xf886135c
 101c3a8:	f8861358 	.word	0xf8861358
 101c3ac:	f8861359 	.word	0xf8861359
 101c3b0:	f06f135a 	.word	0xf06f135a
 101c3b4:	6629417f 	.word	0x6629417f
 101c3b8:	1122f241 	.word	0x1122f241
 101c3bc:	f24060e1 	.word	0xf24060e1
 101c3c0:	6161510b 	.word	0x6161510b
 101c3c4:	0150f105 	.word	0x0150f105
 101c3c8:	0370f8c6 	.word	0x0370f8c6
 101c3cc:	f8c64854 	.word	0xf8c64854
 101c3d0:	f1051368 	.word	0xf1051368
 101c3d4:	f8c60194 	.word	0xf8c60194
 101c3d8:	f1050374 	.word	0xf1050374
 101c3dc:	f8c600a0 	.word	0xf8c600a0
 101c3e0:	f04f136c 	.word	0xf04f136c
 101c3e4:	f8c65140 	.word	0xf8c65140
 101c3e8:	484e0378 	.word	0x484e0378
 101c3ec:	f9abf000 	.word	0xf9abf000
 101c3f0:	bd70b004 	.word	0xbd70b004
 101c3f4:	47f0e92d 	.word	0x47f0e92d
 101c3f8:	f8df4c3f 	.word	0xf8df4c3f
 101c3fc:	4e3b912c 	.word	0x4e3b912c
 101c400:	bf00e002 	.word	0xbf00e002
 101c404:	0359f886 	.word	0x0359f886
 101c408:	035af896 	.word	0x035af896
 101c40c:	d0692800 	.word	0xd0692800
 101c410:	0359f896 	.word	0x0359f896
 101c414:	fb1121cc 	.word	0xfb1121cc
 101c418:	4430f000 	.word	0x4430f000
 101c41c:	082ef100 	.word	0x082ef100
 101c420:	2029f890 	.word	0x2029f890
 101c424:	1028f890 	.word	0x1028f890
 101c428:	eb020412 	.word	0xeb020412
 101c42c:	f8906101 	.word	0xf8906101
 101c430:	eb01202a 	.word	0xeb01202a
 101c434:	f8902102 	.word	0xf8902102
 101c438:	188f202b 	.word	0x188f202b
 101c43c:	202df890 	.word	0x202df890
 101c440:	102cf890 	.word	0x102cf890
 101c444:	2101eb02 	.word	0x2101eb02
 101c448:	0e800408 	.word	0x0e800408
 101c44c:	f0002f00 	.word	0xf0002f00
 101c450:	f3c10501 	.word	0xf3c10501
 101c454:	d5110a08 	.word	0xd5110a08
 101c458:	f7ffb2b8 	.word	0xf7ffb2b8
 101c45c:	2d00fd97 	.word	0x2d00fd97
 101c460:	46524682 	.word	0x46524682
 101c464:	4641d004 	.word	0x4641d004
 101c468:	f7ffb2b8 	.word	0xf7ffb2b8
 101c46c:	e027fa97 	.word	0xe027fa97
 101c470:	b2b86a71 	.word	0xb2b86a71
 101c474:	f878f7ff 	.word	0xf878f7ff
 101c478:	e00dbb10 	.word	0xe00dbb10
 101c47c:	d51f0078 	.word	0xd51f0078
 101c480:	d22f454f 	.word	0xd22f454f
 101c484:	f8d8b11d 	.word	0xf8d8b11d
 101c488:	60380000 	.word	0x60380000
 101c48c:	6a70e018 	.word	0x6a70e018
 101c490:	46394652 	.word	0x46394652
 101c494:	fcdef7f7 	.word	0xfcdef7f7
 101c498:	f3bfb672 	.word	0xf3bfb672
 101c49c:	f8d68f5f 	.word	0xf8d68f5f
 101c4a0:	68410364 	.word	0x68410364
 101c4a4:	411ff36a 	.word	0x411ff36a
 101c4a8:	f8b66041 	.word	0xf8b66041
 101c4ac:	f0400360 	.word	0xf0400360
 101c4b0:	f8a60010 	.word	0xf8a60010
 101c4b4:	f3bf0360 	.word	0xf3bf0360
 101c4b8:	b6628f5f 	.word	0xb6628f5f
 101c4bc:	60202008 	.word	0x60202008
 101c4c0:	f3bfb672 	.word	0xf3bfb672
 101c4c4:	f8968f5f 	.word	0xf8968f5f
 101c4c8:	1e40035a 	.word	0x1e40035a
 101c4cc:	035af886 	.word	0x035af886
 101c4d0:	8f5ff3bf 	.word	0x8f5ff3bf
 101c4d4:	f896b662 	.word	0xf896b662
 101c4d8:	28030359 	.word	0x28030359
 101c4dc:	1c40bf14 	.word	0x1c40bf14
 101c4e0:	e78f2000 	.word	0xe78f2000
 101c4e4:	87f0e8bd 	.word	0x87f0e8bd
 101c4e8:	40008008 	.word	0x40008008
 101c4ec:	20012a30 	.word	0x20012a30
 101c4f0:	4001001c 	.word	0x4001001c
 101c4f4:	400e0430 	.word	0x400e0430
 101c4f8:	400e0434 	.word	0x400e0434
 101c4fc:	0000a81d 	.word	0x0000a81d
 101c500:	0000a869 	.word	0x0000a869
 101c504:	0000a8a9 	.word	0x0000a8a9
 101c508:	0000a8d7 	.word	0x0000a8d7
 101c50c:	40008000 	.word	0x40008000
 101c510:	40010010 	.word	0x40010010
 101c514:	01040801 	.word	0x01040801
 101c518:	4000800c 	.word	0x4000800c
 101c51c:	00016811 	.word	0x00016811
 101c520:	400000ec 	.word	0x400000ec
 101c524:	400e0400 	.word	0x400e0400
 101c528:	400e2c41 	.word	0x400e2c41
 101c52c:	4606b570 	.word	0x4606b570
 101c530:	6af0460c 	.word	0x6af0460c
 101c534:	46154941 	.word	0x46154941
 101c538:	0001f040 	.word	0x0001f040
 101c53c:	6b7062f0 	.word	0x6b7062f0
 101c540:	4000f440 	.word	0x4000f440
 101c544:	00206370 	.word	0x00206370
 101c548:	2040bf1c 	.word	0x2040bf1c
 101c54c:	00dcf8c6 	.word	0x00dcf8c6
 101c550:	f0406b70 	.word	0xf0406b70
 101c554:	63704080 	.word	0x63704080
 101c558:	60304839 	.word	0x60304839
 101c55c:	0090f8d6 	.word	0x0090f8d6
 101c560:	4000f020 	.word	0x4000f020
 101c564:	0090f8c6 	.word	0x0090f8c6
 101c568:	f8c6200b 	.word	0xf8c6200b
 101c56c:	f8d600c0 	.word	0xf8d600c0
 101c570:	40080090 	.word	0x40080090
 101c574:	0090f8c6 	.word	0x0090f8c6
 101c578:	0090f8d6 	.word	0x0090f8d6
 101c57c:	6080f440 	.word	0x6080f440
 101c580:	0090f8c6 	.word	0x0090f8c6
 101c584:	0090f8d6 	.word	0x0090f8d6
 101c588:	5000f040 	.word	0x5000f040
 101c58c:	0090f8c6 	.word	0x0090f8c6
 101c590:	ffd1f7f8 	.word	0xffd1f7f8
 101c594:	bf182800 	.word	0xbf182800
 101c598:	bf1d2d00 	.word	0xbf1d2d00
 101c59c:	f8c6200c 	.word	0xf8c6200c
 101c5a0:	200800dc 	.word	0x200800dc
 101c5a4:	f8c6200c 	.word	0xf8c6200c
 101c5a8:	f7f800d8 	.word	0xf7f800d8
 101c5ac:	f44fffc4 	.word	0xf44fffc4
 101c5b0:	b91001c0 	.word	0xb91001c0
 101c5b4:	10dcf8c6 	.word	0x10dcf8c6
 101c5b8:	2801e009 	.word	0x2801e009
 101c5bc:	10dcf8c6 	.word	0x10dcf8c6
 101c5c0:	f44fbf06 	.word	0xf44fbf06
 101c5c4:	f8c61000 	.word	0xf8c61000
 101c5c8:	f8c600d8 	.word	0xf8c600d8
 101c5cc:	b31410d8 	.word	0xb31410d8
 101c5d0:	4c1c2040 	.word	0x4c1c2040
 101c5d4:	00d8f8c6 	.word	0x00d8f8c6
 101c5d8:	f7f82500 	.word	0xf7f82500
 101c5dc:	4602ffbc 	.word	0x4602ffbc
 101c5e0:	462023fa 	.word	0x462023fa
 101c5e4:	fbe32100 	.word	0xfbe32100
 101c5e8:	4a170102 	.word	0x4a170102
 101c5ec:	f7fc2300 	.word	0xf7fc2300
 101c5f0:	f002fa29 	.word	0xf002fa29
 101c5f4:	20a1fdc5 	.word	0x20a1fdc5
 101c5f8:	00d8f8c6 	.word	0x00d8f8c6
 101c5fc:	ffabf7f8 	.word	0xffabf7f8
 101c600:	4a112167 	.word	0x4a112167
 101c604:	4500fbe1 	.word	0x4500fbe1
 101c608:	46202300 	.word	0x46202300
 101c60c:	f7fc4629 	.word	0xf7fc4629
 101c610:	f002fa19 	.word	0xf002fa19
 101c614:	6af0fdb5 	.word	0x6af0fdb5
 101c618:	00400840 	.word	0x00400840
 101c61c:	6b7062f0 	.word	0x6b7062f0
 101c620:	4000f420 	.word	0x4000f420
 101c624:	f7f96370 	.word	0xf7f96370
 101c628:	62b0fa89 	.word	0x62b0fa89
 101c62c:	fa80f7f9 	.word	0xfa80f7f9
 101c630:	6ab06270 	.word	0x6ab06270
 101c634:	5080f040 	.word	0x5080f040
 101c638:	bd7062b0 	.word	0xbd7062b0
 101c63c:	820000ff 	.word	0x820000ff
 101c640:	02000001 	.word	0x02000001
 101c644:	005a83df 	.word	0x005a83df
 101c648:	005a83e0 	.word	0x005a83e0
 101c64c:	b081b530 	.word	0xb081b530
 101c650:	460d4604 	.word	0x460d4604
 101c654:	ff6ff7f8 	.word	0xff6ff7f8
 101c658:	bf182800 	.word	0xbf182800
 101c65c:	bf1d2d00 	.word	0xbf1d2d00
 101c660:	f8c4200c 	.word	0xf8c4200c
 101c664:	200800dc 	.word	0x200800dc
 101c668:	f8c4200c 	.word	0xf8c4200c
 101c66c:	b00100d8 	.word	0xb00100d8
 101c670:	eb00bd30 	.word	0xeb00bd30
 101c674:	f44f2041 	.word	0xf44f2041
 101c678:	b43071fe 	.word	0xb43071fe
 101c67c:	0083eb00 	.word	0x0083eb00
 101c680:	21004408 	.word	0x21004408
 101c684:	d026001c 	.word	0xd026001c
 101c688:	0403f013 	.word	0x0403f013
 101c68c:	b2c9d007 	.word	0xb2c9d007
 101c690:	5011f832 	.word	0x5011f832
 101c694:	1e641c49 	.word	0x1e641c49
 101c698:	5904f840 	.word	0x5904f840
 101c69c:	089bd1f7 	.word	0x089bd1f7
 101c6a0:	b2c9d019 	.word	0xb2c9d019
 101c6a4:	4011f832 	.word	0x4011f832
 101c6a8:	b2c91c49 	.word	0xb2c91c49
 101c6ac:	4904f840 	.word	0x4904f840
 101c6b0:	4011f832 	.word	0x4011f832
 101c6b4:	b2c91c49 	.word	0xb2c91c49
 101c6b8:	4904f840 	.word	0x4904f840
 101c6bc:	4011f832 	.word	0x4011f832
 101c6c0:	b2c91c49 	.word	0xb2c91c49
 101c6c4:	4904f840 	.word	0x4904f840
 101c6c8:	4011f832 	.word	0x4011f832
 101c6cc:	1e5b1c49 	.word	0x1e5b1c49
 101c6d0:	4904f840 	.word	0x4904f840
 101c6d4:	bc30d1e5 	.word	0xbc30d1e5
 101c6d8:	b5104770 	.word	0xb5104770
 101c6dc:	f7f94604 	.word	0xf7f94604
 101c6e0:	6260fa27 	.word	0x6260fa27
 101c6e4:	f0406aa0 	.word	0xf0406aa0
 101c6e8:	62a05080 	.word	0x62a05080
 101c6ec:	0000bd10 	.word	0x0000bd10
 101c6f0:	644107d3 	.word	0x644107d3
 101c6f4:	6641bf4c 	.word	0x6641bf4c
 101c6f8:	f0126601 	.word	0xf0126601
 101c6fc:	bf140f0a 	.word	0xbf140f0a
 101c700:	62416201 	.word	0x62416201
 101c704:	bf480793 	.word	0xbf480793
 101c708:	1080f8c0 	.word	0x1080f8c0
 101c70c:	0712d403 	.word	0x0712d403
 101c710:	f8c0bf48 	.word	0xf8c0bf48
 101c714:	61411084 	.word	0x61411084
 101c718:	47706001 	.word	0x47706001
 101c71c:	6441b081 	.word	0x6441b081
 101c720:	c004f8dd 	.word	0xc004f8dd
 101c724:	0f00f1bc 	.word	0x0f00f1bc
 101c728:	6641bf14 	.word	0x6641bf14
 101c72c:	2b006601 	.word	0x2b006601
 101c730:	6501bf14 	.word	0x6501bf14
 101c734:	2a006541 	.word	0x2a006541
 101c738:	6301bf14 	.word	0x6301bf14
 101c73c:	61016341 	.word	0x61016341
 101c740:	b0016001 	.word	0xb0016001
 101c744:	b5304770 	.word	0xb5304770
 101c748:	f1b4460c 	.word	0xf1b4460c
 101c74c:	46116f00 	.word	0x46116f00
 101c750:	461ab081 	.word	0x461ab081
 101c754:	f1b4bf18 	.word	0xf1b4bf18
 101c758:	d0115f80 	.word	0xd0115f80
 101c75c:	5fc0f1b4 	.word	0x5fc0f1b4
 101c760:	f1b4bf18 	.word	0xf1b4bf18
 101c764:	d00b5f00 	.word	0xd00b5f00
 101c768:	5f20f1b4 	.word	0x5f20f1b4
 101c76c:	f1b4d049 	.word	0xf1b4d049
 101c770:	bf185f40 	.word	0xbf185f40
 101c774:	5f60f1b4 	.word	0x5f60f1b4
 101c778:	2000d046 	.word	0x2000d046
 101c77c:	bd30b001 	.word	0xbd30b001
 101c780:	64412c00 	.word	0x64412c00
 101c784:	f1b4d036 	.word	0xf1b4d036
 101c788:	d0276f00 	.word	0xd0276f00
 101c78c:	5f80f1b4 	.word	0x5f80f1b4
 101c790:	f1b4d01c 	.word	0xf1b4d01c
 101c794:	d0115fc0 	.word	0xd0115fc0
 101c798:	5f00f1b4 	.word	0x5f00f1b4
 101c79c:	f1b4d008 	.word	0xf1b4d008
 101c7a0:	bf1c5f20 	.word	0xbf1c5f20
 101c7a4:	5f40f1b4 	.word	0x5f40f1b4
 101c7a8:	5f60f1b4 	.word	0x5f60f1b4
 101c7ac:	e020d022 	.word	0xe020d022
 101c7b0:	430b6f03 	.word	0x430b6f03
 101c7b4:	6f436703 	.word	0x6f436703
 101c7b8:	e019430b 	.word	0xe019430b
 101c7bc:	6f046f03 	.word	0x6f046f03
 101c7c0:	4023438b 	.word	0x4023438b
 101c7c4:	6f436703 	.word	0x6f436703
 101c7c8:	e011430b 	.word	0xe011430b
 101c7cc:	430b6f03 	.word	0x430b6f03
 101c7d0:	6f436703 	.word	0x6f436703
 101c7d4:	438b6f44 	.word	0x438b6f44
 101c7d8:	e0094023 	.word	0xe0094023
 101c7dc:	43cc6f03 	.word	0x43cc6f03
 101c7e0:	40236f05 	.word	0x40236f05
 101c7e4:	6703402b 	.word	0x6703402b
 101c7e8:	6f456f43 	.word	0x6f456f43
 101c7ec:	402b4023 	.word	0x402b4023
 101c7f0:	60416743 	.word	0x60416743
 101c7f4:	bf5407d2 	.word	0xbf5407d2
 101c7f8:	66416601 	.word	0x66416601
 101c7fc:	b0012001 	.word	0xb0012001
 101c800:	f7ffbd30 	.word	0xf7ffbd30
 101c804:	e7f9ff75 	.word	0xe7f9ff75
 101c808:	0501f002 	.word	0x0501f002
 101c80c:	f1b40892 	.word	0xf1b40892
 101c810:	f0025f60 	.word	0xf0025f60
 101c814:	95000301 	.word	0x95000301
 101c818:	2201bf0c 	.word	0x2201bf0c
 101c81c:	f7ff2200 	.word	0xf7ff2200
 101c820:	e7ebff7d 	.word	0xe7ebff7d
 101c824:	4101ea81 	.word	0x4101ea81
 101c828:	1b04f840 	.word	0x1b04f840
 101c82c:	d8fb3a02 	.word	0xd8fb3a02
 101c830:	e92d4770 	.word	0xe92d4770
 101c834:	b29d1ff0 	.word	0xb29d1ff0
 101c838:	ea4f4690 	.word	0xea4f4690
 101c83c:	462f4313 	.word	0x462f4313
 101c840:	0906f101 	.word	0x0906f101
 101c844:	74fff64f 	.word	0x74fff64f
 101c848:	0605eba3 	.word	0x0605eba3
 101c84c:	ab02f838 	.word	0xab02f838
 101c850:	bf3845a2 	.word	0xbf3845a2
 101c854:	1f3f4654 	.word	0x1f3f4654
 101c858:	f016d8f8 	.word	0xf016d8f8
 101c85c:	d00d0f03 	.word	0xd00d0f03
 101c860:	0601f1a6 	.word	0x0601f1a6
 101c864:	0902f1a9 	.word	0x0902f1a9
 101c868:	0f03f016 	.word	0x0f03f016
 101c86c:	f1a6d006 	.word	0xf1a6d006
 101c870:	f1090601 	.word	0xf1090601
 101c874:	f016090e 	.word	0xf016090e
 101c878:	d1f10f03 	.word	0xd1f10f03
 101c87c:	ab18f839 	.word	0xab18f839
 101c880:	bf3845a2 	.word	0xbf3845a2
 101c884:	1f364654 	.word	0x1f364654
 101c888:	eba3d1f8 	.word	0xeba3d1f8
 101c88c:	460e0305 	.word	0x460e0305
 101c890:	469346aa 	.word	0x469346aa
 101c894:	7b18f856 	.word	0x7b18f856
 101c898:	8b02f83b 	.word	0x8b02f83b
 101c89c:	f9a7fa0f 	.word	0xf9a7fa0f
 101c8a0:	fb84b23f 	.word	0xfb84b23f
 101c8a4:	fb849c09 	.word	0xfb849c09
 101c8a8:	fb997c07 	.word	0xfb997c07
 101c8ac:	fb97f9f8 	.word	0xfb97f9f8
 101c8b0:	f1baf7f8 	.word	0xf1baf7f8
 101c8b4:	eac70a04 	.word	0xeac70a04
 101c8b8:	f8404709 	.word	0xf8404709
 101c8bc:	d8e97b04 	.word	0xd8e97b04
 101c8c0:	0106f101 	.word	0x0106f101
 101c8c4:	0f03f013 	.word	0x0f03f013
 101c8c8:	f1a3d00d 	.word	0xf1a3d00d
 101c8cc:	f1a10301 	.word	0xf1a10301
 101c8d0:	f0130102 	.word	0xf0130102
 101c8d4:	d0060f03 	.word	0xd0060f03
 101c8d8:	0301f1a3 	.word	0x0301f1a3
 101c8dc:	010ef101 	.word	0x010ef101
 101c8e0:	0f03f013 	.word	0x0f03f013
 101c8e4:	f856d1f1 	.word	0xf856d1f1
 101c8e8:	f8317b18 	.word	0xf8317b18
 101c8ec:	fa0f8b18 	.word	0xfa0f8b18
 101c8f0:	b23ff9a7 	.word	0xb23ff9a7
 101c8f4:	9c09fb84 	.word	0x9c09fb84
 101c8f8:	7c07fb84 	.word	0x7c07fb84
 101c8fc:	f9f8fb99 	.word	0xf9f8fb99
 101c900:	f7f8fb97 	.word	0xf7f8fb97
 101c904:	eac71f1b 	.word	0xeac71f1b
 101c908:	f8404709 	.word	0xf8404709
 101c90c:	d1ea7b04 	.word	0xd1ea7b04
 101c910:	0118f101 	.word	0x0118f101
 101c914:	6b18f831 	.word	0x6b18f831
 101c918:	f8221f2d 	.word	0xf8221f2d
 101c91c:	d8f96b02 	.word	0xd8f96b02
 101c920:	e8bd4620 	.word	0xe8bd4620
 101c924:	47701ff0 	.word	0x47701ff0
 101c928:	01f0e92d 	.word	0x01f0e92d
 101c92c:	f883fa1f 	.word	0xf883fa1f
 101c930:	4313ea4f 	.word	0x4313ea4f
 101c934:	f303fb03 	.word	0xf303fb03
 101c938:	0400f06f 	.word	0x0400f06f
 101c93c:	f3f3fbb4 	.word	0xf3f3fbb4
 101c940:	f143085b 	.word	0xf143085b
 101c944:	f8500300 	.word	0xf8500300
 101c948:	e9d14b04 	.word	0xe9d14b04
 101c94c:	fb245600 	.word	0xfb245600
 101c950:	0964f404 	.word	0x0964f404
 101c954:	0400f144 	.word	0x0400f144
 101c958:	4703fba4 	.word	0x4703fba4
 101c95c:	eb46192d 	.word	0xeb46192d
 101c960:	e8e20607 	.word	0xe8e20607
 101c964:	e8e14702 	.word	0xe8e14702
 101c968:	f1b85602 	.word	0xf1b85602
 101c96c:	d1ea0801 	.word	0xd1ea0801
 101c970:	01f0e8bd 	.word	0x01f0e8bd
 101c974:	b4f04770 	.word	0xb4f04770
 101c978:	461d4604 	.word	0x461d4604
 101c97c:	0600f04f 	.word	0x0600f04f
 101c980:	7b04f854 	.word	0x7b04f854
 101c984:	f707fb27 	.word	0xf707fb27
 101c988:	bf8842b7 	.word	0xbf8842b7
 101c98c:	1e6d463e 	.word	0x1e6d463e
 101c990:	fba2d1f6 	.word	0xfba2d1f6
 101c994:	f8504506 	.word	0xf8504506
 101c998:	fb277b04 	.word	0xfb277b04
 101c99c:	42aff707 	.word	0x42aff707
 101c9a0:	2400bf8c 	.word	0x2400bf8c
 101c9a4:	1e5b2401 	.word	0x1e5b2401
 101c9a8:	4b01f801 	.word	0x4b01f801
 101c9ac:	bcf0d1f3 	.word	0xbcf0d1f3
 101c9b0:	88cb4770 	.word	0x88cb4770
 101c9b4:	f8203a01 	.word	0xf8203a01
 101c9b8:	d1fb3b02 	.word	0xd1fb3b02
 101c9bc:	e92d4770 	.word	0xe92d4770
 101c9c0:	f24001f0 	.word	0xf24001f0
 101c9c4:	ea4f3606 	.word	0xea4f3606
 101c9c8:	f04f0646 	.word	0xf04f0646
 101c9cc:	fbb60403 	.word	0xfbb60403
 101c9d0:	eba6f6f4 	.word	0xeba6f6f4
 101c9d4:	461f0603 	.word	0x461f0603
 101c9d8:	f1014690 	.word	0xf1014690
 101c9dc:	f8510406 	.word	0xf8510406
 101c9e0:	f8405b18 	.word	0xf8405b18
 101c9e4:	3b045b04 	.word	0x3b045b04
 101c9e8:	5b02f832 	.word	0x5b02f832
 101c9ec:	5b02f820 	.word	0x5b02f820
 101c9f0:	f016dcf5 	.word	0xf016dcf5
 101c9f4:	d00d0f03 	.word	0xd00d0f03
 101c9f8:	0601f1a6 	.word	0x0601f1a6
 101c9fc:	0402f1a4 	.word	0x0402f1a4
 101ca00:	0f03f016 	.word	0x0f03f016
 101ca04:	f1a6d006 	.word	0xf1a6d006
 101ca08:	f1040601 	.word	0xf1040601
 101ca0c:	f016040e 	.word	0xf016040e
 101ca10:	d1f10f03 	.word	0xd1f10f03
 101ca14:	5b18f851 	.word	0x5b18f851
 101ca18:	3b18f834 	.word	0x3b18f834
 101ca1c:	f8403e04 	.word	0xf8403e04
 101ca20:	f8205b04 	.word	0xf8205b04
 101ca24:	d1f53b02 	.word	0xd1f53b02
 101ca28:	5b18f834 	.word	0x5b18f834
 101ca2c:	f8283f02 	.word	0xf8283f02
 101ca30:	d8f95b02 	.word	0xd8f95b02
 101ca34:	01f0e8bd 	.word	0x01f0e8bd
 101ca38:	b4704770 	.word	0xb4704770
 101ca3c:	0102f101 	.word	0x0102f101
 101ca40:	3206f240 	.word	0x3206f240
 101ca44:	4b04f931 	.word	0x4b04f931
 101ca48:	bf462c00 	.word	0xbf462c00
 101ca4c:	42642580 	.word	0x42642580
 101ca50:	f1042500 	.word	0xf1042500
 101ca54:	f3840421 	.word	0xf3840421
 101ca58:	fab4040d 	.word	0xfab4040d
 101ca5c:	f1c3f384 	.word	0xf1c3f384
 101ca60:	2b00031a 	.word	0x2b00031a
 101ca64:	2300bf48 	.word	0x2300bf48
 101ca68:	1503eb05 	.word	0x1503eb05
 101ca6c:	0301f103 	.word	0x0301f103
 101ca70:	f403fa24 	.word	0xf403fa24
 101ca74:	040ff004 	.word	0x040ff004
 101ca78:	f0854425 	.word	0xf0854425
 101ca7c:	f80005ff 	.word	0xf80005ff
 101ca80:	3a015b01 	.word	0x3a015b01
 101ca84:	bc70d1de 	.word	0xbc70d1de
 101ca88:	00004770 	.word	0x00004770
 101ca8c:	f0022200 	.word	0xf0022200
 101ca90:	0000bb7d 	.word	0x0000bb7d
 101ca94:	4df0e92d 	.word	0x4df0e92d
 101ca98:	460f4606 	.word	0x460f4606
 101ca9c:	200a4690 	.word	0x200a4690
 101caa0:	fbcaf7f7 	.word	0xfbcaf7f7
 101caa4:	00384605 	.word	0x00384605
 101caa8:	d034463c 	.word	0xd034463c
 101caac:	6ae0f44f 	.word	0x6ae0f44f
 101cab0:	f7f72018 	.word	0xf7f72018
 101cab4:	f836fcfd 	.word	0xf836fcfd
 101cab8:	f44f1b02 	.word	0xf44f1b02
 101cabc:	22406000 	.word	0x22406000
 101cac0:	f0024428 	.word	0xf0024428
 101cac4:	f44ffb7d 	.word	0xf44ffb7d
 101cac8:	46516010 	.word	0x46516010
 101cacc:	f7f74428 	.word	0xf7f74428
 101cad0:	2018f9bd 	.word	0x2018f9bd
 101cad4:	fd0ef7f7 	.word	0xfd0ef7f7
 101cad8:	db182f02 	.word	0xdb182f02
 101cadc:	f7f74628 	.word	0xf7f74628
 101cae0:	4683fb5f 	.word	0x4683fb5f
 101cae4:	f44f2202 	.word	0xf44f2202
 101cae8:	f7f77100 	.word	0xf7f77100
 101caec:	b2e0fb86 	.word	0xb2e0fb86
 101caf0:	d10642b8 	.word	0xd10642b8
 101caf4:	6200f44f 	.word	0x6200f44f
 101caf8:	46404659 	.word	0x46404659
 101cafc:	f9aaf7f7 	.word	0xf9aaf7f7
 101cb00:	f44fe005 	.word	0xf44fe005
 101cb04:	46597200 	.word	0x46597200
 101cb08:	f0024640 	.word	0xf0024640
 101cb0c:	1e64fba6 	.word	0x1e64fba6
 101cb10:	2800b2e0 	.word	0x2800b2e0
 101cb14:	2f01d1cc 	.word	0x2f01d1cc
 101cb18:	f44fd103 	.word	0xf44fd103
 101cb1c:	182e6000 	.word	0x182e6000
 101cb20:	f44fe00c 	.word	0xf44fe00c
 101cb24:	46416200 	.word	0x46416200
 101cb28:	f7f718a8 	.word	0xf7f718a8
 101cb2c:	4628f993 	.word	0x4628f993
 101cb30:	fb54f7f7 	.word	0xfb54f7f7
 101cb34:	21804606 	.word	0x21804606
 101cb38:	fba5f002 	.word	0xfba5f002
 101cb3c:	46412240 	.word	0x46412240
 101cb40:	f0024630 	.word	0xf0024630
 101cb44:	f04ffbba 	.word	0xf04ffbba
 101cb48:	49114080 	.word	0x49114080
 101cb4c:	69c16101 	.word	0x69c16101
 101cb50:	46422380 	.word	0x46422380
 101cb54:	01490949 	.word	0x01490949
 101cb58:	69c161c1 	.word	0x69c161c1
 101cb5c:	0109f041 	.word	0x0109f041
 101cb60:	210061c1 	.word	0x210061c1
 101cb64:	fd85f7ff 	.word	0xfd85f7ff
 101cb68:	6000f44f 	.word	0x6000f44f
 101cb6c:	7280f44f 	.word	0x7280f44f
 101cb70:	44284631 	.word	0x44284631
 101cb74:	faaaf7fc 	.word	0xfaaaf7fc
 101cb78:	6010f44f 	.word	0x6010f44f
 101cb7c:	61e0f44f 	.word	0x61e0f44f
 101cb80:	f7f74428 	.word	0xf7f74428
 101cb84:	4628f963 	.word	0x4628f963
 101cb88:	4df0e8bd 	.word	0x4df0e8bd
 101cb8c:	bb08f7f7 	.word	0xbb08f7f7
 101cb90:	107f0101 	.word	0x107f0101
 101cb94:	00004770 	.word	0x00004770
 101cb98:	f7fcb51f 	.word	0xf7fcb51f
 101cb9c:	2121fae7 	.word	0x2121fae7
 101cba0:	bd1f6001 	.word	0xbd1f6001
 101cba4:	00004770 	.word	0x00004770
 101cba8:	5ff0e92d 	.word	0x5ff0e92d
 101cbac:	895f891e 	.word	0x895f891e
 101cbb0:	0800f04f 	.word	0x0800f04f
 101cbb4:	0900f04f 	.word	0x0900f04f
 101cbb8:	0a00f04f 	.word	0x0a00f04f
 101cbbc:	5b04f850 	.word	0x5b04f850
 101cbc0:	11e4b22c 	.word	0x11e4b22c
 101cbc4:	0400f144 	.word	0x0400f144
 101cbc8:	f30415ed 	.word	0xf30415ed
 101cbcc:	f1450407 	.word	0xf1450407
 101cbd0:	f3050500 	.word	0xf3050500
 101cbd4:	2c000507 	.word	0x2c000507
 101cbd8:	44a0bf59 	.word	0x44a0bf59
 101cbdc:	eba844a9 	.word	0xeba844a9
 101cbe0:	eba90804 	.word	0xeba90804
 101cbe4:	2d000905 	.word	0x2d000905
 101cbe8:	44a8bf59 	.word	0x44a8bf59
 101cbec:	0904eba9 	.word	0x0904eba9
 101cbf0:	0805eba8 	.word	0x0805eba8
 101cbf4:	f10a44a1 	.word	0xf10a44a1
 101cbf8:	f3640a01 	.word	0xf3640a01
 101cbfc:	45ba250f 	.word	0x45ba250f
 101cc00:	5b02f821 	.word	0x5b02f821
 101cc04:	45b2d015 	.word	0x45b2d015
 101cc08:	4592d01a 	.word	0x4592d01a
 101cc0c:	f000d1d6 	.word	0xf000d1d6
 101cc10:	4658f803 	.word	0x4658f803
 101cc14:	9ff0e8bd 	.word	0x9ff0e8bd
 101cc18:	0bd8ea5f 	.word	0x0bd8ea5f
 101cc1c:	0b00f14b 	.word	0x0b00f14b
 101cc20:	0ce9ea5f 	.word	0x0ce9ea5f
 101cc24:	0c00f14c 	.word	0x0c00f14c
 101cc28:	fb0bfb0b 	.word	0xfb0bfb0b
 101cc2c:	bb0cfb0c 	.word	0xbb0cfb0c
 101cc30:	f7ff4770 	.word	0xf7ff4770
 101cc34:	f8d3fff1 	.word	0xf8d3fff1
 101cc38:	f8ccc004 	.word	0xf8ccc004
 101cc3c:	e7e2b000 	.word	0xe7e2b000
 101cc40:	ffeaf7ff 	.word	0xffeaf7ff
 101cc44:	c000f8d3 	.word	0xc000f8d3
 101cc48:	b000f8cc 	.word	0xb000f8cc
 101cc4c:	e92de7dd 	.word	0xe92de7dd
 101cc50:	f85207f0 	.word	0xf85207f0
 101cc54:	78145b06 	.word	0x78145b06
 101cc58:	0a00f04f 	.word	0x0a00f04f
 101cc5c:	f04f4698 	.word	0xf04f4698
 101cc60:	f8500900 	.word	0xf8500900
 101cc64:	f8507b10 	.word	0xf8507b10
 101cc68:	10ff6b10 	.word	0x10ff6b10
 101cc6c:	0700f147 	.word	0x0700f147
 101cc70:	fb0710f6 	.word	0xfb0710f6
 101cc74:	f146f707 	.word	0xf146f707
 101cc78:	ebb40600 	.word	0xebb40600
 101cc7c:	fb060f53 	.word	0xfb060f53
 101cc80:	d3057706 	.word	0xd3057706
 101cc84:	d803428f 	.word	0xd803428f
 101cc88:	0801f1b8 	.word	0x0801f1b8
 101cc8c:	e011d1e9 	.word	0xe011d1e9
 101cc90:	bf8242af 	.word	0xbf8242af
 101cc94:	4682463d 	.word	0x4682463d
 101cc98:	3c01085c 	.word	0x3c01085c
 101cc9c:	f1b8d003 	.word	0xf1b8d003
 101cca0:	d1de0801 	.word	0xd1de0801
 101cca4:	f1b8e006 	.word	0xf1b8e006
 101cca8:	ea4f0801 	.word	0xea4f0801
 101ccac:	f04f0453 	.word	0xf04f0453
 101ccb0:	d1d60901 	.word	0xd1d60901
 101ccb4:	0f53ebb4 	.word	0x0f53ebb4
 101ccb8:	4902f802 	.word	0x4902f802
 101ccbc:	a904f822 	.word	0xa904f822
 101ccc0:	bf0c6015 	.word	0xbf0c6015
 101ccc4:	20004648 	.word	0x20004648
 101ccc8:	07f0e8bd 	.word	0x07f0e8bd
 101cccc:	b4704770 	.word	0xb4704770
 101ccd0:	0002f100 	.word	0x0002f100
 101ccd4:	0300f04f 	.word	0x0300f04f
 101ccd8:	0400f04f 	.word	0x0400f04f
 101ccdc:	5b01f811 	.word	0x5b01f811
 101cce0:	6b04f930 	.word	0x6b04f930
 101cce4:	d1052d00 	.word	0xd1052d00
 101cce8:	f1042e00 	.word	0xf1042e00
 101ccec:	bf4c0401 	.word	0xbf4c0401
 101ccf0:	199b1b9b 	.word	0x199b1b9b
 101ccf4:	d1f11e52 	.word	0xd1f11e52
 101ccf8:	0354eb03 	.word	0x0354eb03
 101ccfc:	f0f4fbb3 	.word	0xf0f4fbb3
 101cd00:	4770bc70 	.word	0x4770bc70
 101cd04:	1ff0e92d 	.word	0x1ff0e92d
 101cd08:	0301f04f 	.word	0x0301f04f
 101cd0c:	0301f2c0 	.word	0x0301f2c0
 101cd10:	5602e8f0 	.word	0x5602e8f0
 101cd14:	7802e8f0 	.word	0x7802e8f0
 101cd18:	9a02e8f0 	.word	0x9a02e8f0
 101cd1c:	bc02e8f0 	.word	0xbc02e8f0
 101cd20:	35d5ea03 	.word	0x35d5ea03
 101cd24:	36d6ea03 	.word	0x36d6ea03
 101cd28:	37d7ea03 	.word	0x37d7ea03
 101cd2c:	38d8ea03 	.word	0x38d8ea03
 101cd30:	39d9ea03 	.word	0x39d9ea03
 101cd34:	3adaea03 	.word	0x3adaea03
 101cd38:	3bdbea03 	.word	0x3bdbea03
 101cd3c:	3cdcea03 	.word	0x3cdcea03
 101cd40:	35d5ea85 	.word	0x35d5ea85
 101cd44:	36d6ea86 	.word	0x36d6ea86
 101cd48:	37d7ea87 	.word	0x37d7ea87
 101cd4c:	38d8ea88 	.word	0x38d8ea88
 101cd50:	39d9ea89 	.word	0x39d9ea89
 101cd54:	3adaea8a 	.word	0x3adaea8a
 101cd58:	3bdbea8b 	.word	0x3bdbea8b
 101cd5c:	3cdcea8c 	.word	0x3cdcea8c
 101cd60:	749ff365 	.word	0x749ff365
 101cd64:	741df366 	.word	0x741df366
 101cd68:	649bf367 	.word	0x649bf367
 101cd6c:	6419f368 	.word	0x6419f368
 101cd70:	5497f369 	.word	0x5497f369
 101cd74:	5415f36a 	.word	0x5415f36a
 101cd78:	4493f36b 	.word	0x4493f36b
 101cd7c:	4411f36c 	.word	0x4411f36c
 101cd80:	5602e8f0 	.word	0x5602e8f0
 101cd84:	7802e8f0 	.word	0x7802e8f0
 101cd88:	9a02e8f0 	.word	0x9a02e8f0
 101cd8c:	bc02e8f0 	.word	0xbc02e8f0
 101cd90:	35d5ea03 	.word	0x35d5ea03
 101cd94:	36d6ea03 	.word	0x36d6ea03
 101cd98:	37d7ea03 	.word	0x37d7ea03
 101cd9c:	38d8ea03 	.word	0x38d8ea03
 101cda0:	39d9ea03 	.word	0x39d9ea03
 101cda4:	3adaea03 	.word	0x3adaea03
 101cda8:	3bdbea03 	.word	0x3bdbea03
 101cdac:	3cdcea03 	.word	0x3cdcea03
 101cdb0:	35d5ea85 	.word	0x35d5ea85
 101cdb4:	36d6ea86 	.word	0x36d6ea86
 101cdb8:	37d7ea87 	.word	0x37d7ea87
 101cdbc:	38d8ea88 	.word	0x38d8ea88
 101cdc0:	39d9ea89 	.word	0x39d9ea89
 101cdc4:	3adaea8a 	.word	0x3adaea8a
 101cdc8:	3bdbea8b 	.word	0x3bdbea8b
 101cdcc:	3cdcea8c 	.word	0x3cdcea8c
 101cdd0:	348ff365 	.word	0x348ff365
 101cdd4:	340df366 	.word	0x340df366
 101cdd8:	248bf367 	.word	0x248bf367
 101cddc:	2409f368 	.word	0x2409f368
 101cde0:	1487f369 	.word	0x1487f369
 101cde4:	1405f36a 	.word	0x1405f36a
 101cde8:	0483f36b 	.word	0x0483f36b
 101cdec:	0401f36c 	.word	0x0401f36c
 101cdf0:	f4a4fa94 	.word	0xf4a4fa94
 101cdf4:	f8413a10 	.word	0xf8413a10
 101cdf8:	d1894b08 	.word	0xd1894b08
 101cdfc:	1ff0e8bd 	.word	0x1ff0e8bd
 101ce00:	b4f04770 	.word	0xb4f04770
 101ce04:	4b04f850 	.word	0x4b04f850
 101ce08:	5b04f851 	.word	0x5b04f851
 101ce0c:	f605fb24 	.word	0xf605fb24
 101ce10:	f714fb45 	.word	0xf714fb45
 101ce14:	bfb42e00 	.word	0xbfb42e00
 101ce18:	46344274 	.word	0x46344274
 101ce1c:	f484fab4 	.word	0xf484fab4
 101ce20:	bfb42f00 	.word	0xbfb42f00
 101ce24:	463d427d 	.word	0x463d427d
 101ce28:	f585fab5 	.word	0xf585fab5
 101ce2c:	bf3842a5 	.word	0xbf3842a5
 101ce30:	1ea4462c 	.word	0x1ea4462c
 101ce34:	fa06d903 	.word	0xfa06d903
 101ce38:	fa07f604 	.word	0xfa07f604
 101ce3c:	eac7f704 	.word	0xeac7f704
 101ce40:	f8424426 	.word	0xf8424426
 101ce44:	3b014b04 	.word	0x3b014b04
 101ce48:	bcf0d1dc 	.word	0xbcf0d1dc
 101ce4c:	b4304770 	.word	0xb4304770
 101ce50:	3b04f851 	.word	0x3b04f851
 101ce54:	b21d6804 	.word	0xb21d6804
 101ce58:	f3a3fa0f 	.word	0xf3a3fa0f
 101ce5c:	f584fa05 	.word	0xf584fa05
 101ce60:	f3a4fa03 	.word	0xf3a4fa03
 101ce64:	bfb42d00 	.word	0xbfb42d00
 101ce68:	462c426c 	.word	0x462c426c
 101ce6c:	3494ea4f 	.word	0x3494ea4f
 101ce70:	d1072c00 	.word	0xd1072c00
 101ce74:	bfb42b00 	.word	0xbfb42b00
 101ce78:	461c425c 	.word	0x461c425c
 101ce7c:	3494ea4f 	.word	0x3494ea4f
 101ce80:	d0ff2c00 	.word	0xd0ff2c00
 101ce84:	f145106d 	.word	0xf145106d
 101ce88:	105b0500 	.word	0x105b0500
 101ce8c:	0300f143 	.word	0x0300f143
 101ce90:	4503eac5 	.word	0x4503eac5
 101ce94:	f8401e52 	.word	0xf8401e52
 101ce98:	d1d95b04 	.word	0xd1d95b04
 101ce9c:	4770bc30 	.word	0x4770bc30
 101cea0:	01f0e92d 	.word	0x01f0e92d
 101cea4:	4614460f 	.word	0x4614460f
 101cea8:	0500f04f 	.word	0x0500f04f
 101ceac:	6b04f837 	.word	0x6b04f837
 101ceb0:	44351e64 	.word	0x44351e64
 101ceb4:	eb05d1fa 	.word	0xeb05d1fa
 101ceb8:	46140552 	.word	0x46140552
 101cebc:	f5f2fbb5 	.word	0xf5f2fbb5
 101cec0:	f503fb05 	.word	0xf503fb05
 101cec4:	0600f04f 	.word	0x0600f04f
 101cec8:	460b08ed 	.word	0x460b08ed
 101cecc:	0500f145 	.word	0x0500f145
 101ced0:	0700f04f 	.word	0x0700f04f
 101ced4:	8b04f833 	.word	0x8b04f833
 101ced8:	bf8445a8 	.word	0xbf8445a8
 101cedc:	e0022701 	.word	0xe0022701
 101cee0:	bf8845b0 	.word	0xbf8845b0
 101cee4:	1e644646 	.word	0x1e644646
 101cee8:	2f00d1f4 	.word	0x2f00d1f4
 101ceec:	f831d016 	.word	0xf831d016
 101cef0:	f8503b04 	.word	0xf8503b04
 101cef4:	42b34b04 	.word	0x42b34b04
 101cef8:	fa0fd30e 	.word	0xfa0fd30e
 101cefc:	b224f5a4 	.word	0xb224f5a4
 101cf00:	f506fb05 	.word	0xf506fb05
 101cf04:	f406fb04 	.word	0xf406fb04
 101cf08:	f5f3fb95 	.word	0xf5f3fb95
 101cf0c:	f4f3fb94 	.word	0xf4f3fb94
 101cf10:	4405eac4 	.word	0x4405eac4
 101cf14:	4c04f840 	.word	0x4c04f840
 101cf18:	d1e81e52 	.word	0xd1e81e52
 101cf1c:	01f0e8bd 	.word	0x01f0e8bd
 101cf20:	f04f4770 	.word	0xf04f4770
 101cf24:	f8500200 	.word	0xf8500200
 101cf28:	fb233b04 	.word	0xfb233b04
 101cf2c:	4293f303 	.word	0x4293f303
 101cf30:	461abf88 	.word	0x461abf88
 101cf34:	d1f61e49 	.word	0xd1f61e49
 101cf38:	47704610 	.word	0x47704610
 101cf3c:	f643b470 	.word	0xf643b470
 101cf40:	ea4f74ff 	.word	0xea4f74ff
 101cf44:	eb044444 	.word	0xeb044444
 101cf48:	fbb40452 	.word	0xfbb40452
 101cf4c:	f850f2f2 	.word	0xf850f2f2
 101cf50:	b2254b04 	.word	0xb2254b04
 101cf54:	f6a4fa0f 	.word	0xf6a4fa0f
 101cf58:	f502fb05 	.word	0xf502fb05
 101cf5c:	f602fb06 	.word	0xf602fb06
 101cf60:	f145146d 	.word	0xf145146d
 101cf64:	14760500 	.word	0x14760500
 101cf68:	0600f146 	.word	0x0600f146
 101cf6c:	4506eac5 	.word	0x4506eac5
 101cf70:	f8411e5b 	.word	0xf8411e5b
 101cf74:	d1ea5b04 	.word	0xd1ea5b04
 101cf78:	4770bc70 	.word	0x4770bc70
 101cf7c:	f850b4f0 	.word	0xf850b4f0
 101cf80:	f8314b04 	.word	0xf8314b04
 101cf84:	b2265b04 	.word	0xb2265b04
 101cf88:	f7a4fa0f 	.word	0xf7a4fa0f
 101cf8c:	f605fb06 	.word	0xf605fb06
 101cf90:	f705fb07 	.word	0xf705fb07
 101cf94:	f14613b6 	.word	0xf14613b6
 101cf98:	13bf0600 	.word	0x13bf0600
 101cf9c:	0700f147 	.word	0x0700f147
 101cfa0:	4607eac6 	.word	0x4607eac6
 101cfa4:	f8421e5b 	.word	0xf8421e5b
 101cfa8:	d1e86b04 	.word	0xd1e86b04
 101cfac:	4770bcf0 	.word	0x4770bcf0
 101cfb0:	ea4fb530 	.word	0xea4fb530
 101cfb4:	680c0583 	.word	0x680c0583
 101cfb8:	4b04f840 	.word	0x4b04f840
 101cfbc:	1ad24429 	.word	0x1ad24429
 101cfc0:	bd30dcf9 	.word	0xbd30dcf9
 101cfc4:	0a10ee10 	.word	0x0a10ee10
 101cfc8:	52c7f3c0 	.word	0x52c7f3c0
 101cfcc:	bfcc3a7e 	.word	0xbfcc3a7e
 101cfd0:	0c18f1d2 	.word	0x0c18f1d2
 101cfd4:	f06fe009 	.word	0xf06fe009
 101cfd8:	40d1417f 	.word	0x40d1417f
 101cfdc:	bf584200 	.word	0xbf584200
 101cfe0:	43881840 	.word	0x43881840
 101cfe4:	0a10ee00 	.word	0x0a10ee00
 101cfe8:	2a184770 	.word	0x2a184770
 101cfec:	42c0da08 	.word	0x42c0da08
 101cff0:	f04fbf18 	.word	0xf04fbf18
 101cff4:	bf28507e 	.word	0xbf28507e
 101cff8:	4000f04f 	.word	0x4000f04f
 101cffc:	0a10ee00 	.word	0x0a10ee00
 101d000:	00004770 	.word	0x00004770
 101d004:	4ff8e92d 	.word	0x4ff8e92d
 101d008:	f10b468b 	.word	0xf10b468b
 101d00c:	fb9101ff 	.word	0xfb9101ff
 101d010:	4680f1fb 	.word	0x4680f1fb
 101d014:	4610b2c9 	.word	0x4610b2c9
 101d018:	f70bfb11 	.word	0xf70bfb11
 101d01c:	b0842803 	.word	0xb0842803
 101d020:	53e4f8df 	.word	0x53e4f8df
 101d024:	882bb2bf 	.word	0x882bb2bf
 101d028:	68acda0a 	.word	0x68acda0a
 101d02c:	465a4378 	.word	0x465a4378
 101d030:	b0054641 	.word	0xb0054641
 101d034:	44184423 	.word	0x44184423
 101d038:	4ff0e8bd 	.word	0x4ff0e8bd
 101d03c:	bf0af7f6 	.word	0xbf0af7f6
 101d040:	0403eb0b 	.word	0x0403eb0b
 101d044:	2cffb2a4 	.word	0x2cffb2a4
 101d048:	dc049403 	.word	0xdc049403
 101d04c:	1010f89d 	.word	0x1010f89d
 101d050:	f0002900 	.word	0xf0002900
 101d054:	f89d80bd 	.word	0xf89d80bd
 101d058:	b1080010 	.word	0xb1080010
 101d05c:	e0070864 	.word	0xe0070864
 101d060:	00c0f1a4 	.word	0x00c0f1a4
 101d064:	301f1040 	.word	0x301f1040
 101d068:	71e0f64f 	.word	0x71e0f64f
 101d06c:	0400ea01 	.word	0x0400ea01
 101d070:	f7f7200d 	.word	0xf7f7200d
 101d074:	4681f8e1 	.word	0x4681f8e1
 101d078:	ea4f0420 	.word	0xea4f0420
 101d07c:	68684ad0 	.word	0x68684ad0
 101d080:	46494652 	.word	0x46494652
 101d084:	ff88f7f6 	.word	0xff88f7f6
 101d088:	120aea4f 	.word	0x120aea4f
 101d08c:	b2922301 	.word	0xb2922301
 101d090:	46484649 	.word	0x46484649
 101d094:	ff1af7f6 	.word	0xff1af7f6
 101d098:	23106868 	.word	0x23106868
 101d09c:	44504649 	.word	0x44504649
 101d0a0:	0a44ea4f 	.word	0x0a44ea4f
 101d0a4:	fa1f6068 	.word	0xfa1f6068
 101d0a8:	68a8fa8a 	.word	0x68a8fa8a
 101d0ac:	90004652 	.word	0x90004652
 101d0b0:	f0022400 	.word	0xf0022400
 101d0b4:	0006f90b 	.word	0x0006f90b
 101d0b8:	46529800 	.word	0x46529800
 101d0bc:	44384649 	.word	0x44384649
 101d0c0:	98029002 	.word	0x98029002
 101d0c4:	4634bf18 	.word	0x4634bf18
 101d0c8:	f0022311 	.word	0xf0022311
 101d0cc:	9000f8ff 	.word	0x9000f8ff
 101d0d0:	42841b80 	.word	0x42841b80
 101d0d4:	46494652 	.word	0x46494652
 101d0d8:	4604bf38 	.word	0x4604bf38
 101d0dc:	23129802 	.word	0x23129802
 101d0e0:	463019c6 	.word	0x463019c6
 101d0e4:	f8f2f002 	.word	0xf8f2f002
 101d0e8:	90029900 	.word	0x90029900
 101d0ec:	42841a40 	.word	0x42841a40
 101d0f0:	4604bf38 	.word	0x4604bf38
 101d0f4:	19f49400 	.word	0x19f49400
 101d0f8:	45b2882e 	.word	0x45b2882e
 101d0fc:	4656bfb8 	.word	0x4656bfb8
 101d100:	45562000 	.word	0x45562000
 101d104:	0004f8ad 	.word	0x0004f8ad
 101d108:	ebaabfbc 	.word	0xebaabfbc
 101d10c:	f8ad0006 	.word	0xf8ad0006
 101d110:	20000004 	.word	0x20000004
 101d114:	2313b12e 	.word	0x2313b12e
 101d118:	46494632 	.word	0x46494632
 101d11c:	f0024620 	.word	0xf0024620
 101d120:	f8bdf8d5 	.word	0xf8bdf8d5
 101d124:	b1411004 	.word	0xb1411004
 101d128:	eb09460a 	.word	0xeb09460a
 101d12c:	460401e6 	.word	0x460401e6
 101d130:	46402313 	.word	0x46402313
 101d134:	f8caf002 	.word	0xf8caf002
 101d138:	99021900 	.word	0x99021900
 101d13c:	1a419a00 	.word	0x1a419a00
 101d140:	bf38428a 	.word	0xbf38428a
 101d144:	68e9460a 	.word	0x68e9460a
 101d148:	60e81840 	.word	0x60e81840
 101d14c:	eb006928 	.word	0xeb006928
 101d150:	61280082 	.word	0x61280082
 101d154:	0010f89d 	.word	0x0010f89d
 101d158:	d1432800 	.word	0xd1432800
 101d15c:	f8d59803 	.word	0xf8d59803
 101d160:	eba09008 	.word	0xeba09008
 101d164:	b2a4040a 	.word	0xb2a4040a
 101d168:	eb094622 	.word	0xeb094622
 101d16c:	4648010a 	.word	0x4648010a
 101d170:	ffacf7fb 	.word	0xffacf7fb
 101d174:	462244b9 	.word	0x462244b9
 101d178:	010aeb09 	.word	0x010aeb09
 101d17c:	f7fb4648 	.word	0xf7fb4648
 101d180:	44b9ffa5 	.word	0x44b9ffa5
 101d184:	eb094622 	.word	0xeb094622
 101d188:	4648010a 	.word	0x4648010a
 101d18c:	ff9ef7fb 	.word	0xff9ef7fb
 101d190:	eb098828 	.word	0xeb098828
 101d194:	1b870407 	.word	0x1b870407
 101d198:	b127b2bf 	.word	0xb127b2bf
 101d19c:	19a1463a 	.word	0x19a1463a
 101d1a0:	f7fb4620 	.word	0xf7fb4620
 101d1a4:	f8bdff93 	.word	0xf8bdff93
 101d1a8:	ebab0004 	.word	0xebab0004
 101d1ac:	fa1f0b00 	.word	0xfa1f0b00
 101d1b0:	f1bbfb8b 	.word	0xf1bbfb8b
 101d1b4:	d0050f00 	.word	0xd0050f00
 101d1b8:	0100eb08 	.word	0x0100eb08
 101d1bc:	19e0465a 	.word	0x19e0465a
 101d1c0:	fe48f7f6 	.word	0xfe48f7f6
 101d1c4:	0007eb0b 	.word	0x0007eb0b
 101d1c8:	b0058028 	.word	0xb0058028
 101d1cc:	8ff0e8bd 	.word	0x8ff0e8bd
 101d1d0:	f8d54641 	.word	0xf8d54641
 101d1d4:	43788008 	.word	0x43788008
 101d1d8:	4443465a 	.word	0x4443465a
 101d1dc:	f7f64418 	.word	0xf7f64418
 101d1e0:	802cfe39 	.word	0x802cfe39
 101d1e4:	e8bdb005 	.word	0xe8bdb005
 101d1e8:	e92d8ff0 	.word	0xe92d8ff0
 101d1ec:	46814ff0 	.word	0x46814ff0
 101d1f0:	88384f85 	.word	0x88384f85
 101d1f4:	b081468a 	.word	0xb081468a
 101d1f8:	eb0a4616 	.word	0xeb0a4616
 101d1fc:	fa1f0800 	.word	0xfa1f0800
 101d200:	f1b8f888 	.word	0xf1b8f888
 101d204:	dc010fff 	.word	0xdc010fff
 101d208:	d05d0032 	.word	0xd05d0032
 101d20c:	bf180030 	.word	0xbf180030
 101d210:	0458ea4f 	.word	0x0458ea4f
 101d214:	f1a8d107 	.word	0xf1a8d107
 101d218:	104000c0 	.word	0x104000c0
 101d21c:	f64f301f 	.word	0xf64f301f
 101d220:	ea0171e0 	.word	0xea0171e0
 101d224:	200d0400 	.word	0x200d0400
 101d228:	0b00f04f 	.word	0x0b00f04f
 101d22c:	f804f7f7 	.word	0xf804f7f7
 101d230:	04204680 	.word	0x04204680
 101d234:	68780cc5 	.word	0x68780cc5
 101d238:	4641462a 	.word	0x4641462a
 101d23c:	feacf7f6 	.word	0xfeacf7f6
 101d240:	19406878 	.word	0x19406878
 101d244:	00606078 	.word	0x00606078
 101d248:	b280883c 	.word	0xb280883c
 101d24c:	bfb842a0 	.word	0xbfb842a0
 101d250:	25004604 	.word	0x25004604
 101d254:	bfb84284 	.word	0xbfb84284
 101d258:	b1341b05 	.word	0xb1341b05
 101d25c:	230068b8 	.word	0x230068b8
 101d260:	46414622 	.word	0x46414622
 101d264:	f832f002 	.word	0xf832f002
 101d268:	b2a84683 	.word	0xb2a84683
 101d26c:	eb08b138 	.word	0xeb08b138
 101d270:	230001e4 	.word	0x230001e4
 101d274:	4648b2aa 	.word	0x4648b2aa
 101d278:	f828f002 	.word	0xf828f002
 101d27c:	68f84483 	.word	0x68f84483
 101d280:	60f84458 	.word	0x60f84458
 101d284:	44586938 	.word	0x44586938
 101d288:	bb2e6138 	.word	0xbb2e6138
 101d28c:	1b068838 	.word	0x1b068838
 101d290:	b126b2b6 	.word	0xb126b2b6
 101d294:	463268b8 	.word	0x463268b8
 101d298:	f7fb1901 	.word	0xf7fb1901
 101d29c:	ebaaff17 	.word	0xebaaff17
 101d2a0:	fa1f0a05 	.word	0xfa1f0a05
 101d2a4:	f1bafa8a 	.word	0xf1bafa8a
 101d2a8:	d0070f00 	.word	0xd0070f00
 101d2ac:	b2ad68b8 	.word	0xb2ad68b8
 101d2b0:	eb094652 	.word	0xeb094652
 101d2b4:	44300105 	.word	0x44300105
 101d2b8:	fdccf7f6 	.word	0xfdccf7f6
 101d2bc:	0006eb0a 	.word	0x0006eb0a
 101d2c0:	8038b001 	.word	0x8038b001
 101d2c4:	8ff0e8bd 	.word	0x8ff0e8bd
 101d2c8:	465268bb 	.word	0x465268bb
 101d2cc:	44184649 	.word	0x44184649
 101d2d0:	fdc0f7f6 	.word	0xfdc0f7f6
 101d2d4:	8000f8a7 	.word	0x8000f8a7
 101d2d8:	e8bdb001 	.word	0xe8bdb001
 101d2dc:	b5008ff0 	.word	0xb5008ff0
 101d2e0:	f002b081 	.word	0xf002b081
 101d2e4:	4948f823 	.word	0x4948f823
 101d2e8:	68cab001 	.word	0x68cab001
 101d2ec:	0240eb02 	.word	0x0240eb02
 101d2f0:	690a60ca 	.word	0x690a60ca
 101d2f4:	0040eb02 	.word	0x0040eb02
 101d2f8:	bd006108 	.word	0xbd006108
 101d2fc:	4ff0e92d 	.word	0x4ff0e92d
 101d300:	1e584680 	.word	0x1e584680
 101d304:	2803b2c0 	.word	0x2803b2c0
 101d308:	4d3fb081 	.word	0x4d3fb081
 101d30c:	46174689 	.word	0x46174689
 101d310:	da0768ae 	.word	0xda0768ae
 101d314:	46414378 	.word	0x46414378
 101d318:	1830b001 	.word	0x1830b001
 101d31c:	4ff0e8bd 	.word	0x4ff0e8bd
 101d320:	bd98f7f6 	.word	0xbd98f7f6
 101d324:	46302310 	.word	0x46302310
 101d328:	f0012400 	.word	0xf0012400
 101d32c:	ea5fffcf 	.word	0xea5fffcf
 101d330:	463a0b00 	.word	0x463a0b00
 101d334:	bf184649 	.word	0xbf184649
 101d338:	19f6465c 	.word	0x19f6465c
 101d33c:	46302311 	.word	0x46302311
 101d340:	ffc4f001 	.word	0xffc4f001
 101d344:	ebaa4682 	.word	0xebaa4682
 101d348:	4284000b 	.word	0x4284000b
 101d34c:	4649463a 	.word	0x4649463a
 101d350:	4604bf38 	.word	0x4604bf38
 101d354:	19f02312 	.word	0x19f02312
 101d358:	ffb8f001 	.word	0xffb8f001
 101d35c:	eba64606 	.word	0xeba64606
 101d360:	4284000a 	.word	0x4284000a
 101d364:	4649463a 	.word	0x4649463a
 101d368:	4604bf38 	.word	0x4604bf38
 101d36c:	46402313 	.word	0x46402313
 101d370:	ffacf001 	.word	0xffacf001
 101d374:	428c1b81 	.word	0x428c1b81
 101d378:	bf3860e8 	.word	0xbf3860e8
 101d37c:	00a0460c 	.word	0x00a0460c
 101d380:	b0016128 	.word	0xb0016128
 101d384:	8ff0e8bd 	.word	0x8ff0e8bd
 101d388:	b5f02b01 	.word	0xb5f02b01
 101d38c:	4e1e460c 	.word	0x4e1e460c
 101d390:	4615b081 	.word	0x4615b081
 101d394:	460168b7 	.word	0x460168b7
 101d398:	4638d105 	.word	0x4638d105
 101d39c:	e8bdb001 	.word	0xe8bdb001
 101d3a0:	f7f640f0 	.word	0xf7f640f0
 101d3a4:	1978bd57 	.word	0x1978bd57
 101d3a8:	fd54f7f6 	.word	0xfd54f7f6
 101d3ac:	2300006a 	.word	0x2300006a
 101d3b0:	4621b292 	.word	0x4621b292
 101d3b4:	f0014638 	.word	0xf0014638
 101d3b8:	60f0ff89 	.word	0x60f0ff89
 101d3bc:	6130b001 	.word	0x6130b001
 101d3c0:	4811bdf0 	.word	0x4811bdf0
 101d3c4:	477068c0 	.word	0x477068c0
 101d3c8:	6900480f 	.word	0x6900480f
 101d3cc:	b5304770 	.word	0xb5304770
 101d3d0:	490d460c 	.word	0x490d460c
 101d3d4:	20006048 	.word	0x20006048
 101d3d8:	4615b081 	.word	0x4615b081
 101d3dc:	f7f68008 	.word	0xf7f68008
 101d3e0:	b12dfdec 	.word	0xb12dfdec
 101d3e4:	b0014620 	.word	0xb0014620
 101d3e8:	4030e8bd 	.word	0x4030e8bd
 101d3ec:	bd96f7f6 	.word	0xbd96f7f6
 101d3f0:	bd30b001 	.word	0xbd30b001
 101d3f4:	b081b500 	.word	0xb081b500
 101d3f8:	f7f62014 	.word	0xf7f62014
 101d3fc:	4902ff1d 	.word	0x4902ff1d
 101d400:	6088b001 	.word	0x6088b001
 101d404:	0000bd00 	.word	0x0000bd00
 101d408:	20013224 	.word	0x20013224
 101d40c:	b081b5f0 	.word	0xb081b5f0
 101d410:	7a254604 	.word	0x7a254604
 101d414:	4f696866 	.word	0x4f696866
 101d418:	4630463a 	.word	0x4630463a
 101d41c:	f0014629 	.word	0xf0014629
 101d420:	9000ffa1 	.word	0x9000ffa1
 101d424:	e9d79a00 	.word	0xe9d79a00
 101d428:	23000104 	.word	0x23000104
 101d42c:	41591880 	.word	0x41591880
 101d430:	0104e9c7 	.word	0x0104e9c7
 101d434:	462a6820 	.word	0x462a6820
 101d438:	f0014631 	.word	0xf0014631
 101d43c:	ee00ffdd 	.word	0xee00ffdd
 101d440:	21000a10 	.word	0x21000a10
 101d444:	2302e9d7 	.word	0x2302e9d7
 101d448:	0a00eddd 	.word	0x0a00eddd
 101d44c:	eef81810 	.word	0xeef81810
 101d450:	41590a60 	.word	0x41590a60
 101d454:	0a40eeb8 	.word	0x0a40eeb8
 101d458:	ee80462a 	.word	0xee80462a
 101d45c:	edd70a80 	.word	0xedd70a80
 101d460:	eeb40a07 	.word	0xeeb40a07
 101d464:	eef10a60 	.word	0xeef10a60
 101d468:	e9c7fa10 	.word	0xe9c7fa10
 101d46c:	ed870102 	.word	0xed870102
 101d470:	46690a08 	.word	0x46690a08
 101d474:	ed87bf48 	.word	0xed87bf48
 101d478:	46300a07 	.word	0x46300a07
 101d47c:	f861f002 	.word	0xf861f002
 101d480:	42818b79 	.word	0x42818b79
 101d484:	4601bf38 	.word	0x4601bf38
 101d488:	6ab88379 	.word	0x6ab88379
 101d48c:	b0019900 	.word	0xb0019900
 101d490:	bf384288 	.word	0xbf384288
 101d494:	62b84608 	.word	0x62b84608
 101d498:	e92dbdf0 	.word	0xe92dbdf0
 101d49c:	b08241f0 	.word	0xb08241f0
 101d4a0:	7a604604 	.word	0x7a604604
 101d4a4:	68667a25 	.word	0x68667a25
 101d4a8:	463a4f44 	.word	0x463a4f44
 101d4ac:	0803f000 	.word	0x0803f000
 101d4b0:	46304629 	.word	0x46304629
 101d4b4:	ff7ef001 	.word	0xff7ef001
 101d4b8:	21009000 	.word	0x21009000
 101d4bc:	2304e9d7 	.word	0x2304e9d7
 101d4c0:	41591810 	.word	0x41591810
 101d4c4:	0104e9c7 	.word	0x0104e9c7
 101d4c8:	462b6820 	.word	0x462b6820
 101d4cc:	46314642 	.word	0x46314642
 101d4d0:	ffcaf001 	.word	0xffcaf001
 101d4d4:	0a10ee00 	.word	0x0a10ee00
 101d4d8:	e9d72300 	.word	0xe9d72300
 101d4dc:	ee100102 	.word	0xee100102
 101d4e0:	eddd2a10 	.word	0xeddd2a10
 101d4e4:	18800a00 	.word	0x18800a00
 101d4e8:	0a60eef8 	.word	0x0a60eef8
 101d4ec:	eeb84159 	.word	0xeeb84159
 101d4f0:	462b0a40 	.word	0x462b0a40
 101d4f4:	0a80ee80 	.word	0x0a80ee80
 101d4f8:	0a07edd7 	.word	0x0a07edd7
 101d4fc:	eeb44642 	.word	0xeeb44642
 101d500:	eef10a60 	.word	0xeef10a60
 101d504:	e9c7fa10 	.word	0xe9c7fa10
 101d508:	ed870102 	.word	0xed870102
 101d50c:	46690a08 	.word	0x46690a08
 101d510:	ed87bf48 	.word	0xed87bf48
 101d514:	46300a07 	.word	0x46300a07
 101d518:	f846f002 	.word	0xf846f002
 101d51c:	42818b39 	.word	0x42818b39
 101d520:	4601bf38 	.word	0x4601bf38
 101d524:	6a788339 	.word	0x6a788339
 101d528:	b0029900 	.word	0xb0029900
 101d52c:	bf384288 	.word	0xbf384288
 101d530:	62784608 	.word	0x62784608
 101d534:	81f0e8bd 	.word	0x81f0e8bd
 101d538:	e9d04820 	.word	0xe9d04820
 101d53c:	47700102 	.word	0x47700102
 101d540:	e9d0481e 	.word	0xe9d0481e
 101d544:	47700104 	.word	0x47700104
 101d548:	ed90481c 	.word	0xed90481c
 101d54c:	47700a07 	.word	0x47700a07
 101d550:	b5100003 	.word	0xb5100003
 101d554:	bf484c19 	.word	0xbf484c19
 101d558:	00424240 	.word	0x00424240
 101d55c:	b2922b01 	.word	0xb2922b01
 101d560:	0100e9d4 	.word	0x0100e9d4
 101d564:	f7f7db04 	.word	0xf7f7db04
 101d568:	e9c4f811 	.word	0xe9c4f811
 101d56c:	bd100100 	.word	0xbd100100
 101d570:	bf482b00 	.word	0xbf482b00
 101d574:	fffaf7f6 	.word	0xfffaf7f6
 101d578:	0100e9c4 	.word	0x0100e9c4
 101d57c:	480fbd10 	.word	0x480fbd10
 101d580:	0100e9d0 	.word	0x0100e9d0
 101d584:	480d4770 	.word	0x480d4770
 101d588:	47708b00 	.word	0x47708b00
 101d58c:	6a40480b 	.word	0x6a40480b
 101d590:	480a4770 	.word	0x480a4770
 101d594:	47708b40 	.word	0x47708b40
 101d598:	6a804808 	.word	0x6a804808
 101d59c:	48074770 	.word	0x48074770
 101d5a0:	f04f2200 	.word	0xf04f2200
 101d5a4:	6182419f 	.word	0x6182419f
 101d5a8:	2200e9c0 	.word	0x2200e9c0
 101d5ac:	2202e9c0 	.word	0x2202e9c0
 101d5b0:	2204e9c0 	.word	0x2204e9c0
 101d5b4:	62826242 	.word	0x62826242
 101d5b8:	477061c1 	.word	0x477061c1
 101d5bc:	200131a8 	.word	0x200131a8
 101d5c0:	47f4e92d 	.word	0x47f4e92d
 101d5c4:	4680b081 	.word	0x4680b081
 101d5c8:	ed2d468a 	.word	0xed2d468a
 101d5cc:	b0888b04 	.word	0xb0888b04
 101d5d0:	8a40eeb0 	.word	0x8a40eeb0
 101d5d4:	f942f7fa 	.word	0xf942f7fa
 101d5d8:	f001b108 	.word	0xf001b108
 101d5dc:	9000fca3 	.word	0x9000fca3
 101d5e0:	f934f7fa 	.word	0xf934f7fa
 101d5e4:	41801e40 	.word	0x41801e40
 101d5e8:	0fc043c0 	.word	0x0fc043c0
 101d5ec:	20019003 	.word	0x20019003
 101d5f0:	1034f8bd 	.word	0x1034f8bd
 101d5f4:	0008f88d 	.word	0x0008f88d
 101d5f8:	601df44f 	.word	0x601df44f
 101d5fc:	f7ff4440 	.word	0xf7ff4440
 101d600:	9803fa45 	.word	0x9803fa45
 101d604:	43089900 	.word	0x43089900
 101d608:	2800b2c0 	.word	0x2800b2c0
 101d60c:	80cef000 	.word	0x80cef000
 101d610:	0034f8bd 	.word	0x0034f8bd
 101d614:	25002400 	.word	0x25002400
 101d618:	46b12600 	.word	0x46b12600
 101d61c:	8ab0eddf 	.word	0x8ab0eddf
 101d620:	6906e9cd 	.word	0x6906e9cd
 101d624:	d0452800 	.word	0xd0452800
 101d628:	9aaeed9f 	.word	0x9aaeed9f
 101d62c:	0085eb0a 	.word	0x0085eb0a
 101d630:	0918f8d0 	.word	0x0918f8d0
 101d634:	28009001 	.word	0x28009001
 101d638:	eb08d037 	.word	0xeb08d037
 101d63c:	e9d000c5 	.word	0xe9d000c5
 101d640:	e9cd0100 	.word	0xe9cd0100
 101d644:	e9dd0104 	.word	0xe9dd0104
 101d648:	20002304 	.word	0x20002304
 101d64c:	428b2100 	.word	0x428b2100
 101d650:	4282bf02 	.word	0x4282bf02
 101d654:	e9cd2001 	.word	0xe9cd2001
 101d658:	e9dd0104 	.word	0xe9dd0104
 101d65c:	f7fb0104 	.word	0xf7fb0104
 101d660:	edddfa77 	.word	0xedddfa77
 101d664:	21000a01 	.word	0x21000a01
 101d668:	0a10ee00 	.word	0x0a10ee00
 101d66c:	eef89801 	.word	0xeef89801
 101d670:	ee800a60 	.word	0xee800a60
 101d674:	ee200a20 	.word	0xee200a20
 101d678:	18360a09 	.word	0x18360a09
 101d67c:	eb499800 	.word	0xeb499800
 101d680:	ee780901 	.word	0xee780901
 101d684:	b1408a80 	.word	0xb1408a80
 101d688:	2306e9dd 	.word	0x2306e9dd
 101d68c:	0104e9dd 	.word	0x0104e9dd
 101d690:	41591810 	.word	0x41591810
 101d694:	0106e9cd 	.word	0x0106e9cd
 101d698:	98031c64 	.word	0x98031c64
 101d69c:	eb08b128 	.word	0xeb08b128
 101d6a0:	f2000085 	.word	0xf2000085
 101d6a4:	ed806000 	.word	0xed806000
 101d6a8:	f8bd0a00 	.word	0xf8bd0a00
 101d6ac:	1c6d0034 	.word	0x1c6d0034
 101d6b0:	dbbb4285 	.word	0xdbbb4285
 101d6b4:	46494630 	.word	0x46494630
 101d6b8:	fa4af7fb 	.word	0xfa4af7fb
 101d6bc:	0a10ee00 	.word	0x0a10ee00
 101d6c0:	ee809803 	.word	0xee809803
 101d6c4:	28000a28 	.word	0x28000a28
 101d6c8:	eef4d042 	.word	0xeef4d042
 101d6cc:	f8bd0a00 	.word	0xf8bd0a00
 101d6d0:	ee200034 	.word	0xee200034
 101d6d4:	eeb40a20 	.word	0xeeb40a20
 101d6d8:	eef18a40 	.word	0xeef18a40
 101d6dc:	bf48fa10 	.word	0xbf48fa10
 101d6e0:	0a48eeb0 	.word	0x0a48eeb0
 101d6e4:	b3402200 	.word	0xb3402200
 101d6e8:	0308ea4f 	.word	0x0308ea4f
 101d6ec:	0082eb0a 	.word	0x0082eb0a
 101d6f0:	0918f8d0 	.word	0x0918f8d0
 101d6f4:	eb08b1d8 	.word	0xeb08b1d8
 101d6f8:	ee010182 	.word	0xee010182
 101d6fc:	eeb80a10 	.word	0xeeb80a10
 101d700:	f8d11a41 	.word	0xf8d11a41
 101d704:	ee001600 	.word	0xee001600
 101d708:	ee811a90 	.word	0xee811a90
 101d70c:	eeb41a20 	.word	0xeeb41a20
 101d710:	eef11a40 	.word	0xeef11a40
 101d714:	d50afa10 	.word	0xd50afa10
 101d718:	b1299900 	.word	0xb1299900
 101d71c:	1a362100 	.word	0x1a362100
 101d720:	0901eb69 	.word	0x0901eb69
 101d724:	8ae0ee78 	.word	0x8ae0ee78
 101d728:	f8832001 	.word	0xf8832001
 101d72c:	f8bd09d0 	.word	0xf8bd09d0
 101d730:	1c520034 	.word	0x1c520034
 101d734:	42821c5b 	.word	0x42821c5b
 101d738:	9800dbd8 	.word	0x9800dbd8
 101d73c:	4630b3b0 	.word	0x4630b3b0
 101d740:	f7fb4649 	.word	0xf7fb4649
 101d744:	ee00fa05 	.word	0xee00fa05
 101d748:	ee800a10 	.word	0xee800a10
 101d74c:	e0010a28 	.word	0xe0010a28
 101d750:	b3589800 	.word	0xb3589800
 101d754:	0a48eeb4 	.word	0x0a48eeb4
 101d758:	fa10eef1 	.word	0xfa10eef1
 101d75c:	2000d526 	.word	0x2000d526
 101d760:	0008f88d 	.word	0x0008f88d
 101d764:	04f4f8df 	.word	0x04f4f8df
 101d768:	1c407800 	.word	0x1c407800
 101d76c:	2806b2c0 	.word	0x2806b2c0
 101d770:	2101db1e 	.word	0x2101db1e
 101d774:	1008f88d 	.word	0x1008f88d
 101d778:	14e0f8df 	.word	0x14e0f8df
 101d77c:	70082500 	.word	0x70082500
 101d780:	1c478848 	.word	0x1c478848
 101d784:	f8bd804f 	.word	0xf8bd804f
 101d788:	28000034 	.word	0x28000034
 101d78c:	80a0f000 	.word	0x80a0f000
 101d790:	0408ea4f 	.word	0x0408ea4f
 101d794:	36fff04f 	.word	0x36fff04f
 101d798:	0085eb0a 	.word	0x0085eb0a
 101d79c:	0918f8d0 	.word	0x0918f8d0
 101d7a0:	eb08bb70 	.word	0xeb08bb70
 101d7a4:	e9c000c5 	.word	0xe9c000c5
 101d7a8:	e0486600 	.word	0xe0486600
 101d7ac:	e7e32000 	.word	0xe7e32000
 101d7b0:	14a8f8df 	.word	0x14a8f8df
 101d7b4:	04207008 	.word	0x04207008
 101d7b8:	2306e9dd 	.word	0x2306e9dd
 101d7bc:	eb122100 	.word	0xeb122100
 101d7c0:	b2a24050 	.word	0xb2a24050
 101d7c4:	23004159 	.word	0x23004159
 101d7c8:	f93cf7fb 	.word	0xf93cf7fb
 101d7cc:	3034f8bd 	.word	0x3034f8bd
 101d7d0:	2b002200 	.word	0x2b002200
 101d7d4:	807cf000 	.word	0x807cf000
 101d7d8:	0503f013 	.word	0x0503f013
 101d7dc:	36fff04f 	.word	0x36fff04f
 101d7e0:	803ef000 	.word	0x803ef000
 101d7e4:	0c82eb0a 	.word	0x0c82eb0a
 101d7e8:	c918f8dc 	.word	0xc918f8dc
 101d7ec:	0f00f1bc 	.word	0x0f00f1bc
 101d7f0:	0cc2eb08 	.word	0x0cc2eb08
 101d7f4:	e9ccbf0c 	.word	0xe9ccbf0c
 101d7f8:	e9cc6600 	.word	0xe9cc6600
 101d7fc:	e02c0100 	.word	0xe02c0100
 101d800:	00c5eb0a 	.word	0x00c5eb0a
 101d804:	2300e9d0 	.word	0x2300e9d0
 101d808:	00c5eb08 	.word	0x00c5eb08
 101d80c:	0100e9d0 	.word	0x0100e9d0
 101d810:	eb0a1812 	.word	0xeb0a1812
 101d814:	414b00c5 	.word	0x414b00c5
 101d818:	2300e9c0 	.word	0x2300e9c0
 101d81c:	09d0f894 	.word	0x09d0f894
 101d820:	0438b968 	.word	0x0438b968
 101d824:	eb122100 	.word	0xeb122100
 101d828:	b2bf4050 	.word	0xb2bf4050
 101d82c:	4159463a 	.word	0x4159463a
 101d830:	f7fb2300 	.word	0xf7fb2300
 101d834:	eb08f907 	.word	0xeb08f907
 101d838:	e9c202c5 	.word	0xe9c202c5
 101d83c:	f8bd0100 	.word	0xf8bd0100
 101d840:	1c6d0034 	.word	0x1c6d0034
 101d844:	42851c64 	.word	0x42851c64
 101d848:	f89ddba6 	.word	0xf89ddba6
 101d84c:	b0080008 	.word	0xb0080008
 101d850:	8b04ecbd 	.word	0x8b04ecbd
 101d854:	e8bdb002 	.word	0xe8bdb002
 101d858:	1c5287f0 	.word	0x1c5287f0
 101d85c:	d1c11e6d 	.word	0xd1c11e6d
 101d860:	d035089b 	.word	0xd035089b
 101d864:	0582eb0a 	.word	0x0582eb0a
 101d868:	5918f8d5 	.word	0x5918f8d5
 101d86c:	eb082d00 	.word	0xeb082d00
 101d870:	bf0c05c2 	.word	0xbf0c05c2
 101d874:	6600e9c5 	.word	0x6600e9c5
 101d878:	0100e9c5 	.word	0x0100e9c5
 101d87c:	eb0a1c52 	.word	0xeb0a1c52
 101d880:	f8d50582 	.word	0xf8d50582
 101d884:	2d005918 	.word	0x2d005918
 101d888:	05c2eb08 	.word	0x05c2eb08
 101d88c:	e9c5bf0c 	.word	0xe9c5bf0c
 101d890:	e9c56600 	.word	0xe9c56600
 101d894:	1c520100 	.word	0x1c520100
 101d898:	0582eb0a 	.word	0x0582eb0a
 101d89c:	5918f8d5 	.word	0x5918f8d5
 101d8a0:	eb082d00 	.word	0xeb082d00
 101d8a4:	bf0c05c2 	.word	0xbf0c05c2
 101d8a8:	6600e9c5 	.word	0x6600e9c5
 101d8ac:	0100e9c5 	.word	0x0100e9c5
 101d8b0:	eb0a1c52 	.word	0xeb0a1c52
 101d8b4:	f8d50582 	.word	0xf8d50582
 101d8b8:	2d005918 	.word	0x2d005918
 101d8bc:	05c2eb08 	.word	0x05c2eb08
 101d8c0:	e9c5bf0c 	.word	0xe9c5bf0c
 101d8c4:	e9c56600 	.word	0xe9c56600
 101d8c8:	1c520100 	.word	0x1c520100
 101d8cc:	d1c91e5b 	.word	0xd1c91e5b
 101d8d0:	0008f89d 	.word	0x0008f89d
 101d8d4:	ecbdb008 	.word	0xecbdb008
 101d8d8:	b0028b04 	.word	0xb0028b04
 101d8dc:	87f0e8bd 	.word	0x87f0e8bd
 101d8e0:	00000000 	.word	0x00000000
 101d8e4:	43000000 	.word	0x43000000
 101d8e8:	4ff0e92d 	.word	0x4ff0e92d
 101d8ec:	4605b081 	.word	0x4605b081
 101d8f0:	0b01f04f 	.word	0x0b01f04f
 101d8f4:	8b02ed2d 	.word	0x8b02ed2d
 101d8f8:	7ca9b08a 	.word	0x7ca9b08a
 101d8fc:	686f68ae 	.word	0x686f68ae
 101d900:	f8956828 	.word	0xf8956828
 101d904:	89ec8014 	.word	0x89ec8014
 101d908:	f44fb971 	.word	0xf44fb971
 101d90c:	183960f0 	.word	0x183960f0
 101d910:	f6074642 	.word	0xf6074642
 101d914:	f001004c 	.word	0xf001004c
 101d918:	b00afe7f 	.word	0xb00afe7f
 101d91c:	ecbd4658 	.word	0xecbd4658
 101d920:	b0018b02 	.word	0xb0018b02
 101d924:	8ff0e8bd 	.word	0x8ff0e8bd
 101d928:	d1512902 	.word	0xd1512902
 101d92c:	97087ce9 	.word	0x97087ce9
 101d930:	8025f88d 	.word	0x8025f88d
 101d934:	f001ab06 	.word	0xf001ab06
 101d938:	f1010103 	.word	0xf1010103
 101d93c:	f6060901 	.word	0xf6060901
 101d940:	f88d219c 	.word	0xf88d219c
 101d944:	91069024 	.word	0x91069024
 101d948:	014cf607 	.word	0x014cf607
 101d94c:	f44f9107 	.word	0xf44f9107
 101d950:	18727142 	.word	0x18727142
 101d954:	7140f44f 	.word	0x7140f44f
 101d958:	f0014439 	.word	0xf0014439
 101d95c:	7ce8febe 	.word	0x7ce8febe
 101d960:	d816280d 	.word	0xd816280d
 101d964:	f000e8df 	.word	0xf000e8df
 101d968:	1513100d 	.word	0x1513100d
 101d96c:	1513100d 	.word	0x1513100d
 101d970:	15151515 	.word	0x15151515
 101d974:	ed9f0a07 	.word	0xed9f0a07
 101d978:	e00a0ab2 	.word	0xe00a0ab2
 101d97c:	0ab1ed9f 	.word	0x0ab1ed9f
 101d980:	ed9fe007 	.word	0xed9fe007
 101d984:	e0040ab1 	.word	0xe0040ab1
 101d988:	0ab0ed9f 	.word	0x0ab0ed9f
 101d98c:	ed9fe001 	.word	0xed9fe001
 101d990:	46220ab0 	.word	0x46220ab0
 101d994:	46384631 	.word	0x46384631
 101d998:	fe12f7ff 	.word	0xfe12f7ff
 101d99c:	f44f4683 	.word	0xf44f4683
 101d9a0:	443860f0 	.word	0x443860f0
 101d9a4:	9006f88d 	.word	0x9006f88d
 101d9a8:	f44f9000 	.word	0xf44f9000
 101d9ac:	18317042 	.word	0x18317042
 101d9b0:	7040f44f 	.word	0x7040f44f
 101d9b4:	4004f8ad 	.word	0x4004f8ad
 101d9b8:	463a466b 	.word	0x463a466b
 101d9bc:	f0024438 	.word	0xf0024438
 101d9c0:	b00af802 	.word	0xb00af802
 101d9c4:	ecbd4658 	.word	0xecbd4658
 101d9c8:	b0018b02 	.word	0xb0018b02
 101d9cc:	8ff0e8bd 	.word	0x8ff0e8bd
 101d9d0:	2130f241 	.word	0x2130f241
 101d9d4:	91034431 	.word	0x91034431
 101d9d8:	61f0f44f 	.word	0x61f0f44f
 101d9dc:	44394681 	.word	0x44394681
 101d9e0:	91000860 	.word	0x91000860
 101d9e4:	499d9704 	.word	0x499d9704
 101d9e8:	8014f88d 	.word	0x8014f88d
 101d9ec:	4004f8ad 	.word	0x4004f8ad
 101d9f0:	7c6a9002 	.word	0x7c6a9002
 101d9f4:	a00cf8b5 	.word	0xa00cf8b5
 101d9f8:	804a7c28 	.word	0x804a7c28
 101d9fc:	700a2200 	.word	0x700a2200
 101da00:	bf082802 	.word	0xbf082802
 101da04:	8a90ed9f 	.word	0x8a90ed9f
 101da08:	2801d003 	.word	0x2801d003
 101da0c:	8a8ced9f 	.word	0x8a8ced9f
 101da10:	4605db2f 	.word	0x4605db2f
 101da14:	7040f44f 	.word	0x7040f44f
 101da18:	46421839 	.word	0x46421839
 101da1c:	f0014648 	.word	0xf0014648
 101da20:	f44fff59 	.word	0xf44fff59
 101da24:	18317042 	.word	0x18317042
 101da28:	7040f44f 	.word	0x7040f44f
 101da2c:	f606ab03 	.word	0xf606ab03
 101da30:	4438229c 	.word	0x4438229c
 101da34:	ff6af001 	.word	0xff6af001
 101da38:	eeb09803 	.word	0xeeb09803
 101da3c:	46220a48 	.word	0x46220a48
 101da40:	eb004631 	.word	0xeb004631
 101da44:	9003004a 	.word	0x9003004a
 101da48:	f7ff4638 	.word	0xf7ff4638
 101da4c:	f44ffdb9 	.word	0xf44ffdb9
 101da50:	18317042 	.word	0x18317042
 101da54:	7040f44f 	.word	0x7040f44f
 101da58:	463a466b 	.word	0x463a466b
 101da5c:	f0024438 	.word	0xf0024438
 101da60:	9800fadf 	.word	0x9800fadf
 101da64:	1e6d9902 	.word	0x1e6d9902
 101da68:	098aeb09 	.word	0x098aeb09
 101da6c:	90004408 	.word	0x90004408
 101da70:	b00ad1d0 	.word	0xb00ad1d0
 101da74:	ecbd4658 	.word	0xecbd4658
 101da78:	b0018b02 	.word	0xb0018b02
 101da7c:	8ff0e8bd 	.word	0x8ff0e8bd
 101da80:	80484976 	.word	0x80484976
 101da84:	70082000 	.word	0x70082000
 101da88:	460a4770 	.word	0x460a4770
 101da8c:	0128f600 	.word	0x0128f600
 101da90:	63f0f44f 	.word	0x63f0f44f
 101da94:	f0014418 	.word	0xf0014418
 101da98:	0000bdfe 	.word	0x0000bdfe
 101da9c:	45f0e92d 	.word	0x45f0e92d
 101daa0:	4607b081 	.word	0x4607b081
 101daa4:	ed2d2400 	.word	0xed2d2400
 101daa8:	b0848b04 	.word	0xb0848b04
 101daac:	fecef7f9 	.word	0xfecef7f9
 101dab0:	f0002800 	.word	0xf0002800
 101dab4:	68b880bd 	.word	0x68b880bd
 101dab8:	61c0f44f 	.word	0x61c0f44f
 101dabc:	25009003 	.word	0x25009003
 101dac0:	46a02600 	.word	0x46a02600
 101dac4:	1018f600 	.word	0x1018f600
 101dac8:	8a62ed9f 	.word	0x8a62ed9f
 101dacc:	68789002 	.word	0x68789002
 101dad0:	90014408 	.word	0x90014408
 101dad4:	280189f8 	.word	0x280189f8
 101dad8:	db339000 	.word	0xdb339000
 101dadc:	ed9f485f 	.word	0xed9f485f
 101dae0:	88409a5e 	.word	0x88409a5e
 101dae4:	0a10ee00 	.word	0x0a10ee00
 101dae8:	8a40eef8 	.word	0x8a40eef8
 101daec:	f8509802 	.word	0xf8509802
 101daf0:	f1baa026 	.word	0xf1baa026
 101daf4:	d0210f00 	.word	0xd0210f00
 101daf8:	eb009803 	.word	0xeb009803
 101dafc:	e9d000c6 	.word	0xe9d000c6
 101db00:	42a10100 	.word	0x42a10100
 101db04:	42a0bf02 	.word	0x42a0bf02
 101db08:	21002001 	.word	0x21002001
 101db0c:	f820f7fb 	.word	0xf820f7fb
 101db10:	aa90ee00 	.word	0xaa90ee00
 101db14:	080aeb18 	.word	0x080aeb18
 101db18:	0a10ee00 	.word	0x0a10ee00
 101db1c:	eef89801 	.word	0xeef89801
 101db20:	41650a60 	.word	0x41650a60
 101db24:	0086eb00 	.word	0x0086eb00
 101db28:	0a20ee80 	.word	0x0a20ee80
 101db2c:	0a09ee20 	.word	0x0a09ee20
 101db30:	0a28ee80 	.word	0x0a28ee80
 101db34:	8a00ee38 	.word	0x8a00ee38
 101db38:	0a00ed80 	.word	0x0a00ed80
 101db3c:	1c769800 	.word	0x1c769800
 101db40:	dbd34286 	.word	0xdbd34286
 101db44:	280d7cf8 	.word	0x280d7cf8
 101db48:	e8dfd816 	.word	0xe8dfd816
 101db4c:	100df000 	.word	0x100df000
 101db50:	100d1513 	.word	0x100d1513
 101db54:	15151513 	.word	0x15151513
 101db58:	0a071515 	.word	0x0a071515
 101db5c:	8a38eddf 	.word	0x8a38eddf
 101db60:	eddfe00a 	.word	0xeddfe00a
 101db64:	e0078a38 	.word	0xe0078a38
 101db68:	8a37eddf 	.word	0x8a37eddf
 101db6c:	eddfe004 	.word	0xeddfe004
 101db70:	e0018a37 	.word	0xe0018a37
 101db74:	8a36eddf 	.word	0x8a36eddf
 101db78:	46294640 	.word	0x46294640
 101db7c:	ffe8f7fa 	.word	0xffe8f7fa
 101db80:	0a10ee00 	.word	0x0a10ee00
 101db84:	ee809900 	.word	0xee809900
 101db88:	eef40a08 	.word	0xeef40a08
 101db8c:	ee200a00 	.word	0xee200a00
 101db90:	eef40a20 	.word	0xeef40a20
 101db94:	eef18a40 	.word	0xeef18a40
 101db98:	bf48fa10 	.word	0xbf48fa10
 101db9c:	0a68eeb0 	.word	0x0a68eeb0
 101dba0:	29012000 	.word	0x29012000
 101dba4:	07cadb44 	.word	0x07cadb44
 101dba8:	9802d512 	.word	0x9802d512
 101dbac:	b1706800 	.word	0xb1706800
 101dbb0:	0a90ee00 	.word	0x0a90ee00
 101dbb4:	eef89801 	.word	0xeef89801
 101dbb8:	ed900a60 	.word	0xed900a60
 101dbbc:	eec01a00 	.word	0xeec01a00
 101dbc0:	eef40a81 	.word	0xeef40a81
 101dbc4:	eef10a40 	.word	0xeef10a40
 101dbc8:	bf48fa10 	.word	0xbf48fa10
 101dbcc:	20012401 	.word	0x20012401
 101dbd0:	d02d0849 	.word	0xd02d0849
 101dbd4:	f8529a02 	.word	0xf8529a02
 101dbd8:	b1822020 	.word	0xb1822020
 101dbdc:	2a90ee00 	.word	0x2a90ee00
 101dbe0:	eef89a01 	.word	0xeef89a01
 101dbe4:	eb020a60 	.word	0xeb020a60
 101dbe8:	ed920280 	.word	0xed920280
 101dbec:	eec01a00 	.word	0xeec01a00
 101dbf0:	eef40a81 	.word	0xeef40a81
 101dbf4:	eef10a40 	.word	0xeef10a40
 101dbf8:	bf48fa10 	.word	0xbf48fa10
 101dbfc:	9a021c64 	.word	0x9a021c64
 101dc00:	f8521c40 	.word	0xf8521c40
 101dc04:	b1822020 	.word	0xb1822020
 101dc08:	2a90ee00 	.word	0x2a90ee00
 101dc0c:	eef89a01 	.word	0xeef89a01
 101dc10:	eb020a60 	.word	0xeb020a60
 101dc14:	ed920280 	.word	0xed920280
 101dc18:	eec01a00 	.word	0xeec01a00
 101dc1c:	eef40a81 	.word	0xeef40a81
 101dc20:	eef10a40 	.word	0xeef10a40
 101dc24:	bf48fa10 	.word	0xbf48fa10
 101dc28:	1c401c64 	.word	0x1c401c64
 101dc2c:	d1d11e49 	.word	0xd1d11e49
 101dc30:	b2a0b004 	.word	0xb2a0b004
 101dc34:	8b04ecbd 	.word	0x8b04ecbd
 101dc38:	e8bdb001 	.word	0xe8bdb001
 101dc3c:	000085f0 	.word	0x000085f0
 101dc40:	3fb9999a 	.word	0x3fb9999a
 101dc44:	401ccccd 	.word	0x401ccccd
 101dc48:	408bd70a 	.word	0x408bd70a
 101dc4c:	410828f6 	.word	0x410828f6
 101dc50:	41bb851f 	.word	0x41bb851f
 101dc54:	00000000 	.word	0x00000000
 101dc58:	43000000 	.word	0x43000000
 101dc5c:	200132cc 	.word	0x200132cc
 101dc60:	4ff0e92d 	.word	0x4ff0e92d
 101dc64:	4680b081 	.word	0x4680b081
 101dc68:	8b04ed2d 	.word	0x8b04ed2d
 101dc6c:	f7f9b084 	.word	0xf7f9b084
 101dc70:	2800fded 	.word	0x2800fded
 101dc74:	f0009001 	.word	0xf0009001
 101dc78:	f7f980e7 	.word	0xf7f980e7
 101dc7c:	9000fdeb 	.word	0x9000fdeb
 101dc80:	98012700 	.word	0x98012700
 101dc84:	1e4646b9 	.word	0x1e4646b9
 101dc88:	f1099800 	.word	0xf1099800
 101dc8c:	f8dd0301 	.word	0xf8dd0301
 101dc90:	461ac004 	.word	0x461ac004
 101dc94:	b29b2101 	.word	0xb29b2101
 101dc98:	0019f830 	.word	0x0019f830
 101dc9c:	45631d44 	.word	0x45631d44
 101dca0:	da3cb2a4 	.word	0xda3cb2a4
 101dca4:	7cc6ea5f 	.word	0x7cc6ea5f
 101dca8:	f8ddd515 	.word	0xf8ddd515
 101dcac:	f83cc000 	.word	0xf83cc000
 101dcb0:	eba33013 	.word	0xeba33013
 101dcb4:	f1bc0c00 	.word	0xf1bc0c00
 101dcb8:	bfbd0f0a 	.word	0xbfbd0f0a
 101dcbc:	1d5c2701 	.word	0x1d5c2701
 101dcc0:	2100b2a4 	.word	0x2100b2a4
 101dcc4:	b2b8e006 	.word	0xb2b8e006
 101dcc8:	bf182800 	.word	0xbf182800
 101dccc:	f0401e7f 	.word	0xf0401e7f
 101dcd0:	e7d980b4 	.word	0xe7d980b4
 101dcd4:	08731c52 	.word	0x08731c52
 101dcd8:	b301d021 	.word	0xb301d021
 101dcdc:	c000f8dd 	.word	0xc000f8dd
 101dce0:	f83cb292 	.word	0xf83cb292
 101dce4:	ebacc012 	.word	0xebacc012
 101dce8:	f1be0e00 	.word	0xf1be0e00
 101dcec:	da160f0a 	.word	0xda160f0a
 101dcf0:	b2921c52 	.word	0xb2921c52
 101dcf4:	f10c1c7f 	.word	0xf10c1c7f
 101dcf8:	f8dd0405 	.word	0xf8dd0405
 101dcfc:	b2a4c000 	.word	0xb2a4c000
 101dd00:	c012f83c 	.word	0xc012f83c
 101dd04:	0e00ebac 	.word	0x0e00ebac
 101dd08:	0f0af1be 	.word	0x0f0af1be
 101dd0c:	1c7fbfbd 	.word	0x1c7fbfbd
 101dd10:	0405f10c 	.word	0x0405f10c
 101dd14:	2100b2a4 	.word	0x2100b2a4
 101dd18:	1e5b1c52 	.word	0x1e5b1c52
 101dd1c:	2100d1dd 	.word	0x2100d1dd
 101dd20:	25002200 	.word	0x25002200
 101dd24:	f04f2805 	.word	0xf04f2805
 101dd28:	46aa0b01 	.word	0x46aa0b01
 101dd2c:	1f40db0e 	.word	0x1f40db0e
 101dd30:	eb08b280 	.word	0xeb08b280
 101dd34:	f9380180 	.word	0xf9380180
 101dd38:	f100a020 	.word	0xf100a020
 101dd3c:	f9b10b01 	.word	0xf9b10b01
 101dd40:	fb111002 	.word	0xfb111002
 101dd44:	fb1af201 	.word	0xfb1af201
 101dd48:	2201250a 	.word	0x2201250a
 101dd4c:	2c612300 	.word	0x2c612300
 101dd50:	eb08da0e 	.word	0xeb08da0e
 101dd54:	f9380384 	.word	0xf9380384
 101dd58:	f9b30024 	.word	0xf9b30024
 101dd5c:	18593002 	.word	0x18593002
 101dd60:	f303fb13 	.word	0xf303fb13
 101dd64:	fb104482 	.word	0xfb104482
 101dd68:	23013000 	.word	0x23013000
 101dd6c:	e0001945 	.word	0xe0001945
 101dd70:	ea532460 	.word	0xea532460
 101dd74:	d0670002 	.word	0xd0670002
 101dd78:	d03b421a 	.word	0xd03b421a
 101dd7c:	006aea4f 	.word	0x006aea4f
 101dd80:	ee08086d 	.word	0xee08086d
 101dd84:	10480a10 	.word	0x10480a10
 101dd88:	5a10ee00 	.word	0x5a10ee00
 101dd8c:	0a90ee08 	.word	0x0a90ee08
 101dd90:	0a40eeb8 	.word	0x0a40eeb8
 101dd94:	ff00f7fa 	.word	0xff00f7fa
 101dd98:	0a90ee18 	.word	0x0a90ee18
 101dd9c:	1a90ee18 	.word	0x1a90ee18
 101dda0:	0100fb81 	.word	0x0100fb81
 101dda4:	2a10ee18 	.word	0x2a10ee18
 101dda8:	3a10ee18 	.word	0x3a10ee18
 101ddac:	9a40eeb0 	.word	0x9a40eeb0
 101ddb0:	0102fbc3 	.word	0x0102fbc3
 101ddb4:	feccf7fa 	.word	0xfeccf7fa
 101ddb8:	0a10ee00 	.word	0x0a10ee00
 101ddbc:	feecf7fa 	.word	0xfeecf7fa
 101ddc0:	9a40eef0 	.word	0x9a40eef0
 101ddc4:	0ac8eeb8 	.word	0x0ac8eeb8
 101ddc8:	0a09ee20 	.word	0x0a09ee20
 101ddcc:	0a29ee80 	.word	0x0a29ee80
 101ddd0:	fb8af7f7 	.word	0xfb8af7f7
 101ddd4:	0ac0eebd 	.word	0x0ac0eebd
 101ddd8:	aa10ee10 	.word	0xaa10ee10
 101dddc:	0ae8eeb8 	.word	0x0ae8eeb8
 101dde0:	0a09ee20 	.word	0x0a09ee20
 101dde4:	0a29ee80 	.word	0x0a29ee80
 101dde8:	fb7ef7f7 	.word	0xfb7ef7f7
 101ddec:	0ac0eebd 	.word	0x0ac0eebd
 101ddf0:	1a10ee10 	.word	0x1a10ee10
 101ddf4:	fa1f4658 	.word	0xfa1f4658
 101ddf8:	45a3fb8b 	.word	0x45a3fb8b
 101ddfc:	a008f8ad 	.word	0xa008f8ad
 101de00:	086ada1b 	.word	0x086ada1b
 101de04:	b280006b 	.word	0xb280006b
 101de08:	eb084684 	.word	0xeb084684
 101de0c:	f9380e8c 	.word	0xf9380e8c
 101de10:	f9be502c 	.word	0xf9be502c
 101de14:	fb1aa002 	.word	0xfb1aa002
 101de18:	fb15fa0a 	.word	0xfb15fa0a
 101de1c:	429da505 	.word	0x429da505
 101de20:	42aabf38 	.word	0x42aabf38
 101de24:	f8bdd305 	.word	0xf8bdd305
 101de28:	f8ae5008 	.word	0xf8ae5008
 101de2c:	f8281002 	.word	0xf8281002
 101de30:	1c40502c 	.word	0x1c40502c
 101de34:	42a0b280 	.word	0x42a0b280
 101de38:	9801dbe5 	.word	0x9801dbe5
 101de3c:	0901f109 	.word	0x0901f109
 101de40:	45811e76 	.word	0x45811e76
 101de44:	af3ff6ff 	.word	0xaf3ff6ff
 101de48:	ecbdb004 	.word	0xecbdb004
 101de4c:	b0018b04 	.word	0xb0018b04
 101de50:	8ff0e8bd 	.word	0x8ff0e8bd
 101de54:	460cb5f0 	.word	0x460cb5f0
 101de58:	6b40f8df 	.word	0x6b40f8df
 101de5c:	461d6871 	.word	0x461d6871
 101de60:	63c2f44f 	.word	0x63c2f44f
 101de64:	18cfb083 	.word	0x18cfb083
 101de68:	d1052a01 	.word	0xd1052a01
 101de6c:	00a24601 	.word	0x00a24601
 101de70:	f7f54638 	.word	0xf7f54638
 101de74:	e004ffff 	.word	0xe004ffff
 101de78:	46224613 	.word	0x46224613
 101de7c:	f0024639 	.word	0xf0024639
 101de80:	4629f958 	.word	0x4629f958
 101de84:	f0024638 	.word	0xf0024638
 101de88:	f7f9f9d0 	.word	0xf7f9f9d0
 101de8c:	4603fceb 	.word	0x4603fceb
 101de90:	4621466a 	.word	0x4621466a
 101de94:	f0024638 	.word	0xf0024638
 101de98:	e9ddf98a 	.word	0xe9ddf98a
 101de9c:	f7fa0100 	.word	0xf7fa0100
 101dea0:	60b0fe57 	.word	0x60b0fe57
 101dea4:	bdf0b003 	.word	0xbdf0b003
 101dea8:	4ff0e92d 	.word	0x4ff0e92d
 101deac:	4689b081 	.word	0x4689b081
 101deb0:	24004617 	.word	0x24004617
 101deb4:	8b06ed2d 	.word	0x8b06ed2d
 101deb8:	4682b084 	.word	0x4682b084
 101debc:	fcd2f7f9 	.word	0xfcd2f7f9
 101dec0:	46832500 	.word	0x46832500
 101dec4:	46d00038 	.word	0x46d00038
 101dec8:	463ed00e 	.word	0x463ed00e
 101decc:	aa02465b 	.word	0xaa02465b
 101ded0:	46404649 	.word	0x46404649
 101ded4:	f96bf002 	.word	0xf96bf002
 101ded8:	0102e9dd 	.word	0x0102e9dd
 101dedc:	414d1824 	.word	0x414d1824
 101dee0:	eb081e76 	.word	0xeb081e76
 101dee4:	d1f10889 	.word	0xd1f10889
 101dee8:	46294620 	.word	0x46294620
 101deec:	fe30f7fa 	.word	0xfe30f7fa
 101def0:	7a90ee00 	.word	0x7a90ee00
 101def4:	8aa4f8df 	.word	0x8aa4f8df
 101def8:	0a10ee00 	.word	0x0a10ee00
 101defc:	eef80038 	.word	0xeef80038
 101df00:	ee800a60 	.word	0xee800a60
 101df04:	ed880a20 	.word	0xed880a20
 101df08:	d0780a02 	.word	0xd0780a02
 101df0c:	8a3fed9f 	.word	0x8a3fed9f
 101df10:	eef72401 	.word	0xeef72401
 101df14:	25008a04 	.word	0x25008a04
 101df18:	9a3ded9f 	.word	0x9a3ded9f
 101df1c:	9a3deddf 	.word	0x9a3deddf
 101df20:	fca0f7f9 	.word	0xfca0f7f9
 101df24:	466a4603 	.word	0x466a4603
 101df28:	46504649 	.word	0x46504649
 101df2c:	f93ff002 	.word	0xf93ff002
 101df30:	2300e9dd 	.word	0x2300e9dd
 101df34:	bf0442ab 	.word	0xbf0442ab
 101df38:	e9cd42aa 	.word	0xe9cd42aa
 101df3c:	e9dd4500 	.word	0xe9dd4500
 101df40:	f7fa0100 	.word	0xf7fa0100
 101df44:	ee00fe05 	.word	0xee00fe05
 101df48:	edd80a10 	.word	0xedd80a10
 101df4c:	ee800a02 	.word	0xee800a02
 101df50:	f7fa0a80 	.word	0xf7fa0a80
 101df54:	eeb0fe21 	.word	0xeeb0fe21
 101df58:	f7f9aa40 	.word	0xf7f9aa40
 101df5c:	b938fc7f 	.word	0xb938fc7f
 101df60:	fc74f7f9 	.word	0xfc74f7f9
 101df64:	eef0b920 	.word	0xeef0b920
 101df68:	eeb00a69 	.word	0xeeb00a69
 101df6c:	e0030a49 	.word	0xe0030a49
 101df70:	0a68eef0 	.word	0x0a68eef0
 101df74:	0a48eeb0 	.word	0x0a48eeb0
 101df78:	0a4aeef4 	.word	0x0a4aeef4
 101df7c:	fa10eef1 	.word	0xfa10eef1
 101df80:	eeb0bf48 	.word	0xeeb0bf48
 101df84:	d40caa60 	.word	0xd40caa60
 101df88:	aa40eeb4 	.word	0xaa40eeb4
 101df8c:	fa10eef1 	.word	0xfa10eef1
 101df90:	eeb0bf48 	.word	0xeeb0bf48
 101df94:	d404aa40 	.word	0xd404aa40
 101df98:	aa40eeb5 	.word	0xaa40eeb5
 101df9c:	fa10eef1 	.word	0xfa10eef1
 101dfa0:	2600dd29 	.word	0x2600dd29
 101dfa4:	bf00e005 	.word	0xbf00e005
 101dfa8:	0a00eeb0 	.word	0x0a00eeb0
 101dfac:	ee2a1c76 	.word	0xee2a1c76
 101dfb0:	eeb0aa00 	.word	0xeeb0aa00
 101dfb4:	f7f70a4a 	.word	0xf7f70a4a
 101dfb8:	eddffa97 	.word	0xeddffa97
 101dfbc:	eeb40a17 	.word	0xeeb40a17
 101dfc0:	eef10a60 	.word	0xeef10a60
 101dfc4:	d502fa10 	.word	0xd502fa10
 101dfc8:	2e2fb2f6 	.word	0x2e2fb2f6
 101dfcc:	ed9fdbec 	.word	0xed9fdbec
 101dfd0:	eeb40a12 	.word	0xeeb40a12
 101dfd4:	eef1aa40 	.word	0xeef1aa40
 101dfd8:	db0cfa10 	.word	0xdb0cfa10
 101dfdc:	0a4aeeb0 	.word	0x0a4aeeb0
 101dfe0:	fa82f7f7 	.word	0xfa82f7f7
 101dfe4:	0ac0eebd 	.word	0x0ac0eebd
 101dfe8:	ee10b2f3 	.word	0xee10b2f3
 101dfec:	46492a10 	.word	0x46492a10
 101dff0:	f0024650 	.word	0xf0024650
 101dff4:	1e7ff8c4 	.word	0x1e7ff8c4
 101dff8:	0a89eb0a 	.word	0x0a89eb0a
 101dffc:	b004d190 	.word	0xb004d190
 101e000:	8b06ecbd 	.word	0x8b06ecbd
 101e004:	e8bdb001 	.word	0xe8bdb001
 101e008:	00008ff0 	.word	0x00008ff0
 101e00c:	3f4a3d71 	.word	0x3f4a3d71
 101e010:	3f2147ae 	.word	0x3f2147ae
 101e014:	3fca3d71 	.word	0x3fca3d71
 101e018:	4e800000 	.word	0x4e800000
 101e01c:	4ffbe92d 	.word	0x4ffbe92d
 101e020:	46070015 	.word	0x46070015
 101e024:	8b06ed2d 	.word	0x8b06ed2d
 101e028:	eeb0b098 	.word	0xeeb0b098
 101e02c:	d00a8a40 	.word	0xd00a8a40
 101e030:	463846a9 	.word	0x463846a9
 101e034:	fe14f7ff 	.word	0xfe14f7ff
 101e038:	0901f1b9 	.word	0x0901f1b9
 101e03c:	007cf8bd 	.word	0x007cf8bd
 101e040:	0780eb07 	.word	0x0780eb07
 101e044:	f7f9d1f5 	.word	0xf7f9d1f5
 101e048:	2800fc09 	.word	0x2800fc09
 101e04c:	f000462e 	.word	0xf000462e
 101e050:	f8df812c 	.word	0xf8df812c
 101e054:	f44f0948 	.word	0xf44f0948
 101e058:	684061c2 	.word	0x684061c2
 101e05c:	39fff04f 	.word	0x39fff04f
 101e060:	46cb2600 	.word	0x46cb2600
 101e064:	991e4408 	.word	0x991e4408
 101e068:	f8bd9000 	.word	0xf8bd9000
 101e06c:	4368007c 	.word	0x4368007c
 101e070:	0b820400 	.word	0x0b820400
 101e074:	f7f59800 	.word	0xf7f59800
 101e078:	f7f9fefd 	.word	0xf7f9fefd
 101e07c:	2d00fbf3 	.word	0x2d00fbf3
 101e080:	f8dd9001 	.word	0xf8dd9001
 101e084:	d03ea000 	.word	0xd03ea000
 101e088:	207cf8bd 	.word	0x207cf8bd
 101e08c:	ab089901 	.word	0xab089901
 101e090:	b2f64650 	.word	0xb2f64650
 101e094:	f89ef002 	.word	0xf89ef002
 101e098:	f8bd4680 	.word	0xf8bd4680
 101e09c:	eb0a007c 	.word	0xeb0a007c
 101e0a0:	ea4f0a80 	.word	0xea4f0a80
 101e0a4:	21000058 	.word	0x21000058
 101e0a8:	0102e9cd 	.word	0x0102e9cd
 101e0ac:	2308e9dd 	.word	0x2308e9dd
 101e0b0:	41591810 	.word	0x41591810
 101e0b4:	23004642 	.word	0x23004642
 101e0b8:	fcc4f7fa 	.word	0xfcc4f7fa
 101e0bc:	e9dd4607 	.word	0xe9dd4607
 101e0c0:	e9dd230a 	.word	0xe9dd230a
 101e0c4:	18100102 	.word	0x18100102
 101e0c8:	46424159 	.word	0x46424159
 101e0cc:	f7fa2300 	.word	0xf7fa2300
 101e0d0:	fba7fcb9 	.word	0xfba7fcb9
 101e0d4:	32202307 	.word	0x32202307
 101e0d8:	0300f143 	.word	0x0300f143
 101e0dc:	ea420992 	.word	0xea420992
 101e0e0:	1a806283 	.word	0x1a806283
 101e0e4:	eb02aa10 	.word	0xeb02aa10
 101e0e8:	eb6102c6 	.word	0xeb6102c6
 101e0ec:	45591193 	.word	0x45591193
 101e0f0:	0100e9c2 	.word	0x0100e9c2
 101e0f4:	bf2ed803 	.word	0xbf2ed803
 101e0f8:	46814548 	.word	0x46814548
 101e0fc:	1c76468b 	.word	0x1c76468b
 101e100:	42a8b2f0 	.word	0x42a8b2f0
 101e104:	9f00d3c0 	.word	0x9f00d3c0
 101e108:	24002600 	.word	0x24002600
 101e10c:	b33d46b8 	.word	0xb33d46b8
 101e110:	007cf8bd 	.word	0x007cf8bd
 101e114:	0b8bea4f 	.word	0x0b8bea4f
 101e118:	7b99ea4b 	.word	0x7b99ea4b
 101e11c:	0a80ea4f 	.word	0x0a80ea4f
 101e120:	b2e4a810 	.word	0xb2e4a810
 101e124:	00c4eb00 	.word	0x00c4eb00
 101e128:	0100e9d0 	.word	0x0100e9d0
 101e12c:	d80f4559 	.word	0xd80f4559
 101e130:	ebb0bf28 	.word	0xebb0bf28
 101e134:	d20b0f89 	.word	0xd20b0f89
 101e138:	d0044547 	.word	0xd0044547
 101e13c:	46394652 	.word	0x46394652
 101e140:	f7f54640 	.word	0xf7f54640
 101e144:	f8bdfe97 	.word	0xf8bdfe97
 101e148:	1c76007c 	.word	0x1c76007c
 101e14c:	0880eb08 	.word	0x0880eb08
 101e150:	007cf8bd 	.word	0x007cf8bd
 101e154:	eb071c64 	.word	0xeb071c64
 101e158:	b2e00780 	.word	0xb2e00780
 101e15c:	d3df42a8 	.word	0xd3df42a8
 101e160:	107cf8bd 	.word	0x107cf8bd
 101e164:	b2f29800 	.word	0xb2f29800
 101e168:	8a00eeff 	.word	0x8a00eeff
 101e16c:	fe9cf7ff 	.word	0xfe9cf7ff
 101e170:	3080f89d 	.word	0x3080f89d
 101e174:	107cf8bd 	.word	0x107cf8bd
 101e178:	b2f29800 	.word	0xb2f29800
 101e17c:	f7ff2600 	.word	0xf7ff2600
 101e180:	f8dffe69 	.word	0xf8dffe69
 101e184:	f8bd0818 	.word	0xf8bd0818
 101e188:	6840207c 	.word	0x6840207c
 101e18c:	63c2f44f 	.word	0x63c2f44f
 101e190:	1a18f600 	.word	0x1a18f600
 101e194:	44184651 	.word	0x44184651
 101e198:	f898f7f6 	.word	0xf898f7f6
 101e19c:	07fcf8df 	.word	0x07fcf8df
 101e1a0:	68402d00 	.word	0x68402d00
 101e1a4:	f2009f1e 	.word	0xf2009f1e
 101e1a8:	f8bd7494 	.word	0xf8bd7494
 101e1ac:	f8ad007c 	.word	0xf8ad007c
 101e1b0:	d03c0018 	.word	0xd03c0018
 101e1b4:	0830f10d 	.word	0x0830f10d
 101e1b8:	107cf8bd 	.word	0x107cf8bd
 101e1bc:	b2f64638 	.word	0xb2f64638
 101e1c0:	fb4cf000 	.word	0xfb4cf000
 101e1c4:	207cf8bd 	.word	0x207cf8bd
 101e1c8:	46384621 	.word	0x46384621
 101e1cc:	f87ef7f6 	.word	0xf87ef7f6
 101e1d0:	ab049a01 	.word	0xab049a01
 101e1d4:	46504621 	.word	0x46504621
 101e1d8:	fae8f002 	.word	0xfae8f002
 101e1dc:	007cf8bd 	.word	0x007cf8bd
 101e1e0:	eb072200 	.word	0xeb072200
 101e1e4:	e9dd0780 	.word	0xe9dd0780
 101e1e8:	00490104 	.word	0x00490104
 101e1ec:	71d0ea41 	.word	0x71d0ea41
 101e1f0:	42910040 	.word	0x42910040
 101e1f4:	4290bf02 	.word	0x4290bf02
 101e1f8:	21002001 	.word	0x21002001
 101e1fc:	fca8f7fa 	.word	0xfca8f7fa
 101e200:	0a10ee00 	.word	0x0a10ee00
 101e204:	0794f8df 	.word	0x0794f8df
 101e208:	0a02edd0 	.word	0x0a02edd0
 101e20c:	0086eb08 	.word	0x0086eb08
 101e210:	0a80ee80 	.word	0x0a80ee80
 101e214:	8a40eef4 	.word	0x8a40eef4
 101e218:	fa10eef1 	.word	0xfa10eef1
 101e21c:	0a00ed80 	.word	0x0a00ed80
 101e220:	eef0bf48 	.word	0xeef0bf48
 101e224:	1c768a40 	.word	0x1c768a40
 101e228:	42a8b2f0 	.word	0x42a8b2f0
 101e22c:	eeb5d3c4 	.word	0xeeb5d3c4
 101e230:	f8dd0a00 	.word	0xf8dd0a00
 101e234:	eddf9078 	.word	0xeddf9078
 101e238:	ee280a7b 	.word	0xee280a7b
 101e23c:	ee680a80 	.word	0xee680a80
 101e240:	46cb0a20 	.word	0x46cb0a20
 101e244:	0a60eeb4 	.word	0x0a60eeb4
 101e248:	fa10eef1 	.word	0xfa10eef1
 101e24c:	eef0bf48 	.word	0xeef0bf48
 101e250:	26000a40 	.word	0x26000a40
 101e254:	2d002700 	.word	0x2d002700
 101e258:	f8bdd04c 	.word	0xf8bdd04c
 101e25c:	f10d007c 	.word	0xf10d007c
 101e260:	ea4f0830 	.word	0xea4f0830
 101e264:	b2ff0a80 	.word	0xb2ff0a80
 101e268:	0087eb08 	.word	0x0087eb08
 101e26c:	0a00ed90 	.word	0x0a00ed90
 101e270:	0a40eef4 	.word	0x0a40eef4
 101e274:	fa10eef1 	.word	0xfa10eef1
 101e278:	45d9d50e 	.word	0x45d9d50e
 101e27c:	4652d004 	.word	0x4652d004
 101e280:	46584649 	.word	0x46584649
 101e284:	fdf6f7f5 	.word	0xfdf6f7f5
 101e288:	b2f6982a 	.word	0xb2f6982a
 101e28c:	f8bd5587 	.word	0xf8bd5587
 101e290:	1c76007c 	.word	0x1c76007c
 101e294:	0b80eb0b 	.word	0x0b80eb0b
 101e298:	007cf8bd 	.word	0x007cf8bd
 101e29c:	eb091c7f 	.word	0xeb091c7f
 101e2a0:	b2f80980 	.word	0xb2f80980
 101e2a4:	d3de42a8 	.word	0xd3de42a8
 101e2a8:	f8bde024 	.word	0xf8bde024
 101e2ac:	981e107c 	.word	0x981e107c
 101e2b0:	f7ff462a 	.word	0xf7ff462a
 101e2b4:	2000fdf9 	.word	0x2000fdf9
 101e2b8:	f015b1e5 	.word	0xf015b1e5
 101e2bc:	d0050103 	.word	0xd0050103
 101e2c0:	b2c09a2a 	.word	0xb2c09a2a
 101e2c4:	1c405410 	.word	0x1c405410
 101e2c8:	d1f91e49 	.word	0xd1f91e49
 101e2cc:	d01108a9 	.word	0xd01108a9
 101e2d0:	b2c09a2a 	.word	0xb2c09a2a
 101e2d4:	1c405410 	.word	0x1c405410
 101e2d8:	b2c09a2a 	.word	0xb2c09a2a
 101e2dc:	1c405410 	.word	0x1c405410
 101e2e0:	b2c09a2a 	.word	0xb2c09a2a
 101e2e4:	1c405410 	.word	0x1c405410
 101e2e8:	b2c09a2a 	.word	0xb2c09a2a
 101e2ec:	1c405410 	.word	0x1c405410
 101e2f0:	d1ed1e49 	.word	0xd1ed1e49
 101e2f4:	3080f89d 	.word	0x3080f89d
 101e2f8:	107cf8bd 	.word	0x107cf8bd
 101e2fc:	b2f2981e 	.word	0xb2f2981e
 101e300:	fda8f7ff 	.word	0xfda8f7ff
 101e304:	2800b2f0 	.word	0x2800b2f0
 101e308:	f0009f1e 	.word	0xf0009f1e
 101e30c:	b2f68084 	.word	0xb2f68084
 101e310:	8a45ed9f 	.word	0x8a45ed9f
 101e314:	0806ea4f 	.word	0x0806ea4f
 101e318:	8a04eef7 	.word	0x8a04eef7
 101e31c:	9a43ed9f 	.word	0x9a43ed9f
 101e320:	0901f04f 	.word	0x0901f04f
 101e324:	9a42eddf 	.word	0x9a42eddf
 101e328:	0b00f04f 	.word	0x0b00f04f
 101e32c:	fa9af7f9 	.word	0xfa9af7f9
 101e330:	107cf8bd 	.word	0x107cf8bd
 101e334:	aa024603 	.word	0xaa024603
 101e338:	f0014638 	.word	0xf0014638
 101e33c:	e9ddff38 	.word	0xe9ddff38
 101e340:	45590102 	.word	0x45590102
 101e344:	4558bf04 	.word	0x4558bf04
 101e348:	9b02e9cd 	.word	0x9b02e9cd
 101e34c:	0102e9dd 	.word	0x0102e9dd
 101e350:	fbfef7fa 	.word	0xfbfef7fa
 101e354:	0a10ee00 	.word	0x0a10ee00
 101e358:	0640f8df 	.word	0x0640f8df
 101e35c:	0a02edd0 	.word	0x0a02edd0
 101e360:	0a80ee80 	.word	0x0a80ee80
 101e364:	fc18f7fa 	.word	0xfc18f7fa
 101e368:	aa40eeb0 	.word	0xaa40eeb0
 101e36c:	fa76f7f9 	.word	0xfa76f7f9
 101e370:	f7f9b938 	.word	0xf7f9b938
 101e374:	b920fa6b 	.word	0xb920fa6b
 101e378:	0a69eef0 	.word	0x0a69eef0
 101e37c:	0a49eeb0 	.word	0x0a49eeb0
 101e380:	eef0e003 	.word	0xeef0e003
 101e384:	eeb00a68 	.word	0xeeb00a68
 101e388:	eef40a48 	.word	0xeef40a48
 101e38c:	eef10a4a 	.word	0xeef10a4a
 101e390:	bf48fa10 	.word	0xbf48fa10
 101e394:	aa60eeb0 	.word	0xaa60eeb0
 101e398:	eeb4d40c 	.word	0xeeb4d40c
 101e39c:	eef1aa40 	.word	0xeef1aa40
 101e3a0:	bf48fa10 	.word	0xbf48fa10
 101e3a4:	aa40eeb0 	.word	0xaa40eeb0
 101e3a8:	eeb5d404 	.word	0xeeb5d404
 101e3ac:	eef1aa40 	.word	0xeef1aa40
 101e3b0:	dd29fa10 	.word	0xdd29fa10
 101e3b4:	e0042400 	.word	0xe0042400
 101e3b8:	0a00eeb0 	.word	0x0a00eeb0
 101e3bc:	ee2a1c64 	.word	0xee2a1c64
 101e3c0:	eeb0aa00 	.word	0xeeb0aa00
 101e3c4:	f7f70a4a 	.word	0xf7f70a4a
 101e3c8:	eddff88f 	.word	0xeddff88f
 101e3cc:	eeb40ad6 	.word	0xeeb40ad6
 101e3d0:	eef10a60 	.word	0xeef10a60
 101e3d4:	d502fa10 	.word	0xd502fa10
 101e3d8:	2c2fb2e4 	.word	0x2c2fb2e4
 101e3dc:	ed9fdbec 	.word	0xed9fdbec
 101e3e0:	eeb40ad1 	.word	0xeeb40ad1
 101e3e4:	eef1aa40 	.word	0xeef1aa40
 101e3e8:	db0dfa10 	.word	0xdb0dfa10
 101e3ec:	0a4aeeb0 	.word	0x0a4aeeb0
 101e3f0:	f87af7f7 	.word	0xf87af7f7
 101e3f4:	107cf8bd 	.word	0x107cf8bd
 101e3f8:	0ac0eebd 	.word	0x0ac0eebd
 101e3fc:	ee10b2e3 	.word	0xee10b2e3
 101e400:	46382a10 	.word	0x46382a10
 101e404:	febbf001 	.word	0xfebbf001
 101e408:	0801f1b8 	.word	0x0801f1b8
 101e40c:	007cf8bd 	.word	0x007cf8bd
 101e410:	0780eb07 	.word	0x0780eb07
 101e414:	b018d18a 	.word	0xb018d18a
 101e418:	ecbdb2f0 	.word	0xecbdb2f0
 101e41c:	b0038b06 	.word	0xb0038b06
 101e420:	8ff0e8bd 	.word	0x8ff0e8bd
 101e424:	3fb47ae1 	.word	0x3fb47ae1
 101e428:	3f4a3d71 	.word	0x3f4a3d71
 101e42c:	3f2147ae 	.word	0x3f2147ae
 101e430:	3fca3d71 	.word	0x3fca3d71
 101e434:	4fffe92d 	.word	0x4fffe92d
 101e438:	0b0cf8df 	.word	0x0b0cf8df
 101e43c:	ed2db081 	.word	0xed2db081
 101e440:	78008b0a 	.word	0x78008b0a
 101e444:	2802b08c 	.word	0x2802b08c
 101e448:	f60fbf0c 	.word	0xf60fbf0c
 101e44c:	f60f3004 	.word	0xf60f3004
 101e450:	90003004 	.word	0x90003004
 101e454:	20002100 	.word	0x20002100
 101e458:	f012b3aa 	.word	0xf012b3aa
 101e45c:	d00a0303 	.word	0xd00a0303
 101e460:	b2c09d17 	.word	0xb2c09d17
 101e464:	5c2d9c00 	.word	0x5c2d9c00
 101e468:	f8341c40 	.word	0xf8341c40
 101e46c:	18614015 	.word	0x18614015
 101e470:	b2891e5b 	.word	0xb2891e5b
 101e474:	0892d1f4 	.word	0x0892d1f4
 101e478:	9c17d025 	.word	0x9c17d025
 101e47c:	9b00b2c0 	.word	0x9b00b2c0
 101e480:	1c405c24 	.word	0x1c405c24
 101e484:	f833b2c0 	.word	0xf833b2c0
 101e488:	9c173014 	.word	0x9c173014
 101e48c:	1c405c24 	.word	0x1c405c24
 101e490:	1859b2c0 	.word	0x1859b2c0
 101e494:	b2899b00 	.word	0xb2899b00
 101e498:	3014f833 	.word	0x3014f833
 101e49c:	5c249c17 	.word	0x5c249c17
 101e4a0:	b2c01c40 	.word	0xb2c01c40
 101e4a4:	9b001859 	.word	0x9b001859
 101e4a8:	f833b289 	.word	0xf833b289
 101e4ac:	9c173014 	.word	0x9c173014
 101e4b0:	1c405c24 	.word	0x1c405c24
 101e4b4:	9b001859 	.word	0x9b001859
 101e4b8:	f833b289 	.word	0xf833b289
 101e4bc:	18593014 	.word	0x18593014
 101e4c0:	b2891e52 	.word	0xb2891e52
 101e4c4:	f89dd1d9 	.word	0xf89dd1d9
 101e4c8:	ee000064 	.word	0xee000064
 101e4cc:	f44f1a10 	.word	0xf44f1a10
 101e4d0:	eeb861c2 	.word	0xeeb861c2
 101e4d4:	eddf0a40 	.word	0xeddf0a40
 101e4d8:	f04f8ac7 	.word	0xf04f8ac7
 101e4dc:	ed9f0a00 	.word	0xed9f0a00
 101e4e0:	ee009ac5 	.word	0xee009ac5
 101e4e4:	f8df0a90 	.word	0xf8df0a90
 101e4e8:	68400a60 	.word	0x68400a60
 101e4ec:	0a60eef8 	.word	0x0a60eef8
 101e4f0:	8a20ee80 	.word	0x8a20ee80
 101e4f4:	91044401 	.word	0x91044401
 101e4f8:	6142f44f 	.word	0x6142f44f
 101e4fc:	f7f51844 	.word	0xf7f51844
 101e500:	9003fc3b 	.word	0x9003fc3b
 101e504:	0a40f8df 	.word	0x0a40f8df
 101e508:	f6006840 	.word	0xf6006840
 101e50c:	9002305c 	.word	0x9002305c
 101e510:	0064f89d 	.word	0x0064f89d
 101e514:	d04c2800 	.word	0xd04c2800
 101e518:	90019f17 	.word	0x90019f17
 101e51c:	253cf60f 	.word	0x253cf60f
 101e520:	98007839 	.word	0x98007839
 101e524:	f8dd9e04 	.word	0xf8dd9e04
 101e528:	f830b008 	.word	0xf830b008
 101e52c:	ee000011 	.word	0xee000011
 101e530:	98180a10 	.word	0x98180a10
 101e534:	0a40eeb8 	.word	0x0a40eeb8
 101e538:	008aeb00 	.word	0x008aeb00
 101e53c:	9a48ee70 	.word	0x9a48ee70
 101e540:	0a00ed90 	.word	0x0a00ed90
 101e544:	0068f89d 	.word	0x0068f89d
 101e548:	aa29ee20 	.word	0xaa29ee20
 101e54c:	f8ddb358 	.word	0xf8ddb358
 101e550:	4681800c 	.word	0x4681800c
 101e554:	0b01f818 	.word	0x0b01f818
 101e558:	eb05ab06 	.word	0xeb05ab06
 101e55c:	465a0040 	.word	0x465a0040
 101e560:	f10b4631 	.word	0xf10b4631
 101e564:	f8300b61 	.word	0xf8300b61
 101e568:	f8ad0c02 	.word	0xf8ad0c02
 101e56c:	46200028 	.word	0x46200028
 101e570:	f93af002 	.word	0xf93af002
 101e574:	70c2f44f 	.word	0x70c2f44f
 101e578:	44064404 	.word	0x44064404
 101e57c:	0106e9dd 	.word	0x0106e9dd
 101e580:	fad8f7fa 	.word	0xfad8f7fa
 101e584:	0a10ee00 	.word	0x0a10ee00
 101e588:	8a4aee40 	.word	0x8a4aee40
 101e58c:	0108e9dd 	.word	0x0108e9dd
 101e590:	fad0f7fa 	.word	0xfad0f7fa
 101e594:	0a10ee00 	.word	0x0a10ee00
 101e598:	0901f1b9 	.word	0x0901f1b9
 101e59c:	0a0aee20 	.word	0x0a0aee20
 101e5a0:	9a29ee00 	.word	0x9a29ee00
 101e5a4:	9801d1d6 	.word	0x9801d1d6
 101e5a8:	0a01f10a 	.word	0x0a01f10a
 101e5ac:	45821c7f 	.word	0x45821c7f
 101e5b0:	ee88dbb6 	.word	0xee88dbb6
 101e5b4:	eddf0a89 	.word	0xeddf0a89
 101e5b8:	ee200aa4 	.word	0xee200aa4
 101e5bc:	eddf0a20 	.word	0xeddf0a20
 101e5c0:	ee800aa3 	.word	0xee800aa3
 101e5c4:	ed9f8a20 	.word	0xed9f8a20
 101e5c8:	eeb40aa2 	.word	0xeeb40aa2
 101e5cc:	eef18a40 	.word	0xeef18a40
 101e5d0:	bfa8fa10 	.word	0xbfa8fa10
 101e5d4:	8a9fed9f 	.word	0x8a9fed9f
 101e5d8:	ed9fda08 	.word	0xed9fda08
 101e5dc:	eeb40a9f 	.word	0xeeb40a9f
 101e5e0:	eef18a40 	.word	0xeef18a40
 101e5e4:	bf48fa10 	.word	0xbf48fa10
 101e5e8:	8a40eeb0 	.word	0x8a40eeb0
 101e5ec:	495cf8df 	.word	0x495cf8df
 101e5f0:	ee006825 	.word	0xee006825
 101e5f4:	eeb85a10 	.word	0xeeb85a10
 101e5f8:	ee200a40 	.word	0xee200a40
 101e5fc:	f7f60a08 	.word	0xf7f60a08
 101e600:	eebdff73 	.word	0xeebdff73
 101e604:	f44f0ac0 	.word	0xf44f0ac0
 101e608:	ee106142 	.word	0xee106142
 101e60c:	1a280a10 	.word	0x1a280a10
 101e610:	68606020 	.word	0x68606020
 101e614:	5080f040 	.word	0x5080f040
 101e618:	f8df6060 	.word	0xf8df6060
 101e61c:	6840092c 	.word	0x6840092c
 101e620:	f89d1844 	.word	0xf89d1844
 101e624:	21610068 	.word	0x21610068
 101e628:	f000fb11 	.word	0xf000fb11
 101e62c:	9000b280 	.word	0x9000b280
 101e630:	0064f89d 	.word	0x0064f89d
 101e634:	d06f2800 	.word	0xd06f2800
 101e638:	eddf9e17 	.word	0xeddf9e17
 101e63c:	46838ac4 	.word	0x46838ac4
 101e640:	9ac3ed9f 	.word	0x9ac3ed9f
 101e644:	9a00eeff 	.word	0x9a00eeff
 101e648:	1510f60f 	.word	0x1510f60f
 101e64c:	aa00eeb7 	.word	0xaa00eeb7
 101e650:	aacdeddf 	.word	0xaacdeddf
 101e654:	ba7ded9f 	.word	0xba7ded9f
 101e658:	18ecf8df 	.word	0x18ecf8df
 101e65c:	78097830 	.word	0x78097830
 101e660:	bf0c2902 	.word	0xbf0c2902
 101e664:	01e8f60f 	.word	0x01e8f60f
 101e668:	01e8f60f 	.word	0x01e8f60f
 101e66c:	0010f831 	.word	0x0010f831
 101e670:	0a10ee00 	.word	0x0a10ee00
 101e674:	eeb82018 	.word	0xeeb82018
 101e678:	ee600a40 	.word	0xee600a40
 101e67c:	f7f5ba08 	.word	0xf7f5ba08
 101e680:	f7f5ff17 	.word	0xf7f5ff17
 101e684:	4680fb79 	.word	0x4680fb79
 101e688:	ba6aeef4 	.word	0xba6aeef4
 101e68c:	fa10eef1 	.word	0xfa10eef1
 101e690:	eeb0bfa8 	.word	0xeeb0bfa8
 101e694:	da08ca4a 	.word	0xda08ca4a
 101e698:	ba69eef4 	.word	0xba69eef4
 101e69c:	fa10eef1 	.word	0xfa10eef1
 101e6a0:	eeb0bf4c 	.word	0xeeb0bf4c
 101e6a4:	eeb0ca69 	.word	0xeeb0ca69
 101e6a8:	ee2cca6b 	.word	0xee2cca6b
 101e6ac:	46a10a0b 	.word	0x46a10a0b
 101e6b0:	0a09ee20 	.word	0x0a09ee20
 101e6b4:	0a28ee20 	.word	0x0a28ee20
 101e6b8:	ff16f7f6 	.word	0xff16f7f6
 101e6bc:	0068f89d 	.word	0x0068f89d
 101e6c0:	cac0eefd 	.word	0xcac0eefd
 101e6c4:	46c2b190 	.word	0x46c2b190
 101e6c8:	0700ea4f 	.word	0x0700ea4f
 101e6cc:	0b01f81a 	.word	0x0b01f81a
 101e6d0:	1a90ee1c 	.word	0x1a90ee1c
 101e6d4:	0040eb05 	.word	0x0040eb05
 101e6d8:	2c02f830 	.word	0x2c02f830
 101e6dc:	f0024648 	.word	0xf0024648
 101e6e0:	1e7ff8b1 	.word	0x1e7ff8b1
 101e6e4:	70c2f44f 	.word	0x70c2f44f
 101e6e8:	d1ef4481 	.word	0xd1ef4481
 101e6ec:	baccee7b 	.word	0xbaccee7b
 101e6f0:	ba6aeef4 	.word	0xba6aeef4
 101e6f4:	fa10eef1 	.word	0xfa10eef1
 101e6f8:	eef4dac6 	.word	0xeef4dac6
 101e6fc:	eef1ba69 	.word	0xeef1ba69
 101e700:	d4c1fa10 	.word	0xd4c1fa10
 101e704:	1c762018 	.word	0x1c762018
 101e708:	fef4f7f5 	.word	0xfef4f7f5
 101e70c:	0b01f1bb 	.word	0x0b01f1bb
 101e710:	eb049800 	.word	0xeb049800
 101e714:	d19f0480 	.word	0xd19f0480
 101e718:	ecbdb00c 	.word	0xecbdb00c
 101e71c:	b0058b0a 	.word	0xb0058b0a
 101e720:	8ff0e8bd 	.word	0x8ff0e8bd
 101e724:	4e800000 	.word	0x4e800000
 101e728:	4ff0e92d 	.word	0x4ff0e92d
 101e72c:	f8df4683 	.word	0xf8df4683
 101e730:	b0817818 	.word	0xb0817818
 101e734:	f44f4689 	.word	0xf44f4689
 101e738:	469261c2 	.word	0x469261c2
 101e73c:	8b02ed2d 	.word	0x8b02ed2d
 101e740:	b0866878 	.word	0xb0866878
 101e744:	8a40eeb0 	.word	0x8a40eeb0
 101e748:	90004408 	.word	0x90004408
 101e74c:	f886f7f9 	.word	0xf886f7f9
 101e750:	2400b388 	.word	0x2400b388
 101e754:	f7f92500 	.word	0xf7f92500
 101e758:	f1baf885 	.word	0xf1baf885
 101e75c:	90010f00 	.word	0x90010f00
 101e760:	f8ad46d8 	.word	0xf8ad46d8
 101e764:	d00e9010 	.word	0xd00e9010
 101e768:	9a014656 	.word	0x9a014656
 101e76c:	ab029900 	.word	0xab029900
 101e770:	eb084640 	.word	0xeb084640
 101e774:	f0010889 	.word	0xf0010889
 101e778:	e9ddfdf8 	.word	0xe9ddfdf8
 101e77c:	18240102 	.word	0x18240102
 101e780:	1e76414d 	.word	0x1e76414d
 101e784:	ee00d1f1 	.word	0xee00d1f1
 101e788:	4620aa10 	.word	0x4620aa10
 101e78c:	0a40eeb8 	.word	0x0a40eeb8
 101e790:	edd74629 	.word	0xedd74629
 101e794:	ee600a02 	.word	0xee600a02
 101e798:	f7fa8a20 	.word	0xf7fa8a20
 101e79c:	ee00f9d9 	.word	0xee00f9d9
 101e7a0:	ee880a10 	.word	0xee880a10
 101e7a4:	eeb40a80 	.word	0xeeb40a80
 101e7a8:	eef10a48 	.word	0xeef10a48
 101e7ac:	bfacfa10 	.word	0xbfacfa10
 101e7b0:	20002001 	.word	0x20002001
 101e7b4:	68787078 	.word	0x68787078
 101e7b8:	1309ea4a 	.word	0x1309ea4a
 101e7bc:	f2009900 	.word	0xf2009900
 101e7c0:	46587294 	.word	0x46587294
 101e7c4:	f001b29b 	.word	0xf001b29b
 101e7c8:	b006fd97 	.word	0xb006fd97
 101e7cc:	8b02ecbd 	.word	0x8b02ecbd
 101e7d0:	e8bdb001 	.word	0xe8bdb001
 101e7d4:	b5008ff0 	.word	0xb5008ff0
 101e7d8:	2013b081 	.word	0x2013b081
 101e7dc:	fd2cf7f5 	.word	0xfd2cf7f5
 101e7e0:	1764f8df 	.word	0x1764f8df
 101e7e4:	6048b001 	.word	0x6048b001
 101e7e8:	2000bd00 	.word	0x2000bd00
 101e7ec:	1758f8df 	.word	0x1758f8df
 101e7f0:	47707008 	.word	0x47707008
 101e7f4:	00000000 	.word	0x00000000
 101e7f8:	41f0e92d 	.word	0x41f0e92d
 101e7fc:	f8df460c 	.word	0xf8df460c
 101e800:	78295748 	.word	0x78295748
 101e804:	686f4616 	.word	0x686f4616
 101e808:	6342f44f 	.word	0x6342f44f
 101e80c:	fb0600b2 	.word	0xfb0600b2
 101e810:	4601f801 	.word	0x4601f801
 101e814:	0088eb07 	.word	0x0088eb07
 101e818:	f7f54418 	.word	0xf7f54418
 101e81c:	eb07fb1b 	.word	0xeb07fb1b
 101e820:	f2410048 	.word	0xf2410048
 101e824:	46322130 	.word	0x46322130
 101e828:	46204401 	.word	0x46204401
 101e82c:	fc60f001 	.word	0xfc60f001
 101e830:	1c407828 	.word	0x1c407828
 101e834:	e8bd7028 	.word	0xe8bd7028
 101e838:	f8df81f0 	.word	0xf8df81f0
 101e83c:	f241070c 	.word	0xf241070c
 101e840:	68405138 	.word	0x68405138
 101e844:	47704408 	.word	0x47704408
 101e848:	44800000 	.word	0x44800000
 101e84c:	40490fdb 	.word	0x40490fdb
 101e850:	38d1b718 	.word	0x38d1b718
 101e854:	38d1b717 	.word	0x38d1b717
 101e858:	b8d1b717 	.word	0xb8d1b717
 101e85c:	4604b570 	.word	0x4604b570
 101e860:	ed2d460d 	.word	0xed2d460d
 101e864:	b0828b02 	.word	0xb0828b02
 101e868:	fffcf7f8 	.word	0xfffcf7f8
 101e86c:	466a4603 	.word	0x466a4603
 101e870:	46204629 	.word	0x46204629
 101e874:	fc9bf001 	.word	0xfc9bf001
 101e878:	0100e9dd 	.word	0x0100e9dd
 101e87c:	42912200 	.word	0x42912200
 101e880:	4290bf02 	.word	0x4290bf02
 101e884:	e9cd2001 	.word	0xe9cd2001
 101e888:	e9dd0200 	.word	0xe9dd0200
 101e88c:	f7fa0100 	.word	0xf7fa0100
 101e890:	ee00f95f 	.word	0xee00f95f
 101e894:	48410a10 	.word	0x48410a10
 101e898:	0a02edd0 	.word	0x0a02edd0
 101e89c:	0a80ee80 	.word	0x0a80ee80
 101e8a0:	f97af7fa 	.word	0xf97af7fa
 101e8a4:	8a40eeb0 	.word	0x8a40eeb0
 101e8a8:	ffd8f7f8 	.word	0xffd8f7f8
 101e8ac:	f7f8b910 	.word	0xf7f8b910
 101e8b0:	b120ffcd 	.word	0xb120ffcd
 101e8b4:	0a04eeb7 	.word	0x0a04eeb7
 101e8b8:	0a34eddf 	.word	0x0a34eddf
 101e8bc:	ed9fe003 	.word	0xed9fe003
 101e8c0:	eddf0a34 	.word	0xeddf0a34
 101e8c4:	eeb40a34 	.word	0xeeb40a34
 101e8c8:	eef10a48 	.word	0xeef10a48
 101e8cc:	bf48fa10 	.word	0xbf48fa10
 101e8d0:	8a40eeb0 	.word	0x8a40eeb0
 101e8d4:	eeb4d40c 	.word	0xeeb4d40c
 101e8d8:	eef18a60 	.word	0xeef18a60
 101e8dc:	bf48fa10 	.word	0xbf48fa10
 101e8e0:	8a60eeb0 	.word	0x8a60eeb0
 101e8e4:	eeb5d404 	.word	0xeeb5d404
 101e8e8:	eef18a40 	.word	0xeef18a40
 101e8ec:	dd28fa10 	.word	0xdd28fa10
 101e8f0:	e0042600 	.word	0xe0042600
 101e8f4:	0a00eeb0 	.word	0x0a00eeb0
 101e8f8:	ee281c76 	.word	0xee281c76
 101e8fc:	eeb08a00 	.word	0xeeb08a00
 101e900:	f7f60a48 	.word	0xf7f60a48
 101e904:	eddffdf1 	.word	0xeddffdf1
 101e908:	eeb40a24 	.word	0xeeb40a24
 101e90c:	eef10a60 	.word	0xeef10a60
 101e910:	d502fa10 	.word	0xd502fa10
 101e914:	2e2fb2f6 	.word	0x2e2fb2f6
 101e918:	ed9fdbec 	.word	0xed9fdbec
 101e91c:	eeb40a1f 	.word	0xeeb40a1f
 101e920:	eef18a40 	.word	0xeef18a40
 101e924:	db0cfa10 	.word	0xdb0cfa10
 101e928:	0a48eeb0 	.word	0x0a48eeb0
 101e92c:	fddcf7f6 	.word	0xfddcf7f6
 101e930:	0ac0eebd 	.word	0x0ac0eebd
 101e934:	ee10b2f3 	.word	0xee10b2f3
 101e938:	46292a10 	.word	0x46292a10
 101e93c:	f0014620 	.word	0xf0014620
 101e940:	b002fc1e 	.word	0xb002fc1e
 101e944:	8b02ecbd 	.word	0x8b02ecbd
 101e948:	0000bd70 	.word	0x0000bd70
 101e94c:	4e000000 	.word	0x4e000000
 101e950:	3a800000 	.word	0x3a800000
 101e954:	f8dfb570 	.word	0xf8dfb570
 101e958:	f44f15f0 	.word	0xf44f15f0
 101e95c:	684a6342 	.word	0x684a6342
 101e960:	fb117809 	.word	0xfb117809
 101e964:	18d4f000 	.word	0x18d4f000
 101e968:	b2a90045 	.word	0xb2a90045
 101e96c:	f0014620 	.word	0xf0014620
 101e970:	1e86fee3 	.word	0x1e86fee3
 101e974:	b128b270 	.word	0xb128b270
 101e978:	4622b2ab 	.word	0x4622b2ab
 101e97c:	4620b271 	.word	0x4620b271
 101e980:	f806f002 	.word	0xf806f002
 101e984:	bd70b270 	.word	0xbd70b270
 101e988:	3f800001 	.word	0x3f800001
 101e98c:	3f4a3d71 	.word	0x3f4a3d71
 101e990:	3fca3d71 	.word	0x3fca3d71
 101e994:	3f2147ae 	.word	0x3f2147ae
 101e998:	4e800000 	.word	0x4e800000
 101e99c:	20013284 	.word	0x20013284
 101e9a0:	4ff2e92d 	.word	0x4ff2e92d
 101e9a4:	f8df4682 	.word	0xf8df4682
 101e9a8:	ed2d75a0 	.word	0xed2d75a0
 101e9ac:	b0908b06 	.word	0xb0908b06
 101e9b0:	f44f6878 	.word	0xf44f6878
 101e9b4:	46146142 	.word	0x46146142
 101e9b8:	91014401 	.word	0x91014401
 101e9bc:	fb1a7839 	.word	0xfb1a7839
 101e9c0:	f241f201 	.word	0xf241f201
 101e9c4:	44015138 	.word	0x44015138
 101e9c8:	b2929801 	.word	0xb2929801
 101e9cc:	fb99f001 	.word	0xfb99f001
 101e9d0:	d8162c0d 	.word	0xd8162c0d
 101e9d4:	f004e8df 	.word	0xf004e8df
 101e9d8:	1513100d 	.word	0x1513100d
 101e9dc:	1513100d 	.word	0x1513100d
 101e9e0:	15151515 	.word	0x15151515
 101e9e4:	ed9f0a07 	.word	0xed9f0a07
 101e9e8:	e00a8ad0 	.word	0xe00a8ad0
 101e9ec:	8acfed9f 	.word	0x8acfed9f
 101e9f0:	ed9fe007 	.word	0xed9fe007
 101e9f4:	e0048acf 	.word	0xe0048acf
 101e9f8:	8aceed9f 	.word	0x8aceed9f
 101e9fc:	ed9fe001 	.word	0xed9fe001
 101ea00:	a8078ace 	.word	0xa8078ace
 101ea04:	3058f89d 	.word	0x3058f89d
 101ea08:	783a9000 	.word	0x783a9000
 101ea0c:	eeb09801 	.word	0xeeb09801
 101ea10:	46510a48 	.word	0x46510a48
 101ea14:	fb02f7ff 	.word	0xfb02f7ff
 101ea18:	68789000 	.word	0x68789000
 101ea1c:	7094f200 	.word	0x7094f200
 101ea20:	f7f89003 	.word	0xf7f89003
 101ea24:	9005ff1f 	.word	0x9005ff1f
 101ea28:	f44f6878 	.word	0xf44f6878
 101ea2c:	440161c2 	.word	0x440161c2
 101ea30:	99009102 	.word	0x99009102
 101ea34:	f2c02902 	.word	0xf2c02902
 101ea38:	f6008136 	.word	0xf6008136
 101ea3c:	46011018 	.word	0x46011018
 101ea40:	98029004 	.word	0x98029004
 101ea44:	24004652 	.word	0x24004652
 101ea48:	26002500 	.word	0x26002500
 101ea4c:	fc3ef7f5 	.word	0xfc3ef7f5
 101ea50:	f8ad9803 	.word	0xf8ad9803
 101ea54:	900aa02c 	.word	0x900aa02c
 101ea58:	ea4f9803 	.word	0xea4f9803
 101ea5c:	f04f018a 	.word	0xf04f018a
 101ea60:	46a30801 	.word	0x46a30801
 101ea64:	f812f7fe 	.word	0xf812f7fe
 101ea68:	f2416878 	.word	0xf2416878
 101ea6c:	f8dd2130 	.word	0xf8dd2130
 101ea70:	44089004 	.word	0x44089004
 101ea74:	99069006 	.word	0x99069006
 101ea78:	46484652 	.word	0x46484652
 101ea7c:	098aeb09 	.word	0x098aeb09
 101ea80:	fc24f7f5 	.word	0xfc24f7f5
 101ea84:	99069a05 	.word	0x99069a05
 101ea88:	ab089804 	.word	0xab089804
 101ea8c:	fe67f001 	.word	0xfe67f001
 101ea90:	0108e9dd 	.word	0x0108e9dd
 101ea94:	edd70049 	.word	0xedd70049
 101ea98:	ea418a02 	.word	0xea418a02
 101ea9c:	004071d0 	.word	0x004071d0
 101eaa0:	414d1824 	.word	0x414d1824
 101eaa4:	bf024559 	.word	0xbf024559
 101eaa8:	20014558 	.word	0x20014558
 101eaac:	f7fa2100 	.word	0xf7fa2100
 101eab0:	ee00f84f 	.word	0xee00f84f
 101eab4:	a80c0a10 	.word	0xa80c0a10
 101eab8:	0086eb00 	.word	0x0086eb00
 101eabc:	ee881c76 	.word	0xee881c76
 101eac0:	b2f60a80 	.word	0xb2f60a80
 101eac4:	0a00ed80 	.word	0x0a00ed80
 101eac8:	42869800 	.word	0x42869800
 101eacc:	f89ddbd3 	.word	0xf89ddbd3
 101ead0:	455d0000 	.word	0x455d0000
 101ead4:	0a10ee00 	.word	0x0a10ee00
 101ead8:	0a40eeb8 	.word	0x0a40eeb8
 101eadc:	455cbf02 	.word	0x455cbf02
 101eae0:	25002401 	.word	0x25002401
 101eae4:	8a28ee60 	.word	0x8a28ee60
 101eae8:	46294620 	.word	0x46294620
 101eaec:	f830f7fa 	.word	0xf830f7fa
 101eaf0:	ee009900 	.word	0xee009900
 101eaf4:	f20f0a10 	.word	0xf20f0a10
 101eaf8:	eb004084 	.word	0xeb004084
 101eafc:	ee880081 	.word	0xee880081
 101eb00:	38080a80 	.word	0x38080a80
 101eb04:	0a00edd0 	.word	0x0a00edd0
 101eb08:	0a40eef4 	.word	0x0a40eef4
 101eb0c:	fa10eef1 	.word	0xfa10eef1
 101eb10:	80c9f140 	.word	0x80c9f140
 101eb14:	f1ba2400 	.word	0xf1ba2400
 101eb18:	687d0f00 	.word	0x687d0f00
 101eb1c:	8a87eddf 	.word	0x8a87eddf
 101eb20:	9805d037 	.word	0x9805d037
 101eb24:	b1085d00 	.word	0xb1085d00
 101eb28:	e02b2000 	.word	0xe02b2000
 101eb2c:	99039804 	.word	0x99039804
 101eb30:	f8309a00 	.word	0xf8309a00
 101eb34:	f8510024 	.word	0xf8510024
 101eb38:	43401024 	.word	0x43401024
 101eb3c:	bf080049 	.word	0xbf080049
 101eb40:	43502101 	.word	0x43502101
 101eb44:	1a90ee00 	.word	0x1a90ee00
 101eb48:	0a60eef8 	.word	0x0a60eef8
 101eb4c:	0a10ee00 	.word	0x0a10ee00
 101eb50:	0a40eeb8 	.word	0x0a40eeb8
 101eb54:	0a20ee80 	.word	0x0a20ee80
 101eb58:	0a00eef7 	.word	0x0a00eef7
 101eb5c:	0a60eeb4 	.word	0x0a60eeb4
 101eb60:	fa10eef1 	.word	0xfa10eef1
 101eb64:	2001bf48 	.word	0x2001bf48
 101eb68:	eeb4d40c 	.word	0xeeb4d40c
 101eb6c:	eef10a68 	.word	0xeef10a68
 101eb70:	bfa8fa10 	.word	0xbfa8fa10
 101eb74:	da05203f 	.word	0xda05203f
 101eb78:	fcb6f7f6 	.word	0xfcb6f7f6
 101eb7c:	0ac0eebd 	.word	0x0ac0eebd
 101eb80:	0a10ee10 	.word	0x0a10ee10
 101eb84:	1c641929 	.word	0x1c641929
 101eb88:	4554b2e4 	.word	0x4554b2e4
 101eb8c:	0b5cf881 	.word	0x0b5cf881
 101eb90:	f89ddbc7 	.word	0xf89ddbc7
 101eb94:	9a003058 	.word	0x9a003058
 101eb98:	a807a90c 	.word	0xa807a90c
 101eb9c:	8a68eddf 	.word	0x8a68eddf
 101eba0:	eeb7b2d2 	.word	0xeeb7b2d2
 101eba4:	f7ff9a04 	.word	0xf7ff9a04
 101eba8:	f89dfc45 	.word	0xf89dfc45
 101ebac:	9a003058 	.word	0x9a003058
 101ebb0:	46519801 	.word	0x46519801
 101ebb4:	9a63eddf 	.word	0x9a63eddf
 101ebb8:	ed9fb2d2 	.word	0xed9fb2d2
 101ebbc:	f7ffaa63 	.word	0xf7ffaa63
 101ebc0:	9c01f949 	.word	0x9c01f949
 101ebc4:	5000f8dd 	.word	0x5000f8dd
 101ebc8:	fe4cf7f8 	.word	0xfe4cf7f8
 101ebcc:	aa084603 	.word	0xaa084603
 101ebd0:	46204651 	.word	0x46204651
 101ebd4:	faebf001 	.word	0xfaebf001
 101ebd8:	2308e9dd 	.word	0x2308e9dd
 101ebdc:	bf04455b 	.word	0xbf04455b
 101ebe0:	e9cd455a 	.word	0xe9cd455a
 101ebe4:	e9dd8b08 	.word	0xe9dd8b08
 101ebe8:	f7f90108 	.word	0xf7f90108
 101ebec:	ee00ffb1 	.word	0xee00ffb1
 101ebf0:	edd70a10 	.word	0xedd70a10
 101ebf4:	ee800a02 	.word	0xee800a02
 101ebf8:	f7f90a80 	.word	0xf7f90a80
 101ebfc:	eef0ffcd 	.word	0xeef0ffcd
 101ec00:	f7f8aa40 	.word	0xf7f8aa40
 101ec04:	b938fe2b 	.word	0xb938fe2b
 101ec08:	fe20f7f8 	.word	0xfe20f7f8
 101ec0c:	eef0b920 	.word	0xeef0b920
 101ec10:	eeb00a4a 	.word	0xeeb00a4a
 101ec14:	e0030a69 	.word	0xe0030a69
 101ec18:	0a49eef0 	.word	0x0a49eef0
 101ec1c:	0a68eeb0 	.word	0x0a68eeb0
 101ec20:	0a6aeef4 	.word	0x0a6aeef4
 101ec24:	fa10eef1 	.word	0xfa10eef1
 101ec28:	eef0bf48 	.word	0xeef0bf48
 101ec2c:	d40caa60 	.word	0xd40caa60
 101ec30:	aa40eef4 	.word	0xaa40eef4
 101ec34:	fa10eef1 	.word	0xfa10eef1
 101ec38:	eef0bf48 	.word	0xeef0bf48
 101ec3c:	d404aa40 	.word	0xd404aa40
 101ec40:	aa40eef5 	.word	0xaa40eef5
 101ec44:	fa10eef1 	.word	0xfa10eef1
 101ec48:	2600dd29 	.word	0x2600dd29
 101ec4c:	bf00e005 	.word	0xbf00e005
 101ec50:	0a00eeb0 	.word	0x0a00eeb0
 101ec54:	ee6a1c76 	.word	0xee6a1c76
 101ec58:	eeb0aa80 	.word	0xeeb0aa80
 101ec5c:	f7f60a6a 	.word	0xf7f60a6a
 101ec60:	eddffc43 	.word	0xeddffc43
 101ec64:	eeb40ab3 	.word	0xeeb40ab3
 101ec68:	eef10a60 	.word	0xeef10a60
 101ec6c:	d502fa10 	.word	0xd502fa10
 101ec70:	2e2fb2f6 	.word	0x2e2fb2f6
 101ec74:	ed9fdbec 	.word	0xed9fdbec
 101ec78:	eef40aae 	.word	0xeef40aae
 101ec7c:	eef1aa40 	.word	0xeef1aa40
 101ec80:	db0cfa10 	.word	0xdb0cfa10
 101ec84:	0a6aeeb0 	.word	0x0a6aeeb0
 101ec88:	fc2ef7f6 	.word	0xfc2ef7f6
 101ec8c:	0ac0eebd 	.word	0x0ac0eebd
 101ec90:	ee10b2f3 	.word	0xee10b2f3
 101ec94:	46512a10 	.word	0x46512a10
 101ec98:	f0014620 	.word	0xf0014620
 101ec9c:	1e6dfa70 	.word	0x1e6dfa70
 101eca0:	048aeb04 	.word	0x048aeb04
 101eca4:	9a00d190 	.word	0x9a00d190
 101eca8:	eeb09801 	.word	0xeeb09801
 101ecac:	46510a48 	.word	0x46510a48
 101ecb0:	f7ffb2d2 	.word	0xf7ffb2d2
 101ecb4:	6878fd39 	.word	0x6878fd39
 101ecb8:	2130f241 	.word	0x2130f241
 101ecbc:	18444652 	.word	0x18444652
 101ecc0:	46219802 	.word	0x46219802
 101ecc4:	fb02f7f5 	.word	0xfb02f7f5
 101ecc8:	f89d6878 	.word	0xf89d6878
 101eccc:	f6002058 	.word	0xf6002058
 101ecd0:	4620219c 	.word	0x4620219c
 101ecd4:	fc47f001 	.word	0xfc47f001
 101ecd8:	f44f6878 	.word	0xf44f6878
 101ecdc:	f89d7142 	.word	0xf89d7142
 101ece0:	44012058 	.word	0x44012058
 101ece4:	f0019802 	.word	0xf0019802
 101ece8:	6878fc0e 	.word	0x6878fc0e
 101ecec:	f6004652 	.word	0xf6004652
 101ecf0:	98021418 	.word	0x98021418
 101ecf4:	f0014621 	.word	0xf0014621
 101ecf8:	f89dfbfd 	.word	0xf89dfbfd
 101ecfc:	687a3058 	.word	0x687a3058
 101ed00:	46219803 	.word	0x46219803
 101ed04:	fb4ff001 	.word	0xfb4ff001
 101ed08:	3058f89d 	.word	0x3058f89d
 101ed0c:	46219a05 	.word	0x46219a05
 101ed10:	f0014620 	.word	0xf0014620
 101ed14:	8078fbc7 	.word	0x8078fbc7
 101ed18:	b0109800 	.word	0xb0109800
 101ed1c:	8b06ecbd 	.word	0x8b06ecbd
 101ed20:	b001b2c0 	.word	0xb001b2c0
 101ed24:	8ff0e8bd 	.word	0x8ff0e8bd
 101ed28:	40128f5c 	.word	0x40128f5c
 101ed2c:	4078f5c3 	.word	0x4078f5c3
 101ed30:	40dd70a4 	.word	0x40dd70a4
 101ed34:	4157d70a 	.word	0x4157d70a
 101ed38:	4214999a 	.word	0x4214999a
 101ed3c:	427c0001 	.word	0x427c0001
 101ed40:	3f4a3d71 	.word	0x3f4a3d71
 101ed44:	3f2147ae 	.word	0x3f2147ae
 101ed48:	3fca3d71 	.word	0x3fca3d71
 101ed4c:	4ff0e92d 	.word	0x4ff0e92d
 101ed50:	4681b081 	.word	0x4681b081
 101ed54:	46884d7c 	.word	0x46884d7c
 101ed58:	8b06ed2d 	.word	0x8b06ed2d
 101ed5c:	b0866868 	.word	0xb0866868
 101ed60:	6142f44f 	.word	0x6142f44f
 101ed64:	90014617 	.word	0x90014617
 101ed68:	fb071846 	.word	0xfb071846
 101ed6c:	4631f009 	.word	0x4631f009
 101ed70:	0b820400 	.word	0x0b820400
 101ed74:	f7f59801 	.word	0xf7f59801
 101ed78:	fb18f87d 	.word	0xfb18f87d
 101ed7c:	9801f207 	.word	0x9801f207
 101ed80:	11e8f20f 	.word	0x11e8f20f
 101ed84:	f001b2d2 	.word	0xf001b2d2
 101ed88:	2f02fc48 	.word	0x2f02fc48
 101ed8c:	9000a804 	.word	0x9000a804
 101ed90:	46439801 	.word	0x46439801
 101ed94:	bf0c463a 	.word	0xbf0c463a
 101ed98:	8a66ed9f 	.word	0x8a66ed9f
 101ed9c:	8a66ed9f 	.word	0x8a66ed9f
 101eda0:	0a48eeb0 	.word	0x0a48eeb0
 101eda4:	f7ff4649 	.word	0xf7ff4649
 101eda8:	f88df939 	.word	0xf88df939
 101edac:	46020000 	.word	0x46020000
 101edb0:	eeb09801 	.word	0xeeb09801
 101edb4:	46490a48 	.word	0x46490a48
 101edb8:	fcb6f7ff 	.word	0xfcb6f7ff
 101edbc:	d07a0038 	.word	0xd07a0038
 101edc0:	8a5eed9f 	.word	0x8a5eed9f
 101edc4:	0a01f04f 	.word	0x0a01f04f
 101edc8:	8a04eef7 	.word	0x8a04eef7
 101edcc:	0b00f04f 	.word	0x0b00f04f
 101edd0:	9a5bed9f 	.word	0x9a5bed9f
 101edd4:	9a5beddf 	.word	0x9a5beddf
 101edd8:	fd44f7f8 	.word	0xfd44f7f8
 101eddc:	aa024603 	.word	0xaa024603
 101ede0:	46304649 	.word	0x46304649
 101ede4:	f9e3f001 	.word	0xf9e3f001
 101ede8:	2302e9dd 	.word	0x2302e9dd
 101edec:	bf04455b 	.word	0xbf04455b
 101edf0:	e9cd455a 	.word	0xe9cd455a
 101edf4:	e9ddab02 	.word	0xe9ddab02
 101edf8:	f7f90102 	.word	0xf7f90102
 101edfc:	ee00fea9 	.word	0xee00fea9
 101ee00:	edd50a10 	.word	0xedd50a10
 101ee04:	ee800a02 	.word	0xee800a02
 101ee08:	f7f90a80 	.word	0xf7f90a80
 101ee0c:	eeb0fec5 	.word	0xeeb0fec5
 101ee10:	f7f8aa40 	.word	0xf7f8aa40
 101ee14:	b938fd23 	.word	0xb938fd23
 101ee18:	fd18f7f8 	.word	0xfd18f7f8
 101ee1c:	eef0b920 	.word	0xeef0b920
 101ee20:	eeb00a69 	.word	0xeeb00a69
 101ee24:	e0030a49 	.word	0xe0030a49
 101ee28:	0a68eef0 	.word	0x0a68eef0
 101ee2c:	0a48eeb0 	.word	0x0a48eeb0
 101ee30:	0a4aeef4 	.word	0x0a4aeef4
 101ee34:	fa10eef1 	.word	0xfa10eef1
 101ee38:	eeb0bf48 	.word	0xeeb0bf48
 101ee3c:	d40caa60 	.word	0xd40caa60
 101ee40:	aa40eeb4 	.word	0xaa40eeb4
 101ee44:	fa10eef1 	.word	0xfa10eef1
 101ee48:	eeb0bf48 	.word	0xeeb0bf48
 101ee4c:	d404aa40 	.word	0xd404aa40
 101ee50:	aa40eeb5 	.word	0xaa40eeb5
 101ee54:	fa10eef1 	.word	0xfa10eef1
 101ee58:	2400dd29 	.word	0x2400dd29
 101ee5c:	bf00e005 	.word	0xbf00e005
 101ee60:	0a00eeb0 	.word	0x0a00eeb0
 101ee64:	ee2a1c64 	.word	0xee2a1c64
 101ee68:	eeb0aa00 	.word	0xeeb0aa00
 101ee6c:	f7f60a4a 	.word	0xf7f60a4a
 101ee70:	eddffb3b 	.word	0xeddffb3b
 101ee74:	eeb40a2f 	.word	0xeeb40a2f
 101ee78:	eef10a60 	.word	0xeef10a60
 101ee7c:	d502fa10 	.word	0xd502fa10
 101ee80:	2c2fb2e4 	.word	0x2c2fb2e4
 101ee84:	ed9fdbec 	.word	0xed9fdbec
 101ee88:	eeb40a2a 	.word	0xeeb40a2a
 101ee8c:	eef1aa40 	.word	0xeef1aa40
 101ee90:	db0cfa10 	.word	0xdb0cfa10
 101ee94:	0a4aeeb0 	.word	0x0a4aeeb0
 101ee98:	fb26f7f6 	.word	0xfb26f7f6
 101ee9c:	0ac0eebd 	.word	0x0ac0eebd
 101eea0:	ee10b2e3 	.word	0xee10b2e3
 101eea4:	46492a10 	.word	0x46492a10
 101eea8:	f0014630 	.word	0xf0014630
 101eeac:	1e7ff968 	.word	0x1e7ff968
 101eeb0:	0689eb06 	.word	0x0689eb06
 101eeb4:	6868d190 	.word	0x6868d190
 101eeb8:	61c2f44f 	.word	0x61c2f44f
 101eebc:	1846464a 	.word	0x1846464a
 101eec0:	46309901 	.word	0x46309901
 101eec4:	fa02f7f5 	.word	0xfa02f7f5
 101eec8:	46426868 	.word	0x46426868
 101eecc:	219cf600 	.word	0x219cf600
 101eed0:	f0019801 	.word	0xf0019801
 101eed4:	6868fb77 	.word	0x6868fb77
 101eed8:	7142f44f 	.word	0x7142f44f
 101eedc:	44014642 	.word	0x44014642
 101eee0:	f0014630 	.word	0xf0014630
 101eee4:	6868fb24 	.word	0x6868fb24
 101eee8:	f600464a 	.word	0xf600464a
 101eeec:	46391718 	.word	0x46391718
 101eef0:	f0014630 	.word	0xf0014630
 101eef4:	686afaff 	.word	0x686afaff
 101eef8:	46394643 	.word	0x46394643
 101eefc:	7094f202 	.word	0x7094f202
 101ef00:	fa76f001 	.word	0xfa76f001
 101ef04:	fcaef7f8 	.word	0xfcaef7f8
 101ef08:	46434602 	.word	0x46434602
 101ef0c:	46384639 	.word	0x46384639
 101ef10:	fa9cf001 	.word	0xfa9cf001
 101ef14:	0000f89d 	.word	0x0000f89d
 101ef18:	ecbdb006 	.word	0xecbdb006
 101ef1c:	b0018b06 	.word	0xb0018b06
 101ef20:	8ff0e8bd 	.word	0x8ff0e8bd
 101ef24:	78404808 	.word	0x78404808
 101ef28:	48074770 	.word	0x48074770
 101ef2c:	47708840 	.word	0x47708840
 101ef30:	4e800000 	.word	0x4e800000
 101ef34:	40dd70a4 	.word	0x40dd70a4
 101ef38:	40128f5c 	.word	0x40128f5c
 101ef3c:	3f4a3d71 	.word	0x3f4a3d71
 101ef40:	3f2147ae 	.word	0x3f2147ae
 101ef44:	3fca3d71 	.word	0x3fca3d71
 101ef48:	20013284 	.word	0x20013284
 101ef4c:	40000024 	.word	0x40000024
 101ef50:	11200860 	.word	0x11200860
 101ef54:	29202060 	.word	0x29202060
 101ef58:	3aa031e0 	.word	0x3aa031e0
 101ef5c:	00c60056 	.word	0x00c60056
 101ef60:	01a60136 	.word	0x01a60136
 101ef64:	02860216 	.word	0x02860216
 101ef68:	036602f6 	.word	0x036602f6
 101ef6c:	0ef2c902 	.word	0x0ef2c902
 101ef70:	262eb60c 	.word	0x262eb60c
 101ef74:	d4e7b42a 	.word	0xd4e7b42a
 101ef78:	fa51b8fe 	.word	0xfa51b8fe
 101ef7c:	41fcf5c3 	.word	0x41fcf5c3
 101ef80:	417d999a 	.word	0x417d999a
 101ef84:	41200000 	.word	0x41200000
 101ef88:	4604b5f0 	.word	0x4604b5f0
 101ef8c:	460db081 	.word	0x460db081
 101ef90:	20184616 	.word	0x20184616
 101ef94:	fa8cf7f5 	.word	0xfa8cf7f5
 101ef98:	48300031 	.word	0x48300031
 101ef9c:	d0068843 	.word	0xd0068843
 101efa0:	78028887 	.word	0x78028887
 101efa4:	1af918e0 	.word	0x1af918e0
 101efa8:	fd94f7f8 	.word	0xfd94f7f8
 101efac:	461fe000 	.word	0x461fe000
 101efb0:	46204639 	.word	0x46204639
 101efb4:	fd48f001 	.word	0xfd48f001
 101efb8:	463a4633 	.word	0x463a4633
 101efbc:	46204629 	.word	0x46204629
 101efc0:	fd49f001 	.word	0xfd49f001
 101efc4:	2018b001 	.word	0x2018b001
 101efc8:	40f0e8bd 	.word	0x40f0e8bd
 101efcc:	ba92f7f5 	.word	0xba92f7f5
 101efd0:	f101fb10 	.word	0xf101fb10
 101efd4:	4c21b510 	.word	0x4c21b510
 101efd8:	f101b289 	.word	0xf101b289
 101efdc:	029b033f 	.word	0x029b033f
 101efe0:	2b030c1b 	.word	0x2b030c1b
 101efe4:	bfb88060 	.word	0xbfb88060
 101efe8:	eb002303 	.word	0xeb002303
 101efec:	1a401083 	.word	0x1a401083
 101eff0:	80a02a00 	.word	0x80a02a00
 101eff4:	203cbf14 	.word	0x203cbf14
 101eff8:	7020200f 	.word	0x7020200f
 101effc:	218068a0 	.word	0x218068a0
 101f000:	ff24f7f4 	.word	0xff24f7f4
 101f004:	68a17820 	.word	0x68a17820
 101f008:	00401c40 	.word	0x00401c40
 101f00c:	68e08008 	.word	0x68e08008
 101f010:	f7f42180 	.word	0xf7f42180
 101f014:	6920ff1b 	.word	0x6920ff1b
 101f018:	7140f44f 	.word	0x7140f44f
 101f01c:	ff16f7f4 	.word	0xff16f7f4
 101f020:	21406960 	.word	0x21406960
 101f024:	fd32f7fd 	.word	0xfd32f7fd
 101f028:	f44f6961 	.word	0xf44f6961
 101f02c:	61887080 	.word	0x61887080
 101f030:	f7f52018 	.word	0xf7f52018
 101f034:	480afa3d 	.word	0x480afa3d
 101f038:	6008490a 	.word	0x6008490a
 101f03c:	e8bd2018 	.word	0xe8bd2018
 101f040:	f7f54010 	.word	0xf7f54010
 101f044:	4905ba57 	.word	0x4905ba57
 101f048:	608a6802 	.word	0x608a6802
 101f04c:	60ca6842 	.word	0x60ca6842
 101f050:	610a6882 	.word	0x610a6882
 101f054:	614868c0 	.word	0x614868c0
 101f058:	00004770 	.word	0x00004770
 101f05c:	2001320c 	.word	0x2001320c
 101f060:	01800009 	.word	0x01800009
 101f064:	e010004c 	.word	0xe010004c
 101f068:	f852b530 	.word	0xf852b530
 101f06c:	eba13b04 	.word	0xeba13b04
 101f070:	eb000100 	.word	0xeb000100
 101f074:	f8520061 	.word	0xf8520061
 101f078:	f8321b04 	.word	0xf8321b04
 101f07c:	eba34b02 	.word	0xeba34b02
 101f080:	f8320000 	.word	0xf8320000
 101f084:	fb405b06 	.word	0xfb405b06
 101f088:	ea4f1404 	.word	0xea4f1404
 101f08c:	fb404424 	.word	0xfb404424
 101f090:	f8321105 	.word	0xf8321105
 101f094:	eba0090c 	.word	0xeba0090c
 101f098:	f8420004 	.word	0xf8420004
 101f09c:	eb031b08 	.word	0xeb031b08
 101f0a0:	f8420400 	.word	0xf8420400
 101f0a4:	6014090c 	.word	0x6014090c
 101f0a8:	00a0eba3 	.word	0x00a0eba3
 101f0ac:	0000bd30 	.word	0x0000bd30
 101f0b0:	49084807 	.word	0x49084807
 101f0b4:	68096800 	.word	0x68096800
 101f0b8:	d004000a 	.word	0xd004000a
 101f0bc:	0060f000 	.word	0x0060f000
 101f0c0:	bf082860 	.word	0xbf082860
 101f0c4:	47704708 	.word	0x47704708
 101f0c8:	60084902 	.word	0x60084902
 101f0cc:	00004770 	.word	0x00004770
 101f0d0:	400000a4 	.word	0x400000a4
 101f0d4:	200132c4 	.word	0x200132c4
 101f0d8:	20000003 	.word	0x20000003
 101f0dc:	0f03f013 	.word	0x0f03f013
 101f0e0:	1e52d009 	.word	0x1e52d009
 101f0e4:	f813bf22 	.word	0xf813bf22
 101f0e8:	f8110b01 	.word	0xf8110b01
 101f0ec:	ebb0cb01 	.word	0xebb0cb01
 101f0f0:	d0f3000c 	.word	0xd0f3000c
 101f0f4:	1f124770 	.word	0x1f124770
 101f0f8:	f853bf22 	.word	0xf853bf22
 101f0fc:	f8510b04 	.word	0xf8510b04
 101f100:	4560cb04 	.word	0x4560cb04
 101f104:	1d12d0f7 	.word	0x1d12d0f7
 101f108:	ba00d20a 	.word	0xba00d20a
 101f10c:	fc8cfa9c 	.word	0xfc8cfa9c
 101f110:	000cebb0 	.word	0x000cebb0
 101f114:	f06fbf38 	.word	0xf06fbf38
 101f118:	bf880000 	.word	0xbf880000
 101f11c:	47702001 	.word	0x47702001
 101f120:	bf221e52 	.word	0xbf221e52
 101f124:	0b01f813 	.word	0x0b01f813
 101f128:	cb01f811 	.word	0xcb01f811
 101f12c:	000cebb0 	.word	0x000cebb0
 101f130:	1c52d0f6 	.word	0x1c52d0f6
 101f134:	4610bf08 	.word	0x4610bf08
 101f138:	00004770 	.word	0x00004770
 101f13c:	6001490f 	.word	0x6001490f
 101f140:	0208f101 	.word	0x0208f101
 101f144:	32106042 	.word	0x32106042
 101f148:	f44f6082 	.word	0xf44f6082
 101f14c:	440a7206 	.word	0x440a7206
 101f150:	f44f60c2 	.word	0xf44f60c2
 101f154:	440a720a 	.word	0x440a720a
 101f158:	32106102 	.word	0x32106102
 101f15c:	f44f6142 	.word	0xf44f6142
 101f160:	440a6287 	.word	0x440a6287
 101f164:	f44f6182 	.word	0xf44f6182
 101f168:	440a6289 	.word	0x440a6289
 101f16c:	322061c2 	.word	0x322061c2
 101f170:	f44f6202 	.word	0xf44f6202
 101f174:	441162cd 	.word	0x441162cd
 101f178:	47706241 	.word	0x47706241
 101f17c:	2001358c 	.word	0x2001358c
 101f180:	8f5ff3bf 	.word	0x8f5ff3bf
 101f184:	d1fb1e40 	.word	0xd1fb1e40
 101f188:	00004770 	.word	0x00004770
 101f18c:	bf00b500 	.word	0xbf00b500
 101f190:	46960013 	.word	0x46960013
 101f194:	39104694 	.word	0x39104694
 101f198:	e8a0bf28 	.word	0xe8a0bf28
 101f19c:	d8fa500c 	.word	0xd8fa500c
 101f1a0:	7c41ea5f 	.word	0x7c41ea5f
 101f1a4:	c00cbf28 	.word	0xc00cbf28
 101f1a8:	f840bf48 	.word	0xf840bf48
 101f1ac:	07c92b04 	.word	0x07c92b04
 101f1b0:	f820bf28 	.word	0xf820bf28
 101f1b4:	bf482b02 	.word	0xbf482b02
 101f1b8:	2b01f800 	.word	0x2b01f800
 101f1bc:	0000bd00 	.word	0x0000bd00
 101f1c0:	b209b4f0 	.word	0xb209b4f0
 101f1c4:	1310f64c 	.word	0x1310f64c
 101f1c8:	0600f04f 	.word	0x0600f04f
 101f1cc:	57baf644 	.word	0x57baf644
 101f1d0:	0400f241 	.word	0x0400f241
 101f1d4:	1402f2ce 	.word	0x1402f2ce
 101f1d8:	0500f241 	.word	0x0500f241
 101f1dc:	1500f2ce 	.word	0x1500f2ce
 101f1e0:	f103fb01 	.word	0xf103fb01
 101f1e4:	6148f884 	.word	0x6148f884
 101f1e8:	f884722f 	.word	0xf884722f
 101f1ec:	736b11c8 	.word	0x736b11c8
 101f1f0:	71eb71eb 	.word	0x71eb71eb
 101f1f4:	71eb71eb 	.word	0x71eb71eb
 101f1f8:	71eb71eb 	.word	0x71eb71eb
 101f1fc:	74fff647 	.word	0x74fff647
 101f200:	735cf64e 	.word	0x735cf64e
 101f204:	4b04f840 	.word	0x4b04f840
 101f208:	1120f8d5 	.word	0x1120f8d5
 101f20c:	0202f1a2 	.word	0x0202f1a2
 101f210:	fa0fb20c 	.word	0xfa0fb20c
 101f214:	fb03f5a1 	.word	0xfb03f5a1
 101f218:	fb03f404 	.word	0xfb03f404
 101f21c:	1424f505 	.word	0x1424f505
 101f220:	0400f144 	.word	0x0400f144
 101f224:	f145142d 	.word	0xf145142d
 101f228:	eac40500 	.word	0xeac40500
 101f22c:	fad44405 	.word	0xfad44405
 101f230:	f840f101 	.word	0xf840f101
 101f234:	fb441b04 	.word	0xfb441b04
 101f238:	fb24f301 	.word	0xfb24f301
 101f23c:	13dbf511 	.word	0x13dbf511
 101f240:	0300f143 	.word	0x0300f143
 101f244:	f14513ed 	.word	0xf14513ed
 101f248:	eac30500 	.word	0xeac30500
 101f24c:	1e524105 	.word	0x1e524105
 101f250:	1b04f840 	.word	0x1b04f840
 101f254:	bcf0d1ef 	.word	0xbcf0d1ef
 101f258:	b4304770 	.word	0xb4304770
 101f25c:	f8516803 	.word	0xf8516803
 101f260:	fb434b04 	.word	0xfb434b04
 101f264:	fb23f504 	.word	0xfb23f504
 101f268:	13edf314 	.word	0x13edf314
 101f26c:	0500f145 	.word	0x0500f145
 101f270:	f14313db 	.word	0xf14313db
 101f274:	eac50300 	.word	0xeac50300
 101f278:	f8404303 	.word	0xf8404303
 101f27c:	1e523b04 	.word	0x1e523b04
 101f280:	bc30d1ec 	.word	0xbc30d1ec
 101f284:	f9b04770 	.word	0xf9b04770
 101f288:	f6472000 	.word	0xf6472000
 101f28c:	f82073ff 	.word	0xf82073ff
 101f290:	f1a13b02 	.word	0xf1a13b02
 101f294:	ea4f0101 	.word	0xea4f0101
 101f298:	eb034303 	.word	0xeb034303
 101f29c:	fb930362 	.word	0xfb930362
 101f2a0:	f9b0f2f2 	.word	0xf9b0f2f2
 101f2a4:	fb033000 	.word	0xfb033000
 101f2a8:	141bf302 	.word	0x141bf302
 101f2ac:	0300f143 	.word	0x0300f143
 101f2b0:	3b02f820 	.word	0x3b02f820
 101f2b4:	d1f41e49 	.word	0xd1f41e49
 101f2b8:	f8504770 	.word	0xf8504770
 101f2bc:	1e523b04 	.word	0x1e523b04
 101f2c0:	ba5bba1b 	.word	0xba5bba1b
 101f2c4:	3b04f841 	.word	0x3b04f841
 101f2c8:	4770d1f7 	.word	0x4770d1f7
 101f2cc:	43f0e92d 	.word	0x43f0e92d
 101f2d0:	1913ea4f 	.word	0x1913ea4f
 101f2d4:	0303f003 	.word	0x0303f003
 101f2d8:	040ff04f 	.word	0x040ff04f
 101f2dc:	0301f103 	.word	0x0301f103
 101f2e0:	f304fb03 	.word	0xf304fb03
 101f2e4:	0400f04f 	.word	0x0400f04f
 101f2e8:	0500f04f 	.word	0x0500f04f
 101f2ec:	6b04f851 	.word	0x6b04f851
 101f2f0:	f850ba36 	.word	0xf850ba36
 101f2f4:	f1b97b04 	.word	0xf1b97b04
 101f2f8:	bf080f00 	.word	0xbf080f00
 101f2fc:	fa4fba7f 	.word	0xfa4fba7f
 101f300:	0076f887 	.word	0x0076f887
 101f304:	bf34441c 	.word	0xbf34441c
 101f308:	0408eba4 	.word	0x0408eba4
 101f30c:	1e524444 	.word	0x1e524444
 101f310:	f105d009 	.word	0xf105d009
 101f314:	2d200501 	.word	0x2d200501
 101f318:	f015d0e6 	.word	0xf015d0e6
 101f31c:	d0e80f03 	.word	0xd0e80f03
 101f320:	2717ea4f 	.word	0x2717ea4f
 101f324:	4620e7eb 	.word	0x4620e7eb
 101f328:	83f0e8bd 	.word	0x83f0e8bd
 101f32c:	f04fb530 	.word	0xf04fb530
 101f330:	f04f0200 	.word	0xf04f0200
 101f334:	f8500300 	.word	0xf8500300
 101f338:	ba244b04 	.word	0xba244b04
 101f33c:	7524ea4f 	.word	0x7524ea4f
 101f340:	bf592d00 	.word	0xbf592d00
 101f344:	1b521dd2 	.word	0x1b521dd2
 101f348:	19523208 	.word	0x19523208
 101f34c:	d0061e49 	.word	0xd0061e49
 101f350:	0301f103 	.word	0x0301f103
 101f354:	d0ec2b08 	.word	0xd0ec2b08
 101f358:	1404ea4f 	.word	0x1404ea4f
 101f35c:	4610e7ee 	.word	0x4610e7ee
 101f360:	0000bd30 	.word	0x0000bd30
 101f364:	e9d2b4f0 	.word	0xe9d2b4f0
 101f368:	f04f4500 	.word	0xf04f4500
 101f36c:	f04f0300 	.word	0xf04f0300
 101f370:	f8300660 	.word	0xf8300660
 101f374:	fb077b04 	.word	0xfb077b04
 101f378:	19e4f707 	.word	0x19e4f707
 101f37c:	0500f145 	.word	0x0500f145
 101f380:	0f07f016 	.word	0x0f07f016
 101f384:	f1a6d102 	.word	0xf1a6d102
 101f388:	e7f20601 	.word	0xe7f20601
 101f38c:	1797ea4f 	.word	0x1797ea4f
 101f390:	1e76443b 	.word	0x1e76443b
 101f394:	f830d1ed 	.word	0xf830d1ed
 101f398:	fb077b04 	.word	0xfb077b04
 101f39c:	19e4f707 	.word	0x19e4f707
 101f3a0:	0500f145 	.word	0x0500f145
 101f3a4:	bf181e49 	.word	0xbf181e49
 101f3a8:	e9c2e7e1 	.word	0xe9c2e7e1
 101f3ac:	46184500 	.word	0x46184500
 101f3b0:	4770bcf0 	.word	0x4770bcf0
 101f3b4:	e9d2b4f0 	.word	0xe9d2b4f0
 101f3b8:	f04f4500 	.word	0xf04f4500
 101f3bc:	f8300300 	.word	0xf8300300
 101f3c0:	f04f7b04 	.word	0xf04f7b04
 101f3c4:	fb070660 	.word	0xfb070660
 101f3c8:	19e4f707 	.word	0x19e4f707
 101f3cc:	0500f145 	.word	0x0500f145
 101f3d0:	7b04f830 	.word	0x7b04f830
 101f3d4:	f707fb07 	.word	0xf707fb07
 101f3d8:	f14519e4 	.word	0xf14519e4
 101f3dc:	ea4f0500 	.word	0xea4f0500
 101f3e0:	443b1797 	.word	0x443b1797
 101f3e4:	d1f31e76 	.word	0xd1f31e76
 101f3e8:	bf181e49 	.word	0xbf181e49
 101f3ec:	e9c2e7e7 	.word	0xe9c2e7e7
 101f3f0:	46184500 	.word	0x46184500
 101f3f4:	4770bcf0 	.word	0x4770bcf0
 101f3f8:	07f0e92d 	.word	0x07f0e92d
 101f3fc:	0102f101 	.word	0x0102f101
 101f400:	0400f04f 	.word	0x0400f04f
 101f404:	0300f04f 	.word	0x0300f04f
 101f408:	4888f246 	.word	0x4888f246
 101f40c:	0560f04f 	.word	0x0560f04f
 101f410:	0f07f015 	.word	0x0f07f015
 101f414:	f850d106 	.word	0xf850d106
 101f418:	f9319b04 	.word	0xf9319b04
 101f41c:	f1a56b04 	.word	0xf1a56b04
 101f420:	e7f50501 	.word	0xe7f50501
 101f424:	7b04f931 	.word	0x7b04f931
 101f428:	bfb81bbe 	.word	0xbfb81bbe
 101f42c:	45464276 	.word	0x45464276
 101f430:	ebc6bfc8 	.word	0xebc6bfc8
 101f434:	ebb60648 	.word	0xebb60648
 101f438:	bfc80f58 	.word	0xbfc80f58
 101f43c:	f909fad3 	.word	0xf909fad3
 101f440:	ab04f850 	.word	0xab04f850
 101f444:	f919fada 	.word	0xf919fada
 101f448:	f909fb29 	.word	0xf909fb29
 101f44c:	1499eb04 	.word	0x1499eb04
 101f450:	463e46d1 	.word	0x463e46d1
 101f454:	d1db1e6d 	.word	0xd1db1e6d
 101f458:	bf1c1e52 	.word	0xbf1c1e52
 101f45c:	e7d51d00 	.word	0xe7d51d00
 101f460:	e8bd4620 	.word	0xe8bd4620
 101f464:	477007f0 	.word	0x477007f0
 101f468:	1ff0e92d 	.word	0x1ff0e92d
 101f46c:	0102f101 	.word	0x0102f101
 101f470:	0400f04f 	.word	0x0400f04f
 101f474:	4888f246 	.word	0x4888f246
 101f478:	0560f04f 	.word	0x0560f04f
 101f47c:	9b04f850 	.word	0x9b04f850
 101f480:	6b04f931 	.word	0x6b04f931
 101f484:	7b04f931 	.word	0x7b04f931
 101f488:	0b00f04f 	.word	0x0b00f04f
 101f48c:	bfb81bbe 	.word	0xbfb81bbe
 101f490:	0648eb06 	.word	0x0648eb06
 101f494:	bfc44546 	.word	0xbfc44546
 101f498:	0608eba6 	.word	0x0608eba6
 101f49c:	f909fadb 	.word	0xf909fadb
 101f4a0:	0f58ebb6 	.word	0x0f58ebb6
 101f4a4:	eba6bfc4 	.word	0xeba6bfc4
 101f4a8:	fadb0608 	.word	0xfadb0608
 101f4ac:	2a00f909 	.word	0x2a00f909
 101f4b0:	fa0fd035 	.word	0xfa0fd035
 101f4b4:	fa0ffaa9 	.word	0xfa0ffaa9
 101f4b8:	ea4ff989 	.word	0xea4ff989
 101f4bc:	f1cb0b98 	.word	0xf1cb0b98
 101f4c0:	ebb60b00 	.word	0xebb60b00
 101f4c4:	bfc10f98 	.word	0xbfc10f98
 101f4c8:	0658eba6 	.word	0x0658eba6
 101f4cc:	46ca46d4 	.word	0x46ca46d4
 101f4d0:	0900f1cc 	.word	0x0900f1cc
 101f4d4:	455edc07 	.word	0x455edc07
 101f4d8:	eb06bfbf 	.word	0xeb06bfbf
 101f4dc:	46d40658 	.word	0x46d40658
 101f4e0:	0a00f1c9 	.word	0x0a00f1c9
 101f4e4:	eac946e1 	.word	0xeac946e1
 101f4e8:	2a01490a 	.word	0x2a01490a
 101f4ec:	ebb6d017 	.word	0xebb6d017
 101f4f0:	bfc20fd8 	.word	0xbfc20fd8
 101f4f4:	2c82f645 	.word	0x2c82f645
 101f4f8:	2c82f6c5 	.word	0x2c82f6c5
 101f4fc:	ebb6e007 	.word	0xebb6e007
 101f500:	bfba0f6b 	.word	0xbfba0f6b
 101f504:	2c82f645 	.word	0x2c82f645
 101f508:	5c7ef2ca 	.word	0x5c7ef2ca
 101f50c:	fb49e007 	.word	0xfb49e007
 101f510:	fb29fa0c 	.word	0xfb29fa0c
 101f514:	ea4ff91c 	.word	0xea4ff91c
 101f518:	eaca3aea 	.word	0xeaca3aea
 101f51c:	f8500949 	.word	0xf8500949
 101f520:	fadaab04 	.word	0xfadaab04
 101f524:	fb29f919 	.word	0xfb29f919
 101f528:	eb04f909 	.word	0xeb04f909
 101f52c:	46d11499 	.word	0x46d11499
 101f530:	1e6d463e 	.word	0x1e6d463e
 101f534:	1e5bd1a6 	.word	0x1e5bd1a6
 101f538:	4620d19e 	.word	0x4620d19e
 101f53c:	1ff0e8bd 	.word	0x1ff0e8bd
 101f540:	e92d4770 	.word	0xe92d4770
 101f544:	f10001f0 	.word	0xf10001f0
 101f548:	f2460002 	.word	0xf2460002
 101f54c:	f04f4588 	.word	0xf04f4588
 101f550:	f04f0600 	.word	0xf04f0600
 101f554:	f04f0700 	.word	0xf04f0700
 101f558:	f9300860 	.word	0xf9300860
 101f55c:	f0183b04 	.word	0xf0183b04
 101f560:	d1030f07 	.word	0xd1030f07
 101f564:	3b04f930 	.word	0x3b04f930
 101f568:	0801f1a8 	.word	0x0801f1a8
 101f56c:	4b04f930 	.word	0x4b04f930
 101f570:	bfb81ae3 	.word	0xbfb81ae3
 101f574:	42ab425b 	.word	0x42ab425b
 101f578:	1b5bbfc8 	.word	0x1b5bbfc8
 101f57c:	0f55ebb3 	.word	0x0f55ebb3
 101f580:	ebc3bfc8 	.word	0xebc3bfc8
 101f584:	441f0305 	.word	0x441f0305
 101f588:	bfc842b3 	.word	0xbfc842b3
 101f58c:	4623461e 	.word	0x4623461e
 101f590:	0801f1b8 	.word	0x0801f1b8
 101f594:	1e52d1e3 	.word	0x1e52d1e3
 101f598:	1d00bf1c 	.word	0x1d00bf1c
 101f59c:	4630e7db 	.word	0x4630e7db
 101f5a0:	e8bd600f 	.word	0xe8bd600f
 101f5a4:	477001f0 	.word	0x477001f0
 101f5a8:	03f0e92d 	.word	0x03f0e92d
 101f5ac:	0002f100 	.word	0x0002f100
 101f5b0:	0900f04f 	.word	0x0900f04f
 101f5b4:	0800f04f 	.word	0x0800f04f
 101f5b8:	4688f246 	.word	0x4688f246
 101f5bc:	0760f04f 	.word	0x0760f04f
 101f5c0:	4b04f930 	.word	0x4b04f930
 101f5c4:	5b04f930 	.word	0x5b04f930
 101f5c8:	bfb81b2c 	.word	0xbfb81b2c
 101f5cc:	42b44264 	.word	0x42b44264
 101f5d0:	1ba4bfc8 	.word	0x1ba4bfc8
 101f5d4:	0f56ebb4 	.word	0x0f56ebb4
 101f5d8:	ebc4bfc8 	.word	0xebc4bfc8
 101f5dc:	2a000406 	.word	0x2a000406
 101f5e0:	ebb4d00b 	.word	0xebb4d00b
 101f5e4:	bfc80f96 	.word	0xbfc80f96
 101f5e8:	0456ebc4 	.word	0x0456ebc4
 101f5ec:	d0042a01 	.word	0xd0042a01
 101f5f0:	0fd6ebb4 	.word	0x0fd6ebb4
 101f5f4:	ebc4bfc8 	.word	0xebc4bfc8
 101f5f8:	44a00496 	.word	0x44a00496
 101f5fc:	bf88454c 	.word	0xbf88454c
 101f600:	462c46a1 	.word	0x462c46a1
 101f604:	d1dd1e7f 	.word	0xd1dd1e7f
 101f608:	d1d71e5b 	.word	0xd1d71e5b
 101f60c:	f8c14648 	.word	0xf8c14648
 101f610:	e8bd8000 	.word	0xe8bd8000
 101f614:	477003f0 	.word	0x477003f0
 101f618:	41f0e92d 	.word	0x41f0e92d
 101f61c:	0002f100 	.word	0x0002f100
 101f620:	4688f246 	.word	0x4688f246
 101f624:	0560f04f 	.word	0x0560f04f
 101f628:	0804f04f 	.word	0x0804f04f
 101f62c:	0f07f015 	.word	0x0f07f015
 101f630:	f930d104 	.word	0xf930d104
 101f634:	f1a53b04 	.word	0xf1a53b04
 101f638:	e7f70501 	.word	0xe7f70501
 101f63c:	4b04f930 	.word	0x4b04f930
 101f640:	bfb81ae3 	.word	0xbfb81ae3
 101f644:	42b3425b 	.word	0x42b3425b
 101f648:	ebc3bfa8 	.word	0xebc3bfa8
 101f64c:	ea4f0346 	.word	0xea4f0346
 101f650:	fbb31303 	.word	0xfbb31303
 101f654:	f1c3f3f6 	.word	0xf1c3f3f6
 101f658:	f3030307 	.word	0xf3030307
 101f65c:	f0180303 	.word	0xf0180303
 101f660:	bf0c0f01 	.word	0xbf0c0f01
 101f664:	370ff363 	.word	0x370ff363
 101f668:	270bf363 	.word	0x270bf363
 101f66c:	f1b84623 	.word	0xf1b84623
 101f670:	d0040801 	.word	0xd0040801
 101f674:	0f01f018 	.word	0x0f01f018
 101f678:	0a3fbf08 	.word	0x0a3fbf08
 101f67c:	f821e003 	.word	0xf821e003
 101f680:	f04f7b02 	.word	0xf04f7b02
 101f684:	1e6d0804 	.word	0x1e6d0804
 101f688:	1e52d1d0 	.word	0x1e52d1d0
 101f68c:	1d00bf1c 	.word	0x1d00bf1c
 101f690:	e8bde7c8 	.word	0xe8bde7c8
 101f694:	b57081f0 	.word	0xb57081f0
 101f698:	0320f04f 	.word	0x0320f04f
 101f69c:	0f07f013 	.word	0x0f07f013
 101f6a0:	f850bf0c 	.word	0xf850bf0c
 101f6a4:	0a244b04 	.word	0x0a244b04
 101f6a8:	ea4f0a26 	.word	0xea4f0a26
 101f6ac:	09260535 	.word	0x09260535
 101f6b0:	0535ea4f 	.word	0x0535ea4f
 101f6b4:	d0081e92 	.word	0xd0081e92
 101f6b8:	bf011e9b 	.word	0xbf011e9b
 101f6bc:	f5a5fa95 	.word	0xf5a5fa95
 101f6c0:	f841ba2d 	.word	0xf841ba2d
 101f6c4:	23205b04 	.word	0x23205b04
 101f6c8:	1e9be7e8 	.word	0x1e9be7e8
 101f6cc:	40ddbf18 	.word	0x40ddbf18
 101f6d0:	f5a5fa95 	.word	0xf5a5fa95
 101f6d4:	600dba2d 	.word	0x600dba2d
 101f6d8:	e92dbd70 	.word	0xe92dbd70
 101f6dc:	f8531ff0 	.word	0xf8531ff0
 101f6e0:	f8534b04 	.word	0xf8534b04
 101f6e4:	f8535b04 	.word	0xf8535b04
 101f6e8:	f8136b04 	.word	0xf8136b04
 101f6ec:	781bcb01 	.word	0x781bcb01
 101f6f0:	0502f105 	.word	0x0502f105
 101f6f4:	8b04f850 	.word	0x8b04f850
 101f6f8:	9b04f935 	.word	0x9b04f935
 101f6fc:	0300e92d 	.word	0x0300e92d
 101f700:	0760f04f 	.word	0x0760f04f
 101f704:	0300e8bd 	.word	0x0300e8bd
 101f708:	ab04f850 	.word	0xab04f850
 101f70c:	fb0afb28 	.word	0xfb0afb28
 101f710:	f81afb48 	.word	0xf81afb48
 101f714:	b800e9c1 	.word	0xb800e9c1
 101f718:	bb04f935 	.word	0xbb04f935
 101f71c:	0909ebab 	.word	0x0909ebab
 101f720:	0c00e92d 	.word	0x0c00e92d
 101f724:	ab02f934 	.word	0xab02f934
 101f728:	090aeba9 	.word	0x090aeba9
 101f72c:	4a88f246 	.word	0x4a88f246
 101f730:	bfc845d1 	.word	0xbfc845d1
 101f734:	094aeba9 	.word	0x094aeba9
 101f738:	0a00f1ca 	.word	0x0a00f1ca
 101f73c:	bfdc45d1 	.word	0xbfdc45d1
 101f740:	1a10f64c 	.word	0x1a10f64c
 101f744:	e8f244d1 	.word	0xe8f244d1
 101f748:	f1bc8b02 	.word	0xf1bc8b02
 101f74c:	d8450f02 	.word	0xd8450f02
 101f750:	f1b9d021 	.word	0xf1b9d021
 101f754:	bfb80f00 	.word	0xbfb80f00
 101f758:	0900f1c9 	.word	0x0900f1c9
 101f75c:	2a44f243 	.word	0x2a44f243
 101f760:	bf8445d1 	.word	0xbf8445d1
 101f764:	0800f1c8 	.word	0x0800f1c8
 101f768:	0b00f1cb 	.word	0x0b00f1cb
 101f76c:	9a02e8f1 	.word	0x9a02e8f1
 101f770:	0908eba9 	.word	0x0908eba9
 101f774:	0908f109 	.word	0x0908f109
 101f778:	1929ea4f 	.word	0x1929ea4f
 101f77c:	0a0bebaa 	.word	0x0a0bebaa
 101f780:	0a08f10a 	.word	0x0a08f10a
 101f784:	1a2aea4f 	.word	0x1a2aea4f
 101f788:	8b09fb89 	.word	0x8b09fb89
 101f78c:	8b0afbca 	.word	0x8b0afbca
 101f790:	8b02e8e6 	.word	0x8b02e8e6
 101f794:	f641e094 	.word	0xf641e094
 101f798:	44d11a22 	.word	0x44d11a22
 101f79c:	0f00f1b9 	.word	0x0f00f1b9
 101f7a0:	f64cbf44 	.word	0xf64cbf44
 101f7a4:	44d11a10 	.word	0x44d11a10
 101f7a8:	2a44f243 	.word	0x2a44f243
 101f7ac:	d3dd45d1 	.word	0xd3dd45d1
 101f7b0:	0f4aebb9 	.word	0x0f4aebb9
 101f7b4:	46c2bf3f 	.word	0x46c2bf3f
 101f7b8:	0800f1cb 	.word	0x0800f1cb
 101f7bc:	e7d546d3 	.word	0xe7d546d3
 101f7c0:	6accf249 	.word	0x6accf249
 101f7c4:	bf3e45d1 	.word	0xbf3e45d1
 101f7c8:	0800f1c8 	.word	0x0800f1c8
 101f7cc:	0b00f1cb 	.word	0x0b00f1cb
 101f7d0:	f1c8e7cc 	.word	0xf1c8e7cc
 101f7d4:	46d80a00 	.word	0x46d80a00
 101f7d8:	e7c746d3 	.word	0xe7c746d3
 101f7dc:	4a91f640 	.word	0x4a91f640
 101f7e0:	f1b944d1 	.word	0xf1b944d1
 101f7e4:	bf440f00 	.word	0xbf440f00
 101f7e8:	1a10f64c 	.word	0x1a10f64c
 101f7ec:	f64144d1 	.word	0xf64144d1
 101f7f0:	45d11a22 	.word	0x45d11a22
 101f7f4:	ebb9d3ba 	.word	0xebb9d3ba
 101f7f8:	d20d0f4a 	.word	0xd20d0f4a
 101f7fc:	0a0beba8 	.word	0x0a0beba8
 101f800:	f64544c3 	.word	0xf64544c3
 101f804:	fb3a2982 	.word	0xfb3a2982
 101f808:	fb3bf809 	.word	0xfb3bf809
 101f80c:	ea4ffb09 	.word	0xea4ffb09
 101f810:	ea4f0848 	.word	0xea4f0848
 101f814:	e7a90b4b 	.word	0xe7a90b4b
 101f818:	3a66f644 	.word	0x3a66f644
 101f81c:	bf3f45d1 	.word	0xbf3f45d1
 101f820:	f1cb46c2 	.word	0xf1cb46c2
 101f824:	46d30800 	.word	0x46d30800
 101f828:	f246e7a0 	.word	0xf246e7a0
 101f82c:	45d14a88 	.word	0x45d14a88
 101f830:	f1c8d210 	.word	0xf1c8d210
 101f834:	ebaa0a00 	.word	0xebaa0a00
 101f838:	eba80a0b 	.word	0xeba80a0b
 101f83c:	f6450b0b 	.word	0xf6450b0b
 101f840:	fb3a2982 	.word	0xfb3a2982
 101f844:	fb3bf809 	.word	0xfb3bf809
 101f848:	ea4ffb09 	.word	0xea4ffb09
 101f84c:	ea4f0848 	.word	0xea4f0848
 101f850:	e78b0b4b 	.word	0xe78b0b4b
 101f854:	5aaaf647 	.word	0x5aaaf647
 101f858:	bf3e45d1 	.word	0xbf3e45d1
 101f85c:	0800f1c8 	.word	0x0800f1c8
 101f860:	0b00f1cb 	.word	0x0b00f1cb
 101f864:	f249e782 	.word	0xf249e782
 101f868:	45d16acc 	.word	0x45d16acc
 101f86c:	ebabd210 	.word	0xebabd210
 101f870:	f1cb0a08 	.word	0xf1cb0a08
 101f874:	ebab0b00 	.word	0xebab0b00
 101f878:	f6450b08 	.word	0xf6450b08
 101f87c:	fb3a2982 	.word	0xfb3a2982
 101f880:	fb3bf809 	.word	0xfb3bf809
 101f884:	ea4ffb09 	.word	0xea4ffb09
 101f888:	ea4f0848 	.word	0xea4f0848
 101f88c:	e76d0b4b 	.word	0xe76d0b4b
 101f890:	7aeef64a 	.word	0x7aeef64a
 101f894:	bf3f45d1 	.word	0xbf3f45d1
 101f898:	0a00f1c8 	.word	0x0a00f1c8
 101f89c:	46d346d8 	.word	0x46d346d8
 101f8a0:	eb0be764 	.word	0xeb0be764
 101f8a4:	ebab0a08 	.word	0xebab0a08
 101f8a8:	f6450b08 	.word	0xf6450b08
 101f8ac:	fb3a2982 	.word	0xfb3a2982
 101f8b0:	fb3bf809 	.word	0xfb3bf809
 101f8b4:	ea4ffb09 	.word	0xea4ffb09
 101f8b8:	ea4f0848 	.word	0xea4f0848
 101f8bc:	e7550b4b 	.word	0xe7550b4b
 101f8c0:	f47f1e7f 	.word	0xf47f1e7f
 101f8c4:	b002af1f 	.word	0xb002af1f
 101f8c8:	f47f1e5b 	.word	0xf47f1e5b
 101f8cc:	e8bdaf13 	.word	0xe8bdaf13
 101f8d0:	47701ff0 	.word	0x47701ff0
 101f8d4:	f04fb470 	.word	0xf04fb470
 101f8d8:	f0130360 	.word	0xf0130360
 101f8dc:	d1040f07 	.word	0xd1040f07
 101f8e0:	4b04f850 	.word	0x4b04f850
 101f8e4:	0301f1a3 	.word	0x0301f1a3
 101f8e8:	f850e7f7 	.word	0xf850e7f7
 101f8ec:	fb245b04 	.word	0xfb245b04
 101f8f0:	fb44f605 	.word	0xfb44f605
 101f8f4:	e8e1f415 	.word	0xe8e1f415
 101f8f8:	462c6402 	.word	0x462c6402
 101f8fc:	d1ec1e5b 	.word	0xd1ec1e5b
 101f900:	0004f100 	.word	0x0004f100
 101f904:	d1e61e52 	.word	0xd1e61e52
 101f908:	4770bc70 	.word	0x4770bc70
 101f90c:	1ff0e92d 	.word	0x1ff0e92d
 101f910:	4b04f853 	.word	0x4b04f853
 101f914:	5b04f853 	.word	0x5b04f853
 101f918:	f04f781b 	.word	0xf04f781b
 101f91c:	f0180860 	.word	0xf0180860
 101f920:	d1040f07 	.word	0xd1040f07
 101f924:	9b02f934 	.word	0x9b02f934
 101f928:	0801f1a8 	.word	0x0801f1a8
 101f92c:	f934e7f7 	.word	0xf934e7f7
 101f930:	f932ab02 	.word	0xf932ab02
 101f934:	ebaabb02 	.word	0xebaabb02
 101f938:	eba90909 	.word	0xeba90909
 101f93c:	f246090b 	.word	0xf246090b
 101f940:	45d94b88 	.word	0x45d94b88
 101f944:	eba9bfc8 	.word	0xeba9bfc8
 101f948:	f1cb094b 	.word	0xf1cb094b
 101f94c:	45d90b00 	.word	0x45d90b00
 101f950:	f64cbfbc 	.word	0xf64cbfbc
 101f954:	44d91b10 	.word	0x44d91b10
 101f958:	0f00f1b9 	.word	0x0f00f1b9
 101f95c:	2b44f243 	.word	0x2b44f243
 101f960:	f1c9bfb8 	.word	0xf1c9bfb8
 101f964:	45d90900 	.word	0x45d90900
 101f968:	f04fbf8c 	.word	0xf04fbf8c
 101f96c:	f04f0c01 	.word	0xf04f0c01
 101f970:	f1bc0c00 	.word	0xf1bc0c00
 101f974:	46d10f01 	.word	0x46d10f01
 101f978:	ab02e8f1 	.word	0xab02e8f1
 101f97c:	f1cabf04 	.word	0xf1cabf04
 101f980:	f1cb0a00 	.word	0xf1cb0a00
 101f984:	f8500b00 	.word	0xf8500b00
 101f988:	ebaccb04 	.word	0xebaccb04
 101f98c:	f10c0c0a 	.word	0xf10c0c0a
 101f990:	ea4f0c08 	.word	0xea4f0c08
 101f994:	fb8c1c2c 	.word	0xfb8c1c2c
 101f998:	f850670c 	.word	0xf850670c
 101f99c:	ebaaab04 	.word	0xebaaab04
 101f9a0:	f10a0a0b 	.word	0xf10a0a0b
 101f9a4:	ea4f0a08 	.word	0xea4f0a08
 101f9a8:	fbca1a2a 	.word	0xfbca1a2a
 101f9ac:	f1b8670a 	.word	0xf1b8670a
 101f9b0:	e8e50801 	.word	0xe8e50801
 101f9b4:	d1b26702 	.word	0xd1b26702
 101f9b8:	0402f104 	.word	0x0402f104
 101f9bc:	d1ac1e5b 	.word	0xd1ac1e5b
 101f9c0:	1ff0e8bd 	.word	0x1ff0e8bd
 101f9c4:	e92d4770 	.word	0xe92d4770
 101f9c8:	f8535ff0 	.word	0xf8535ff0
 101f9cc:	f8334b04 	.word	0xf8334b04
 101f9d0:	781b5b02 	.word	0x781b5b02
 101f9d4:	bf842b02 	.word	0xbf842b02
 101f9d8:	e03fb092 	.word	0xe03fb092
 101f9dc:	b083bf04 	.word	0xb083bf04
 101f9e0:	f000e025 	.word	0xf000e025
 101f9e4:	f366f852 	.word	0xf366f852
 101f9e8:	f0001307 	.word	0xf0001307
 101f9ec:	f366f84e 	.word	0xf366f84e
 101f9f0:	f0000303 	.word	0xf0000303
 101f9f4:	f366f84a 	.word	0xf366f84a
 101f9f8:	f000330f 	.word	0xf000330f
 101f9fc:	f366f846 	.word	0xf366f846
 101fa00:	f000230b 	.word	0xf000230b
 101fa04:	f366f842 	.word	0xf366f842
 101fa08:	f0005317 	.word	0xf0005317
 101fa0c:	f366f83e 	.word	0xf366f83e
 101fa10:	f0004313 	.word	0xf0004313
 101fa14:	f366f83a 	.word	0xf366f83a
 101fa18:	f000731f 	.word	0xf000731f
 101fa1c:	f366f836 	.word	0xf366f836
 101fa20:	f844631b 	.word	0xf844631b
 101fa24:	3d083b04 	.word	0x3d083b04
 101fa28:	e8bdd1db 	.word	0xe8bdd1db
 101fa2c:	f0009ff0 	.word	0xf0009ff0
 101fa30:	f366f879 	.word	0xf366f879
 101fa34:	f0000307 	.word	0xf0000307
 101fa38:	f366f875 	.word	0xf366f875
 101fa3c:	f000230f 	.word	0xf000230f
 101fa40:	f366f871 	.word	0xf366f871
 101fa44:	f0004317 	.word	0xf0004317
 101fa48:	f366f86d 	.word	0xf366f86d
 101fa4c:	f844631f 	.word	0xf844631f
 101fa50:	1f2d3b04 	.word	0x1f2d3b04
 101fa54:	b003d1eb 	.word	0xb003d1eb
 101fa58:	9ff0e8bd 	.word	0x9ff0e8bd
 101fa5c:	f901f000 	.word	0xf901f000
 101fa60:	1316ea4f 	.word	0x1316ea4f
 101fa64:	3b01f804 	.word	0x3b01f804
 101fa68:	1306ea4f 	.word	0x1306ea4f
 101fa6c:	f8f9f000 	.word	0xf8f9f000
 101fa70:	230ff366 	.word	0x230ff366
 101fa74:	2616ea4f 	.word	0x2616ea4f
 101fa78:	0303f366 	.word	0x0303f366
 101fa7c:	3b02f824 	.word	0x3b02f824
 101fa80:	d1eb1ead 	.word	0xd1eb1ead
 101fa84:	e8bdb012 	.word	0xe8bdb012
 101fa88:	e8f09ff0 	.word	0xe8f09ff0
 101fa8c:	e8f16702 	.word	0xe8f16702
 101fa90:	fb868902 	.word	0xfb868902
 101fa94:	fbc7ab08 	.word	0xfbc7ab08
 101fa98:	f1bbab09 	.word	0xf1bbab09
 101fa9c:	bf5e0f00 	.word	0xbf5e0f00
 101faa0:	465f4656 	.word	0x465f4656
 101faa4:	ea6fe006 	.word	0xea6fe006
 101faa8:	ea6f060a 	.word	0xea6f060a
 101faac:	1c76070b 	.word	0x1c76070b
 101fab0:	0700f147 	.word	0x0700f147
 101fab4:	8902e8f2 	.word	0x8902e8f2
 101fab8:	0787ea4f 	.word	0x0787ea4f
 101fabc:	7a81f3c6 	.word	0x7a81f3c6
 101fac0:	070aea87 	.word	0x070aea87
 101fac4:	0686ea4f 	.word	0x0686ea4f
 101fac8:	2909ea4f 	.word	0x2909ea4f
 101facc:	6a07f3c8 	.word	0x6a07f3c8
 101fad0:	090aea89 	.word	0x090aea89
 101fad4:	2808ea4f 	.word	0x2808ea4f
 101fad8:	bf8445b9 	.word	0xbf8445b9
 101fadc:	e01a2600 	.word	0xe01a2600
 101fae0:	fa87fab7 	.word	0xfa87fab7
 101fae4:	0f20f1ba 	.word	0x0f20f1ba
 101fae8:	4637bf02 	.word	0x4637bf02
 101faec:	e01046c1 	.word	0xe01046c1
 101faf0:	0f00f1ba 	.word	0x0f00f1ba
 101faf4:	fa07d00d 	.word	0xfa07d00d
 101faf8:	fa09f70a 	.word	0xfa09f70a
 101fafc:	f1caf90a 	.word	0xf1caf90a
 101fb00:	fa260a20 	.word	0xfa260a20
 101fb04:	ea87f60a 	.word	0xea87f60a
 101fb08:	fa280706 	.word	0xfa280706
 101fb0c:	ea89f80a 	.word	0xea89f80a
 101fb10:	fbb70908 	.word	0xfbb70908
 101fb14:	f1bbf6f9 	.word	0xf1bbf6f9
 101fb18:	bf480f00 	.word	0xbf480f00
 101fb1c:	f30643f6 	.word	0xf30643f6
 101fb20:	47700603 	.word	0x47700603
 101fb24:	6702e8f0 	.word	0x6702e8f0
 101fb28:	0807eb06 	.word	0x0807eb06
 101fb2c:	0906eba7 	.word	0x0906eba7
 101fb30:	6700e9d1 	.word	0x6700e9d1
 101fb34:	ab08fb86 	.word	0xab08fb86
 101fb38:	ab09fbc7 	.word	0xab09fbc7
 101fb3c:	0f00f1bb 	.word	0x0f00f1bb
 101fb40:	4656bf5e 	.word	0x4656bf5e
 101fb44:	e006465f 	.word	0xe006465f
 101fb48:	060aea6f 	.word	0x060aea6f
 101fb4c:	070bea6f 	.word	0x070bea6f
 101fb50:	f1471c76 	.word	0xf1471c76
 101fb54:	e9d20700 	.word	0xe9d20700
 101fb58:	f8cdac00 	.word	0xf8cdac00
 101fb5c:	ea4f8008 	.word	0xea4f8008
 101fb60:	00760747 	.word	0x00760747
 101fb64:	0700f147 	.word	0x0700f147
 101fb68:	2c0cea4f 	.word	0x2c0cea4f
 101fb6c:	6807f3ca 	.word	0x6807f3ca
 101fb70:	0c08ea8c 	.word	0x0c08ea8c
 101fb74:	2a0aea4f 	.word	0x2a0aea4f
 101fb78:	ac00e9cd 	.word	0xac00e9cd
 101fb7c:	bf8445bc 	.word	0xbf8445bc
 101fb80:	e01a2600 	.word	0xe01a2600
 101fb84:	f887fab7 	.word	0xf887fab7
 101fb88:	0f20f1b8 	.word	0x0f20f1b8
 101fb8c:	4637bf02 	.word	0x4637bf02
 101fb90:	e01046d4 	.word	0xe01046d4
 101fb94:	0f00f1b8 	.word	0x0f00f1b8
 101fb98:	fa07d00d 	.word	0xfa07d00d
 101fb9c:	fa0cf708 	.word	0xfa0cf708
 101fba0:	f1c8fc08 	.word	0xf1c8fc08
 101fba4:	fa260820 	.word	0xfa260820
 101fba8:	ea87f608 	.word	0xea87f608
 101fbac:	fa2a0706 	.word	0xfa2a0706
 101fbb0:	ea8cfa08 	.word	0xea8cfa08
 101fbb4:	fbb70c0a 	.word	0xfbb70c0a
 101fbb8:	f1bbf6fc 	.word	0xf1bbf6fc
 101fbbc:	bf480f00 	.word	0xbf480f00
 101fbc0:	f30643f6 	.word	0xf30643f6
 101fbc4:	ea4f0603 	.word	0xea4f0603
 101fbc8:	f8dd1606 	.word	0xf8dd1606
 101fbcc:	f1c98008 	.word	0xf1c98008
 101fbd0:	e8f10900 	.word	0xe8f10900
 101fbd4:	fb8aa702 	.word	0xfb8aa702
 101fbd8:	fbc7cb09 	.word	0xfbc7cb09
 101fbdc:	f1bbcb08 	.word	0xf1bbcb08
 101fbe0:	bf5e0f00 	.word	0xbf5e0f00
 101fbe4:	465f46d0 	.word	0x465f46d0
 101fbe8:	ea6fe007 	.word	0xea6fe007
 101fbec:	ea6f080c 	.word	0xea6f080c
 101fbf0:	f118070b 	.word	0xf118070b
 101fbf4:	f1470801 	.word	0xf1470801
 101fbf8:	e8f20700 	.word	0xe8f20700
 101fbfc:	ea4fac02 	.word	0xea4fac02
 101fc00:	ea5f0747 	.word	0xea5f0747
 101fc04:	f1470848 	.word	0xf1470848
 101fc08:	e9dd0700 	.word	0xe9dd0700
 101fc0c:	45bcac00 	.word	0x45bcac00
 101fc10:	f04fbf84 	.word	0xf04fbf84
 101fc14:	e01a0900 	.word	0xe01a0900
 101fc18:	f987fab7 	.word	0xf987fab7
 101fc1c:	0f20f1b9 	.word	0x0f20f1b9
 101fc20:	4647bf02 	.word	0x4647bf02
 101fc24:	e01046d4 	.word	0xe01046d4
 101fc28:	0f00f1b9 	.word	0x0f00f1b9
 101fc2c:	fa07d00d 	.word	0xfa07d00d
 101fc30:	fa0cf709 	.word	0xfa0cf709
 101fc34:	f1c9fc09 	.word	0xf1c9fc09
 101fc38:	fa280920 	.word	0xfa280920
 101fc3c:	ea87f809 	.word	0xea87f809
 101fc40:	fa2a0708 	.word	0xfa2a0708
 101fc44:	ea8cfa09 	.word	0xea8cfa09
 101fc48:	fbb70c0a 	.word	0xfbb70c0a
 101fc4c:	f1bbf9fc 	.word	0xf1bbf9fc
 101fc50:	bf480f00 	.word	0xbf480f00
 101fc54:	0909ea6f 	.word	0x0909ea6f
 101fc58:	0903f309 	.word	0x0903f309
 101fc5c:	0603f369 	.word	0x0603f369
 101fc60:	b4384770 	.word	0xb4384770
 101fc64:	6702e8f0 	.word	0x6702e8f0
 101fc68:	8902e8f1 	.word	0x8902e8f1
 101fc6c:	0666ea4f 	.word	0x0666ea4f
 101fc70:	0767ea4f 	.word	0x0767ea4f
 101fc74:	0868ea4f 	.word	0x0868ea4f
 101fc78:	0969ea4f 	.word	0x0969ea4f
 101fc7c:	0a08eba6 	.word	0x0a08eba6
 101fc80:	0b09eba7 	.word	0x0b09eba7
 101fc84:	ac0afb8a 	.word	0xac0afb8a
 101fc88:	ac0bfbcb 	.word	0xac0bfbcb
 101fc8c:	ac13e9cd 	.word	0xac13e9cd
 101fc90:	0b09eb07 	.word	0x0b09eb07
 101fc94:	0a08eb06 	.word	0x0a08eb06
 101fc98:	bc0bfb8b 	.word	0xbc0bfb8b
 101fc9c:	bc0afbca 	.word	0xbc0afbca
 101fca0:	bc07e9cd 	.word	0xbc07e9cd
 101fca4:	0a09eb06 	.word	0x0a09eb06
 101fca8:	0b08eba7 	.word	0x0b08eba7
 101fcac:	ac0afb8a 	.word	0xac0afb8a
 101fcb0:	ac0bfbcb 	.word	0xac0bfbcb
 101fcb4:	ac0de9cd 	.word	0xac0de9cd
 101fcb8:	0b08eb07 	.word	0x0b08eb07
 101fcbc:	0a09eba6 	.word	0x0a09eba6
 101fcc0:	bc0bfb8b 	.word	0xbc0bfb8b
 101fcc4:	bc0afbca 	.word	0xbc0afbca
 101fcc8:	bc09e9cd 	.word	0xbc09e9cd
 101fccc:	2382f645 	.word	0x2382f645
 101fcd0:	0409eba8 	.word	0x0409eba8
 101fcd4:	0509eb08 	.word	0x0509eb08
 101fcd8:	f403fb34 	.word	0xf403fb34
 101fcdc:	f503fb35 	.word	0xf503fb35
 101fce0:	0444ea4f 	.word	0x0444ea4f
 101fce4:	0545ea4f 	.word	0x0545ea4f
 101fce8:	0a04eba6 	.word	0x0a04eba6
 101fcec:	0b05eba7 	.word	0x0b05eba7
 101fcf0:	ac0afb8a 	.word	0xac0afb8a
 101fcf4:	ac0bfbcb 	.word	0xac0bfbcb
 101fcf8:	ac11e9cd 	.word	0xac11e9cd
 101fcfc:	0b05eb07 	.word	0x0b05eb07
 101fd00:	0a04eb06 	.word	0x0a04eb06
 101fd04:	bc0bfb8b 	.word	0xbc0bfb8b
 101fd08:	bc0afbca 	.word	0xbc0afbca
 101fd0c:	bc05e9cd 	.word	0xbc05e9cd
 101fd10:	0a05eb06 	.word	0x0a05eb06
 101fd14:	0b04eba7 	.word	0x0b04eba7
 101fd18:	ac0afb8a 	.word	0xac0afb8a
 101fd1c:	ac0bfbcb 	.word	0xac0bfbcb
 101fd20:	ac0fe9cd 	.word	0xac0fe9cd
 101fd24:	0b04eb07 	.word	0x0b04eb07
 101fd28:	0a05eba6 	.word	0x0a05eba6
 101fd2c:	bc0bfb8b 	.word	0xbc0bfb8b
 101fd30:	bc0afbca 	.word	0xbc0afbca
 101fd34:	bc0be9cd 	.word	0xbc0be9cd
 101fd38:	3409e9dd 	.word	0x3409e9dd
 101fd3c:	6707e9dd 	.word	0x6707e9dd
 101fd40:	8905e9dd 	.word	0x8905e9dd
 101fd44:	d30542a7 	.word	0xd30542a7
 101fd48:	429ed801 	.word	0x429ed801
 101fd4c:	f04fd302 	.word	0xf04fd302
 101fd50:	e0030505 	.word	0xe0030505
 101fd54:	463c4633 	.word	0x463c4633
 101fd58:	0506f04f 	.word	0x0506f04f
 101fd5c:	d30345a1 	.word	0xd30345a1
 101fd60:	4598d806 	.word	0x4598d806
 101fd64:	d203d300 	.word	0xd203d300
 101fd68:	464c4643 	.word	0x464c4643
 101fd6c:	0507f04f 	.word	0x0507f04f
 101fd70:	d30345a4 	.word	0xd30345a4
 101fd74:	459bd806 	.word	0x459bd806
 101fd78:	d203d300 	.word	0xd203d300
 101fd7c:	4664465b 	.word	0x4664465b
 101fd80:	0504f04f 	.word	0x0504f04f
 101fd84:	7813e9dd 	.word	0x7813e9dd
 101fd88:	9a11e9dd 	.word	0x9a11e9dd
 101fd8c:	bc0fe9dd 	.word	0xbc0fe9dd
 101fd90:	d30545c2 	.word	0xd30545c2
 101fd94:	45b9d801 	.word	0x45b9d801
 101fd98:	f04fd302 	.word	0xf04fd302
 101fd9c:	e0030600 	.word	0xe0030600
 101fda0:	46d0464f 	.word	0x46d0464f
 101fda4:	0601f04f 	.word	0x0601f04f
 101fda8:	d30345c4 	.word	0xd30345c4
 101fdac:	45bbd806 	.word	0x45bbd806
 101fdb0:	d203d300 	.word	0xd203d300
 101fdb4:	46e0465f 	.word	0x46e0465f
 101fdb8:	0602f04f 	.word	0x0602f04f
 101fdbc:	bc0de9dd 	.word	0xbc0de9dd
 101fdc0:	d30345c4 	.word	0xd30345c4
 101fdc4:	45bbd806 	.word	0x45bbd806
 101fdc8:	d203d300 	.word	0xd203d300
 101fdcc:	46e0465f 	.word	0x46e0465f
 101fdd0:	0603f04f 	.word	0x0603f04f
 101fdd4:	d30c4544 	.word	0xd30c4544
 101fdd8:	42bbd801 	.word	0x42bbd801
 101fddc:	ebb3d309 	.word	0xebb3d309
 101fde0:	eb640b07 	.word	0xeb640b07
 101fde4:	463b0c08 	.word	0x463b0c08
 101fde8:	46354644 	.word	0x46354644
 101fdec:	0a00f04f 	.word	0x0a00f04f
 101fdf0:	ebb7e005 	.word	0xebb7e005
 101fdf4:	eb680b03 	.word	0xeb680b03
 101fdf8:	f04f0c04 	.word	0xf04f0c04
 101fdfc:	e8f20a01 	.word	0xe8f20a01
 101fe00:	ea4f8902 	.word	0xea4f8902
 101fe04:	f3c81989 	.word	0xf3c81989
 101fe08:	ea896785 	.word	0xea896785
 101fe0c:	ea4f0907 	.word	0xea4f0907
 101fe10:	e9cd1888 	.word	0xe9cd1888
 101fe14:	45e18903 	.word	0x45e18903
 101fe18:	2600bf84 	.word	0x2600bf84
 101fe1c:	fabce018 	.word	0xfabce018
 101fe20:	2f20f78c 	.word	0x2f20f78c
 101fe24:	46dcbf02 	.word	0x46dcbf02
 101fe28:	e00f46c1 	.word	0xe00f46c1
 101fe2c:	d00d2f00 	.word	0xd00d2f00
 101fe30:	fc07fa0c 	.word	0xfc07fa0c
 101fe34:	f907fa09 	.word	0xf907fa09
 101fe38:	0720f1c7 	.word	0x0720f1c7
 101fe3c:	fb07fa2b 	.word	0xfb07fa2b
 101fe40:	0c0bea8c 	.word	0x0c0bea8c
 101fe44:	f807fa28 	.word	0xf807fa28
 101fe48:	0908ea89 	.word	0x0908ea89
 101fe4c:	f6f9fbbc 	.word	0xf6f9fbbc
 101fe50:	0f00f1ba 	.word	0x0f00f1ba
 101fe54:	43f6bf18 	.word	0x43f6bf18
 101fe58:	0603f306 	.word	0x0603f306
 101fe5c:	1606ea4f 	.word	0x1606ea4f
 101fe60:	0f02f015 	.word	0x0f02f015
 101fe64:	e9ddd01d 	.word	0xe9ddd01d
 101fe68:	e9dd7813 	.word	0xe9dd7813
 101fe6c:	e9dd9a11 	.word	0xe9dd9a11
 101fe70:	45c2bc0b 	.word	0x45c2bc0b
 101fe74:	d803d302 	.word	0xd803d302
 101fe78:	d3ff45b9 	.word	0xd3ff45b9
 101fe7c:	46d0464f 	.word	0x46d0464f
 101fe80:	d30245c4 	.word	0xd30245c4
 101fe84:	45bbd803 	.word	0x45bbd803
 101fe88:	465fd3ff 	.word	0x465fd3ff
 101fe8c:	e9dd46e0 	.word	0xe9dd46e0
 101fe90:	45c29a09 	.word	0x45c29a09
 101fe94:	d821d302 	.word	0xd821d302
 101fe98:	d3ff45b9 	.word	0xd3ff45b9
 101fe9c:	46d0464f 	.word	0x46d0464f
 101fea0:	e9dde01c 	.word	0xe9dde01c
 101fea4:	e9dd780f 	.word	0xe9dd780f
 101fea8:	e9dd9a0d 	.word	0xe9dd9a0d
 101feac:	45c2bc07 	.word	0x45c2bc07
 101feb0:	d803d302 	.word	0xd803d302
 101feb4:	d3ff45b9 	.word	0xd3ff45b9
 101feb8:	46d0464f 	.word	0x46d0464f
 101febc:	d30245c4 	.word	0xd30245c4
 101fec0:	45bbd803 	.word	0x45bbd803
 101fec4:	465fd3ff 	.word	0x465fd3ff
 101fec8:	e9dd46e0 	.word	0xe9dd46e0
 101fecc:	45c29a05 	.word	0x45c29a05
 101fed0:	d803d302 	.word	0xd803d302
 101fed4:	d3ff45b9 	.word	0xd3ff45b9
 101fed8:	46d0464f 	.word	0x46d0464f
 101fedc:	eb681aff 	.word	0xeb681aff
 101fee0:	f0050804 	.word	0xf0050804
 101fee4:	e9dd0902 	.word	0xe9dd0902
 101fee8:	45c3ab03 	.word	0x45c3ab03
 101feec:	f04fbf84 	.word	0xf04fbf84
 101fef0:	e01a0c00 	.word	0xe01a0c00
 101fef4:	fc88fab8 	.word	0xfc88fab8
 101fef8:	0f20f1bc 	.word	0x0f20f1bc
 101fefc:	46d3bf02 	.word	0x46d3bf02
 101ff00:	e01046b8 	.word	0xe01046b8
 101ff04:	0f00f1bc 	.word	0x0f00f1bc
 101ff08:	fa08d00d 	.word	0xfa08d00d
 101ff0c:	fa0bf80c 	.word	0xfa0bf80c
 101ff10:	f1ccfb0c 	.word	0xf1ccfb0c
 101ff14:	fa270c20 	.word	0xfa270c20
 101ff18:	ea88f70c 	.word	0xea88f70c
 101ff1c:	fa2a0807 	.word	0xfa2a0807
 101ff20:	ea8bfa0c 	.word	0xea8bfa0c
 101ff24:	fbb80b0a 	.word	0xfbb80b0a
 101ff28:	f1b9fcfb 	.word	0xf1b9fcfb
 101ff2c:	bf180f00 	.word	0xbf180f00
 101ff30:	0c0cea6f 	.word	0x0c0cea6f
 101ff34:	0c03f30c 	.word	0x0c03f30c
 101ff38:	0603f36c 	.word	0x0603f36c
 101ff3c:	1606ea4f 	.word	0x1606ea4f
 101ff40:	0f01f015 	.word	0x0f01f015
 101ff44:	e9ddd01d 	.word	0xe9ddd01d
 101ff48:	e9dd7813 	.word	0xe9dd7813
 101ff4c:	e9dd9a0f 	.word	0xe9dd9a0f
 101ff50:	45c2bc0b 	.word	0x45c2bc0b
 101ff54:	d803d302 	.word	0xd803d302
 101ff58:	d3ff45b9 	.word	0xd3ff45b9
 101ff5c:	46d0464f 	.word	0x46d0464f
 101ff60:	d30245c4 	.word	0xd30245c4
 101ff64:	45bbd803 	.word	0x45bbd803
 101ff68:	465fd3ff 	.word	0x465fd3ff
 101ff6c:	e9dd46e0 	.word	0xe9dd46e0
 101ff70:	45c29a07 	.word	0x45c29a07
 101ff74:	d821d302 	.word	0xd821d302
 101ff78:	d3ff45b9 	.word	0xd3ff45b9
 101ff7c:	46d0464f 	.word	0x46d0464f
 101ff80:	e9dde01c 	.word	0xe9dde01c
 101ff84:	e9dd7811 	.word	0xe9dd7811
 101ff88:	e9dd9a0d 	.word	0xe9dd9a0d
 101ff8c:	45c2bc09 	.word	0x45c2bc09
 101ff90:	d803d302 	.word	0xd803d302
 101ff94:	d3ff45b9 	.word	0xd3ff45b9
 101ff98:	46d0464f 	.word	0x46d0464f
 101ff9c:	d30245c4 	.word	0xd30245c4
 101ffa0:	45bbd803 	.word	0x45bbd803
 101ffa4:	465fd3ff 	.word	0x465fd3ff
 101ffa8:	e9dd46e0 	.word	0xe9dd46e0
 101ffac:	45c29a05 	.word	0x45c29a05
 101ffb0:	d803d302 	.word	0xd803d302
 101ffb4:	d3ff45b9 	.word	0xd3ff45b9
 101ffb8:	46d0464f 	.word	0x46d0464f
 101ffbc:	eb681aff 	.word	0xeb681aff
 101ffc0:	f0050804 	.word	0xf0050804
 101ffc4:	e9dd0901 	.word	0xe9dd0901
 101ffc8:	45c3ab03 	.word	0x45c3ab03
 101ffcc:	f04fbf84 	.word	0xf04fbf84
 101ffd0:	e01a0c00 	.word	0xe01a0c00
 101ffd4:	fc88fab8 	.word	0xfc88fab8
 101ffd8:	0f20f1bc 	.word	0x0f20f1bc
 101ffdc:	46d3bf02 	.word	0x46d3bf02
 101ffe0:	e01046b8 	.word	0xe01046b8
 101ffe4:	0f00f1bc 	.word	0x0f00f1bc
 101ffe8:	fa08d00d 	.word	0xfa08d00d
 101ffec:	fa0bf80c 	.word	0xfa0bf80c
 101fff0:	f1ccfb0c 	.word	0xf1ccfb0c
 101fff4:	fa270c20 	.word	0xfa270c20
 101fff8:	ea88f70c 	.word	0xea88f70c
 101fffc:	fa2a0807 	.word	0xfa2a0807
 1020000:	ea8bfa0c 	.word	0xea8bfa0c
 1020004:	fbb80b0a 	.word	0xfbb80b0a
 1020008:	f1b9fcfb 	.word	0xf1b9fcfb
 102000c:	bf180f00 	.word	0xbf180f00
 1020010:	0c0cea6f 	.word	0x0c0cea6f
 1020014:	0c03f30c 	.word	0x0c03f30c
 1020018:	0603f36c 	.word	0x0603f36c
 102001c:	4770bc38 	.word	0x4770bc38
 1020020:	4ff0e92d 	.word	0x4ff0e92d
 1020024:	4b04f853 	.word	0x4b04f853
 1020028:	f000881d 	.word	0xf000881d
 102002c:	f366f814 	.word	0xf366f814
 1020030:	f0001307 	.word	0xf0001307
 1020034:	f366f810 	.word	0xf366f810
 1020038:	f0000303 	.word	0xf0000303
 102003c:	f366f80c 	.word	0xf366f80c
 1020040:	f000330f 	.word	0xf000330f
 1020044:	f366f808 	.word	0xf366f808
 1020048:	f824230b 	.word	0xf824230b
 102004c:	1f2d3b02 	.word	0x1f2d3b02
 1020050:	e8bdd1eb 	.word	0xe8bdd1eb
 1020054:	e8f08ff0 	.word	0xe8f08ff0
 1020058:	e8f16702 	.word	0xe8f16702
 102005c:	fb868902 	.word	0xfb868902
 1020060:	fbc7ab08 	.word	0xfbc7ab08
 1020064:	f1bbab09 	.word	0xf1bbab09
 1020068:	bf5e0f00 	.word	0xbf5e0f00
 102006c:	465f4656 	.word	0x465f4656
 1020070:	ea6fe006 	.word	0xea6fe006
 1020074:	ea6f060a 	.word	0xea6f060a
 1020078:	1c76070b 	.word	0x1c76070b
 102007c:	0700f147 	.word	0x0700f147
 1020080:	8902e8f2 	.word	0x8902e8f2
 1020084:	0787ea4f 	.word	0x0787ea4f
 1020088:	7a81f3c6 	.word	0x7a81f3c6
 102008c:	070aea87 	.word	0x070aea87
 1020090:	0686ea4f 	.word	0x0686ea4f
 1020094:	2909ea4f 	.word	0x2909ea4f
 1020098:	6a07f3c8 	.word	0x6a07f3c8
 102009c:	090aea89 	.word	0x090aea89
 10200a0:	2808ea4f 	.word	0x2808ea4f
 10200a4:	bf8445b9 	.word	0xbf8445b9
 10200a8:	e01a2600 	.word	0xe01a2600
 10200ac:	fa87fab7 	.word	0xfa87fab7
 10200b0:	0f20f1ba 	.word	0x0f20f1ba
 10200b4:	4637bf02 	.word	0x4637bf02
 10200b8:	e01046c1 	.word	0xe01046c1
 10200bc:	0f00f1ba 	.word	0x0f00f1ba
 10200c0:	fa07d00d 	.word	0xfa07d00d
 10200c4:	fa09f70a 	.word	0xfa09f70a
 10200c8:	f1caf90a 	.word	0xf1caf90a
 10200cc:	fa260a20 	.word	0xfa260a20
 10200d0:	ea87f60a 	.word	0xea87f60a
 10200d4:	fa280706 	.word	0xfa280706
 10200d8:	ea89f80a 	.word	0xea89f80a
 10200dc:	fbb70908 	.word	0xfbb70908
 10200e0:	f1bbf6f9 	.word	0xf1bbf6f9
 10200e4:	bf480f00 	.word	0xbf480f00
 10200e8:	f30643f6 	.word	0xf30643f6
 10200ec:	47700603 	.word	0x47700603
 10200f0:	0002f100 	.word	0x0002f100
 10200f4:	3b04f930 	.word	0x3b04f930
 10200f8:	f8211e52 	.word	0xf8211e52
 10200fc:	d1f93b02 	.word	0xd1f93b02
 1020100:	b4704770 	.word	0xb4704770
 1020104:	0400f04f 	.word	0x0400f04f
 1020108:	0320f04f 	.word	0x0320f04f
 102010c:	5b04f851 	.word	0x5b04f851
 1020110:	d303086d 	.word	0xd303086d
 1020114:	fad46806 	.word	0xfad46806
 1020118:	6006f606 	.word	0x6006f606
 102011c:	bf041e5b 	.word	0xbf041e5b
 1020120:	f8512320 	.word	0xf8512320
 1020124:	1e525b04 	.word	0x1e525b04
 1020128:	0004f100 	.word	0x0004f100
 102012c:	bc70d1f0 	.word	0xbc70d1f0
 1020130:	e92d4770 	.word	0xe92d4770
 1020134:	ea4f07f0 	.word	0xea4f07f0
 1020138:	ea4f0a82 	.word	0xea4f0a82
 102013c:	eb000953 	.word	0xeb000953
 1020140:	f850050a 	.word	0xf850050a
 1020144:	fa096b04 	.word	0xfa096b04
 1020148:	fa09f786 	.word	0xfa09f786
 102014c:	f1a3f6a6 	.word	0xf1a3f6a6
 1020150:	f8d50401 	.word	0xf8d50401
 1020154:	fa078000 	.word	0xfa078000
 1020158:	fa06f788 	.word	0xfa06f788
 102015c:	4455f6a8 	.word	0x4455f6a8
 1020160:	d1f61e64 	.word	0xd1f61e64
 1020164:	f7f3fb97 	.word	0xf7f3fb97
 1020168:	f6f3fb96 	.word	0xf6f3fb96
 102016c:	4806eac7 	.word	0x4806eac7
 1020170:	8b04f841 	.word	0x8b04f841
 1020174:	d1e21e52 	.word	0xd1e21e52
 1020178:	07f0e8bd 	.word	0x07f0e8bd
 102017c:	b4704770 	.word	0xb4704770
 1020180:	0310f1a3 	.word	0x0310f1a3
 1020184:	fb326804 	.word	0xfb326804
 1020188:	fb32f504 	.word	0xfb32f504
 102018c:	fa45f614 	.word	0xfa45f614
 1020190:	fa46f503 	.word	0xfa46f503
 1020194:	f305f603 	.word	0xf305f603
 1020198:	f306050f 	.word	0xf306050f
 102019c:	eac5060f 	.word	0xeac5060f
 10201a0:	f8404506 	.word	0xf8404506
 10201a4:	1e495b04 	.word	0x1e495b04
 10201a8:	bc70d1ec 	.word	0xbc70d1ec
 10201ac:	b4f04770 	.word	0xb4f04770
 10201b0:	0400f04f 	.word	0x0400f04f
 10201b4:	0500f04f 	.word	0x0500f04f
 10201b8:	6b01f813 	.word	0x6b01f813
 10201bc:	7b04f850 	.word	0x7b04f850
 10201c0:	d1012e00 	.word	0xd1012e00
 10201c4:	45c7fbc7 	.word	0x45c7fbc7
 10201c8:	d1f51e49 	.word	0xd1f51e49
 10201cc:	4500e9c2 	.word	0x4500e9c2
 10201d0:	4770bcf0 	.word	0x4770bcf0
 10201d4:	07f0e92d 	.word	0x07f0e92d
 10201d8:	0400f04f 	.word	0x0400f04f
 10201dc:	0500f04f 	.word	0x0500f04f
 10201e0:	0600f04f 	.word	0x0600f04f
 10201e4:	0700f04f 	.word	0x0700f04f
 10201e8:	0a00f04f 	.word	0x0a00f04f
 10201ec:	9b01f811 	.word	0x9b01f811
 10201f0:	8b04f850 	.word	0x8b04f850
 10201f4:	0f00f1b9 	.word	0x0f00f1b9
 10201f8:	fb28d10d 	.word	0xfb28d10d
 10201fc:	eb14f808 	.word	0xeb14f808
 1020200:	f1450408 	.word	0xf1450408
 1020204:	ea5f0500 	.word	0xea5f0500
 1020208:	f14808e8 	.word	0xf14808e8
 102020c:	f10a0800 	.word	0xf10a0800
 1020210:	fbc80a01 	.word	0xfbc80a01
 1020214:	1e526708 	.word	0x1e526708
 1020218:	e8e3d1e8 	.word	0xe8e3d1e8
 102021c:	e9c34502 	.word	0xe9c34502
 1020220:	46506700 	.word	0x46506700
 1020224:	07f0e8bd 	.word	0x07f0e8bd
 1020228:	e92d4770 	.word	0xe92d4770
 102022c:	e9d01ff0 	.word	0xe9d01ff0
 1020230:	f04f5600 	.word	0xf04f5600
 1020234:	e9d00203 	.word	0xe9d00203
 1020238:	b22b7802 	.word	0xb22b7802
 102023c:	f4a5fa0f 	.word	0xf4a5fa0f
 1020240:	f386fa03 	.word	0xf386fa03
 1020244:	f4a6fa04 	.word	0xf4a6fa04
 1020248:	f387fa03 	.word	0xf387fa03
 102024c:	f4a7fa04 	.word	0xf4a7fa04
 1020250:	faf2fb93 	.word	0xfaf2fb93
 1020254:	fbf2fb94 	.word	0xfbf2fb94
 1020258:	4a0beaca 	.word	0x4a0beaca
 102025c:	ab04f840 	.word	0xab04f840
 1020260:	f388fa03 	.word	0xf388fa03
 1020264:	f4a8fa04 	.word	0xf4a8fa04
 1020268:	0aa3ea4f 	.word	0x0aa3ea4f
 102026c:	0ba4ea4f 	.word	0x0ba4ea4f
 1020270:	4a0beaca 	.word	0x4a0beaca
 1020274:	ab04f840 	.word	0xab04f840
 1020278:	0c5df04f 	.word	0x0c5df04f
 102027c:	0205f04f 	.word	0x0205f04f
 1020280:	9008f8d0 	.word	0x9008f8d0
 1020284:	f389fa03 	.word	0xf389fa03
 1020288:	f4a9fa04 	.word	0xf4a9fa04
 102028c:	faf2fb93 	.word	0xfaf2fb93
 1020290:	fbf2fb94 	.word	0xfbf2fb94
 1020294:	4a0beaca 	.word	0x4a0beaca
 1020298:	ab04f840 	.word	0xab04f840
 102029c:	fb85fa0f 	.word	0xfb85fa0f
 10202a0:	faa5fa0f 	.word	0xfaa5fa0f
 10202a4:	030beba3 	.word	0x030beba3
 10202a8:	040aeba4 	.word	0x040aeba4
 10202ac:	463e4635 	.word	0x463e4635
 10202b0:	46c84647 	.word	0x46c84647
 10202b4:	0c01f1bc 	.word	0x0c01f1bc
 10202b8:	ea4fd1e2 	.word	0xea4fd1e2
 10202bc:	ea4f0aa3 	.word	0xea4f0aa3
 10202c0:	eaca0ba4 	.word	0xeaca0ba4
 10202c4:	f8404a0b 	.word	0xf8404a0b
 10202c8:	f04fab04 	.word	0xf04fab04
 10202cc:	fa0f0203 	.word	0xfa0f0203
 10202d0:	fa0ffb85 	.word	0xfa0ffb85
 10202d4:	eba3faa5 	.word	0xeba3faa5
 10202d8:	eba4030b 	.word	0xeba4030b
 10202dc:	fb93040a 	.word	0xfb93040a
 10202e0:	fb94faf2 	.word	0xfb94faf2
 10202e4:	eacafbf2 	.word	0xeacafbf2
 10202e8:	f8404a0b 	.word	0xf8404a0b
 10202ec:	1e49ab04 	.word	0x1e49ab04
 10202f0:	e8bdd19d 	.word	0xe8bdd19d
 10202f4:	47701ff0 	.word	0x47701ff0
 10202f8:	1ff0e92d 	.word	0x1ff0e92d
 10202fc:	040ff003 	.word	0x040ff003
 1020300:	ea4fb410 	.word	0xea4fb410
 1020304:	ea4f1313 	.word	0xea4f1313
 1020308:	f8510583 	.word	0xf8510583
 102030c:	fa0f6b04 	.word	0xfa0f6b04
 1020310:	b236f7a6 	.word	0xb236f7a6
 1020314:	4000f89d 	.word	0x4000f89d
 1020318:	f04f4680 	.word	0xf04f4680
 102031c:	f04f0900 	.word	0xf04f0900
 1020320:	f8d80a00 	.word	0xf8d80a00
 1020324:	fa0fb000 	.word	0xfa0fb000
 1020328:	ebacfc8b 	.word	0xebacfc8b
 102032c:	fbcc0c06 	.word	0xfbcc0c06
 1020330:	fa0f9a0c 	.word	0xfa0f9a0c
 1020334:	ebacfcab 	.word	0xebacfcab
 1020338:	fbcc0c07 	.word	0xfbcc0c07
 102033c:	44a89a0c 	.word	0x44a89a0c
 1020340:	d1ee1e64 	.word	0xd1ee1e64
 1020344:	0f01f1ba 	.word	0x0f01f1ba
 1020348:	f06fbf8e 	.word	0xf06fbf8e
 102034c:	ea4f0900 	.word	0xea4f0900
 1020350:	f36a0959 	.word	0xf36a0959
 1020354:	f84279df 	.word	0xf84279df
 1020358:	f1009b04 	.word	0xf1009b04
 102035c:	1e5b0004 	.word	0x1e5b0004
 1020360:	b001d1d3 	.word	0xb001d1d3
 1020364:	1ff0e8bd 	.word	0x1ff0e8bd
 1020368:	e92d4770 	.word	0xe92d4770
 102036c:	891c03f0 	.word	0x891c03f0
 1020370:	0500f04f 	.word	0x0500f04f
 1020374:	0600f04f 	.word	0x0600f04f
 1020378:	7b01f812 	.word	0x7b01f812
 102037c:	8b04f850 	.word	0x8b04f850
 1020380:	9b04f851 	.word	0x9b04f851
 1020384:	d1072f00 	.word	0xd1072f00
 1020388:	f819fad8 	.word	0xf819fad8
 102038c:	f808fb28 	.word	0xf808fb28
 1020390:	0508eb15 	.word	0x0508eb15
 1020394:	0600f146 	.word	0x0600f146
 1020398:	d1ed1e64 	.word	0xd1ed1e64
 102039c:	5600e9c3 	.word	0x5600e9c3
 10203a0:	03f0e8bd 	.word	0x03f0e8bd
 10203a4:	e92d4770 	.word	0xe92d4770
 10203a8:	f85007f0 	.word	0xf85007f0
 10203ac:	f8514b04 	.word	0xf8514b04
 10203b0:	f04f5b04 	.word	0xf04f5b04
 10203b4:	f8500660 	.word	0xf8500660
 10203b8:	f8517b04 	.word	0xf8517b04
 10203bc:	f04f8b04 	.word	0xf04f8b04
 10203c0:	f04f0940 	.word	0xf04f0940
 10203c4:	fbe70a00 	.word	0xfbe70a00
 10203c8:	fbe49a05 	.word	0xfbe49a05
 10203cc:	ea4f9a08 	.word	0xea4f9a08
 10203d0:	f36a19d9 	.word	0xf36a19d9
 10203d4:	ea4f695f 	.word	0xea4f695f
 10203d8:	e8e21ada 	.word	0xe8e21ada
 10203dc:	463c9a02 	.word	0x463c9a02
 10203e0:	1e764645 	.word	0x1e764645
 10203e4:	1e5bd1e7 	.word	0x1e5bd1e7
 10203e8:	e8bdd1df 	.word	0xe8bdd1df
 10203ec:	477007f0 	.word	0x477007f0
 10203f0:	07f0e92d 	.word	0x07f0e92d
 10203f4:	0660f04f 	.word	0x0660f04f
 10203f8:	0f07f016 	.word	0x0f07f016
 10203fc:	f850d106 	.word	0xf850d106
 1020400:	f8514b04 	.word	0xf8514b04
 1020404:	f1a65b04 	.word	0xf1a65b04
 1020408:	e7f50601 	.word	0xe7f50601
 102040c:	7b04f850 	.word	0x7b04f850
 1020410:	8b04f851 	.word	0x8b04f851
 1020414:	0940f04f 	.word	0x0940f04f
 1020418:	0a00f04f 	.word	0x0a00f04f
 102041c:	9a05fbe7 	.word	0x9a05fbe7
 1020420:	9a08fbe4 	.word	0x9a08fbe4
 1020424:	19d9ea4f 	.word	0x19d9ea4f
 1020428:	695ff36a 	.word	0x695ff36a
 102042c:	1adaea4f 	.word	0x1adaea4f
 1020430:	9a02e8e2 	.word	0x9a02e8e2
 1020434:	4645463c 	.word	0x4645463c
 1020438:	d1dd1e76 	.word	0xd1dd1e76
 102043c:	bf1e1e5b 	.word	0xbf1e1e5b
 1020440:	1d091d00 	.word	0x1d091d00
 1020444:	e8bde7d6 	.word	0xe8bde7d6
 1020448:	477007f0 	.word	0x477007f0
 102044c:	01f0e92d 	.word	0x01f0e92d
 1020450:	0460f04f 	.word	0x0460f04f
 1020454:	0f07f014 	.word	0x0f07f014
 1020458:	f850d106 	.word	0xf850d106
 102045c:	f8125b04 	.word	0xf8125b04
 1020460:	f1a47b01 	.word	0xf1a47b01
 1020464:	e7f50401 	.word	0xe7f50401
 1020468:	8b01f812 	.word	0x8b01f812
 102046c:	6b04f850 	.word	0x6b04f850
 1020470:	0708ea57 	.word	0x0708ea57
 1020474:	2500bf1c 	.word	0x2500bf1c
 1020478:	4435e006 	.word	0x4435e006
 102047c:	f145086d 	.word	0xf145086d
 1020480:	2d000500 	.word	0x2d000500
 1020484:	3501bf08 	.word	0x3501bf08
 1020488:	5b04f841 	.word	0x5b04f841
 102048c:	46354647 	.word	0x46354647
 1020490:	d1df1e64 	.word	0xd1df1e64
 1020494:	bf1e1e5b 	.word	0xbf1e1e5b
 1020498:	1c521d00 	.word	0x1c521d00
 102049c:	e8bde7d8 	.word	0xe8bde7d8
 10204a0:	477001f0 	.word	0x477001f0
 10204a4:	03f0e92d 	.word	0x03f0e92d
 10204a8:	0900f04f 	.word	0x0900f04f
 10204ac:	5b04f850 	.word	0x5b04f850
 10204b0:	7b01f812 	.word	0x7b01f812
 10204b4:	0460f04f 	.word	0x0460f04f
 10204b8:	8b01f812 	.word	0x8b01f812
 10204bc:	6b04f850 	.word	0x6b04f850
 10204c0:	0708ea57 	.word	0x0708ea57
 10204c4:	f109bf1e 	.word	0xf109bf1e
 10204c8:	25000901 	.word	0x25000901
 10204cc:	4435e006 	.word	0x4435e006
 10204d0:	f145086d 	.word	0xf145086d
 10204d4:	2d000500 	.word	0x2d000500
 10204d8:	3501bf08 	.word	0x3501bf08
 10204dc:	5b04f841 	.word	0x5b04f841
 10204e0:	46354647 	.word	0x46354647
 10204e4:	d1e71e64 	.word	0xd1e71e64
 10204e8:	d1df1e5b 	.word	0xd1df1e5b
 10204ec:	e8bd4648 	.word	0xe8bd4648
 10204f0:	477003f0 	.word	0x477003f0
 10204f4:	3b04f850 	.word	0x3b04f850
 10204f8:	f303fb23 	.word	0xf303fb23
 10204fc:	f8411e52 	.word	0xf8411e52
 1020500:	d1f73b04 	.word	0xd1f73b04
 1020504:	b4f04770 	.word	0xb4f04770
 1020508:	4b04f850 	.word	0x4b04f850
 102050c:	0360f04f 	.word	0x0360f04f
 1020510:	5b04f850 	.word	0x5b04f850
 1020514:	f605fb24 	.word	0xf605fb24
 1020518:	f715fb44 	.word	0xf715fb44
 102051c:	6702e8e1 	.word	0x6702e8e1
 1020520:	1e5b462c 	.word	0x1e5b462c
 1020524:	1e52d1f4 	.word	0x1e52d1f4
 1020528:	bcf0d1ee 	.word	0xbcf0d1ee
 102052c:	b4f04770 	.word	0xb4f04770
 1020530:	0360f04f 	.word	0x0360f04f
 1020534:	0f07f013 	.word	0x0f07f013
 1020538:	f850d104 	.word	0xf850d104
 102053c:	f1a34b04 	.word	0xf1a34b04
 1020540:	e7f70301 	.word	0xe7f70301
 1020544:	5b04f850 	.word	0x5b04f850
 1020548:	f605fb24 	.word	0xf605fb24
 102054c:	f715fb44 	.word	0xf715fb44
 1020550:	6702e8e1 	.word	0x6702e8e1
 1020554:	1e5b462c 	.word	0x1e5b462c
 1020558:	1e52d1ec 	.word	0x1e52d1ec
 102055c:	1d00bf1c 	.word	0x1d00bf1c
 1020560:	bcf0e7e6 	.word	0xbcf0e7e6
 1020564:	e92d4770 	.word	0xe92d4770
 1020568:	f10003f0 	.word	0xf10003f0
 102056c:	f2460002 	.word	0xf2460002
 1020570:	f64c4388 	.word	0xf64c4388
 1020574:	f1c31410 	.word	0xf1c31410
 1020578:	f9300500 	.word	0xf9300500
 102057c:	f04f7b04 	.word	0xf04f7b04
 1020580:	f9300660 	.word	0xf9300660
 1020584:	eba88b04 	.word	0xeba88b04
 1020588:	45990907 	.word	0x45990907
 102058c:	eba9bfc8 	.word	0xeba9bfc8
 1020590:	45a90904 	.word	0x45a90904
 1020594:	44a1bfd8 	.word	0x44a1bfd8
 1020598:	7b04f930 	.word	0x7b04f930
 102059c:	0808eba7 	.word	0x0808eba7
 10205a0:	bfc84598 	.word	0xbfc84598
 10205a4:	0804eba8 	.word	0x0804eba8
 10205a8:	bfd845a8 	.word	0xbfd845a8
 10205ac:	eac944a0 	.word	0xeac944a0
 10205b0:	f8414908 	.word	0xf8414908
 10205b4:	1eb69b04 	.word	0x1eb69b04
 10205b8:	1e52d1e3 	.word	0x1e52d1e3
 10205bc:	e8bdd1dd 	.word	0xe8bdd1dd
 10205c0:	477003f0 	.word	0x477003f0
 10205c4:	03f0e92d 	.word	0x03f0e92d
 10205c8:	0002f100 	.word	0x0002f100
 10205cc:	4388f246 	.word	0x4388f246
 10205d0:	1410f64c 	.word	0x1410f64c
 10205d4:	0500f1c3 	.word	0x0500f1c3
 10205d8:	0660f04f 	.word	0x0660f04f
 10205dc:	0f07f016 	.word	0x0f07f016
 10205e0:	f930d104 	.word	0xf930d104
 10205e4:	f1a67b04 	.word	0xf1a67b04
 10205e8:	e7f70601 	.word	0xe7f70601
 10205ec:	8b04f930 	.word	0x8b04f930
 10205f0:	0907eba8 	.word	0x0907eba8
 10205f4:	bfc84599 	.word	0xbfc84599
 10205f8:	0904eba9 	.word	0x0904eba9
 10205fc:	bfd845a9 	.word	0xbfd845a9
 1020600:	f82144a1 	.word	0xf82144a1
 1020604:	46479b02 	.word	0x46479b02
 1020608:	d1e71e76 	.word	0xd1e71e76
 102060c:	bf1c1e52 	.word	0xbf1c1e52
 1020610:	e7e11d00 	.word	0xe7e11d00
 1020614:	03f0e8bd 	.word	0x03f0e8bd
 1020618:	e92d4770 	.word	0xe92d4770
 102061c:	f04f1ff0 	.word	0xf04f1ff0
 1020620:	f04f0300 	.word	0xf04f0300
 1020624:	68060400 	.word	0x68060400
 1020628:	0f1ff014 	.word	0x0f1ff014
 102062c:	f851bf08 	.word	0xf851bf08
 1020630:	006d5b04 	.word	0x006d5b04
 1020634:	fad3bf24 	.word	0xfad3bf24
 1020638:	6006f606 	.word	0x6006f606
 102063c:	bf062c7e 	.word	0xbf062c7e
 1020640:	39102400 	.word	0x39102400
 1020644:	f04f1c64 	.word	0xf04f1c64
 1020648:	f8d00c0c 	.word	0xf8d00c0c
 102064c:	f8508020 	.word	0xf8508020
 1020650:	f0146b04 	.word	0xf0146b04
 1020654:	bf080f1f 	.word	0xbf080f1f
 1020658:	5b04f851 	.word	0x5b04f851
 102065c:	bf24006d 	.word	0xbf24006d
 1020660:	f808fad3 	.word	0xf808fad3
 1020664:	801cf8c0 	.word	0x801cf8c0
 1020668:	bf062c7e 	.word	0xbf062c7e
 102066c:	39102400 	.word	0x39102400
 1020670:	fa0f1c64 	.word	0xfa0f1c64
 1020674:	fa0ff9a8 	.word	0xfa0ff9a8
 1020678:	fa0ff888 	.word	0xfa0ff888
 102067c:	b236f7a6 	.word	0xb236f7a6
 1020680:	0907eba9 	.word	0x0907eba9
 1020684:	0806eba8 	.word	0x0806eba8
 1020688:	0be9eb07 	.word	0x0be9eb07
 102068c:	0ae8eb06 	.word	0x0ae8eb06
 1020690:	4a0beaca 	.word	0x4a0beaca
 1020694:	ab04f840 	.word	0xab04f840
 1020698:	0ba9eb07 	.word	0x0ba9eb07
 102069c:	0aa8eb06 	.word	0x0aa8eb06
 10206a0:	4a0beaca 	.word	0x4a0beaca
 10206a4:	ab04f840 	.word	0xab04f840
 10206a8:	0b49eb09 	.word	0x0b49eb09
 10206ac:	0a48eb08 	.word	0x0a48eb08
 10206b0:	0bebeb07 	.word	0x0bebeb07
 10206b4:	0aeaeb06 	.word	0x0aeaeb06
 10206b8:	4a0beaca 	.word	0x4a0beaca
 10206bc:	ab04f840 	.word	0xab04f840
 10206c0:	0b69eb07 	.word	0x0b69eb07
 10206c4:	0a68eb06 	.word	0x0a68eb06
 10206c8:	4a0beaca 	.word	0x4a0beaca
 10206cc:	ab04f840 	.word	0xab04f840
 10206d0:	0b89eb09 	.word	0x0b89eb09
 10206d4:	0a88eb08 	.word	0x0a88eb08
 10206d8:	0bebeb07 	.word	0x0bebeb07
 10206dc:	0aeaeb06 	.word	0x0aeaeb06
 10206e0:	4a0beaca 	.word	0x4a0beaca
 10206e4:	ab04f840 	.word	0xab04f840
 10206e8:	0b89eb09 	.word	0x0b89eb09
 10206ec:	0a88eb08 	.word	0x0a88eb08
 10206f0:	44c244cb 	.word	0x44c244cb
 10206f4:	0bebeb07 	.word	0x0bebeb07
 10206f8:	0aeaeb06 	.word	0x0aeaeb06
 10206fc:	4a0beaca 	.word	0x4a0beaca
 1020700:	ab04f840 	.word	0xab04f840
 1020704:	0b89eb09 	.word	0x0b89eb09
 1020708:	0a88eb08 	.word	0x0a88eb08
 102070c:	0b49eb0b 	.word	0x0b49eb0b
 1020710:	0a48eb0a 	.word	0x0a48eb0a
 1020714:	0bebeb07 	.word	0x0bebeb07
 1020718:	0aeaeb06 	.word	0x0aeaeb06
 102071c:	4a0beaca 	.word	0x4a0beaca
 1020720:	ab04f840 	.word	0xab04f840
 1020724:	0c01f1bc 	.word	0x0c01f1bc
 1020728:	1e52d18f 	.word	0x1e52d18f
 102072c:	1d00bf1c 	.word	0x1d00bf1c
 1020730:	e8bde779 	.word	0xe8bde779
 1020734:	47701ff0 	.word	0x47701ff0
 1020738:	f04fb410 	.word	0xf04fb410
 102073c:	f9300320 	.word	0xf9300320
 1020740:	2a002b02 	.word	0x2a002b02
 1020744:	4252bfb8 	.word	0x4252bfb8
 1020748:	f482fab2 	.word	0xf482fab2
 102074c:	bfb8429c 	.word	0xbfb8429c
 1020750:	1e494623 	.word	0x1e494623
 1020754:	f1a3d1f3 	.word	0xf1a3d1f3
 1020758:	bc100011 	.word	0xbc100011
 102075c:	e92d4770 	.word	0xe92d4770
 1020760:	f04f07f0 	.word	0xf04f07f0
 1020764:	f04f0400 	.word	0xf04f0400
 1020768:	899e0500 	.word	0x899e0500
 102076c:	f812689f 	.word	0xf812689f
 1020770:	f831ab01 	.word	0xf831ab01
 1020774:	f1ba9b04 	.word	0xf1ba9b04
 1020778:	f8300f00 	.word	0xf8300f00
 102077c:	d10c8b04 	.word	0xd10c8b04
 1020780:	0908eba9 	.word	0x0908eba9
 1020784:	f909fb09 	.word	0xf909fb09
 1020788:	a000f8d7 	.word	0xa000f8d7
 102078c:	0409eb14 	.word	0x0409eb14
 1020790:	f14544ca 	.word	0xf14544ca
 1020794:	f8c70500 	.word	0xf8c70500
 1020798:	1e76a000 	.word	0x1e76a000
 102079c:	0704f107 	.word	0x0704f107
 10207a0:	e9c3d1e5 	.word	0xe9c3d1e5
 10207a4:	e8bd4500 	.word	0xe8bd4500
 10207a8:	477007f0 	.word	0x477007f0
 10207ac:	03f0e92d 	.word	0x03f0e92d
 10207b0:	0400f04f 	.word	0x0400f04f
 10207b4:	0500f04f 	.word	0x0500f04f
 10207b8:	f812891e 	.word	0xf812891e
 10207bc:	f8317b01 	.word	0xf8317b01
 10207c0:	2f009b04 	.word	0x2f009b04
 10207c4:	8b04f830 	.word	0x8b04f830
 10207c8:	eba9d107 	.word	0xeba9d107
 10207cc:	fb090908 	.word	0xfb090908
 10207d0:	eb14f909 	.word	0xeb14f909
 10207d4:	f1450409 	.word	0xf1450409
 10207d8:	1e760500 	.word	0x1e760500
 10207dc:	e9c3d1ed 	.word	0xe9c3d1ed
 10207e0:	e8bd4500 	.word	0xe8bd4500
 10207e4:	477003f0 	.word	0x477003f0
 10207e8:	1ff0e92d 	.word	0x1ff0e92d
 10207ec:	0400f04f 	.word	0x0400f04f
 10207f0:	0500f04f 	.word	0x0500f04f
 10207f4:	0600f04f 	.word	0x0600f04f
 10207f8:	0700f04f 	.word	0x0700f04f
 10207fc:	8010f8b3 	.word	0x8010f8b3
 1020800:	0c61f04f 	.word	0x0c61f04f
 1020804:	f850b408 	.word	0xf850b408
 1020808:	f8519b04 	.word	0xf8519b04
 102080c:	f812ab04 	.word	0xf812ab04
 1020810:	fb2a3b01 	.word	0xfb2a3b01
 1020814:	fb4afb09 	.word	0xfb4afb09
 1020818:	fb08f919 	.word	0xfb08f919
 102081c:	fb0afa03 	.word	0xfb0afa03
 1020820:	fbc9f308 	.word	0xfbc9f308
 1020824:	fbcb450a 	.word	0xfbcb450a
 1020828:	f1bc6703 	.word	0xf1bc6703
 102082c:	f1080c01 	.word	0xf1080c01
 1020830:	d1e80801 	.word	0xd1e80801
 1020834:	e8e3bc08 	.word	0xe8e3bc08
 1020838:	e9c34502 	.word	0xe9c34502
 102083c:	e8bd6700 	.word	0xe8bd6700
 1020840:	47701ff0 	.word	0x47701ff0
 1020844:	07f0e92d 	.word	0x07f0e92d
 1020848:	0840f240 	.word	0x0840f240
 102084c:	0810f2ce 	.word	0x0810f2ce
 1020850:	0300f240 	.word	0x0300f240
 1020854:	0300f2c8 	.word	0x0300f2c8
 1020858:	4000f8d8 	.word	0x4000f8d8
 102085c:	55baf644 	.word	0x55baf644
 1020860:	0600f241 	.word	0x0600f241
 1020864:	1600f2ce 	.word	0x1600f2ce
 1020868:	0403ea44 	.word	0x0403ea44
 102086c:	0004f1a0 	.word	0x0004f1a0
 1020870:	0700f241 	.word	0x0700f241
 1020874:	1702f2ce 	.word	0x1702f2ce
 1020878:	4000f8c8 	.word	0x4000f8c8
 102087c:	0368f240 	.word	0x0368f240
 1020880:	0310f2ce 	.word	0x0310f2ce
 1020884:	f202fb01 	.word	0xf202fb01
 1020888:	0400f241 	.word	0x0400f241
 102088c:	1401f2ce 	.word	0x1401f2ce
 1020890:	0901f240 	.word	0x0901f240
 1020894:	0a61f240 	.word	0x0a61f240
 1020898:	5108f886 	.word	0x5108f886
 102089c:	0188f887 	.word	0x0188f887
 10208a0:	0148f887 	.word	0x0148f887
 10208a4:	f8876019 	.word	0xf8876019
 10208a8:	f88421c8 	.word	0xf88421c8
 10208ac:	f8849208 	.word	0xf8849208
 10208b0:	f8869248 	.word	0xf8869248
 10208b4:	f886942a 	.word	0xf886942a
 10208b8:	f886972a 	.word	0xf886972a
 10208bc:	f887980d 	.word	0xf887980d
 10208c0:	f8869402 	.word	0xf8869402
 10208c4:	f8879a4d 	.word	0xf8879a4d
 10208c8:	f886932a 	.word	0xf886932a
 10208cc:	f8869c8d 	.word	0xf8869c8d
 10208d0:	f886952a 	.word	0xf886952a
 10208d4:	f8879ecd 	.word	0xf8879ecd
 10208d8:	f886902a 	.word	0xf886902a
 10208dc:	f886924d 	.word	0xf886924d
 10208e0:	f886922a 	.word	0xf886922a
 10208e4:	f886948d 	.word	0xf886948d
 10208e8:	f886952a 	.word	0xf886952a
 10208ec:	f887982d 	.word	0xf887982d
 10208f0:	f886962a 	.word	0xf886962a
 10208f4:	f8879a6d 	.word	0xf8879a6d
 10208f8:	f886932a 	.word	0xf886932a
 10208fc:	f8869cad 	.word	0xf8869cad
 1020900:	f886952a 	.word	0xf886952a
 1020904:	f8879eed 	.word	0xf8879eed
 1020908:	f886902a 	.word	0xf886902a
 102090c:	f886926d 	.word	0xf886926d
 1020910:	f886922a 	.word	0xf886922a
 1020914:	f1aa94ad 	.word	0xf1aa94ad
 1020918:	f1ba0a06 	.word	0xf1ba0a06
 102091c:	d2e20f06 	.word	0xd2e20f06
 1020920:	0f00f1ba 	.word	0x0f00f1ba
 1020924:	f1bad030 	.word	0xf1bad030
 1020928:	d02b0f01 	.word	0xd02b0f01
 102092c:	0f02f1ba 	.word	0x0f02f1ba
 1020930:	f1bad023 	.word	0xf1bad023
 1020934:	d0190f03 	.word	0xd0190f03
 1020938:	0f04f1ba 	.word	0x0f04f1ba
 102093c:	f886d00c 	.word	0xf886d00c
 1020940:	f886982d 	.word	0xf886982d
 1020944:	f8869a2d 	.word	0xf8869a2d
 1020948:	bf009c2d 	.word	0xbf009c2d
 102094c:	9e2df886 	.word	0x9e2df886
 1020950:	f886bf00 	.word	0xf886bf00
 1020954:	e017922d 	.word	0xe017922d
 1020958:	982df886 	.word	0x982df886
 102095c:	9a2df886 	.word	0x9a2df886
 1020960:	9c2df886 	.word	0x9c2df886
 1020964:	f886bf00 	.word	0xf886bf00
 1020968:	e00d9e2d 	.word	0xe00d9e2d
 102096c:	982df886 	.word	0x982df886
 1020970:	9a2df886 	.word	0x9a2df886
 1020974:	9c2df886 	.word	0x9c2df886
 1020978:	f886e006 	.word	0xf886e006
 102097c:	f886982d 	.word	0xf886982d
 1020980:	e0019a2d 	.word	0xe0019a2d
 1020984:	982df886 	.word	0x982df886
 1020988:	07f0e8bd 	.word	0x07f0e8bd
 102098c:	00004770 	.word	0x00004770
 1020990:	089db4f0 	.word	0x089db4f0
 1020994:	462c060e 	.word	0x462c060e
 1020998:	b1bdd525 	.word	0xb1bdd525
 102099c:	0500f1d1 	.word	0x0500f1d1
 10209a0:	6002f9b0 	.word	0x6002f9b0
 10209a4:	7000f9b0 	.word	0x7000f9b0
 10209a8:	412f412e 	.word	0x412f412e
 10209ac:	4606eac7 	.word	0x4606eac7
 10209b0:	f9b06016 	.word	0xf9b06016
 10209b4:	f9b06004 	.word	0xf9b06004
 10209b8:	30087006 	.word	0x30087006
 10209bc:	412e412f 	.word	0x412e412f
 10209c0:	4607eac6 	.word	0x4607eac6
 10209c4:	32086056 	.word	0x32086056
 10209c8:	d1e91e64 	.word	0xd1e91e64
 10209cc:	0403f013 	.word	0x0403f013
 10209d0:	4249d007 	.word	0x4249d007
 10209d4:	3b02f930 	.word	0x3b02f930
 10209d8:	1e64410b 	.word	0x1e64410b
 10209dc:	3b02f822 	.word	0x3b02f822
 10209e0:	bcf0d1f8 	.word	0xbcf0d1f8
 10209e4:	b1ed4770 	.word	0xb1ed4770
 10209e8:	6002f9b0 	.word	0x6002f9b0
 10209ec:	5000f9b0 	.word	0x5000f9b0
 10209f0:	f306408e 	.word	0xf306408e
 10209f4:	408d060f 	.word	0x408d060f
 10209f8:	050ff305 	.word	0x050ff305
 10209fc:	4506eac5 	.word	0x4506eac5
 1020a00:	f9b06015 	.word	0xf9b06015
 1020a04:	f9b05004 	.word	0xf9b05004
 1020a08:	30086006 	.word	0x30086006
 1020a0c:	f306408e 	.word	0xf306408e
 1020a10:	408d060f 	.word	0x408d060f
 1020a14:	050ff305 	.word	0x050ff305
 1020a18:	4506eac5 	.word	0x4506eac5
 1020a1c:	32086055 	.word	0x32086055
 1020a20:	d1e11e64 	.word	0xd1e11e64
 1020a24:	0f03f013 	.word	0x0f03f013
 1020a28:	afdbf43f 	.word	0xafdbf43f
 1020a2c:	0303f003 	.word	0x0303f003
 1020a30:	4b02f930 	.word	0x4b02f930
 1020a34:	f304408c 	.word	0xf304408c
 1020a38:	1e5b040f 	.word	0x1e5b040f
 1020a3c:	4b02f822 	.word	0x4b02f822
 1020a40:	bcf0d1f6 	.word	0xbcf0d1f6
 1020a44:	00004770 	.word	0x00004770
 1020a48:	ba526802 	.word	0xba526802
 1020a4c:	2b04f840 	.word	0x2b04f840
 1020a50:	d1f91e49 	.word	0xd1f91e49
 1020a54:	e92d4770 	.word	0xe92d4770
 1020a58:	46045ff0 	.word	0x46045ff0
 1020a5c:	4616460d 	.word	0x4616460d
 1020a60:	4878461f 	.word	0x4878461f
 1020a64:	49786800 	.word	0x49786800
 1020a68:	4a786809 	.word	0x4a786809
 1020a6c:	4b786812 	.word	0x4b786812
 1020a70:	f243681b 	.word	0xf243681b
 1020a74:	f2ce0800 	.word	0xf2ce0800
 1020a78:	46911800 	.word	0x46911800
 1020a7c:	90dcf888 	.word	0x90dcf888
 1020a80:	0908f109 	.word	0x0908f109
 1020a84:	92dcf888 	.word	0x92dcf888
 1020a88:	0908f109 	.word	0x0908f109
 1020a8c:	94dcf888 	.word	0x94dcf888
 1020a90:	0908f109 	.word	0x0908f109
 1020a94:	96dcf888 	.word	0x96dcf888
 1020a98:	0908f109 	.word	0x0908f109
 1020a9c:	98dcf888 	.word	0x98dcf888
 1020aa0:	0908f109 	.word	0x0908f109
 1020aa4:	9adcf888 	.word	0x9adcf888
 1020aa8:	0908f109 	.word	0x0908f109
 1020aac:	9cdcf888 	.word	0x9cdcf888
 1020ab0:	0908f109 	.word	0x0908f109
 1020ab4:	9edcf888 	.word	0x9edcf888
 1020ab8:	0900f243 	.word	0x0900f243
 1020abc:	1902f2ce 	.word	0x1902f2ce
 1020ac0:	a020f8d9 	.word	0xa020f8d9
 1020ac4:	0c00f240 	.word	0x0c00f240
 1020ac8:	4c2aeacc 	.word	0x4c2aeacc
 1020acc:	fa8afa1f 	.word	0xfa8afa1f
 1020ad0:	0f00f1ba 	.word	0x0f00f1ba
 1020ad4:	f04fbf08 	.word	0xf04fbf08
 1020ad8:	ea5f0cbf 	.word	0xea5f0cbf
 1020adc:	bf340b9a 	.word	0xbf340b9a
 1020ae0:	4000eac1 	.word	0x4000eac1
 1020ae4:	4001eac0 	.word	0x4001eac0
 1020ae8:	0b56ea4f 	.word	0x0b56ea4f
 1020aec:	0f80f1ba 	.word	0x0f80f1ba
 1020af0:	f888bf08 	.word	0xf888bf08
 1020af4:	d90a3428 	.word	0xd90a3428
 1020af8:	668aea4f 	.word	0x668aea4f
 1020afc:	d1042e00 	.word	0xd1042e00
 1020b00:	3428f888 	.word	0x3428f888
 1020b04:	5c55f888 	.word	0x5c55f888
 1020b08:	f888e001 	.word	0xf888e001
 1020b0c:	f8883028 	.word	0xf8883028
 1020b10:	f1bc404c 	.word	0xf1bc404c
 1020b14:	bf060c01 	.word	0xbf060c01
 1020b18:	0210f888 	.word	0x0210f888
 1020b1c:	0c7ff04f 	.word	0x0c7ff04f
 1020b20:	0010f888 	.word	0x0010f888
 1020b24:	0018f888 	.word	0x0018f888
 1020b28:	01d9f888 	.word	0x01d9f888
 1020b2c:	01dbf889 	.word	0x01dbf889
 1020b30:	0ddbf888 	.word	0x0ddbf888
 1020b34:	0ddbf889 	.word	0x0ddbf889
 1020b38:	0ddbf888 	.word	0x0ddbf888
 1020b3c:	0ddbf889 	.word	0x0ddbf889
 1020b40:	03dbf888 	.word	0x03dbf888
 1020b44:	03dbf889 	.word	0x03dbf889
 1020b48:	0efbf888 	.word	0x0efbf888
 1020b4c:	0efbf889 	.word	0x0efbf889
 1020b50:	02fbf888 	.word	0x02fbf888
 1020b54:	02fbf889 	.word	0x02fbf889
 1020b58:	02fbf888 	.word	0x02fbf888
 1020b5c:	02fbf889 	.word	0x02fbf889
 1020b60:	0efaf888 	.word	0x0efaf888
 1020b64:	0efaf889 	.word	0x0efaf889
 1020b68:	3b3df888 	.word	0x3b3df888
 1020b6c:	0f80f1ba 	.word	0x0f80f1ba
 1020b70:	f888bfa8 	.word	0xf888bfa8
 1020b74:	ea4f3028 	.word	0xea4f3028
 1020b78:	eac14100 	.word	0xeac14100
 1020b7c:	f8884020 	.word	0xf8884020
 1020b80:	f10a04bd 	.word	0xf10a04bd
 1020b84:	f1bb0a02 	.word	0xf1bb0a02
 1020b88:	d1af0b01 	.word	0xd1af0b01
 1020b8c:	0f80f1ba 	.word	0x0f80f1ba
 1020b90:	2f00d806 	.word	0x2f00d806
 1020b94:	f888bf1c 	.word	0xf888bf1c
 1020b98:	f8883228 	.word	0xf8883228
 1020b9c:	d1053007 	.word	0xd1053007
 1020ba0:	d01b2f00 	.word	0xd01b2f00
 1020ba4:	3228f888 	.word	0x3228f888
 1020ba8:	5c55f888 	.word	0x5c55f888
 1020bac:	0620f04f 	.word	0x0620f04f
 1020bb0:	0504f105 	.word	0x0504f105
 1020bb4:	3028f888 	.word	0x3028f888
 1020bb8:	3007f888 	.word	0x3007f888
 1020bbc:	d1f91e76 	.word	0xd1f91e76
 1020bc0:	5c55f888 	.word	0x5c55f888
 1020bc4:	0620f04f 	.word	0x0620f04f
 1020bc8:	0508f1a5 	.word	0x0508f1a5
 1020bcc:	3028f888 	.word	0x3028f888
 1020bd0:	3007f888 	.word	0x3007f888
 1020bd4:	d1f91e76 	.word	0xd1f91e76
 1020bd8:	5c55f888 	.word	0x5c55f888
 1020bdc:	0900f243 	.word	0x0900f243
 1020be0:	1904f2ce 	.word	0x1904f2ce
 1020be4:	4c0cea4f 	.word	0x4c0cea4f
 1020be8:	0a0ceaca 	.word	0x0a0ceaca
 1020bec:	a008f889 	.word	0xa008f889
 1020bf0:	7cfff64f 	.word	0x7cfff64f
 1020bf4:	a1e0f8d8 	.word	0xa1e0f8d8
 1020bf8:	0a0cea0a 	.word	0x0a0cea0a
 1020bfc:	ae08f888 	.word	0xae08f888
 1020c00:	f8884691 	.word	0xf8884691
 1020c04:	f10990dd 	.word	0xf10990dd
 1020c08:	f8880908 	.word	0xf8880908
 1020c0c:	f10992dd 	.word	0xf10992dd
 1020c10:	f8880908 	.word	0xf8880908
 1020c14:	f10994dd 	.word	0xf10994dd
 1020c18:	f8880908 	.word	0xf8880908
 1020c1c:	f10996dd 	.word	0xf10996dd
 1020c20:	f8880908 	.word	0xf8880908
 1020c24:	f10998dd 	.word	0xf10998dd
 1020c28:	f8880908 	.word	0xf8880908
 1020c2c:	f1099add 	.word	0xf1099add
 1020c30:	f8880908 	.word	0xf8880908
 1020c34:	f1099cdd 	.word	0xf1099cdd
 1020c38:	f8880908 	.word	0xf8880908
 1020c3c:	e8bd9edd 	.word	0xe8bd9edd
 1020c40:	00009ff0 	.word	0x00009ff0
 1020c44:	20013218 	.word	0x20013218
 1020c48:	20013214 	.word	0x20013214
 1020c4c:	20013220 	.word	0x20013220
 1020c50:	2001321c 	.word	0x2001321c
 1020c54:	680a6801 	.word	0x680a6801
 1020c58:	6082440a 	.word	0x6082440a
 1020c5c:	441a684b 	.word	0x441a684b
 1020c60:	310860c2 	.word	0x310860c2
 1020c64:	47706001 	.word	0x47706001
 1020c68:	68c26881 	.word	0x68c26881
 1020c6c:	d1084291 	.word	0xd1084291
 1020c70:	680a6801 	.word	0x680a6801
 1020c74:	6082440a 	.word	0x6082440a
 1020c78:	441a684b 	.word	0x441a684b
 1020c7c:	310860c2 	.word	0x310860c2
 1020c80:	68816001 	.word	0x68816001
 1020c84:	60811c49 	.word	0x60811c49
 1020c88:	0d01f811 	.word	0x0d01f811
 1020c8c:	b5384770 	.word	0xb5384770
 1020c90:	460d4604 	.word	0x460d4604
 1020c94:	68e168a0 	.word	0x68e168a0
 1020c98:	d1124288 	.word	0xd1124288
 1020c9c:	68616820 	.word	0x68616820
 1020ca0:	bf084288 	.word	0xbf084288
 1020ca4:	f8c1f000 	.word	0xf8c1f000
 1020ca8:	7c226820 	.word	0x7c226820
 1020cac:	b1026801 	.word	0xb1026801
 1020cb0:	60a14449 	.word	0x60a14449
 1020cb4:	440a6842 	.word	0x440a6842
 1020cb8:	300860e2 	.word	0x300860e2
 1020cbc:	60204291 	.word	0x60204291
 1020cc0:	68a0d0ec 	.word	0x68a0d0ec
 1020cc4:	60a01c40 	.word	0x60a01c40
 1020cc8:	5d01f800 	.word	0x5d01f800
 1020ccc:	e92dbd31 	.word	0xe92dbd31
 1020cd0:	b08a41f0 	.word	0xb08a41f0
 1020cd4:	0108f100 	.word	0x0108f100
 1020cd8:	68029105 	.word	0x68029105
 1020cdc:	eb010852 	.word	0xeb010852
 1020ce0:	910601c2 	.word	0x910601c2
 1020ce4:	91072100 	.word	0x91072100
 1020ce8:	68019108 	.word	0x68019108
 1020cec:	eb000849 	.word	0xeb000849
 1020cf0:	310801c1 	.word	0x310801c1
 1020cf4:	79019100 	.word	0x79019100
 1020cf8:	0101f001 	.word	0x0101f001
 1020cfc:	1010f88d 	.word	0x1010f88d
 1020d00:	99006840 	.word	0x99006840
 1020d04:	eb010840 	.word	0xeb010840
 1020d08:	900100c0 	.word	0x900100c0
 1020d0c:	90022000 	.word	0x90022000
 1020d10:	e0069003 	.word	0xe0069003
 1020d14:	f7ffa805 	.word	0xf7ffa805
 1020d18:	9807ff9d 	.word	0x9807ff9d
 1020d1c:	42889908 	.word	0x42889908
 1020d20:	9805d107 	.word	0x9805d107
 1020d24:	42889906 	.word	0x42889906
 1020d28:	9801d1f4 	.word	0x9801d1f4
 1020d2c:	e8bdb00a 	.word	0xe8bdb00a
 1020d30:	a80581f0 	.word	0xa80581f0
 1020d34:	ff98f7ff 	.word	0xff98f7ff
 1020d38:	f0144604 	.word	0xf0144604
 1020d3c:	d1030603 	.word	0xd1030603
 1020d40:	f7ffa805 	.word	0xf7ffa805
 1020d44:	1cc6ff91 	.word	0x1cc6ff91
 1020d48:	2d0f0925 	.word	0x2d0f0925
 1020d4c:	a805d114 	.word	0xa805d114
 1020d50:	ff8af7ff 	.word	0xff8af7ff
 1020d54:	050ff100 	.word	0x050ff100
 1020d58:	9807e00e 	.word	0x9807e00e
 1020d5c:	42889908 	.word	0x42889908
 1020d60:	a805bf04 	.word	0xa805bf04
 1020d64:	ff76f7ff 	.word	0xff76f7ff
 1020d68:	1c409807 	.word	0x1c409807
 1020d6c:	f8109007 	.word	0xf8109007
 1020d70:	46681d01 	.word	0x46681d01
 1020d74:	ff8bf7ff 	.word	0xff8bf7ff
 1020d78:	d1ee1e76 	.word	0xd1ee1e76
 1020d7c:	d0cc2d00 	.word	0xd0cc2d00
 1020d80:	f7ffa805 	.word	0xf7ffa805
 1020d84:	4606ff71 	.word	0x4606ff71
 1020d88:	f00008a0 	.word	0xf00008a0
 1020d8c:	28030003 	.word	0x28030003
 1020d90:	a805bf04 	.word	0xa805bf04
 1020d94:	ff68f7ff 	.word	0xff68f7ff
 1020d98:	8000f8dd 	.word	0x8000f8dd
 1020d9c:	9f039902 	.word	0x9f039902
 1020da0:	2000eb06 	.word	0x2000eb06
 1020da4:	f1a8e008 	.word	0xf1a8e008
 1020da8:	f1a80808 	.word	0xf1a80808
 1020dac:	1a800108 	.word	0x1a800108
 1020db0:	6849680a 	.word	0x6849680a
 1020db4:	46391857 	.word	0x46391857
 1020db8:	2c08f858 	.word	0x2c08f858
 1020dbc:	42821a8a 	.word	0x42821a8a
 1020dc0:	4240d3f1 	.word	0x4240d3f1
 1020dc4:	1cae180c 	.word	0x1cae180c
 1020dc8:	42bcd0a7 	.word	0x42bcd0a7
 1020dcc:	f858d106 	.word	0xf858d106
 1020dd0:	f8584b04 	.word	0xf8584b04
 1020dd4:	18270b04 	.word	0x18270b04
 1020dd8:	d0f842bc 	.word	0xd0f842bc
 1020ddc:	99039802 	.word	0x99039802
 1020de0:	5b01f814 	.word	0x5b01f814
 1020de4:	d1174288 	.word	0xd1174288
 1020de8:	99019800 	.word	0x99019800
 1020dec:	bf084288 	.word	0xbf084288
 1020df0:	f81bf000 	.word	0xf81bf000
 1020df4:	68009800 	.word	0x68009800
 1020df8:	1010f89d 	.word	0x1010f89d
 1020dfc:	b1099002 	.word	0xb1099002
 1020e00:	90024448 	.word	0x90024448
 1020e04:	98029900 	.word	0x98029900
 1020e08:	9a006849 	.word	0x9a006849
 1020e0c:	32084401 	.word	0x32084401
 1020e10:	91034288 	.word	0x91034288
 1020e14:	d0e79200 	.word	0xd0e79200
 1020e18:	1c409802 	.word	0x1c409802
 1020e1c:	1e769002 	.word	0x1e769002
 1020e20:	5d01f800 	.word	0x5d01f800
 1020e24:	af79f43f 	.word	0xaf79f43f
 1020e28:	2001e7cf 	.word	0x2001e7cf
 1020e2c:	b800f000 	.word	0xb800f000
 1020e30:	03092120 	.word	0x03092120
 1020e34:	20183126 	.word	0x20183126
 1020e38:	e7f9beab 	.word	0xe7f9beab
 1020e3c:	f0002201 	.word	0xf0002201
 1020e40:	4082001f 	.word	0x4082001f
 1020e44:	070b483f 	.word	0x070b483f
 1020e48:	6442bf4c 	.word	0x6442bf4c
 1020e4c:	06cb6402 	.word	0x06cb6402
 1020e50:	6742bf4c 	.word	0x6742bf4c
 1020e54:	068b6702 	.word	0x068b6702
 1020e58:	6302bf4c 	.word	0x6302bf4c
 1020e5c:	f0116342 	.word	0xf0116342
 1020e60:	bf140fc0 	.word	0xbf140fc0
 1020e64:	60426002 	.word	0x60426002
 1020e68:	bf4c060b 	.word	0xbf4c060b
 1020e6c:	66026642 	.word	0x66026642
 1020e70:	6d0307cb 	.word	0x6d0307cb
 1020e74:	4313bf4c 	.word	0x4313bf4c
 1020e78:	65034393 	.word	0x65034393
 1020e7c:	6d410789 	.word	0x6d410789
 1020e80:	4311bf4c 	.word	0x4311bf4c
 1020e84:	65414391 	.word	0x65414391
 1020e88:	b5004770 	.word	0xb5004770
 1020e8c:	f44fb081 	.word	0xf44fb081
 1020e90:	492d4000 	.word	0x492d4000
 1020e94:	20066008 	.word	0x20066008
 1020e98:	fb0af7f3 	.word	0xfb0af7f3
 1020e9c:	20092110 	.word	0x20092110
 1020ea0:	ffccf7ff 	.word	0xffccf7ff
 1020ea4:	f44f4829 	.word	0xf44f4829
 1020ea8:	60017100 	.word	0x60017100
 1020eac:	7180f44f 	.word	0x7180f44f
 1020eb0:	f8c065c1 	.word	0xf8c065c1
 1020eb4:	6501108c 	.word	0x6501108c
 1020eb8:	67c16201 	.word	0x67c16201
 1020ebc:	f4226ec2 	.word	0xf4226ec2
 1020ec0:	66c27280 	.word	0x66c27280
 1020ec4:	f4226f02 	.word	0xf4226f02
 1020ec8:	67027280 	.word	0x67027280
 1020ecc:	21806001 	.word	0x21806001
 1020ed0:	f8c065c1 	.word	0xf8c065c1
 1020ed4:	6501108c 	.word	0x6501108c
 1020ed8:	67c16201 	.word	0x67c16201
 1020edc:	f0216ec1 	.word	0xf0216ec1
 1020ee0:	66c10180 	.word	0x66c10180
 1020ee4:	f0216f01 	.word	0xf0216f01
 1020ee8:	67010180 	.word	0x67010180
 1020eec:	60012180 	.word	0x60012180
 1020ef0:	65c12140 	.word	0x65c12140
 1020ef4:	108cf8c0 	.word	0x108cf8c0
 1020ef8:	62016501 	.word	0x62016501
 1020efc:	6ec167c1 	.word	0x6ec167c1
 1020f00:	0140f021 	.word	0x0140f021
 1020f04:	6f0166c1 	.word	0x6f0166c1
 1020f08:	0140f021 	.word	0x0140f021
 1020f0c:	21406701 	.word	0x21406701
 1020f10:	21016001 	.word	0x21016001
 1020f14:	f8c060c1 	.word	0xf8c060c1
 1020f18:	62c1109c 	.word	0x62c1109c
 1020f1c:	65c12104 	.word	0x65c12104
 1020f20:	108cf8c0 	.word	0x108cf8c0
 1020f24:	62016501 	.word	0x62016501
 1020f28:	6ec167c1 	.word	0x6ec167c1
 1020f2c:	0104f041 	.word	0x0104f041
 1020f30:	6f0166c1 	.word	0x6f0166c1
 1020f34:	0104f041 	.word	0x0104f041
 1020f38:	21046701 	.word	0x21046701
 1020f3c:	b0016001 	.word	0xb0016001
 1020f40:	0000bd00 	.word	0x0000bd00
 1020f44:	400e0420 	.word	0x400e0420
 1020f48:	400e181c 	.word	0x400e181c
 1020f4c:	400e0404 	.word	0x400e0404
 1020f50:	b081b530 	.word	0xb081b530
 1020f54:	f7ff4c11 	.word	0xf7ff4c11
 1020f58:	f7f4ff98 	.word	0xf7f4ff98
 1020f5c:	4601fb10 	.word	0x4601fb10
 1020f60:	f000480f 	.word	0xf000480f
 1020f64:	4602f823 	.word	0x4602f823
 1020f68:	490e4613 	.word	0x490e4613
 1020f6c:	f0004620 	.word	0xf0004620
 1020f70:	f7f4f82d 	.word	0xf7f4f82d
 1020f74:	f7f4fbb2 	.word	0xf7f4fbb2
 1020f78:	2100faee 	.word	0x2100faee
 1020f7c:	722bf241 	.word	0x722bf241
 1020f80:	18802300 	.word	0x18802300
 1020f84:	f2414159 	.word	0xf2414159
 1020f88:	f7f7722c 	.word	0xf7f7722c
 1020f8c:	f7fefd5b 	.word	0xf7fefd5b
 1020f90:	4d05f8f7 	.word	0x4d05f8f7
 1020f94:	f7f46025 	.word	0xf7f46025
 1020f98:	e7fbfc3d 	.word	0xe7fbfc3d
 1020f9c:	400e1818 	.word	0x400e1818
 1020fa0:	000f4240 	.word	0x000f4240
 1020fa4:	10003000 	.word	0x10003000
 1020fa8:	a5000001 	.word	0xa5000001
 1020fac:	fbb24a0a 	.word	0xfbb24a0a
 1020fb0:	4288f1f1 	.word	0x4288f1f1
 1020fb4:	ebc1bf24 	.word	0xebc1bf24
 1020fb8:	42824201 	.word	0x42824201
 1020fbc:	f64fd202 	.word	0xf64fd202
 1020fc0:	477070ff 	.word	0x477070ff
 1020fc4:	f0f1fbb0 	.word	0xf0f1fbb0
 1020fc8:	4770b280 	.word	0x4770b280
 1020fcc:	4203ea42 	.word	0x4203ea42
 1020fd0:	60416082 	.word	0x60416082
 1020fd4:	00004770 	.word	0x00004770
 1020fd8:	7a120000 	.word	0x7a120000
 1020fdc:	f850e019 	.word	0xf850e019
 1020fe0:	07cb1b04 	.word	0x07cb1b04
 1020fe4:	f1a9bf44 	.word	0xf1a9bf44
 1020fe8:	18590301 	.word	0x18590301
 1020fec:	23001f12 	.word	0x23001f12
 1020ff0:	f8412a04 	.word	0xf8412a04
 1020ff4:	d2f93b04 	.word	0xd2f93b04
 1020ff8:	7c82ea5f 	.word	0x7c82ea5f
 1020ffc:	d504460b 	.word	0xd504460b
 1021000:	0c00f04f 	.word	0x0c00f04f
 1021004:	c000f8a1 	.word	0xc000f8a1
 1021008:	07d11c9b 	.word	0x07d11c9b
 102100c:	2100bf44 	.word	0x2100bf44
 1021010:	f8507019 	.word	0xf8507019
 1021014:	2a002b04 	.word	0x2a002b04
 1021018:	4770d1e1 	.word	0x4770d1e1
 102101c:	68014807 	.word	0x68014807
 1021020:	00490849 	.word	0x00490849
 1021024:	68016001 	.word	0x68016001
 1021028:	3180f441 	.word	0x3180f441
 102102c:	49046001 	.word	0x49046001
 1021030:	000a6809 	.word	0x000a6809
 1021034:	68c0bf1c 	.word	0x68c0bf1c
 1021038:	47704708 	.word	0x47704708
 102103c:	4001c000 	.word	0x4001c000
 1021040:	200132c8 	.word	0x200132c8
 1021044:	4907b510 	.word	0x4907b510
 1021048:	31184479 	.word	0x31184479
 102104c:	447c4c06 	.word	0x447c4c06
 1021050:	e0043416 	.word	0xe0043416
 1021054:	1d08680a 	.word	0x1d08680a
 1021058:	47884411 	.word	0x47884411
 102105c:	42a14601 	.word	0x42a14601
 1021060:	bd10d1f8 	.word	0xbd10d1f8
 1021064:	0000002c 	.word	0x0000002c
 1021068:	00000064 	.word	0x00000064
 102106c:	5188f64e 	.word	0x5188f64e
 1021070:	0100f2ce 	.word	0x0100f2ce
 1021074:	f4406808 	.word	0xf4406808
 1021078:	60080070 	.word	0x60080070
 102107c:	8f4ff3bf 	.word	0x8f4ff3bf
 1021080:	8f6ff3bf 	.word	0x8f6ff3bf
 1021084:	7000f04f 	.word	0x7000f04f
 1021088:	0a10eee1 	.word	0x0a10eee1
 102108c:	00004770 	.word	0x00004770
 1021090:	ffffff4d 	.word	0xffffff4d
 1021094:	00004930 	.word	0x00004930
 1021098:	20000000 	.word	0x20000000
 102109c:	00003a64 	.word	0x00003a64
 10210a0:	2001358c 	.word	0x2001358c
 10210a4:	0000555c 	.word	0x0000555c
 10210a8:	2000dd7c 	.word	0x2000dd7c
 10210ac:	00000000 	.word	0x00000000
 10210b0:	fffffc1f 	.word	0xfffffc1f
 10210b4:	00000002 	.word	0x00000002
 10210b8:	00000002 	.word	0x00000002
 10210bc:	00000098 	.word	0x00000098
 10210c0:	0000041c 	.word	0x0000041c
 10210c4:	20004930 	.word	0x20004930
 10210c8:	0000944c 	.word	0x0000944c
 10210cc:	00007fff 	.word	0x00007fff
 10210d0:	5a825a82 	.word	0x5a825a82
 10210d4:	7fff0000 	.word	0x7fff0000
 10210d8:	5a82a57e 	.word	0x5a82a57e
 10210dc:	00008001 	.word	0x00008001
 10210e0:	a57ea57e 	.word	0xa57ea57e
 10210e4:	80010000 	.word	0x80010000
 10210e8:	a57e5a82 	.word	0xa57e5a82
 10210ec:	49044803 	.word	0x49044803
 10210f0:	01c009c0 	.word	0x01c009c0
 10210f4:	20016008 	.word	0x20016008
 10210f8:	00004770 	.word	0x00004770
 10210fc:	00000000 	.word	0x00000000
 1021100:	e000ed08 	.word	0xe000ed08
 1021104:	b801f000 	.word	0xb801f000
 1021108:	f3afe7fe 	.word	0xf3afe7fe
 102110c:	f7ff8000 	.word	0xf7ff8000
 1021110:	f000ffad 	.word	0xf000ffad
 1021114:	0000f801 	.word	0x0000f801
 1021118:	ffe8f7ff 	.word	0xffe8f7ff
 102111c:	d0012800 	.word	0xd0012800
 1021120:	ff90f7ff 	.word	0xff90f7ff
 1021124:	f3af2000 	.word	0xf3af2000
 1021128:	f7ff8000 	.word	0xf7ff8000
 102112c:	f000ff11 	.word	0xf000ff11
 1021130:	f000f800 	.word	0xf000f800
 1021134:	0000b801 	.word	0x0000b801
 1021138:	46384607 	.word	0x46384607
 102113c:	fe78f7ff 	.word	0xfe78f7ff
 1021140:	0000e7fb 	.word	0x0000e7fb
 1021144:	179d04e0 	.word	0x179d04e0
 1021148:	67833a40 	.word	0x67833a40
 102114c:	c5bf987c 	.word	0xc5bf987c
 1021150:	fb1fe862 	.word	0xfb1fe862
 1021154:	010093f2 	.word	0x010093f2
 1021158:	8d800410 	.word	0x8d800410
 102115c:	82000042 	.word	0x82000042
 1021160:	04711204 	.word	0x04711204
 1021164:	12046612 	.word	0x12046612
 1021168:	5712045e 	.word	0x5712045e
 102116c:	04521204 	.word	0x04521204
 1021170:	42480310 	.word	0x42480310
 1021174:	08858000 	.word	0x08858000
 1021178:	12047412 	.word	0x12047412
 102117c:	56120461 	.word	0x56120461
 1021180:	044e1204 	.word	0x044e1204
 1021184:	12044712 	.word	0x12044712
 1021188:	01f00442 	.word	0x01f00442
 102118c:	004238ff 	.word	0x004238ff
 1021190:	01fff101 	.word	0x01fff101
 1021194:	f101fff1 	.word	0xf101fff1
 1021198:	fff101ff 	.word	0xfff101ff
 102119c:	01fff101 	.word	0x01fff101
 10211a0:	f101fff1 	.word	0xf101fff1
 10211a4:	fff101ff 	.word	0xfff101ff
 10211a8:	01fff101 	.word	0x01fff101
 10211ac:	f101fff1 	.word	0xf101fff1
 10211b0:	fff101ff 	.word	0xfff101ff
 10211b4:	01fff101 	.word	0x01fff101
 10211b8:	f101fff1 	.word	0xf101fff1
 10211bc:	fff101ff 	.word	0xfff101ff
 10211c0:	01fff101 	.word	0x01fff101
 10211c4:	f101fff1 	.word	0xf101fff1
 10211c8:	fff101ff 	.word	0xfff101ff
 10211cc:	01fff101 	.word	0x01fff101
 10211d0:	f101fff1 	.word	0xf101fff1
 10211d4:	fff101ff 	.word	0xfff101ff
 10211d8:	01fff101 	.word	0x01fff101
 10211dc:	f101fff1 	.word	0xf101fff1
 10211e0:	fff101ff 	.word	0xfff101ff
 10211e4:	01fff101 	.word	0x01fff101
 10211e8:	f101fff1 	.word	0xf101fff1
 10211ec:	fff101ff 	.word	0xfff101ff
 10211f0:	01fff101 	.word	0x01fff101
 10211f4:	f101fff1 	.word	0xf101fff1
 10211f8:	fff101ff 	.word	0xfff101ff
 10211fc:	01fff101 	.word	0x01fff101
 1021200:	f101fff1 	.word	0xf101fff1
 1021204:	fff101ff 	.word	0xfff101ff
 1021208:	01fff101 	.word	0x01fff101
 102120c:	f101fff1 	.word	0xf101fff1
 1021210:	fff101ff 	.word	0xfff101ff
 1021214:	01fff101 	.word	0x01fff101
 1021218:	f101fff1 	.word	0xf101fff1
 102121c:	fff101ff 	.word	0xfff101ff
 1021220:	01fff101 	.word	0x01fff101
 1021224:	f101fff1 	.word	0xf101fff1
 1021228:	fff101ff 	.word	0xfff101ff
 102122c:	01fff101 	.word	0x01fff101
 1021230:	f101fff1 	.word	0xf101fff1
 1021234:	fff101ff 	.word	0xfff101ff
 1021238:	01fff101 	.word	0x01fff101
 102123c:	f101fff1 	.word	0xf101fff1
 1021240:	fff101ff 	.word	0xfff101ff
 1021244:	01fff101 	.word	0x01fff101
 1021248:	f101fff1 	.word	0xf101fff1
 102124c:	fff101ff 	.word	0xfff101ff
 1021250:	01fff101 	.word	0x01fff101
 1021254:	f101fff1 	.word	0xf101fff1
 1021258:	fff101ff 	.word	0xfff101ff
 102125c:	01fff101 	.word	0x01fff101
 1021260:	f101fff1 	.word	0xf101fff1
 1021264:	fff101ff 	.word	0xfff101ff
 1021268:	01fff101 	.word	0x01fff101
 102126c:	f101fff1 	.word	0xf101fff1
 1021270:	fff101ff 	.word	0xfff101ff
 1021274:	01fff101 	.word	0x01fff101
 1021278:	f101fff1 	.word	0xf101fff1
 102127c:	fff101ff 	.word	0xfff101ff
 1021280:	01fff101 	.word	0x01fff101
 1021284:	f101fff1 	.word	0xf101fff1
 1021288:	fff101ff 	.word	0xfff101ff
 102128c:	01fff101 	.word	0x01fff101
 1021290:	f101fff1 	.word	0xf101fff1
 1021294:	fff101ff 	.word	0xfff101ff
 1021298:	01fff101 	.word	0x01fff101
 102129c:	f101fff1 	.word	0xf101fff1
 10212a0:	fff101ff 	.word	0xfff101ff
 10212a4:	01fff101 	.word	0x01fff101
 10212a8:	f101fff1 	.word	0xf101fff1
 10212ac:	fff101ff 	.word	0xfff101ff
 10212b0:	01fff101 	.word	0x01fff101
 10212b4:	f101fff1 	.word	0xf101fff1
 10212b8:	fff101ff 	.word	0xfff101ff
 10212bc:	01fff101 	.word	0x01fff101
 10212c0:	f101fff1 	.word	0xf101fff1
 10212c4:	fff101ff 	.word	0xfff101ff
 10212c8:	01fff101 	.word	0x01fff101
 10212cc:	f101fff1 	.word	0xf101fff1
 10212d0:	fff101ff 	.word	0xfff101ff
 10212d4:	01fff101 	.word	0x01fff101
 10212d8:	f101fff1 	.word	0xf101fff1
 10212dc:	fff101ff 	.word	0xfff101ff
 10212e0:	01fff101 	.word	0x01fff101
 10212e4:	f101fff1 	.word	0xf101fff1
 10212e8:	fff101ff 	.word	0xfff101ff
 10212ec:	01fff101 	.word	0x01fff101
 10212f0:	f101fff1 	.word	0xf101fff1
 10212f4:	fff101ff 	.word	0xfff101ff
 10212f8:	01fff101 	.word	0x01fff101
 10212fc:	f101fff1 	.word	0xf101fff1
 1021300:	fff101ff 	.word	0xfff101ff
 1021304:	01fff101 	.word	0x01fff101
 1021308:	f101fff1 	.word	0xf101fff1
 102130c:	fff101ff 	.word	0xfff101ff
 1021310:	01fff101 	.word	0x01fff101
 1021314:	f101fff1 	.word	0xf101fff1
 1021318:	fff101ff 	.word	0xfff101ff
 102131c:	01fff101 	.word	0x01fff101
 1021320:	f101fff1 	.word	0xf101fff1
 1021324:	07100146 	.word	0x07100146
 1021328:	000006bd 	.word	0x000006bd
 102132c:	000005f2 	.word	0x000005f2
 1021330:	03100445 	.word	0x03100445
 1021334:	000004b2 	.word	0x000004b2
 1021338:	bd1f042f 	.word	0xbd1f042f
 102133c:	11900a03 	.word	0x11900a03
 1021340:	1120fc04 	.word	0x1120fc04
 1021344:	000002fc 	.word	0x000002fc
 1021348:	0000130a 	.word	0x0000130a
 102134c:	0000114b 	.word	0x0000114b
 1021350:	00000f92 	.word	0x00000f92
 1021354:	00000de3 	.word	0x00000de3
 1021358:	00000c55 	.word	0x00000c55
 102135c:	00000aeb 	.word	0x00000aeb
 1021360:	000009a6 	.word	0x000009a6
 1021364:	90060888 	.word	0x90060888
 1021368:	1258bb12 	.word	0x1258bb12
 102136c:	7912040c 	.word	0x7912040c
 1021370:	54fb1258 	.word	0x54fb1258
 1021374:	12048e12 	.word	0x12048e12
 1021378:	d512042b 	.word	0xd512042b
 102137c:	8851ff5c 	.word	0x8851ff5c
 1021380:	10904602 	.word	0x10904602
 1021384:	00211f08 	.word	0x00211f08
 1021388:	001d5b00 	.word	0x001d5b00
 102138c:	e81a0900 	.word	0xe81a0900
 1021390:	90da161e 	.word	0x90da161e
 1021394:	00140210 	.word	0x00140210
 1021398:	12d0e000 	.word	0x12d0e000
 102139c:	e543d0be 	.word	0xe543d0be
 10213a0:	2012800d 	.word	0x2012800d
 10213a4:	073f1324 	.word	0x073f1324
 10213a8:	3f034004 	.word	0x3f034004
 10213ac:	03330000 	.word	0x03330000
 10213b0:	ff031014 	.word	0xff031014
 10213b4:	1a546000 	.word	0x1a546000
 10213b8:	20031001 	.word	0x20031001
 10213bc:	44000020 	.word	0x44000020
 10213c0:	05034013 	.word	0x05034013
 10213c4:	550fd200 	.word	0x550fd200
 10213c8:	0f03601c 	.word	0x0f03601c
 10213cc:	001020f0 	.word	0x001020f0
 10213d0:	0cff120c 	.word	0x0cff120c
 10213d4:	756e4110 	.word	0x756e4110
 10213d8:	730a7396 	.word	0x730a7396
 10213dc:	72b272eb 	.word	0x72b272eb
 10213e0:	755e7433 	.word	0x755e7433
 10213e4:	769e75d7 	.word	0x769e75d7
 10213e8:	77c376a4 	.word	0x77c376a4
 10213ec:	78647851 	.word	0x78647851
 10213f0:	78ba78a0 	.word	0x78ba78a0
 10213f4:	79b67918 	.word	0x79b67918
 10213f8:	7acc79e9 	.word	0x7acc79e9
 10213fc:	7b307b06 	.word	0x7b307b06
 1021400:	7c1e7b27 	.word	0x7c1e7b27
 1021404:	7a767b96 	.word	0x7a767b96
 1021408:	7afd7b12 	.word	0x7afd7b12
 102140c:	7c5e7c40 	.word	0x7c5e7c40
 1021410:	7b8a7b48 	.word	0x7b8a7b48
 1021414:	7c427c64 	.word	0x7c427c64
 1021418:	fe0010cd 	.word	0xfe0010cd
 102141c:	7a037a5f 	.word	0x7a037a5f
 1021420:	7a1a7a9d 	.word	0x7a1a7a9d
 1021424:	79fc7a4a 	.word	0x79fc7a4a
 1021428:	7a0d7984 	.word	0x7a0d7984
 102142c:	792e79cc 	.word	0x792e79cc
 1021430:	7676780d 	.word	0x7676780d
 1021434:	747a75e4 	.word	0x747a75e4
 1021438:	707e7251 	.word	0x707e7251
 102143c:	6e306e96 	.word	0x6e306e96
 1021440:	6dbd6d44 	.word	0x6dbd6d44
 1021444:	6c3c6c9a 	.word	0x6c3c6c9a
 1021448:	6ca46cf8 	.word	0x6ca46cf8
 102144c:	6c596cdf 	.word	0x6c596cdf
 1021450:	6cb96b2c 	.word	0x6cb96b2c
 1021454:	6b6d6c1f 	.word	0x6b6d6c1f
 1021458:	6af06bf5 	.word	0x6af06bf5
 102145c:	69556a55 	.word	0x69556a55
 1021460:	6841674f 	.word	0x6841674f
 1021464:	670f685d 	.word	0x670f685d
 1021468:	69676904 	.word	0x69676904
 102146c:	6c316b01 	.word	0x6c316b01
 1021470:	6d826c2a 	.word	0x6d826c2a
 1021474:	6e626f58 	.word	0x6e626f58
 1021478:	6ee76f18 	.word	0x6ee76f18
 102147c:	717b7069 	.word	0x717b7069
 1021480:	71707120 	.word	0x71707120
 1021484:	749172fb 	.word	0x749172fb
 1021488:	75a275b3 	.word	0x75a275b3
 102148c:	784a7664 	.word	0x784a7664
 1021490:	7b517a52 	.word	0x7b517a52
 1021494:	7fff7d5a 	.word	0x7fff7d5a
 1021498:	7f2b7fff 	.word	0x7f2b7fff
 102149c:	7cd37e38 	.word	0x7cd37e38
 10214a0:	79727b38 	.word	0x79727b38
 10214a4:	765477d6 	.word	0x765477d6
 10214a8:	728874ae 	.word	0x728874ae
 10214ac:	6e9a70c0 	.word	0x6e9a70c0
 10214b0:	6b806d24 	.word	0x6b806d24
 10214b4:	68526a2f 	.word	0x68526a2f
 10214b8:	65da674e 	.word	0x65da674e
 10214bc:	637e652e 	.word	0x637e652e
 10214c0:	61426292 	.word	0x61426292
 10214c4:	5ff860cc 	.word	0x5ff860cc
 10214c8:	5ec25f6d 	.word	0x5ec25f6d
 10214cc:	5e555e6f 	.word	0x5e555e6f
 10214d0:	5e025e43 	.word	0x5e025e43
 10214d4:	5eb35e5b 	.word	0x5eb35e5b
 10214d8:	5fd75f4a 	.word	0x5fd75f4a
 10214dc:	60fc604c 	.word	0x60fc604c
 10214e0:	629761f3 	.word	0x629761f3
 10214e4:	643d63a9 	.word	0x643d63a9
 10214e8:	6634654a 	.word	0x6634654a
 10214ec:	6824675c 	.word	0x6824675c
 10214f0:	69a46910 	.word	0x69a46910
 10214f4:	6b6f6a73 	.word	0x6b6f6a73
 10214f8:	6ccd6c15 	.word	0x6ccd6c15
 10214fc:	6e4b6d64 	.word	0x6e4b6d64
 1021500:	6f446ed3 	.word	0x6f446ed3
 1021504:	70a16f85 	.word	0x70a16f85
 1021508:	71b270af 	.word	0x71b270af
 102150c:	71f37149 	.word	0x71f37149
 1021510:	72797203 	.word	0x72797203
 1021514:	72b471fb 	.word	0x72b471fb
 1021518:	72a47281 	.word	0x72a47281
 102151c:	72620b10 	.word	0x72620b10
 1021520:	729572bd 	.word	0x729572bd
 1021524:	729e72cc 	.word	0x729e72cc
 1021528:	18447288 	.word	0x18447288
 102152c:	6cb12cf0 	.word	0x6cb12cf0
 1021530:	b9723072 	.word	0xb9723072
 1021534:	4570d871 	.word	0x4570d871
 1021538:	8d705270 	.word	0x8d705270
 102153c:	b06f3d6f 	.word	0xb06f3d6f
 1021540:	766e6a6e 	.word	0x766e6a6e
 1021544:	7a6e1c6e 	.word	0x7a6e1c6e
 1021548:	506d846d 	.word	0x506d846d
 102154c:	f26d456d 	.word	0xf26d456d
 1021550:	926ca96c 	.word	0x926ca96c
 1021554:	696cba6c 	.word	0x696cba6c
 1021558:	026c276c 	.word	0x026c276c
 102155c:	0c6cc26c 	.word	0x0c6cc26c
 1021560:	00280051 	.word	0x00280051
 1021564:	01000080 	.word	0x01000080
 1021568:	00800100 	.word	0x00800100
 102156c:	035b0119 	.word	0x035b0119
	...

01021600 <atpl_bin_end>:
 1021600:	696e6f4d 	.word	0x696e6f4d
 1021604:	20726f74 	.word	0x20726f74
 1021608:	656d6974 	.word	0x656d6974
 102160c:	00000072 	.word	0x00000072
 1021610:	00505041 	.word	0x00505041

01021614 <spul_max_rms_hi>:
 1021614:	000006bd 000005f2 00000545 000004b2     ........E.......
 1021624:	0000042f 000003bd 00000357 000002fc     /.......W.......
 1021634:	0000030b 000002b2 00000265 00000220     ........e... ...
 1021644:	000001e4 000001af 0000017f 00000155     ............U...
 1021654:	000005dc 00000534 000004a0 0000041d     ....4...........
 1021664:	000003a9 00000342 000002e6 00000295     ....B...........
 1021674:	00000659 000005a7 0000050a 0000047e     Y...........~...
 1021684:	00000400 00000391 0000032f 000002d6     ......../.......
 1021694:	00000675 000005bf 0000051e 0000048f     u...............
 10216a4:	00000410 0000039e 00000339 000002e0     ........9.......
 10216b4:	0000068a 000005d1 0000052e 0000049f     ................
 10216c4:	0000041f 000003ac 00000346 000002eb     ........F.......
 10216d4:	0000061c 00000571 000004da 00000454     ....q.......T...
 10216e4:	000003dc 00000372 00000313 000002bf     ....r...........
 10216f4:	000004f4 0000046c 000003f2 00000386     ....l...........
 1021704:	00000325 000002cf 00000282 0000023d     %...........=...

01021714 <spul_max_rms_vlo>:
 1021714:	0000130a 0000114b 00000f92 00000de3     ....K...........
 1021724:	00000c55 00000aeb 000009a6 00000888     U...............
 1021734:	00000e0b 00000c88 00000b18 000009bd     ................
 1021744:	00000881 0000076f 00000682 000005b9     ....o...........
 1021754:	00000eaa 00000d1e 00000b9d 00000a33     ............3...
 1021764:	000008eb 000007d0 000006d9 00000608     ................
 1021774:	00000fac 00000e07 00000c6b 00000aeb     ........k.......
 1021784:	0000098c 00000858 00000752 00000670     ....X...R...p...
 1021794:	00000fe7 00000e47 00000cb4 00000b3b     ....G.......;...
 10217a4:	000009e1 000008b3 000007ae 000006ce     ................
 10217b4:	00000ffa 00000e64 00000cdd 00000b6f     ....d.......o...
 10217c4:	00000a1f 000008f9 000007f9 0000071b     ................
 10217d4:	000010b6 00000f14 00000d7f 00000c07     ................
 10217e4:	00000aaf 00000981 00000876 0000078f     ........v.......
 10217f4:	00001216 0000103e 00000e7d 00000ce1     ....>...}.......
 1021804:	00000b6b 00000a23 00000907 00000810     k...#...........

01021814 <spul_th_hi>:
	...
 1021834:	000005bb 0000050c 00000479 000003fb     ........y.......
 1021844:	0000038e 0000032b 000002d5 00000288     ....+...........
	...
 1021874:	00000295 0000024a 00000208 000001cd     ....J...........
 1021884:	0000019a 0000016d 00000145 00000122     ....m...E..."...
	...
 10218b4:	000004f5 00000467 000003ea 0000037c     ....g.......|...
 10218c4:	0000031a 000002c4 00000277 00000232     ........w...2...
	...
 10218f4:	0000055e 000004c8 00000441 000003cb     ^.......A.......
 1021904:	00000363 00000305 000002b2 00000267     c...........g...
	...
 1021934:	00000579 000004df 00000456 000003db     y.......V.......
 1021944:	00000371 00000310 000002bb 0000026f     q...........o...
	...
 1021974:	00000594 000004f7 0000046c 000003f0     ........l.......
 1021984:	00000383 00000321 000002ca 0000027c     ....!.......|...
	...
 10219b4:	00000530 000004a0 0000041f 000003ac     0...............
 10219c4:	00000348 000002ed 0000029c 00000253     H...........S...
	...
 10219f4:	00000431 000003be 00000357 000002fc     1.......W.......
 1021a04:	000002aa 00000262 00000220 000001e5     ....b... .......

01021a14 <spul_th_vlo>:
	...
 1021a34:	0000211f 00001d5b 00001a09 000016f2     .!..[...........
 1021a44:	00001448 000011e0 00000fbe 00000de5     H...............
	...
 1021a74:	000186a0 000186a0 000186a0 000186a0     ................
 1021a84:	000186a0 000186a0 000186a0 000186a0     ................
	...
 1021ab4:	000186a0 000186a0 000186a0 000186a0     ................
 1021ac4:	000186a0 000186a0 000186a0 000186a0     ................
	...
 1021af4:	000186a0 000186a0 000186a0 000186a0     ................
 1021b04:	000186a0 000186a0 000186a0 000186a0     ................
	...
 1021b34:	000186a0 000186a0 000186a0 000186a0     ................
 1021b44:	000186a0 000186a0 000186a0 000186a0     ................
	...
 1021b74:	000186a0 000186a0 000186a0 000186a0     ................
 1021b84:	000186a0 000186a0 000186a0 000186a0     ................
	...
 1021bb4:	000186a0 000186a0 000186a0 000186a0     ................
 1021bc4:	000186a0 000186a0 000186a0 000186a0     ................
	...
 1021bf4:	000186a0 000186a0 000186a0 000186a0     ................
 1021c04:	000186a0 000186a0 000186a0 000186a0     ................

01021c14 <spus_gain_hi_chn_1>:
 1021c14:	00280051 00000080                       Q.(.....

01021c1c <spus_gain_vlo_chn_1>:
 1021c1c:	00800100 00000119                       ........

01021c24 <spus_gain_hi_chn_2_8>:
 1021c24:	003c0078 00000100                       x.<.....

01021c2c <spus_gain_vlo_chn_2_8>:
 1021c2c:	00800100 00000100                       ........

01021c34 <spus_equ_hi_chn_1>:
 1021c34:	7396756e 72eb730a 743372b2 75d7755e     nu.s.s.r.r3t^u.u
 1021c44:	76a4769e 785177c3 78a07864 791878ba     .v.v.wQxdx.x.x.y
 1021c54:	79e979b6 7b067acc 7b277b30 7b967c1e     .y.y.z.{0{'{.|.{
 1021c64:	7b127a76 7c407afd 7b487c5e 7c647b8a     vz.{.z@|^|H{.{d|
 1021c74:	7bcd7c42 7a5f7afd 7a9d7a03 7a4a7a1a     B|.{.z_z.z.z.zJz
 1021c84:	798479fc 79cc7a0d 780d792e 75e47676     .y.y.z.y.y.xvv.u
 1021c94:	7251747a 6e96707e 6d446e30 6c9a6dbd     ztQr~p.n0nDm.m.l
 1021ca4:	6cf86c3c 6cdf6ca4 6b2c6c59 6c1f6cb9     <l.l.l.lYl,k.l.l
 1021cb4:	6bf56b6d 6a556af0 674f6955 685d6841     mk.k.jUjUiOgAh]h
 1021cc4:	6904670f 6b016967 6c2a6c31 6f586d82     .g.igi.k1l*l.mXo
 1021cd4:	6f186e62 70696ee7 7120717b 72fb7170     bn.o.nip{q qpq.r
 1021ce4:	75b37491 766475a2 7a52784a 7d5a7b51     .t.u.udvJxRzQ{Z}
 1021cf4:	00007fff                                ....

01021cf8 <spus_equ_vlo_chn_1>:
 1021cf8:	7f2b7fff 7cd37e38 79727b38 765477d6     ..+.8~.|8{ry.wTv
 1021d08:	728874ae 6e9a70c0 6b806d24 68526a2f     .t.r.p.n$m.k/jRh
 1021d18:	65da674e 637e652e 61426292 5ff860cc     Ng.e.e~c.bBa.`._
 1021d28:	5ec25f6d 5e555e6f 5e025e43 5eb35e5b     m_.^o^U^C^.^[^.^
 1021d38:	5fd75f4a 60fc604c 629761f3 643d63a9     J_._L`.`.a.b.c=d
 1021d48:	6634654a 6824675c 69a46910 6b6f6a73     Je4f\g$h.i.isjok
 1021d58:	6ccd6c15 6e4b6d64 6f446ed3 70a16f85     .l.ldmKn.nDo.o.p
 1021d68:	71b270af 71f37149 72797203 72b471fb     .p.qIq.q.ryr.q.r
 1021d78:	72a47281 72bd7262 72cc7295 7288729e     .r.rbr.r.r.r.r.r
 1021d88:	72797244 7230726c 70d871b9 70527045     Dryrlr0r.q.pEpRp
 1021d98:	6f3d6f8d 6e6a6eb0 6e1c6e76 6d846d7a     .o=o.njnvn.nzm.m
 1021da8:	6d456d50 6ca96cf2 6cba6c92 6c276c69     PmEm.l.l.l.lil'l
 1021db8:	00006c02                                .l..

01021dbc <spus_equ_hi_chn_2_8>:
 1021dbc:	7fff7fff 7fff7fff 7fff7fff 7fff7fff     ................
 1021dcc:	7fff7fff 7fff7fff 7fff7fff 7fff7fff     ................
 1021ddc:	7fff7fff 7fff7fff 7fff7fff 7fff7fff     ................
 1021dec:	7fff7fff 7fff7fff 7fff7fff 7fff7fff     ................
 1021dfc:	7fff7fff 7fff7fff 7fff7fff 7fff7fff     ................
 1021e0c:	7fff7fff 7fff7fff 7fff7fff 7fff7fff     ................
 1021e1c:	7fff7fff 7fff7fff 7fff7fff 7fff7fff     ................
 1021e2c:	7fff7fff 7fff7fff 7fff7fff 7fff7fff     ................
 1021e3c:	7fff7fff 7fff7fff 7fff7fff 7fff7fff     ................
 1021e4c:	7fff7fff 7fff7fff 7fff7fff 7fff7fff     ................
 1021e5c:	7fff7fff 7fff7fff 7fff7fff 7fff7fff     ................
 1021e6c:	7fff7fff 7fff7fff 7fff7fff 7fff7fff     ................
 1021e7c:	00007fff                                ....

01021e80 <spus_equ_vlo_chn_2_8>:
 1021e80:	7fff7fff 7fff7fff 7fff7fff 7fff7fff     ................
 1021e90:	7fff7fff 7fff7fff 7fff7fff 7fff7fff     ................
 1021ea0:	7fff7fff 7fff7fff 7fff7fff 7fff7fff     ................
 1021eb0:	7fff7fff 7fff7fff 7fff7fff 7fff7fff     ................
 1021ec0:	7fff7fff 7fff7fff 7fff7fff 7fff7fff     ................
 1021ed0:	7fff7fff 7fff7fff 7fff7fff 7fff7fff     ................
 1021ee0:	7fff7fff 7fff7fff 7fff7fff 7fff7fff     ................
 1021ef0:	7fff7fff 7fff7fff 7fff7fff 7fff7fff     ................
 1021f00:	7fff7fff 7fff7fff 7fff7fff 7fff7fff     ................
 1021f10:	7fff7fff 7fff7fff 7fff7fff 7fff7fff     ................
 1021f20:	7fff7fff 7fff7fff 7fff7fff 7fff7fff     ................
 1021f30:	7fff7fff 7fff7fff 7fff7fff 7fff7fff     ................
 1021f40:	00007fff                                ....

01021f44 <spul_dacc_cfg_chn_1>:
 1021f44:	00000000 00002120 0000073f 00003f3f     .... !..?...??..
 1021f54:	00000333 00000000 546000ff 1a1a1a1a     3.........`T....
 1021f64:	00002020 00000044 0fd20005 00000355       ..D.......U...
 1021f74:	0f000000 001020f0 00000355 0f000000     ..... ..U.......
 1021f84:	001020ff                                . ..

01021f88 <spul_dacc_cfg_chn_2_8>:
 1021f88:	00000000 21202120 073f073f 3f3f3f3f     .... ! !?.?.????
 1021f98:	00000fff 00000000 a8c000ff 1b1b1b1b     ................
 1021fa8:	10101010 00001111 04380006 000003aa     ..........8.....
 1021fb8:	f0000000 001020ff 000003aa f0000000     ..... ..........
 1021fc8:	001020ff 36334c50 6e452030 656c6261     . ..PL360 Enable
 1021fd8:	2e2e2e64 0000000a 4c505441 20303633     d.......ATPL360 
 1021fe8:	65637845 6f697470 6f63206e 65206564     Exception code e
 1021ff8:	726f7272 7525203a 0000000a 6e69616d     rror: %u....main
 1022008:	7461203a 36336c70 6e655f30 656c6261     : atpl360_enable
 1022018:	6c616320 7265206c 21726f72 64252820      call error! (%d
 1022028:	00000a29 00594850 6277656e 3d206675     )...PHY.newbuf =
 1022038:	61657220 636f6c6c 6c657328 613e2d66      realloc(self->a
 1022048:	636f6c6c 6675625f 6973202c 0029657a     lloc_buf, size).
 1022058:	4f525245 00000052 382d255b 65205d73     ERROR...[%-8s] e
 1022068:	70656378 6e6f6974 206e6920 72707865     xception in expr
 1022078:	69737365 60206e6f 0a277325 00000000     ession `%s'.....
 1022088:	657a6973 36203c20 36333535 00000000     size < 65536....
 1022098:	20706d74 6572203d 6f6c6c61 6c612863     tmp = realloc(al
 10220a8:	2c636f6c 7a697320 202b2065 00293032     loc, size + 20).
 10220b8:	70697073 6166695f 775f6563 65746972     spip_iface_write
 10220c8:	61666928 202c6563 6f6c6c61 00002963     (iface, alloc)..
 10220d8:	2078646e 30203d3e 20262620 2078646e     ndx >= 0 && ndx 
 10220e8:	3031203c 00000000 4f525245 00000052     < 10....ERROR...
 10220f8:	382d255b 65205d73 70656378 6e6f6974     [%-8s] exception
 1022108:	206e6920 72707865 69737365 60206e6f      in expression `
 1022118:	0a277325 00000000 3c203128 646e203c     %s'.....(1 << nd
 1022128:	26202978 745f6720 72665f78 5f656d61     x) & g_tx_frame_
 1022138:	6b73616d 00000000 78745f67 6172665f     mask....g_tx_fra
 1022148:	735f656d 3d206d65 75517820 43657565     me_sem = xQueueC
 1022158:	74616572 74754d65 20287865 55312028     reateMutex( ( 1U
 1022168:	29202920 00000000 657a6973 203d3c20      ) )....size <= 
 1022178:	30323031 00000000 2067736d 7874203d     1020....msg = tx
 1022188:	6172665f 745f656d 28656b61 00000029     _frame_take()...
 1022198:	65755178 65476575 6972656e 6e655363     xQueueGenericSen
 10221a8:	28202864 73617420 683e2d6b 5f78745f     d( ( task->h_tx_
 10221b8:	75657571 2c292065 26202820 2067736d     queue ), ( &msg 
 10221c8:	28202c29 29203020 2028202c 20292030     ), ( 0 ), ( 0 ) 
 10221d8:	3d3d2029 31202820 00002920 6b736174     ) == ( 1 )..task
 10221e8:	5f683e2d 715f7874 65756575 78203d20     ->h_tx_queue = x
 10221f8:	75657551 6e654765 63697265 61657243     QueueGenericCrea
 1022208:	20286574 202c3031 657a6973 2820666f     te( 10, sizeof (
 1022218:	75727473 74207463 72665f78 20656d61     struct tx_frame 
 1022228:	202c292a 55302028 29202920 00000000     *), ( 0U ) )....
 1022238:	61547854 00006b73 73615478 6e65476b     TxTask..xTaskGen
 1022248:	63697265 61657243 20286574 78742028     ericCreate( ( tx
 1022258:	7361745f 75665f6b 2920636e 2028202c     _task_func ), ( 
 1022268:	6e6f6328 73207473 656e6769 68632064     (const signed ch
 1022278:	2a207261 736e6f63 22202974 61547854     ar *const) "TxTa
 1022288:	20226b73 28202c29 28282820 69736e75     sk" ), ( (((unsi
 1022298:	64656e67 6f687320 31297472 20293033     gned short)130) 
 10222a8:	2935202a 202c2920 61742028 29206b73     * 5) ), ( task )
 10222b8:	2028202c 28202828 736e7520 656e6769     , ( (( ( unsigne
 10222c8:	6f6c2064 2920676e 20553020 202b2029     d long ) 0U ) + 
 10222d8:	29202931 2028202c 73617426 683e2d6b     1) ), ( &task->h
 10222e8:	5f78745f 6b736174 202c2920 28282028     _tx_task ), ( ((
 10222f8:	64696f76 30292a20 2c292029 28202820     void *)0) ), ( (
 1022308:	696f7628 292a2064 29202930 3d202920     (void *)0) ) ) =
 1022318:	2028203d 00292031                       = ( 1 ).

01022320 <_global_impure_ptr>:
 1022320:	200005f0 00000043 49534f50 00000058     ... C...POSIX...
 1022330:	0000002e 33323130 37363534 42413938     ....0123456789AB
 1022340:	46454443 00000000 33323130 37363534     CDEF....01234567
 1022350:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
 1022360:	0000296c                                l)..

01022364 <blanks.7217>:
 1022364:	20202020 20202020 20202020 20202020                     

01022374 <zeroes.7218>:
 1022374:	30303030 30303030 30303030 30303030     0000000000000000
 1022384:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
 1022394:	00000030                                0...

01022398 <blanks.7238>:
 1022398:	20202020 20202020 20202020 20202020                     

010223a8 <zeroes.7239>:
 10223a8:	30303030 30303030 30303030 30303030     0000000000000000

010223b8 <_ctype_>:
 10223b8:	20202000 20202020 28282020 20282828     .         ((((( 
 10223c8:	20202020 20202020 20202020 20202020                     
 10223d8:	10108820 10101010 10101010 10101010      ...............
 10223e8:	04040410 04040404 10040404 10101010     ................
 10223f8:	41411010 41414141 01010101 01010101     ..AAAAAA........
 1022408:	01010101 01010101 01010101 10101010     ................
 1022418:	42421010 42424242 02020202 02020202     ..BBBBBB........
 1022428:	02020202 02020202 02020202 10101010     ................
 1022438:	00000020 00000000 00000000 00000000      ...............
	...
 10224bc:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
 10224cc:	00000000                                ....

010224d0 <__mprec_bigtens>:
 10224d0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 10224e0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 10224f0:	7f73bf3c 75154fdd                       <.s..O.u

010224f8 <__mprec_tens>:
 10224f8:	00000000 3ff00000 00000000 40240000     .......?......$@
 1022508:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 1022518:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 1022528:	00000000 412e8480 00000000 416312d0     .......A......cA
 1022538:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 1022548:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 1022558:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 1022568:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 1022578:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 1022588:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 1022598:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 10225a8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 10225b8:	79d99db4 44ea7843                       ...yCx.D

010225c0 <p05.6055>:
 10225c0:	00000005 00000019 0000007d              ........}...

010225cc <_init>:
 10225cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 10225ce:	bf00      	nop
 10225d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 10225d2:	bc08      	pop	{r3}
 10225d4:	469e      	mov	lr, r3
 10225d6:	4770      	bx	lr

010225d8 <__init_array_start>:
 10225d8:	0100f115 	.word	0x0100f115

010225dc <__frame_dummy_init_array_entry>:
 10225dc:	0100016d                                m...

010225e0 <_fini>:
 10225e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 10225e2:	bf00      	nop
 10225e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 10225e6:	bc08      	pop	{r3}
 10225e8:	469e      	mov	lr, r3
 10225ea:	4770      	bx	lr

010225ec <__fini_array_start>:
 10225ec:	01000149 	.word	0x01000149

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr

2000000a <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
2000000a:	b480      	push	{r7}
2000000c:	b089      	sub	sp, #36	; 0x24
2000000e:	af00      	add	r7, sp, #0
20000010:	60f8      	str	r0, [r7, #12]
20000012:	60b9      	str	r1, [r7, #8]
20000014:	607a      	str	r2, [r7, #4]
20000016:	603b      	str	r3, [r7, #0]
	uint32_t *p_ul_data =
			(uint32_t *) ((p_efc == EFC0) ?
			READ_BUFF_ADDR0 : READ_BUFF_ADDR1);
#elif (SAM3S || SAM4S || SAM3N || SAM3U || SAM4E || SAM4N || SAM4C || SAMG || \
	   SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAMS70 || SAME70)
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
20000018:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2000001c:	61bb      	str	r3, [r7, #24]
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
2000001e:	683b      	ldr	r3, [r7, #0]
20000020:	2b00      	cmp	r3, #0
20000022:	d101      	bne.n	20000028 <efc_perform_read_sequence+0x1e>
		return EFC_RC_INVALID;
20000024:	2302      	movs	r3, #2
20000026:	e03c      	b.n	200000a2 <efc_perform_read_sequence+0x98>
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
20000028:	68fb      	ldr	r3, [r7, #12]
2000002a:	681b      	ldr	r3, [r3, #0]
2000002c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
20000030:	68fb      	ldr	r3, [r7, #12]
20000032:	601a      	str	r2, [r3, #0]

	/* Send the Start Read command */
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
20000034:	68bb      	ldr	r3, [r7, #8]
20000036:	b2db      	uxtb	r3, r3
20000038:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
2000003c:	68fb      	ldr	r3, [r7, #12]
2000003e:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000040:	68fb      	ldr	r3, [r7, #12]
20000042:	689b      	ldr	r3, [r3, #8]
20000044:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
20000046:	697b      	ldr	r3, [r7, #20]
20000048:	f003 0301 	and.w	r3, r3, #1
2000004c:	2b01      	cmp	r3, #1
2000004e:	d0f7      	beq.n	20000040 <efc_perform_read_sequence+0x36>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000050:	2300      	movs	r3, #0
20000052:	61fb      	str	r3, [r7, #28]
20000054:	e00c      	b.n	20000070 <efc_perform_read_sequence+0x66>
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
20000056:	69fb      	ldr	r3, [r7, #28]
20000058:	009b      	lsls	r3, r3, #2
2000005a:	683a      	ldr	r2, [r7, #0]
2000005c:	4413      	add	r3, r2
2000005e:	69fa      	ldr	r2, [r7, #28]
20000060:	0092      	lsls	r2, r2, #2
20000062:	69b9      	ldr	r1, [r7, #24]
20000064:	440a      	add	r2, r1
20000066:	6812      	ldr	r2, [r2, #0]
20000068:	601a      	str	r2, [r3, #0]
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
2000006a:	69fb      	ldr	r3, [r7, #28]
2000006c:	3301      	adds	r3, #1
2000006e:	61fb      	str	r3, [r7, #28]
20000070:	69fa      	ldr	r2, [r7, #28]
20000072:	6abb      	ldr	r3, [r7, #40]	; 0x28
20000074:	429a      	cmp	r2, r3
20000076:	d3ee      	bcc.n	20000056 <efc_perform_read_sequence+0x4c>
	/* To stop the read mode */
	p_efc->EEFC_FCR =
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
20000078:	687b      	ldr	r3, [r7, #4]
2000007a:	b2db      	uxtb	r3, r3
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
2000007c:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
20000080:	68fb      	ldr	r3, [r7, #12]
20000082:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000084:	68fb      	ldr	r3, [r7, #12]
20000086:	689b      	ldr	r3, [r3, #8]
20000088:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
2000008a:	697b      	ldr	r3, [r7, #20]
2000008c:	f003 0301 	and.w	r3, r3, #1
20000090:	2b01      	cmp	r3, #1
20000092:	d1f7      	bne.n	20000084 <efc_perform_read_sequence+0x7a>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
20000094:	68fb      	ldr	r3, [r7, #12]
20000096:	681b      	ldr	r3, [r3, #0]
20000098:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
2000009c:	68fb      	ldr	r3, [r7, #12]
2000009e:	601a      	str	r2, [r3, #0]

	return EFC_RC_OK;
200000a0:	2300      	movs	r3, #0
}
200000a2:	4618      	mov	r0, r3
200000a4:	3724      	adds	r7, #36	; 0x24
200000a6:	46bd      	mov	sp, r7
200000a8:	bc80      	pop	{r7}
200000aa:	4770      	bx	lr

200000ac <efc_write_fmr>:
 * \param ul_fmr Value of mode register
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
200000ac:	b480      	push	{r7}
200000ae:	b083      	sub	sp, #12
200000b0:	af00      	add	r7, sp, #0
200000b2:	6078      	str	r0, [r7, #4]
200000b4:	6039      	str	r1, [r7, #0]
	p_efc->EEFC_FMR = ul_fmr;
200000b6:	687b      	ldr	r3, [r7, #4]
200000b8:	683a      	ldr	r2, [r7, #0]
200000ba:	601a      	str	r2, [r3, #0]
}
200000bc:	bf00      	nop
200000be:	370c      	adds	r7, #12
200000c0:	46bd      	mov	sp, r7
200000c2:	bc80      	pop	{r7}
200000c4:	4770      	bx	lr

200000c6 <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
200000c6:	b480      	push	{r7}
200000c8:	b085      	sub	sp, #20
200000ca:	af00      	add	r7, sp, #0
200000cc:	6078      	str	r0, [r7, #4]
200000ce:	6039      	str	r1, [r7, #0]
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
200000d0:	687b      	ldr	r3, [r7, #4]
200000d2:	683a      	ldr	r2, [r7, #0]
200000d4:	605a      	str	r2, [r3, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
200000d6:	687b      	ldr	r3, [r7, #4]
200000d8:	689b      	ldr	r3, [r3, #8]
200000da:	60fb      	str	r3, [r7, #12]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
200000dc:	68fb      	ldr	r3, [r7, #12]
200000de:	f003 0301 	and.w	r3, r3, #1
200000e2:	2b01      	cmp	r3, #1
200000e4:	d1f7      	bne.n	200000d6 <efc_perform_fcr+0x10>

	return (ul_status & EEFC_ERROR_FLAGS);
200000e6:	68fb      	ldr	r3, [r7, #12]
200000e8:	f003 030e 	and.w	r3, r3, #14
}
200000ec:	4618      	mov	r0, r3
200000ee:	3714      	adds	r7, #20
200000f0:	46bd      	mov	sp, r7
200000f2:	bc80      	pop	{r7}
200000f4:	4770      	bx	lr
	...

200000f8 <udi_api_cdc_comm>:
200000f8:	26f9 0100 294d 0100 29a9 0100 2a97 0100     .&..M)...)...*..
20000108:	0000 0000                                   ....

2000010c <udi_api_cdc_data>:
2000010c:	2859 0100 296d 0100 2a89 0100 2a97 0100     Y(..m)...*...*..
2000011c:	2aa5 0100                                   .*..

20000120 <udc_device_desc>:
20000120:	0112 0200 0002 4000 03eb 2404 0100 0201     .......@...$....
20000130:	0103 0000                                   ....

20000134 <udc_desc_fs>:
20000134:	0209 0043 0102 c000 09fa 0004 0100 0202     ..C.............
20000144:	0001 2405 1000 0401 0224 0502 0624 0100     ...$....$...$...
20000154:	2405 0301 0701 8305 4003 1000 0409 0001     .$.......@......
20000164:	0a02 0000 0700 8105 4002 0000 0507 0202     .........@......
20000174:	0040 0000                                   @...

20000178 <udi_apis>:
20000178:	00f8 2000 010c 2000                         ... ... 

20000180 <udc_config_fs>:
20000180:	0134 2000 0178 2000                         4.. x.. 

20000188 <udc_config>:
20000188:	0120 2000 0180 2000 0000 0000                .. ... ....

20000194 <udc_string_desc_languageid>:
20000194:	0304 0409                                   ....

20000198 <udc_string_manufacturer_name>:
20000198:	5441 454d 204c 5341 0046 0000               ATMEL ASF...

200001a4 <udc_string_product_name>:
200001a4:	4443 2043 6956 7472 6175 206c 6f43 006d     CDC Virtual Com.

200001b4 <udc_string_desc>:
200001b4:	0300 0000 0000 0000 0000 0000 0000 0000     ................
	...

200001d4 <g_interrupt_enabled>:
200001d4:	0001 0000                                   ....

200001d8 <SystemCoreClock>:
200001d8:	1200 007a                                   ..z.

200001dc <uxCriticalNesting>:
200001dc:	aaaa aaaa                                   ....

200001e0 <xFreeBytesRemaining>:
200001e0:	2ee0 0000                                   ....

200001e4 <xNextTaskUnblockTime>:
200001e4:	ffff ffff                                   ....

200001e8 <gs_ul_plc_clock>:
200001e8:	1200 007a                                   ..z.

200001ec <crc_table>:
200001ec:	0000 0000 1db7 04c1 3b6e 0982 26d9 0d43     ........n;...&C.
200001fc:	76dc 1304 6b6b 17c5 4db2 1a86 5005 1e47     .v..kk...M...PG.
2000020c:	edb8 2608 f00f 22c9 d6d6 2f8a cb61 2b4b     ...&...".../a.K+
2000021c:	9b64 350c 86d3 31cd a00a 3c8e bdbd 384f     d..5...1...<..O8
2000022c:	db70 4c11 c6c7 48d0 e01e 4593 fda9 4152     p..L...H...E..RA
2000023c:	adac 5f15 b01b 5bd4 96c2 5697 8b75 5256     ..._...[...Vu.VR
2000024c:	36c8 6a19 2b7f 6ed8 0da6 639b 1011 675a     .6.j.+.n...c..Zg
2000025c:	4014 791d 5da3 7ddc 7b7a 709f 66cd 745e     .@.y.].}z{.p.f^t
2000026c:	b6e0 9823 ab57 9ce2 8d8e 91a1 9039 9560     ..#.W.......9.`.
2000027c:	c03c 8b27 dd8b 8fe6 fb52 82a5 e6e5 8664     <.'.....R.....d.
2000028c:	5b58 be2b 46ef baea 6036 b7a9 7d81 b368     X[+..F..6`...}h.
2000029c:	2d84 ad2f 3033 a9ee 16ea a4ad 0b5d a06c     .-/.30......].l.
200002ac:	6d90 d432 7027 d0f3 56fe ddb0 4b49 d971     .m2.'p...V..IKq.
200002bc:	1b4c c736 06fb c3f7 2022 ceb4 3d95 ca75     L.6....." ...=u.
200002cc:	8028 f23a 9d9f f6fb bb46 fbb8 a6f1 ff79     (.:.....F.....y.
200002dc:	f6f4 e13e eb43 e5ff cd9a e8bc d02d ec7d     ..>.C.......-.}.
200002ec:	7077 3486 6dc0 3047 4b19 3d04 56ae 39c5     wp.4.mG0.K.=.V.9
200002fc:	06ab 2782 1b1c 2343 3dc5 2e00 2072 2ac1     ...'..C#.=..r .*
2000030c:	9dcf 128e 8078 164f a6a1 1b0c bb16 1fcd     ....x.O.........
2000031c:	eb13 018a f6a4 054b d07d 0808 cdca 0cc9     ......K.}.......
2000032c:	ab07 7897 b6b0 7c56 9069 7115 8dde 75d4     ...x..V|i..q...u
2000033c:	dddb 6b93 c06c 6f52 e6b5 6211 fb02 66d0     ...kl.Ro...b...f
2000034c:	46bf 5e9f 5b08 5a5e 7dd1 571d 6066 53dc     .F.^.[^Z.}.Wf`.S
2000035c:	3063 4d9b 2dd4 495a 0b0d 4419 16ba 40d8     c0.M.-ZI...D...@
2000036c:	c697 aca5 db20 a864 fdf9 a527 e04e a1e6     .... .d...'.N...
2000037c:	b04b bfa1 adfc bb60 8b25 b623 9692 b2e2     K.....`.%.#.....
2000038c:	2b2f 8aad 3698 8e6c 1041 832f 0df6 87ee     /+...6l.A./.....
2000039c:	5df3 99a9 4044 9d68 669d 902b 7b2a 94ea     .]..D@h..f+.*{..
200003ac:	1de7 e0b4 0050 e475 2689 e936 3b3e edf7     ....P.u..&6.>;..
200003bc:	6b3b f3b0 768c f771 5055 fa32 4de2 fef3     ;k...vq.UP2..M..
200003cc:	f05f c6bc ede8 c27d cb31 cf3e d686 cbff     _.....}.1.>.....
200003dc:	8683 d5b8 9b34 d179 bded dc3a a05a d8fb     ....4.y...:.Z...
200003ec:	e0ee 690c fd59 6dcd db80 608e c637 644f     ...iY..m...`7.Od
200003fc:	9632 7a08 8b85 7ec9 ad5c 738a b0eb 774b     2..z...~\..s..Kw
2000040c:	0d56 4f04 10e1 4bc5 3638 4686 2b8f 4247     V..O...K86.F.+GB
2000041c:	7b8a 5c00 663d 58c1 40e4 5582 5d53 5143     .{.\=f.X.@.US]CQ
2000042c:	3b9e 251d 2629 21dc 00f0 2c9f 1d47 285e     .;.%)&.!...,G.^(
2000043c:	4d42 3619 50f5 32d8 762c 3f9b 6b9b 3b5a     BM.6.P.2,v.?.kZ;
2000044c:	d626 0315 cb91 07d4 ed48 0a97 f0ff 0e56     &.......H.....V.
2000045c:	a0fa 1011 bd4d 14d0 9b94 1993 8623 1d52     ....M.......#.R.
2000046c:	560e f12f 4bb9 f5ee 6d60 f8ad 70d7 fc6c     .V/..K..`m...pl.
2000047c:	20d2 e22b 3d65 e6ea 1bbc eba9 060b ef68     . +.e=........h.
2000048c:	bbb6 d727 a601 d3e6 80d8 dea5 9d6f da64     ..'.........o.d.
2000049c:	cd6a c423 d0dd c0e2 f604 cda1 ebb3 c960     j.#...........`.
200004ac:	8d7e bd3e 90c9 b9ff b610 b4bc aba7 b07d     ~.>...........}.
200004bc:	fba2 ae3a e615 aafb c0cc a7b8 dd7b a379     ..:.........{.y.
200004cc:	60c6 9b36 7d71 9ff7 5ba8 92b4 461f 9675     .`6.q}...[...Fu.
200004dc:	161a 8832 0bad 8cf3 2d74 81b0 30c3 8571     ..2.....t-...0q.
200004ec:	9099 5d8a 8d2e 594b abf7 5408 b640 50c9     ...]..KY...T@..P
200004fc:	e645 4e8e fbf2 4a4f dd2b 470c c09c 43cd     E..N..OJ+..G...C
2000050c:	7d21 7b82 6096 7f43 464f 7200 5bf8 76c1     !}.{.`C.OF.r.[.v
2000051c:	0bfd 6886 164a 6c47 3093 6104 2d24 65c5     ...hJ.Gl.0.a$-.e
2000052c:	4be9 119b 565e 155a 7087 1819 6d30 1cd8     .K..^VZ..p..0m..
2000053c:	3d35 029f 2082 065e 065b 0b1d 1bec 0fdc     5=... ^.[.......
2000054c:	a651 3793 bbe6 3352 9d3f 3e11 8088 3ad0     Q..7..R3?..>...:
2000055c:	d08d 2497 cd3a 2056 ebe3 2d15 f654 29d4     ...$:.V ...-T..)
2000056c:	2679 c5a9 3bce c168 1d17 cc2b 00a0 c8ea     y&...;h...+.....
2000057c:	50a5 d6ad 4d12 d26c 6bcb df2f 767c dbee     .P...Ml..k/.|v..
2000058c:	cbc1 e3a1 d676 e760 f0af ea23 ed18 eee2     ....v.`...#.....
2000059c:	bd1d f0a5 a0aa f464 8673 f927 9bc4 fde6     ......d.s.'.....
200005ac:	fd09 89b8 e0be 8d79 c667 803a dbd0 84fb     ......y.g.:.....
200005bc:	8bd5 9abc 9662 9e7d b0bb 933e ad0c 97ff     ....b.}...>.....
200005cc:	10b1 afb0 0d06 ab71 2bdf a632 3668 a2f3     ......q..+2.h6..
200005dc:	666d bcb4 7bda b875 5d03 b536 40b4 b1f7     mf...{u..]6..@..

200005ec <_impure_ptr>:
200005ec:	05f0 2000                                   ... 

200005f0 <impure_data>:
200005f0:	0000 0000 08dc 2000 0944 2000 09ac 2000     ....... D.. ... 
	...
20000698:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200006a8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000a18 <__global_locale>:
20000a18:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000a38:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000a58:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000a78:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000a98:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000ab8:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000ad8:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000af8:	f005 0100 c479 0100 0000 0000 23b8 0102     ....y........#..
20000b08:	2330 0102 2344 0102 2344 0102 2344 0102     0#..D#..D#..D#..
20000b18:	2344 0102 2344 0102 2344 0102 2344 0102     D#..D#..D#..D#..
20000b28:	2344 0102 2344 0102 ffff ffff ffff ffff     D#..D#..........
20000b38:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
20000b60:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

20000b84 <__malloc_av_>:
	...
20000b8c:	0b84 2000 0b84 2000 0b8c 2000 0b8c 2000     ... ... ... ... 
20000b9c:	0b94 2000 0b94 2000 0b9c 2000 0b9c 2000     ... ... ... ... 
20000bac:	0ba4 2000 0ba4 2000 0bac 2000 0bac 2000     ... ... ... ... 
20000bbc:	0bb4 2000 0bb4 2000 0bbc 2000 0bbc 2000     ... ... ... ... 
20000bcc:	0bc4 2000 0bc4 2000 0bcc 2000 0bcc 2000     ... ... ... ... 
20000bdc:	0bd4 2000 0bd4 2000 0bdc 2000 0bdc 2000     ... ... ... ... 
20000bec:	0be4 2000 0be4 2000 0bec 2000 0bec 2000     ... ... ... ... 
20000bfc:	0bf4 2000 0bf4 2000 0bfc 2000 0bfc 2000     ... ... ... ... 
20000c0c:	0c04 2000 0c04 2000 0c0c 2000 0c0c 2000     ... ... ... ... 
20000c1c:	0c14 2000 0c14 2000 0c1c 2000 0c1c 2000     ... ... ... ... 
20000c2c:	0c24 2000 0c24 2000 0c2c 2000 0c2c 2000     $.. $.. ,.. ,.. 
20000c3c:	0c34 2000 0c34 2000 0c3c 2000 0c3c 2000     4.. 4.. <.. <.. 
20000c4c:	0c44 2000 0c44 2000 0c4c 2000 0c4c 2000     D.. D.. L.. L.. 
20000c5c:	0c54 2000 0c54 2000 0c5c 2000 0c5c 2000     T.. T.. \.. \.. 
20000c6c:	0c64 2000 0c64 2000 0c6c 2000 0c6c 2000     d.. d.. l.. l.. 
20000c7c:	0c74 2000 0c74 2000 0c7c 2000 0c7c 2000     t.. t.. |.. |.. 
20000c8c:	0c84 2000 0c84 2000 0c8c 2000 0c8c 2000     ... ... ... ... 
20000c9c:	0c94 2000 0c94 2000 0c9c 2000 0c9c 2000     ... ... ... ... 
20000cac:	0ca4 2000 0ca4 2000 0cac 2000 0cac 2000     ... ... ... ... 
20000cbc:	0cb4 2000 0cb4 2000 0cbc 2000 0cbc 2000     ... ... ... ... 
20000ccc:	0cc4 2000 0cc4 2000 0ccc 2000 0ccc 2000     ... ... ... ... 
20000cdc:	0cd4 2000 0cd4 2000 0cdc 2000 0cdc 2000     ... ... ... ... 
20000cec:	0ce4 2000 0ce4 2000 0cec 2000 0cec 2000     ... ... ... ... 
20000cfc:	0cf4 2000 0cf4 2000 0cfc 2000 0cfc 2000     ... ... ... ... 
20000d0c:	0d04 2000 0d04 2000 0d0c 2000 0d0c 2000     ... ... ... ... 
20000d1c:	0d14 2000 0d14 2000 0d1c 2000 0d1c 2000     ... ... ... ... 
20000d2c:	0d24 2000 0d24 2000 0d2c 2000 0d2c 2000     $.. $.. ,.. ,.. 
20000d3c:	0d34 2000 0d34 2000 0d3c 2000 0d3c 2000     4.. 4.. <.. <.. 
20000d4c:	0d44 2000 0d44 2000 0d4c 2000 0d4c 2000     D.. D.. L.. L.. 
20000d5c:	0d54 2000 0d54 2000 0d5c 2000 0d5c 2000     T.. T.. \.. \.. 
20000d6c:	0d64 2000 0d64 2000 0d6c 2000 0d6c 2000     d.. d.. l.. l.. 
20000d7c:	0d74 2000 0d74 2000 0d7c 2000 0d7c 2000     t.. t.. |.. |.. 
20000d8c:	0d84 2000 0d84 2000 0d8c 2000 0d8c 2000     ... ... ... ... 
20000d9c:	0d94 2000 0d94 2000 0d9c 2000 0d9c 2000     ... ... ... ... 
20000dac:	0da4 2000 0da4 2000 0dac 2000 0dac 2000     ... ... ... ... 
20000dbc:	0db4 2000 0db4 2000 0dbc 2000 0dbc 2000     ... ... ... ... 
20000dcc:	0dc4 2000 0dc4 2000 0dcc 2000 0dcc 2000     ... ... ... ... 
20000ddc:	0dd4 2000 0dd4 2000 0ddc 2000 0ddc 2000     ... ... ... ... 
20000dec:	0de4 2000 0de4 2000 0dec 2000 0dec 2000     ... ... ... ... 
20000dfc:	0df4 2000 0df4 2000 0dfc 2000 0dfc 2000     ... ... ... ... 
20000e0c:	0e04 2000 0e04 2000 0e0c 2000 0e0c 2000     ... ... ... ... 
20000e1c:	0e14 2000 0e14 2000 0e1c 2000 0e1c 2000     ... ... ... ... 
20000e2c:	0e24 2000 0e24 2000 0e2c 2000 0e2c 2000     $.. $.. ,.. ,.. 
20000e3c:	0e34 2000 0e34 2000 0e3c 2000 0e3c 2000     4.. 4.. <.. <.. 
20000e4c:	0e44 2000 0e44 2000 0e4c 2000 0e4c 2000     D.. D.. L.. L.. 
20000e5c:	0e54 2000 0e54 2000 0e5c 2000 0e5c 2000     T.. T.. \.. \.. 
20000e6c:	0e64 2000 0e64 2000 0e6c 2000 0e6c 2000     d.. d.. l.. l.. 
20000e7c:	0e74 2000 0e74 2000 0e7c 2000 0e7c 2000     t.. t.. |.. |.. 
20000e8c:	0e84 2000 0e84 2000 0e8c 2000 0e8c 2000     ... ... ... ... 
20000e9c:	0e94 2000 0e94 2000 0e9c 2000 0e9c 2000     ... ... ... ... 
20000eac:	0ea4 2000 0ea4 2000 0eac 2000 0eac 2000     ... ... ... ... 
20000ebc:	0eb4 2000 0eb4 2000 0ebc 2000 0ebc 2000     ... ... ... ... 
20000ecc:	0ec4 2000 0ec4 2000 0ecc 2000 0ecc 2000     ... ... ... ... 
20000edc:	0ed4 2000 0ed4 2000 0edc 2000 0edc 2000     ... ... ... ... 
20000eec:	0ee4 2000 0ee4 2000 0eec 2000 0eec 2000     ... ... ... ... 
20000efc:	0ef4 2000 0ef4 2000 0efc 2000 0efc 2000     ... ... ... ... 
20000f0c:	0f04 2000 0f04 2000 0f0c 2000 0f0c 2000     ... ... ... ... 
20000f1c:	0f14 2000 0f14 2000 0f1c 2000 0f1c 2000     ... ... ... ... 
20000f2c:	0f24 2000 0f24 2000 0f2c 2000 0f2c 2000     $.. $.. ,.. ,.. 
20000f3c:	0f34 2000 0f34 2000 0f3c 2000 0f3c 2000     4.. 4.. <.. <.. 
20000f4c:	0f44 2000 0f44 2000 0f4c 2000 0f4c 2000     D.. D.. L.. L.. 
20000f5c:	0f54 2000 0f54 2000 0f5c 2000 0f5c 2000     T.. T.. \.. \.. 
20000f6c:	0f64 2000 0f64 2000 0f6c 2000 0f6c 2000     d.. d.. l.. l.. 
20000f7c:	0f74 2000 0f74 2000 0f7c 2000 0f7c 2000     t.. t.. |.. |.. 

20000f8c <__malloc_sbrk_base>:
20000f8c:	ffff ffff                                   ....

20000f90 <__malloc_trim_threshold>:
20000f90:	0000 0002                                   ....

20000f94 <__atexit_recursive_mutex>:
20000f94:	8330 2000                                   0.. 
